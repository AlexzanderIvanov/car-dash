
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ba38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f64  0802bc08  0802bc08  0003bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00004742  08030b6c  08030b6c  00040b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000354f8  080352b0  080352b0  000452b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000064c  0806a7a8  0806a7a8  0007a7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0806adf4  0806adf4  00080144  2**0
                  CONTENTS
  7 .ARM          00000008  0806adf4  0806adf4  0007adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0806adfc  0806adfc  00080144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0806adfc  0806adfc  0007adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806ae10  0806ae10  0007ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000144  20000000  0806ae18  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cd70  20000144  0806af5c  00080144  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ceb4  0806af5c  0008ceb4  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080144  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006f86b  00000000  00000000  00080174  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00011114  00000000  00000000  000ef9df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005268  00000000  00000000  00100af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004ba8  00000000  00000000  00105d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003dd52  00000000  00000000  0010a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004cd91  00000000  00000000  0014865a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001391f9  00000000  00000000  001953eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002ce5e4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000164c0  00000000  00000000  002ce6e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000144 	.word	0x20000144
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802bbf0 	.word	0x0802bbf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000148 	.word	0x20000148
 800020c:	0802bbf0 	.word	0x0802bbf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	200001b8 	.word	0x200001b8

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b0a4      	sub	sp, #144	; 0x90
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6200, 6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4ba3      	ldr	r3, [pc, #652]	; (8000dd8 <SecondTask+0x298>)
 8000b4a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b9e      	ldr	r3, [pc, #632]	; (8000ddc <SecondTask+0x29c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c fd78 	bl	800d660 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00c fa87 	bl	800d084 <osDelay>

	static const int demo_mode = 1;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <SecondTask+0x2a0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 81cc 	beq.w	8000f18 <SecondTask+0x3d8>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <SecondTask+0x2a4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <SecondTask+0x2a4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <SecondTask+0x2a4>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b93      	ldr	r3, [pc, #588]	; (8000de8 <SecondTask+0x2a8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b91      	ldr	r3, [pc, #580]	; (8000de8 <SecondTask+0x2a8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a8e      	ldr	r2, [pc, #568]	; (8000de8 <SecondTask+0x2a8>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b8e      	ldr	r3, [pc, #568]	; (8000dec <SecondTask+0x2ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <SecondTask+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a89      	ldr	r2, [pc, #548]	; (8000dec <SecondTask+0x2ac>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <SecondTask+0x2b0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a377      	add	r3, pc, #476	; (adr r3, 8000db0 <SecondTask+0x270>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b84      	ldr	r3, [pc, #528]	; (8000df4 <SecondTask+0x2b4>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b82      	ldr	r3, [pc, #520]	; (8000df0 <SecondTask+0x2b0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a371      	add	r3, pc, #452	; (adr r3, 8000db8 <SecondTask+0x278>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a79      	ldr	r2, [pc, #484]	; (8000df0 <SecondTask+0x2b0>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <SecondTask+0x2b8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a366      	add	r3, pc, #408	; (adr r3, 8000db0 <SecondTask+0x270>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <SecondTask+0x2bc>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <SecondTask+0x2b8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a362      	add	r3, pc, #392	; (adr r3, 8000dc0 <SecondTask+0x280>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <SecondTask+0x2b8>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <SecondTask+0x2c0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <SecondTask+0x2c0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <SecondTask+0x2c0>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <SecondTask+0x2c4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <SecondTask+0x2c8>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <SecondTask+0x2c4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a34f      	add	r3, pc, #316	; (adr r3, 8000dc8 <SecondTask+0x288>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <SecondTask+0x2c4>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b59      	ldr	r3, [pc, #356]	; (8000e0c <SecondTask+0x2cc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <SecondTask+0x2d0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a55      	ldr	r2, [pc, #340]	; (8000e0c <SecondTask+0x2cc>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <SecondTask+0x2d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <SecondTask+0x2d0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <SecondTask+0x2d0>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <SecondTask+0x2d4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <SecondTask+0x2d4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a4b      	ldr	r2, [pc, #300]	; (8000e14 <SecondTask+0x2d4>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt_2 >= 760) ? 500: egt_2 +12;
 8000cea:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <SecondTask+0x2d8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <SecondTask+0x2d8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a45      	ldr	r2, [pc, #276]	; (8000e18 <SecondTask+0x2d8>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <SecondTask+0x2dc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <SecondTask+0x2dc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <SecondTask+0x2dc>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <SecondTask+0x2e0>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db01      	blt.n	8000d32 <SecondTask+0x1f2>
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <SecondTask+0x2e4>)
 8000d30:	e010      	b.n	8000d54 <SecondTask+0x214>
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <SecondTask+0x2e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc1e 	bl	8000578 <__aeabi_f2d>
 8000d3c:	a324      	add	r3, pc, #144	; (adr r3, 8000dd0 <SecondTask+0x290>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fabb 	bl	80002bc <__adddf3>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fcf3 	bl	8000738 <__aeabi_d2f>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <SecondTask+0x2e0>)
 8000d56:	6013      	str	r3, [r2, #0]
			ing_ang = (ing_ang >= 20.0) ? 10.0: ing_ang + 0.6;
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <SecondTask+0x2e8>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	db01      	blt.n	8000d70 <SecondTask+0x230>
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <SecondTask+0x2e4>)
 8000d6e:	e010      	b.n	8000d92 <SecondTask+0x252>
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <SecondTask+0x2e8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fbff 	bl	8000578 <__aeabi_f2d>
 8000d7a:	a315      	add	r3, pc, #84	; (adr r3, 8000dd0 <SecondTask+0x290>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	f7ff fa9c 	bl	80002bc <__adddf3>
 8000d84:	4603      	mov	r3, r0
 8000d86:	460c      	mov	r4, r1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	f7ff fcd4 	bl	8000738 <__aeabi_d2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <SecondTask+0x2e8>)
 8000d94:	6013      	str	r3, [r2, #0]
			ve = (ve >= 21.0) ? 10.0: ve + 0.6;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SecondTask+0x2ec>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8000da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	db42      	blt.n	8000e30 <SecondTask+0x2f0>
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SecondTask+0x2e4>)
 8000dac:	e051      	b.n	8000e52 <SecondTask+0x312>
 8000dae:	bf00      	nop
 8000db0:	66666666 	.word	0x66666666
 8000db4:	3ff66666 	.word	0x3ff66666
 8000db8:	9999999a 	.word	0x9999999a
 8000dbc:	3fa99999 	.word	0x3fa99999
 8000dc0:	eb851eb8 	.word	0xeb851eb8
 8000dc4:	3faeb851 	.word	0x3faeb851
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	3fb99999 	.word	0x3fb99999
 8000dd0:	33333333 	.word	0x33333333
 8000dd4:	3fe33333 	.word	0x3fe33333
 8000dd8:	0802bc08 	.word	0x0802bc08
 8000ddc:	2000880c 	.word	0x2000880c
 8000de0:	0802c66c 	.word	0x0802c66c
 8000de4:	20000004 	.word	0x20000004
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000010 	.word	0x20000010
 8000df4:	3f19999a 	.word	0x3f19999a
 8000df8:	20000014 	.word	0x20000014
 8000dfc:	3f266666 	.word	0x3f266666
 8000e00:	200003cc 	.word	0x200003cc
 8000e04:	200003d0 	.word	0x200003d0
 8000e08:	3dcccccd 	.word	0x3dcccccd
 8000e0c:	200003d4 	.word	0x200003d4
 8000e10:	200003d8 	.word	0x200003d8
 8000e14:	200003dc 	.word	0x200003dc
 8000e18:	200003e0 	.word	0x200003e0
 8000e1c:	200003e4 	.word	0x200003e4
 8000e20:	200003e8 	.word	0x200003e8
 8000e24:	41200000 	.word	0x41200000
 8000e28:	200003ec 	.word	0x200003ec
 8000e2c:	200003f8 	.word	0x200003f8
 8000e30:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <SecondTask+0x488>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb9f 	bl	8000578 <__aeabi_f2d>
 8000e3a:	a361      	add	r3, pc, #388	; (adr r3, 8000fc0 <SecondTask+0x480>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fa3c 	bl	80002bc <__adddf3>
 8000e44:	4603      	mov	r3, r0
 8000e46:	460c      	mov	r4, r1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	f7ff fc74 	bl	8000738 <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <SecondTask+0x488>)
 8000e54:	6013      	str	r3, [r2, #0]
			boost_dc = (boost_dc >= 20.0) ? 10.0: boost_dc + 0.6;
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <SecondTask+0x48c>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	db01      	blt.n	8000e6e <SecondTask+0x32e>
 8000e6a:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <SecondTask+0x490>)
 8000e6c:	e010      	b.n	8000e90 <SecondTask+0x350>
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <SecondTask+0x48c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb80 	bl	8000578 <__aeabi_f2d>
 8000e78:	a351      	add	r3, pc, #324	; (adr r3, 8000fc0 <SecondTask+0x480>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fa1d 	bl	80002bc <__adddf3>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f7ff fc55 	bl	8000738 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <SecondTask+0x48c>)
 8000e92:	6013      	str	r3, [r2, #0]
			boost_trgt = (boost_trgt >= 23) ? 10: boost_trgt + 1;
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <SecondTask+0x494>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b16      	cmp	r3, #22
 8000e9a:	dc03      	bgt.n	8000ea4 <SecondTask+0x364>
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <SecondTask+0x494>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <SecondTask+0x366>
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <SecondTask+0x494>)
 8000ea8:	6013      	str	r3, [r2, #0]
			injector_dc = (injector_dc >= 24.0) ? 10.0: injector_dc + 0.6;
 8000eaa:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <SecondTask+0x498>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	db01      	blt.n	8000ec2 <SecondTask+0x382>
 8000ebe:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <SecondTask+0x490>)
 8000ec0:	e010      	b.n	8000ee4 <SecondTask+0x3a4>
 8000ec2:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <SecondTask+0x498>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb56 	bl	8000578 <__aeabi_f2d>
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <SecondTask+0x480>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f9f3 	bl	80002bc <__adddf3>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4618      	mov	r0, r3
 8000edc:	4621      	mov	r1, r4
 8000ede:	f7ff fc2b 	bl	8000738 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a3c      	ldr	r2, [pc, #240]	; (8000fd8 <SecondTask+0x498>)
 8000ee6:	6013      	str	r3, [r2, #0]
			vspd = (vspd >= 300) ? 100: vspd + 2;
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <SecondTask+0x49c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ef0:	da03      	bge.n	8000efa <SecondTask+0x3ba>
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <SecondTask+0x49c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	e000      	b.n	8000efc <SecondTask+0x3bc>
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	4a37      	ldr	r2, [pc, #220]	; (8000fdc <SecondTask+0x49c>)
 8000efe:	6013      	str	r3, [r2, #0]
			emu_errors = 0;
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <SecondTask+0x4a0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
			emu_protection = 0;
 8000f06:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <SecondTask+0x4a4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
			eng_protection_code = 0;
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <SecondTask+0x4a8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
			check_eng_code = 0;
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <SecondTask+0x4ac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v,
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <SecondTask+0x4b0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <SecondTask+0x4b4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <SecondTask+0x4b8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <SecondTask+0x4bc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <SecondTask+0x4c0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <SecondTask+0x4c4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <SecondTask+0x4c8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	623b      	str	r3, [r7, #32]
 8000f42:	4b32      	ldr	r3, [pc, #200]	; (800100c <SecondTask+0x4cc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <SecondTask+0x4d0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <SecondTask+0x4d4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <SecondTask+0x4d8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <SecondTask+0x4dc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <SecondTask+0x4e0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <SecondTask+0x4e4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <SecondTask+0x4a0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <SecondTask+0x4a4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SecondTask+0x488>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <SecondTask+0x48c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <SecondTask+0x494>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	653b      	str	r3, [r7, #80]	; 0x50
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SecondTask+0x498>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SecondTask+0x4ac>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <SecondTask+0x4a8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <SecondTask+0x49c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
		ing_ang, emu_errors, emu_protection, ve, boost_dc, boost_trgt, injector_dc, check_eng_code, eng_protection_code, vspd};
	    xQueueSend(messageQ, &dispVals,0);
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <SecondTask+0x4e8>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f107 0108 	add.w	r1, r7, #8
 8000faa:	2300      	movs	r3, #0
 8000fac:	2200      	movs	r2, #0
 8000fae:	f00c fb57 	bl	800d660 <xQueueGenericSend>
		osDelay(50);
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f00c f866 	bl	800d084 <osDelay>
	{
 8000fb8:	e5dd      	b.n	8000b76 <SecondTask+0x36>
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	33333333 	.word	0x33333333
 8000fc4:	3fe33333 	.word	0x3fe33333
 8000fc8:	200003f8 	.word	0x200003f8
 8000fcc:	200003fc 	.word	0x200003fc
 8000fd0:	41200000 	.word	0x41200000
 8000fd4:	20000400 	.word	0x20000400
 8000fd8:	20000404 	.word	0x20000404
 8000fdc:	200003c8 	.word	0x200003c8
 8000fe0:	200003f0 	.word	0x200003f0
 8000fe4:	200003f4 	.word	0x200003f4
 8000fe8:	2000040c 	.word	0x2000040c
 8000fec:	20000408 	.word	0x20000408
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000010 	.word	0x20000010
 8001000:	20000014 	.word	0x20000014
 8001004:	200003cc 	.word	0x200003cc
 8001008:	200003d0 	.word	0x200003d0
 800100c:	200003d4 	.word	0x200003d4
 8001010:	200003d8 	.word	0x200003d8
 8001014:	200003dc 	.word	0x200003dc
 8001018:	200003e0 	.word	0x200003e0
 800101c:	200003e4 	.word	0x200003e4
 8001020:	200003e8 	.word	0x200003e8
 8001024:	200003ec 	.word	0x200003ec
 8001028:	20008808 	.word	0x20008808

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f002 fd96 	bl	8003b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f85f 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f001 fa69 	bl	8002510 <MX_GPIO_Init>
  MX_ADC3_Init();
 800103e:	f000 f917 	bl	8001270 <MX_ADC3_Init>
  MX_CRC_Init();
 8001042:	f000 fba1 	bl	8001788 <MX_CRC_Init>
  MX_DCMI_Init();
 8001046:	f000 fbc1 	bl	80017cc <MX_DCMI_Init>
  MX_DMA2D_Init();
 800104a:	f000 fbf3 	bl	8001834 <MX_DMA2D_Init>
  MX_FMC_Init();
 800104e:	f001 f9b3 	bl	80023b8 <MX_FMC_Init>
  MX_LTDC_Init();
 8001052:	f000 fc21 	bl	8001898 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001056:	f000 fca1 	bl	800199c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800105a:	f000 fccb 	bl	80019f4 <MX_RTC_Init>
  MX_SAI2_Init();
 800105e:	f000 fd71 	bl	8001b44 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001062:	f000 fe17 	bl	8001c94 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001066:	f000 fe35 	bl	8001cd4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800106a:	f000 fe63 	bl	8001d34 <MX_SPI2_Init>
  MX_TIM1_Init();
 800106e:	f000 fe9f 	bl	8001db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001072:	f000 ff49 	bl	8001f08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001076:	f000 ffbd 	bl	8001ff4 <MX_TIM3_Init>
  MX_TIM5_Init();
 800107a:	f001 f831 	bl	80020e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800107e:	f001 f8a5 	bl	80021cc <MX_TIM8_Init>
  MX_TIM12_Init();
 8001082:	f001 f8f5 	bl	8002270 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001086:	f001 f937 	bl	80022f8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800108a:	f001 f965 	bl	8002358 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800108e:	f00b fcb5 	bl	800c9fc <MX_FATFS_Init>
  MX_CAN1_Init();
 8001092:	f000 f93f 	bl	8001314 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8001096:	f00f f929 	bl	80102ec <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0xbc>)
 800109c:	f107 041c 	add.w	r4, r7, #28
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00b ff99 	bl	800cfec <osThreadCreate>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <main+0xc0>)
 80010be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <main+0xc4>)
 80010c2:	463c      	mov	r4, r7
 80010c4:	461d      	mov	r5, r3
 80010c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 80010d2:	463b      	mov	r3, r7
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00b ff88 	bl	800cfec <osThreadCreate>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <main+0xc8>)
 80010e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010e2:	f00b ff60 	bl	800cfa6 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0xba>
 80010e8:	0802bc40 	.word	0x0802bc40
 80010ec:	2000c97c 	.word	0x2000c97c
 80010f0:	0802bc64 	.word	0x0802bc64
 80010f4:	2000c464 	.word	0x2000c464

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0b4      	sub	sp, #208	; 0xd0
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f029 fdf5 	bl	802acf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	2284      	movs	r2, #132	; 0x84
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f029 fde6 	bl	802acf6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800112a:	f005 ff1b 	bl	8006f64 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <SystemClock_Config+0x16c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <SystemClock_Config+0x16c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <SystemClock_Config+0x16c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <SystemClock_Config+0x170>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <SystemClock_Config+0x170>)
 800114c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <SystemClock_Config+0x170>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800115e:	2309      	movs	r3, #9
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001180:	2319      	movs	r3, #25
 8001182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001186:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800118a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001194:	2309      	movs	r3, #9
 8001196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800119e:	4618      	mov	r0, r3
 80011a0:	f006 f802 	bl	80071a8 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011aa:	f001 fbe5 	bl	8002978 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ae:	f005 fee9 	bl	8006f84 <HAL_PWREx_EnableOverDrive>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b8:	f001 fbde 	bl	8002978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011e2:	2106      	movs	r1, #6
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fa83 	bl	80076f0 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80011f0:	f001 fbc2 	bl	8002978 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SystemClock_Config+0x174>)
 80011f6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001208:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800120c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800120e:	2305      	movs	r3, #5
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800122e:	2300      	movs	r3, #0
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001232:	2300      	movs	r3, #0
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001236:	2300      	movs	r3, #0
 8001238:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800123a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f006 fc53 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001258:	f001 fb8e 	bl	8002978 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	37d0      	adds	r7, #208	; 0xd0
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000
 800126c:	01b00868 	.word	0x01b00868

08001270 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_ADC3_Init+0x98>)
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_ADC3_Init+0x9c>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_ADC3_Init+0x98>)
 800128a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800128e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_ADC3_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_ADC3_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_ADC3_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_ADC3_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_ADC3_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_ADC3_Init+0x98>)
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <MX_ADC3_Init+0xa0>)
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_ADC3_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_ADC3_Init+0x98>)
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_ADC3_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_ADC3_Init+0x98>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_ADC3_Init+0x98>)
 80012d2:	f002 fc95 	bl	8003c00 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80012dc:	f001 fb4c 	bl	8002978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_ADC3_Init+0x98>)
 80012f2:	f002 fcc9 	bl	8003c88 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012fc:	f001 fb3c 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000c580 	.word	0x2000c580
 800130c:	40012200 	.word	0x40012200
 8001310:	0f000001 	.word	0x0f000001

08001314 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <MX_CAN1_Init+0xc8>)
 800131c:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <MX_CAN1_Init+0xcc>)
 800131e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001322:	2214      	movs	r2, #20
 8001324:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_CAN1_Init+0xc8>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001334:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001338:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_CAN1_Init+0xc8>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001348:	2200      	movs	r2, #0
 800134a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_CAN1_Init+0xc8>)
 800134e:	2200      	movs	r2, #0
 8001350:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001354:	2200      	movs	r2, #0
 8001356:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_CAN1_Init+0xc8>)
 800135a:	2200      	movs	r2, #0
 800135c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001360:	2200      	movs	r2, #0
 8001362:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <MX_CAN1_Init+0xc8>)
 8001366:	f002 fed3 	bl	8004110 <HAL_CAN_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001370:	f001 fb02 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001398:	230e      	movs	r3, #14
 800139a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_CAN1_Init+0xc8>)
 80013a2:	f002 ffb1 	bl	8004308 <HAL_CAN_ConfigFilter>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80013ac:	f001 fae4 	bl	8002978 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <MX_CAN1_Init+0xc8>)
 80013b2:	f003 f889 	bl	80044c8 <HAL_CAN_Start>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80013bc:	f001 fadc 	bl	8002978 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80013c0:	2102      	movs	r1, #2
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_CAN1_Init+0xc8>)
 80013c4:	f003 f9d6 	bl	8004774 <HAL_CAN_ActivateNotification>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80013ce:	f001 fad3 	bl	8002978 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000c954 	.word	0x2000c954
 80013e0:	40006400 	.word	0x40006400

080013e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80013ec:	4ba6      	ldr	r3, [pc, #664]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80013ee:	4aa7      	ldr	r2, [pc, #668]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f003 f8ac 	bl	8004550 <HAL_CAN_GetRxMessage>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80013fe:	f001 fabb 	bl	8002978 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800140a:	d145      	bne.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800140c:	4b9f      	ldr	r3, [pc, #636]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d141      	bne.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001414:	4b9d      	ldr	r3, [pc, #628]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b08      	cmp	r3, #8
 800141a:	d13d      	bne.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 800141c:	4b9a      	ldr	r3, [pc, #616]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b99      	ldr	r3, [pc, #612]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 uint8_t tps_in = RxData[2];
 8001430:	4b95      	ldr	r3, [pc, #596]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	 uint8_t iat_in = RxData[3];
 8001438:	4b93      	ldr	r3, [pc, #588]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001440:	4b91      	ldr	r3, [pc, #580]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b90      	ldr	r3, [pc, #576]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001448:	795b      	ldrb	r3, [r3, #5]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	857b      	strh	r3, [r7, #42]	; 0x2a

	 rpm = (int)rpm_in;
 8001454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001456:	4a8e      	ldr	r2, [pc, #568]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001458:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 800145a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001468:	ee17 2a90 	vmov	r2, s15
 800146c:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 800146e:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 8001470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001474:	4a88      	ldr	r2, [pc, #544]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001476:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8001478:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001490:	ee17 2a90 	vmov	r2, s15
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001496:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f240 6202 	movw	r2, #1538	; 0x602
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d13a      	bne.n	800151a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d136      	bne.n	800151a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 80014ac:	4b77      	ldr	r3, [pc, #476]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d132      	bne.n	800151a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
  {
	 uint16_t vspd_in = (RxData[0] << 0) | (RxData[1] << 8);
 80014b4:	4b74      	ldr	r3, [pc, #464]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b73      	ldr	r3, [pc, #460]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	853b      	strh	r3, [r7, #40]	; 0x28
	 uint8_t oil_tmp_in = RxData[3];
 80014c8:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014ca:	78db      	ldrb	r3, [r3, #3]
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 uint8_t oil_press_in = RxData[4];
 80014d0:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014da:	799b      	ldrb	r3, [r3, #6]
 80014dc:	b21a      	sxth	r2, r3
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80014e0:	79db      	ldrb	r3, [r3, #7]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	84bb      	strh	r3, [r7, #36]	; 0x24

	 vspd = (int) vspd_in;
 80014ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014ee:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80014f0:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 80014f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f6:	4a6b      	ldr	r2, [pc, #428]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80014f8:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 80014fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001506:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001518:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f240 6203 	movw	r2, #1539	; 0x603
 8001522:	4293      	cmp	r3, r2
 8001524:	d143      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d13f      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b08      	cmp	r3, #8
 8001534:	d13b      	bne.n	80015ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
  {
	 uint8_t ing_ang_in = RxData[0];
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t lambda_in = RxData[2];
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21b      	sxth	r3, r3
 8001558:	843b      	strh	r3, [r7, #32]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800155c:	799b      	ldrb	r3, [r3, #6]
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001562:	79db      	ldrb	r3, [r3, #7]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21b      	sxth	r3, r3
 800156c:	83fb      	strh	r3, [r7, #30]

	 ing_ang = ((float) ing_ang_in) * 0.5f;
 800156e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800157e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001588:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 80015a2:	8c3b      	ldrh	r3, [r7, #32]
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80015a6:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 80015a8:	8bfb      	ldrh	r3, [r7, #30]
 80015aa:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 80015ac:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f240 6204 	movw	r2, #1540	; 0x604
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d128      	bne.n	8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d124      	bne.n	8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	83bb      	strh	r3, [r7, #28]
	 uint16_t emu_errors_in = (RxData[4] << 0) | (RxData[5] << 8);
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80015e6:	795b      	ldrb	r3, [r3, #5]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	837b      	strh	r3, [r7, #26]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80015f2:	8bbb      	ldrh	r3, [r7, #28]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>
 8001600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001604:	edc7 7a05 	vstr	s15, [r7, #20]
	 batt_v = battery_voltage;
 8001608:	4a30      	ldr	r2, [pc, #192]	; (80016cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
	 emu_errors = (int) emu_errors_in;
 800160e:	8b7b      	ldrh	r3, [r7, #26]
 8001610:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8001612:	6013      	str	r3, [r2, #0]

  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800161c:	d177      	bne.n	800170e <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d173      	bne.n	800170e <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d16f      	bne.n	800170e <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	74fb      	strb	r3, [r7, #19]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	b21a      	sxth	r2, r3
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800163c:	789b      	ldrb	r3, [r3, #2]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	823b      	strh	r3, [r7, #16]
	 uint16_t ve_in = (RxData[3] << 0) | (RxData[4] << 8);
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800164a:	78db      	ldrb	r3, [r3, #3]
 800164c:	b21a      	sxth	r2, r3
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	81fb      	strh	r3, [r7, #14]
	 uint8_t boost_trgt_in = RxData[5];
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800165e:	795b      	ldrb	r3, [r3, #5]
 8001660:	737b      	strb	r3, [r7, #13]
	 uint8_t emu_protection_in = RxData[5];
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001664:	795b      	ldrb	r3, [r3, #5]
 8001666:	733b      	strb	r3, [r7, #12]
	 uint8_t injector_dc_in = RxData[7];
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800166a:	79db      	ldrb	r3, [r3, #7]
 800166c:	72fb      	strb	r3, [r7, #11]

  	 lambda_targ = ((float)lambda_targ_in) / 100;
 800166e:	7cfb      	ldrb	r3, [r7, #19]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001678:	eddf 6a16 	vldr	s13, [pc, #88]	; 80016d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>
 800167c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001682:	edc3 7a00 	vstr	s15, [r3]
 8001686:	e029      	b.n	80016dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>
 8001688:	2000c670 	.word	0x2000c670
 800168c:	2000c32c 	.word	0x2000c32c
 8001690:	20000004 	.word	0x20000004
 8001694:	20000008 	.word	0x20000008
 8001698:	200003d8 	.word	0x200003d8
 800169c:	200003e4 	.word	0x200003e4
 80016a0:	200003c8 	.word	0x200003c8
 80016a4:	200003cc 	.word	0x200003cc
 80016a8:	3d800000 	.word	0x3d800000
 80016ac:	200003d0 	.word	0x200003d0
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	200003ec 	.word	0x200003ec
 80016b8:	3c000000 	.word	0x3c000000
 80016bc:	20000010 	.word	0x20000010
 80016c0:	200003dc 	.word	0x200003dc
 80016c4:	200003e0 	.word	0x200003e0
 80016c8:	3cdd2f1b 	.word	0x3cdd2f1b
 80016cc:	200003e8 	.word	0x200003e8
 80016d0:	200003f0 	.word	0x200003f0
 80016d4:	42c80000 	.word	0x42c80000
 80016d8:	20000014 	.word	0x20000014
  	 fuel_press = ((int)fuel_p_d);
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 80016e0:	6013      	str	r3, [r2, #0]
  	 ve = (float) ve_in;
 80016e2:	89fb      	ldrh	r3, [r7, #14]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
  	 boost_trgt = (int) boost_trgt_in;
 80016f2:	7b7b      	ldrb	r3, [r7, #13]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 80016f6:	6013      	str	r3, [r2, #0]
  	 emu_protection = (int) emu_protection_in;
 80016f8:	7b3b      	ldrb	r3, [r7, #12]
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80016fc:	6013      	str	r3, [r2, #0]
  	 injector_dc = (float) injector_dc_in;
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
    }

  if ((RxHeader.StdId == 0x501) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f240 5201 	movw	r2, #1281	; 0x501
 8001716:	4293      	cmp	r3, r2
 8001718:	d11e      	bne.n	8001758 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11a      	bne.n	8001758 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d116      	bne.n	8001758 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
  {
	uint8_t eng_protection_code_in = RxData[0];
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	72bb      	strb	r3, [r7, #10]
	uint8_t check_eng_code_in = RxData[1];
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	727b      	strb	r3, [r7, #9]
	 uint8_t boost_dc_in = RxData[2];
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 8001738:	789b      	ldrb	r3, [r3, #2]
 800173a:	723b      	strb	r3, [r7, #8]

	 eng_protection_code = (int)eng_protection_code_in;
 800173c:	7abb      	ldrb	r3, [r7, #10]
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 8001740:	6013      	str	r3, [r2, #0]
	 check_eng_code = (int) check_eng_code_in;
 8001742:	7a7b      	ldrb	r3, [r7, #9]
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x39c>)
 8001746:	6013      	str	r3, [r2, #0]
	 boost_dc = (float) boost_dc_in;
 8001748:	7a3b      	ldrb	r3, [r7, #8]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>)
 8001754:	edc3 7a00 	vstr	s15, [r3]

  }
}
 8001758:	bf00      	nop
 800175a:	3730      	adds	r7, #48	; 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200003d4 	.word	0x200003d4
 8001764:	200003f8 	.word	0x200003f8
 8001768:	20000400 	.word	0x20000400
 800176c:	200003f4 	.word	0x200003f4
 8001770:	20000404 	.word	0x20000404
 8001774:	2000c32c 	.word	0x2000c32c
 8001778:	2000c670 	.word	0x2000c670
 800177c:	2000040c 	.word	0x2000040c
 8001780:	20000408 	.word	0x20000408
 8001784:	200003fc 	.word	0x200003fc

08001788 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_CRC_Init+0x3c>)
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <MX_CRC_Init+0x40>)
 8001790:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_CRC_Init+0x3c>)
 8001794:	2200      	movs	r2, #0
 8001796:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_CRC_Init+0x3c>)
 800179a:	2200      	movs	r2, #0
 800179c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_CRC_Init+0x3c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_CRC_Init+0x3c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_CRC_Init+0x3c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_CRC_Init+0x3c>)
 80017b2:	f003 fb41 	bl	8004e38 <HAL_CRC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80017bc:	f001 f8dc 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000c4d8 	.word	0x2000c4d8
 80017c8:	40023000 	.word	0x40023000

080017cc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_DCMI_Init+0x60>)
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <MX_DCMI_Init+0x64>)
 80017d4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_DCMI_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_DCMI_Init+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_DCMI_Init+0x60>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_DCMI_Init+0x60>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_DCMI_Init+0x60>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <MX_DCMI_Init+0x60>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_DCMI_Init+0x60>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_DCMI_Init+0x60>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_DCMI_Init+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_DCMI_Init+0x60>)
 800180e:	2200      	movs	r2, #0
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_DCMI_Init+0x60>)
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_DCMI_Init+0x60>)
 800181a:	f003 fbf7 	bl	800500c <HAL_DCMI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001824:	f001 f8a8 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000c488 	.word	0x2000c488
 8001830:	50050000 	.word	0x50050000

08001834 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_DMA2D_Init+0x5c>)
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <MX_DMA2D_Init+0x60>)
 800183c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_DMA2D_Init+0x5c>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_DMA2D_Init+0x5c>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_DMA2D_Init+0x5c>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_DMA2D_Init+0x5c>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_DMA2D_Init+0x5c>)
 8001858:	2200      	movs	r2, #0
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_DMA2D_Init+0x5c>)
 800185e:	2200      	movs	r2, #0
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_DMA2D_Init+0x5c>)
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <MX_DMA2D_Init+0x5c>)
 800186a:	f003 fce3 	bl	8005234 <HAL_DMA2D_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001874:	f001 f880 	bl	8002978 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001878:	2101      	movs	r1, #1
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_DMA2D_Init+0x5c>)
 800187c:	f003 ffa4 	bl	80057c8 <HAL_DMA2D_ConfigLayer>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001886:	f001 f877 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000c7d4 	.word	0x2000c7d4
 8001894:	4002b000 	.word	0x4002b000

08001898 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2234      	movs	r2, #52	; 0x34
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f029 fa26 	bl	802acf6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018ac:	4a3a      	ldr	r2, [pc, #232]	; (8001998 <MX_LTDC_Init+0x100>)
 80018ae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018ca:	2228      	movs	r2, #40	; 0x28
 80018cc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018d0:	2209      	movs	r2, #9
 80018d2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018d6:	2235      	movs	r2, #53	; 0x35
 80018d8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018dc:	220b      	movs	r2, #11
 80018de:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018e2:	f240 2215 	movw	r2, #533	; 0x215
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018ea:	f240 121b 	movw	r2, #283	; 0x11b
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018f2:	f240 2235 	movw	r2, #565	; 0x235
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <MX_LTDC_Init+0xfc>)
 80018fa:	f240 121d 	movw	r2, #285	; 0x11d
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <MX_LTDC_Init+0xfc>)
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_LTDC_Init+0xfc>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <MX_LTDC_Init+0xfc>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001918:	481e      	ldr	r0, [pc, #120]	; (8001994 <MX_LTDC_Init+0xfc>)
 800191a:	f004 ff8b 	bl	8006834 <HAL_LTDC_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001924:	f001 f828 	bl	8002978 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800192c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001930:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001936:	f44f 7388 	mov.w	r3, #272	; 0x110
 800193a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001940:	23ff      	movs	r3, #255	; 0xff
 8001942:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800194e:	2305      	movs	r3, #5
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001952:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001958:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800195e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_LTDC_Init+0xfc>)
 800197e:	f005 f8e1 	bl	8006b44 <HAL_LTDC_ConfigLayer>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001988:	f000 fff6 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3738      	adds	r7, #56	; 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000c5c8 	.word	0x2000c5c8
 8001998:	40016800 	.word	0x40016800

0800199c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <MX_QUADSPI_Init+0x54>)
 80019a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019a8:	22ff      	movs	r2, #255	; 0xff
 80019aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_QUADSPI_Init+0x50>)
 80019d8:	f005 fb24 	bl	8007024 <HAL_QSPI_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80019e2:	f000 ffc9 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000c73c 	.word	0x2000c73c
 80019f0:	a0001000 	.word	0xa0001000

080019f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b092      	sub	sp, #72	; 0x48
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	222c      	movs	r2, #44	; 0x2c
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f029 f96d 	bl	802acf6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a1e:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <MX_RTC_Init+0x14c>)
 8001a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a28:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a2a:	227f      	movs	r2, #127	; 0x7f
 8001a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a30:	22ff      	movs	r2, #255	; 0xff
 8001a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a3a:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a46:	483d      	ldr	r0, [pc, #244]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a48:	f006 fd78 	bl	800853c <HAL_RTC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a52:	f000 ff91 	bl	8002978 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	4830      	ldr	r0, [pc, #192]	; (8001b3c <MX_RTC_Init+0x148>)
 8001a7a:	f006 fddb 	bl	8008634 <HAL_RTC_SetTime>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a84:	f000 ff78 	bl	8002978 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4824      	ldr	r0, [pc, #144]	; (8001b3c <MX_RTC_Init+0x148>)
 8001aaa:	f006 fe81 	bl	80087b0 <HAL_RTC_SetDate>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001ab4:	f000 ff60 	bl	8002978 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2201      	movs	r2, #1
 8001aec:	4619      	mov	r1, r3
 8001aee:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_RTC_Init+0x148>)
 8001af0:	f006 ff06 	bl	8008900 <HAL_RTC_SetAlarm>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001afa:	f000 ff3d 	bl	8002978 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <MX_RTC_Init+0x148>)
 8001b12:	f006 fef5 	bl	8008900 <HAL_RTC_SetAlarm>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001b1c:	f000 ff2c 	bl	8002978 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b20:	2202      	movs	r2, #2
 8001b22:	2100      	movs	r1, #0
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_RTC_Init+0x148>)
 8001b26:	f007 f875 	bl	8008c14 <HAL_RTCEx_SetTimeStamp>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001b30:	f000 ff22 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3748      	adds	r7, #72	; 0x48
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000c468 	.word	0x2000c468
 8001b40:	40002800 	.word	0x40002800

08001b44 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b48:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b4a:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <MX_SAI2_Init+0x140>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b6c:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b84:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b86:	4a40      	ldr	r2, [pc, #256]	; (8001c88 <MX_SAI2_Init+0x144>)
 8001b88:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b96:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bd8:	4829      	ldr	r0, [pc, #164]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bda:	f007 f871 	bl	8008cc0 <HAL_SAI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001be4:	f000 fec8 	bl	8002978 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <MX_SAI2_Init+0x14c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c38:	2208      	movs	r2, #8
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c6e:	f007 f827 	bl	8008cc0 <HAL_SAI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c78:	f000 fe7e 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000c3e0 	.word	0x2000c3e0
 8001c84:	40015c04 	.word	0x40015c04
 8001c88:	0002ee00 	.word	0x0002ee00
 8001c8c:	2000c6b8 	.word	0x2000c6b8
 8001c90:	40015c24 	.word	0x40015c24

08001c94 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <MX_SDMMC1_SD_Init+0x3c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <MX_SDMMC1_SD_Init+0x38>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	2000c4fc 	.word	0x2000c4fc
 8001cd0:	40012c00 	.word	0x40012c00

08001cd4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001cda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cde:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_SPDIFRX_Init+0x5c>)
 8001d1e:	f008 fa63 	bl	800a1e8 <HAL_SPDIFRX_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001d28:	f000 fe26 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000c788 	.word	0x2000c788

08001d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <MX_SPI2_Init+0x78>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d82:	2207      	movs	r2, #7
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d8e:	2208      	movs	r2, #8
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_SPI2_Init+0x74>)
 8001d94:	f008 fa84 	bl	800a2a0 <HAL_SPI_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d9e:	f000 fdeb 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000c37c 	.word	0x2000c37c
 8001dac:	40003800 	.word	0x40003800

08001db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b09a      	sub	sp, #104	; 0x68
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	222c      	movs	r2, #44	; 0x2c
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f028 ff83 	bl	802acf6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001df2:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <MX_TIM1_Init+0x154>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e1a:	4839      	ldr	r0, [pc, #228]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e1c:	f008 fad2 	bl	800a3c4 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e26:	f000 fda7 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e34:	4619      	mov	r1, r3
 8001e36:	4832      	ldr	r0, [pc, #200]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e38:	f008 fd7c 	bl	800a934 <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e42:	f000 fd99 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e46:	482e      	ldr	r0, [pc, #184]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e48:	f008 fb12 	bl	800a470 <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e52:	f000 fd91 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4825      	ldr	r0, [pc, #148]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e6a:	f009 f9dd 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001e74:	f000 fd80 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	; 0x60
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4818      	ldr	r0, [pc, #96]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001e9e:	f008 fc31 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ea8:	f000 fd66 	bl	8002978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001ee2:	f009 fa2f 	bl	800b344 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001eec:	f000 fd44 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <MX_TIM1_Init+0x150>)
 8001ef2:	f001 fa3b 	bl	800336c <HAL_TIM_MspPostInit>

}
 8001ef6:	bf00      	nop
 8001ef8:	3768      	adds	r7, #104	; 0x68
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000c914 	.word	0x2000c914
 8001f04:	40010000 	.word	0x40010000

08001f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f28:	463b      	mov	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	615a      	str	r2, [r3, #20]
 8001f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f60:	4823      	ldr	r0, [pc, #140]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f62:	f008 fa2f 	bl	800a3c4 <HAL_TIM_Base_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f6c:	f000 fd04 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f7e:	f008 fcd9 	bl	800a934 <HAL_TIM_ConfigClockSource>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f88:	f000 fcf6 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f8e:	f008 fa6f 	bl	800a470 <HAL_TIM_PWM_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f98:	f000 fcee 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fac:	f009 f93c 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fb6:	f000 fcdf 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fba:	2360      	movs	r3, #96	; 0x60
 8001fbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fd2:	f008 fb97 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fdc:	f000 fccc 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fe2:	f001 f9c3 	bl	800336c <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3738      	adds	r7, #56	; 0x38
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000c9c0 	.word	0x2000c9c0

08001ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002028:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <MX_TIM3_Init+0xe8>)
 800202a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <MX_TIM3_Init+0xe4>)
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <MX_TIM3_Init+0xe4>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800204a:	4823      	ldr	r0, [pc, #140]	; (80020d8 <MX_TIM3_Init+0xe4>)
 800204c:	f008 f9ba 	bl	800a3c4 <HAL_TIM_Base_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002056:	f000 fc8f 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002064:	4619      	mov	r1, r3
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002068:	f008 fc64 	bl	800a934 <HAL_TIM_ConfigClockSource>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002072:	f000 fc81 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002076:	4818      	ldr	r0, [pc, #96]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002078:	f008 f9fa 	bl	800a470 <HAL_TIM_PWM_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002082:	f000 fc79 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4810      	ldr	r0, [pc, #64]	; (80020d8 <MX_TIM3_Init+0xe4>)
 8002096:	f009 f8c7 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020a0:	f000 fc6a 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a4:	2360      	movs	r3, #96	; 0x60
 80020a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <MX_TIM3_Init+0xe4>)
 80020bc:	f008 fb22 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020c6:	f000 fc57 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <MX_TIM3_Init+0xe4>)
 80020cc:	f001 f94e 	bl	800336c <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3738      	adds	r7, #56	; 0x38
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000c2ac 	.word	0x2000c2ac
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08e      	sub	sp, #56	; 0x38
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <MX_TIM5_Init+0xe8>)
 8002116:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <MX_TIM5_Init+0xe4>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <MX_TIM5_Init+0xe4>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002136:	4823      	ldr	r0, [pc, #140]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002138:	f008 f944 	bl	800a3c4 <HAL_TIM_Base_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002142:	f000 fc19 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800214c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002150:	4619      	mov	r1, r3
 8002152:	481c      	ldr	r0, [pc, #112]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002154:	f008 fbee 	bl	800a934 <HAL_TIM_ConfigClockSource>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800215e:	f000 fc0b 	bl	8002978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002162:	4818      	ldr	r0, [pc, #96]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002164:	f008 f984 	bl	800a470 <HAL_TIM_PWM_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800216e:	f000 fc03 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	4619      	mov	r1, r3
 8002180:	4810      	ldr	r0, [pc, #64]	; (80021c4 <MX_TIM5_Init+0xe4>)
 8002182:	f009 f851 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800218c:	f000 fbf4 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002190:	2360      	movs	r3, #96	; 0x60
 8002192:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	220c      	movs	r2, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <MX_TIM5_Init+0xe4>)
 80021a8:	f008 faac 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80021b2:	f000 fbe1 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80021b6:	4803      	ldr	r0, [pc, #12]	; (80021c4 <MX_TIM5_Init+0xe4>)
 80021b8:	f001 f8d8 	bl	800336c <HAL_TIM_MspPostInit>

}
 80021bc:	bf00      	nop
 80021be:	3738      	adds	r7, #56	; 0x38
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000c980 	.word	0x2000c980
 80021c8:	40000c00 	.word	0x40000c00

080021cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021ea:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <MX_TIM8_Init+0x9c>)
 80021ec:	4a1f      	ldr	r2, [pc, #124]	; (800226c <MX_TIM8_Init+0xa0>)
 80021ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM8_Init+0x9c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <MX_TIM8_Init+0x9c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <MX_TIM8_Init+0x9c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <MX_TIM8_Init+0x9c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MX_TIM8_Init+0x9c>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <MX_TIM8_Init+0x9c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <MX_TIM8_Init+0x9c>)
 8002216:	f008 f8d5 	bl	800a3c4 <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002220:	f000 fbaa 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002228:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4619      	mov	r1, r3
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_TIM8_Init+0x9c>)
 8002232:	f008 fb7f 	bl	800a934 <HAL_TIM_ConfigClockSource>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800223c:	f000 fb9c 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_TIM8_Init+0x9c>)
 8002252:	f008 ffe9 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800225c:	f000 fb8c 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000c2ec 	.word	0x2000c2ec
 800226c:	40010400 	.word	0x40010400

08002270 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <MX_TIM12_Init+0x80>)
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <MX_TIM12_Init+0x84>)
 800228c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_TIM12_Init+0x80>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <MX_TIM12_Init+0x80>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_TIM12_Init+0x80>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <MX_TIM12_Init+0x80>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_TIM12_Init+0x80>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <MX_TIM12_Init+0x80>)
 80022ae:	f008 f8df 	bl	800a470 <HAL_TIM_PWM_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80022b8:	f000 fb5e 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM12_Init+0x80>)
 80022d4:	f008 fa16 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80022de:	f000 fb4b 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM12_Init+0x80>)
 80022e4:	f001 f842 	bl	800336c <HAL_TIM_MspPostInit>

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000c678 	.word	0x2000c678
 80022f4:	40001800 	.word	0x40001800

080022f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_USART1_UART_Init+0x58>)
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <MX_USART1_UART_Init+0x5c>)
 8002300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_USART1_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_USART1_UART_Init+0x58>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_USART1_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_USART1_UART_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_USART1_UART_Init+0x58>)
 800233c:	f009 f89e 	bl	800b47c <HAL_UART_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002346:	f000 fb17 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000c894 	.word	0x2000c894
 8002354:	40011000 	.word	0x40011000

08002358 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <MX_USART6_UART_Init+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART6_UART_Init+0x58>)
 800239c:	f009 f86e 	bl	800b47c <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80023a6:	f000 fae7 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000c814 	.word	0x2000c814
 80023b4:	40011400 	.word	0x40011400

080023b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
 80023cc:	615a      	str	r2, [r3, #20]
 80023ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <MX_FMC_Init+0x14c>)
 80023d2:	4a4d      	ldr	r2, [pc, #308]	; (8002508 <MX_FMC_Init+0x150>)
 80023d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80023d6:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <MX_FMC_Init+0x14c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <MX_FMC_Init+0x14c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <MX_FMC_Init+0x14c>)
 80023e4:	2204      	movs	r2, #4
 80023e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <MX_FMC_Init+0x14c>)
 80023ea:	2210      	movs	r2, #16
 80023ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <MX_FMC_Init+0x14c>)
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <MX_FMC_Init+0x14c>)
 80023f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023fc:	4b41      	ldr	r3, [pc, #260]	; (8002504 <MX_FMC_Init+0x14c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002402:	4b40      	ldr	r3, [pc, #256]	; (8002504 <MX_FMC_Init+0x14c>)
 8002404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002408:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800240a:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <MX_FMC_Init+0x14c>)
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002412:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <MX_FMC_Init+0x14c>)
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002418:	2302      	movs	r3, #2
 800241a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800241c:	2307      	movs	r3, #7
 800241e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002420:	2304      	movs	r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002424:	2307      	movs	r3, #7
 8002426:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002428:	2303      	movs	r3, #3
 800242a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002430:	2302      	movs	r3, #2
 8002432:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4832      	ldr	r0, [pc, #200]	; (8002504 <MX_FMC_Init+0x14c>)
 800243a:	f007 fe55 	bl	800a0e8 <HAL_SDRAM_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002444:	f000 fa98 	bl	8002978 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <MX_FMC_Init+0x154>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002452:	4b2e      	ldr	r3, [pc, #184]	; (800250c <MX_FMC_Init+0x154>)
 8002454:	2210      	movs	r2, #16
 8002456:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <MX_FMC_Init+0x154>)
 800245a:	2201      	movs	r2, #1
 800245c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <MX_FMC_Init+0x154>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002468:	4928      	ldr	r1, [pc, #160]	; (800250c <MX_FMC_Init+0x154>)
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <MX_FMC_Init+0x14c>)
 800246c:	f007 fe70 	bl	800a150 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002470:	2001      	movs	r0, #1
 8002472:	f001 fba3 	bl	8003bbc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <MX_FMC_Init+0x154>)
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <MX_FMC_Init+0x154>)
 800247e:	2210      	movs	r2, #16
 8002480:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <MX_FMC_Init+0x154>)
 8002484:	2201      	movs	r2, #1
 8002486:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <MX_FMC_Init+0x154>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800248e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002492:	491e      	ldr	r1, [pc, #120]	; (800250c <MX_FMC_Init+0x154>)
 8002494:	481b      	ldr	r0, [pc, #108]	; (8002504 <MX_FMC_Init+0x14c>)
 8002496:	f007 fe5b 	bl	800a150 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_FMC_Init+0x154>)
 800249c:	2203      	movs	r2, #3
 800249e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_FMC_Init+0x154>)
 80024a2:	2210      	movs	r2, #16
 80024a4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <MX_FMC_Init+0x154>)
 80024a8:	2208      	movs	r2, #8
 80024aa:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_FMC_Init+0x154>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80024b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b6:	4915      	ldr	r1, [pc, #84]	; (800250c <MX_FMC_Init+0x154>)
 80024b8:	4812      	ldr	r0, [pc, #72]	; (8002504 <MX_FMC_Init+0x14c>)
 80024ba:	f007 fe49 	bl	800a150 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80024be:	f44f 730c 	mov.w	r3, #560	; 0x230
 80024c2:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_FMC_Init+0x154>)
 80024c6:	2204      	movs	r2, #4
 80024c8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_FMC_Init+0x154>)
 80024cc:	2210      	movs	r2, #16
 80024ce:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_FMC_Init+0x154>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <MX_FMC_Init+0x154>)
 80024da:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80024dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e0:	490a      	ldr	r1, [pc, #40]	; (800250c <MX_FMC_Init+0x154>)
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <MX_FMC_Init+0x14c>)
 80024e4:	f007 fe34 	bl	800a150 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80024e8:	f240 712b 	movw	r1, #1835	; 0x72b
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_FMC_Init+0x14c>)
 80024ee:	f007 fe5a 	bl	800a1a6 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80024f2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80024f6:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024fa:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000c348 	.word	0x2000c348
 8002508:	a0000140 	.word	0xa0000140
 800250c:	200003b8 	.word	0x200003b8

08002510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b090      	sub	sp, #64	; 0x40
 8002514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002526:	4baf      	ldr	r3, [pc, #700]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4aae      	ldr	r2, [pc, #696]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4bac      	ldr	r3, [pc, #688]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800253e:	4ba9      	ldr	r3, [pc, #676]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4aa8      	ldr	r2, [pc, #672]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4ba6      	ldr	r3, [pc, #664]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4aa2      	ldr	r2, [pc, #648]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4ba0      	ldr	r3, [pc, #640]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a9c      	ldr	r2, [pc, #624]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b9a      	ldr	r3, [pc, #616]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002586:	4b97      	ldr	r3, [pc, #604]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b94      	ldr	r3, [pc, #592]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a90      	ldr	r2, [pc, #576]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a8a      	ldr	r2, [pc, #552]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a84      	ldr	r2, [pc, #528]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025e6:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a7e      	ldr	r2, [pc, #504]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b7c      	ldr	r3, [pc, #496]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025fe:	4b79      	ldr	r3, [pc, #484]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a78      	ldr	r2, [pc, #480]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b70      	ldr	r3, [pc, #448]	; (80027e4 <MX_GPIO_Init+0x2d4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800262e:	2201      	movs	r2, #1
 8002630:	2120      	movs	r1, #32
 8002632:	486d      	ldr	r0, [pc, #436]	; (80027e8 <MX_GPIO_Init+0x2d8>)
 8002634:	f003 fbb8 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002638:	2200      	movs	r2, #0
 800263a:	210c      	movs	r1, #12
 800263c:	486b      	ldr	r0, [pc, #428]	; (80027ec <MX_GPIO_Init+0x2dc>)
 800263e:	f003 fbb3 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002642:	2201      	movs	r2, #1
 8002644:	2108      	movs	r1, #8
 8002646:	486a      	ldr	r0, [pc, #424]	; (80027f0 <MX_GPIO_Init+0x2e0>)
 8002648:	f003 fbae 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002652:	4866      	ldr	r0, [pc, #408]	; (80027ec <MX_GPIO_Init+0x2dc>)
 8002654:	f003 fba8 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265e:	4865      	ldr	r0, [pc, #404]	; (80027f4 <MX_GPIO_Init+0x2e4>)
 8002660:	f003 fba2 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	21c8      	movs	r1, #200	; 0xc8
 8002668:	4863      	ldr	r0, [pc, #396]	; (80027f8 <MX_GPIO_Init+0x2e8>)
 800266a:	f003 fb9d 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800266e:	2308      	movs	r3, #8
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	2300      	movs	r3, #0
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	485e      	ldr	r0, [pc, #376]	; (80027fc <MX_GPIO_Init+0x2ec>)
 8002682:	f003 f9cf 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002686:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002698:	230b      	movs	r3, #11
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	4619      	mov	r1, r3
 80026a2:	4855      	ldr	r0, [pc, #340]	; (80027f8 <MX_GPIO_Init+0x2e8>)
 80026a4:	f003 f9be 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80026a8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026ba:	230a      	movs	r3, #10
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	484e      	ldr	r0, [pc, #312]	; (8002800 <MX_GPIO_Init+0x2f0>)
 80026c6:	f003 f9ad 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026dc:	4619      	mov	r1, r3
 80026de:	4849      	ldr	r0, [pc, #292]	; (8002804 <MX_GPIO_Init+0x2f4>)
 80026e0:	f003 f9a0 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <MX_GPIO_Init+0x2f8>)
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f4:	4619      	mov	r1, r3
 80026f6:	483c      	ldr	r0, [pc, #240]	; (80027e8 <MX_GPIO_Init+0x2d8>)
 80026f8:	f003 f994 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80026fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800270e:	230a      	movs	r3, #10
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	483c      	ldr	r0, [pc, #240]	; (800280c <MX_GPIO_Init+0x2fc>)
 800271a:	f003 f983 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800271e:	2320      	movs	r3, #32
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002722:	2301      	movs	r3, #1
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002732:	4619      	mov	r1, r3
 8002734:	482c      	ldr	r0, [pc, #176]	; (80027e8 <MX_GPIO_Init+0x2d8>)
 8002736:	f003 f975 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800273a:	f241 030c 	movw	r3, #4108	; 0x100c
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	4826      	ldr	r0, [pc, #152]	; (80027ec <MX_GPIO_Init+0x2dc>)
 8002754:	f003 f966 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276a:	4619      	mov	r1, r3
 800276c:	4828      	ldr	r0, [pc, #160]	; (8002810 <MX_GPIO_Init+0x300>)
 800276e:	f003 f959 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002772:	2308      	movs	r3, #8
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002786:	4619      	mov	r1, r3
 8002788:	4819      	ldr	r0, [pc, #100]	; (80027f0 <MX_GPIO_Init+0x2e0>)
 800278a:	f003 f94b 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800278e:	2310      	movs	r3, #16
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800279a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279e:	4619      	mov	r1, r3
 80027a0:	4811      	ldr	r0, [pc, #68]	; (80027e8 <MX_GPIO_Init+0x2d8>)
 80027a2:	f003 f93f 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80027a6:	f248 0304 	movw	r3, #32772	; 0x8004
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b8:	4619      	mov	r1, r3
 80027ba:	480e      	ldr	r0, [pc, #56]	; (80027f4 <MX_GPIO_Init+0x2e4>)
 80027bc:	f003 f932 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80027c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d6:	4619      	mov	r1, r3
 80027d8:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_GPIO_Init+0x2e4>)
 80027da:	f003 f923 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80027de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e2:	e017      	b.n	8002814 <MX_GPIO_Init+0x304>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022800 	.word	0x40022800
 80027f4:	40021c00 	.word	0x40021c00
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40020400 	.word	0x40020400
 8002804:	40022400 	.word	0x40022400
 8002808:	10120000 	.word	0x10120000
 800280c:	40020000 	.word	0x40020000
 8002810:	40020800 	.word	0x40020800
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <MX_GPIO_Init+0x418>)
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002822:	4619      	mov	r1, r3
 8002824:	4841      	ldr	r0, [pc, #260]	; (800292c <MX_GPIO_Init+0x41c>)
 8002826:	f003 f8fd 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800282a:	2310      	movs	r3, #16
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800283a:	230a      	movs	r3, #10
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002842:	4619      	mov	r1, r3
 8002844:	483a      	ldr	r0, [pc, #232]	; (8002930 <MX_GPIO_Init+0x420>)
 8002846:	f003 f8ed 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800284a:	23c8      	movs	r3, #200	; 0xc8
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4834      	ldr	r0, [pc, #208]	; (8002934 <MX_GPIO_Init+0x424>)
 8002862:	f003 f8df 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002866:	2305      	movs	r3, #5
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002876:	230a      	movs	r3, #10
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287e:	4619      	mov	r1, r3
 8002880:	482d      	ldr	r0, [pc, #180]	; (8002938 <MX_GPIO_Init+0x428>)
 8002882:	f003 f8cf 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002886:	2332      	movs	r3, #50	; 0x32
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002896:	230b      	movs	r3, #11
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289e:	4619      	mov	r1, r3
 80028a0:	4825      	ldr	r0, [pc, #148]	; (8002938 <MX_GPIO_Init+0x428>)
 80028a2:	f003 f8bf 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80028a6:	2304      	movs	r3, #4
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	4619      	mov	r1, r3
 80028b8:	481e      	ldr	r0, [pc, #120]	; (8002934 <MX_GPIO_Init+0x424>)
 80028ba:	f003 f8b3 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028be:	2386      	movs	r3, #134	; 0x86
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ce:	230b      	movs	r3, #11
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d6:	4619      	mov	r1, r3
 80028d8:	4818      	ldr	r0, [pc, #96]	; (800293c <MX_GPIO_Init+0x42c>)
 80028da:	f003 f8a3 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80028de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e4:	2312      	movs	r3, #18
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028f0:	2304      	movs	r3, #4
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f8:	4619      	mov	r1, r3
 80028fa:	480d      	ldr	r0, [pc, #52]	; (8002930 <MX_GPIO_Init+0x420>)
 80028fc:	f003 f892 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002900:	2328      	movs	r3, #40	; 0x28
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002910:	230a      	movs	r3, #10
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002918:	4619      	mov	r1, r3
 800291a:	4808      	ldr	r0, [pc, #32]	; (800293c <MX_GPIO_Init+0x42c>)
 800291c:	f003 f882 	bl	8005a24 <HAL_GPIO_Init>

}
 8002920:	bf00      	nop
 8002922:	3740      	adds	r7, #64	; 0x40
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	10120000 	.word	0x10120000
 800292c:	40022000 	.word	0x40022000
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40021800 	.word	0x40021800
 8002938:	40020800 	.word	0x40020800
 800293c:	40020000 	.word	0x40020000

08002940 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002948:	f00d fcd6 	bl	80102f8 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f00a fb99 	bl	800d084 <osDelay>
 8002952:	e7fb      	b.n	800294c <StartDefaultTask+0xc>

08002954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002966:	f001 f909 	bl	8003b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40001000 	.word	0x40001000

08002978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_MspInit+0x4c>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_MspInit+0x4c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <HAL_MspInit+0x4c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	210f      	movs	r1, #15
 80029c2:	f06f 0001 	mvn.w	r0, #1
 80029c6:	f002 f9ff 	bl	8004dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_ADC_MspInit+0xa4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d13c      	bne.n	8002a74 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_ADC_MspInit+0xa8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002a42:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a46:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	480b      	ldr	r0, [pc, #44]	; (8002a84 <HAL_ADC_MspInit+0xac>)
 8002a58:	f002 ffe4 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a60:	2303      	movs	r3, #3
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <HAL_ADC_MspInit+0xb0>)
 8002a70:	f002 ffd8 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40012200 	.word	0x40012200
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40020000 	.word	0x40020000

08002a8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_CAN_MspInit+0x8c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d130      	bne.n	8002b10 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_CAN_MspInit+0x90>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002af0:	2309      	movs	r3, #9
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <HAL_CAN_MspInit+0x94>)
 8002afc:	f002 ff92 	bl	8005a24 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2105      	movs	r1, #5
 8002b04:	2014      	movs	r0, #20
 8002b06:	f002 f95f 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b0a:	2014      	movs	r0, #20
 8002b0c:	f002 f978 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40006400 	.word	0x40006400
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020400 	.word	0x40020400

08002b24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_CRC_MspInit+0x38>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10b      	bne.n	8002b4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_CRC_MspInit+0x3c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_CRC_MspInit+0x3c>)
 8002b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_CRC_MspInit+0x3c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023000 	.word	0x40023000
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_DCMI_MspInit+0x160>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 809a 	bne.w	8002cbc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6353      	str	r3, [r2, #52]	; 0x34
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	623b      	str	r3, [r7, #32]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba0:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a42      	ldr	r2, [pc, #264]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_DCMI_MspInit+0x164>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002c18:	2360      	movs	r3, #96	; 0x60
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c28:	230d      	movs	r3, #13
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c30:	4619      	mov	r1, r3
 8002c32:	4826      	ldr	r0, [pc, #152]	; (8002ccc <HAL_DCMI_MspInit+0x168>)
 8002c34:	f002 fef6 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c48:	230d      	movs	r3, #13
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	481f      	ldr	r0, [pc, #124]	; (8002cd0 <HAL_DCMI_MspInit+0x16c>)
 8002c54:	f002 fee6 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c6a:	230d      	movs	r3, #13
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c72:	4619      	mov	r1, r3
 8002c74:	4817      	ldr	r0, [pc, #92]	; (8002cd4 <HAL_DCMI_MspInit+0x170>)
 8002c76:	f002 fed5 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002c7a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c8c:	230d      	movs	r3, #13
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c94:	4619      	mov	r1, r3
 8002c96:	4810      	ldr	r0, [pc, #64]	; (8002cd8 <HAL_DCMI_MspInit+0x174>)
 8002c98:	f002 fec4 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002c9c:	2350      	movs	r3, #80	; 0x50
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cac:	230d      	movs	r3, #13
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <HAL_DCMI_MspInit+0x178>)
 8002cb8:	f002 feb4 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	3738      	adds	r7, #56	; 0x38
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	50050000 	.word	0x50050000
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021800 	.word	0x40021800
 8002cd8:	40021c00 	.word	0x40021c00
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_DMA2D_MspInit+0x44>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_DMA2D_MspInit+0x48>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_DMA2D_MspInit+0x48>)
 8002cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_DMA2D_MspInit+0x48>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2105      	movs	r1, #5
 8002d0e:	205a      	movs	r0, #90	; 0x5a
 8002d10:	f002 f85a 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002d14:	205a      	movs	r0, #90	; 0x5a
 8002d16:	f002 f873 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	4002b000 	.word	0x4002b000
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_DMA2D_MspDeInit+0x2c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_DMA2D_MspDeInit+0x30>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <HAL_DMA2D_MspDeInit+0x30>)
 8002d44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002d4a:	205a      	movs	r0, #90	; 0x5a
 8002d4c:	f002 f866 	bl	8004e1c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	4002b000 	.word	0x4002b000
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_LTDC_MspInit+0x174>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	f040 80a3 	bne.w	8002eca <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d84:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002db4:	4b48      	ldr	r3, [pc, #288]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dcc:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002de4:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a3b      	ldr	r2, [pc, #236]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	6313      	str	r3, [r2, #48]	; 0x30
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002e14:	2310      	movs	r3, #16
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e24:	230e      	movs	r3, #14
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	482b      	ldr	r0, [pc, #172]	; (8002edc <HAL_LTDC_MspInit+0x17c>)
 8002e30:	f002 fdf8 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002e34:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e46:	230e      	movs	r3, #14
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4823      	ldr	r0, [pc, #140]	; (8002ee0 <HAL_LTDC_MspInit+0x180>)
 8002e52:	f002 fde7 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002e56:	23f7      	movs	r3, #247	; 0xf7
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e66:	230e      	movs	r3, #14
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <HAL_LTDC_MspInit+0x184>)
 8002e72:	f002 fdd7 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <HAL_LTDC_MspInit+0x188>)
 8002e94:	f002 fdc6 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002e98:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eaa:	230e      	movs	r3, #14
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <HAL_LTDC_MspInit+0x18c>)
 8002eb6:	f002 fdb5 	bl	8005a24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2105      	movs	r1, #5
 8002ebe:	2058      	movs	r0, #88	; 0x58
 8002ec0:	f001 ff82 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ec4:	2058      	movs	r0, #88	; 0x58
 8002ec6:	f001 ff9b 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40016800 	.word	0x40016800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40022800 	.word	0x40022800
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40022000 	.word	0x40022000

08002ef0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <HAL_QSPI_MspInit+0x10c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d170      	bne.n	8002ff4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f30:	f043 0310 	orr.w	r3, r3, #16
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a28      	ldr	r2, [pc, #160]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002f72:	2304      	movs	r3, #4
 8002f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f82:	2309      	movs	r3, #9
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	481d      	ldr	r0, [pc, #116]	; (8003004 <HAL_QSPI_MspInit+0x114>)
 8002f8e:	f002 fd49 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002f92:	2340      	movs	r3, #64	; 0x40
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 031c 	add.w	r3, r7, #28
 8002faa:	4619      	mov	r1, r3
 8002fac:	4816      	ldr	r0, [pc, #88]	; (8003008 <HAL_QSPI_MspInit+0x118>)
 8002fae:	f002 fd39 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fc2:	2309      	movs	r3, #9
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <HAL_QSPI_MspInit+0x118>)
 8002fce:	f002 fd29 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002fd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	4619      	mov	r1, r3
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <HAL_QSPI_MspInit+0x11c>)
 8002ff0:	f002 fd18 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	a0001000 	.word	0xa0001000
 8003000:	40023800 	.word	0x40023800
 8003004:	40021000 	.word	0x40021000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020c00 	.word	0x40020c00

08003010 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RTC_MspInit+0x2c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d105      	bne.n	800302e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RTC_MspInit+0x30>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_RTC_MspInit+0x30>)
 8003028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40002800 	.word	0x40002800
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <HAL_SD_MspInit+0xb4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d144      	bne.n	80030f0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_SD_MspInit+0xb8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <HAL_SD_MspInit+0xb8>)
 800306c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_SD_MspInit+0xb8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_SD_MspInit+0xb8>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_SD_MspInit+0xb8>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_SD_MspInit+0xb8>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_SD_MspInit+0xb8>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_SD_MspInit+0xb8>)
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_SD_MspInit+0xb8>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80030ae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80030b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030bc:	2303      	movs	r3, #3
 80030be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80030c0:	230c      	movs	r3, #12
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	480d      	ldr	r0, [pc, #52]	; (8003100 <HAL_SD_MspInit+0xbc>)
 80030cc:	f002 fcaa 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80030d0:	2304      	movs	r3, #4
 80030d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80030e0:	230c      	movs	r3, #12
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <HAL_SD_MspInit+0xc0>)
 80030ec:	f002 fc9a 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020800 	.word	0x40020800
 8003104:	40020c00 	.word	0x40020c00

08003108 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003128:	d127      	bne.n	800317a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_SPDIFRX_MspInit+0x7c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800316a:	2308      	movs	r3, #8
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4619      	mov	r1, r3
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <HAL_SPDIFRX_MspInit+0x80>)
 8003176:	f002 fc55 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40020c00 	.word	0x40020c00

0800318c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_SPI_MspInit+0xb4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d144      	bne.n	8003238 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a24      	ldr	r2, [pc, #144]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_SPI_MspInit+0xb8>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80031f6:	2302      	movs	r3, #2
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003206:	2305      	movs	r3, #5
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <HAL_SPI_MspInit+0xbc>)
 8003212:	f002 fc07 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003216:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003228:	2305      	movs	r3, #5
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <HAL_SPI_MspInit+0xc0>)
 8003234:	f002 fbf6 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40003800 	.word	0x40003800
 8003244:	40023800 	.word	0x40023800
 8003248:	40022000 	.word	0x40022000
 800324c:	40020400 	.word	0x40020400

08003250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <HAL_TIM_Base_MspInit+0xc8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10c      	bne.n	800327c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003262:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800327a:	e046      	b.n	800330a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d10c      	bne.n	80032a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
}
 800329e:	e034      	b.n	800330a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_Base_MspInit+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10c      	bne.n	80032c4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
}
 80032c2:	e022      	b.n	800330a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_TIM_Base_MspInit+0xd4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10c      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032d4:	f043 0308 	orr.w	r3, r3, #8
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
}
 80032e6:	e010      	b.n	800330a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_TIM_Base_MspInit+0xd8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10b      	bne.n	800330a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_TIM_Base_MspInit+0xcc>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40023800 	.word	0x40023800
 8003320:	40000400 	.word	0x40000400
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_TIM_PWM_MspInit+0x38>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10b      	bne.n	8003356 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_TIM_PWM_MspInit+0x3c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_TIM_PWM_MspInit+0x3c>)
 8003344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_TIM_PWM_MspInit+0x3c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40001800 	.word	0x40001800
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a56      	ldr	r2, [pc, #344]	; (80034e4 <HAL_TIM_MspPostInit+0x178>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d11d      	bne.n	80033ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80033a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	484a      	ldr	r0, [pc, #296]	; (80034ec <HAL_TIM_MspPostInit+0x180>)
 80033c4:	f002 fb2e 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80033c8:	e087      	b.n	80034da <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d11d      	bne.n	8003410 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	4a43      	ldr	r2, [pc, #268]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6313      	str	r3, [r2, #48]	; 0x30
 80033e0:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80033ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033fe:	2301      	movs	r3, #1
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003402:	f107 031c 	add.w	r3, r7, #28
 8003406:	4619      	mov	r1, r3
 8003408:	4838      	ldr	r0, [pc, #224]	; (80034ec <HAL_TIM_MspPostInit+0x180>)
 800340a:	f002 fb0b 	bl	8005a24 <HAL_GPIO_Init>
}
 800340e:	e064      	b.n	80034da <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_TIM_MspPostInit+0x184>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11c      	bne.n	8003454 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a32      	ldr	r2, [pc, #200]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003432:	2310      	movs	r3, #16
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003442:	2302      	movs	r3, #2
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	4619      	mov	r1, r3
 800344c:	4829      	ldr	r0, [pc, #164]	; (80034f4 <HAL_TIM_MspPostInit+0x188>)
 800344e:	f002 fae9 	bl	8005a24 <HAL_GPIO_Init>
}
 8003452:	e042      	b.n	80034da <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_TIM_MspPostInit+0x18c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d11c      	bne.n	8003498 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003476:	2301      	movs	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003486:	2302      	movs	r3, #2
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 031c 	add.w	r3, r7, #28
 800348e:	4619      	mov	r1, r3
 8003490:	481a      	ldr	r0, [pc, #104]	; (80034fc <HAL_TIM_MspPostInit+0x190>)
 8003492:	f002 fac7 	bl	8005a24 <HAL_GPIO_Init>
}
 8003496:	e020      	b.n	80034da <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_MspPostInit+0x194>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d11b      	bne.n	80034da <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80034a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_TIM_MspPostInit+0x17c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80034ca:	2309      	movs	r3, #9
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	4619      	mov	r1, r3
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <HAL_TIM_MspPostInit+0x198>)
 80034d6:	f002 faa5 	bl	8005a24 <HAL_GPIO_Init>
}
 80034da:	bf00      	nop
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40000c00 	.word	0x40000c00
 80034fc:	40022000 	.word	0x40022000
 8003500:	40001800 	.word	0x40001800
 8003504:	40021c00 	.word	0x40021c00

08003508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	; 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 031c 	add.w	r3, r7, #28
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_UART_MspInit+0x110>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d145      	bne.n	80035b6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800352a:	4b3c      	ldr	r3, [pc, #240]	; (800361c <HAL_UART_MspInit+0x114>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <HAL_UART_MspInit+0x114>)
 8003530:	f043 0310 	orr.w	r3, r3, #16
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_UART_MspInit+0x114>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_UART_MspInit+0x114>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <HAL_UART_MspInit+0x114>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b33      	ldr	r3, [pc, #204]	; (800361c <HAL_UART_MspInit+0x114>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_UART_MspInit+0x114>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a2f      	ldr	r2, [pc, #188]	; (800361c <HAL_UART_MspInit+0x114>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_UART_MspInit+0x114>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003582:	2307      	movs	r3, #7
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003586:	f107 031c 	add.w	r3, r7, #28
 800358a:	4619      	mov	r1, r3
 800358c:	4824      	ldr	r0, [pc, #144]	; (8003620 <HAL_UART_MspInit+0x118>)
 800358e:	f002 fa49 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035a4:	2307      	movs	r3, #7
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	481d      	ldr	r0, [pc, #116]	; (8003624 <HAL_UART_MspInit+0x11c>)
 80035b0:	f002 fa38 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035b4:	e02c      	b.n	8003610 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_UART_MspInit+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d127      	bne.n	8003610 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_UART_MspInit+0x114>)
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	4a15      	ldr	r2, [pc, #84]	; (800361c <HAL_UART_MspInit+0x114>)
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	6453      	str	r3, [r2, #68]	; 0x44
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_UART_MspInit+0x114>)
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_UART_MspInit+0x114>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4a0f      	ldr	r2, [pc, #60]	; (800361c <HAL_UART_MspInit+0x114>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6313      	str	r3, [r2, #48]	; 0x30
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_UART_MspInit+0x114>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80035f0:	23c0      	movs	r3, #192	; 0xc0
 80035f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003600:	2308      	movs	r3, #8
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	4619      	mov	r1, r3
 800360a:	4808      	ldr	r0, [pc, #32]	; (800362c <HAL_UART_MspInit+0x124>)
 800360c:	f002 fa0a 	bl	8005a24 <HAL_GPIO_Init>
}
 8003610:	bf00      	nop
 8003612:	3730      	adds	r7, #48	; 0x30
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40011000 	.word	0x40011000
 800361c:	40023800 	.word	0x40023800
 8003620:	40020400 	.word	0x40020400
 8003624:	40020000 	.word	0x40020000
 8003628:	40011400 	.word	0x40011400
 800362c:	40020800 	.word	0x40020800

08003630 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003644:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_FMC_MspInit+0x100>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d16d      	bne.n	8003728 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_FMC_MspInit+0x100>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003652:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_FMC_MspInit+0x104>)
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	4a37      	ldr	r2, [pc, #220]	; (8003734 <HAL_FMC_MspInit+0x104>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6393      	str	r3, [r2, #56]	; 0x38
 800365e:	4b35      	ldr	r3, [pc, #212]	; (8003734 <HAL_FMC_MspInit+0x104>)
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800366a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800366e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800367c:	230c      	movs	r3, #12
 800367e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4619      	mov	r1, r3
 8003684:	482c      	ldr	r0, [pc, #176]	; (8003738 <HAL_FMC_MspInit+0x108>)
 8003686:	f002 f9cd 	bl	8005a24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800368a:	f248 1333 	movw	r3, #33075	; 0x8133
 800368e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800369c:	230c      	movs	r3, #12
 800369e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4825      	ldr	r0, [pc, #148]	; (800373c <HAL_FMC_MspInit+0x10c>)
 80036a6:	f002 f9bd 	bl	8005a24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80036aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80036ae:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036bc:	230c      	movs	r3, #12
 80036be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	481e      	ldr	r0, [pc, #120]	; (8003740 <HAL_FMC_MspInit+0x110>)
 80036c6:	f002 f9ad 	bl	8005a24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80036ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80036ce:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036dc:	230c      	movs	r3, #12
 80036de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4817      	ldr	r0, [pc, #92]	; (8003744 <HAL_FMC_MspInit+0x114>)
 80036e6:	f002 f99d 	bl	8005a24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80036ea:	2328      	movs	r3, #40	; 0x28
 80036ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f6:	2303      	movs	r3, #3
 80036f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036fa:	230c      	movs	r3, #12
 80036fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4811      	ldr	r0, [pc, #68]	; (8003748 <HAL_FMC_MspInit+0x118>)
 8003704:	f002 f98e 	bl	8005a24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003708:	2308      	movs	r3, #8
 800370a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003718:	230c      	movs	r3, #12
 800371a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	4619      	mov	r1, r3
 8003720:	480a      	ldr	r0, [pc, #40]	; (800374c <HAL_FMC_MspInit+0x11c>)
 8003722:	f002 f97f 	bl	8005a24 <HAL_GPIO_Init>
 8003726:	e000      	b.n	800372a <HAL_FMC_MspInit+0xfa>
    return;
 8003728:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000410 	.word	0x20000410
 8003734:	40023800 	.word	0x40023800
 8003738:	40021000 	.word	0x40021000
 800373c:	40021800 	.word	0x40021800
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40021400 	.word	0x40021400
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40020800 	.word	0x40020800

08003750 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003758:	f7ff ff6a 	bl	8003630 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <HAL_SAI_MspInit+0xbc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d124      	bne.n	80037c0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	4a29      	ldr	r2, [pc, #164]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003788:	6453      	str	r3, [r2, #68]	; 0x44
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 800379e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80037a0:	23f0      	movs	r3, #240	; 0xf0
 80037a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80037b0:	230a      	movs	r3, #10
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4619      	mov	r1, r3
 80037ba:	481c      	ldr	r0, [pc, #112]	; (800382c <HAL_SAI_MspInit+0xc8>)
 80037bc:	f002 f932 	bl	8005a24 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_SAI_MspInit+0xcc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d125      	bne.n	8003816 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 80037d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_SAI_MspInit+0xc4>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <HAL_SAI_MspInit+0xc0>)
 80037f2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80037f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003806:	230a      	movs	r3, #10
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	4808      	ldr	r0, [pc, #32]	; (8003834 <HAL_SAI_MspInit+0xd0>)
 8003812:	f002 f907 	bl	8005a24 <HAL_GPIO_Init>

    }
}
 8003816:	bf00      	nop
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40015c04 	.word	0x40015c04
 8003824:	20000414 	.word	0x20000414
 8003828:	40023800 	.word	0x40023800
 800382c:	40022000 	.word	0x40022000
 8003830:	40015c24 	.word	0x40015c24
 8003834:	40021800 	.word	0x40021800

08003838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003848:	2200      	movs	r2, #0
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	2036      	movs	r0, #54	; 0x36
 800384e:	f001 fabb 	bl	8004dc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003852:	2036      	movs	r0, #54	; 0x36
 8003854:	f001 fad4 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <HAL_InitTick+0xa0>)
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <HAL_InitTick+0xa0>)
 800385e:	f043 0310 	orr.w	r3, r3, #16
 8003862:	6413      	str	r3, [r2, #64]	; 0x40
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <HAL_InitTick+0xa0>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003870:	f107 0210 	add.w	r2, r7, #16
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f004 f90a 	bl	8007a94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003880:	f004 f8e0 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8003884:	4603      	mov	r3, r0
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <HAL_InitTick+0xa4>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0c9b      	lsrs	r3, r3, #18
 8003894:	3b01      	subs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_InitTick+0xa8>)
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <HAL_InitTick+0xac>)
 800389c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_InitTick+0xa8>)
 80038a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_InitTick+0xa8>)
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_InitTick+0xa8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_InitTick+0xa8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <HAL_InitTick+0xa8>)
 80038ba:	f006 fd83 	bl	800a3c4 <HAL_TIM_Base_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038c4:	4806      	ldr	r0, [pc, #24]	; (80038e0 <HAL_InitTick+0xa8>)
 80038c6:	f006 fda9 	bl	800a41c <HAL_TIM_Base_Start_IT>
 80038ca:	4603      	mov	r3, r0
 80038cc:	e000      	b.n	80038d0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3730      	adds	r7, #48	; 0x30
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	2000ca00 	.word	0x2000ca00
 80038e4:	40001000 	.word	0x40001000

080038e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <HardFault_Handler+0x4>

080038fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003900:	e7fe      	b.n	8003900 <MemManage_Handler+0x4>

08003902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003906:	e7fe      	b.n	8003906 <BusFault_Handler+0x4>

08003908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800390c:	e7fe      	b.n	800390c <UsageFault_Handler+0x4>

0800390e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <CAN1_RX0_IRQHandler+0x10>)
 8003922:	f000 ff4d 	bl	80047c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000c954 	.word	0x2000c954

08003930 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <TIM6_DAC_IRQHandler+0x10>)
 8003936:	f006 fdc6 	bl	800a4c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000ca00 	.word	0x2000ca00

08003944 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <LTDC_IRQHandler+0x10>)
 800394a:	f003 f843 	bl	80069d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	2000c5c8 	.word	0x2000c5c8

08003958 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA2D_IRQHandler+0x10>)
 800395e:	f001 fe22 	bl	80055a6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000c7d4 	.word	0x2000c7d4

0800396c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
	return 1;
 8003970:	2301      	movs	r3, #1
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_kill>:

int _kill(int pid, int sig)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003986:	f027 f95f 	bl	802ac48 <__errno>
 800398a:	4602      	mov	r2, r0
 800398c:	2316      	movs	r3, #22
 800398e:	6013      	str	r3, [r2, #0]
	return -1;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_exit>:

void _exit (int status)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ffe7 	bl	800397c <_kill>
	while (1) {}		/* Make sure we hang here */
 80039ae:	e7fe      	b.n	80039ae <_exit+0x12>

080039b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e00a      	b.n	80039d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039c2:	f3af 8000 	nop.w
 80039c6:	4601      	mov	r1, r0
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	60ba      	str	r2, [r7, #8]
 80039ce:	b2ca      	uxtb	r2, r1
 80039d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	dbf0      	blt.n	80039c2 <_read+0x12>
	}

return len;
 80039e0:	687b      	ldr	r3, [r7, #4]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e009      	b.n	8003a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	60ba      	str	r2, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	dbf1      	blt.n	80039fc <_write+0x12>
	}
	return len;
 8003a18:	687b      	ldr	r3, [r7, #4]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_close>:

int _close(int file)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
	return -1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_isatty>:

int _isatty(int file)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	return 1;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <_sbrk+0x50>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <_sbrk+0x16>
		heap_end = &end;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <_sbrk+0x50>)
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <_sbrk+0x54>)
 8003aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <_sbrk+0x50>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <_sbrk+0x50>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	466a      	mov	r2, sp
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d907      	bls.n	8003ac6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ab6:	f027 f8c7 	bl	802ac48 <__errno>
 8003aba:	4602      	mov	r2, r0
 8003abc:	230c      	movs	r3, #12
 8003abe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	e006      	b.n	8003ad4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_sbrk+0x50>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	4a03      	ldr	r2, [pc, #12]	; (8003adc <_sbrk+0x50>)
 8003ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000418 	.word	0x20000418
 8003ae0:	2000ceb8 	.word	0x2000ceb8

08003ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <SystemInit+0x28>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <SystemInit+0x28>)
 8003af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SystemInit+0x28>)
 8003afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afe:	609a      	str	r2, [r3, #8]
#endif
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b16:	e003      	b.n	8003b20 <LoopCopyDataInit>

08003b18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b1e:	3104      	adds	r1, #4

08003b20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b28:	d3f6      	bcc.n	8003b18 <CopyDataInit>
  ldr  r2, =_sbss
 8003b2a:	4a0b      	ldr	r2, [pc, #44]	; (8003b58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b2c:	e002      	b.n	8003b34 <LoopFillZerobss>

08003b2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b30:	f842 3b04 	str.w	r3, [r2], #4

08003b34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b38:	d3f9      	bcc.n	8003b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b3a:	f7ff ffd3 	bl	8003ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b3e:	f027 f89b 	bl	802ac78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b42:	f7fd fa73 	bl	800102c <main>
  bx  lr    
 8003b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b48:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003b4c:	0806ae18 	.word	0x0806ae18
  ldr  r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b54:	20000144 	.word	0x20000144
  ldr  r2, =_sbss
 8003b58:	20000144 	.word	0x20000144
  ldr  r3, = _ebss
 8003b5c:	2000ceb4 	.word	0x2000ceb4

08003b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b60:	e7fe      	b.n	8003b60 <ADC_IRQHandler>

08003b62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b66:	2003      	movs	r0, #3
 8003b68:	f001 f923 	bl	8004db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7ff fe63 	bl	8003838 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b72:	f7fe ff09 	bl	8002988 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_IncTick+0x20>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_IncTick+0x24>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <HAL_IncTick+0x24>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000020 	.word	0x20000020
 8003ba0:	2000ca40 	.word	0x2000ca40

08003ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_GetTick+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000ca40 	.word	0x2000ca40

08003bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc4:	f7ff ffee 	bl	8003ba4 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d005      	beq.n	8003be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_Delay+0x40>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003be2:	bf00      	nop
 8003be4:	f7ff ffde 	bl	8003ba4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d8f7      	bhi.n	8003be4 <HAL_Delay+0x28>
  {
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000020 	.word	0x20000020

08003c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e031      	b.n	8003c7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe feda 	bl	80029d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_ADC_Init+0x84>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f964 	bl	8003f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
 8003c6a:	e001      	b.n	8003c70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	ffffeefd 	.word	0xffffeefd

08003c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e12a      	b.n	8003efa <HAL_ADC_ConfigChannel+0x272>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d93a      	bls.n	8003d2a <HAL_ADC_ConfigChannel+0xa2>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cbc:	d035      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3b1e      	subs	r3, #30
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10a      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68d9      	ldr	r1, [r3, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	061a      	lsls	r2, r3, #24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d02:	e035      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68d9      	ldr	r1, [r3, #12]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4618      	mov	r0, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3b1e      	subs	r3, #30
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d28:	e022      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6919      	ldr	r1, [r3, #16]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	2207      	movs	r2, #7
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43da      	mvns	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6919      	ldr	r1, [r3, #16]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4603      	mov	r3, r0
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4403      	add	r3, r0
 8003d66:	409a      	lsls	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d824      	bhi.n	8003dc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	221f      	movs	r2, #31
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43da      	mvns	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	400a      	ands	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	3b05      	subs	r3, #5
 8003db4:	fa00 f203 	lsl.w	r2, r0, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc0:	e04c      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d824      	bhi.n	8003e14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b23      	subs	r3, #35	; 0x23
 8003ddc:	221f      	movs	r2, #31
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4618      	mov	r0, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	3b23      	subs	r3, #35	; 0x23
 8003e06:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
 8003e12:	e023      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b41      	subs	r3, #65	; 0x41
 8003e26:	221f      	movs	r2, #31
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	400a      	ands	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4618      	mov	r0, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b41      	subs	r3, #65	; 0x41
 8003e50:	fa00 f203 	lsl.w	r2, r0, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10a      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1f4>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d109      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b12      	cmp	r3, #18
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d125      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0x22e>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b11      	cmp	r3, #17
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d111      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_ADC_ConfigChannel+0x28c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_ADC_ConfigChannel+0x290>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9a      	lsrs	r2, r3, #18
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	10000012 	.word	0x10000012
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40012300 	.word	0x40012300
 8003f14:	20000018 	.word	0x20000018
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <ADC_Init+0x1ec>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a77      	ldr	r2, [pc, #476]	; (8004108 <ADC_Init+0x1ec>)
 8003f2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <ADC_Init+0x1ec>)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4973      	ldr	r1, [pc, #460]	; (8004108 <ADC_Init+0x1ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <ADC_Init+0x1f0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0ed      	b.n	80042fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fe fcac 	bl	8002a8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0202 	bic.w	r2, r2, #2
 8004142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004144:	f7ff fd2e 	bl	8003ba4 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800414a:	e012      	b.n	8004172 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800414c:	f7ff fd2a 	bl	8003ba4 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b0a      	cmp	r3, #10
 8004158:	d90b      	bls.n	8004172 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2205      	movs	r2, #5
 800416a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0c5      	b.n	80042fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004190:	f7ff fd08 	bl	8003ba4 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004196:	e012      	b.n	80041be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004198:	f7ff fd04 	bl	8003ba4 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d90b      	bls.n	80041be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e09f      	b.n	80042fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0e5      	beq.n	8004198 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7e1b      	ldrb	r3, [r3, #24]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d108      	bne.n	80041e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e007      	b.n	80041f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7e5b      	ldrb	r3, [r3, #25]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d108      	bne.n	8004210 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e007      	b.n	8004220 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7e9b      	ldrb	r3, [r3, #26]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d108      	bne.n	800423a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0220 	orr.w	r2, r2, #32
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e007      	b.n	800424a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0220 	bic.w	r2, r2, #32
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7edb      	ldrb	r3, [r3, #27]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0210 	bic.w	r2, r2, #16
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e007      	b.n	8004274 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0210 	orr.w	r2, r2, #16
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7f1b      	ldrb	r3, [r3, #28]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e007      	b.n	800429e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0208 	bic.w	r2, r2, #8
 800429c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7f5b      	ldrb	r3, [r3, #29]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d108      	bne.n	80042b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0204 	orr.w	r2, r2, #4
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e007      	b.n	80042c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	ea42 0103 	orr.w	r1, r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	1e5a      	subs	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800431e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d003      	beq.n	800432e <HAL_CAN_ConfigFilter+0x26>
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f040 80be 	bne.w	80044aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004330:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004338:	f043 0201 	orr.w	r2, r3, #1
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004348:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	431a      	orrs	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2201      	movs	r2, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43db      	mvns	r3, r3
 8004380:	401a      	ands	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d123      	bne.n	80043d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80043b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3248      	adds	r2, #72	; 0x48
 80043b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	3348      	adds	r3, #72	; 0x48
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d122      	bne.n	8004426 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004400:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3248      	adds	r2, #72	; 0x48
 8004406:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800441a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	3348      	adds	r3, #72	; 0x48
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	440b      	add	r3, r1
 8004424:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	43db      	mvns	r3, r3
 8004438:	401a      	ands	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004440:	e007      	b.n	8004452 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	431a      	orrs	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43db      	mvns	r3, r3
 8004464:	401a      	ands	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800446c:	e007      	b.n	800447e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	431a      	orrs	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d107      	bne.n	8004496 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	431a      	orrs	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800449c:	f023 0201 	bic.w	r2, r3, #1
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e006      	b.n	80044b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40006400 	.word	0x40006400

080044c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d12e      	bne.n	800453a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f4:	f7ff fb56 	bl	8003ba4 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044fa:	e012      	b.n	8004522 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044fc:	f7ff fb52 	bl	8003ba4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b0a      	cmp	r3, #10
 8004508:	d90b      	bls.n	8004522 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2205      	movs	r2, #5
 800451a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e012      	b.n	8004548 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e006      	b.n	8004548 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004564:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d003      	beq.n	8004574 <HAL_CAN_GetRxMessage+0x24>
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b02      	cmp	r3, #2
 8004570:	f040 80f3 	bne.w	800475a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10e      	bne.n	8004598 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0e7      	b.n	8004768 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0d8      	b.n	8004768 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	331b      	adds	r3, #27
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4413      	add	r3, r2
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0204 	and.w	r2, r3, #4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	331b      	adds	r3, #27
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4413      	add	r3, r2
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0d5b      	lsrs	r3, r3, #21
 80045e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e00b      	b.n	8004606 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	331b      	adds	r3, #27
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4413      	add	r3, r2
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	08db      	lsrs	r3, r3, #3
 80045fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	331b      	adds	r3, #27
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0202 	and.w	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	331b      	adds	r3, #27
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	331b      	adds	r3, #27
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	b2da      	uxtb	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	331b      	adds	r3, #27
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	4413      	add	r3, r2
 800466e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	4413      	add	r3, r2
 8004684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0a1a      	lsrs	r2, r3, #8
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4413      	add	r3, r2
 800469e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0c1a      	lsrs	r2, r3, #16
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	3302      	adds	r3, #2
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0e1a      	lsrs	r2, r3, #24
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3303      	adds	r3, #3
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	3304      	adds	r3, #4
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0a1a      	lsrs	r2, r3, #8
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3305      	adds	r3, #5
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	4413      	add	r3, r2
 8004704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0c1a      	lsrs	r2, r3, #16
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	3306      	adds	r3, #6
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4413      	add	r3, r2
 800471e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e1a      	lsrs	r2, r3, #24
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3307      	adds	r3, #7
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d108      	bne.n	8004746 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0220 	orr.w	r2, r2, #32
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	e007      	b.n	8004756 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0220 	orr.w	r2, r2, #32
 8004754:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e006      	b.n	8004768 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004784:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d002      	beq.n	8004792 <HAL_CAN_ActivateNotification+0x1e>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d109      	bne.n	80047a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6959      	ldr	r1, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e006      	b.n	80047b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d07c      	beq.n	8004900 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d023      	beq.n	8004858 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f97d 	bl	8004b22 <HAL_CAN_TxMailbox0CompleteCallback>
 8004828:	e016      	b.n	8004858 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	e00c      	b.n	8004858 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	e002      	b.n	8004858 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f983 	bl	8004b5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d024      	beq.n	80048ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800486a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f95d 	bl	8004b36 <HAL_CAN_TxMailbox1CompleteCallback>
 800487c:	e016      	b.n	80048ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
 8004890:	e00c      	b.n	80048ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	e002      	b.n	80048ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f963 	bl	8004b72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d024      	beq.n	8004900 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f93d 	bl	8004b4a <HAL_CAN_TxMailbox2CompleteCallback>
 80048d0:	e016      	b.n	8004900 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	e00c      	b.n	8004900 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
 80048f8:	e002      	b.n	8004900 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f943 	bl	8004b86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800491a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2208      	movs	r2, #8
 800493e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f92a 	bl	8004b9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fd40 	bl	80013e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800497e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2210      	movs	r2, #16
 8004986:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d006      	beq.n	80049aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f90c 	bl	8004bc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8f3 	bl	8004bae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8f6 	bl	8004bd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2208      	movs	r2, #8
 8004a04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8ef 	bl	8004bea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d075      	beq.n	8004b02 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d06c      	beq.n	8004afa <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	f043 0302 	orr.w	r3, r3, #2
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f043 0304 	orr.w	r3, r3, #4
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d03d      	beq.n	8004afa <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d038      	beq.n	8004afa <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d017      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x302>
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d804      	bhi.n	8004aa0 <HAL_CAN_IRQHandler+0x2e0>
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d009      	beq.n	8004aae <HAL_CAN_IRQHandler+0x2ee>
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a9e:	e024      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d018      	beq.n	8004ad6 <HAL_CAN_IRQHandler+0x316>
 8004aa4:	2b60      	cmp	r3, #96	; 0x60
 8004aa6:	d01b      	beq.n	8004ae0 <HAL_CAN_IRQHandler+0x320>
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d00f      	beq.n	8004acc <HAL_CAN_IRQHandler+0x30c>
            break;
 8004aac:	e01d      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f043 0308 	orr.w	r3, r3, #8
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ab6:	e018      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	f043 0310 	orr.w	r3, r3, #16
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ac0:	e013      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	f043 0320 	orr.w	r3, r3, #32
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004aca:	e00e      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ad4:	e009      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ade:	e004      	b.n	8004aea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ae8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004af8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2204      	movs	r2, #4
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f872 	bl	8004bfe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3728      	adds	r7, #40	; 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <__NVIC_SetPriorityGrouping+0x40>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c30:	4013      	ands	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <__NVIC_SetPriorityGrouping+0x44>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c42:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <__NVIC_SetPriorityGrouping+0x40>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	60d3      	str	r3, [r2, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00
 8004c58:	05fa0000 	.word	0x05fa0000

08004c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <__NVIC_GetPriorityGrouping+0x18>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 0307 	and.w	r3, r3, #7
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	db0b      	blt.n	8004ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <__NVIC_EnableIRQ+0x38>)
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2001      	movs	r0, #1
 8004c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e100 	.word	0xe000e100

08004cb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db10      	blt.n	8004ce8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4909      	ldr	r1, [pc, #36]	; (8004cf4 <__NVIC_DisableIRQ+0x40>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	3320      	adds	r3, #32
 8004cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ce4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	db0a      	blt.n	8004d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	490c      	ldr	r1, [pc, #48]	; (8004d44 <__NVIC_SetPriority+0x4c>)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	0112      	lsls	r2, r2, #4
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d20:	e00a      	b.n	8004d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4908      	ldr	r1, [pc, #32]	; (8004d48 <__NVIC_SetPriority+0x50>)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	0112      	lsls	r2, r2, #4
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	761a      	strb	r2, [r3, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000e100 	.word	0xe000e100
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f1c3 0307 	rsb	r3, r3, #7
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	bf28      	it	cs
 8004d6a:	2304      	movcs	r3, #4
 8004d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d902      	bls.n	8004d7c <NVIC_EncodePriority+0x30>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	3b03      	subs	r3, #3
 8004d7a:	e000      	b.n	8004d7e <NVIC_EncodePriority+0x32>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	401a      	ands	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d94:	f04f 31ff 	mov.w	r1, #4294967295
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	43d9      	mvns	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	4313      	orrs	r3, r2
         );
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	; 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff2a 	bl	8004c14 <__NVIC_SetPriorityGrouping>
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dda:	f7ff ff3f 	bl	8004c5c <__NVIC_GetPriorityGrouping>
 8004dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7ff ffb1 	bl	8004d4c <NVIC_EncodePriority>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff80 	bl	8004cf8 <__NVIC_SetPriority>
}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff32 	bl	8004c78 <__NVIC_EnableIRQ>
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ff42 	bl	8004cb4 <__NVIC_DisableIRQ>
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e054      	b.n	8004ef4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7f5b      	ldrb	r3, [r3, #29]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd fe62 	bl	8002b24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	791b      	ldrb	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10c      	bne.n	8004e88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_CRC_Init+0xc4>)
 8004e74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0218 	bic.w	r2, r2, #24
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	e00c      	b.n	8004ea2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f834 	bl	8004f00 <HAL_CRCEx_Polynomial_Set>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e028      	b.n	8004ef4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	795b      	ldrb	r3, [r3, #5]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	611a      	str	r2, [r3, #16]
 8004eb4:	e004      	b.n	8004ec0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6912      	ldr	r2, [r2, #16]
 8004ebe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	04c11db7 	.word	0x04c11db7

08004f00 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f10:	231f      	movs	r3, #31
 8004f12:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f14:	bf00      	nop
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	613a      	str	r2, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_CRCEx_Polynomial_Set+0x34>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b18      	cmp	r3, #24
 8004f38:	d846      	bhi.n	8004fc8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004fcf 	.word	0x08004fcf
 8004f44:	08004fc9 	.word	0x08004fc9
 8004f48:	08004fc9 	.word	0x08004fc9
 8004f4c:	08004fc9 	.word	0x08004fc9
 8004f50:	08004fc9 	.word	0x08004fc9
 8004f54:	08004fc9 	.word	0x08004fc9
 8004f58:	08004fc9 	.word	0x08004fc9
 8004f5c:	08004fc9 	.word	0x08004fc9
 8004f60:	08004fbd 	.word	0x08004fbd
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	08004fc9 	.word	0x08004fc9
 8004f6c:	08004fc9 	.word	0x08004fc9
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	08004fc9 	.word	0x08004fc9
 8004f80:	08004fb1 	.word	0x08004fb1
 8004f84:	08004fc9 	.word	0x08004fc9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fc9 	.word	0x08004fc9
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fc9 	.word	0x08004fc9
 8004fa0:	08004fa5 	.word	0x08004fa5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d913      	bls.n	8004fd2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fae:	e010      	b.n	8004fd2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b07      	cmp	r3, #7
 8004fb4:	d90f      	bls.n	8004fd6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fba:	e00c      	b.n	8004fd6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d90b      	bls.n	8004fda <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fc6:	e008      	b.n	8004fda <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      break;
 8004fcc:	e006      	b.n	8004fdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e004      	b.n	8004fdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fda:	bf00      	nop
  }
  if (status == HAL_OK)
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 0118 	bic.w	r1, r3, #24
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e069      	b.n	80050f2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd fd9a 	bl	8002b64 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <HAL_DCMI_Init+0xf0>)
 8005052:	400b      	ands	r3, r1
 8005054:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800506a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005076:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005082:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800508e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800509a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d112      	bne.n	80050d2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7f1b      	ldrb	r3, [r3, #28]
 80050b0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7f5b      	ldrb	r3, [r3, #29]
 80050b6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050b8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7f9b      	ldrb	r3, [r3, #30]
 80050be:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050c0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7fdb      	ldrb	r3, [r3, #31]
 80050c8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050ce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050d0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 021e 	orr.w	r2, r2, #30
 80050e0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	ffe0f007 	.word	0xffe0f007

08005100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_DMA_Start_IT+0x26>
 8005122:	2302      	movs	r3, #2
 8005124:	e048      	b.n	80051b8 <HAL_DMA_Start_IT+0xb8>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d137      	bne.n	80051aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f842 	bl	80051d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	223f      	movs	r2, #63	; 0x3f
 800515a:	409a      	lsls	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0216 	orr.w	r2, r2, #22
 800516e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800517e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e005      	b.n	80051b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d108      	bne.n	8005218 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005216:	e007      	b.n	8005228 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e039      	b.n	80052ba <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd fd40 	bl	8002ce0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	f023 0107 	bic.w	r1, r3, #7
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_DMA2D_Init+0x90>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68d1      	ldr	r1, [r2, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	ffffc000 	.word	0xffffc000

080052c8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e05f      	b.n	800539a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80052da:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_DMA2D_DeInit+0xdc>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02e      	beq.n	8005344 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8c1 	bl	800547c <HAL_DMA2D_Abort>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d021      	beq.n	8005344 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e04a      	b.n	800539a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b20      	cmp	r3, #32
 8005310:	d108      	bne.n	8005324 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8f7 	bl	8005508 <HAL_DMA2D_CLUTLoading_Abort>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d011      	beq.n	8005344 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e03a      	b.n	800539a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d108      	bne.n	8005344 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8005332:	2101      	movs	r1, #1
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8e7 	bl	8005508 <HAL_DMA2D_CLUTLoading_Abort>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e02a      	b.n	800539a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	223f      	movs	r2, #63	; 0x3f
 8005352:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2200      	movs	r2, #0
 8005372:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2200      	movs	r2, #0
 800537a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fd fcd5 	bl	8002d2c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800

080053a8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_DMA2D_Start_IT+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e020      	b.n	8005406 <HAL_DMA2D_Start_IT+0x5e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fa84 	bl	80058ec <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80053f2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af02      	add	r7, sp, #8
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8005426:	2302      	movs	r3, #2
 8005428:	e024      	b.n	8005474 <HAL_DMA2D_BlendingStart_IT+0x66>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fa4d 	bl	80058ec <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005460:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 0205 	bic.w	r2, r3, #5
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0204 	orr.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005498:	f7fe fb84 	bl	8003ba4 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800549e:	e017      	b.n	80054d0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80054a0:	f7fe fb80 	bl	8003ba4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ae:	d90f      	bls.n	80054d0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e017      	b.n	8005500 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e0      	bne.n	80054a0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80054ec:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3324      	adds	r3, #36	; 0x24
 8005518:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0204 	orr.w	r2, r2, #4
 8005528:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d103      	bne.n	8005538 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	331c      	adds	r3, #28
 8005536:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005538:	f7fe fb34 	bl	8003ba4 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800553e:	e017      	b.n	8005570 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005540:	f7fe fb30 	bl	8003ba4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800554e:	d90f      	bls.n	8005570 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2203      	movs	r2, #3
 8005560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e016      	b.n	800559e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e1      	bne.n	8005540 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800558a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d026      	beq.n	8005616 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d021      	beq.n	8005616 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2201      	movs	r2, #1
 80055f4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d026      	beq.n	800566e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005638:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2220      	movs	r2, #32
 8005640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	f043 0202 	orr.w	r2, r3, #2
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d026      	beq.n	80056c6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567e:	2b00      	cmp	r3, #0
 8005680:	d021      	beq.n	80056c6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005690:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2208      	movs	r2, #8
 8005698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2204      	movs	r2, #4
 80056f0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f853 	bl	800579e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d024      	beq.n	800574c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01f      	beq.n	800574c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2202      	movs	r2, #2
 8005722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01f      	beq.n	8005796 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2210      	movs	r2, #16
 8005776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f80e 	bl	80057b2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_DMA2D_ConfigLayer+0x20>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e079      	b.n	80058dc <HAL_DMA2D_ConfigLayer+0x114>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	3318      	adds	r3, #24
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005812:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005814:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b0a      	cmp	r3, #10
 800581c:	d003      	beq.n	8005826 <HAL_DMA2D_ConfigLayer+0x5e>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b09      	cmp	r3, #9
 8005824:	d107      	bne.n	8005836 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	e005      	b.n	8005842 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d120      	bne.n	800588a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	43db      	mvns	r3, r3
 8005852:	ea02 0103 	and.w	r1, r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	430a      	orrs	r2, r1
 800585e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b0a      	cmp	r3, #10
 8005870:	d003      	beq.n	800587a <HAL_DMA2D_ConfigLayer+0xb2>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b09      	cmp	r3, #9
 8005878:	d127      	bne.n	80058ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
 8005888:	e01f      	b.n	80058ca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	43db      	mvns	r3, r3
 8005894:	ea02 0103 	and.w	r1, r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	430a      	orrs	r2, r1
 80058a0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b0a      	cmp	r3, #10
 80058b2:	d003      	beq.n	80058bc <HAL_DMA2D_ConfigLayer+0xf4>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d106      	bne.n	80058ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058c8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	ff03000f 	.word	0xff03000f

080058ec <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b08b      	sub	sp, #44	; 0x2c
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	041a      	lsls	r2, r3, #16
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005924:	d174      	bne.n	8005a10 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800592c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005934:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800593c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	431a      	orrs	r2, r3
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	4313      	orrs	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	e053      	b.n	8005a06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d106      	bne.n	8005974 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	e048      	b.n	8005a06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d111      	bne.n	80059a0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	0cdb      	lsrs	r3, r3, #19
 8005980:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	0a9b      	lsrs	r3, r3, #10
 8005986:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	02db      	lsls	r3, r3, #11
 8005996:	4313      	orrs	r3, r2
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	e032      	b.n	8005a06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d117      	bne.n	80059d8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	0fdb      	lsrs	r3, r3, #31
 80059ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	0cdb      	lsrs	r3, r3, #19
 80059b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	0adb      	lsrs	r3, r3, #11
 80059b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	029b      	lsls	r3, r3, #10
 80059c8:	431a      	orrs	r2, r3
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	03db      	lsls	r3, r3, #15
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
 80059d6:	e016      	b.n	8005a06 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	0f1b      	lsrs	r3, r3, #28
 80059dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	0d1b      	lsrs	r3, r3, #20
 80059e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	0b1b      	lsrs	r3, r3, #12
 80059e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	011a      	lsls	r2, r3, #4
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	431a      	orrs	r2, r3
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	031b      	lsls	r3, r3, #12
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005a0e:	e003      	b.n	8005a18 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	372c      	adds	r7, #44	; 0x2c
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e175      	b.n	8005d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a44:	2201      	movs	r2, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4013      	ands	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	f040 8164 	bne.w	8005d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d00b      	beq.n	8005a82 <HAL_GPIO_Init+0x5e>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d007      	beq.n	8005a82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a76:	2b11      	cmp	r3, #17
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b12      	cmp	r3, #18
 8005a80:	d130      	bne.n	8005ae4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ab8:	2201      	movs	r2, #1
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 0201 	and.w	r2, r3, #1
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2203      	movs	r2, #3
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x100>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b12      	cmp	r3, #18
 8005b22:	d123      	bne.n	8005b6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	08da      	lsrs	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3208      	adds	r2, #8
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	08da      	lsrs	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3208      	adds	r2, #8
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	2203      	movs	r2, #3
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 0203 	and.w	r2, r3, #3
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80be 	beq.w	8005d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bae:	4b65      	ldr	r3, [pc, #404]	; (8005d44 <HAL_GPIO_Init+0x320>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	4a64      	ldr	r2, [pc, #400]	; (8005d44 <HAL_GPIO_Init+0x320>)
 8005bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bba:	4b62      	ldr	r3, [pc, #392]	; (8005d44 <HAL_GPIO_Init+0x320>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005bc6:	4a60      	ldr	r2, [pc, #384]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	089b      	lsrs	r3, r3, #2
 8005bcc:	3302      	adds	r3, #2
 8005bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	220f      	movs	r2, #15
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a57      	ldr	r2, [pc, #348]	; (8005d4c <HAL_GPIO_Init+0x328>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d037      	beq.n	8005c62 <HAL_GPIO_Init+0x23e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a56      	ldr	r2, [pc, #344]	; (8005d50 <HAL_GPIO_Init+0x32c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d031      	beq.n	8005c5e <HAL_GPIO_Init+0x23a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a55      	ldr	r2, [pc, #340]	; (8005d54 <HAL_GPIO_Init+0x330>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02b      	beq.n	8005c5a <HAL_GPIO_Init+0x236>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a54      	ldr	r2, [pc, #336]	; (8005d58 <HAL_GPIO_Init+0x334>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d025      	beq.n	8005c56 <HAL_GPIO_Init+0x232>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a53      	ldr	r2, [pc, #332]	; (8005d5c <HAL_GPIO_Init+0x338>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01f      	beq.n	8005c52 <HAL_GPIO_Init+0x22e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a52      	ldr	r2, [pc, #328]	; (8005d60 <HAL_GPIO_Init+0x33c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d019      	beq.n	8005c4e <HAL_GPIO_Init+0x22a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a51      	ldr	r2, [pc, #324]	; (8005d64 <HAL_GPIO_Init+0x340>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_GPIO_Init+0x226>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a50      	ldr	r2, [pc, #320]	; (8005d68 <HAL_GPIO_Init+0x344>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00d      	beq.n	8005c46 <HAL_GPIO_Init+0x222>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a4f      	ldr	r2, [pc, #316]	; (8005d6c <HAL_GPIO_Init+0x348>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <HAL_GPIO_Init+0x21e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a4e      	ldr	r2, [pc, #312]	; (8005d70 <HAL_GPIO_Init+0x34c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <HAL_GPIO_Init+0x21a>
 8005c3a:	2309      	movs	r3, #9
 8005c3c:	e012      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c3e:	230a      	movs	r3, #10
 8005c40:	e010      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c42:	2308      	movs	r3, #8
 8005c44:	e00e      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c46:	2307      	movs	r3, #7
 8005c48:	e00c      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c4a:	2306      	movs	r3, #6
 8005c4c:	e00a      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c4e:	2305      	movs	r3, #5
 8005c50:	e008      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c52:	2304      	movs	r3, #4
 8005c54:	e006      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c56:	2303      	movs	r3, #3
 8005c58:	e004      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e002      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_GPIO_Init+0x240>
 8005c62:	2300      	movs	r3, #0
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	f002 0203 	and.w	r2, r2, #3
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	4093      	lsls	r3, r2
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c74:	4934      	ldr	r1, [pc, #208]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c82:	4b3c      	ldr	r3, [pc, #240]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ca6:	4a33      	ldr	r2, [pc, #204]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cac:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cd0:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <HAL_GPIO_Init+0x350>)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	f67f ae86 	bls.w	8005a44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3724      	adds	r7, #36	; 0x24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40013800 	.word	0x40013800
 8005d4c:	40020000 	.word	0x40020000
 8005d50:	40020400 	.word	0x40020400
 8005d54:	40020800 	.word	0x40020800
 8005d58:	40020c00 	.word	0x40020c00
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40021400 	.word	0x40021400
 8005d64:	40021800 	.word	0x40021800
 8005d68:	40021c00 	.word	0x40021c00
 8005d6c:	40022000 	.word	0x40022000
 8005d70:	40022400 	.word	0x40022400
 8005d74:	40013c00 	.word	0x40013c00

08005d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e001      	b.n	8005d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dc4:	e003      	b.n	8005dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	041a      	lsls	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e07f      	b.n	8005eee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8a9 	bl	8005f5a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e006      	b.n	8005e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d104      	bne.n	8005e76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <HAL_I2C_Init+0x11c>)
 8005e82:	430b      	orrs	r3, r1
 8005e84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	02008000 	.word	0x02008000

08005efc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e021      	b.n	8005f52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2224      	movs	r2, #36	; 0x24
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f821 	bl	8005f6e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	817b      	strh	r3, [r7, #10]
 8005f96:	460b      	mov	r3, r1
 8005f98:	813b      	strh	r3, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	f040 80f9 	bne.w	800619e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_I2C_Mem_Write+0x34>
 8005fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0ed      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2C_Mem_Write+0x4e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0e6      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fda:	f7fd fde3 	bl	8003ba4 <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2319      	movs	r3, #25
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fad1 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0d1      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2221      	movs	r2, #33	; 0x21
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006024:	88f8      	ldrh	r0, [r7, #6]
 8006026:	893a      	ldrh	r2, [r7, #8]
 8006028:	8979      	ldrh	r1, [r7, #10]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4603      	mov	r3, r0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f9e1 	bl	80063fc <I2C_RequestMemoryWrite>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0a9      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2bff      	cmp	r3, #255	; 0xff
 8006054:	d90e      	bls.n	8006074 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fbb3 	bl	80067d8 <I2C_TransferConfig>
 8006072:	e00f      	b.n	8006094 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	b2da      	uxtb	r2, r3
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fba2 	bl	80067d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fabb 	bl	8006614 <I2C_WaitOnTXISFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e07b      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d034      	beq.n	800614c <HAL_I2C_Mem_Write+0x1c8>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d130      	bne.n	800614c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa4d 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e04d      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	d90e      	bls.n	800612c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	2300      	movs	r3, #0
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fb57 	bl	80067d8 <I2C_TransferConfig>
 800612a:	e00f      	b.n	800614c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	b2da      	uxtb	r2, r3
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb46 	bl	80067d8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d19e      	bne.n	8006094 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fa9a 	bl	8006694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e01a      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2220      	movs	r2, #32
 8006170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <HAL_I2C_Mem_Write+0x224>)
 800617e:	400b      	ands	r3, r1
 8006180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	fe00e800 	.word	0xfe00e800

080061ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	f040 80fd 	bne.w	80063ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x34>
 80061da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0f1      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_I2C_Mem_Read+0x4e>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0ea      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006202:	f7fd fccf 	bl	8003ba4 <HAL_GetTick>
 8006206:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2319      	movs	r3, #25
 800620e:	2201      	movs	r2, #1
 8006210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f9bd 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0d5      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2222      	movs	r2, #34	; 0x22
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2240      	movs	r2, #64	; 0x40
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800624c:	88f8      	ldrh	r0, [r7, #6]
 800624e:	893a      	ldrh	r2, [r7, #8]
 8006250:	8979      	ldrh	r1, [r7, #10]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	4603      	mov	r3, r0
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f921 	bl	80064a4 <I2C_RequestMemoryRead>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0ad      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2bff      	cmp	r3, #255	; 0xff
 800627c:	d90e      	bls.n	800629c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	22ff      	movs	r2, #255	; 0xff
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	b2da      	uxtb	r2, r3
 800628a:	8979      	ldrh	r1, [r7, #10]
 800628c:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <HAL_I2C_Mem_Read+0x22c>)
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fa9f 	bl	80067d8 <I2C_TransferConfig>
 800629a:	e00f      	b.n	80062bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	8979      	ldrh	r1, [r7, #10]
 80062ae:	4b4a      	ldr	r3, [pc, #296]	; (80063d8 <HAL_I2C_Mem_Read+0x22c>)
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa8e 	bl	80067d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	2200      	movs	r2, #0
 80062c4:	2104      	movs	r1, #4
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f964 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e07c      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d034      	beq.n	800637c <HAL_I2C_Mem_Read+0x1d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d130      	bne.n	800637c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f935 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e04d      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	2bff      	cmp	r3, #255	; 0xff
 800633c:	d90e      	bls.n	800635c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	22ff      	movs	r2, #255	; 0xff
 8006342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	b2da      	uxtb	r2, r3
 800634a:	8979      	ldrh	r1, [r7, #10]
 800634c:	2300      	movs	r3, #0
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fa3f 	bl	80067d8 <I2C_TransferConfig>
 800635a:	e00f      	b.n	800637c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636a:	b2da      	uxtb	r2, r3
 800636c:	8979      	ldrh	r1, [r7, #10]
 800636e:	2300      	movs	r3, #0
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fa2e 	bl	80067d8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d19a      	bne.n	80062bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f982 	bl	8006694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e01a      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2220      	movs	r2, #32
 80063a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_I2C_Mem_Read+0x230>)
 80063ae:	400b      	ands	r3, r1
 80063b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	80002400 	.word	0x80002400
 80063dc:	fe00e800 	.word	0xfe00e800

080063e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ee:	b2db      	uxtb	r3, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4603      	mov	r3, r0
 800640c:	817b      	strh	r3, [r7, #10]
 800640e:	460b      	mov	r3, r1
 8006410:	813b      	strh	r3, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	8979      	ldrh	r1, [r7, #10]
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <I2C_RequestMemoryWrite+0xa4>)
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f9d7 	bl	80067d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f8f0 	bl	8006614 <I2C_WaitOnTXISFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e02c      	b.n	8006498 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d105      	bne.n	8006450 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006444:	893b      	ldrh	r3, [r7, #8]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	629a      	str	r2, [r3, #40]	; 0x28
 800644e:	e015      	b.n	800647c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	b2da      	uxtb	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f8d6 	bl	8006614 <I2C_WaitOnTXISFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e012      	b.n	8006498 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2200      	movs	r2, #0
 8006484:	2180      	movs	r1, #128	; 0x80
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f884 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	80002000 	.word	0x80002000

080064a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	4608      	mov	r0, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	461a      	mov	r2, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	817b      	strh	r3, [r7, #10]
 80064b6:	460b      	mov	r3, r1
 80064b8:	813b      	strh	r3, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	8979      	ldrh	r1, [r7, #10]
 80064c4:	4b20      	ldr	r3, [pc, #128]	; (8006548 <I2C_RequestMemoryRead+0xa4>)
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2300      	movs	r3, #0
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f984 	bl	80067d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f89d 	bl	8006614 <I2C_WaitOnTXISFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e02c      	b.n	800653e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d105      	bne.n	80064f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
 80064f4:	e015      	b.n	8006522 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064f6:	893b      	ldrh	r3, [r7, #8]
 80064f8:	0a1b      	lsrs	r3, r3, #8
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	69b9      	ldr	r1, [r7, #24]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f883 	bl	8006614 <I2C_WaitOnTXISFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e012      	b.n	800653e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006518:	893b      	ldrh	r3, [r7, #8]
 800651a:	b2da      	uxtb	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2200      	movs	r2, #0
 800652a:	2140      	movs	r1, #64	; 0x40
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f831 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e000      	b.n	800653e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	80002000 	.word	0x80002000

0800654c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d103      	bne.n	800656a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d007      	beq.n	8006588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	619a      	str	r2, [r3, #24]
  }
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a4:	e022      	b.n	80065ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d01e      	beq.n	80065ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fd faf9 	bl	8003ba4 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d113      	bne.n	80065ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e00f      	b.n	800660c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	429a      	cmp	r2, r3
 8006608:	d0cd      	beq.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006620:	e02c      	b.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f870 	bl	800670c <I2C_IsAcknowledgeFailed>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e02a      	b.n	800668c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d01e      	beq.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fd fab1 	bl	8003ba4 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d113      	bne.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e007      	b.n	800668c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d1cb      	bne.n	8006622 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a0:	e028      	b.n	80066f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f830 	bl	800670c <I2C_IsAcknowledgeFailed>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e026      	b.n	8006704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fd fa75 	bl	8003ba4 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e007      	b.n	8006704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d1cf      	bne.n	80066a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b10      	cmp	r3, #16
 8006724:	d151      	bne.n	80067ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006726:	e022      	b.n	800676e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d01e      	beq.n	800676e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006730:	f7fd fa38 	bl	8003ba4 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <I2C_IsAcknowledgeFailed+0x3a>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d113      	bne.n	800676e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e02e      	b.n	80067cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b20      	cmp	r3, #32
 800677a:	d1d5      	bne.n	8006728 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2210      	movs	r2, #16
 8006782:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2220      	movs	r2, #32
 800678a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff fedd 	bl	800654c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800679e:	400b      	ands	r3, r1
 80067a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	fe00e800 	.word	0xfe00e800

080067d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	817b      	strh	r3, [r7, #10]
 80067e6:	4613      	mov	r3, r2
 80067e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	0d5b      	lsrs	r3, r3, #21
 80067f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067f8:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <I2C_TransferConfig+0x58>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	43db      	mvns	r3, r3
 80067fe:	ea02 0103 	and.w	r1, r2, r3
 8006802:	897b      	ldrh	r3, [r7, #10]
 8006804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006808:	7a7b      	ldrb	r3, [r7, #9]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	431a      	orrs	r2, r3
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	03ff63ff 	.word	0x03ff63ff

08006834 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e0bf      	b.n	80069c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc fa80 	bl	8002d60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006876:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6999      	ldr	r1, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800688c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6899      	ldr	r1, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b4a      	ldr	r3, [pc, #296]	; (80069d0 <HAL_LTDC_Init+0x19c>)
 80068a8:	400b      	ands	r3, r1
 80068aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	041b      	lsls	r3, r3, #16
 80068b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6899      	ldr	r1, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68d9      	ldr	r1, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <HAL_LTDC_Init+0x19c>)
 80068d6:	400b      	ands	r3, r1
 80068d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68d9      	ldr	r1, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6919      	ldr	r1, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b33      	ldr	r3, [pc, #204]	; (80069d0 <HAL_LTDC_Init+0x19c>)
 8006904:	400b      	ands	r3, r1
 8006906:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6919      	ldr	r1, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6959      	ldr	r1, [r3, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <HAL_LTDC_Init+0x19c>)
 8006932:	400b      	ands	r3, r1
 8006934:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6959      	ldr	r1, [r3, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0206 	orr.w	r2, r2, #6
 80069a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	f000f800 	.word	0xf000f800

080069d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d023      	beq.n	8006a3e <HAL_LTDC_IRQHandler+0x6a>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2204      	movs	r2, #4
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f86f 	bl	8006b1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d023      	beq.n	8006a90 <HAL_LTDC_IRQHandler+0xbc>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01e      	beq.n	8006a90 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0202 	bic.w	r2, r2, #2
 8006a60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2202      	movs	r2, #2
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a70:	f043 0202 	orr.w	r2, r3, #2
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f846 	bl	8006b1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01b      	beq.n	8006ad2 <HAL_LTDC_IRQHandler+0xfe>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d016      	beq.n	8006ad2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f013 fd63 	bl	801a598 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01b      	beq.n	8006b14 <HAL_LTDC_IRQHandler+0x140>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0208 	bic.w	r2, r2, #8
 8006af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2208      	movs	r2, #8
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f80e 	bl	8006b30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b44:	b5b0      	push	{r4, r5, r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_LTDC_ConfigLayer+0x1a>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e02c      	b.n	8006bb8 <HAL_LTDC_ConfigLayer+0x74>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2134      	movs	r1, #52	; 0x34
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4614      	mov	r4, r2
 8006b82:	461d      	mov	r5, r3
 8006b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f849 	bl	8006c30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bdb0      	pop	{r4, r5, r7, pc}

08006bc0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_LTDC_ProgramLineEvent+0x18>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e023      	b.n	8006c20 <HAL_LTDC_ProgramLineEvent+0x60>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40016800 	.word	0x40016800

08006c30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b089      	sub	sp, #36	; 0x24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	0c1b      	lsrs	r3, r3, #16
 8006c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4c:	4413      	add	r3, r2
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	01db      	lsls	r3, r3, #7
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3384      	adds	r3, #132	; 0x84
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	4611      	mov	r1, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	01d2      	lsls	r2, r2, #7
 8006c6c:	440a      	add	r2, r1
 8006c6e:	3284      	adds	r2, #132	; 0x84
 8006c70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c86:	4413      	add	r3, r2
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	440b      	add	r3, r1
 8006c96:	3384      	adds	r3, #132	; 0x84
 8006c98:	4619      	mov	r1, r3
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cae:	4413      	add	r3, r2
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	01db      	lsls	r3, r3, #7
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3384      	adds	r3, #132	; 0x84
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	01d2      	lsls	r2, r2, #7
 8006cce:	440a      	add	r2, r1
 8006cd0:	3284      	adds	r2, #132	; 0x84
 8006cd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce6:	4413      	add	r3, r2
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	01db      	lsls	r3, r3, #7
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3384      	adds	r3, #132	; 0x84
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	01db      	lsls	r3, r3, #7
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3384      	adds	r3, #132	; 0x84
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	4611      	mov	r1, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	01d2      	lsls	r2, r2, #7
 8006d1a:	440a      	add	r2, r1
 8006d1c:	3284      	adds	r2, #132	; 0x84
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	01db      	lsls	r3, r3, #7
 8006d2e:	4413      	add	r3, r2
 8006d30:	3384      	adds	r3, #132	; 0x84
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	01db      	lsls	r3, r3, #7
 8006d60:	4413      	add	r3, r2
 8006d62:	3384      	adds	r3, #132	; 0x84
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	01db      	lsls	r3, r3, #7
 8006d70:	4413      	add	r3, r2
 8006d72:	3384      	adds	r3, #132	; 0x84
 8006d74:	461a      	mov	r2, r3
 8006d76:	2300      	movs	r3, #0
 8006d78:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d80:	461a      	mov	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	01db      	lsls	r3, r3, #7
 8006d94:	440b      	add	r3, r1
 8006d96:	3384      	adds	r3, #132	; 0x84
 8006d98:	4619      	mov	r1, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	01db      	lsls	r3, r3, #7
 8006daa:	4413      	add	r3, r2
 8006dac:	3384      	adds	r3, #132	; 0x84
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	4611      	mov	r1, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	01d2      	lsls	r2, r2, #7
 8006dba:	440a      	add	r2, r1
 8006dbc:	3284      	adds	r2, #132	; 0x84
 8006dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dc2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	01db      	lsls	r3, r3, #7
 8006dce:	4413      	add	r3, r2
 8006dd0:	3384      	adds	r3, #132	; 0x84
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	01db      	lsls	r3, r3, #7
 8006de4:	4413      	add	r3, r2
 8006de6:	3384      	adds	r3, #132	; 0x84
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	01db      	lsls	r3, r3, #7
 8006df4:	440b      	add	r3, r1
 8006df6:	3384      	adds	r3, #132	; 0x84
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4b58      	ldr	r3, [pc, #352]	; (8006f5c <LTDC_SetConfig+0x32c>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	6809      	ldr	r1, [r1, #0]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	01c9      	lsls	r1, r1, #7
 8006e12:	4401      	add	r1, r0
 8006e14:	3184      	adds	r1, #132	; 0x84
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	01db      	lsls	r3, r3, #7
 8006e24:	4413      	add	r3, r2
 8006e26:	3384      	adds	r3, #132	; 0x84
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3384      	adds	r3, #132	; 0x84
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	01db      	lsls	r3, r3, #7
 8006e48:	4413      	add	r3, r2
 8006e4a:	3384      	adds	r3, #132	; 0x84
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e01b      	b.n	8006e9a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d102      	bne.n	8006e70 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e014      	b.n	8006e9a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d00b      	beq.n	8006e90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d007      	beq.n	8006e90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d003      	beq.n	8006e90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d102      	bne.n	8006e96 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e90:	2302      	movs	r3, #2
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e001      	b.n	8006e9a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	01db      	lsls	r3, r3, #7
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3384      	adds	r3, #132	; 0x84
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	01d2      	lsls	r2, r2, #7
 8006eb4:	440a      	add	r2, r1
 8006eb6:	3284      	adds	r2, #132	; 0x84
 8006eb8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	fb02 f303 	mul.w	r3, r2, r3
 8006ec8:	041a      	lsls	r2, r3, #16
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	1acb      	subs	r3, r1, r3
 8006ed4:	69f9      	ldr	r1, [r7, #28]
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	3303      	adds	r3, #3
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	6809      	ldr	r1, [r1, #0]
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	01c9      	lsls	r1, r1, #7
 8006ee6:	4401      	add	r1, r0
 8006ee8:	3184      	adds	r1, #132	; 0x84
 8006eea:	4313      	orrs	r3, r2
 8006eec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	01db      	lsls	r3, r3, #7
 8006ef8:	4413      	add	r3, r2
 8006efa:	3384      	adds	r3, #132	; 0x84
 8006efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	01db      	lsls	r3, r3, #7
 8006f08:	440b      	add	r3, r1
 8006f0a:	3384      	adds	r3, #132	; 0x84
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <LTDC_SetConfig+0x330>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	01db      	lsls	r3, r3, #7
 8006f1e:	4413      	add	r3, r2
 8006f20:	3384      	adds	r3, #132	; 0x84
 8006f22:	461a      	mov	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	01db      	lsls	r3, r3, #7
 8006f34:	4413      	add	r3, r2
 8006f36:	3384      	adds	r3, #132	; 0x84
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	01d2      	lsls	r2, r2, #7
 8006f44:	440a      	add	r2, r1
 8006f46:	3284      	adds	r2, #132	; 0x84
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	6013      	str	r3, [r2, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	fffff8f8 	.word	0xfffff8f8
 8006f60:	fffff800 	.word	0xfffff800

08006f64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a04      	ldr	r2, [pc, #16]	; (8006f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f72:	6013      	str	r3, [r2, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40007000 	.word	0x40007000

08006f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f8e:	4b23      	ldr	r3, [pc, #140]	; (800701c <HAL_PWREx_EnableOverDrive+0x98>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	4a22      	ldr	r2, [pc, #136]	; (800701c <HAL_PWREx_EnableOverDrive+0x98>)
 8006f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f98:	6413      	str	r3, [r2, #64]	; 0x40
 8006f9a:	4b20      	ldr	r3, [pc, #128]	; (800701c <HAL_PWREx_EnableOverDrive+0x98>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006fa6:	4b1e      	ldr	r3, [pc, #120]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fb2:	f7fc fdf7 	bl	8003ba4 <HAL_GetTick>
 8006fb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fb8:	e009      	b.n	8006fce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fba:	f7fc fdf3 	bl	8003ba4 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc8:	d901      	bls.n	8006fce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e022      	b.n	8007014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fce:	4b14      	ldr	r3, [pc, #80]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d1ee      	bne.n	8006fba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fe8:	f7fc fddc 	bl	8003ba4 <HAL_GetTick>
 8006fec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fee:	e009      	b.n	8007004 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ff0:	f7fc fdd8 	bl	8003ba4 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffe:	d901      	bls.n	8007004 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e007      	b.n	8007014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007010:	d1ee      	bne.n	8006ff0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40023800 	.word	0x40023800
 8007020:	40007000 	.word	0x40007000

08007024 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800702c:	f7fc fdba 	bl	8003ba4 <HAL_GetTick>
 8007030:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e067      	b.n	800710c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fb ff4d 	bl	8002ef0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007056:	f241 3188 	movw	r1, #5000	; 0x1388
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f85e 	bl	800711c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	3b01      	subs	r3, #1
 8007070:	021a      	lsls	r2, r3, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	2120      	movs	r1, #32
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f856 	bl	8007138 <QSPI_WaitFlagStateUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d135      	bne.n	8007102 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_QSPI_Init+0xf0>)
 800709e:	4013      	ands	r3, r2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6852      	ldr	r2, [r2, #4]
 80070a4:	0611      	lsls	r1, r2, #24
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68d2      	ldr	r2, [r2, #12]
 80070aa:	4311      	orrs	r1, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	69d2      	ldr	r2, [r2, #28]
 80070b0:	4311      	orrs	r1, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6a12      	ldr	r2, [r2, #32]
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <HAL_QSPI_Init+0xf4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6912      	ldr	r2, [r2, #16]
 80070ce:	0411      	lsls	r1, r2, #16
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6952      	ldr	r2, [r2, #20]
 80070d4:	4311      	orrs	r1, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6992      	ldr	r2, [r2, #24]
 80070da:	4311      	orrs	r1, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800710a:	7afb      	ldrb	r3, [r7, #11]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	00ffff2f 	.word	0x00ffff2f
 8007118:	ffe0f8fe 	.word	0xffe0f8fe

0800711c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007148:	e01a      	b.n	8007180 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d016      	beq.n	8007180 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007152:	f7fc fd27 	bl	8003ba4 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	429a      	cmp	r2, r3
 8007160:	d302      	bcc.n	8007168 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2204      	movs	r2, #4
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007174:	f043 0201 	orr.w	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e00e      	b.n	800719e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4013      	ands	r3, r2
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf14      	ite	ne
 800718e:	2301      	movne	r3, #1
 8007190:	2300      	moveq	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	429a      	cmp	r2, r3
 800719a:	d1d6      	bne.n	800714a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80071b0:	2300      	movs	r3, #0
 80071b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e291      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8087 	beq.w	80072da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071cc:	4b96      	ldr	r3, [pc, #600]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 030c 	and.w	r3, r3, #12
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d00c      	beq.n	80071f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071d8:	4b93      	ldr	r3, [pc, #588]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 030c 	and.w	r3, r3, #12
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d112      	bne.n	800720a <HAL_RCC_OscConfig+0x62>
 80071e4:	4b90      	ldr	r3, [pc, #576]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f0:	d10b      	bne.n	800720a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f2:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d06c      	beq.n	80072d8 <HAL_RCC_OscConfig+0x130>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d168      	bne.n	80072d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e26b      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007212:	d106      	bne.n	8007222 <HAL_RCC_OscConfig+0x7a>
 8007214:	4b84      	ldr	r3, [pc, #528]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a83      	ldr	r2, [pc, #524]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800721a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e02e      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x9c>
 800722a:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a7e      	ldr	r2, [pc, #504]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b7c      	ldr	r3, [pc, #496]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7b      	ldr	r2, [pc, #492]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800723c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e01d      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0xc0>
 800724e:	4b76      	ldr	r3, [pc, #472]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a75      	ldr	r2, [pc, #468]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b73      	ldr	r3, [pc, #460]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a72      	ldr	r2, [pc, #456]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007268:	4b6f      	ldr	r3, [pc, #444]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6e      	ldr	r2, [pc, #440]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800726e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b6c      	ldr	r3, [pc, #432]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6b      	ldr	r2, [pc, #428]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800727a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800727e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fc fc8c 	bl	8003ba4 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007290:	f7fc fc88 	bl	8003ba4 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b64      	cmp	r3, #100	; 0x64
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e21f      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a2:	4b61      	ldr	r3, [pc, #388]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0xe8>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fc fc78 	bl	8003ba4 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fc fc74 	bl	8003ba4 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	; 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e20b      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ca:	4b57      	ldr	r3, [pc, #348]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0x110>
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d069      	beq.n	80073ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072e6:	4b50      	ldr	r3, [pc, #320]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072f2:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d11c      	bne.n	8007338 <HAL_RCC_OscConfig+0x190>
 80072fe:	4b4a      	ldr	r3, [pc, #296]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d116      	bne.n	8007338 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730a:	4b47      	ldr	r3, [pc, #284]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RCC_OscConfig+0x17a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e1df      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007322:	4b41      	ldr	r3, [pc, #260]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	493d      	ldr	r1, [pc, #244]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007332:	4313      	orrs	r3, r2
 8007334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007336:	e040      	b.n	80073ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d023      	beq.n	8007388 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007340:	4b39      	ldr	r3, [pc, #228]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fc fc2a 	bl	8003ba4 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007354:	f7fc fc26 	bl	8003ba4 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e1bd      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007366:	4b30      	ldr	r3, [pc, #192]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007372:	4b2d      	ldr	r3, [pc, #180]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4929      	ldr	r1, [pc, #164]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007382:	4313      	orrs	r3, r2
 8007384:	600b      	str	r3, [r1, #0]
 8007386:	e018      	b.n	80073ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007388:	4b27      	ldr	r3, [pc, #156]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a26      	ldr	r2, [pc, #152]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007394:	f7fc fc06 	bl	8003ba4 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800739c:	f7fc fc02 	bl	8003ba4 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e199      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ae:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f0      	bne.n	800739c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d038      	beq.n	8007438 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d019      	beq.n	8007402 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80073d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d2:	4a15      	ldr	r2, [pc, #84]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073da:	f7fc fbe3 	bl	8003ba4 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073e2:	f7fc fbdf 	bl	8003ba4 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e176      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 80073f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x23a>
 8007400:	e01a      	b.n	8007438 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007406:	4a08      	ldr	r2, [pc, #32]	; (8007428 <HAL_RCC_OscConfig+0x280>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740e:	f7fc fbc9 	bl	8003ba4 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007414:	e00a      	b.n	800742c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007416:	f7fc fbc5 	bl	8003ba4 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d903      	bls.n	800742c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e15c      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
 8007428:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800742c:	4b91      	ldr	r3, [pc, #580]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 800742e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1ee      	bne.n	8007416 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 80a4 	beq.w	800758e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007446:	4b8b      	ldr	r3, [pc, #556]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10d      	bne.n	800746e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007452:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	4a87      	ldr	r2, [pc, #540]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800745c:	6413      	str	r3, [r2, #64]	; 0x40
 800745e:	4b85      	ldr	r3, [pc, #532]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800746a:	2301      	movs	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800746e:	4b82      	ldr	r3, [pc, #520]	; (8007678 <HAL_RCC_OscConfig+0x4d0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d118      	bne.n	80074ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800747a:	4b7f      	ldr	r3, [pc, #508]	; (8007678 <HAL_RCC_OscConfig+0x4d0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a7e      	ldr	r2, [pc, #504]	; (8007678 <HAL_RCC_OscConfig+0x4d0>)
 8007480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007486:	f7fc fb8d 	bl	8003ba4 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748e:	f7fc fb89 	bl	8003ba4 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b64      	cmp	r3, #100	; 0x64
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e120      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074a0:	4b75      	ldr	r3, [pc, #468]	; (8007678 <HAL_RCC_OscConfig+0x4d0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d106      	bne.n	80074c2 <HAL_RCC_OscConfig+0x31a>
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	4a6e      	ldr	r2, [pc, #440]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6713      	str	r3, [r2, #112]	; 0x70
 80074c0:	e02d      	b.n	800751e <HAL_RCC_OscConfig+0x376>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCC_OscConfig+0x33c>
 80074ca:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	4a69      	ldr	r2, [pc, #420]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	6713      	str	r3, [r2, #112]	; 0x70
 80074d6:	4b67      	ldr	r3, [pc, #412]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	4a66      	ldr	r2, [pc, #408]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074dc:	f023 0304 	bic.w	r3, r3, #4
 80074e0:	6713      	str	r3, [r2, #112]	; 0x70
 80074e2:	e01c      	b.n	800751e <HAL_RCC_OscConfig+0x376>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b05      	cmp	r3, #5
 80074ea:	d10c      	bne.n	8007506 <HAL_RCC_OscConfig+0x35e>
 80074ec:	4b61      	ldr	r3, [pc, #388]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	4a60      	ldr	r2, [pc, #384]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074f2:	f043 0304 	orr.w	r3, r3, #4
 80074f6:	6713      	str	r3, [r2, #112]	; 0x70
 80074f8:	4b5e      	ldr	r3, [pc, #376]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	4a5d      	ldr	r2, [pc, #372]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	6713      	str	r3, [r2, #112]	; 0x70
 8007504:	e00b      	b.n	800751e <HAL_RCC_OscConfig+0x376>
 8007506:	4b5b      	ldr	r3, [pc, #364]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750a:	4a5a      	ldr	r2, [pc, #360]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	6713      	str	r3, [r2, #112]	; 0x70
 8007512:	4b58      	ldr	r3, [pc, #352]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	4a57      	ldr	r2, [pc, #348]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007518:	f023 0304 	bic.w	r3, r3, #4
 800751c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d015      	beq.n	8007552 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007526:	f7fc fb3d 	bl	8003ba4 <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752c:	e00a      	b.n	8007544 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fc fb39 	bl	8003ba4 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f241 3288 	movw	r2, #5000	; 0x1388
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0ce      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007544:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0ee      	beq.n	800752e <HAL_RCC_OscConfig+0x386>
 8007550:	e014      	b.n	800757c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007552:	f7fc fb27 	bl	8003ba4 <HAL_GetTick>
 8007556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800755a:	f7fc fb23 	bl	8003ba4 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	; 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e0b8      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007570:	4b40      	ldr	r3, [pc, #256]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1ee      	bne.n	800755a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d105      	bne.n	800758e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007582:	4b3c      	ldr	r3, [pc, #240]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a3b      	ldr	r2, [pc, #236]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 80a4 	beq.w	80076e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007598:	4b36      	ldr	r3, [pc, #216]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d06b      	beq.n	800767c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d149      	bne.n	8007640 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ac:	4b31      	ldr	r3, [pc, #196]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a30      	ldr	r2, [pc, #192]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80075b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b8:	f7fc faf4 	bl	8003ba4 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c0:	f7fc faf0 	bl	8003ba4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e087      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d2:	4b28      	ldr	r3, [pc, #160]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69da      	ldr	r2, [r3, #28]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	019b      	lsls	r3, r3, #6
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	061b      	lsls	r3, r3, #24
 8007602:	4313      	orrs	r3, r2
 8007604:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800760a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800760c:	4b19      	ldr	r3, [pc, #100]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007618:	f7fc fac4 	bl	8003ba4 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007620:	f7fc fac0 	bl	8003ba4 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e057      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0x478>
 800763e:	e04f      	b.n	80076e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007640:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0b      	ldr	r2, [pc, #44]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fc faaa 	bl	8003ba4 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007654:	f7fc faa6 	bl	8003ba4 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e03d      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007666:	4b03      	ldr	r3, [pc, #12]	; (8007674 <HAL_RCC_OscConfig+0x4cc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x4ac>
 8007672:	e035      	b.n	80076e0 <HAL_RCC_OscConfig+0x538>
 8007674:	40023800 	.word	0x40023800
 8007678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800767c:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <HAL_RCC_OscConfig+0x544>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d028      	beq.n	80076dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d121      	bne.n	80076dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d11a      	bne.n	80076dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076ac:	4013      	ands	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d111      	bne.n	80076dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	3b01      	subs	r3, #1
 80076c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d107      	bne.n	80076dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40023800 	.word	0x40023800

080076f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0d0      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007708:	4b6a      	ldr	r3, [pc, #424]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d910      	bls.n	8007738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007716:	4b67      	ldr	r3, [pc, #412]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 020f 	bic.w	r2, r3, #15
 800771e:	4965      	ldr	r1, [pc, #404]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b63      	ldr	r3, [pc, #396]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0b8      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007750:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a58      	ldr	r2, [pc, #352]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800775a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007768:	4b53      	ldr	r3, [pc, #332]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4a52      	ldr	r2, [pc, #328]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800776e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007774:	4b50      	ldr	r3, [pc, #320]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	494d      	ldr	r1, [pc, #308]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d040      	beq.n	8007814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d107      	bne.n	80077aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b47      	ldr	r3, [pc, #284]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d115      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e07f      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d107      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077b2:	4b41      	ldr	r3, [pc, #260]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e073      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c2:	4b3d      	ldr	r3, [pc, #244]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e06b      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077d2:	4b39      	ldr	r3, [pc, #228]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f023 0203 	bic.w	r2, r3, #3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4936      	ldr	r1, [pc, #216]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e4:	f7fc f9de 	bl	8003ba4 <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ea:	e00a      	b.n	8007802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ec:	f7fc f9da 	bl	8003ba4 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e053      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007802:	4b2d      	ldr	r3, [pc, #180]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 020c 	and.w	r2, r3, #12
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	429a      	cmp	r2, r3
 8007812:	d1eb      	bne.n	80077ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d210      	bcs.n	8007844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f023 020f 	bic.w	r2, r3, #15
 800782a:	4922      	ldr	r1, [pc, #136]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	4313      	orrs	r3, r2
 8007830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007832:	4b20      	ldr	r3, [pc, #128]	; (80078b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e032      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007850:	4b19      	ldr	r3, [pc, #100]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4916      	ldr	r1, [pc, #88]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800785e:	4313      	orrs	r3, r2
 8007860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	490e      	ldr	r1, [pc, #56]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800787e:	4313      	orrs	r3, r2
 8007880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007882:	f000 f821 	bl	80078c8 <HAL_RCC_GetSysClockFreq>
 8007886:	4601      	mov	r1, r0
 8007888:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <HAL_RCC_ClockConfig+0x1c8>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_RCC_ClockConfig+0x1cc>)
 8007894:	5cd3      	ldrb	r3, [r2, r3]
 8007896:	fa21 f303 	lsr.w	r3, r1, r3
 800789a:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <HAL_RCC_ClockConfig+0x1d0>)
 800789c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <HAL_RCC_ClockConfig+0x1d4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fb ffc8 	bl	8003838 <HAL_InitTick>

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40023c00 	.word	0x40023c00
 80078b8:	40023800 	.word	0x40023800
 80078bc:	0802c670 	.word	0x0802c670
 80078c0:	20000018 	.word	0x20000018
 80078c4:	2000001c 	.word	0x2000001c

080078c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	2300      	movs	r3, #0
 80078d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078de:	4b50      	ldr	r3, [pc, #320]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 030c 	and.w	r3, r3, #12
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d007      	beq.n	80078fa <HAL_RCC_GetSysClockFreq+0x32>
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d008      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x38>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 808d 	bne.w	8007a0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078f4:	4b4b      	ldr	r3, [pc, #300]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x15c>)
 80078f6:	60bb      	str	r3, [r7, #8]
      break;
 80078f8:	e08c      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078fa:	4b4b      	ldr	r3, [pc, #300]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x160>)
 80078fc:	60bb      	str	r3, [r7, #8]
      break;
 80078fe:	e089      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007900:	4b47      	ldr	r3, [pc, #284]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007908:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800790a:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d023      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007916:	4b42      	ldr	r3, [pc, #264]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	099b      	lsrs	r3, r3, #6
 800791c:	f04f 0400 	mov.w	r4, #0
 8007920:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	ea03 0501 	and.w	r5, r3, r1
 800792c:	ea04 0602 	and.w	r6, r4, r2
 8007930:	4a3d      	ldr	r2, [pc, #244]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x160>)
 8007932:	fb02 f106 	mul.w	r1, r2, r6
 8007936:	2200      	movs	r2, #0
 8007938:	fb02 f205 	mul.w	r2, r2, r5
 800793c:	440a      	add	r2, r1
 800793e:	493a      	ldr	r1, [pc, #232]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x160>)
 8007940:	fba5 0101 	umull	r0, r1, r5, r1
 8007944:	1853      	adds	r3, r2, r1
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f04f 0400 	mov.w	r4, #0
 800794e:	461a      	mov	r2, r3
 8007950:	4623      	mov	r3, r4
 8007952:	f7f8 ff41 	bl	80007d8 <__aeabi_uldivmod>
 8007956:	4603      	mov	r3, r0
 8007958:	460c      	mov	r4, r1
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e049      	b.n	80079f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800795e:	4b30      	ldr	r3, [pc, #192]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	099b      	lsrs	r3, r3, #6
 8007964:	f04f 0400 	mov.w	r4, #0
 8007968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	ea03 0501 	and.w	r5, r3, r1
 8007974:	ea04 0602 	and.w	r6, r4, r2
 8007978:	4629      	mov	r1, r5
 800797a:	4632      	mov	r2, r6
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	0154      	lsls	r4, r2, #5
 8007986:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800798a:	014b      	lsls	r3, r1, #5
 800798c:	4619      	mov	r1, r3
 800798e:	4622      	mov	r2, r4
 8007990:	1b49      	subs	r1, r1, r5
 8007992:	eb62 0206 	sbc.w	r2, r2, r6
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	0194      	lsls	r4, r2, #6
 80079a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079a4:	018b      	lsls	r3, r1, #6
 80079a6:	1a5b      	subs	r3, r3, r1
 80079a8:	eb64 0402 	sbc.w	r4, r4, r2
 80079ac:	f04f 0100 	mov.w	r1, #0
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	00e2      	lsls	r2, r4, #3
 80079b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079ba:	00d9      	lsls	r1, r3, #3
 80079bc:	460b      	mov	r3, r1
 80079be:	4614      	mov	r4, r2
 80079c0:	195b      	adds	r3, r3, r5
 80079c2:	eb44 0406 	adc.w	r4, r4, r6
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	02a2      	lsls	r2, r4, #10
 80079d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80079d4:	0299      	lsls	r1, r3, #10
 80079d6:	460b      	mov	r3, r1
 80079d8:	4614      	mov	r4, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	4621      	mov	r1, r4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	461a      	mov	r2, r3
 80079e6:	4623      	mov	r3, r4
 80079e8:	f7f8 fef6 	bl	80007d8 <__aeabi_uldivmod>
 80079ec:	4603      	mov	r3, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x158>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	3301      	adds	r3, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	60bb      	str	r3, [r7, #8]
      break;
 8007a0c:	e002      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007a10:	60bb      	str	r3, [r7, #8]
      break;
 8007a12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a14:	68bb      	ldr	r3, [r7, #8]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	017d7840 	.word	0x017d7840

08007a2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000018 	.word	0x20000018

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a9b      	lsrs	r3, r3, #10
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4a03      	ldr	r2, [pc, #12]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5cd3      	ldrb	r3, [r2, r3]
 8007a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	0802c680 	.word	0x0802c680

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a70:	f7ff ffdc 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a74:	4601      	mov	r1, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4a03      	ldr	r2, [pc, #12]	; (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5cd3      	ldrb	r3, [r2, r3]
 8007a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	0802c680 	.word	0x0802c680

08007a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0203 	and.w	r2, r3, #3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <HAL_RCC_GetClockConfig+0x60>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	601a      	str	r2, [r3, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40023800 	.word	0x40023800
 8007af4:	40023c00 	.word	0x40023c00

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d012      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b20:	4b69      	ldr	r3, [pc, #420]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	4a68      	ldr	r2, [pc, #416]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b2a:	6093      	str	r3, [r2, #8]
 8007b2c:	4b66      	ldr	r3, [pc, #408]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b34:	4964      	ldr	r1, [pc, #400]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d017      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b52:	4b5d      	ldr	r3, [pc, #372]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	4959      	ldr	r1, [pc, #356]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b70:	d101      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d017      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b8e:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	494a      	ldr	r1, [pc, #296]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 808b 	beq.w	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bdc:	4b3a      	ldr	r3, [pc, #232]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	4a39      	ldr	r2, [pc, #228]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be6:	6413      	str	r3, [r2, #64]	; 0x40
 8007be8:	4b37      	ldr	r3, [pc, #220]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bf4:	4b35      	ldr	r3, [pc, #212]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a34      	ldr	r2, [pc, #208]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c00:	f7fb ffd0 	bl	8003ba4 <HAL_GetTick>
 8007c04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c06:	e008      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c08:	f7fb ffcc 	bl	8003ba4 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b64      	cmp	r3, #100	; 0x64
 8007c14:	d901      	bls.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e355      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c1a:	4b2c      	ldr	r3, [pc, #176]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0f0      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c26:	4b28      	ldr	r3, [pc, #160]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d035      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d02e      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c44:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c4e:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c52:	4a1d      	ldr	r2, [pc, #116]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c6c:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d114      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c78:	f7fb ff94 	bl	8003ba4 <HAL_GetTick>
 8007c7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c80:	f7fb ff90 	bl	8003ba4 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e317      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0ee      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cae:	d111      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007cb0:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	4901      	ldr	r1, [pc, #4]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]
 8007cc6:	e00b      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40007000 	.word	0x40007000
 8007cd0:	0ffffcff 	.word	0x0ffffcff
 8007cd4:	4bb0      	ldr	r3, [pc, #704]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4aaf      	ldr	r2, [pc, #700]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cde:	6093      	str	r3, [r2, #8]
 8007ce0:	4bad      	ldr	r3, [pc, #692]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cec:	49aa      	ldr	r1, [pc, #680]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0310 	and.w	r3, r3, #16
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cfe:	4ba6      	ldr	r3, [pc, #664]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d04:	4aa4      	ldr	r2, [pc, #656]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007d0e:	4ba2      	ldr	r3, [pc, #648]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	499f      	ldr	r1, [pc, #636]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d2c:	4b9a      	ldr	r3, [pc, #616]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3a:	4997      	ldr	r1, [pc, #604]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5c:	498e      	ldr	r1, [pc, #568]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d70:	4b89      	ldr	r3, [pc, #548]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7e:	4986      	ldr	r1, [pc, #536]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d92:	4b81      	ldr	r3, [pc, #516]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	497d      	ldr	r1, [pc, #500]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007db4:	4b78      	ldr	r3, [pc, #480]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dba:	f023 0203 	bic.w	r2, r3, #3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	4975      	ldr	r1, [pc, #468]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dd6:	4b70      	ldr	r3, [pc, #448]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f023 020c 	bic.w	r2, r3, #12
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de4:	496c      	ldr	r1, [pc, #432]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007df8:	4b67      	ldr	r3, [pc, #412]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	4964      	ldr	r1, [pc, #400]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e1a:	4b5f      	ldr	r3, [pc, #380]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e28:	495b      	ldr	r1, [pc, #364]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e3c:	4b56      	ldr	r3, [pc, #344]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	4953      	ldr	r1, [pc, #332]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e5e:	4b4e      	ldr	r3, [pc, #312]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6c:	494a      	ldr	r1, [pc, #296]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e80:	4b45      	ldr	r3, [pc, #276]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8e:	4942      	ldr	r1, [pc, #264]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ea2:	4b3d      	ldr	r3, [pc, #244]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb0:	4939      	ldr	r1, [pc, #228]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ec4:	4b34      	ldr	r3, [pc, #208]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ed2:	4931      	ldr	r1, [pc, #196]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ee6:	4b2c      	ldr	r3, [pc, #176]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef4:	4928      	ldr	r1, [pc, #160]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f04:	d101      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f26:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f34:	4918      	ldr	r1, [pc, #96]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f58:	490f      	ldr	r1, [pc, #60]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d005      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f6e:	f040 80d8 	bne.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f72:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a08      	ldr	r2, [pc, #32]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7e:	f7fb fe11 	bl	8003ba4 <HAL_GetTick>
 8007f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f84:	e00a      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f86:	f7fb fe0d 	bl	8003ba4 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b64      	cmp	r3, #100	; 0x64
 8007f92:	d903      	bls.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e196      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007f98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f9c:	4b6c      	ldr	r3, [pc, #432]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1ee      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d021      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d11d      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fbc:	4b64      	ldr	r3, [pc, #400]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007fca:	4b61      	ldr	r3, [pc, #388]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd0:	0e1b      	lsrs	r3, r3, #24
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	019a      	lsls	r2, r3, #6
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	061b      	lsls	r3, r3, #24
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	071b      	lsls	r3, r3, #28
 8007ff0:	4957      	ldr	r1, [pc, #348]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008016:	2b00      	cmp	r3, #0
 8008018:	d02e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008022:	d129      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008024:	4b4a      	ldr	r3, [pc, #296]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802a:	0c1b      	lsrs	r3, r3, #16
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008032:	4b47      	ldr	r3, [pc, #284]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008038:	0f1b      	lsrs	r3, r3, #28
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	019a      	lsls	r2, r3, #6
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	061b      	lsls	r3, r3, #24
 8008052:	431a      	orrs	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	071b      	lsls	r3, r3, #28
 8008058:	493d      	ldr	r1, [pc, #244]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008060:	4b3b      	ldr	r3, [pc, #236]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008066:	f023 021f 	bic.w	r2, r3, #31
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	3b01      	subs	r3, #1
 8008070:	4937      	ldr	r1, [pc, #220]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01d      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008084:	4b32      	ldr	r3, [pc, #200]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808a:	0e1b      	lsrs	r3, r3, #24
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008092:	4b2f      	ldr	r3, [pc, #188]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008098:	0f1b      	lsrs	r3, r3, #28
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	019a      	lsls	r2, r3, #6
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	431a      	orrs	r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	061b      	lsls	r3, r3, #24
 80080b2:	431a      	orrs	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	071b      	lsls	r3, r3, #28
 80080b8:	4925      	ldr	r1, [pc, #148]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d011      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	019a      	lsls	r2, r3, #6
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	071b      	lsls	r3, r3, #28
 80080e8:	4919      	ldr	r1, [pc, #100]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a16      	ldr	r2, [pc, #88]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080fc:	f7fb fd52 	bl	8003ba4 <HAL_GetTick>
 8008100:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008104:	f7fb fd4e 	bl	8003ba4 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b64      	cmp	r3, #100	; 0x64
 8008110:	d901      	bls.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e0d7      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008116:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b01      	cmp	r3, #1
 8008126:	f040 80cd 	bne.w	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a08      	ldr	r2, [pc, #32]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008136:	f7fb fd35 	bl	8003ba4 <HAL_GetTick>
 800813a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800813c:	e00a      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800813e:	f7fb fd31 	bl	8003ba4 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b64      	cmp	r3, #100	; 0x64
 800814a:	d903      	bls.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e0ba      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008150:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008154:	4b5e      	ldr	r3, [pc, #376]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008160:	d0ed      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800817e:	2b00      	cmp	r3, #0
 8008180:	d02e      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d12a      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800818a:	4b51      	ldr	r3, [pc, #324]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008198:	4b4d      	ldr	r3, [pc, #308]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819e:	0f1b      	lsrs	r3, r3, #28
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	019a      	lsls	r2, r3, #6
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	431a      	orrs	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	071b      	lsls	r3, r3, #28
 80081be:	4944      	ldr	r1, [pc, #272]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081c6:	4b42      	ldr	r3, [pc, #264]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	3b01      	subs	r3, #1
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	493d      	ldr	r1, [pc, #244]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d022      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081f4:	d11d      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081f6:	4b36      	ldr	r3, [pc, #216]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008204:	4b32      	ldr	r3, [pc, #200]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820a:	0f1b      	lsrs	r3, r3, #28
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	019a      	lsls	r2, r3, #6
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	431a      	orrs	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	061b      	lsls	r3, r3, #24
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	071b      	lsls	r3, r3, #28
 800822a:	4929      	ldr	r1, [pc, #164]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d028      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008244:	0e1b      	lsrs	r3, r3, #24
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800824c:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	019a      	lsls	r2, r3, #6
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	431a      	orrs	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	061b      	lsls	r3, r3, #24
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	071b      	lsls	r3, r3, #28
 8008272:	4917      	ldr	r1, [pc, #92]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800827c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4911      	ldr	r1, [pc, #68]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008290:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a0e      	ldr	r2, [pc, #56]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829c:	f7fb fc82 	bl	8003ba4 <HAL_GetTick>
 80082a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082a4:	f7fb fc7e 	bl	8003ba4 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b64      	cmp	r3, #100	; 0x64
 80082b0:	d901      	bls.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e007      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c2:	d1ef      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3720      	adds	r7, #32
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40023800 	.word	0x40023800

080082d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082f2:	f040 8086 	bne.w	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80082f6:	4b8d      	ldr	r3, [pc, #564]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008304:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830c:	d03e      	beq.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800830e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008312:	d073      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d000      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008318:	e074      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800831a:	4b84      	ldr	r3, [pc, #528]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d108      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008326:	4b81      	ldr	r3, [pc, #516]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832e:	4a80      	ldr	r2, [pc, #512]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	e007      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008338:	4b7c      	ldr	r3, [pc, #496]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008340:	4a7c      	ldr	r2, [pc, #496]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008342:	fbb2 f3f3 	udiv	r3, r2, r3
 8008346:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008348:	4b78      	ldr	r3, [pc, #480]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834e:	0e1b      	lsrs	r3, r3, #24
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008356:	4b75      	ldr	r3, [pc, #468]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	099b      	lsrs	r3, r3, #6
 800835e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	fb02 f203 	mul.w	r2, r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	fbb2 f3f3 	udiv	r3, r2, r3
 800836e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008370:	4b6e      	ldr	r3, [pc, #440]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	3301      	adds	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	fbb2 f3f3 	udiv	r3, r2, r3
 8008388:	617b      	str	r3, [r7, #20]
        break;
 800838a:	e03b      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800838c:	4b67      	ldr	r3, [pc, #412]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d108      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008398:	4b64      	ldr	r3, [pc, #400]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a0:	4a63      	ldr	r2, [pc, #396]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80083a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	e007      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80083aa:	4b60      	ldr	r3, [pc, #384]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b2:	4a60      	ldr	r2, [pc, #384]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80083b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80083ba:	4b5c      	ldr	r3, [pc, #368]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c0:	0e1b      	lsrs	r3, r3, #24
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80083c8:	4b58      	ldr	r3, [pc, #352]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ce:	099b      	lsrs	r3, r3, #6
 80083d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	fb02 f203 	mul.w	r2, r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80083e2:	4b52      	ldr	r3, [pc, #328]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e8:	f003 031f 	and.w	r3, r3, #31
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]
        break;
 80083fa:	e003      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80083fc:	4b4e      	ldr	r3, [pc, #312]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80083fe:	617b      	str	r3, [r7, #20]
        break;
 8008400:	e000      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008402:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800840a:	f040 8086 	bne.w	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008414:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800841c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008424:	d03e      	beq.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842a:	d073      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d000      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008430:	e074      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008432:	4b3e      	ldr	r3, [pc, #248]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d108      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800843e:	4b3b      	ldr	r3, [pc, #236]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008446:	4a3a      	ldr	r2, [pc, #232]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	e007      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008450:	4b36      	ldr	r3, [pc, #216]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008458:	4a36      	ldr	r2, [pc, #216]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800845a:	fbb2 f3f3 	udiv	r3, r2, r3
 800845e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008460:	4b32      	ldr	r3, [pc, #200]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	0e1b      	lsrs	r3, r3, #24
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800846e:	4b2f      	ldr	r3, [pc, #188]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	099b      	lsrs	r3, r3, #6
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	fb02 f203 	mul.w	r2, r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	fbb2 f3f3 	udiv	r3, r2, r3
 8008486:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008488:	4b28      	ldr	r3, [pc, #160]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800848a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a0:	617b      	str	r3, [r7, #20]
        break;
 80084a2:	e03b      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80084a4:	4b21      	ldr	r3, [pc, #132]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084b0:	4b1e      	ldr	r3, [pc, #120]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b8:	4a1d      	ldr	r2, [pc, #116]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	e007      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80084c2:	4b1a      	ldr	r3, [pc, #104]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ca:	4a1a      	ldr	r2, [pc, #104]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80084cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80084d2:	4b16      	ldr	r3, [pc, #88]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e6:	099b      	lsrs	r3, r3, #6
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	fb02 f203 	mul.w	r2, r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	3301      	adds	r3, #1
 8008506:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]
        break;
 8008512:	e003      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008516:	617b      	str	r3, [r7, #20]
        break;
 8008518:	e000      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800851a:	bf00      	nop

  return frequency;
 800851c:	697b      	ldr	r3, [r7, #20]
}
 800851e:	4618      	mov	r0, r3
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40023800 	.word	0x40023800
 8008530:	00f42400 	.word	0x00f42400
 8008534:	017d7840 	.word	0x017d7840
 8008538:	00bb8000 	.word	0x00bb8000

0800853c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e06b      	b.n	8008626 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7f5b      	ldrb	r3, [r3, #29]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fa fd56 	bl	8003010 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	22ca      	movs	r2, #202	; 0xca
 8008570:	625a      	str	r2, [r3, #36]	; 0x24
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2253      	movs	r2, #83	; 0x53
 8008578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fb00 	bl	8008b80 <RTC_EnterInitMode>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	22ff      	movs	r2, #255	; 0xff
 800858c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e046      	b.n	8008626 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6899      	ldr	r1, [r3, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <HAL_RTC_Init+0xf4>)
 80085a4:	400b      	ands	r3, r1
 80085a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68d2      	ldr	r2, [r2, #12]
 80085ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6919      	ldr	r1, [r3, #16]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	041a      	lsls	r2, r3, #16
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0208 	bic.w	r2, r2, #8
 8008602:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	22ff      	movs	r2, #255	; 0xff
 800861c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008624:	2300      	movs	r3, #0
  }
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	ff8fffbf 	.word	0xff8fffbf

08008634 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008634:	b590      	push	{r4, r7, lr}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7f1b      	ldrb	r3, [r3, #28]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_RTC_SetTime+0x1c>
 800864c:	2302      	movs	r3, #2
 800864e:	e0a8      	b.n	80087a2 <HAL_RTC_SetTime+0x16e>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d126      	bne.n	80086b0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d102      	bne.n	8008676 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 faac 	bl	8008bd8 <RTC_ByteToBcd2>
 8008680:	4603      	mov	r3, r0
 8008682:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 faa5 	bl	8008bd8 <RTC_ByteToBcd2>
 800868e:	4603      	mov	r3, r0
 8008690:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008692:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	789b      	ldrb	r3, [r3, #2]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fa9d 	bl	8008bd8 <RTC_ByteToBcd2>
 800869e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80086a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	7b1b      	ldrb	r3, [r3, #12]
 80086a8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]
 80086ae:	e018      	b.n	80086e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086d0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	7b1b      	ldrb	r3, [r3, #12]
 80086dc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	22ca      	movs	r2, #202	; 0xca
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2253      	movs	r2, #83	; 0x53
 80086f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fa44 	bl	8008b80 <RTC_EnterInitMode>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2204      	movs	r2, #4
 800870a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e045      	b.n	80087a2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	4b23      	ldr	r3, [pc, #140]	; (80087ac <HAL_RTC_SetTime+0x178>)
 800871e:	400b      	ands	r3, r1
 8008720:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008730:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6899      	ldr	r1, [r3, #8]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	431a      	orrs	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008758:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d111      	bne.n	800878c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f9e1 	bl	8008b30 <HAL_RTC_WaitForSynchro>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	22ff      	movs	r2, #255	; 0xff
 800877a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2204      	movs	r2, #4
 8008780:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e00a      	b.n	80087a2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	22ff      	movs	r2, #255	; 0xff
 8008792:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80087a0:	2300      	movs	r3, #0
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd90      	pop	{r4, r7, pc}
 80087aa:	bf00      	nop
 80087ac:	007f7f7f 	.word	0x007f7f7f

080087b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	7f1b      	ldrb	r3, [r3, #28]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_RTC_SetDate+0x1c>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e092      	b.n	80088f2 <HAL_RTC_SetDate+0x142>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2201      	movs	r2, #1
 80087d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2202      	movs	r2, #2
 80087d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10e      	bne.n	80087fc <HAL_RTC_SetDate+0x4c>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	f023 0310 	bic.w	r3, r3, #16
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	330a      	adds	r3, #10
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11c      	bne.n	800883c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f9e6 	bl	8008bd8 <RTC_ByteToBcd2>
 800880c:	4603      	mov	r3, r0
 800880e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f9df 	bl	8008bd8 <RTC_ByteToBcd2>
 800881a:	4603      	mov	r3, r0
 800881c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800881e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	789b      	ldrb	r3, [r3, #2]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f9d7 	bl	8008bd8 <RTC_ByteToBcd2>
 800882a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800882c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e00e      	b.n	800885a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	78db      	ldrb	r3, [r3, #3]
 8008840:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008848:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800884e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	22ca      	movs	r2, #202	; 0xca
 8008860:	625a      	str	r2, [r3, #36]	; 0x24
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2253      	movs	r2, #83	; 0x53
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f988 	bl	8008b80 <RTC_EnterInitMode>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	22ff      	movs	r2, #255	; 0xff
 800887c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2204      	movs	r2, #4
 8008882:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e031      	b.n	80088f2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	6979      	ldr	r1, [r7, #20]
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <HAL_RTC_SetDate+0x14c>)
 8008896:	400b      	ands	r3, r1
 8008898:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d111      	bne.n	80088dc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f939 	bl	8008b30 <HAL_RTC_WaitForSynchro>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2204      	movs	r2, #4
 80088d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e00a      	b.n	80088f2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	22ff      	movs	r2, #255	; 0xff
 80088e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}
 80088fa:	bf00      	nop
 80088fc:	00ffff3f 	.word	0x00ffff3f

08008900 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008900:	b590      	push	{r4, r7, lr}
 8008902:	b089      	sub	sp, #36	; 0x24
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	7f1b      	ldrb	r3, [r3, #28]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <HAL_RTC_SetAlarm+0x24>
 8008920:	2302      	movs	r3, #2
 8008922:	e101      	b.n	8008b28 <HAL_RTC_SetAlarm+0x228>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2202      	movs	r2, #2
 800892e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d137      	bne.n	80089a6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2200      	movs	r2, #0
 8008948:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f942 	bl	8008bd8 <RTC_ByteToBcd2>
 8008954:	4603      	mov	r3, r0
 8008956:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 f93b 	bl	8008bd8 <RTC_ByteToBcd2>
 8008962:	4603      	mov	r3, r0
 8008964:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008966:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	789b      	ldrb	r3, [r3, #2]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f933 	bl	8008bd8 <RTC_ByteToBcd2>
 8008972:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008974:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7b1b      	ldrb	r3, [r3, #12]
 800897c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800897e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f925 	bl	8008bd8 <RTC_ByteToBcd2>
 800898e:	4603      	mov	r3, r0
 8008990:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008992:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800899a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80089a0:	4313      	orrs	r3, r2
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	e023      	b.n	80089ee <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089c6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	7b1b      	ldrb	r3, [r3, #12]
 80089d2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089ea:	4313      	orrs	r3, r2
 80089ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	22ca      	movs	r2, #202	; 0xca
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2253      	movs	r2, #83	; 0x53
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a12:	d13f      	bne.n	8008a94 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a22:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a32:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a34:	f7fb f8b6 	bl	8003ba4 <HAL_GetTick>
 8008a38:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a3a:	e013      	b.n	8008a64 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a3c:	f7fb f8b2 	bl	8003ba4 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a4a:	d90b      	bls.n	8008a64 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	22ff      	movs	r2, #255	; 0xff
 8008a52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2203      	movs	r2, #3
 8008a58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e061      	b.n	8008b28 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0e4      	beq.n	8008a3c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a90:	609a      	str	r2, [r3, #8]
 8008a92:	e03e      	b.n	8008b12 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008aa2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ab4:	f7fb f876 	bl	8003ba4 <HAL_GetTick>
 8008ab8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008aba:	e013      	b.n	8008ae4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008abc:	f7fb f872 	bl	8003ba4 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aca:	d90b      	bls.n	8008ae4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	22ff      	movs	r2, #255	; 0xff
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e021      	b.n	8008b28 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0e4      	beq.n	8008abc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b10:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	22ff      	movs	r2, #255	; 0xff
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3724      	adds	r7, #36	; 0x24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd90      	pop	{r4, r7, pc}

08008b30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b4c:	f7fb f82a 	bl	8003ba4 <HAL_GetTick>
 8008b50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b52:	e009      	b.n	8008b68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b54:	f7fb f826 	bl	8003ba4 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b62:	d901      	bls.n	8008b68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e007      	b.n	8008b78 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0ee      	beq.n	8008b54 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d119      	bne.n	8008bce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ba4:	f7fa fffe 	bl	8003ba4 <HAL_GetTick>
 8008ba8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008baa:	e009      	b.n	8008bc0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bac:	f7fa fffa 	bl	8003ba4 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bba:	d901      	bls.n	8008bc0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e007      	b.n	8008bd0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0ee      	beq.n	8008bac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008be6:	e005      	b.n	8008bf4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	3b0a      	subs	r3, #10
 8008bf2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b09      	cmp	r3, #9
 8008bf8:	d8f6      	bhi.n	8008be8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	b2db      	uxtb	r3, r3
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	7f1b      	ldrb	r3, [r3, #28]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e03e      	b.n	8008cae <HAL_RTCEx_SetTimeStamp+0x9a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	22ca      	movs	r2, #202	; 0xca
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2253      	movs	r2, #83	; 0x53
 8008c5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0206 	bic.w	r2, r2, #6
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	fffff7f7 	.word	0xfffff7f7

08008cc0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e149      	b.n	8008f72 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fa fd36 	bl	8003764 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f94f 	bl	8008fa4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d007      	beq.n	8008d1e <HAL_SAI_Init+0x5e>
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d302      	bcc.n	8008d18 <HAL_SAI_Init+0x58>
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d006      	beq.n	8008d24 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008d16:	e008      	b.n	8008d2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]
      break;
 8008d1c:	e005      	b.n	8008d2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008d1e:	2310      	movs	r3, #16
 8008d20:	61fb      	str	r3, [r7, #28]
      break;
 8008d22:	e002      	b.n	8008d2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008d24:	2320      	movs	r3, #32
 8008d26:	61fb      	str	r3, [r7, #28]
      break;
 8008d28:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d81d      	bhi.n	8008d6e <HAL_SAI_Init+0xae>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <HAL_SAI_Init+0x78>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d49 	.word	0x08008d49
 8008d3c:	08008d4f 	.word	0x08008d4f
 8008d40:	08008d57 	.word	0x08008d57
 8008d44:	08008d5f 	.word	0x08008d5f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d4c:	e010      	b.n	8008d70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d52:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d54:	e00c      	b.n	8008d70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d5a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d5c:	e008      	b.n	8008d70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d62:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008d6c:	e000      	b.n	8008d70 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008d6e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a81      	ldr	r2, [pc, #516]	; (8008f7c <HAL_SAI_Init+0x2bc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d004      	beq.n	8008d84 <HAL_SAI_Init+0xc4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a80      	ldr	r2, [pc, #512]	; (8008f80 <HAL_SAI_Init+0x2c0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d103      	bne.n	8008d8c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008d84:	4a7f      	ldr	r2, [pc, #508]	; (8008f84 <HAL_SAI_Init+0x2c4>)
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	e002      	b.n	8008d92 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008d8c:	4a7e      	ldr	r2, [pc, #504]	; (8008f88 <HAL_SAI_Init+0x2c8>)
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d043      	beq.n	8008e22 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a76      	ldr	r2, [pc, #472]	; (8008f7c <HAL_SAI_Init+0x2bc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_SAI_Init+0xf2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a74      	ldr	r2, [pc, #464]	; (8008f80 <HAL_SAI_Init+0x2c0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d104      	bne.n	8008dbc <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008db2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008db6:	f7ff fa8d 	bl	80082d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dba:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a72      	ldr	r2, [pc, #456]	; (8008f8c <HAL_SAI_Init+0x2cc>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <HAL_SAI_Init+0x110>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a71      	ldr	r2, [pc, #452]	; (8008f90 <HAL_SAI_Init+0x2d0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d104      	bne.n	8008dda <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008dd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008dd4:	f7ff fa7e 	bl	80082d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dd8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	461a      	mov	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	025b      	lsls	r3, r3, #9
 8008dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a67      	ldr	r2, [pc, #412]	; (8008f94 <HAL_SAI_Init+0x2d4>)
 8008df6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfa:	08da      	lsrs	r2, r3, #3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008e00:	68f9      	ldr	r1, [r7, #12]
 8008e02:	4b64      	ldr	r3, [pc, #400]	; (8008f94 <HAL_SAI_Init+0x2d4>)
 8008e04:	fba3 2301 	umull	r2, r3, r3, r1
 8008e08:	08da      	lsrs	r2, r3, #3
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	1aca      	subs	r2, r1, r3
 8008e14:	2a08      	cmp	r2, #8
 8008e16:	d904      	bls.n	8008e22 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_SAI_Init+0x172>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d109      	bne.n	8008e46 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_SAI_Init+0x17e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e001      	b.n	8008e42 <HAL_SAI_Init+0x182>
 8008e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	e008      	b.n	8008e58 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d102      	bne.n	8008e54 <HAL_SAI_Init+0x194>
 8008e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e52:	e000      	b.n	8008e56 <HAL_SAI_Init+0x196>
 8008e54:	2300      	movs	r3, #0
 8008e56:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b4d      	ldr	r3, [pc, #308]	; (8008f98 <HAL_SAI_Init+0x2d8>)
 8008e64:	400b      	ands	r3, r1
 8008e66:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6819      	ldr	r1, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e7c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	431a      	orrs	r2, r3
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008e90:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e9c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	051b      	lsls	r3, r3, #20
 8008ea4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b38      	ldr	r3, [pc, #224]	; (8008f9c <HAL_SAI_Init+0x2dc>)
 8008eba:	400b      	ands	r3, r1
 8008ebc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6859      	ldr	r1, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6899      	ldr	r1, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b2e      	ldr	r3, [pc, #184]	; (8008fa0 <HAL_SAI_Init+0x2e0>)
 8008ee8:	400b      	ands	r3, r1
 8008eea:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6899      	ldr	r1, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008efc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008f02:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008f08:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008f12:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68d9      	ldr	r1, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008f2a:	400b      	ands	r3, r1
 8008f2c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68d9      	ldr	r1, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	041b      	lsls	r3, r3, #16
 8008f44:	431a      	orrs	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3720      	adds	r7, #32
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	40015804 	.word	0x40015804
 8008f80:	40015824 	.word	0x40015824
 8008f84:	40015800 	.word	0x40015800
 8008f88:	40015c00 	.word	0x40015c00
 8008f8c:	40015c04 	.word	0x40015c04
 8008f90:	40015c24 	.word	0x40015c24
 8008f94:	cccccccd 	.word	0xcccccccd
 8008f98:	ff05c010 	.word	0xff05c010
 8008f9c:	ffff1ff0 	.word	0xffff1ff0
 8008fa0:	fff88000 	.word	0xfff88000

08008fa4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008fa4:	b490      	push	{r4, r7}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <SAI_Disable+0x64>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a16      	ldr	r2, [pc, #88]	; (800900c <SAI_Disable+0x68>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fcc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008fce:	4623      	mov	r3, r4
 8008fd0:	1e5c      	subs	r4, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fea:	e006      	b.n	8008ffa <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e9      	bne.n	8008fce <SAI_Disable+0x2a>

  return status;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bc90      	pop	{r4, r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000018 	.word	0x20000018
 800900c:	95cbec1b 	.word	0x95cbec1b

08009010 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e022      	b.n	8009068 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7fa f805 	bl	8003044 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2203      	movs	r2, #3
 800903e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f814 	bl	8009070 <HAL_SD_InitCard>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e00a      	b.n	8009068 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009070:	b5b0      	push	{r4, r5, r7, lr}
 8009072:	b08e      	sub	sp, #56	; 0x38
 8009074:	af04      	add	r7, sp, #16
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009078:	2300      	movs	r3, #0
 800907a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800907c:	2300      	movs	r3, #0
 800907e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009080:	2300      	movs	r3, #0
 8009082:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800908c:	2376      	movs	r3, #118	; 0x76
 800908e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681d      	ldr	r5, [r3, #0]
 8009094:	466c      	mov	r4, sp
 8009096:	f107 0314 	add.w	r3, r7, #20
 800909a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800909e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090a2:	f107 0308 	add.w	r3, r7, #8
 80090a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090a8:	4628      	mov	r0, r5
 80090aa:	f002 ff51 	bl	800bf50 <SDMMC_Init>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80090b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e03b      	b.n	8009138 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090ce:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 ff74 	bl	800bfc2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fde6 	bl	8009cbc <SD_PowerON>
 80090f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e013      	b.n	8009138 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fd05 	bl	8009b20 <SD_InitCard>
 8009116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00b      	beq.n	8009136 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3728      	adds	r7, #40	; 0x28
 800913c:	46bd      	mov	sp, r7
 800913e:	bdb0      	pop	{r4, r5, r7, pc}

08009140 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0cc      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	f040 80c5 	bne.w	8009300 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800917c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009186:	429a      	cmp	r2, r3
 8009188:	d907      	bls.n	800919a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0b3      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2203      	movs	r2, #3
 800919e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80091b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	4a53      	ldr	r2, [pc, #332]	; (800930c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80091c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	4a52      	ldr	r2, [pc, #328]	; (8009310 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80091c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	2200      	movs	r2, #0
 80091d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3380      	adds	r3, #128	; 0x80
 80091dc:	4619      	mov	r1, r3
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	025b      	lsls	r3, r3, #9
 80091e4:	089b      	lsrs	r3, r3, #2
 80091e6:	f7fb ff8b 	bl	8005100 <HAL_DMA_Start_IT>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d017      	beq.n	8009220 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80091fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a43      	ldr	r2, [pc, #268]	; (8009314 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e070      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0208 	orr.w	r2, r2, #8
 800922e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009234:	2b01      	cmp	r3, #1
 8009236:	d002      	beq.n	800923e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	025b      	lsls	r3, r3, #9
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009246:	4618      	mov	r0, r3
 8009248:	f002 ff4e 	bl	800c0e8 <SDMMC_CmdBlockLength>
 800924c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00f      	beq.n	8009274 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a2e      	ldr	r2, [pc, #184]	; (8009314 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	431a      	orrs	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e046      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009274:	f04f 33ff 	mov.w	r3, #4294967295
 8009278:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	025b      	lsls	r3, r3, #9
 800927e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009280:	2390      	movs	r3, #144	; 0x90
 8009282:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009284:	2302      	movs	r3, #2
 8009286:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009288:	2300      	movs	r3, #0
 800928a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800928c:	2301      	movs	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f107 0210 	add.w	r2, r7, #16
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f002 fef8 	bl	800c090 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d90a      	bls.n	80092bc <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2282      	movs	r2, #130	; 0x82
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 ff5c 	bl	800c170 <SDMMC_CmdReadMultiBlock>
 80092b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092ba:	e009      	b.n	80092d0 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2281      	movs	r2, #129	; 0x81
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 ff2f 	bl	800c12c <SDMMC_CmdReadSingleBlock>
 80092ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d012      	beq.n	80092fc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a0e      	ldr	r2, [pc, #56]	; (8009314 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	431a      	orrs	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e002      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	e000      	b.n	8009302 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8009300:	2302      	movs	r3, #2
  }
}
 8009302:	4618      	mov	r0, r3
 8009304:	3730      	adds	r7, #48	; 0x30
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	08009a0b 	.word	0x08009a0b
 8009310:	08009a7d 	.word	0x08009a7d
 8009314:	004005ff 	.word	0x004005ff

08009318 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	; 0x30
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d107      	bne.n	8009340 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0cf      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	f040 80c8 	bne.w	80094de <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935e:	429a      	cmp	r2, r3
 8009360:	d907      	bls.n	8009372 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e0b6      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2203      	movs	r2, #3
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2200      	movs	r2, #0
 8009380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f042 021a 	orr.w	r2, r2, #26
 8009390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009396:	4a54      	ldr	r2, [pc, #336]	; (80094e8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	4a53      	ldr	r2, [pc, #332]	; (80094ec <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80093a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a6:	2200      	movs	r2, #0
 80093a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d002      	beq.n	80093b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	025b      	lsls	r3, r3, #9
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 fe91 	bl	800c0e8 <SDMMC_CmdBlockLength>
 80093c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00f      	beq.n	80093ee <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a47      	ldr	r2, [pc, #284]	; (80094f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e078      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d90a      	bls.n	800940a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	22a0      	movs	r2, #160	; 0xa0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009400:	4618      	mov	r0, r3
 8009402:	f002 fef9 	bl	800c1f8 <SDMMC_CmdWriteMultiBlock>
 8009406:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009408:	e009      	b.n	800941e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2290      	movs	r2, #144	; 0x90
 800940e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009416:	4618      	mov	r0, r3
 8009418:	f002 fecc 	bl	800c1b4 <SDMMC_CmdWriteSingleBlock>
 800941c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d012      	beq.n	800944a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a31      	ldr	r2, [pc, #196]	; (80094f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	431a      	orrs	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e04a      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0208 	orr.w	r2, r2, #8
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3380      	adds	r3, #128	; 0x80
 8009466:	461a      	mov	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	025b      	lsls	r3, r3, #9
 800946c:	089b      	lsrs	r3, r3, #2
 800946e:	f7fb fe47 	bl	8005100 <HAL_DMA_Start_IT>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01a      	beq.n	80094ae <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 021a 	bic.w	r2, r2, #26
 8009486:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a18      	ldr	r2, [pc, #96]	; (80094f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e018      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094ae:	f04f 33ff 	mov.w	r3, #4294967295
 80094b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	025b      	lsls	r3, r3, #9
 80094b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80094ba:	2390      	movs	r3, #144	; 0x90
 80094bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80094c6:	2301      	movs	r3, #1
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f107 0210 	add.w	r2, r7, #16
 80094d2:	4611      	mov	r1, r2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f002 fddb 	bl	800c090 <SDMMC_ConfigData>

      return HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	e000      	b.n	80094e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80094de:	2302      	movs	r3, #2
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3730      	adds	r7, #48	; 0x30
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	080099e1 	.word	0x080099e1
 80094ec:	08009a7d 	.word	0x08009a7d
 80094f0:	004005ff 	.word	0x004005ff

080094f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009516:	0f9b      	lsrs	r3, r3, #30
 8009518:	b2da      	uxtb	r2, r3
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009522:	0e9b      	lsrs	r3, r3, #26
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009534:	0e1b      	lsrs	r3, r3, #24
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	b2da      	uxtb	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	b2da      	uxtb	r2, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	b2da      	uxtb	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009568:	0d1b      	lsrs	r3, r3, #20
 800956a:	b29a      	uxth	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009586:	0bdb      	lsrs	r3, r3, #15
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009598:	0b9b      	lsrs	r3, r3, #14
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095aa:	0b5b      	lsrs	r3, r3, #13
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	0b1b      	lsrs	r3, r3, #12
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2200      	movs	r2, #0
 80095ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d163      	bne.n	80096a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095dc:	009a      	lsls	r2, r3, #2
 80095de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095e2:	4013      	ands	r3, r2
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095e8:	0f92      	lsrs	r2, r2, #30
 80095ea:	431a      	orrs	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f4:	0edb      	lsrs	r3, r3, #27
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009606:	0e1b      	lsrs	r3, r3, #24
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009618:	0d5b      	lsrs	r3, r3, #21
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	b2da      	uxtb	r2, r3
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962a:	0c9b      	lsrs	r3, r3, #18
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	b2da      	uxtb	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	0bdb      	lsrs	r3, r3, #15
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	b2da      	uxtb	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	7e1b      	ldrb	r3, [r3, #24]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	3302      	adds	r3, #2
 8009660:	2201      	movs	r2, #1
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800966a:	fb02 f203 	mul.w	r2, r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	7a1b      	ldrb	r3, [r3, #8]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	2201      	movs	r2, #1
 800967e:	409a      	lsls	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800968c:	0a52      	lsrs	r2, r2, #9
 800968e:	fb02 f203 	mul.w	r2, r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800969c:	661a      	str	r2, [r3, #96]	; 0x60
 800969e:	e031      	b.n	8009704 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d11d      	bne.n	80096e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ac:	041b      	lsls	r3, r3, #16
 80096ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	431a      	orrs	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	3301      	adds	r3, #1
 80096c4:	029a      	lsls	r2, r3, #10
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	661a      	str	r2, [r3, #96]	; 0x60
 80096e2:	e00f      	b.n	8009704 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a58      	ldr	r2, [pc, #352]	; (800984c <HAL_SD_GetCardCSD+0x344>)
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e09d      	b.n	8009840 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009708:	0b9b      	lsrs	r3, r3, #14
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971a:	09db      	lsrs	r3, r3, #7
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	0fdb      	lsrs	r3, r3, #31
 800973e:	b2da      	uxtb	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	0f5b      	lsrs	r3, r3, #29
 800974a:	b2db      	uxtb	r3, r3
 800974c:	f003 0303 	and.w	r3, r3, #3
 8009750:	b2da      	uxtb	r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	0e9b      	lsrs	r3, r3, #26
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	b2da      	uxtb	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976c:	0d9b      	lsrs	r3, r3, #22
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	b2da      	uxtb	r2, r3
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977e:	0d5b      	lsrs	r3, r3, #21
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	0bdb      	lsrs	r3, r3, #15
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	0b9b      	lsrs	r3, r3, #14
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	0b5b      	lsrs	r3, r3, #13
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	0b1b      	lsrs	r3, r3, #12
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	0a9b      	lsrs	r3, r3, #10
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	b2da      	uxtb	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	b2db      	uxtb	r3, r3
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	b2da      	uxtb	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	004005ff 	.word	0x004005ff

08009850 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80098a8:	b5b0      	push	{r4, r5, r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af04      	add	r7, sp, #16
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2203      	movs	r2, #3
 80098b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d02e      	beq.n	8009920 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c8:	d106      	bne.n	80098d8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
 80098d6:	e029      	b.n	800992c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098de:	d10a      	bne.n	80098f6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 faa1 	bl	8009e28 <SD_WideBus_Enable>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38
 80098f4:	e01a      	b.n	800992c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fade 	bl	8009ebe <SD_WideBus_Disable>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
 8009910:	e00c      	b.n	800992c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
 800991e:	e005      	b.n	800992c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009930:	2b00      	cmp	r3, #0
 8009932:	d009      	beq.n	8009948 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a18      	ldr	r2, [pc, #96]	; (800999c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e024      	b.n	8009992 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681d      	ldr	r5, [r3, #0]
 800996e:	466c      	mov	r4, sp
 8009970:	f107 0318 	add.w	r3, r7, #24
 8009974:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009982:	4628      	mov	r0, r5
 8009984:	f002 fae4 	bl	800bf50 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3728      	adds	r7, #40	; 0x28
 8009996:	46bd      	mov	sp, r7
 8009998:	bdb0      	pop	{r4, r5, r7, pc}
 800999a:	bf00      	nop
 800999c:	004005ff 	.word	0x004005ff

080099a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099ac:	f107 030c 	add.w	r3, r7, #12
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa10 	bl	8009dd8 <SD_SendStatus>
 80099b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	0a5b      	lsrs	r3, r3, #9
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099d6:	693b      	ldr	r3, [r7, #16]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80099fe:	bf00      	nop
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	2b82      	cmp	r3, #130	; 0x82
 8009a1e:	d111      	bne.n	8009a44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f002 fc09 	bl	800c23c <SDMMC_CmdStopTransfer>
 8009a2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d008      	beq.n	8009a44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fd58 	bl	80094f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0208 	bic.w	r2, r2, #8
 8009a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f003 f84f 	bl	800cb10 <HAL_SD_RxCpltCallback>
#endif
}
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fb fb98 	bl	80051c0 <HAL_DMA_GetError>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d03e      	beq.n	8009b14 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d002      	beq.n	8009ab2 <SD_DMAError+0x36>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d12d      	bne.n	8009b0e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <SD_DMAError+0xa0>)
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009ac8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	f7ff ff62 	bl	80099a0 <HAL_SD_GetCardState>
 8009adc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2b06      	cmp	r3, #6
 8009ae2:	d002      	beq.n	8009aea <SD_DMAError+0x6e>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d10a      	bne.n	8009b00 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 fba4 	bl	800c23c <SDMMC_CmdStopTransfer>
 8009af4:	4602      	mov	r2, r0
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	431a      	orrs	r2, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009b0e:	6978      	ldr	r0, [r7, #20]
 8009b10:	f7ff fcf0 	bl	80094f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009b14:	bf00      	nop
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	004005ff 	.word	0x004005ff

08009b20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b20:	b5b0      	push	{r4, r5, r7, lr}
 8009b22:	b094      	sub	sp, #80	; 0x50
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f002 fa55 	bl	800bfe0 <SDMMC_GetPowerState>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b40:	e0b7      	b.n	8009cb2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d02f      	beq.n	8009baa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f002 fc7f 	bl	800c452 <SDMMC_CmdSendCID>
 8009b54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	e0a8      	b.n	8009cb2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f002 fa7f 	bl	800c06a <SDMMC_GetResponse>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2104      	movs	r1, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f002 fa76 	bl	800c06a <SDMMC_GetResponse>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2108      	movs	r1, #8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f002 fa6d 	bl	800c06a <SDMMC_GetResponse>
 8009b90:	4602      	mov	r2, r0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	210c      	movs	r1, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f002 fa64 	bl	800c06a <SDMMC_GetResponse>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d00d      	beq.n	8009bce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f107 020e 	add.w	r2, r7, #14
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f002 fc85 	bl	800c4cc <SDMMC_CmdSetRelAdd>
 8009bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <SD_InitCard+0xae>
    {
      return errorstate;
 8009bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bcc:	e071      	b.n	8009cb2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d036      	beq.n	8009c44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bd6:	89fb      	ldrh	r3, [r7, #14]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be6:	041b      	lsls	r3, r3, #16
 8009be8:	4619      	mov	r1, r3
 8009bea:	4610      	mov	r0, r2
 8009bec:	f002 fc4f 	bl	800c48e <SDMMC_CmdSendCSD>
 8009bf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	e05a      	b.n	8009cb2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f002 fa31 	bl	800c06a <SDMMC_GetResponse>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2104      	movs	r1, #4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f002 fa28 	bl	800c06a <SDMMC_GetResponse>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2108      	movs	r1, #8
 8009c26:	4618      	mov	r0, r3
 8009c28:	f002 fa1f 	bl	800c06a <SDMMC_GetResponse>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	210c      	movs	r1, #12
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f002 fa16 	bl	800c06a <SDMMC_GetResponse>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2104      	movs	r1, #4
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f002 fa0d 	bl	800c06a <SDMMC_GetResponse>
 8009c50:	4603      	mov	r3, r0
 8009c52:	0d1a      	lsrs	r2, r3, #20
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c58:	f107 0310 	add.w	r3, r7, #16
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fc52 	bl	8009508 <HAL_SD_GetCardCSD>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c6e:	e020      	b.n	8009cb2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	f04f 0400 	mov.w	r4, #0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	4623      	mov	r3, r4
 8009c82:	4608      	mov	r0, r1
 8009c84:	f002 fafc 	bl	800c280 <SDMMC_CmdSelDesel>
 8009c88:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c92:	e00e      	b.n	8009cb2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681d      	ldr	r5, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	466c      	mov	r4, sp
 8009c9c:	f103 0210 	add.w	r2, r3, #16
 8009ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009caa:	4628      	mov	r0, r5
 8009cac:	f002 f950 	bl	800bf50 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3740      	adds	r7, #64	; 0x40
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009cbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 faf6 	bl	800c2c6 <SDMMC_CmdGoIdleState>
 8009cda:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	e072      	b.n	8009dcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 fb09 	bl	800c302 <SDMMC_CmdOperCond>
 8009cf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00d      	beq.n	8009d14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fadf 	bl	800c2c6 <SDMMC_CmdGoIdleState>
 8009d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e05b      	b.n	8009dcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d137      	bne.n	8009d92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2100      	movs	r1, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f002 fb09 	bl	800c340 <SDMMC_CmdAppCommand>
 8009d2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d02d      	beq.n	8009d92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d3a:	e047      	b.n	8009dcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2100      	movs	r1, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f002 fafc 	bl	800c340 <SDMMC_CmdAppCommand>
 8009d48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	e03b      	b.n	8009dcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	491e      	ldr	r1, [pc, #120]	; (8009dd4 <SD_PowerON+0x118>)
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f002 fb12 	bl	800c384 <SDMMC_CmdAppOperCommand>
 8009d60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d6c:	e02e      	b.n	8009dcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f002 f978 	bl	800c06a <SDMMC_GetResponse>
 8009d7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	0fdb      	lsrs	r3, r3, #31
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <SD_PowerON+0xcc>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <SD_PowerON+0xce>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	613b      	str	r3, [r7, #16]

    count++;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d802      	bhi.n	8009da2 <SD_PowerON+0xe6>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0cc      	beq.n	8009d3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d902      	bls.n	8009db2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db0:	e00c      	b.n	8009dcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	645a      	str	r2, [r3, #68]	; 0x44
 8009dc2:	e002      	b.n	8009dca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	c1100000 	.word	0xc1100000

08009dd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dec:	e018      	b.n	8009e20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f002 fb87 	bl	800c50e <SDMMC_CmdSendStatus>
 8009e00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	e009      	b.n	8009e20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f002 f929 	bl	800c06a <SDMMC_GetResponse>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	2300      	movs	r3, #0
 8009e36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f002 f913 	bl	800c06a <SDMMC_GetResponse>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4e:	d102      	bne.n	8009e56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e54:	e02f      	b.n	8009eb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e56:	f107 030c 	add.w	r3, r7, #12
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f879 	bl	8009f54 <SD_FindSCR>
 8009e62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	e023      	b.n	8009eb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d01c      	beq.n	8009eb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e80:	041b      	lsls	r3, r3, #16
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f002 fa5b 	bl	800c340 <SDMMC_CmdAppCommand>
 8009e8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	e00f      	b.n	8009eb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f002 fa95 	bl	800c3cc <SDMMC_CmdBusWidth>
 8009ea2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	e003      	b.n	8009eb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e001      	b.n	8009eb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009eb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f002 f8c8 	bl	800c06a <SDMMC_GetResponse>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ee4:	d102      	bne.n	8009eec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eea:	e02f      	b.n	8009f4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f82e 	bl	8009f54 <SD_FindSCR>
 8009ef8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	e023      	b.n	8009f4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01c      	beq.n	8009f48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f16:	041b      	lsls	r3, r3, #16
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	f002 fa10 	bl	800c340 <SDMMC_CmdAppCommand>
 8009f20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	e00f      	b.n	8009f4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fa4a 	bl	800c3cc <SDMMC_CmdBusWidth>
 8009f38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	e003      	b.n	8009f4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	e001      	b.n	8009f4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f54:	b590      	push	{r4, r7, lr}
 8009f56:	b08f      	sub	sp, #60	; 0x3c
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f5e:	f7f9 fe21 	bl	8003ba4 <HAL_GetTick>
 8009f62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60bb      	str	r3, [r7, #8]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2108      	movs	r1, #8
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f002 f8b4 	bl	800c0e8 <SDMMC_CmdBlockLength>
 8009f80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	e0a9      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f94:	041b      	lsls	r3, r3, #16
 8009f96:	4619      	mov	r1, r3
 8009f98:	4610      	mov	r0, r2
 8009f9a:	f002 f9d1 	bl	800c340 <SDMMC_CmdAppCommand>
 8009f9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	e09a      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009faa:	f04f 33ff 	mov.w	r3, #4294967295
 8009fae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009fb4:	2330      	movs	r3, #48	; 0x30
 8009fb6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f107 0210 	add.w	r2, r7, #16
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f002 f85e 	bl	800c090 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f002 fa19 	bl	800c410 <SDMMC_CmdSendSCR>
 8009fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d022      	beq.n	800a02c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	e07a      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00e      	beq.n	800a016 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	f107 0208 	add.w	r2, r7, #8
 800a004:	18d4      	adds	r4, r2, r3
 800a006:	4608      	mov	r0, r1
 800a008:	f001 ffce 	bl	800bfa8 <SDMMC_ReadFIFO>
 800a00c:	4603      	mov	r3, r0
 800a00e:	6023      	str	r3, [r4, #0]
      index++;
 800a010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a012:	3301      	adds	r3, #1
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a016:	f7f9 fdc5 	bl	8003ba4 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d102      	bne.n	800a02c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a026:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a02a:	e059      	b.n	800a0e0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a032:	f240 432a 	movw	r3, #1066	; 0x42a
 800a036:	4013      	ands	r3, r2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0d6      	beq.n	8009fea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d005      	beq.n	800a056 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2208      	movs	r2, #8
 800a050:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a052:	2308      	movs	r3, #8
 800a054:	e044      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2202      	movs	r2, #2
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a06c:	2302      	movs	r3, #2
 800a06e:	e037      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2220      	movs	r2, #32
 800a084:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a086:	2320      	movs	r3, #32
 800a088:	e02a      	b.n	800a0e0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a092:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	061a      	lsls	r2, r3, #24
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	0e1b      	lsrs	r3, r3, #24
 800a0b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	601a      	str	r2, [r3, #0]
    scr++;
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	061a      	lsls	r2, r3, #24
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	021b      	lsls	r3, r3, #8
 800a0c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	0a1b      	lsrs	r3, r3, #8
 800a0ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	0e1b      	lsrs	r3, r3, #24
 800a0d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	373c      	adds	r7, #60	; 0x3c
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}

0800a0e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e025      	b.n	800a148 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7f9 fb1d 	bl	8003750 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3304      	adds	r3, #4
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f001 fdeb 	bl	800bd04 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	461a      	mov	r2, r3
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	f001 fe55 	bl	800bde8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d101      	bne.n	800a16c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a168:	2302      	movs	r3, #2
 800a16a:	e018      	b.n	800a19e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 feb3 	bl	800bee8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d104      	bne.n	800a194 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2205      	movs	r2, #5
 800a18e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a192:	e003      	b.n	800a19c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d101      	bne.n	800a1c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e00e      	b.n	800a1de <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 feab 	bl	800bf2a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e04c      	b.n	800a294 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f8 ff7a 	bl	8003108 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0203 	bic.w	r2, r2, #3
 800a22a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4b19      	ldr	r3, [pc, #100]	; (800a29c <HAL_SPDIFRX_Init+0xb4>)
 800a238:	4013      	ands	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a244:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a24a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a250:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a256:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a25c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a262:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a268:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a26e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a274:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	fff88407 	.word	0xfff88407

0800a2a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e084      	b.n	800a3bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d106      	bne.n	800a2d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7f8 ff5d 	bl	800318c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2f2:	d902      	bls.n	800a2fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e002      	b.n	800a300 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a308:	d007      	beq.n	800a31a <HAL_SPI_Init+0x7a>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a312:	d002      	beq.n	800a31a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a32a:	d903      	bls.n	800a334 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	631a      	str	r2, [r3, #48]	; 0x30
 800a332:	e002      	b.n	800a33a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	ea42 0103 	orr.w	r1, r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	f003 0204 	and.w	r2, r3, #4
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	ea42 0103 	orr.w	r1, r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	430a      	orrs	r2, r1
 800a39a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69da      	ldr	r2, [r3, #28]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e01d      	b.n	800a412 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7f8 ff30 	bl	8003250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f000 fb78 	bl	800aaf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0201 	orr.w	r2, r2, #1
 800a432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <HAL_TIM_Base_Start_IT+0x50>)
 800a43c:	4013      	ands	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b06      	cmp	r3, #6
 800a444:	d00b      	beq.n	800a45e <HAL_TIM_Base_Start_IT+0x42>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a44c:	d007      	beq.n	800a45e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f042 0201 	orr.w	r2, r2, #1
 800a45c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	00010007 	.word	0x00010007

0800a470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e01d      	b.n	800a4be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7f8 ff48 	bl	800332c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	f000 fb22 	bl	800aaf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d122      	bne.n	800a522 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d11b      	bne.n	800a522 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f06f 0202 	mvn.w	r2, #2
 800a4f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fad7 	bl	800aabc <HAL_TIM_IC_CaptureCallback>
 800a50e:	e005      	b.n	800a51c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fac9 	bl	800aaa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fada 	bl	800aad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d122      	bne.n	800a576 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	d11b      	bne.n	800a576 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f06f 0204 	mvn.w	r2, #4
 800a546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 faad 	bl	800aabc <HAL_TIM_IC_CaptureCallback>
 800a562:	e005      	b.n	800a570 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fa9f 	bl	800aaa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fab0 	bl	800aad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b08      	cmp	r3, #8
 800a582:	d122      	bne.n	800a5ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f003 0308 	and.w	r3, r3, #8
 800a58e:	2b08      	cmp	r3, #8
 800a590:	d11b      	bne.n	800a5ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f06f 0208 	mvn.w	r2, #8
 800a59a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2204      	movs	r2, #4
 800a5a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fa83 	bl	800aabc <HAL_TIM_IC_CaptureCallback>
 800a5b6:	e005      	b.n	800a5c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fa75 	bl	800aaa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa86 	bl	800aad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b10      	cmp	r3, #16
 800a5d6:	d122      	bne.n	800a61e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f003 0310 	and.w	r3, r3, #16
 800a5e2:	2b10      	cmp	r3, #16
 800a5e4:	d11b      	bne.n	800a61e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f06f 0210 	mvn.w	r2, #16
 800a5ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fa59 	bl	800aabc <HAL_TIM_IC_CaptureCallback>
 800a60a:	e005      	b.n	800a618 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fa4b 	bl	800aaa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa5c 	bl	800aad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d10e      	bne.n	800a64a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b01      	cmp	r3, #1
 800a638:	d107      	bne.n	800a64a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f06f 0201 	mvn.w	r2, #1
 800a642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7f8 f985 	bl	8002954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a654:	2b80      	cmp	r3, #128	; 0x80
 800a656:	d10e      	bne.n	800a676 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d107      	bne.n	800a676 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 feef 	bl	800b454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a684:	d10e      	bne.n	800a6a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a690:	2b80      	cmp	r3, #128	; 0x80
 800a692:	d107      	bne.n	800a6a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fee2 	bl	800b468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d10e      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	d107      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa0a 	bl	800aae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d10e      	bne.n	800a6fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f003 0320 	and.w	r3, r3, #32
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	d107      	bne.n	800a6fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0220 	mvn.w	r2, #32
 800a6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fea2 	bl	800b440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e105      	b.n	800a92a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2202      	movs	r2, #2
 800a72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b14      	cmp	r3, #20
 800a732:	f200 80f0 	bhi.w	800a916 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a736:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a917 	.word	0x0800a917
 800a744:	0800a917 	.word	0x0800a917
 800a748:	0800a917 	.word	0x0800a917
 800a74c:	0800a7d1 	.word	0x0800a7d1
 800a750:	0800a917 	.word	0x0800a917
 800a754:	0800a917 	.word	0x0800a917
 800a758:	0800a917 	.word	0x0800a917
 800a75c:	0800a813 	.word	0x0800a813
 800a760:	0800a917 	.word	0x0800a917
 800a764:	0800a917 	.word	0x0800a917
 800a768:	0800a917 	.word	0x0800a917
 800a76c:	0800a853 	.word	0x0800a853
 800a770:	0800a917 	.word	0x0800a917
 800a774:	0800a917 	.word	0x0800a917
 800a778:	0800a917 	.word	0x0800a917
 800a77c:	0800a895 	.word	0x0800a895
 800a780:	0800a917 	.word	0x0800a917
 800a784:	0800a917 	.word	0x0800a917
 800a788:	0800a917 	.word	0x0800a917
 800a78c:	0800a8d5 	.word	0x0800a8d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fa4e 	bl	800ac38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f042 0208 	orr.w	r2, r2, #8
 800a7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699a      	ldr	r2, [r3, #24]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 0204 	bic.w	r2, r2, #4
 800a7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6999      	ldr	r1, [r3, #24]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	691a      	ldr	r2, [r3, #16]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	619a      	str	r2, [r3, #24]
      break;
 800a7ce:	e0a3      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 faa0 	bl	800ad1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	699a      	ldr	r2, [r3, #24]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6999      	ldr	r1, [r3, #24]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	021a      	lsls	r2, r3, #8
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	619a      	str	r2, [r3, #24]
      break;
 800a810:	e082      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 faf7 	bl	800ae0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69da      	ldr	r2, [r3, #28]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0208 	orr.w	r2, r2, #8
 800a82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0204 	bic.w	r2, r2, #4
 800a83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69d9      	ldr	r1, [r3, #28]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	61da      	str	r2, [r3, #28]
      break;
 800a850:	e062      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fb4d 	bl	800aef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	69da      	ldr	r2, [r3, #28]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a86c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69da      	ldr	r2, [r3, #28]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a87c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69d9      	ldr	r1, [r3, #28]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	021a      	lsls	r2, r3, #8
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	61da      	str	r2, [r3, #28]
      break;
 800a892:	e041      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fb84 	bl	800afa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0208 	orr.w	r2, r2, #8
 800a8ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0204 	bic.w	r2, r2, #4
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8d2:	e021      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fbb6 	bl	800b04c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	021a      	lsls	r2, r3, #8
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a914:	e000      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a916:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop

0800a934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d101      	bne.n	800a94c <HAL_TIM_ConfigClockSource+0x18>
 800a948:	2302      	movs	r3, #2
 800a94a:	e0a6      	b.n	800aa9a <HAL_TIM_ConfigClockSource+0x166>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	4b4f      	ldr	r3, [pc, #316]	; (800aaa4 <HAL_TIM_ConfigClockSource+0x170>)
 800a968:	4013      	ands	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	d067      	beq.n	800aa54 <HAL_TIM_ConfigClockSource+0x120>
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d80b      	bhi.n	800a9a0 <HAL_TIM_ConfigClockSource+0x6c>
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d073      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x140>
 800a98c:	2b10      	cmp	r3, #16
 800a98e:	d802      	bhi.n	800a996 <HAL_TIM_ConfigClockSource+0x62>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d06f      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a994:	e078      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a996:	2b20      	cmp	r3, #32
 800a998:	d06c      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x140>
 800a99a:	2b30      	cmp	r3, #48	; 0x30
 800a99c:	d06a      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a99e:	e073      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a9a0:	2b70      	cmp	r3, #112	; 0x70
 800a9a2:	d00d      	beq.n	800a9c0 <HAL_TIM_ConfigClockSource+0x8c>
 800a9a4:	2b70      	cmp	r3, #112	; 0x70
 800a9a6:	d804      	bhi.n	800a9b2 <HAL_TIM_ConfigClockSource+0x7e>
 800a9a8:	2b50      	cmp	r3, #80	; 0x50
 800a9aa:	d033      	beq.n	800aa14 <HAL_TIM_ConfigClockSource+0xe0>
 800a9ac:	2b60      	cmp	r3, #96	; 0x60
 800a9ae:	d041      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a9b0:	e06a      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b6:	d066      	beq.n	800aa86 <HAL_TIM_ConfigClockSource+0x152>
 800a9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9bc:	d017      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a9be:	e063      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	6899      	ldr	r1, [r3, #8]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f000 fc0a 	bl	800b1e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	609a      	str	r2, [r3, #8]
      break;
 800a9ec:	e04c      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	6899      	ldr	r1, [r3, #8]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	f000 fbf3 	bl	800b1e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa10:	609a      	str	r2, [r3, #8]
      break;
 800aa12:	e039      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	6859      	ldr	r1, [r3, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	461a      	mov	r2, r3
 800aa22:	f000 fb67 	bl	800b0f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2150      	movs	r1, #80	; 0x50
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fbc0 	bl	800b1b2 <TIM_ITRx_SetConfig>
      break;
 800aa32:	e029      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	6859      	ldr	r1, [r3, #4]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	461a      	mov	r2, r3
 800aa42:	f000 fb86 	bl	800b152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2160      	movs	r1, #96	; 0x60
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fbb0 	bl	800b1b2 <TIM_ITRx_SetConfig>
      break;
 800aa52:	e019      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	6859      	ldr	r1, [r3, #4]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	461a      	mov	r2, r3
 800aa62:	f000 fb47 	bl	800b0f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2140      	movs	r1, #64	; 0x40
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fba0 	bl	800b1b2 <TIM_ITRx_SetConfig>
      break;
 800aa72:	e009      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f000 fb97 	bl	800b1b2 <TIM_ITRx_SetConfig>
      break;
 800aa84:	e000      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800aa86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	fffeff88 	.word	0xfffeff88

0800aaa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a40      	ldr	r2, [pc, #256]	; (800ac0c <TIM_Base_SetConfig+0x114>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d013      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab16:	d00f      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a3d      	ldr	r2, [pc, #244]	; (800ac10 <TIM_Base_SetConfig+0x118>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00b      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a3c      	ldr	r2, [pc, #240]	; (800ac14 <TIM_Base_SetConfig+0x11c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d007      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a3b      	ldr	r2, [pc, #236]	; (800ac18 <TIM_Base_SetConfig+0x120>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a3a      	ldr	r2, [pc, #232]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d108      	bne.n	800ab4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a2f      	ldr	r2, [pc, #188]	; (800ac0c <TIM_Base_SetConfig+0x114>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d02b      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab58:	d027      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2c      	ldr	r2, [pc, #176]	; (800ac10 <TIM_Base_SetConfig+0x118>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d023      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a2b      	ldr	r2, [pc, #172]	; (800ac14 <TIM_Base_SetConfig+0x11c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01f      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a2a      	ldr	r2, [pc, #168]	; (800ac18 <TIM_Base_SetConfig+0x120>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d01b      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a29      	ldr	r2, [pc, #164]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d017      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a28      	ldr	r2, [pc, #160]	; (800ac20 <TIM_Base_SetConfig+0x128>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a27      	ldr	r2, [pc, #156]	; (800ac24 <TIM_Base_SetConfig+0x12c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a26      	ldr	r2, [pc, #152]	; (800ac28 <TIM_Base_SetConfig+0x130>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a25      	ldr	r2, [pc, #148]	; (800ac2c <TIM_Base_SetConfig+0x134>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a24      	ldr	r2, [pc, #144]	; (800ac30 <TIM_Base_SetConfig+0x138>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_Base_SetConfig+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a23      	ldr	r2, [pc, #140]	; (800ac34 <TIM_Base_SetConfig+0x13c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d108      	bne.n	800abbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <TIM_Base_SetConfig+0x114>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d003      	beq.n	800abf0 <TIM_Base_SetConfig+0xf8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a0c      	ldr	r2, [pc, #48]	; (800ac1c <TIM_Base_SetConfig+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d103      	bne.n	800abf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	691a      	ldr	r2, [r3, #16]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	615a      	str	r2, [r3, #20]
}
 800abfe:	bf00      	nop
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	40010000 	.word	0x40010000
 800ac10:	40000400 	.word	0x40000400
 800ac14:	40000800 	.word	0x40000800
 800ac18:	40000c00 	.word	0x40000c00
 800ac1c:	40010400 	.word	0x40010400
 800ac20:	40014000 	.word	0x40014000
 800ac24:	40014400 	.word	0x40014400
 800ac28:	40014800 	.word	0x40014800
 800ac2c:	40001800 	.word	0x40001800
 800ac30:	40001c00 	.word	0x40001c00
 800ac34:	40002000 	.word	0x40002000

0800ac38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f023 0201 	bic.w	r2, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4b2b      	ldr	r3, [pc, #172]	; (800ad10 <TIM_OC1_SetConfig+0xd8>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f023 0302 	bic.w	r3, r3, #2
 800ac80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a21      	ldr	r2, [pc, #132]	; (800ad14 <TIM_OC1_SetConfig+0xdc>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_OC1_SetConfig+0x64>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a20      	ldr	r2, [pc, #128]	; (800ad18 <TIM_OC1_SetConfig+0xe0>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d10c      	bne.n	800acb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f023 0308 	bic.w	r3, r3, #8
 800aca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	4313      	orrs	r3, r2
 800acac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f023 0304 	bic.w	r3, r3, #4
 800acb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <TIM_OC1_SetConfig+0xdc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d003      	beq.n	800acc6 <TIM_OC1_SetConfig+0x8e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <TIM_OC1_SetConfig+0xe0>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d111      	bne.n	800acea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800accc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	621a      	str	r2, [r3, #32]
}
 800ad04:	bf00      	nop
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	fffeff8f 	.word	0xfffeff8f
 800ad14:	40010000 	.word	0x40010000
 800ad18:	40010400 	.word	0x40010400

0800ad1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f023 0210 	bic.w	r2, r3, #16
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <TIM_OC2_SetConfig+0xe4>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f023 0320 	bic.w	r3, r3, #32
 800ad66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	011b      	lsls	r3, r3, #4
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a23      	ldr	r2, [pc, #140]	; (800ae04 <TIM_OC2_SetConfig+0xe8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d003      	beq.n	800ad84 <TIM_OC2_SetConfig+0x68>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a22      	ldr	r2, [pc, #136]	; (800ae08 <TIM_OC2_SetConfig+0xec>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d10d      	bne.n	800ada0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a18      	ldr	r2, [pc, #96]	; (800ae04 <TIM_OC2_SetConfig+0xe8>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d003      	beq.n	800adb0 <TIM_OC2_SetConfig+0x94>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <TIM_OC2_SetConfig+0xec>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d113      	bne.n	800add8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	621a      	str	r2, [r3, #32]
}
 800adf2:	bf00      	nop
 800adf4:	371c      	adds	r7, #28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	feff8fff 	.word	0xfeff8fff
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4b2d      	ldr	r3, [pc, #180]	; (800aeec <TIM_OC3_SetConfig+0xe0>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a22      	ldr	r2, [pc, #136]	; (800aef0 <TIM_OC3_SetConfig+0xe4>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d003      	beq.n	800ae72 <TIM_OC3_SetConfig+0x66>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a21      	ldr	r2, [pc, #132]	; (800aef4 <TIM_OC3_SetConfig+0xe8>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d10d      	bne.n	800ae8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a17      	ldr	r2, [pc, #92]	; (800aef0 <TIM_OC3_SetConfig+0xe4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d003      	beq.n	800ae9e <TIM_OC3_SetConfig+0x92>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a16      	ldr	r2, [pc, #88]	; (800aef4 <TIM_OC3_SetConfig+0xe8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d113      	bne.n	800aec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aeac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	621a      	str	r2, [r3, #32]
}
 800aee0:	bf00      	nop
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	fffeff8f 	.word	0xfffeff8f
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400

0800aef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4b1e      	ldr	r3, [pc, #120]	; (800af9c <TIM_OC4_SetConfig+0xa4>)
 800af24:	4013      	ands	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	031b      	lsls	r3, r3, #12
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <TIM_OC4_SetConfig+0xa8>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_OC4_SetConfig+0x68>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a12      	ldr	r2, [pc, #72]	; (800afa4 <TIM_OC4_SetConfig+0xac>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d109      	bne.n	800af74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	019b      	lsls	r3, r3, #6
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	621a      	str	r2, [r3, #32]
}
 800af8e:	bf00      	nop
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	feff8fff 	.word	0xfeff8fff
 800afa0:	40010000 	.word	0x40010000
 800afa4:	40010400 	.word	0x40010400

0800afa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4b1b      	ldr	r3, [pc, #108]	; (800b040 <TIM_OC5_SetConfig+0x98>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800afe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	041b      	lsls	r3, r3, #16
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a12      	ldr	r2, [pc, #72]	; (800b044 <TIM_OC5_SetConfig+0x9c>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d003      	beq.n	800b006 <TIM_OC5_SetConfig+0x5e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a11      	ldr	r2, [pc, #68]	; (800b048 <TIM_OC5_SetConfig+0xa0>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d109      	bne.n	800b01a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	621a      	str	r2, [r3, #32]
}
 800b034:	bf00      	nop
 800b036:	371c      	adds	r7, #28
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	fffeff8f 	.word	0xfffeff8f
 800b044:	40010000 	.word	0x40010000
 800b048:	40010400 	.word	0x40010400

0800b04c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4b1c      	ldr	r3, [pc, #112]	; (800b0e8 <TIM_OC6_SetConfig+0x9c>)
 800b078:	4013      	ands	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	4313      	orrs	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b08e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	051b      	lsls	r3, r3, #20
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	4313      	orrs	r3, r2
 800b09a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <TIM_OC6_SetConfig+0xa0>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC6_SetConfig+0x60>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a12      	ldr	r2, [pc, #72]	; (800b0f0 <TIM_OC6_SetConfig+0xa4>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d109      	bne.n	800b0c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	029b      	lsls	r3, r3, #10
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	feff8fff 	.word	0xfeff8fff
 800b0ec:	40010000 	.word	0x40010000
 800b0f0:	40010400 	.word	0x40010400

0800b0f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	f023 0201 	bic.w	r2, r3, #1
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b11e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	011b      	lsls	r3, r3, #4
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4313      	orrs	r3, r2
 800b128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f023 030a 	bic.w	r3, r3, #10
 800b130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4313      	orrs	r3, r2
 800b138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	621a      	str	r2, [r3, #32]
}
 800b146:	bf00      	nop
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b152:	b480      	push	{r7}
 800b154:	b087      	sub	sp, #28
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f023 0210 	bic.w	r2, r3, #16
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a1b      	ldr	r3, [r3, #32]
 800b174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b17c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	031b      	lsls	r3, r3, #12
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b18e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4313      	orrs	r3, r2
 800b198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	621a      	str	r2, [r3, #32]
}
 800b1a6:	bf00      	nop
 800b1a8:	371c      	adds	r7, #28
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	f043 0307 	orr.w	r3, r3, #7
 800b1d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	609a      	str	r2, [r3, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	021a      	lsls	r2, r3, #8
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	431a      	orrs	r2, r3
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4313      	orrs	r3, r2
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	4313      	orrs	r3, r2
 800b214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	609a      	str	r2, [r3, #8]
}
 800b21c:	bf00      	nop
 800b21e:	371c      	adds	r7, #28
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e06d      	b.n	800b31c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a30      	ldr	r2, [pc, #192]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d004      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a2f      	ldr	r2, [pc, #188]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d108      	bne.n	800b286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b27a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a20      	ldr	r2, [pc, #128]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d022      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b2:	d01d      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a1d      	ldr	r2, [pc, #116]	; (800b330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d018      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a1c      	ldr	r2, [pc, #112]	; (800b334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d013      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00e      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a15      	ldr	r2, [pc, #84]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d009      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a16      	ldr	r2, [pc, #88]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d004      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d10c      	bne.n	800b30a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	40010000 	.word	0x40010000
 800b32c:	40010400 	.word	0x40010400
 800b330:	40000400 	.word	0x40000400
 800b334:	40000800 	.word	0x40000800
 800b338:	40000c00 	.word	0x40000c00
 800b33c:	40014000 	.word	0x40014000
 800b340:	40001800 	.word	0x40001800

0800b344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e065      	b.n	800b42c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	4313      	orrs	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	4313      	orrs	r3, r2
 800b390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	041b      	lsls	r3, r3, #16
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a16      	ldr	r2, [pc, #88]	; (800b438 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d004      	beq.n	800b3ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a14      	ldr	r2, [pc, #80]	; (800b43c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d115      	bne.n	800b41a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	051b      	lsls	r3, r3, #20
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	4313      	orrs	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	40010000 	.word	0x40010000
 800b43c:	40010400 	.word	0x40010400

0800b440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e040      	b.n	800b510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7f8 f832 	bl	8003508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2224      	movs	r2, #36	; 0x24
 800b4a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f022 0201 	bic.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f82c 	bl	800b518 <UART_SetConfig>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d101      	bne.n	800b4ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e022      	b.n	800b510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 faca 	bl	800ba6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689a      	ldr	r2, [r3, #8]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f042 0201 	orr.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fb51 	bl	800bbb0 <UART_CheckIdleState>
 800b50e:	4603      	mov	r3, r0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b520:	2300      	movs	r3, #0
 800b522:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	431a      	orrs	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	69db      	ldr	r3, [r3, #28]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	4bb1      	ldr	r3, [pc, #708]	; (800b80c <UART_SetConfig+0x2f4>)
 800b548:	4013      	ands	r3, r2
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	6812      	ldr	r2, [r2, #0]
 800b54e:	6939      	ldr	r1, [r7, #16]
 800b550:	430b      	orrs	r3, r1
 800b552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	4313      	orrs	r3, r2
 800b578:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a9f      	ldr	r2, [pc, #636]	; (800b810 <UART_SetConfig+0x2f8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d121      	bne.n	800b5dc <UART_SetConfig+0xc4>
 800b598:	4b9e      	ldr	r3, [pc, #632]	; (800b814 <UART_SetConfig+0x2fc>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d816      	bhi.n	800b5d4 <UART_SetConfig+0xbc>
 800b5a6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ac <UART_SetConfig+0x94>)
 800b5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b5c9 	.word	0x0800b5c9
 800b5b4:	0800b5c3 	.word	0x0800b5c3
 800b5b8:	0800b5cf 	.word	0x0800b5cf
 800b5bc:	2301      	movs	r3, #1
 800b5be:	77fb      	strb	r3, [r7, #31]
 800b5c0:	e151      	b.n	800b866 <UART_SetConfig+0x34e>
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	77fb      	strb	r3, [r7, #31]
 800b5c6:	e14e      	b.n	800b866 <UART_SetConfig+0x34e>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	77fb      	strb	r3, [r7, #31]
 800b5cc:	e14b      	b.n	800b866 <UART_SetConfig+0x34e>
 800b5ce:	2308      	movs	r3, #8
 800b5d0:	77fb      	strb	r3, [r7, #31]
 800b5d2:	e148      	b.n	800b866 <UART_SetConfig+0x34e>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	77fb      	strb	r3, [r7, #31]
 800b5d8:	bf00      	nop
 800b5da:	e144      	b.n	800b866 <UART_SetConfig+0x34e>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a8d      	ldr	r2, [pc, #564]	; (800b818 <UART_SetConfig+0x300>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d134      	bne.n	800b650 <UART_SetConfig+0x138>
 800b5e6:	4b8b      	ldr	r3, [pc, #556]	; (800b814 <UART_SetConfig+0x2fc>)
 800b5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ec:	f003 030c 	and.w	r3, r3, #12
 800b5f0:	2b0c      	cmp	r3, #12
 800b5f2:	d829      	bhi.n	800b648 <UART_SetConfig+0x130>
 800b5f4:	a201      	add	r2, pc, #4	; (adr r2, 800b5fc <UART_SetConfig+0xe4>)
 800b5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fa:	bf00      	nop
 800b5fc:	0800b631 	.word	0x0800b631
 800b600:	0800b649 	.word	0x0800b649
 800b604:	0800b649 	.word	0x0800b649
 800b608:	0800b649 	.word	0x0800b649
 800b60c:	0800b63d 	.word	0x0800b63d
 800b610:	0800b649 	.word	0x0800b649
 800b614:	0800b649 	.word	0x0800b649
 800b618:	0800b649 	.word	0x0800b649
 800b61c:	0800b637 	.word	0x0800b637
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b649 	.word	0x0800b649
 800b628:	0800b649 	.word	0x0800b649
 800b62c:	0800b643 	.word	0x0800b643
 800b630:	2300      	movs	r3, #0
 800b632:	77fb      	strb	r3, [r7, #31]
 800b634:	e117      	b.n	800b866 <UART_SetConfig+0x34e>
 800b636:	2302      	movs	r3, #2
 800b638:	77fb      	strb	r3, [r7, #31]
 800b63a:	e114      	b.n	800b866 <UART_SetConfig+0x34e>
 800b63c:	2304      	movs	r3, #4
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e111      	b.n	800b866 <UART_SetConfig+0x34e>
 800b642:	2308      	movs	r3, #8
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e10e      	b.n	800b866 <UART_SetConfig+0x34e>
 800b648:	2310      	movs	r3, #16
 800b64a:	77fb      	strb	r3, [r7, #31]
 800b64c:	bf00      	nop
 800b64e:	e10a      	b.n	800b866 <UART_SetConfig+0x34e>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a71      	ldr	r2, [pc, #452]	; (800b81c <UART_SetConfig+0x304>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d120      	bne.n	800b69c <UART_SetConfig+0x184>
 800b65a:	4b6e      	ldr	r3, [pc, #440]	; (800b814 <UART_SetConfig+0x2fc>)
 800b65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b660:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b664:	2b10      	cmp	r3, #16
 800b666:	d00f      	beq.n	800b688 <UART_SetConfig+0x170>
 800b668:	2b10      	cmp	r3, #16
 800b66a:	d802      	bhi.n	800b672 <UART_SetConfig+0x15a>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <UART_SetConfig+0x164>
 800b670:	e010      	b.n	800b694 <UART_SetConfig+0x17c>
 800b672:	2b20      	cmp	r3, #32
 800b674:	d005      	beq.n	800b682 <UART_SetConfig+0x16a>
 800b676:	2b30      	cmp	r3, #48	; 0x30
 800b678:	d009      	beq.n	800b68e <UART_SetConfig+0x176>
 800b67a:	e00b      	b.n	800b694 <UART_SetConfig+0x17c>
 800b67c:	2300      	movs	r3, #0
 800b67e:	77fb      	strb	r3, [r7, #31]
 800b680:	e0f1      	b.n	800b866 <UART_SetConfig+0x34e>
 800b682:	2302      	movs	r3, #2
 800b684:	77fb      	strb	r3, [r7, #31]
 800b686:	e0ee      	b.n	800b866 <UART_SetConfig+0x34e>
 800b688:	2304      	movs	r3, #4
 800b68a:	77fb      	strb	r3, [r7, #31]
 800b68c:	e0eb      	b.n	800b866 <UART_SetConfig+0x34e>
 800b68e:	2308      	movs	r3, #8
 800b690:	77fb      	strb	r3, [r7, #31]
 800b692:	e0e8      	b.n	800b866 <UART_SetConfig+0x34e>
 800b694:	2310      	movs	r3, #16
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	bf00      	nop
 800b69a:	e0e4      	b.n	800b866 <UART_SetConfig+0x34e>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a5f      	ldr	r2, [pc, #380]	; (800b820 <UART_SetConfig+0x308>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d120      	bne.n	800b6e8 <UART_SetConfig+0x1d0>
 800b6a6:	4b5b      	ldr	r3, [pc, #364]	; (800b814 <UART_SetConfig+0x2fc>)
 800b6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b6b0:	2b40      	cmp	r3, #64	; 0x40
 800b6b2:	d00f      	beq.n	800b6d4 <UART_SetConfig+0x1bc>
 800b6b4:	2b40      	cmp	r3, #64	; 0x40
 800b6b6:	d802      	bhi.n	800b6be <UART_SetConfig+0x1a6>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <UART_SetConfig+0x1b0>
 800b6bc:	e010      	b.n	800b6e0 <UART_SetConfig+0x1c8>
 800b6be:	2b80      	cmp	r3, #128	; 0x80
 800b6c0:	d005      	beq.n	800b6ce <UART_SetConfig+0x1b6>
 800b6c2:	2bc0      	cmp	r3, #192	; 0xc0
 800b6c4:	d009      	beq.n	800b6da <UART_SetConfig+0x1c2>
 800b6c6:	e00b      	b.n	800b6e0 <UART_SetConfig+0x1c8>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	77fb      	strb	r3, [r7, #31]
 800b6cc:	e0cb      	b.n	800b866 <UART_SetConfig+0x34e>
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	77fb      	strb	r3, [r7, #31]
 800b6d2:	e0c8      	b.n	800b866 <UART_SetConfig+0x34e>
 800b6d4:	2304      	movs	r3, #4
 800b6d6:	77fb      	strb	r3, [r7, #31]
 800b6d8:	e0c5      	b.n	800b866 <UART_SetConfig+0x34e>
 800b6da:	2308      	movs	r3, #8
 800b6dc:	77fb      	strb	r3, [r7, #31]
 800b6de:	e0c2      	b.n	800b866 <UART_SetConfig+0x34e>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	77fb      	strb	r3, [r7, #31]
 800b6e4:	bf00      	nop
 800b6e6:	e0be      	b.n	800b866 <UART_SetConfig+0x34e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a4d      	ldr	r2, [pc, #308]	; (800b824 <UART_SetConfig+0x30c>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d124      	bne.n	800b73c <UART_SetConfig+0x224>
 800b6f2:	4b48      	ldr	r3, [pc, #288]	; (800b814 <UART_SetConfig+0x2fc>)
 800b6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b700:	d012      	beq.n	800b728 <UART_SetConfig+0x210>
 800b702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b706:	d802      	bhi.n	800b70e <UART_SetConfig+0x1f6>
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d007      	beq.n	800b71c <UART_SetConfig+0x204>
 800b70c:	e012      	b.n	800b734 <UART_SetConfig+0x21c>
 800b70e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b712:	d006      	beq.n	800b722 <UART_SetConfig+0x20a>
 800b714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b718:	d009      	beq.n	800b72e <UART_SetConfig+0x216>
 800b71a:	e00b      	b.n	800b734 <UART_SetConfig+0x21c>
 800b71c:	2300      	movs	r3, #0
 800b71e:	77fb      	strb	r3, [r7, #31]
 800b720:	e0a1      	b.n	800b866 <UART_SetConfig+0x34e>
 800b722:	2302      	movs	r3, #2
 800b724:	77fb      	strb	r3, [r7, #31]
 800b726:	e09e      	b.n	800b866 <UART_SetConfig+0x34e>
 800b728:	2304      	movs	r3, #4
 800b72a:	77fb      	strb	r3, [r7, #31]
 800b72c:	e09b      	b.n	800b866 <UART_SetConfig+0x34e>
 800b72e:	2308      	movs	r3, #8
 800b730:	77fb      	strb	r3, [r7, #31]
 800b732:	e098      	b.n	800b866 <UART_SetConfig+0x34e>
 800b734:	2310      	movs	r3, #16
 800b736:	77fb      	strb	r3, [r7, #31]
 800b738:	bf00      	nop
 800b73a:	e094      	b.n	800b866 <UART_SetConfig+0x34e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a39      	ldr	r2, [pc, #228]	; (800b828 <UART_SetConfig+0x310>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d124      	bne.n	800b790 <UART_SetConfig+0x278>
 800b746:	4b33      	ldr	r3, [pc, #204]	; (800b814 <UART_SetConfig+0x2fc>)
 800b748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b74c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b754:	d012      	beq.n	800b77c <UART_SetConfig+0x264>
 800b756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b75a:	d802      	bhi.n	800b762 <UART_SetConfig+0x24a>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <UART_SetConfig+0x258>
 800b760:	e012      	b.n	800b788 <UART_SetConfig+0x270>
 800b762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b766:	d006      	beq.n	800b776 <UART_SetConfig+0x25e>
 800b768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b76c:	d009      	beq.n	800b782 <UART_SetConfig+0x26a>
 800b76e:	e00b      	b.n	800b788 <UART_SetConfig+0x270>
 800b770:	2301      	movs	r3, #1
 800b772:	77fb      	strb	r3, [r7, #31]
 800b774:	e077      	b.n	800b866 <UART_SetConfig+0x34e>
 800b776:	2302      	movs	r3, #2
 800b778:	77fb      	strb	r3, [r7, #31]
 800b77a:	e074      	b.n	800b866 <UART_SetConfig+0x34e>
 800b77c:	2304      	movs	r3, #4
 800b77e:	77fb      	strb	r3, [r7, #31]
 800b780:	e071      	b.n	800b866 <UART_SetConfig+0x34e>
 800b782:	2308      	movs	r3, #8
 800b784:	77fb      	strb	r3, [r7, #31]
 800b786:	e06e      	b.n	800b866 <UART_SetConfig+0x34e>
 800b788:	2310      	movs	r3, #16
 800b78a:	77fb      	strb	r3, [r7, #31]
 800b78c:	bf00      	nop
 800b78e:	e06a      	b.n	800b866 <UART_SetConfig+0x34e>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a25      	ldr	r2, [pc, #148]	; (800b82c <UART_SetConfig+0x314>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d124      	bne.n	800b7e4 <UART_SetConfig+0x2cc>
 800b79a:	4b1e      	ldr	r3, [pc, #120]	; (800b814 <UART_SetConfig+0x2fc>)
 800b79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b7a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a8:	d012      	beq.n	800b7d0 <UART_SetConfig+0x2b8>
 800b7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ae:	d802      	bhi.n	800b7b6 <UART_SetConfig+0x29e>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d007      	beq.n	800b7c4 <UART_SetConfig+0x2ac>
 800b7b4:	e012      	b.n	800b7dc <UART_SetConfig+0x2c4>
 800b7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ba:	d006      	beq.n	800b7ca <UART_SetConfig+0x2b2>
 800b7bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c0:	d009      	beq.n	800b7d6 <UART_SetConfig+0x2be>
 800b7c2:	e00b      	b.n	800b7dc <UART_SetConfig+0x2c4>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	77fb      	strb	r3, [r7, #31]
 800b7c8:	e04d      	b.n	800b866 <UART_SetConfig+0x34e>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	77fb      	strb	r3, [r7, #31]
 800b7ce:	e04a      	b.n	800b866 <UART_SetConfig+0x34e>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	e047      	b.n	800b866 <UART_SetConfig+0x34e>
 800b7d6:	2308      	movs	r3, #8
 800b7d8:	77fb      	strb	r3, [r7, #31]
 800b7da:	e044      	b.n	800b866 <UART_SetConfig+0x34e>
 800b7dc:	2310      	movs	r3, #16
 800b7de:	77fb      	strb	r3, [r7, #31]
 800b7e0:	bf00      	nop
 800b7e2:	e040      	b.n	800b866 <UART_SetConfig+0x34e>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a11      	ldr	r2, [pc, #68]	; (800b830 <UART_SetConfig+0x318>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d139      	bne.n	800b862 <UART_SetConfig+0x34a>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <UART_SetConfig+0x2fc>)
 800b7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b7f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7fc:	d027      	beq.n	800b84e <UART_SetConfig+0x336>
 800b7fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b802:	d817      	bhi.n	800b834 <UART_SetConfig+0x31c>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01c      	beq.n	800b842 <UART_SetConfig+0x32a>
 800b808:	e027      	b.n	800b85a <UART_SetConfig+0x342>
 800b80a:	bf00      	nop
 800b80c:	efff69f3 	.word	0xefff69f3
 800b810:	40011000 	.word	0x40011000
 800b814:	40023800 	.word	0x40023800
 800b818:	40004400 	.word	0x40004400
 800b81c:	40004800 	.word	0x40004800
 800b820:	40004c00 	.word	0x40004c00
 800b824:	40005000 	.word	0x40005000
 800b828:	40011400 	.word	0x40011400
 800b82c:	40007800 	.word	0x40007800
 800b830:	40007c00 	.word	0x40007c00
 800b834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b838:	d006      	beq.n	800b848 <UART_SetConfig+0x330>
 800b83a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b83e:	d009      	beq.n	800b854 <UART_SetConfig+0x33c>
 800b840:	e00b      	b.n	800b85a <UART_SetConfig+0x342>
 800b842:	2300      	movs	r3, #0
 800b844:	77fb      	strb	r3, [r7, #31]
 800b846:	e00e      	b.n	800b866 <UART_SetConfig+0x34e>
 800b848:	2302      	movs	r3, #2
 800b84a:	77fb      	strb	r3, [r7, #31]
 800b84c:	e00b      	b.n	800b866 <UART_SetConfig+0x34e>
 800b84e:	2304      	movs	r3, #4
 800b850:	77fb      	strb	r3, [r7, #31]
 800b852:	e008      	b.n	800b866 <UART_SetConfig+0x34e>
 800b854:	2308      	movs	r3, #8
 800b856:	77fb      	strb	r3, [r7, #31]
 800b858:	e005      	b.n	800b866 <UART_SetConfig+0x34e>
 800b85a:	2310      	movs	r3, #16
 800b85c:	77fb      	strb	r3, [r7, #31]
 800b85e:	bf00      	nop
 800b860:	e001      	b.n	800b866 <UART_SetConfig+0x34e>
 800b862:	2310      	movs	r3, #16
 800b864:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b86e:	d17f      	bne.n	800b970 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b870:	7ffb      	ldrb	r3, [r7, #31]
 800b872:	2b08      	cmp	r3, #8
 800b874:	d85c      	bhi.n	800b930 <UART_SetConfig+0x418>
 800b876:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <UART_SetConfig+0x364>)
 800b878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87c:	0800b8a1 	.word	0x0800b8a1
 800b880:	0800b8c1 	.word	0x0800b8c1
 800b884:	0800b8e1 	.word	0x0800b8e1
 800b888:	0800b931 	.word	0x0800b931
 800b88c:	0800b8f9 	.word	0x0800b8f9
 800b890:	0800b931 	.word	0x0800b931
 800b894:	0800b931 	.word	0x0800b931
 800b898:	0800b931 	.word	0x0800b931
 800b89c:	0800b919 	.word	0x0800b919
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8a0:	f7fc f8d0 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800b8a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	005a      	lsls	r2, r3, #1
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	441a      	add	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	61bb      	str	r3, [r7, #24]
        break;
 800b8be:	e03a      	b.n	800b936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c0:	f7fc f8d4 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 800b8c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	005a      	lsls	r2, r3, #1
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	085b      	lsrs	r3, r3, #1
 800b8d0:	441a      	add	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	61bb      	str	r3, [r7, #24]
        break;
 800b8de:	e02a      	b.n	800b936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	085a      	lsrs	r2, r3, #1
 800b8e6:	4b5f      	ldr	r3, [pc, #380]	; (800ba64 <UART_SetConfig+0x54c>)
 800b8e8:	4413      	add	r3, r2
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	61bb      	str	r3, [r7, #24]
        break;
 800b8f6:	e01e      	b.n	800b936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8f8:	f7fb ffe6 	bl	80078c8 <HAL_RCC_GetSysClockFreq>
 800b8fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	005a      	lsls	r2, r3, #1
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	441a      	add	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b912:	b29b      	uxth	r3, r3
 800b914:	61bb      	str	r3, [r7, #24]
        break;
 800b916:	e00e      	b.n	800b936 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	085b      	lsrs	r3, r3, #1
 800b91e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	61bb      	str	r3, [r7, #24]
        break;
 800b92e:	e002      	b.n	800b936 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	75fb      	strb	r3, [r7, #23]
        break;
 800b934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	2b0f      	cmp	r3, #15
 800b93a:	d916      	bls.n	800b96a <UART_SetConfig+0x452>
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b942:	d212      	bcs.n	800b96a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	b29b      	uxth	r3, r3
 800b948:	f023 030f 	bic.w	r3, r3, #15
 800b94c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	085b      	lsrs	r3, r3, #1
 800b952:	b29b      	uxth	r3, r3
 800b954:	f003 0307 	and.w	r3, r3, #7
 800b958:	b29a      	uxth	r2, r3
 800b95a:	897b      	ldrh	r3, [r7, #10]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	897a      	ldrh	r2, [r7, #10]
 800b966:	60da      	str	r2, [r3, #12]
 800b968:	e070      	b.n	800ba4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
 800b96e:	e06d      	b.n	800ba4c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b970:	7ffb      	ldrb	r3, [r7, #31]
 800b972:	2b08      	cmp	r3, #8
 800b974:	d859      	bhi.n	800ba2a <UART_SetConfig+0x512>
 800b976:	a201      	add	r2, pc, #4	; (adr r2, 800b97c <UART_SetConfig+0x464>)
 800b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97c:	0800b9a1 	.word	0x0800b9a1
 800b980:	0800b9bf 	.word	0x0800b9bf
 800b984:	0800b9dd 	.word	0x0800b9dd
 800b988:	0800ba2b 	.word	0x0800ba2b
 800b98c:	0800b9f5 	.word	0x0800b9f5
 800b990:	0800ba2b 	.word	0x0800ba2b
 800b994:	0800ba2b 	.word	0x0800ba2b
 800b998:	0800ba2b 	.word	0x0800ba2b
 800b99c:	0800ba13 	.word	0x0800ba13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9a0:	f7fc f850 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800b9a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	085a      	lsrs	r2, r3, #1
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	441a      	add	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	61bb      	str	r3, [r7, #24]
        break;
 800b9bc:	e038      	b.n	800ba30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9be:	f7fc f855 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 800b9c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	085a      	lsrs	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	441a      	add	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	61bb      	str	r3, [r7, #24]
        break;
 800b9da:	e029      	b.n	800ba30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	085a      	lsrs	r2, r3, #1
 800b9e2:	4b21      	ldr	r3, [pc, #132]	; (800ba68 <UART_SetConfig+0x550>)
 800b9e4:	4413      	add	r3, r2
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6852      	ldr	r2, [r2, #4]
 800b9ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	61bb      	str	r3, [r7, #24]
        break;
 800b9f2:	e01d      	b.n	800ba30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9f4:	f7fb ff68 	bl	80078c8 <HAL_RCC_GetSysClockFreq>
 800b9f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	085a      	lsrs	r2, r3, #1
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	441a      	add	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	61bb      	str	r3, [r7, #24]
        break;
 800ba10:	e00e      	b.n	800ba30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	61bb      	str	r3, [r7, #24]
        break;
 800ba28:	e002      	b.n	800ba30 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	75fb      	strb	r3, [r7, #23]
        break;
 800ba2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	2b0f      	cmp	r3, #15
 800ba34:	d908      	bls.n	800ba48 <UART_SetConfig+0x530>
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3c:	d204      	bcs.n	800ba48 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	60da      	str	r2, [r3, #12]
 800ba46:	e001      	b.n	800ba4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	01e84800 	.word	0x01e84800
 800ba68:	00f42400 	.word	0x00f42400

0800ba6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	430a      	orrs	r2, r1
 800bab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00a      	beq.n	800bada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	430a      	orrs	r2, r1
 800bad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00a      	beq.n	800bafc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	430a      	orrs	r2, r1
 800bafa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	f003 0310 	and.w	r3, r3, #16
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00a      	beq.n	800bb1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	f003 0320 	and.w	r3, r3, #32
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01a      	beq.n	800bb82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb6a:	d10a      	bne.n	800bb82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]
  }
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bbbe:	f7f7 fff1 	bl	8003ba4 <HAL_GetTick>
 800bbc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b08      	cmp	r3, #8
 800bbd0:	d10e      	bne.n	800bbf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f814 	bl	800bc0e <UART_WaitOnFlagUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e00a      	b.n	800bc06 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2220      	movs	r2, #32
 800bbfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	603b      	str	r3, [r7, #0]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc1e:	e05d      	b.n	800bcdc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d059      	beq.n	800bcdc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc28:	f7f7 ffbc 	bl	8003ba4 <HAL_GetTick>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d302      	bcc.n	800bc3e <UART_WaitOnFlagUntilTimeout+0x30>
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d11b      	bne.n	800bc76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2220      	movs	r2, #32
 800bc62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2220      	movs	r2, #32
 800bc68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e042      	b.n	800bcfc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d02b      	beq.n	800bcdc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc92:	d123      	bne.n	800bcdc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bcac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f022 0201 	bic.w	r2, r2, #1
 800bcbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2220      	movs	r2, #32
 800bcce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e00f      	b.n	800bcfc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	69da      	ldr	r2, [r3, #28]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	4013      	ands	r3, r2
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	bf0c      	ite	eq
 800bcec:	2301      	moveq	r3, #1
 800bcee:	2300      	movne	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d092      	beq.n	800bc20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d027      	beq.n	800bd6e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4b2f      	ldr	r3, [pc, #188]	; (800bde4 <FMC_SDRAM_Init+0xe0>)
 800bd28:	4013      	ands	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd34:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bd3a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bd40:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bd46:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bd4c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bd52:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bd58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bd5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	e032      	b.n	800bdd4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd7a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bd8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	4b12      	ldr	r3, [pc, #72]	; (800bde4 <FMC_SDRAM_Init+0xe0>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bda8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bdae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bdb4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bdba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bdc0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	ffff8000 	.word	0xffff8000

0800bde8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d02e      	beq.n	800be60 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be0e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	3b01      	subs	r3, #1
 800be26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800be28:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	3b01      	subs	r3, #1
 800be30:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800be32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	3b01      	subs	r3, #1
 800be3a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800be3c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	3b01      	subs	r3, #1
 800be44:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800be46:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be50:	4313      	orrs	r3, r2
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	4313      	orrs	r3, r2
 800be56:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	609a      	str	r2, [r3, #8]
 800be5e:	e039      	b.n	800bed4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	4b1e      	ldr	r3, [pc, #120]	; (800bee4 <FMC_SDRAM_Timing_Init+0xfc>)
 800be6a:	4013      	ands	r3, r2
 800be6c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	3b01      	subs	r3, #1
 800be74:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800be7e:	4313      	orrs	r3, r2
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	4313      	orrs	r3, r2
 800be84:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be92:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bea2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800beac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800beb6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bec0:	4313      	orrs	r3, r2
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	371c      	adds	r7, #28
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	ff0f0fff 	.word	0xff0f0fff

0800bee8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bf00:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bf0a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	695a      	ldr	r2, [r3, #20]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bf50:	b084      	sub	sp, #16
 800bf52:	b480      	push	{r7}
 800bf54:	b085      	sub	sp, #20
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	f107 001c 	add.w	r0, r7, #28
 800bf5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bf66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bf68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bf6a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bf6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bf72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bf76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bf7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <SDMMC_Init+0x54>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	b004      	add	sp, #16
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	ffff8100 	.word	0xffff8100

0800bfa8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2203      	movs	r2, #3
 800bfce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bfd0:	2002      	movs	r0, #2
 800bfd2:	f7f7 fdf3 	bl	8003bbc <HAL_Delay>
  
  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0303 	and.w	r3, r3, #3
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c01a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c020:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c026:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	4b06      	ldr	r3, [pc, #24]	; (800c04c <SDMMC_SendCommand+0x50>)
 800c034:	4013      	ands	r3, r2
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	431a      	orrs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	fffff000 	.word	0xfffff000

0800c050 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	b2db      	uxtb	r3, r3
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b085      	sub	sp, #20
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3314      	adds	r3, #20
 800c078:	461a      	mov	r2, r3
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	4413      	add	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
}  
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c0b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c0bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c0c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0

}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c0f6:	2310      	movs	r3, #16
 800c0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0fe:	2300      	movs	r3, #0
 800c100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c108:	f107 0308 	add.w	r3, r7, #8
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff ff74 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c114:	f241 3288 	movw	r2, #5000	; 0x1388
 800c118:	2110      	movs	r1, #16
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa42 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c13a:	2311      	movs	r3, #17
 800c13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c13e:	2340      	movs	r3, #64	; 0x40
 800c140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c14c:	f107 0308 	add.w	r3, r7, #8
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff ff52 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c158:	f241 3288 	movw	r2, #5000	; 0x1388
 800c15c:	2111      	movs	r1, #17
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fa20 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c166:	69fb      	ldr	r3, [r7, #28]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3720      	adds	r7, #32
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c17e:	2312      	movs	r3, #18
 800c180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c182:	2340      	movs	r3, #64	; 0x40
 800c184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c190:	f107 0308 	add.w	r3, r7, #8
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff ff30 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a0:	2112      	movs	r1, #18
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f9fe 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c1a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1aa:	69fb      	ldr	r3, [r7, #28]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c1c2:	2318      	movs	r3, #24
 800c1c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1d4:	f107 0308 	add.w	r3, r7, #8
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff ff0e 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e4:	2118      	movs	r1, #24
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f9dc 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c1ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1ee:	69fb      	ldr	r3, [r7, #28]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c206:	2319      	movs	r3, #25
 800c208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c20a:	2340      	movs	r3, #64	; 0x40
 800c20c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c20e:	2300      	movs	r3, #0
 800c210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c218:	f107 0308 	add.w	r3, r7, #8
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff feec 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c224:	f241 3288 	movw	r2, #5000	; 0x1388
 800c228:	2119      	movs	r1, #25
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f9ba 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c232:	69fb      	ldr	r3, [r7, #28]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c248:	230c      	movs	r3, #12
 800c24a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c24c:	2340      	movs	r3, #64	; 0x40
 800c24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c250:	2300      	movs	r3, #0
 800c252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff fecb 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c266:	4a05      	ldr	r2, [pc, #20]	; (800c27c <SDMMC_CmdStopTransfer+0x40>)
 800c268:	210c      	movs	r1, #12
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f99a 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c272:	69fb      	ldr	r3, [r7, #28]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	05f5e100 	.word	0x05f5e100

0800c280 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08a      	sub	sp, #40	; 0x28
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c290:	2307      	movs	r3, #7
 800c292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c294:	2340      	movs	r3, #64	; 0x40
 800c296:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c29c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a2:	f107 0310 	add.w	r3, r7, #16
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7ff fea7 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2b2:	2107      	movs	r1, #7
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f000 f975 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c2ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3728      	adds	r7, #40	; 0x28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b088      	sub	sp, #32
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fe86 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f92f 	bl	800c554 <SDMMC_GetCmdError>
 800c2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3720      	adds	r7, #32
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b088      	sub	sp, #32
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c30a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c30e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c310:	2308      	movs	r3, #8
 800c312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c314:	2340      	movs	r3, #64	; 0x40
 800c316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff fe67 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fb18 	bl	800c964 <SDMMC_GetCmdResp7>
 800c334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c336:	69fb      	ldr	r3, [r7, #28]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c34e:	2337      	movs	r3, #55	; 0x37
 800c350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c352:	2340      	movs	r3, #64	; 0x40
 800c354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c356:	2300      	movs	r3, #0
 800c358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c35e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c360:	f107 0308 	add.w	r3, r7, #8
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fe48 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c370:	2137      	movs	r1, #55	; 0x37
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f916 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c37a:	69fb      	ldr	r3, [r7, #28]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3720      	adds	r7, #32
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <SDMMC_CmdAppOperCommand+0x44>)
 800c392:	4313      	orrs	r3, r2
 800c394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c396:	2329      	movs	r3, #41	; 0x29
 800c398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c39a:	2340      	movs	r3, #64	; 0x40
 800c39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3a8:	f107 0308 	add.w	r3, r7, #8
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff fe24 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fa27 	bl	800c808 <SDMMC_GetCmdResp3>
 800c3ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3bc:	69fb      	ldr	r3, [r7, #28]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3720      	adds	r7, #32
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	80100000 	.word	0x80100000

0800c3cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c3da:	2306      	movs	r3, #6
 800c3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3de:	2340      	movs	r3, #64	; 0x40
 800c3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fe02 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3fc:	2106      	movs	r1, #6
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f8d0 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c406:	69fb      	ldr	r3, [r7, #28]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3720      	adds	r7, #32
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c418:	2300      	movs	r3, #0
 800c41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c41c:	2333      	movs	r3, #51	; 0x33
 800c41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c420:	2340      	movs	r3, #64	; 0x40
 800c422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c424:	2300      	movs	r3, #0
 800c426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c42e:	f107 0308 	add.w	r3, r7, #8
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7ff fde1 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c43a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43e:	2133      	movs	r1, #51	; 0x33
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f8af 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c448:	69fb      	ldr	r3, [r7, #28]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b088      	sub	sp, #32
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c45e:	2302      	movs	r3, #2
 800c460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c462:	23c0      	movs	r3, #192	; 0xc0
 800c464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c470:	f107 0308 	add.w	r3, r7, #8
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff fdc0 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f97d 	bl	800c77c <SDMMC_GetCmdResp2>
 800c482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c484:	69fb      	ldr	r3, [r7, #28]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3720      	adds	r7, #32
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b088      	sub	sp, #32
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c49c:	2309      	movs	r3, #9
 800c49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4a0:	23c0      	movs	r3, #192	; 0xc0
 800c4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff fda1 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f95e 	bl	800c77c <SDMMC_GetCmdResp2>
 800c4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4de:	2340      	movs	r3, #64	; 0x40
 800c4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ec:	f107 0308 	add.w	r3, r7, #8
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fd82 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	2103      	movs	r1, #3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f9bd 	bl	800c87c <SDMMC_GetCmdResp6>
 800c502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c504:	69fb      	ldr	r3, [r7, #28]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b088      	sub	sp, #32
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c51c:	230d      	movs	r3, #13
 800c51e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c520:	2340      	movs	r3, #64	; 0x40
 800c522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c524:	2300      	movs	r3, #0
 800c526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c52e:	f107 0308 	add.w	r3, r7, #8
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff fd61 	bl	800bffc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c53a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c53e:	210d      	movs	r1, #13
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f82f 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c548:	69fb      	ldr	r3, [r7, #28]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3720      	adds	r7, #32
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c554:	b490      	push	{r4, r7}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c55c:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <SDMMC_GetCmdError+0x48>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a0f      	ldr	r2, [pc, #60]	; (800c5a0 <SDMMC_GetCmdError+0x4c>)
 800c562:	fba2 2303 	umull	r2, r3, r2, r3
 800c566:	0a5b      	lsrs	r3, r3, #9
 800c568:	f241 3288 	movw	r2, #5000	; 0x1388
 800c56c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c570:	4623      	mov	r3, r4
 800c572:	1e5c      	subs	r4, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c57c:	e009      	b.n	800c592 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0f2      	beq.n	800c570 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	22c5      	movs	r2, #197	; 0xc5
 800c58e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bc90      	pop	{r4, r7}
 800c59a:	4770      	bx	lr
 800c59c:	20000018 	.word	0x20000018
 800c5a0:	10624dd3 	.word	0x10624dd3

0800c5a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c5b2:	4b6f      	ldr	r3, [pc, #444]	; (800c770 <SDMMC_GetCmdResp1+0x1cc>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a6f      	ldr	r2, [pc, #444]	; (800c774 <SDMMC_GetCmdResp1+0x1d0>)
 800c5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5bc:	0a5b      	lsrs	r3, r3, #9
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	1e5c      	subs	r4, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d102      	bne.n	800c5d2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5d0:	e0c9      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0f0      	beq.n	800c5c4 <SDMMC_GetCmdResp1+0x20>
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1eb      	bne.n	800c5c4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5fe:	2304      	movs	r3, #4
 800c600:	e0b1      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d004      	beq.n	800c618 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c614:	2301      	movs	r3, #1
 800c616:	e0a6      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	22c5      	movs	r2, #197	; 0xc5
 800c61c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f7ff fd16 	bl	800c050 <SDMMC_GetCommandResponse>
 800c624:	4603      	mov	r3, r0
 800c626:	461a      	mov	r2, r3
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d001      	beq.n	800c632 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c62e:	2301      	movs	r3, #1
 800c630:	e099      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7ff fd18 	bl	800c06a <SDMMC_GetResponse>
 800c63a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	4b4e      	ldr	r3, [pc, #312]	; (800c778 <SDMMC_GetCmdResp1+0x1d4>)
 800c640:	4013      	ands	r3, r2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c646:	2300      	movs	r3, #0
 800c648:	e08d      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da02      	bge.n	800c656 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c654:	e087      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c660:	2340      	movs	r3, #64	; 0x40
 800c662:	e080      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c66e:	2380      	movs	r3, #128	; 0x80
 800c670:	e079      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c680:	e071      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c68c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c690:	e069      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c69c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a0:	e061      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6b0:	e059      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c0:	e051      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6d0:	e049      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c6dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c6e0:	e041      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c6ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6f0:	e039      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c6fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c700:	e031      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c70c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c710:	e029      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c71c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c720:	e021      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c72c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c730:	e019      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c73c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c740:	e011      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c74c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c750:	e009      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c75c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c760:	e001      	b.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd90      	pop	{r4, r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000018 	.word	0x20000018
 800c774:	10624dd3 	.word	0x10624dd3
 800c778:	fdffe008 	.word	0xfdffe008

0800c77c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c77c:	b490      	push	{r4, r7}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c784:	4b1e      	ldr	r3, [pc, #120]	; (800c800 <SDMMC_GetCmdResp2+0x84>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a1e      	ldr	r2, [pc, #120]	; (800c804 <SDMMC_GetCmdResp2+0x88>)
 800c78a:	fba2 2303 	umull	r2, r3, r2, r3
 800c78e:	0a5b      	lsrs	r3, r3, #9
 800c790:	f241 3288 	movw	r2, #5000	; 0x1388
 800c794:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c798:	4623      	mov	r3, r4
 800c79a:	1e5c      	subs	r4, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d102      	bne.n	800c7a6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7a4:	e026      	b.n	800c7f4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0f0      	beq.n	800c798 <SDMMC_GetCmdResp2+0x1c>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1eb      	bne.n	800c798 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	f003 0304 	and.w	r3, r3, #4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2204      	movs	r2, #4
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7d2:	2304      	movs	r3, #4
 800c7d4:	e00e      	b.n	800c7f4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e003      	b.n	800c7f4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	22c5      	movs	r2, #197	; 0xc5
 800c7f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc90      	pop	{r4, r7}
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20000018 	.word	0x20000018
 800c804:	10624dd3 	.word	0x10624dd3

0800c808 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c808:	b490      	push	{r4, r7}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c810:	4b18      	ldr	r3, [pc, #96]	; (800c874 <SDMMC_GetCmdResp3+0x6c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a18      	ldr	r2, [pc, #96]	; (800c878 <SDMMC_GetCmdResp3+0x70>)
 800c816:	fba2 2303 	umull	r2, r3, r2, r3
 800c81a:	0a5b      	lsrs	r3, r3, #9
 800c81c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c820:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c824:	4623      	mov	r3, r4
 800c826:	1e5c      	subs	r4, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c82c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c830:	e01b      	b.n	800c86a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0f0      	beq.n	800c824 <SDMMC_GetCmdResp3+0x1c>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1eb      	bne.n	800c824 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2204      	movs	r2, #4
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c85e:	2304      	movs	r3, #4
 800c860:	e003      	b.n	800c86a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	22c5      	movs	r2, #197	; 0xc5
 800c866:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bc90      	pop	{r4, r7}
 800c872:	4770      	bx	lr
 800c874:	20000018 	.word	0x20000018
 800c878:	10624dd3 	.word	0x10624dd3

0800c87c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c87c:	b590      	push	{r4, r7, lr}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	460b      	mov	r3, r1
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c88a:	4b34      	ldr	r3, [pc, #208]	; (800c95c <SDMMC_GetCmdResp6+0xe0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a34      	ldr	r2, [pc, #208]	; (800c960 <SDMMC_GetCmdResp6+0xe4>)
 800c890:	fba2 2303 	umull	r2, r3, r2, r3
 800c894:	0a5b      	lsrs	r3, r3, #9
 800c896:	f241 3288 	movw	r2, #5000	; 0x1388
 800c89a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c89e:	4623      	mov	r3, r4
 800c8a0:	1e5c      	subs	r4, r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8aa:	e052      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0f0      	beq.n	800c89e <SDMMC_GetCmdResp6+0x22>
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1eb      	bne.n	800c89e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ca:	f003 0304 	and.w	r3, r3, #4
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2204      	movs	r2, #4
 800c8d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8d8:	2304      	movs	r3, #4
 800c8da:	e03a      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e02f      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f7ff fbac 	bl	800c050 <SDMMC_GetCommandResponse>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	7afb      	ldrb	r3, [r7, #11]
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d001      	beq.n	800c906 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c902:	2301      	movs	r3, #1
 800c904:	e025      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	22c5      	movs	r2, #197	; 0xc5
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c90c:	2100      	movs	r1, #0
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f7ff fbab 	bl	800c06a <SDMMC_GetResponse>
 800c914:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d106      	bne.n	800c92e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	0c1b      	lsrs	r3, r3, #16
 800c924:	b29a      	uxth	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c92a:	2300      	movs	r3, #0
 800c92c:	e011      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c93c:	e009      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c94c:	e001      	b.n	800c952 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c94e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c952:	4618      	mov	r0, r3
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	bd90      	pop	{r4, r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20000018 	.word	0x20000018
 800c960:	10624dd3 	.word	0x10624dd3

0800c964 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c964:	b490      	push	{r4, r7}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c96c:	4b21      	ldr	r3, [pc, #132]	; (800c9f4 <SDMMC_GetCmdResp7+0x90>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a21      	ldr	r2, [pc, #132]	; (800c9f8 <SDMMC_GetCmdResp7+0x94>)
 800c972:	fba2 2303 	umull	r2, r3, r2, r3
 800c976:	0a5b      	lsrs	r3, r3, #9
 800c978:	f241 3288 	movw	r2, #5000	; 0x1388
 800c97c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c980:	4623      	mov	r3, r4
 800c982:	1e5c      	subs	r4, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d102      	bne.n	800c98e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c98c:	e02c      	b.n	800c9e8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c992:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f0      	beq.n	800c980 <SDMMC_GetCmdResp7+0x1c>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1eb      	bne.n	800c980 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d004      	beq.n	800c9be <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2204      	movs	r2, #4
 800c9b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ba:	2304      	movs	r3, #4
 800c9bc:	e014      	b.n	800c9e8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e009      	b.n	800c9e8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2240      	movs	r2, #64	; 0x40
 800c9e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c9e6:	2300      	movs	r3, #0
  
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc90      	pop	{r4, r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	20000018 	.word	0x20000018
 800c9f8:	10624dd3 	.word	0x10624dd3

0800c9fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca00:	4904      	ldr	r1, [pc, #16]	; (800ca14 <MX_FATFS_Init+0x18>)
 800ca02:	4805      	ldr	r0, [pc, #20]	; (800ca18 <MX_FATFS_Init+0x1c>)
 800ca04:	f000 fa96 	bl	800cf34 <FATFS_LinkDriver>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b03      	ldr	r3, [pc, #12]	; (800ca1c <MX_FATFS_Init+0x20>)
 800ca0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ca10:	bf00      	nop
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	2000ceac 	.word	0x2000ceac
 800ca18:	0802c688 	.word	0x0802c688
 800ca1c:	2000ca44 	.word	0x2000ca44

0800ca20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca2a:	f000 f87b 	bl	800cb24 <BSP_SD_IsDetected>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d001      	beq.n	800ca38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ca34:	2302      	movs	r3, #2
 800ca36:	e012      	b.n	800ca5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ca38:	480b      	ldr	r0, [pc, #44]	; (800ca68 <BSP_SD_Init+0x48>)
 800ca3a:	f7fc fae9 	bl	8009010 <HAL_SD_Init>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ca48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca4c:	4806      	ldr	r0, [pc, #24]	; (800ca68 <BSP_SD_Init+0x48>)
 800ca4e:	f7fc ff2b 	bl	80098a8 <HAL_SD_ConfigWideBusOperation>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca5c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	2000c4fc 	.word	0x2000c4fc

0800ca6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	68f9      	ldr	r1, [r7, #12]
 800ca82:	4806      	ldr	r0, [pc, #24]	; (800ca9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ca84:	f7fc fb5c 	bl	8009140 <HAL_SD_ReadBlocks_DMA>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3718      	adds	r7, #24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	2000c4fc 	.word	0x2000c4fc

0800caa0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	68f9      	ldr	r1, [r7, #12]
 800cab6:	4806      	ldr	r0, [pc, #24]	; (800cad0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cab8:	f7fc fc2e 	bl	8009318 <HAL_SD_WriteBlocks_DMA>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	2000c4fc 	.word	0x2000c4fc

0800cad4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cad8:	4805      	ldr	r0, [pc, #20]	; (800caf0 <BSP_SD_GetCardState+0x1c>)
 800cada:	f7fc ff61 	bl	80099a0 <HAL_SD_GetCardState>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	bf14      	ite	ne
 800cae4:	2301      	movne	r3, #1
 800cae6:	2300      	moveq	r3, #0
 800cae8:	b2db      	uxtb	r3, r3
}
 800caea:	4618      	mov	r0, r3
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2000c4fc 	.word	0x2000c4fc

0800caf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cafc:	6879      	ldr	r1, [r7, #4]
 800cafe:	4803      	ldr	r0, [pc, #12]	; (800cb0c <BSP_SD_GetCardInfo+0x18>)
 800cb00:	f7fc fea6 	bl	8009850 <HAL_SD_GetCardInfo>
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	2000c4fc 	.word	0x2000c4fc

0800cb10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cb18:	f000 f9b2 	bl	800ce80 <BSP_SD_ReadCpltCallback>
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800cb2e:	f000 f80b 	bl	800cb48 <BSP_PlatformIsDetected>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	b2db      	uxtb	r3, r3
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cb52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cb56:	4806      	ldr	r0, [pc, #24]	; (800cb70 <BSP_PlatformIsDetected+0x28>)
 800cb58:	f7f9 f90e 	bl	8005d78 <HAL_GPIO_ReadPin>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cb62:	2300      	movs	r3, #0
 800cb64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800cb66:	79fb      	ldrb	r3, [r7, #7]
}  
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	40020800 	.word	0x40020800

0800cb74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800cb7c:	f000 fa26 	bl	800cfcc <osKernelSysTick>
 800cb80:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800cb82:	e006      	b.n	800cb92 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb84:	f7ff ffa6 	bl	800cad4 <BSP_SD_GetCardState>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e009      	b.n	800cba6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800cb92:	f000 fa1b 	bl	800cfcc <osKernelSysTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d8f0      	bhi.n	800cb84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cbc0:	f7ff ff88 	bl	800cad4 <BSP_SD_GetCardState>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d107      	bne.n	800cbda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbca:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f023 0301 	bic.w	r3, r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	4b04      	ldr	r3, [pc, #16]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbda:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	b2db      	uxtb	r3, r3
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	20000021 	.word	0x20000021

0800cbec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800cbf6:	4b20      	ldr	r3, [pc, #128]	; (800cc78 <SD_initialize+0x8c>)
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800cbfc:	f000 f9da 	bl	800cfb4 <osKernelRunning>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d030      	beq.n	800cc68 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cc06:	f7ff ff0b 	bl	800ca20 <BSP_SD_Init>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d107      	bne.n	800cc20 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff ffcc 	bl	800cbb0 <SD_CheckStatus>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4b16      	ldr	r3, [pc, #88]	; (800cc78 <SD_initialize+0x8c>)
 800cc1e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cc20:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <SD_initialize+0x8c>)
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d01e      	beq.n	800cc68 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800cc2a:	4b14      	ldr	r3, [pc, #80]	; (800cc7c <SD_initialize+0x90>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10e      	bne.n	800cc50 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cc32:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <SD_initialize+0x94>)
 800cc34:	f107 0408 	add.w	r4, r7, #8
 800cc38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cc3e:	f107 0308 	add.w	r3, r7, #8
 800cc42:	2100      	movs	r1, #0
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 fa31 	bl	800d0ac <osMessageCreate>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b0b      	ldr	r3, [pc, #44]	; (800cc7c <SD_initialize+0x90>)
 800cc4e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800cc50:	4b0a      	ldr	r3, [pc, #40]	; (800cc7c <SD_initialize+0x90>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d107      	bne.n	800cc68 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <SD_initialize+0x8c>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <SD_initialize+0x8c>)
 800cc66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cc68:	4b03      	ldr	r3, [pc, #12]	; (800cc78 <SD_initialize+0x8c>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	b2db      	uxtb	r3, r3
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd90      	pop	{r4, r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20000021 	.word	0x20000021
 800cc7c:	2000041c 	.word	0x2000041c
 800cc80:	0802bc80 	.word	0x0802bc80

0800cc84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff ff8d 	bl	800cbb0 <SD_CheckStatus>
 800cc96:	4603      	mov	r3, r0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	; 0x28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	607a      	str	r2, [r7, #4]
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ccb6:	f247 5030 	movw	r0, #30000	; 0x7530
 800ccba:	f7ff ff5b 	bl	800cb74 <SD_CheckStatusWithTimeout>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da02      	bge.n	800ccca <SD_read+0x2a>
  {
    return res;
 800ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc8:	e032      	b.n	800cd30 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	6879      	ldr	r1, [r7, #4]
 800ccce:	68b8      	ldr	r0, [r7, #8]
 800ccd0:	f7ff fecc 	bl	800ca6c <BSP_SD_ReadBlocks_DMA>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ccda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d124      	bne.n	800cd2c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <SD_read+0x98>)
 800cce4:	6819      	ldr	r1, [r3, #0]
 800cce6:	f107 0314 	add.w	r3, r7, #20
 800ccea:	f247 5230 	movw	r2, #30000	; 0x7530
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fa46 	bl	800d180 <osMessageGet>

    if (event.status == osEventMessage)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b10      	cmp	r3, #16
 800ccf8:	d118      	bne.n	800cd2c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d115      	bne.n	800cd2c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cd00:	f000 f964 	bl	800cfcc <osKernelSysTick>
 800cd04:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cd06:	e008      	b.n	800cd1a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd08:	f7ff fee4 	bl	800cad4 <BSP_SD_GetCardState>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d103      	bne.n	800cd1a <SD_read+0x7a>
              {
                res = RES_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cd18:	e008      	b.n	800cd2c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cd1a:	f000 f957 	bl	800cfcc <osKernelSysTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	f247 522f 	movw	r2, #29999	; 0x752f
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d9ed      	bls.n	800cd08 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3728      	adds	r7, #40	; 0x28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	2000041c 	.word	0x2000041c

0800cd3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd52:	f247 5030 	movw	r0, #30000	; 0x7530
 800cd56:	f7ff ff0d 	bl	800cb74 <SD_CheckStatusWithTimeout>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	da02      	bge.n	800cd66 <SD_write+0x2a>
  {
    return res;
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd64:	e02e      	b.n	800cdc4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	68b8      	ldr	r0, [r7, #8]
 800cd6c:	f7ff fe98 	bl	800caa0 <BSP_SD_WriteBlocks_DMA>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d124      	bne.n	800cdc0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cd76:	4b15      	ldr	r3, [pc, #84]	; (800cdcc <SD_write+0x90>)
 800cd78:	6819      	ldr	r1, [r3, #0]
 800cd7a:	f107 0314 	add.w	r3, r7, #20
 800cd7e:	f247 5230 	movw	r2, #30000	; 0x7530
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f9fc 	bl	800d180 <osMessageGet>

    if (event.status == osEventMessage)
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2b10      	cmp	r3, #16
 800cd8c:	d118      	bne.n	800cdc0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d115      	bne.n	800cdc0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cd94:	f000 f91a 	bl	800cfcc <osKernelSysTick>
 800cd98:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cd9a:	e008      	b.n	800cdae <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd9c:	f7ff fe9a 	bl	800cad4 <BSP_SD_GetCardState>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <SD_write+0x72>
          {
            res = RES_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cdac:	e008      	b.n	800cdc0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cdae:	f000 f90d 	bl	800cfcc <osKernelSysTick>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	f247 522f 	movw	r2, #29999	; 0x752f
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d9ed      	bls.n	800cd9c <SD_write+0x60>
    }

  }
#endif

  return res;
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3728      	adds	r7, #40	; 0x28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	2000041c 	.word	0x2000041c

0800cdd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b08c      	sub	sp, #48	; 0x30
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	603a      	str	r2, [r7, #0]
 800cdda:	71fb      	strb	r3, [r7, #7]
 800cddc:	460b      	mov	r3, r1
 800cdde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cde6:	4b25      	ldr	r3, [pc, #148]	; (800ce7c <SD_ioctl+0xac>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <SD_ioctl+0x28>
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e03c      	b.n	800ce72 <SD_ioctl+0xa2>

  switch (cmd)
 800cdf8:	79bb      	ldrb	r3, [r7, #6]
 800cdfa:	2b03      	cmp	r3, #3
 800cdfc:	d834      	bhi.n	800ce68 <SD_ioctl+0x98>
 800cdfe:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <SD_ioctl+0x34>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce15 	.word	0x0800ce15
 800ce08:	0800ce1d 	.word	0x0800ce1d
 800ce0c:	0800ce35 	.word	0x0800ce35
 800ce10:	0800ce4f 	.word	0x0800ce4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce1a:	e028      	b.n	800ce6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce1c:	f107 030c 	add.w	r3, r7, #12
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fe67 	bl	800caf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ce26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce32:	e01c      	b.n	800ce6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce34:	f107 030c 	add.w	r3, r7, #12
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fe5b 	bl	800caf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce4c:	e00f      	b.n	800ce6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce4e:	f107 030c 	add.w	r3, r7, #12
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7ff fe4e 	bl	800caf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	0a5a      	lsrs	r2, r3, #9
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce66:	e002      	b.n	800ce6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ce68:	2304      	movs	r3, #4
 800ce6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ce6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3730      	adds	r7, #48	; 0x30
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000021 	.word	0x20000021

0800ce80 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ce84:	4b04      	ldr	r3, [pc, #16]	; (800ce98 <BSP_SD_ReadCpltCallback+0x18>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 f937 	bl	800d100 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ce92:	bf00      	nop
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	2000041c 	.word	0x2000041c

0800ce9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ceb2:	4b1f      	ldr	r3, [pc, #124]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800ceb4:	7a5b      	ldrb	r3, [r3, #9]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d131      	bne.n	800cf20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cebc:	4b1c      	ldr	r3, [pc, #112]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cebe:	7a5b      	ldrb	r3, [r3, #9]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	461a      	mov	r2, r3
 800cec4:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cec6:	2100      	movs	r1, #0
 800cec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ceca:	4b19      	ldr	r3, [pc, #100]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cecc:	7a5b      	ldrb	r3, [r3, #9]
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	4a17      	ldr	r2, [pc, #92]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cedc:	7a5b      	ldrb	r3, [r3, #9]
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	461a      	mov	r2, r3
 800cee2:	4b13      	ldr	r3, [pc, #76]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cee4:	4413      	add	r3, r2
 800cee6:	79fa      	ldrb	r2, [r7, #7]
 800cee8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ceea:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800ceec:	7a5b      	ldrb	r3, [r3, #9]
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	b2d1      	uxtb	r1, r2
 800cef4:	4a0e      	ldr	r2, [pc, #56]	; (800cf30 <FATFS_LinkDriverEx+0x94>)
 800cef6:	7251      	strb	r1, [r2, #9]
 800cef8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cefa:	7dbb      	ldrb	r3, [r7, #22]
 800cefc:	3330      	adds	r3, #48	; 0x30
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	3301      	adds	r3, #1
 800cf08:	223a      	movs	r2, #58	; 0x3a
 800cf0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3302      	adds	r3, #2
 800cf10:	222f      	movs	r2, #47	; 0x2f
 800cf12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	3303      	adds	r3, #3
 800cf18:	2200      	movs	r2, #0
 800cf1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000420 	.word	0x20000420

0800cf34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf3e:	2200      	movs	r2, #0
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ffaa 	bl	800ce9c <FATFS_LinkDriverEx>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	4603      	mov	r3, r0
 800cf5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cf60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf64:	2b84      	cmp	r3, #132	; 0x84
 800cf66:	d005      	beq.n	800cf74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cf68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	3303      	adds	r3, #3
 800cf72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cf74:	68fb      	ldr	r3, [r7, #12]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf88:	f3ef 8305 	mrs	r3, IPSR
 800cf8c:	607b      	str	r3, [r7, #4]
  return(result);
 800cf8e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	bf14      	ite	ne
 800cf94:	2301      	movne	r3, #1
 800cf96:	2300      	moveq	r3, #0
 800cf98:	b2db      	uxtb	r3, r3
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cfaa:	f001 faff 	bl	800e5ac <vTaskStartScheduler>
  
  return osOK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cfb8:	f001 ff4a 	bl	800ee50 <xTaskGetSchedulerState>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <osKernelRunning+0x12>
    return 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e000      	b.n	800cfc8 <osKernelRunning+0x14>
  else
    return 1;
 800cfc6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cfd0:	f7ff ffd7 	bl	800cf82 <inHandlerMode>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cfda:	f001 fc05 	bl	800e7e8 <xTaskGetTickCountFromISR>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	e002      	b.n	800cfe8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cfe2:	f001 fbf1 	bl	800e7c8 <xTaskGetTickCount>
 800cfe6:	4603      	mov	r3, r0
  }
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfee:	b089      	sub	sp, #36	; 0x24
 800cff0:	af04      	add	r7, sp, #16
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d020      	beq.n	800d040 <osThreadCreate+0x54>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d01c      	beq.n	800d040 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685c      	ldr	r4, [r3, #4]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681d      	ldr	r5, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691e      	ldr	r6, [r3, #16]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff ff9a 	bl	800cf52 <makeFreeRtosPriority>
 800d01e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d028:	9202      	str	r2, [sp, #8]
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	9100      	str	r1, [sp, #0]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	4632      	mov	r2, r6
 800d032:	4629      	mov	r1, r5
 800d034:	4620      	mov	r0, r4
 800d036:	f001 f8e0 	bl	800e1fa <xTaskCreateStatic>
 800d03a:	4603      	mov	r3, r0
 800d03c:	60fb      	str	r3, [r7, #12]
 800d03e:	e01c      	b.n	800d07a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685c      	ldr	r4, [r3, #4]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d04c:	b29e      	uxth	r6, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff ff7c 	bl	800cf52 <makeFreeRtosPriority>
 800d05a:	4602      	mov	r2, r0
 800d05c:	f107 030c 	add.w	r3, r7, #12
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	9200      	str	r2, [sp, #0]
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	4632      	mov	r2, r6
 800d068:	4629      	mov	r1, r5
 800d06a:	4620      	mov	r0, r4
 800d06c:	f001 f925 	bl	800e2ba <xTaskCreate>
 800d070:	4603      	mov	r3, r0
 800d072:	2b01      	cmp	r3, #1
 800d074:	d001      	beq.n	800d07a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	e000      	b.n	800d07c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d07a:	68fb      	ldr	r3, [r7, #12]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d084 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <osDelay+0x16>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	e000      	b.n	800d09c <osDelay+0x18>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 fa4f 	bl	800e540 <vTaskDelay>
  
  return osOK;
 800d0a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af02      	add	r7, sp, #8
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d012      	beq.n	800d0e4 <osMessageCreate+0x38>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6859      	ldr	r1, [r3, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	68dc      	ldr	r4, [r3, #12]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	4623      	mov	r3, r4
 800d0dc:	f000 f9e2 	bl	800d4a4 <xQueueGenericCreateStatic>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	e008      	b.n	800d0f6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	f000 fa55 	bl	800d59e <xQueueGenericCreate>
 800d0f4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd90      	pop	{r4, r7, pc}
	...

0800d100 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <osMessagePut+0x1e>
    ticks = 1;
 800d11a:	2301      	movs	r3, #1
 800d11c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d11e:	f7ff ff30 	bl	800cf82 <inHandlerMode>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d018      	beq.n	800d15a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d128:	f107 0210 	add.w	r2, r7, #16
 800d12c:	f107 0108 	add.w	r1, r7, #8
 800d130:	2300      	movs	r3, #0
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f000 fb96 	bl	800d864 <xQueueGenericSendFromISR>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d001      	beq.n	800d142 <osMessagePut+0x42>
      return osErrorOS;
 800d13e:	23ff      	movs	r3, #255	; 0xff
 800d140:	e018      	b.n	800d174 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d014      	beq.n	800d172 <osMessagePut+0x72>
 800d148:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <osMessagePut+0x7c>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	e00b      	b.n	800d172 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d15a:	f107 0108 	add.w	r1, r7, #8
 800d15e:	2300      	movs	r3, #0
 800d160:	697a      	ldr	r2, [r7, #20]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 fa7c 	bl	800d660 <xQueueGenericSend>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d001      	beq.n	800d172 <osMessagePut+0x72>
      return osErrorOS;
 800d16e:	23ff      	movs	r3, #255	; 0xff
 800d170:	e000      	b.n	800d174 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	e000ed04 	.word	0xe000ed04

0800d180 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b08b      	sub	sp, #44	; 0x2c
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10a      	bne.n	800d1b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d19a:	2380      	movs	r3, #128	; 0x80
 800d19c:	617b      	str	r3, [r7, #20]
    return event;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	461c      	mov	r4, r3
 800d1a2:	f107 0314 	add.w	r3, r7, #20
 800d1a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d1ae:	e054      	b.n	800d25a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1be:	d103      	bne.n	800d1c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d1c6:	e009      	b.n	800d1dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d006      	beq.n	800d1dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <osMessageGet+0x5c>
      ticks = 1;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d1dc:	f7ff fed1 	bl	800cf82 <inHandlerMode>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d01c      	beq.n	800d220 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d1e6:	f107 0220 	add.w	r2, r7, #32
 800d1ea:	f107 0314 	add.w	r3, r7, #20
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	68b8      	ldr	r0, [r7, #8]
 800d1f4:	f000 fe56 	bl	800dea4 <xQueueReceiveFromISR>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d102      	bne.n	800d204 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d1fe:	2310      	movs	r3, #16
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	e001      	b.n	800d208 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d204:	2300      	movs	r3, #0
 800d206:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d01d      	beq.n	800d24a <osMessageGet+0xca>
 800d20e:	4b15      	ldr	r3, [pc, #84]	; (800d264 <osMessageGet+0xe4>)
 800d210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	e014      	b.n	800d24a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	3304      	adds	r3, #4
 800d226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d228:	4619      	mov	r1, r3
 800d22a:	68b8      	ldr	r0, [r7, #8]
 800d22c:	f000 fc48 	bl	800dac0 <xQueueReceive>
 800d230:	4603      	mov	r3, r0
 800d232:	2b01      	cmp	r3, #1
 800d234:	d102      	bne.n	800d23c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d236:	2310      	movs	r3, #16
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e006      	b.n	800d24a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <osMessageGet+0xc6>
 800d242:	2300      	movs	r3, #0
 800d244:	e000      	b.n	800d248 <osMessageGet+0xc8>
 800d246:	2340      	movs	r3, #64	; 0x40
 800d248:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	461c      	mov	r4, r3
 800d24e:	f107 0314 	add.w	r3, r7, #20
 800d252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	372c      	adds	r7, #44	; 0x2c
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}
 800d262:	bf00      	nop
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f103 0208 	add.w	r2, r3, #8
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f04f 32ff 	mov.w	r2, #4294967295
 800d280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f103 0208 	add.w	r2, r3, #8
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f103 0208 	add.w	r2, r3, #8
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b085      	sub	sp, #20
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	689a      	ldr	r2, [r3, #8]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	601a      	str	r2, [r3, #0]
}
 800d2fe:	bf00      	nop
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d30a:	b480      	push	{r7}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d320:	d103      	bne.n	800d32a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	e00c      	b.n	800d344 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	3308      	adds	r3, #8
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	e002      	b.n	800d338 <vListInsert+0x2e>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	429a      	cmp	r2, r3
 800d342:	d2f6      	bcs.n	800d332 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685a      	ldr	r2, [r3, #4]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	601a      	str	r2, [r3, #0]
}
 800d370:	bf00      	nop
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	6892      	ldr	r2, [r2, #8]
 800d392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	6852      	ldr	r2, [r2, #4]
 800d39c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d103      	bne.n	800d3b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	1e5a      	subs	r2, r3, #1
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	b672      	cpsid	i
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	b662      	cpsie	i
 800d3f8:	60bb      	str	r3, [r7, #8]
 800d3fa:	e7fe      	b.n	800d3fa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d3fc:	f002 f86c 	bl	800f4d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d408:	68f9      	ldr	r1, [r7, #12]
 800d40a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d40c:	fb01 f303 	mul.w	r3, r1, r3
 800d410:	441a      	add	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d42c:	3b01      	subs	r3, #1
 800d42e:	68f9      	ldr	r1, [r7, #12]
 800d430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d432:	fb01 f303 	mul.w	r3, r1, r3
 800d436:	441a      	add	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	22ff      	movs	r2, #255	; 0xff
 800d440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	22ff      	movs	r2, #255	; 0xff
 800d448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d114      	bne.n	800d47c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d01a      	beq.n	800d490 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3310      	adds	r3, #16
 800d45e:	4618      	mov	r0, r3
 800d460:	f001 fb36 	bl	800ead0 <xTaskRemoveFromEventList>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d012      	beq.n	800d490 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d46a:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <xQueueGenericReset+0xd0>)
 800d46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	e009      	b.n	800d490 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3310      	adds	r3, #16
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff fef1 	bl	800d268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3324      	adds	r3, #36	; 0x24
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff feec 	bl	800d268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d490:	f002 f854 	bl	800f53c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d494:	2301      	movs	r3, #1
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08e      	sub	sp, #56	; 0x38
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10b      	bne.n	800d4d0 <xQueueGenericCreateStatic+0x2c>
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	b672      	cpsid	i
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	b662      	cpsie	i
 800d4cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4ce:	e7fe      	b.n	800d4ce <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10b      	bne.n	800d4ee <xQueueGenericCreateStatic+0x4a>
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	b672      	cpsid	i
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	b662      	cpsie	i
 800d4ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ec:	e7fe      	b.n	800d4ec <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <xQueueGenericCreateStatic+0x56>
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <xQueueGenericCreateStatic+0x5a>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e000      	b.n	800d500 <xQueueGenericCreateStatic+0x5c>
 800d4fe:	2300      	movs	r3, #0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <xQueueGenericCreateStatic+0x78>
 800d504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d508:	b672      	cpsid	i
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	b662      	cpsie	i
 800d518:	623b      	str	r3, [r7, #32]
 800d51a:	e7fe      	b.n	800d51a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d102      	bne.n	800d528 <xQueueGenericCreateStatic+0x84>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <xQueueGenericCreateStatic+0x88>
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <xQueueGenericCreateStatic+0x8a>
 800d52c:	2300      	movs	r3, #0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10b      	bne.n	800d54a <xQueueGenericCreateStatic+0xa6>
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	b672      	cpsid	i
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	b662      	cpsie	i
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	e7fe      	b.n	800d548 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d54a:	2348      	movs	r3, #72	; 0x48
 800d54c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2b48      	cmp	r3, #72	; 0x48
 800d552:	d00b      	beq.n	800d56c <xQueueGenericCreateStatic+0xc8>
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	b672      	cpsid	i
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	b662      	cpsie	i
 800d568:	61bb      	str	r3, [r7, #24]
 800d56a:	e7fe      	b.n	800d56a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d56c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00d      	beq.n	800d594 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d580:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	4613      	mov	r3, r2
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	68b9      	ldr	r1, [r7, #8]
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f000 f846 	bl	800d620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d596:	4618      	mov	r0, r3
 800d598:	3730      	adds	r7, #48	; 0x30
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b08a      	sub	sp, #40	; 0x28
 800d5a2:	af02      	add	r7, sp, #8
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <xQueueGenericCreate+0x2c>
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	b672      	cpsid	i
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	b662      	cpsie	i
 800d5c6:	613b      	str	r3, [r7, #16]
 800d5c8:	e7fe      	b.n	800d5c8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61fb      	str	r3, [r7, #28]
 800d5d4:	e004      	b.n	800d5e0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	fb02 f303 	mul.w	r3, r2, r3
 800d5de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	3348      	adds	r3, #72	; 0x48
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f002 f899 	bl	800f71c <pvPortMalloc>
 800d5ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d011      	beq.n	800d616 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	3348      	adds	r3, #72	; 0x48
 800d5fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d604:	79fa      	ldrb	r2, [r7, #7]
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	4613      	mov	r3, r2
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 f805 	bl	800d620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d616:	69bb      	ldr	r3, [r7, #24]
	}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d103      	bne.n	800d63c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	e002      	b.n	800d642 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d64e:	2101      	movs	r1, #1
 800d650:	69b8      	ldr	r0, [r7, #24]
 800d652:	f7ff febd 	bl	800d3d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08e      	sub	sp, #56	; 0x38
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d66e:	2300      	movs	r3, #0
 800d670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <xQueueGenericSend+0x34>
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	b672      	cpsid	i
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	b662      	cpsie	i
 800d690:	62bb      	str	r3, [r7, #40]	; 0x28
 800d692:	e7fe      	b.n	800d692 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d103      	bne.n	800d6a2 <xQueueGenericSend+0x42>
 800d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <xQueueGenericSend+0x46>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e000      	b.n	800d6a8 <xQueueGenericSend+0x48>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10b      	bne.n	800d6c4 <xQueueGenericSend+0x64>
 800d6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b0:	b672      	cpsid	i
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	b662      	cpsie	i
 800d6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6c2:	e7fe      	b.n	800d6c2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d103      	bne.n	800d6d2 <xQueueGenericSend+0x72>
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <xQueueGenericSend+0x76>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e000      	b.n	800d6d8 <xQueueGenericSend+0x78>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10b      	bne.n	800d6f4 <xQueueGenericSend+0x94>
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	b672      	cpsid	i
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	b662      	cpsie	i
 800d6f0:	623b      	str	r3, [r7, #32]
 800d6f2:	e7fe      	b.n	800d6f2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6f4:	f001 fbac 	bl	800ee50 <xTaskGetSchedulerState>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <xQueueGenericSend+0xa4>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <xQueueGenericSend+0xa8>
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <xQueueGenericSend+0xaa>
 800d708:	2300      	movs	r3, #0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10b      	bne.n	800d726 <xQueueGenericSend+0xc6>
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	b672      	cpsid	i
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	b662      	cpsie	i
 800d722:	61fb      	str	r3, [r7, #28]
 800d724:	e7fe      	b.n	800d724 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d726:	f001 fed7 	bl	800f4d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d732:	429a      	cmp	r2, r3
 800d734:	d302      	bcc.n	800d73c <xQueueGenericSend+0xdc>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d129      	bne.n	800d790 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d742:	f000 fc4a 	bl	800dfda <prvCopyDataToQueue>
 800d746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d010      	beq.n	800d772 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	3324      	adds	r3, #36	; 0x24
 800d754:	4618      	mov	r0, r3
 800d756:	f001 f9bb 	bl	800ead0 <xTaskRemoveFromEventList>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d013      	beq.n	800d788 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d760:	4b3f      	ldr	r3, [pc, #252]	; (800d860 <xQueueGenericSend+0x200>)
 800d762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	e00a      	b.n	800d788 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d007      	beq.n	800d788 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d778:	4b39      	ldr	r3, [pc, #228]	; (800d860 <xQueueGenericSend+0x200>)
 800d77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d788:	f001 fed8 	bl	800f53c <vPortExitCritical>
				return pdPASS;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e063      	b.n	800d858 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d103      	bne.n	800d79e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d796:	f001 fed1 	bl	800f53c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	e05c      	b.n	800d858 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f001 f9f5 	bl	800eb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7b2:	f001 fec3 	bl	800f53c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7b6:	f000 ff5b 	bl	800e670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7ba:	f001 fe8d 	bl	800f4d8 <vPortEnterCritical>
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7c4:	b25b      	sxtb	r3, r3
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	d103      	bne.n	800d7d4 <xQueueGenericSend+0x174>
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7da:	b25b      	sxtb	r3, r3
 800d7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e0:	d103      	bne.n	800d7ea <xQueueGenericSend+0x18a>
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7ea:	f001 fea7 	bl	800f53c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ee:	1d3a      	adds	r2, r7, #4
 800d7f0:	f107 0314 	add.w	r3, r7, #20
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 f9e4 	bl	800ebc4 <xTaskCheckForTimeOut>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d124      	bne.n	800d84c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d804:	f000 fce1 	bl	800e1ca <prvIsQueueFull>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d018      	beq.n	800d840 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	3310      	adds	r3, #16
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f001 f934 	bl	800ea84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d81e:	f000 fc6c 	bl	800e0fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d822:	f000 ff33 	bl	800e68c <xTaskResumeAll>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f47f af7c 	bne.w	800d726 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <xQueueGenericSend+0x200>)
 800d830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	e772      	b.n	800d726 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d842:	f000 fc5a 	bl	800e0fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d846:	f000 ff21 	bl	800e68c <xTaskResumeAll>
 800d84a:	e76c      	b.n	800d726 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d84e:	f000 fc54 	bl	800e0fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d852:	f000 ff1b 	bl	800e68c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3738      	adds	r7, #56	; 0x38
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	e000ed04 	.word	0xe000ed04

0800d864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b08e      	sub	sp, #56	; 0x38
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10b      	bne.n	800d894 <xQueueGenericSendFromISR+0x30>
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	b672      	cpsid	i
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	b662      	cpsie	i
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
 800d892:	e7fe      	b.n	800d892 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d103      	bne.n	800d8a2 <xQueueGenericSendFromISR+0x3e>
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <xQueueGenericSendFromISR+0x42>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <xQueueGenericSendFromISR+0x44>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10b      	bne.n	800d8c4 <xQueueGenericSendFromISR+0x60>
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	b672      	cpsid	i
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	b662      	cpsie	i
 800d8c0:	623b      	str	r3, [r7, #32]
 800d8c2:	e7fe      	b.n	800d8c2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d103      	bne.n	800d8d2 <xQueueGenericSendFromISR+0x6e>
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d101      	bne.n	800d8d6 <xQueueGenericSendFromISR+0x72>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <xQueueGenericSendFromISR+0x74>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10b      	bne.n	800d8f4 <xQueueGenericSendFromISR+0x90>
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	b672      	cpsid	i
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	b662      	cpsie	i
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	e7fe      	b.n	800d8f2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8f4:	f001 fed0 	bl	800f698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8f8:	f3ef 8211 	mrs	r2, BASEPRI
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	b672      	cpsid	i
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	b662      	cpsie	i
 800d910:	61ba      	str	r2, [r7, #24]
 800d912:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d914:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d920:	429a      	cmp	r2, r3
 800d922:	d302      	bcc.n	800d92a <xQueueGenericSendFromISR+0xc6>
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d12c      	bne.n	800d984 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d93a:	f000 fb4e 	bl	800dfda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d93e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d112      	bne.n	800d96e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d016      	beq.n	800d97e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	3324      	adds	r3, #36	; 0x24
 800d954:	4618      	mov	r0, r3
 800d956:	f001 f8bb 	bl	800ead0 <xTaskRemoveFromEventList>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00e      	beq.n	800d97e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	e007      	b.n	800d97e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d96e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d972:	3301      	adds	r3, #1
 800d974:	b2db      	uxtb	r3, r3
 800d976:	b25a      	sxtb	r2, r3
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d97e:	2301      	movs	r3, #1
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d982:	e001      	b.n	800d988 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d984:	2300      	movs	r3, #0
 800d986:	637b      	str	r3, [r7, #52]	; 0x34
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d994:	4618      	mov	r0, r3
 800d996:	3738      	adds	r7, #56	; 0x38
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10b      	bne.n	800d9c8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	b672      	cpsid	i
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	b662      	cpsie	i
 800d9c4:	623b      	str	r3, [r7, #32]
 800d9c6:	e7fe      	b.n	800d9c6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00b      	beq.n	800d9e8 <xQueueGiveFromISR+0x4c>
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	b672      	cpsid	i
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	b662      	cpsie	i
 800d9e4:	61fb      	str	r3, [r7, #28]
 800d9e6:	e7fe      	b.n	800d9e6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <xQueueGiveFromISR+0x5c>
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <xQueueGiveFromISR+0x60>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e000      	b.n	800d9fe <xQueueGiveFromISR+0x62>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10b      	bne.n	800da1a <xQueueGiveFromISR+0x7e>
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	b672      	cpsid	i
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	b662      	cpsie	i
 800da16:	61bb      	str	r3, [r7, #24]
 800da18:	e7fe      	b.n	800da18 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da1a:	f001 fe3d 	bl	800f698 <vPortValidateInterruptPriority>
	__asm volatile
 800da1e:	f3ef 8211 	mrs	r2, BASEPRI
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	617a      	str	r2, [r7, #20]
 800da38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800da3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d22b      	bcs.n	800daa6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d112      	bne.n	800da90 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d016      	beq.n	800daa0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da74:	3324      	adds	r3, #36	; 0x24
 800da76:	4618      	mov	r0, r3
 800da78:	f001 f82a 	bl	800ead0 <xTaskRemoveFromEventList>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00e      	beq.n	800daa0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00b      	beq.n	800daa0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2201      	movs	r2, #1
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	e007      	b.n	800daa0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da94:	3301      	adds	r3, #1
 800da96:	b2db      	uxtb	r3, r3
 800da98:	b25a      	sxtb	r2, r3
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800daa0:	2301      	movs	r3, #1
 800daa2:	637b      	str	r3, [r7, #52]	; 0x34
 800daa4:	e001      	b.n	800daaa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	637b      	str	r3, [r7, #52]	; 0x34
 800daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3738      	adds	r7, #56	; 0x38
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
	...

0800dac0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08c      	sub	sp, #48	; 0x30
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dacc:	2300      	movs	r3, #0
 800dace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d10b      	bne.n	800daf2 <xQueueReceive+0x32>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dade:	b672      	cpsid	i
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	b662      	cpsie	i
 800daee:	623b      	str	r3, [r7, #32]
 800daf0:	e7fe      	b.n	800daf0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <xQueueReceive+0x40>
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <xQueueReceive+0x44>
 800db00:	2301      	movs	r3, #1
 800db02:	e000      	b.n	800db06 <xQueueReceive+0x46>
 800db04:	2300      	movs	r3, #0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10b      	bne.n	800db22 <xQueueReceive+0x62>
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	61fb      	str	r3, [r7, #28]
 800db20:	e7fe      	b.n	800db20 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db22:	f001 f995 	bl	800ee50 <xTaskGetSchedulerState>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d102      	bne.n	800db32 <xQueueReceive+0x72>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <xQueueReceive+0x76>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <xQueueReceive+0x78>
 800db36:	2300      	movs	r3, #0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10b      	bne.n	800db54 <xQueueReceive+0x94>
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	b672      	cpsid	i
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	b662      	cpsie	i
 800db50:	61bb      	str	r3, [r7, #24]
 800db52:	e7fe      	b.n	800db52 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db54:	f001 fcc0 	bl	800f4d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d01f      	beq.n	800dba4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db68:	f000 faa1 	bl	800e0ae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	1e5a      	subs	r2, r3, #1
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00f      	beq.n	800db9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	3310      	adds	r3, #16
 800db80:	4618      	mov	r0, r3
 800db82:	f000 ffa5 	bl	800ead0 <xTaskRemoveFromEventList>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d007      	beq.n	800db9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db8c:	4b3c      	ldr	r3, [pc, #240]	; (800dc80 <xQueueReceive+0x1c0>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db9c:	f001 fcce 	bl	800f53c <vPortExitCritical>
				return pdPASS;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e069      	b.n	800dc78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d103      	bne.n	800dbb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbaa:	f001 fcc7 	bl	800f53c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e062      	b.n	800dc78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d106      	bne.n	800dbc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbb8:	f107 0310 	add.w	r3, r7, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 ffeb 	bl	800eb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbc6:	f001 fcb9 	bl	800f53c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbca:	f000 fd51 	bl	800e670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbce:	f001 fc83 	bl	800f4d8 <vPortEnterCritical>
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbd8:	b25b      	sxtb	r3, r3
 800dbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbde:	d103      	bne.n	800dbe8 <xQueueReceive+0x128>
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbee:	b25b      	sxtb	r3, r3
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf4:	d103      	bne.n	800dbfe <xQueueReceive+0x13e>
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbfe:	f001 fc9d 	bl	800f53c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc02:	1d3a      	adds	r2, r7, #4
 800dc04:	f107 0310 	add.w	r3, r7, #16
 800dc08:	4611      	mov	r1, r2
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 ffda 	bl	800ebc4 <xTaskCheckForTimeOut>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d123      	bne.n	800dc5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc18:	f000 fac1 	bl	800e19e <prvIsQueueEmpty>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d017      	beq.n	800dc52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	3324      	adds	r3, #36	; 0x24
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 ff2a 	bl	800ea84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc32:	f000 fa62 	bl	800e0fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc36:	f000 fd29 	bl	800e68c <xTaskResumeAll>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d189      	bne.n	800db54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dc40:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <xQueueReceive+0x1c0>)
 800dc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	e780      	b.n	800db54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc54:	f000 fa51 	bl	800e0fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc58:	f000 fd18 	bl	800e68c <xTaskResumeAll>
 800dc5c:	e77a      	b.n	800db54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc60:	f000 fa4b 	bl	800e0fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc64:	f000 fd12 	bl	800e68c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc6a:	f000 fa98 	bl	800e19e <prvIsQueueEmpty>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f43f af6f 	beq.w	800db54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3730      	adds	r7, #48	; 0x30
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	e000ed04 	.word	0xe000ed04

0800dc84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08e      	sub	sp, #56	; 0x38
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <xQueueSemaphoreTake+0x34>
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	b672      	cpsid	i
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	b662      	cpsie	i
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	e7fe      	b.n	800dcb6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00b      	beq.n	800dcd8 <xQueueSemaphoreTake+0x54>
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	b672      	cpsid	i
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	b662      	cpsie	i
 800dcd4:	61fb      	str	r3, [r7, #28]
 800dcd6:	e7fe      	b.n	800dcd6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcd8:	f001 f8ba 	bl	800ee50 <xTaskGetSchedulerState>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d102      	bne.n	800dce8 <xQueueSemaphoreTake+0x64>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <xQueueSemaphoreTake+0x68>
 800dce8:	2301      	movs	r3, #1
 800dcea:	e000      	b.n	800dcee <xQueueSemaphoreTake+0x6a>
 800dcec:	2300      	movs	r3, #0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10b      	bne.n	800dd0a <xQueueSemaphoreTake+0x86>
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	b672      	cpsid	i
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	b662      	cpsie	i
 800dd06:	61bb      	str	r3, [r7, #24]
 800dd08:	e7fe      	b.n	800dd08 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd0a:	f001 fbe5 	bl	800f4d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d024      	beq.n	800dd64 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	1e5a      	subs	r2, r3, #1
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d104      	bne.n	800dd34 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd2a:	f001 fa53 	bl	800f1d4 <pvTaskIncrementMutexHeldCount>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00f      	beq.n	800dd5c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	3310      	adds	r3, #16
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 fec5 	bl	800ead0 <xTaskRemoveFromEventList>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d007      	beq.n	800dd5c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd4c:	4b54      	ldr	r3, [pc, #336]	; (800dea0 <xQueueSemaphoreTake+0x21c>)
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd5c:	f001 fbee 	bl	800f53c <vPortExitCritical>
				return pdPASS;
 800dd60:	2301      	movs	r3, #1
 800dd62:	e098      	b.n	800de96 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d112      	bne.n	800dd90 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00b      	beq.n	800dd88 <xQueueSemaphoreTake+0x104>
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	b672      	cpsid	i
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	b662      	cpsie	i
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e7fe      	b.n	800dd86 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dd88:	f001 fbd8 	bl	800f53c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e082      	b.n	800de96 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd96:	f107 030c 	add.w	r3, r7, #12
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fefc 	bl	800eb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dda0:	2301      	movs	r3, #1
 800dda2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dda4:	f001 fbca 	bl	800f53c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dda8:	f000 fc62 	bl	800e670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddac:	f001 fb94 	bl	800f4d8 <vPortEnterCritical>
 800ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddb6:	b25b      	sxtb	r3, r3
 800ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddbc:	d103      	bne.n	800ddc6 <xQueueSemaphoreTake+0x142>
 800ddbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d103      	bne.n	800dddc <xQueueSemaphoreTake+0x158>
 800ddd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dddc:	f001 fbae 	bl	800f53c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dde0:	463a      	mov	r2, r7
 800dde2:	f107 030c 	add.w	r3, r7, #12
 800dde6:	4611      	mov	r1, r2
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 feeb 	bl	800ebc4 <xTaskCheckForTimeOut>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d132      	bne.n	800de5a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddf6:	f000 f9d2 	bl	800e19e <prvIsQueueEmpty>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d026      	beq.n	800de4e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d109      	bne.n	800de1c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800de08:	f001 fb66 	bl	800f4d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	4618      	mov	r0, r3
 800de12:	f001 f83b 	bl	800ee8c <xTaskPriorityInherit>
 800de16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800de18:	f001 fb90 	bl	800f53c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	3324      	adds	r3, #36	; 0x24
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f000 fe2d 	bl	800ea84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de2c:	f000 f965 	bl	800e0fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de30:	f000 fc2c 	bl	800e68c <xTaskResumeAll>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	f47f af67 	bne.w	800dd0a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800de3c:	4b18      	ldr	r3, [pc, #96]	; (800dea0 <xQueueSemaphoreTake+0x21c>)
 800de3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	e75d      	b.n	800dd0a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de50:	f000 f953 	bl	800e0fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de54:	f000 fc1a 	bl	800e68c <xTaskResumeAll>
 800de58:	e757      	b.n	800dd0a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de5c:	f000 f94d 	bl	800e0fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de60:	f000 fc14 	bl	800e68c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de66:	f000 f99a 	bl	800e19e <prvIsQueueEmpty>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f43f af4c 	beq.w	800dd0a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00d      	beq.n	800de94 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800de78:	f001 fb2e 	bl	800f4d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800de7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de7e:	f000 f894 	bl	800dfaa <prvGetDisinheritPriorityAfterTimeout>
 800de82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f001 f906 	bl	800f09c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800de90:	f001 fb54 	bl	800f53c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de96:	4618      	mov	r0, r3
 800de98:	3738      	adds	r7, #56	; 0x38
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	e000ed04 	.word	0xe000ed04

0800dea4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08e      	sub	sp, #56	; 0x38
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10b      	bne.n	800ded2 <xQueueReceiveFromISR+0x2e>
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	b672      	cpsid	i
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	b662      	cpsie	i
 800dece:	623b      	str	r3, [r7, #32]
 800ded0:	e7fe      	b.n	800ded0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d103      	bne.n	800dee0 <xQueueReceiveFromISR+0x3c>
 800ded8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <xQueueReceiveFromISR+0x40>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e000      	b.n	800dee6 <xQueueReceiveFromISR+0x42>
 800dee4:	2300      	movs	r3, #0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10b      	bne.n	800df02 <xQueueReceiveFromISR+0x5e>
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	b672      	cpsid	i
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	b662      	cpsie	i
 800defe:	61fb      	str	r3, [r7, #28]
 800df00:	e7fe      	b.n	800df00 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df02:	f001 fbc9 	bl	800f698 <vPortValidateInterruptPriority>
	__asm volatile
 800df06:	f3ef 8211 	mrs	r2, BASEPRI
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	b672      	cpsid	i
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	b662      	cpsie	i
 800df1e:	61ba      	str	r2, [r7, #24]
 800df20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d02f      	beq.n	800df92 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df3c:	68b9      	ldr	r1, [r7, #8]
 800df3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df40:	f000 f8b5 	bl	800e0ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	1e5a      	subs	r2, r3, #1
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df54:	d112      	bne.n	800df7c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d016      	beq.n	800df8c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	3310      	adds	r3, #16
 800df62:	4618      	mov	r0, r3
 800df64:	f000 fdb4 	bl	800ead0 <xTaskRemoveFromEventList>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00e      	beq.n	800df8c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00b      	beq.n	800df8c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	e007      	b.n	800df8c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df80:	3301      	adds	r3, #1
 800df82:	b2db      	uxtb	r3, r3
 800df84:	b25a      	sxtb	r2, r3
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800df8c:	2301      	movs	r3, #1
 800df8e:	637b      	str	r3, [r7, #52]	; 0x34
 800df90:	e001      	b.n	800df96 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800df92:	2300      	movs	r3, #0
 800df94:	637b      	str	r3, [r7, #52]	; 0x34
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3738      	adds	r7, #56	; 0x38
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d006      	beq.n	800dfc8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f1c3 0307 	rsb	r3, r3, #7
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	e001      	b.n	800dfcc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
	}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3714      	adds	r7, #20
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b086      	sub	sp, #24
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	60f8      	str	r0, [r7, #12]
 800dfe2:	60b9      	str	r1, [r7, #8]
 800dfe4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10d      	bne.n	800e014 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d14d      	bne.n	800e09c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 ffc1 	bl	800ef8c <xTaskPriorityDisinherit>
 800e00a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	609a      	str	r2, [r3, #8]
 800e012:	e043      	b.n	800e09c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d119      	bne.n	800e04e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6858      	ldr	r0, [r3, #4]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e022:	461a      	mov	r2, r3
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	f01c fe5b 	bl	802ace0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e032:	441a      	add	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	429a      	cmp	r2, r3
 800e042:	d32b      	bcc.n	800e09c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	e026      	b.n	800e09c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68d8      	ldr	r0, [r3, #12]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e056:	461a      	mov	r2, r3
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	f01c fe41 	bl	802ace0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	68da      	ldr	r2, [r3, #12]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e066:	425b      	negs	r3, r3
 800e068:	441a      	add	r2, r3
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d207      	bcs.n	800e08a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	689a      	ldr	r2, [r3, #8]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e082:	425b      	negs	r3, r3
 800e084:	441a      	add	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d105      	bne.n	800e09c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	3b01      	subs	r3, #1
 800e09a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e0a4:	697b      	ldr	r3, [r7, #20]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d018      	beq.n	800e0f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	68da      	ldr	r2, [r3, #12]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c8:	441a      	add	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68da      	ldr	r2, [r3, #12]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d303      	bcc.n	800e0e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68d9      	ldr	r1, [r3, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	6838      	ldr	r0, [r7, #0]
 800e0ee:	f01c fdf7 	bl	802ace0 <memcpy>
	}
}
 800e0f2:	bf00      	nop
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e102:	f001 f9e9 	bl	800f4d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e10c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e10e:	e011      	b.n	800e134 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e114:	2b00      	cmp	r3, #0
 800e116:	d012      	beq.n	800e13e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3324      	adds	r3, #36	; 0x24
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fcd7 	bl	800ead0 <xTaskRemoveFromEventList>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e128:	f000 fdb0 	bl	800ec8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
 800e12e:	3b01      	subs	r3, #1
 800e130:	b2db      	uxtb	r3, r3
 800e132:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dce9      	bgt.n	800e110 <prvUnlockQueue+0x16>
 800e13c:	e000      	b.n	800e140 <prvUnlockQueue+0x46>
					break;
 800e13e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	22ff      	movs	r2, #255	; 0xff
 800e144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e148:	f001 f9f8 	bl	800f53c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e14c:	f001 f9c4 	bl	800f4d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e156:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e158:	e011      	b.n	800e17e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d012      	beq.n	800e188 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3310      	adds	r3, #16
 800e166:	4618      	mov	r0, r3
 800e168:	f000 fcb2 	bl	800ead0 <xTaskRemoveFromEventList>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e172:	f000 fd8b 	bl	800ec8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e176:	7bbb      	ldrb	r3, [r7, #14]
 800e178:	3b01      	subs	r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e17e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e182:	2b00      	cmp	r3, #0
 800e184:	dce9      	bgt.n	800e15a <prvUnlockQueue+0x60>
 800e186:	e000      	b.n	800e18a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e188:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	22ff      	movs	r2, #255	; 0xff
 800e18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e192:	f001 f9d3 	bl	800f53c <vPortExitCritical>
}
 800e196:	bf00      	nop
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1a6:	f001 f997 	bl	800f4d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	e001      	b.n	800e1bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1bc:	f001 f9be 	bl	800f53c <vPortExitCritical>

	return xReturn;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1d2:	f001 f981 	bl	800f4d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d102      	bne.n	800e1e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	60fb      	str	r3, [r7, #12]
 800e1e6:	e001      	b.n	800e1ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1ec:	f001 f9a6 	bl	800f53c <vPortExitCritical>

	return xReturn;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b08e      	sub	sp, #56	; 0x38
 800e1fe:	af04      	add	r7, sp, #16
 800e200:	60f8      	str	r0, [r7, #12]
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]
 800e206:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10b      	bne.n	800e226 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	b672      	cpsid	i
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	b662      	cpsie	i
 800e222:	623b      	str	r3, [r7, #32]
 800e224:	e7fe      	b.n	800e224 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10b      	bne.n	800e244 <xTaskCreateStatic+0x4a>
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	b672      	cpsid	i
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	b662      	cpsie	i
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	e7fe      	b.n	800e242 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e244:	2358      	movs	r3, #88	; 0x58
 800e246:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	2b58      	cmp	r3, #88	; 0x58
 800e24c:	d00b      	beq.n	800e266 <xTaskCreateStatic+0x6c>
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	b672      	cpsid	i
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	b662      	cpsie	i
 800e262:	61bb      	str	r3, [r7, #24]
 800e264:	e7fe      	b.n	800e264 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d01e      	beq.n	800e2ac <xTaskCreateStatic+0xb2>
 800e26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e270:	2b00      	cmp	r3, #0
 800e272:	d01b      	beq.n	800e2ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e27c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	2202      	movs	r2, #2
 800e282:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e286:	2300      	movs	r3, #0
 800e288:	9303      	str	r3, [sp, #12]
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	9302      	str	r3, [sp, #8]
 800e28e:	f107 0314 	add.w	r3, r7, #20
 800e292:	9301      	str	r3, [sp, #4]
 800e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	68b9      	ldr	r1, [r7, #8]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f000 f850 	bl	800e344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2a6:	f000 f8e1 	bl	800e46c <prvAddNewTaskToReadyList>
 800e2aa:	e001      	b.n	800e2b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e2b0:	697b      	ldr	r3, [r7, #20]
	}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3728      	adds	r7, #40	; 0x28
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b08c      	sub	sp, #48	; 0x30
 800e2be:	af04      	add	r7, sp, #16
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	60b9      	str	r1, [r7, #8]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e2ca:	88fb      	ldrh	r3, [r7, #6]
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f001 fa24 	bl	800f71c <pvPortMalloc>
 800e2d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00e      	beq.n	800e2fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2dc:	2058      	movs	r0, #88	; 0x58
 800e2de:	f001 fa1d 	bl	800f71c <pvPortMalloc>
 800e2e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d003      	beq.n	800e2f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	631a      	str	r2, [r3, #48]	; 0x30
 800e2f0:	e005      	b.n	800e2fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e2f2:	6978      	ldr	r0, [r7, #20]
 800e2f4:	f001 fade 	bl	800f8b4 <vPortFree>
 800e2f8:	e001      	b.n	800e2fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d017      	beq.n	800e334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	2200      	movs	r2, #0
 800e308:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e30c:	88fa      	ldrh	r2, [r7, #6]
 800e30e:	2300      	movs	r3, #0
 800e310:	9303      	str	r3, [sp, #12]
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	9302      	str	r3, [sp, #8]
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	9301      	str	r3, [sp, #4]
 800e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	68b9      	ldr	r1, [r7, #8]
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 f80e 	bl	800e344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e328:	69f8      	ldr	r0, [r7, #28]
 800e32a:	f000 f89f 	bl	800e46c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e32e:	2301      	movs	r3, #1
 800e330:	61bb      	str	r3, [r7, #24]
 800e332:	e002      	b.n	800e33a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e334:	f04f 33ff 	mov.w	r3, #4294967295
 800e338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e33a:	69bb      	ldr	r3, [r7, #24]
	}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
 800e350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	461a      	mov	r2, r3
 800e35c:	21a5      	movs	r1, #165	; 0xa5
 800e35e:	f01c fcca 	bl	802acf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e36c:	440b      	add	r3, r1
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	f023 0307 	bic.w	r3, r3, #7
 800e37a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	f003 0307 	and.w	r3, r3, #7
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <prvInitialiseNewTask+0x5a>
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	b672      	cpsid	i
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	b662      	cpsie	i
 800e39a:	617b      	str	r3, [r7, #20]
 800e39c:	e7fe      	b.n	800e39c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d01f      	beq.n	800e3e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61fb      	str	r3, [r7, #28]
 800e3a8:	e012      	b.n	800e3d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	7819      	ldrb	r1, [r3, #0]
 800e3b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	3334      	adds	r3, #52	; 0x34
 800e3ba:	460a      	mov	r2, r1
 800e3bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d006      	beq.n	800e3d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	61fb      	str	r3, [r7, #28]
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	2b0f      	cmp	r3, #15
 800e3d4:	d9e9      	bls.n	800e3aa <prvInitialiseNewTask+0x66>
 800e3d6:	e000      	b.n	800e3da <prvInitialiseNewTask+0x96>
			{
				break;
 800e3d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e3e2:	e003      	b.n	800e3ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	2b06      	cmp	r3, #6
 800e3f0:	d901      	bls.n	800e3f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e3f2:	2306      	movs	r3, #6
 800e3f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e400:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e404:	2200      	movs	r2, #0
 800e406:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40a:	3304      	adds	r3, #4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe ff4b 	bl	800d2a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	3318      	adds	r3, #24
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe ff46 	bl	800d2a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e420:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	f1c3 0207 	rsb	r2, r3, #7
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e430:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	2200      	movs	r2, #0
 800e436:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	2200      	movs	r2, #0
 800e43c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	2200      	movs	r2, #0
 800e442:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e446:	683a      	ldr	r2, [r7, #0]
 800e448:	68f9      	ldr	r1, [r7, #12]
 800e44a:	69b8      	ldr	r0, [r7, #24]
 800e44c:	f000 ff3c 	bl	800f2c8 <pxPortInitialiseStack>
 800e450:	4602      	mov	r2, r0
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e462:	bf00      	nop
 800e464:	3720      	adds	r7, #32
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e474:	f001 f830 	bl	800f4d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e478:	4b2a      	ldr	r3, [pc, #168]	; (800e524 <prvAddNewTaskToReadyList+0xb8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3301      	adds	r3, #1
 800e47e:	4a29      	ldr	r2, [pc, #164]	; (800e524 <prvAddNewTaskToReadyList+0xb8>)
 800e480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e482:	4b29      	ldr	r3, [pc, #164]	; (800e528 <prvAddNewTaskToReadyList+0xbc>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d109      	bne.n	800e49e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e48a:	4a27      	ldr	r2, [pc, #156]	; (800e528 <prvAddNewTaskToReadyList+0xbc>)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e490:	4b24      	ldr	r3, [pc, #144]	; (800e524 <prvAddNewTaskToReadyList+0xb8>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d110      	bne.n	800e4ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e498:	f000 fc1e 	bl	800ecd8 <prvInitialiseTaskLists>
 800e49c:	e00d      	b.n	800e4ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e49e:	4b23      	ldr	r3, [pc, #140]	; (800e52c <prvAddNewTaskToReadyList+0xc0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d109      	bne.n	800e4ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4a6:	4b20      	ldr	r3, [pc, #128]	; (800e528 <prvAddNewTaskToReadyList+0xbc>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d802      	bhi.n	800e4ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e4b4:	4a1c      	ldr	r2, [pc, #112]	; (800e528 <prvAddNewTaskToReadyList+0xbc>)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e4ba:	4b1d      	ldr	r3, [pc, #116]	; (800e530 <prvAddNewTaskToReadyList+0xc4>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	4a1b      	ldr	r2, [pc, #108]	; (800e530 <prvAddNewTaskToReadyList+0xc4>)
 800e4c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	409a      	lsls	r2, r3
 800e4cc:	4b19      	ldr	r3, [pc, #100]	; (800e534 <prvAddNewTaskToReadyList+0xc8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	4a18      	ldr	r2, [pc, #96]	; (800e534 <prvAddNewTaskToReadyList+0xc8>)
 800e4d4:	6013      	str	r3, [r2, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4da:	4613      	mov	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4a15      	ldr	r2, [pc, #84]	; (800e538 <prvAddNewTaskToReadyList+0xcc>)
 800e4e4:	441a      	add	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fe fee8 	bl	800d2c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4f2:	f001 f823 	bl	800f53c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <prvAddNewTaskToReadyList+0xc0>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00e      	beq.n	800e51c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4fe:	4b0a      	ldr	r3, [pc, #40]	; (800e528 <prvAddNewTaskToReadyList+0xbc>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e508:	429a      	cmp	r2, r3
 800e50a:	d207      	bcs.n	800e51c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e50c:	4b0b      	ldr	r3, [pc, #44]	; (800e53c <prvAddNewTaskToReadyList+0xd0>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	2000052c 	.word	0x2000052c
 800e528:	2000042c 	.word	0x2000042c
 800e52c:	20000538 	.word	0x20000538
 800e530:	20000548 	.word	0x20000548
 800e534:	20000534 	.word	0x20000534
 800e538:	20000430 	.word	0x20000430
 800e53c:	e000ed04 	.word	0xe000ed04

0800e540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e548:	2300      	movs	r3, #0
 800e54a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d018      	beq.n	800e584 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e552:	4b14      	ldr	r3, [pc, #80]	; (800e5a4 <vTaskDelay+0x64>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00b      	beq.n	800e572 <vTaskDelay+0x32>
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	b672      	cpsid	i
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	b662      	cpsie	i
 800e56e:	60bb      	str	r3, [r7, #8]
 800e570:	e7fe      	b.n	800e570 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e572:	f000 f87d 	bl	800e670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e576:	2100      	movs	r1, #0
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fe3f 	bl	800f1fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e57e:	f000 f885 	bl	800e68c <xTaskResumeAll>
 800e582:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d107      	bne.n	800e59a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e58a:	4b07      	ldr	r3, [pc, #28]	; (800e5a8 <vTaskDelay+0x68>)
 800e58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e590:	601a      	str	r2, [r3, #0]
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e59a:	bf00      	nop
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000554 	.word	0x20000554
 800e5a8:	e000ed04 	.word	0xe000ed04

0800e5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	; 0x28
 800e5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5ba:	463a      	mov	r2, r7
 800e5bc:	1d39      	adds	r1, r7, #4
 800e5be:	f107 0308 	add.w	r3, r7, #8
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f2 faa2 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	9202      	str	r2, [sp, #8]
 800e5d0:	9301      	str	r3, [sp, #4]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	460a      	mov	r2, r1
 800e5da:	491f      	ldr	r1, [pc, #124]	; (800e658 <vTaskStartScheduler+0xac>)
 800e5dc:	481f      	ldr	r0, [pc, #124]	; (800e65c <vTaskStartScheduler+0xb0>)
 800e5de:	f7ff fe0c 	bl	800e1fa <xTaskCreateStatic>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	4b1e      	ldr	r3, [pc, #120]	; (800e660 <vTaskStartScheduler+0xb4>)
 800e5e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5e8:	4b1d      	ldr	r3, [pc, #116]	; (800e660 <vTaskStartScheduler+0xb4>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e001      	b.n	800e5fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d117      	bne.n	800e630 <vTaskStartScheduler+0x84>
 800e600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e604:	b672      	cpsid	i
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	b662      	cpsie	i
 800e614:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e616:	4b13      	ldr	r3, [pc, #76]	; (800e664 <vTaskStartScheduler+0xb8>)
 800e618:	f04f 32ff 	mov.w	r2, #4294967295
 800e61c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e61e:	4b12      	ldr	r3, [pc, #72]	; (800e668 <vTaskStartScheduler+0xbc>)
 800e620:	2201      	movs	r2, #1
 800e622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e624:	4b11      	ldr	r3, [pc, #68]	; (800e66c <vTaskStartScheduler+0xc0>)
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e62a:	f000 fed9 	bl	800f3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e62e:	e00f      	b.n	800e650 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e636:	d10b      	bne.n	800e650 <vTaskStartScheduler+0xa4>
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	b672      	cpsid	i
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	b662      	cpsie	i
 800e64c:	60fb      	str	r3, [r7, #12]
 800e64e:	e7fe      	b.n	800e64e <vTaskStartScheduler+0xa2>
}
 800e650:	bf00      	nop
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0802bc90 	.word	0x0802bc90
 800e65c:	0800eca5 	.word	0x0800eca5
 800e660:	20000550 	.word	0x20000550
 800e664:	2000054c 	.word	0x2000054c
 800e668:	20000538 	.word	0x20000538
 800e66c:	20000530 	.word	0x20000530

0800e670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e670:	b480      	push	{r7}
 800e672:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e674:	4b04      	ldr	r3, [pc, #16]	; (800e688 <vTaskSuspendAll+0x18>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	3301      	adds	r3, #1
 800e67a:	4a03      	ldr	r2, [pc, #12]	; (800e688 <vTaskSuspendAll+0x18>)
 800e67c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e67e:	bf00      	nop
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr
 800e688:	20000554 	.word	0x20000554

0800e68c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e692:	2300      	movs	r3, #0
 800e694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e696:	2300      	movs	r3, #0
 800e698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e69a:	4b42      	ldr	r3, [pc, #264]	; (800e7a4 <xTaskResumeAll+0x118>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10b      	bne.n	800e6ba <xTaskResumeAll+0x2e>
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	b672      	cpsid	i
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	b662      	cpsie	i
 800e6b6:	603b      	str	r3, [r7, #0]
 800e6b8:	e7fe      	b.n	800e6b8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6ba:	f000 ff0d 	bl	800f4d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6be:	4b39      	ldr	r3, [pc, #228]	; (800e7a4 <xTaskResumeAll+0x118>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	4a37      	ldr	r2, [pc, #220]	; (800e7a4 <xTaskResumeAll+0x118>)
 800e6c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c8:	4b36      	ldr	r3, [pc, #216]	; (800e7a4 <xTaskResumeAll+0x118>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d161      	bne.n	800e794 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6d0:	4b35      	ldr	r3, [pc, #212]	; (800e7a8 <xTaskResumeAll+0x11c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d05d      	beq.n	800e794 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6d8:	e02e      	b.n	800e738 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6da:	4b34      	ldr	r3, [pc, #208]	; (800e7ac <xTaskResumeAll+0x120>)
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3318      	adds	r3, #24
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe fe48 	bl	800d37c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe fe43 	bl	800d37c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	409a      	lsls	r2, r3
 800e6fe:	4b2c      	ldr	r3, [pc, #176]	; (800e7b0 <xTaskResumeAll+0x124>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4313      	orrs	r3, r2
 800e704:	4a2a      	ldr	r2, [pc, #168]	; (800e7b0 <xTaskResumeAll+0x124>)
 800e706:	6013      	str	r3, [r2, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70c:	4613      	mov	r3, r2
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	4413      	add	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4a27      	ldr	r2, [pc, #156]	; (800e7b4 <xTaskResumeAll+0x128>)
 800e716:	441a      	add	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3304      	adds	r3, #4
 800e71c:	4619      	mov	r1, r3
 800e71e:	4610      	mov	r0, r2
 800e720:	f7fe fdcf 	bl	800d2c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e728:	4b23      	ldr	r3, [pc, #140]	; (800e7b8 <xTaskResumeAll+0x12c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	429a      	cmp	r2, r3
 800e730:	d302      	bcc.n	800e738 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e732:	4b22      	ldr	r3, [pc, #136]	; (800e7bc <xTaskResumeAll+0x130>)
 800e734:	2201      	movs	r2, #1
 800e736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e738:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <xTaskResumeAll+0x120>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1cc      	bne.n	800e6da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e746:	f000 fb63 	bl	800ee10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e74a:	4b1d      	ldr	r3, [pc, #116]	; (800e7c0 <xTaskResumeAll+0x134>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d010      	beq.n	800e778 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e756:	f000 f859 	bl	800e80c <xTaskIncrementTick>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e760:	4b16      	ldr	r3, [pc, #88]	; (800e7bc <xTaskResumeAll+0x130>)
 800e762:	2201      	movs	r2, #1
 800e764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3b01      	subs	r3, #1
 800e76a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1f1      	bne.n	800e756 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e772:	4b13      	ldr	r3, [pc, #76]	; (800e7c0 <xTaskResumeAll+0x134>)
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e778:	4b10      	ldr	r3, [pc, #64]	; (800e7bc <xTaskResumeAll+0x130>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d009      	beq.n	800e794 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e780:	2301      	movs	r3, #1
 800e782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e784:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <xTaskResumeAll+0x138>)
 800e786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e794:	f000 fed2 	bl	800f53c <vPortExitCritical>

	return xAlreadyYielded;
 800e798:	68bb      	ldr	r3, [r7, #8]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20000554 	.word	0x20000554
 800e7a8:	2000052c 	.word	0x2000052c
 800e7ac:	200004ec 	.word	0x200004ec
 800e7b0:	20000534 	.word	0x20000534
 800e7b4:	20000430 	.word	0x20000430
 800e7b8:	2000042c 	.word	0x2000042c
 800e7bc:	20000540 	.word	0x20000540
 800e7c0:	2000053c 	.word	0x2000053c
 800e7c4:	e000ed04 	.word	0xe000ed04

0800e7c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7ce:	4b05      	ldr	r3, [pc, #20]	; (800e7e4 <xTaskGetTickCount+0x1c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7d4:	687b      	ldr	r3, [r7, #4]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20000530 	.word	0x20000530

0800e7e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ee:	f000 ff53 	bl	800f698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e7f6:	4b04      	ldr	r3, [pc, #16]	; (800e808 <xTaskGetTickCountFromISR+0x20>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7fc:	683b      	ldr	r3, [r7, #0]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20000530 	.word	0x20000530

0800e80c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e812:	2300      	movs	r3, #0
 800e814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e816:	4b4f      	ldr	r3, [pc, #316]	; (800e954 <xTaskIncrementTick+0x148>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f040 8089 	bne.w	800e932 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e820:	4b4d      	ldr	r3, [pc, #308]	; (800e958 <xTaskIncrementTick+0x14c>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3301      	adds	r3, #1
 800e826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e828:	4a4b      	ldr	r2, [pc, #300]	; (800e958 <xTaskIncrementTick+0x14c>)
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d121      	bne.n	800e878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e834:	4b49      	ldr	r3, [pc, #292]	; (800e95c <xTaskIncrementTick+0x150>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00b      	beq.n	800e856 <xTaskIncrementTick+0x4a>
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	b672      	cpsid	i
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	b662      	cpsie	i
 800e852:	603b      	str	r3, [r7, #0]
 800e854:	e7fe      	b.n	800e854 <xTaskIncrementTick+0x48>
 800e856:	4b41      	ldr	r3, [pc, #260]	; (800e95c <xTaskIncrementTick+0x150>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	4b40      	ldr	r3, [pc, #256]	; (800e960 <xTaskIncrementTick+0x154>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a3e      	ldr	r2, [pc, #248]	; (800e95c <xTaskIncrementTick+0x150>)
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	4a3e      	ldr	r2, [pc, #248]	; (800e960 <xTaskIncrementTick+0x154>)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6013      	str	r3, [r2, #0]
 800e86a:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <xTaskIncrementTick+0x158>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	4a3c      	ldr	r2, [pc, #240]	; (800e964 <xTaskIncrementTick+0x158>)
 800e872:	6013      	str	r3, [r2, #0]
 800e874:	f000 facc 	bl	800ee10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e878:	4b3b      	ldr	r3, [pc, #236]	; (800e968 <xTaskIncrementTick+0x15c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d348      	bcc.n	800e914 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e882:	4b36      	ldr	r3, [pc, #216]	; (800e95c <xTaskIncrementTick+0x150>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d104      	bne.n	800e896 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e88c:	4b36      	ldr	r3, [pc, #216]	; (800e968 <xTaskIncrementTick+0x15c>)
 800e88e:	f04f 32ff 	mov.w	r2, #4294967295
 800e892:	601a      	str	r2, [r3, #0]
					break;
 800e894:	e03e      	b.n	800e914 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e896:	4b31      	ldr	r3, [pc, #196]	; (800e95c <xTaskIncrementTick+0x150>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d203      	bcs.n	800e8b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e8ae:	4a2e      	ldr	r2, [pc, #184]	; (800e968 <xTaskIncrementTick+0x15c>)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8b4:	e02e      	b.n	800e914 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe fd5e 	bl	800d37c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	3318      	adds	r3, #24
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fe fd55 	bl	800d37c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	409a      	lsls	r2, r3
 800e8da:	4b24      	ldr	r3, [pc, #144]	; (800e96c <xTaskIncrementTick+0x160>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	4a22      	ldr	r2, [pc, #136]	; (800e96c <xTaskIncrementTick+0x160>)
 800e8e2:	6013      	str	r3, [r2, #0]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <xTaskIncrementTick+0x164>)
 800e8f2:	441a      	add	r2, r3
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	f7fe fce1 	bl	800d2c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e904:	4b1b      	ldr	r3, [pc, #108]	; (800e974 <xTaskIncrementTick+0x168>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d3b9      	bcc.n	800e882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e90e:	2301      	movs	r3, #1
 800e910:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e912:	e7b6      	b.n	800e882 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e914:	4b17      	ldr	r3, [pc, #92]	; (800e974 <xTaskIncrementTick+0x168>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	4915      	ldr	r1, [pc, #84]	; (800e970 <xTaskIncrementTick+0x164>)
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	440b      	add	r3, r1
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d907      	bls.n	800e93c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e92c:	2301      	movs	r3, #1
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	e004      	b.n	800e93c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e932:	4b11      	ldr	r3, [pc, #68]	; (800e978 <xTaskIncrementTick+0x16c>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	3301      	adds	r3, #1
 800e938:	4a0f      	ldr	r2, [pc, #60]	; (800e978 <xTaskIncrementTick+0x16c>)
 800e93a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e93c:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <xTaskIncrementTick+0x170>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e944:	2301      	movs	r3, #1
 800e946:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e948:	697b      	ldr	r3, [r7, #20]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20000554 	.word	0x20000554
 800e958:	20000530 	.word	0x20000530
 800e95c:	200004e4 	.word	0x200004e4
 800e960:	200004e8 	.word	0x200004e8
 800e964:	20000544 	.word	0x20000544
 800e968:	2000054c 	.word	0x2000054c
 800e96c:	20000534 	.word	0x20000534
 800e970:	20000430 	.word	0x20000430
 800e974:	2000042c 	.word	0x2000042c
 800e978:	2000053c 	.word	0x2000053c
 800e97c:	20000540 	.word	0x20000540

0800e980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e986:	4b3a      	ldr	r3, [pc, #232]	; (800ea70 <vTaskSwitchContext+0xf0>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e98e:	4b39      	ldr	r3, [pc, #228]	; (800ea74 <vTaskSwitchContext+0xf4>)
 800e990:	2201      	movs	r2, #1
 800e992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e994:	e067      	b.n	800ea66 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e996:	4b37      	ldr	r3, [pc, #220]	; (800ea74 <vTaskSwitchContext+0xf4>)
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e99c:	4b36      	ldr	r3, [pc, #216]	; (800ea78 <vTaskSwitchContext+0xf8>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	61fb      	str	r3, [r7, #28]
 800e9a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e9a8:	61bb      	str	r3, [r7, #24]
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	69ba      	ldr	r2, [r7, #24]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d111      	bne.n	800e9d8 <vTaskSwitchContext+0x58>
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	69ba      	ldr	r2, [r7, #24]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d10b      	bne.n	800e9d8 <vTaskSwitchContext+0x58>
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d105      	bne.n	800e9d8 <vTaskSwitchContext+0x58>
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	330c      	adds	r3, #12
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d008      	beq.n	800e9ea <vTaskSwitchContext+0x6a>
 800e9d8:	4b27      	ldr	r3, [pc, #156]	; (800ea78 <vTaskSwitchContext+0xf8>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	4b26      	ldr	r3, [pc, #152]	; (800ea78 <vTaskSwitchContext+0xf8>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3334      	adds	r3, #52	; 0x34
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7f2 f87e 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ea:	4b24      	ldr	r3, [pc, #144]	; (800ea7c <vTaskSwitchContext+0xfc>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	fab3 f383 	clz	r3, r3
 800e9f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e9f8:	7afb      	ldrb	r3, [r7, #11]
 800e9fa:	f1c3 031f 	rsb	r3, r3, #31
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	491f      	ldr	r1, [pc, #124]	; (800ea80 <vTaskSwitchContext+0x100>)
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	440b      	add	r3, r1
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10b      	bne.n	800ea2c <vTaskSwitchContext+0xac>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	b672      	cpsid	i
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	b662      	cpsie	i
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	e7fe      	b.n	800ea2a <vTaskSwitchContext+0xaa>
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4a12      	ldr	r2, [pc, #72]	; (800ea80 <vTaskSwitchContext+0x100>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	613b      	str	r3, [r7, #16]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	605a      	str	r2, [r3, #4]
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	685a      	ldr	r2, [r3, #4]
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	3308      	adds	r3, #8
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d104      	bne.n	800ea5c <vTaskSwitchContext+0xdc>
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	685a      	ldr	r2, [r3, #4]
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	605a      	str	r2, [r3, #4]
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4a05      	ldr	r2, [pc, #20]	; (800ea78 <vTaskSwitchContext+0xf8>)
 800ea64:	6013      	str	r3, [r2, #0]
}
 800ea66:	bf00      	nop
 800ea68:	3720      	adds	r7, #32
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20000554 	.word	0x20000554
 800ea74:	20000540 	.word	0x20000540
 800ea78:	2000042c 	.word	0x2000042c
 800ea7c:	20000534 	.word	0x20000534
 800ea80:	20000430 	.word	0x20000430

0800ea84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10b      	bne.n	800eaac <vTaskPlaceOnEventList+0x28>
 800ea94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea98:	b672      	cpsid	i
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	b662      	cpsie	i
 800eaa8:	60fb      	str	r3, [r7, #12]
 800eaaa:	e7fe      	b.n	800eaaa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eaac:	4b07      	ldr	r3, [pc, #28]	; (800eacc <vTaskPlaceOnEventList+0x48>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3318      	adds	r3, #24
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7fe fc28 	bl	800d30a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eaba:	2101      	movs	r1, #1
 800eabc:	6838      	ldr	r0, [r7, #0]
 800eabe:	f000 fb9d 	bl	800f1fc <prvAddCurrentTaskToDelayedList>
}
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	2000042c 	.word	0x2000042c

0800ead0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10b      	bne.n	800eafe <xTaskRemoveFromEventList+0x2e>
 800eae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaea:	b672      	cpsid	i
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	b662      	cpsie	i
 800eafa:	60fb      	str	r3, [r7, #12]
 800eafc:	e7fe      	b.n	800eafc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	3318      	adds	r3, #24
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe fc3a 	bl	800d37c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb08:	4b1d      	ldr	r3, [pc, #116]	; (800eb80 <xTaskRemoveFromEventList+0xb0>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d11c      	bne.n	800eb4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	3304      	adds	r3, #4
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fc31 	bl	800d37c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1e:	2201      	movs	r2, #1
 800eb20:	409a      	lsls	r2, r3
 800eb22:	4b18      	ldr	r3, [pc, #96]	; (800eb84 <xTaskRemoveFromEventList+0xb4>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	4a16      	ldr	r2, [pc, #88]	; (800eb84 <xTaskRemoveFromEventList+0xb4>)
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb30:	4613      	mov	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4a13      	ldr	r2, [pc, #76]	; (800eb88 <xTaskRemoveFromEventList+0xb8>)
 800eb3a:	441a      	add	r2, r3
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	4619      	mov	r1, r3
 800eb42:	4610      	mov	r0, r2
 800eb44:	f7fe fbbd 	bl	800d2c2 <vListInsertEnd>
 800eb48:	e005      	b.n	800eb56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3318      	adds	r3, #24
 800eb4e:	4619      	mov	r1, r3
 800eb50:	480e      	ldr	r0, [pc, #56]	; (800eb8c <xTaskRemoveFromEventList+0xbc>)
 800eb52:	f7fe fbb6 	bl	800d2c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5a:	4b0d      	ldr	r3, [pc, #52]	; (800eb90 <xTaskRemoveFromEventList+0xc0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d905      	bls.n	800eb70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb68:	4b0a      	ldr	r3, [pc, #40]	; (800eb94 <xTaskRemoveFromEventList+0xc4>)
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	e001      	b.n	800eb74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eb70:	2300      	movs	r3, #0
 800eb72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb74:	697b      	ldr	r3, [r7, #20]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000554 	.word	0x20000554
 800eb84:	20000534 	.word	0x20000534
 800eb88:	20000430 	.word	0x20000430
 800eb8c:	200004ec 	.word	0x200004ec
 800eb90:	2000042c 	.word	0x2000042c
 800eb94:	20000540 	.word	0x20000540

0800eb98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eba0:	4b06      	ldr	r3, [pc, #24]	; (800ebbc <vTaskInternalSetTimeOutState+0x24>)
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eba8:	4b05      	ldr	r3, [pc, #20]	; (800ebc0 <vTaskInternalSetTimeOutState+0x28>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	605a      	str	r2, [r3, #4]
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	20000544 	.word	0x20000544
 800ebc0:	20000530 	.word	0x20000530

0800ebc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b088      	sub	sp, #32
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10b      	bne.n	800ebec <xTaskCheckForTimeOut+0x28>
 800ebd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd8:	b672      	cpsid	i
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	b662      	cpsie	i
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	e7fe      	b.n	800ebea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10b      	bne.n	800ec0a <xTaskCheckForTimeOut+0x46>
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	b672      	cpsid	i
 800ebf8:	f383 8811 	msr	BASEPRI, r3
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	b662      	cpsie	i
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	e7fe      	b.n	800ec08 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ec0a:	f000 fc65 	bl	800f4d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec0e:	4b1d      	ldr	r3, [pc, #116]	; (800ec84 <xTaskCheckForTimeOut+0xc0>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec26:	d102      	bne.n	800ec2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	61fb      	str	r3, [r7, #28]
 800ec2c:	e023      	b.n	800ec76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	4b15      	ldr	r3, [pc, #84]	; (800ec88 <xTaskCheckForTimeOut+0xc4>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d007      	beq.n	800ec4a <xTaskCheckForTimeOut+0x86>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	69ba      	ldr	r2, [r7, #24]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d302      	bcc.n	800ec4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	61fb      	str	r3, [r7, #28]
 800ec48:	e015      	b.n	800ec76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	697a      	ldr	r2, [r7, #20]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d20b      	bcs.n	800ec6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	1ad2      	subs	r2, r2, r3
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff ff99 	bl	800eb98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec66:	2300      	movs	r3, #0
 800ec68:	61fb      	str	r3, [r7, #28]
 800ec6a:	e004      	b.n	800ec76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec72:	2301      	movs	r3, #1
 800ec74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec76:	f000 fc61 	bl	800f53c <vPortExitCritical>

	return xReturn;
 800ec7a:	69fb      	ldr	r3, [r7, #28]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3720      	adds	r7, #32
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	20000530 	.word	0x20000530
 800ec88:	20000544 	.word	0x20000544

0800ec8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec90:	4b03      	ldr	r3, [pc, #12]	; (800eca0 <vTaskMissedYield+0x14>)
 800ec92:	2201      	movs	r2, #1
 800ec94:	601a      	str	r2, [r3, #0]
}
 800ec96:	bf00      	nop
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	20000540 	.word	0x20000540

0800eca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecac:	f000 f854 	bl	800ed58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <prvIdleTask+0x2c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d907      	bls.n	800ecc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <prvIdleTask+0x30>)
 800ecba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecbe:	601a      	str	r2, [r3, #0]
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ecc8:	f7f1 ff06 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eccc:	e7ee      	b.n	800ecac <prvIdleTask+0x8>
 800ecce:	bf00      	nop
 800ecd0:	20000430 	.word	0x20000430
 800ecd4:	e000ed04 	.word	0xe000ed04

0800ecd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	e00c      	b.n	800ecfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	4613      	mov	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4a12      	ldr	r2, [pc, #72]	; (800ed38 <prvInitialiseTaskLists+0x60>)
 800ecf0:	4413      	add	r3, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7fe fab8 	bl	800d268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	607b      	str	r3, [r7, #4]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b06      	cmp	r3, #6
 800ed02:	d9ef      	bls.n	800ece4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed04:	480d      	ldr	r0, [pc, #52]	; (800ed3c <prvInitialiseTaskLists+0x64>)
 800ed06:	f7fe faaf 	bl	800d268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed0a:	480d      	ldr	r0, [pc, #52]	; (800ed40 <prvInitialiseTaskLists+0x68>)
 800ed0c:	f7fe faac 	bl	800d268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed10:	480c      	ldr	r0, [pc, #48]	; (800ed44 <prvInitialiseTaskLists+0x6c>)
 800ed12:	f7fe faa9 	bl	800d268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed16:	480c      	ldr	r0, [pc, #48]	; (800ed48 <prvInitialiseTaskLists+0x70>)
 800ed18:	f7fe faa6 	bl	800d268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed1c:	480b      	ldr	r0, [pc, #44]	; (800ed4c <prvInitialiseTaskLists+0x74>)
 800ed1e:	f7fe faa3 	bl	800d268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed22:	4b0b      	ldr	r3, [pc, #44]	; (800ed50 <prvInitialiseTaskLists+0x78>)
 800ed24:	4a05      	ldr	r2, [pc, #20]	; (800ed3c <prvInitialiseTaskLists+0x64>)
 800ed26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed28:	4b0a      	ldr	r3, [pc, #40]	; (800ed54 <prvInitialiseTaskLists+0x7c>)
 800ed2a:	4a05      	ldr	r2, [pc, #20]	; (800ed40 <prvInitialiseTaskLists+0x68>)
 800ed2c:	601a      	str	r2, [r3, #0]
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000430 	.word	0x20000430
 800ed3c:	200004bc 	.word	0x200004bc
 800ed40:	200004d0 	.word	0x200004d0
 800ed44:	200004ec 	.word	0x200004ec
 800ed48:	20000500 	.word	0x20000500
 800ed4c:	20000518 	.word	0x20000518
 800ed50:	200004e4 	.word	0x200004e4
 800ed54:	200004e8 	.word	0x200004e8

0800ed58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed5e:	e019      	b.n	800ed94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed60:	f000 fbba 	bl	800f4d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <prvCheckTasksWaitingTermination+0x4c>)
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fb03 	bl	800d37c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed76:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <prvCheckTasksWaitingTermination+0x50>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	4a0a      	ldr	r2, [pc, #40]	; (800eda8 <prvCheckTasksWaitingTermination+0x50>)
 800ed7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed80:	4b0a      	ldr	r3, [pc, #40]	; (800edac <prvCheckTasksWaitingTermination+0x54>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3b01      	subs	r3, #1
 800ed86:	4a09      	ldr	r2, [pc, #36]	; (800edac <prvCheckTasksWaitingTermination+0x54>)
 800ed88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed8a:	f000 fbd7 	bl	800f53c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f80e 	bl	800edb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed94:	4b05      	ldr	r3, [pc, #20]	; (800edac <prvCheckTasksWaitingTermination+0x54>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1e1      	bne.n	800ed60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	20000500 	.word	0x20000500
 800eda8:	2000052c 	.word	0x2000052c
 800edac:	20000514 	.word	0x20000514

0800edb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d108      	bne.n	800edd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fd74 	bl	800f8b4 <vPortFree>
				vPortFree( pxTCB );
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fd71 	bl	800f8b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edd2:	e019      	b.n	800ee08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d103      	bne.n	800ede6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 fd68 	bl	800f8b4 <vPortFree>
	}
 800ede4:	e010      	b.n	800ee08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800edec:	2b02      	cmp	r3, #2
 800edee:	d00b      	beq.n	800ee08 <prvDeleteTCB+0x58>
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	b672      	cpsid	i
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	b662      	cpsie	i
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	e7fe      	b.n	800ee06 <prvDeleteTCB+0x56>
	}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee16:	4b0c      	ldr	r3, [pc, #48]	; (800ee48 <prvResetNextTaskUnblockTime+0x38>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee20:	4b0a      	ldr	r3, [pc, #40]	; (800ee4c <prvResetNextTaskUnblockTime+0x3c>)
 800ee22:	f04f 32ff 	mov.w	r2, #4294967295
 800ee26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee28:	e008      	b.n	800ee3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee2a:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <prvResetNextTaskUnblockTime+0x38>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	4a04      	ldr	r2, [pc, #16]	; (800ee4c <prvResetNextTaskUnblockTime+0x3c>)
 800ee3a:	6013      	str	r3, [r2, #0]
}
 800ee3c:	bf00      	nop
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	200004e4 	.word	0x200004e4
 800ee4c:	2000054c 	.word	0x2000054c

0800ee50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee56:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <xTaskGetSchedulerState+0x34>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d102      	bne.n	800ee64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	607b      	str	r3, [r7, #4]
 800ee62:	e008      	b.n	800ee76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee64:	4b08      	ldr	r3, [pc, #32]	; (800ee88 <xTaskGetSchedulerState+0x38>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d102      	bne.n	800ee72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	607b      	str	r3, [r7, #4]
 800ee70:	e001      	b.n	800ee76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee72:	2300      	movs	r3, #0
 800ee74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee76:	687b      	ldr	r3, [r7, #4]
	}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	20000538 	.word	0x20000538
 800ee88:	20000554 	.word	0x20000554

0800ee8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d069      	beq.n	800ef76 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea6:	4b36      	ldr	r3, [pc, #216]	; (800ef80 <xTaskPriorityInherit+0xf4>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d259      	bcs.n	800ef64 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	db06      	blt.n	800eec6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeb8:	4b31      	ldr	r3, [pc, #196]	; (800ef80 <xTaskPriorityInherit+0xf4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	f1c3 0207 	rsb	r2, r3, #7
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	6959      	ldr	r1, [r3, #20]
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	4a2b      	ldr	r2, [pc, #172]	; (800ef84 <xTaskPriorityInherit+0xf8>)
 800eed8:	4413      	add	r3, r2
 800eeda:	4299      	cmp	r1, r3
 800eedc:	d13a      	bne.n	800ef54 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	3304      	adds	r3, #4
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fe fa4a 	bl	800d37c <uxListRemove>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d115      	bne.n	800ef1a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef2:	4924      	ldr	r1, [pc, #144]	; (800ef84 <xTaskPriorityInherit+0xf8>)
 800eef4:	4613      	mov	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	4413      	add	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	440b      	add	r3, r1
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10a      	bne.n	800ef1a <xTaskPriorityInherit+0x8e>
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef08:	2201      	movs	r2, #1
 800ef0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef0e:	43da      	mvns	r2, r3
 800ef10:	4b1d      	ldr	r3, [pc, #116]	; (800ef88 <xTaskPriorityInherit+0xfc>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4013      	ands	r3, r2
 800ef16:	4a1c      	ldr	r2, [pc, #112]	; (800ef88 <xTaskPriorityInherit+0xfc>)
 800ef18:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef1a:	4b19      	ldr	r3, [pc, #100]	; (800ef80 <xTaskPriorityInherit+0xf4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef28:	2201      	movs	r2, #1
 800ef2a:	409a      	lsls	r2, r3
 800ef2c:	4b16      	ldr	r3, [pc, #88]	; (800ef88 <xTaskPriorityInherit+0xfc>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	4a15      	ldr	r2, [pc, #84]	; (800ef88 <xTaskPriorityInherit+0xfc>)
 800ef34:	6013      	str	r3, [r2, #0]
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4a10      	ldr	r2, [pc, #64]	; (800ef84 <xTaskPriorityInherit+0xf8>)
 800ef44:	441a      	add	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	f7fe f9b8 	bl	800d2c2 <vListInsertEnd>
 800ef52:	e004      	b.n	800ef5e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef54:	4b0a      	ldr	r3, [pc, #40]	; (800ef80 <xTaskPriorityInherit+0xf4>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	e008      	b.n	800ef76 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <xTaskPriorityInherit+0xf4>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d201      	bcs.n	800ef76 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef72:	2301      	movs	r3, #1
 800ef74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef76:	68fb      	ldr	r3, [r7, #12]
	}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	2000042c 	.word	0x2000042c
 800ef84:	20000430 	.word	0x20000430
 800ef88:	20000534 	.word	0x20000534

0800ef8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d070      	beq.n	800f084 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800efa2:	4b3b      	ldr	r3, [pc, #236]	; (800f090 <xTaskPriorityDisinherit+0x104>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d00b      	beq.n	800efc4 <xTaskPriorityDisinherit+0x38>
 800efac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb0:	b672      	cpsid	i
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	b662      	cpsie	i
 800efc0:	60fb      	str	r3, [r7, #12]
 800efc2:	e7fe      	b.n	800efc2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10b      	bne.n	800efe4 <xTaskPriorityDisinherit+0x58>
 800efcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd0:	b672      	cpsid	i
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	b662      	cpsie	i
 800efe0:	60bb      	str	r3, [r7, #8]
 800efe2:	e7fe      	b.n	800efe2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efe8:	1e5a      	subs	r2, r3, #1
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d044      	beq.n	800f084 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800effe:	2b00      	cmp	r3, #0
 800f000:	d140      	bne.n	800f084 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	3304      	adds	r3, #4
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe f9b8 	bl	800d37c <uxListRemove>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d115      	bne.n	800f03e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f016:	491f      	ldr	r1, [pc, #124]	; (800f094 <xTaskPriorityDisinherit+0x108>)
 800f018:	4613      	mov	r3, r2
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	4413      	add	r3, r2
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	440b      	add	r3, r1
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10a      	bne.n	800f03e <xTaskPriorityDisinherit+0xb2>
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02c:	2201      	movs	r2, #1
 800f02e:	fa02 f303 	lsl.w	r3, r2, r3
 800f032:	43da      	mvns	r2, r3
 800f034:	4b18      	ldr	r3, [pc, #96]	; (800f098 <xTaskPriorityDisinherit+0x10c>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4013      	ands	r3, r2
 800f03a:	4a17      	ldr	r2, [pc, #92]	; (800f098 <xTaskPriorityDisinherit+0x10c>)
 800f03c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f04a:	f1c3 0207 	rsb	r2, r3, #7
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	2201      	movs	r2, #1
 800f058:	409a      	lsls	r2, r3
 800f05a:	4b0f      	ldr	r3, [pc, #60]	; (800f098 <xTaskPriorityDisinherit+0x10c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4313      	orrs	r3, r2
 800f060:	4a0d      	ldr	r2, [pc, #52]	; (800f098 <xTaskPriorityDisinherit+0x10c>)
 800f062:	6013      	str	r3, [r2, #0]
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f068:	4613      	mov	r3, r2
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	4413      	add	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4a08      	ldr	r2, [pc, #32]	; (800f094 <xTaskPriorityDisinherit+0x108>)
 800f072:	441a      	add	r2, r3
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	3304      	adds	r3, #4
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7fe f921 	bl	800d2c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f084:	697b      	ldr	r3, [r7, #20]
	}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	2000042c 	.word	0x2000042c
 800f094:	20000430 	.word	0x20000430
 800f098:	20000534 	.word	0x20000534

0800f09c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 8085 	beq.w	800f1c0 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10b      	bne.n	800f0d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	b672      	cpsid	i
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	b662      	cpsie	i
 800f0d2:	60fb      	str	r3, [r7, #12]
 800f0d4:	e7fe      	b.n	800f0d4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d902      	bls.n	800f0e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	61fb      	str	r3, [r7, #28]
 800f0e4:	e002      	b.n	800f0ec <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	69fa      	ldr	r2, [r7, #28]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d064      	beq.n	800f1c0 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d15f      	bne.n	800f1c0 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f100:	4b31      	ldr	r3, [pc, #196]	; (800f1c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	69ba      	ldr	r2, [r7, #24]
 800f106:	429a      	cmp	r2, r3
 800f108:	d10b      	bne.n	800f122 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	b672      	cpsid	i
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	b662      	cpsie	i
 800f11e:	60bb      	str	r3, [r7, #8]
 800f120:	e7fe      	b.n	800f120 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f126:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	2b00      	cmp	r3, #0
 800f134:	db04      	blt.n	800f140 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	f1c3 0207 	rsb	r2, r3, #7
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	6959      	ldr	r1, [r3, #20]
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	4613      	mov	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4413      	add	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4a1f      	ldr	r2, [pc, #124]	; (800f1cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f150:	4413      	add	r3, r2
 800f152:	4299      	cmp	r1, r3
 800f154:	d134      	bne.n	800f1c0 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	3304      	adds	r3, #4
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fe f90e 	bl	800d37c <uxListRemove>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d115      	bne.n	800f192 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16a:	4918      	ldr	r1, [pc, #96]	; (800f1cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f16c:	4613      	mov	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	440b      	add	r3, r1
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f180:	2201      	movs	r2, #1
 800f182:	fa02 f303 	lsl.w	r3, r2, r3
 800f186:	43da      	mvns	r2, r3
 800f188:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4013      	ands	r3, r2
 800f18e:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f190:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f196:	2201      	movs	r2, #1
 800f198:	409a      	lsls	r2, r3
 800f19a:	4b0d      	ldr	r3, [pc, #52]	; (800f1d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	4a0b      	ldr	r2, [pc, #44]	; (800f1d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	4413      	add	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4a06      	ldr	r2, [pc, #24]	; (800f1cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f1b2:	441a      	add	r2, r3
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	f7fe f881 	bl	800d2c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1c0:	bf00      	nop
 800f1c2:	3720      	adds	r7, #32
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	2000042c 	.word	0x2000042c
 800f1cc:	20000430 	.word	0x20000430
 800f1d0:	20000534 	.word	0x20000534

0800f1d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f1d4:	b480      	push	{r7}
 800f1d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f1d8:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d004      	beq.n	800f1ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f1e0:	4b05      	ldr	r3, [pc, #20]	; (800f1f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1e6:	3201      	adds	r2, #1
 800f1e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f1ea:	4b03      	ldr	r3, [pc, #12]	; (800f1f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
	}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	2000042c 	.word	0x2000042c

0800f1fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f206:	4b29      	ldr	r3, [pc, #164]	; (800f2ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f20c:	4b28      	ldr	r3, [pc, #160]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3304      	adds	r3, #4
 800f212:	4618      	mov	r0, r3
 800f214:	f7fe f8b2 	bl	800d37c <uxListRemove>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10b      	bne.n	800f236 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f21e:	4b24      	ldr	r3, [pc, #144]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f224:	2201      	movs	r2, #1
 800f226:	fa02 f303 	lsl.w	r3, r2, r3
 800f22a:	43da      	mvns	r2, r3
 800f22c:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4013      	ands	r3, r2
 800f232:	4a20      	ldr	r2, [pc, #128]	; (800f2b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f234:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23c:	d10a      	bne.n	800f254 <prvAddCurrentTaskToDelayedList+0x58>
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f244:	4b1a      	ldr	r3, [pc, #104]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3304      	adds	r3, #4
 800f24a:	4619      	mov	r1, r3
 800f24c:	481a      	ldr	r0, [pc, #104]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f24e:	f7fe f838 	bl	800d2c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f252:	e026      	b.n	800f2a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4413      	add	r3, r2
 800f25a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f25c:	4b14      	ldr	r3, [pc, #80]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d209      	bcs.n	800f280 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f26c:	4b13      	ldr	r3, [pc, #76]	; (800f2bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	4b0f      	ldr	r3, [pc, #60]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	3304      	adds	r3, #4
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7fe f846 	bl	800d30a <vListInsert>
}
 800f27e:	e010      	b.n	800f2a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f280:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	3304      	adds	r3, #4
 800f28a:	4619      	mov	r1, r3
 800f28c:	4610      	mov	r0, r2
 800f28e:	f7fe f83c 	bl	800d30a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f292:	4b0c      	ldr	r3, [pc, #48]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d202      	bcs.n	800f2a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f29c:	4a09      	ldr	r2, [pc, #36]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	6013      	str	r3, [r2, #0]
}
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	20000530 	.word	0x20000530
 800f2b0:	2000042c 	.word	0x2000042c
 800f2b4:	20000534 	.word	0x20000534
 800f2b8:	20000518 	.word	0x20000518
 800f2bc:	200004e8 	.word	0x200004e8
 800f2c0:	200004e4 	.word	0x200004e4
 800f2c4:	2000054c 	.word	0x2000054c

0800f2c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	3b04      	subs	r3, #4
 800f2d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3b04      	subs	r3, #4
 800f2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	f023 0201 	bic.w	r2, r3, #1
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3b04      	subs	r3, #4
 800f2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2f8:	4a0c      	ldr	r2, [pc, #48]	; (800f32c <pxPortInitialiseStack+0x64>)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3b14      	subs	r3, #20
 800f302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	3b04      	subs	r3, #4
 800f30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f06f 0202 	mvn.w	r2, #2
 800f316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	3b20      	subs	r3, #32
 800f31c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f31e:	68fb      	ldr	r3, [r7, #12]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	0800f331 	.word	0x0800f331

0800f330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f33a:	4b13      	ldr	r3, [pc, #76]	; (800f388 <prvTaskExitError+0x58>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f342:	d00b      	beq.n	800f35c <prvTaskExitError+0x2c>
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	b672      	cpsid	i
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	b662      	cpsie	i
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	e7fe      	b.n	800f35a <prvTaskExitError+0x2a>
 800f35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f360:	b672      	cpsid	i
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	b662      	cpsie	i
 800f370:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f372:	bf00      	nop
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0fc      	beq.n	800f374 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f37a:	bf00      	nop
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20000024 	.word	0x20000024
 800f38c:	00000000 	.word	0x00000000

0800f390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <pxCurrentTCBConst2>)
 800f392:	6819      	ldr	r1, [r3, #0]
 800f394:	6808      	ldr	r0, [r1, #0]
 800f396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	f380 8809 	msr	PSP, r0
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f04f 0000 	mov.w	r0, #0
 800f3a6:	f380 8811 	msr	BASEPRI, r0
 800f3aa:	4770      	bx	lr
 800f3ac:	f3af 8000 	nop.w

0800f3b0 <pxCurrentTCBConst2>:
 800f3b0:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop

0800f3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f3b8:	4808      	ldr	r0, [pc, #32]	; (800f3dc <prvPortStartFirstTask+0x24>)
 800f3ba:	6800      	ldr	r0, [r0, #0]
 800f3bc:	6800      	ldr	r0, [r0, #0]
 800f3be:	f380 8808 	msr	MSP, r0
 800f3c2:	f04f 0000 	mov.w	r0, #0
 800f3c6:	f380 8814 	msr	CONTROL, r0
 800f3ca:	b662      	cpsie	i
 800f3cc:	b661      	cpsie	f
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	df00      	svc	0
 800f3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3da:	bf00      	nop
 800f3dc:	e000ed08 	.word	0xe000ed08

0800f3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f3e6:	4b36      	ldr	r3, [pc, #216]	; (800f4c0 <xPortStartScheduler+0xe0>)
 800f3e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	22ff      	movs	r2, #255	; 0xff
 800f3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	b2db      	uxtb	r3, r3
 800f404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f408:	b2da      	uxtb	r2, r3
 800f40a:	4b2e      	ldr	r3, [pc, #184]	; (800f4c4 <xPortStartScheduler+0xe4>)
 800f40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f40e:	4b2e      	ldr	r3, [pc, #184]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f410:	2207      	movs	r2, #7
 800f412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f414:	e009      	b.n	800f42a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f416:	4b2c      	ldr	r3, [pc, #176]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	4a2a      	ldr	r2, [pc, #168]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	b2db      	uxtb	r3, r3
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	b2db      	uxtb	r3, r3
 800f428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f42a:	78fb      	ldrb	r3, [r7, #3]
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f432:	2b80      	cmp	r3, #128	; 0x80
 800f434:	d0ef      	beq.n	800f416 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f436:	4b24      	ldr	r3, [pc, #144]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f1c3 0307 	rsb	r3, r3, #7
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d00b      	beq.n	800f45a <xPortStartScheduler+0x7a>
 800f442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f446:	b672      	cpsid	i
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	b662      	cpsie	i
 800f456:	60bb      	str	r3, [r7, #8]
 800f458:	e7fe      	b.n	800f458 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f45a:	4b1b      	ldr	r3, [pc, #108]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	021b      	lsls	r3, r3, #8
 800f460:	4a19      	ldr	r2, [pc, #100]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f462:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f464:	4b18      	ldr	r3, [pc, #96]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f46c:	4a16      	ldr	r2, [pc, #88]	; (800f4c8 <xPortStartScheduler+0xe8>)
 800f46e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	b2da      	uxtb	r2, r3
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f478:	4b14      	ldr	r3, [pc, #80]	; (800f4cc <xPortStartScheduler+0xec>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a13      	ldr	r2, [pc, #76]	; (800f4cc <xPortStartScheduler+0xec>)
 800f47e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f482:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f484:	4b11      	ldr	r3, [pc, #68]	; (800f4cc <xPortStartScheduler+0xec>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a10      	ldr	r2, [pc, #64]	; (800f4cc <xPortStartScheduler+0xec>)
 800f48a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f48e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f490:	f000 f8d4 	bl	800f63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f494:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <xPortStartScheduler+0xf0>)
 800f496:	2200      	movs	r2, #0
 800f498:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f49a:	f000 f8f3 	bl	800f684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f49e:	4b0d      	ldr	r3, [pc, #52]	; (800f4d4 <xPortStartScheduler+0xf4>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a0c      	ldr	r2, [pc, #48]	; (800f4d4 <xPortStartScheduler+0xf4>)
 800f4a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f4a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f4aa:	f7ff ff85 	bl	800f3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f4ae:	f7ff fa67 	bl	800e980 <vTaskSwitchContext>
	prvTaskExitError();
 800f4b2:	f7ff ff3d 	bl	800f330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	e000e400 	.word	0xe000e400
 800f4c4:	20000558 	.word	0x20000558
 800f4c8:	2000055c 	.word	0x2000055c
 800f4cc:	e000ed20 	.word	0xe000ed20
 800f4d0:	20000024 	.word	0x20000024
 800f4d4:	e000ef34 	.word	0xe000ef34

0800f4d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e2:	b672      	cpsid	i
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	b662      	cpsie	i
 800f4f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f4f4:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <vPortEnterCritical+0x5c>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	4a0e      	ldr	r2, [pc, #56]	; (800f534 <vPortEnterCritical+0x5c>)
 800f4fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f4fe:	4b0d      	ldr	r3, [pc, #52]	; (800f534 <vPortEnterCritical+0x5c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b01      	cmp	r3, #1
 800f504:	d110      	bne.n	800f528 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f506:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <vPortEnterCritical+0x60>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <vPortEnterCritical+0x50>
 800f510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f514:	b672      	cpsid	i
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	b662      	cpsie	i
 800f524:	603b      	str	r3, [r7, #0]
 800f526:	e7fe      	b.n	800f526 <vPortEnterCritical+0x4e>
	}
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	20000024 	.word	0x20000024
 800f538:	e000ed04 	.word	0xe000ed04

0800f53c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <vPortExitCritical+0x50>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10b      	bne.n	800f562 <vPortExitCritical+0x26>
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	b672      	cpsid	i
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	b662      	cpsie	i
 800f55e:	607b      	str	r3, [r7, #4]
 800f560:	e7fe      	b.n	800f560 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f562:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <vPortExitCritical+0x50>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3b01      	subs	r3, #1
 800f568:	4a08      	ldr	r2, [pc, #32]	; (800f58c <vPortExitCritical+0x50>)
 800f56a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f56c:	4b07      	ldr	r3, [pc, #28]	; (800f58c <vPortExitCritical+0x50>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d104      	bne.n	800f57e <vPortExitCritical+0x42>
 800f574:	2300      	movs	r3, #0
 800f576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f57e:	bf00      	nop
 800f580:	370c      	adds	r7, #12
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	20000024 	.word	0x20000024

0800f590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f590:	f3ef 8009 	mrs	r0, PSP
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	4b15      	ldr	r3, [pc, #84]	; (800f5f0 <pxCurrentTCBConst>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	f01e 0f10 	tst.w	lr, #16
 800f5a0:	bf08      	it	eq
 800f5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5aa:	6010      	str	r0, [r2, #0]
 800f5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f5b4:	b672      	cpsid	i
 800f5b6:	f380 8811 	msr	BASEPRI, r0
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	b662      	cpsie	i
 800f5c4:	f7ff f9dc 	bl	800e980 <vTaskSwitchContext>
 800f5c8:	f04f 0000 	mov.w	r0, #0
 800f5cc:	f380 8811 	msr	BASEPRI, r0
 800f5d0:	bc09      	pop	{r0, r3}
 800f5d2:	6819      	ldr	r1, [r3, #0]
 800f5d4:	6808      	ldr	r0, [r1, #0]
 800f5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5da:	f01e 0f10 	tst.w	lr, #16
 800f5de:	bf08      	it	eq
 800f5e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f5e4:	f380 8809 	msr	PSP, r0
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop

0800f5f0 <pxCurrentTCBConst>:
 800f5f0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop

0800f5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	b672      	cpsid	i
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	b662      	cpsie	i
 800f612:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f614:	f7ff f8fa 	bl	800e80c <xTaskIncrementTick>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f61e:	4b06      	ldr	r3, [pc, #24]	; (800f638 <SysTick_Handler+0x40>)
 800f620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	2300      	movs	r3, #0
 800f628:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f630:	bf00      	nop
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f63c:	b480      	push	{r7}
 800f63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f640:	4b0b      	ldr	r3, [pc, #44]	; (800f670 <vPortSetupTimerInterrupt+0x34>)
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f646:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <vPortSetupTimerInterrupt+0x38>)
 800f648:	2200      	movs	r2, #0
 800f64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f64c:	4b0a      	ldr	r3, [pc, #40]	; (800f678 <vPortSetupTimerInterrupt+0x3c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a0a      	ldr	r2, [pc, #40]	; (800f67c <vPortSetupTimerInterrupt+0x40>)
 800f652:	fba2 2303 	umull	r2, r3, r2, r3
 800f656:	099b      	lsrs	r3, r3, #6
 800f658:	4a09      	ldr	r2, [pc, #36]	; (800f680 <vPortSetupTimerInterrupt+0x44>)
 800f65a:	3b01      	subs	r3, #1
 800f65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f65e:	4b04      	ldr	r3, [pc, #16]	; (800f670 <vPortSetupTimerInterrupt+0x34>)
 800f660:	2207      	movs	r2, #7
 800f662:	601a      	str	r2, [r3, #0]
}
 800f664:	bf00      	nop
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	e000e010 	.word	0xe000e010
 800f674:	e000e018 	.word	0xe000e018
 800f678:	20000018 	.word	0x20000018
 800f67c:	10624dd3 	.word	0x10624dd3
 800f680:	e000e014 	.word	0xe000e014

0800f684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f694 <vPortEnableVFP+0x10>
 800f688:	6801      	ldr	r1, [r0, #0]
 800f68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f68e:	6001      	str	r1, [r0, #0]
 800f690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f692:	bf00      	nop
 800f694:	e000ed88 	.word	0xe000ed88

0800f698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f69e:	f3ef 8305 	mrs	r3, IPSR
 800f6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2b0f      	cmp	r3, #15
 800f6a8:	d915      	bls.n	800f6d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6aa:	4a18      	ldr	r2, [pc, #96]	; (800f70c <vPortValidateInterruptPriority+0x74>)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6b4:	4b16      	ldr	r3, [pc, #88]	; (800f710 <vPortValidateInterruptPriority+0x78>)
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	7afa      	ldrb	r2, [r7, #11]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d20b      	bcs.n	800f6d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c2:	b672      	cpsid	i
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	b662      	cpsie	i
 800f6d2:	607b      	str	r3, [r7, #4]
 800f6d4:	e7fe      	b.n	800f6d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <vPortValidateInterruptPriority+0x7c>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f6de:	4b0e      	ldr	r3, [pc, #56]	; (800f718 <vPortValidateInterruptPriority+0x80>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d90b      	bls.n	800f6fe <vPortValidateInterruptPriority+0x66>
 800f6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ea:	b672      	cpsid	i
 800f6ec:	f383 8811 	msr	BASEPRI, r3
 800f6f0:	f3bf 8f6f 	isb	sy
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	b662      	cpsie	i
 800f6fa:	603b      	str	r3, [r7, #0]
 800f6fc:	e7fe      	b.n	800f6fc <vPortValidateInterruptPriority+0x64>
	}
 800f6fe:	bf00      	nop
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	e000e3f0 	.word	0xe000e3f0
 800f710:	20000558 	.word	0x20000558
 800f714:	e000ed0c 	.word	0xe000ed0c
 800f718:	2000055c 	.word	0x2000055c

0800f71c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b08a      	sub	sp, #40	; 0x28
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f724:	2300      	movs	r3, #0
 800f726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f728:	f7fe ffa2 	bl	800e670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f72c:	4b5c      	ldr	r3, [pc, #368]	; (800f8a0 <pvPortMalloc+0x184>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f734:	f000 f91a 	bl	800f96c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f738:	4b5a      	ldr	r3, [pc, #360]	; (800f8a4 <pvPortMalloc+0x188>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4013      	ands	r3, r2
 800f740:	2b00      	cmp	r3, #0
 800f742:	f040 8090 	bne.w	800f866 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d01e      	beq.n	800f78a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f74c:	2208      	movs	r2, #8
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4413      	add	r3, r2
 800f752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f003 0307 	and.w	r3, r3, #7
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d015      	beq.n	800f78a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f023 0307 	bic.w	r3, r3, #7
 800f764:	3308      	adds	r3, #8
 800f766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00b      	beq.n	800f78a <pvPortMalloc+0x6e>
 800f772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f776:	b672      	cpsid	i
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	b662      	cpsie	i
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e7fe      	b.n	800f788 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d06a      	beq.n	800f866 <pvPortMalloc+0x14a>
 800f790:	4b45      	ldr	r3, [pc, #276]	; (800f8a8 <pvPortMalloc+0x18c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	429a      	cmp	r2, r3
 800f798:	d865      	bhi.n	800f866 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f79a:	4b44      	ldr	r3, [pc, #272]	; (800f8ac <pvPortMalloc+0x190>)
 800f79c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f79e:	4b43      	ldr	r3, [pc, #268]	; (800f8ac <pvPortMalloc+0x190>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7a4:	e004      	b.n	800f7b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d903      	bls.n	800f7c2 <pvPortMalloc+0xa6>
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1f1      	bne.n	800f7a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f7c2:	4b37      	ldr	r3, [pc, #220]	; (800f8a0 <pvPortMalloc+0x184>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d04c      	beq.n	800f866 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2208      	movs	r2, #8
 800f7d2:	4413      	add	r3, r2
 800f7d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	1ad2      	subs	r2, r2, r3
 800f7e6:	2308      	movs	r3, #8
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d920      	bls.n	800f830 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	f003 0307 	and.w	r3, r3, #7
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00b      	beq.n	800f818 <pvPortMalloc+0xfc>
 800f800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f804:	b672      	cpsid	i
 800f806:	f383 8811 	msr	BASEPRI, r3
 800f80a:	f3bf 8f6f 	isb	sy
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	b662      	cpsie	i
 800f814:	613b      	str	r3, [r7, #16]
 800f816:	e7fe      	b.n	800f816 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	1ad2      	subs	r2, r2, r3
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f82a:	69b8      	ldr	r0, [r7, #24]
 800f82c:	f000 f900 	bl	800fa30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f830:	4b1d      	ldr	r3, [pc, #116]	; (800f8a8 <pvPortMalloc+0x18c>)
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	4a1b      	ldr	r2, [pc, #108]	; (800f8a8 <pvPortMalloc+0x18c>)
 800f83c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f83e:	4b1a      	ldr	r3, [pc, #104]	; (800f8a8 <pvPortMalloc+0x18c>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b1b      	ldr	r3, [pc, #108]	; (800f8b0 <pvPortMalloc+0x194>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d203      	bcs.n	800f852 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f84a:	4b17      	ldr	r3, [pc, #92]	; (800f8a8 <pvPortMalloc+0x18c>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4a18      	ldr	r2, [pc, #96]	; (800f8b0 <pvPortMalloc+0x194>)
 800f850:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	4b13      	ldr	r3, [pc, #76]	; (800f8a4 <pvPortMalloc+0x188>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	431a      	orrs	r2, r3
 800f85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	2200      	movs	r2, #0
 800f864:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f866:	f7fe ff11 	bl	800e68c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d101      	bne.n	800f874 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f870:	f7f1 f944 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	f003 0307 	and.w	r3, r3, #7
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00b      	beq.n	800f896 <pvPortMalloc+0x17a>
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	b672      	cpsid	i
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	b662      	cpsie	i
 800f892:	60fb      	str	r3, [r7, #12]
 800f894:	e7fe      	b.n	800f894 <pvPortMalloc+0x178>
	return pvReturn;
 800f896:	69fb      	ldr	r3, [r7, #28]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3728      	adds	r7, #40	; 0x28
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20008568 	.word	0x20008568
 800f8a4:	20008574 	.word	0x20008574
 800f8a8:	2000856c 	.word	0x2000856c
 800f8ac:	20008560 	.word	0x20008560
 800f8b0:	20008570 	.word	0x20008570

0800f8b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b086      	sub	sp, #24
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d04a      	beq.n	800f95c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f8c6:	2308      	movs	r3, #8
 800f8c8:	425b      	negs	r3, r3
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	685a      	ldr	r2, [r3, #4]
 800f8d8:	4b22      	ldr	r3, [pc, #136]	; (800f964 <vPortFree+0xb0>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4013      	ands	r3, r2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10b      	bne.n	800f8fa <vPortFree+0x46>
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	b672      	cpsid	i
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	b662      	cpsie	i
 800f8f6:	60fb      	str	r3, [r7, #12]
 800f8f8:	e7fe      	b.n	800f8f8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00b      	beq.n	800f91a <vPortFree+0x66>
 800f902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f906:	b672      	cpsid	i
 800f908:	f383 8811 	msr	BASEPRI, r3
 800f90c:	f3bf 8f6f 	isb	sy
 800f910:	f3bf 8f4f 	dsb	sy
 800f914:	b662      	cpsie	i
 800f916:	60bb      	str	r3, [r7, #8]
 800f918:	e7fe      	b.n	800f918 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	4b11      	ldr	r3, [pc, #68]	; (800f964 <vPortFree+0xb0>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4013      	ands	r3, r2
 800f924:	2b00      	cmp	r3, #0
 800f926:	d019      	beq.n	800f95c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d115      	bne.n	800f95c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <vPortFree+0xb0>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	43db      	mvns	r3, r3
 800f93a:	401a      	ands	r2, r3
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f940:	f7fe fe96 	bl	800e670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	685a      	ldr	r2, [r3, #4]
 800f948:	4b07      	ldr	r3, [pc, #28]	; (800f968 <vPortFree+0xb4>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4413      	add	r3, r2
 800f94e:	4a06      	ldr	r2, [pc, #24]	; (800f968 <vPortFree+0xb4>)
 800f950:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f952:	6938      	ldr	r0, [r7, #16]
 800f954:	f000 f86c 	bl	800fa30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f958:	f7fe fe98 	bl	800e68c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f95c:	bf00      	nop
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	20008574 	.word	0x20008574
 800f968:	2000856c 	.word	0x2000856c

0800f96c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f96c:	b480      	push	{r7}
 800f96e:	b085      	sub	sp, #20
 800f970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f976:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f978:	4b27      	ldr	r3, [pc, #156]	; (800fa18 <prvHeapInit+0xac>)
 800f97a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f003 0307 	and.w	r3, r3, #7
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00c      	beq.n	800f9a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3307      	adds	r3, #7
 800f98a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f023 0307 	bic.w	r3, r3, #7
 800f992:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	4a1f      	ldr	r2, [pc, #124]	; (800fa18 <prvHeapInit+0xac>)
 800f99c:	4413      	add	r3, r2
 800f99e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f9a4:	4a1d      	ldr	r2, [pc, #116]	; (800fa1c <prvHeapInit+0xb0>)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f9aa:	4b1c      	ldr	r3, [pc, #112]	; (800fa1c <prvHeapInit+0xb0>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f9b8:	2208      	movs	r2, #8
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f023 0307 	bic.w	r3, r3, #7
 800f9c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	4a15      	ldr	r2, [pc, #84]	; (800fa20 <prvHeapInit+0xb4>)
 800f9cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f9ce:	4b14      	ldr	r3, [pc, #80]	; (800fa20 <prvHeapInit+0xb4>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f9d6:	4b12      	ldr	r3, [pc, #72]	; (800fa20 <prvHeapInit+0xb4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	1ad2      	subs	r2, r2, r3
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9ec:	4b0c      	ldr	r3, [pc, #48]	; (800fa20 <prvHeapInit+0xb4>)
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	4a0a      	ldr	r2, [pc, #40]	; (800fa24 <prvHeapInit+0xb8>)
 800f9fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	4a09      	ldr	r2, [pc, #36]	; (800fa28 <prvHeapInit+0xbc>)
 800fa02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa04:	4b09      	ldr	r3, [pc, #36]	; (800fa2c <prvHeapInit+0xc0>)
 800fa06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fa0a:	601a      	str	r2, [r3, #0]
}
 800fa0c:	bf00      	nop
 800fa0e:	3714      	adds	r7, #20
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	20000560 	.word	0x20000560
 800fa1c:	20008560 	.word	0x20008560
 800fa20:	20008568 	.word	0x20008568
 800fa24:	20008570 	.word	0x20008570
 800fa28:	2000856c 	.word	0x2000856c
 800fa2c:	20008574 	.word	0x20008574

0800fa30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa38:	4b28      	ldr	r3, [pc, #160]	; (800fadc <prvInsertBlockIntoFreeList+0xac>)
 800fa3a:	60fb      	str	r3, [r7, #12]
 800fa3c:	e002      	b.n	800fa44 <prvInsertBlockIntoFreeList+0x14>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d8f7      	bhi.n	800fa3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	4413      	add	r3, r2
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d108      	bne.n	800fa72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	685a      	ldr	r2, [r3, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	441a      	add	r2, r3
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	68ba      	ldr	r2, [r7, #8]
 800fa7c:	441a      	add	r2, r3
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d118      	bne.n	800fab8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	4b15      	ldr	r3, [pc, #84]	; (800fae0 <prvInsertBlockIntoFreeList+0xb0>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d00d      	beq.n	800faae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	685a      	ldr	r2, [r3, #4]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	441a      	add	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	601a      	str	r2, [r3, #0]
 800faac:	e008      	b.n	800fac0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800faae:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <prvInsertBlockIntoFreeList+0xb0>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	e003      	b.n	800fac0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d002      	beq.n	800face <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800face:	bf00      	nop
 800fad0:	3714      	adds	r7, #20
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	20008560 	.word	0x20008560
 800fae0:	20008568 	.word	0x20008568

0800fae4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08c      	sub	sp, #48	; 0x30
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a51      	ldr	r2, [pc, #324]	; (800fc34 <I2Cx_MspInit+0x150>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d14d      	bne.n	800fb90 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800faf4:	4b50      	ldr	r3, [pc, #320]	; (800fc38 <I2Cx_MspInit+0x154>)
 800faf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faf8:	4a4f      	ldr	r2, [pc, #316]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fafe:	6313      	str	r3, [r2, #48]	; 0x30
 800fb00:	4b4d      	ldr	r3, [pc, #308]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb08:	61bb      	str	r3, [r7, #24]
 800fb0a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800fb0c:	2380      	movs	r3, #128	; 0x80
 800fb0e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fb10:	2312      	movs	r3, #18
 800fb12:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fb14:	2300      	movs	r3, #0
 800fb16:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fb18:	2302      	movs	r3, #2
 800fb1a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800fb1c:	2304      	movs	r3, #4
 800fb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fb20:	f107 031c 	add.w	r3, r7, #28
 800fb24:	4619      	mov	r1, r3
 800fb26:	4845      	ldr	r0, [pc, #276]	; (800fc3c <I2Cx_MspInit+0x158>)
 800fb28:	f7f5 ff7c 	bl	8005a24 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800fb2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fb32:	f107 031c 	add.w	r3, r7, #28
 800fb36:	4619      	mov	r1, r3
 800fb38:	4840      	ldr	r0, [pc, #256]	; (800fc3c <I2Cx_MspInit+0x158>)
 800fb3a:	f7f5 ff73 	bl	8005a24 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800fb3e:	4b3e      	ldr	r3, [pc, #248]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb42:	4a3d      	ldr	r2, [pc, #244]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fb48:	6413      	str	r3, [r2, #64]	; 0x40
 800fb4a:	4b3b      	ldr	r3, [pc, #236]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800fb56:	4b38      	ldr	r3, [pc, #224]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	4a37      	ldr	r2, [pc, #220]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fb60:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800fb62:	4b35      	ldr	r3, [pc, #212]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	4a34      	ldr	r2, [pc, #208]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb6c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800fb6e:	2200      	movs	r2, #0
 800fb70:	210f      	movs	r1, #15
 800fb72:	2048      	movs	r0, #72	; 0x48
 800fb74:	f7f5 f928 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800fb78:	2048      	movs	r0, #72	; 0x48
 800fb7a:	f7f5 f941 	bl	8004e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800fb7e:	2200      	movs	r2, #0
 800fb80:	210f      	movs	r1, #15
 800fb82:	2049      	movs	r0, #73	; 0x49
 800fb84:	f7f5 f920 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800fb88:	2049      	movs	r0, #73	; 0x49
 800fb8a:	f7f5 f939 	bl	8004e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800fb8e:	e04d      	b.n	800fc2c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800fb90:	4b29      	ldr	r3, [pc, #164]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb94:	4a28      	ldr	r2, [pc, #160]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb96:	f043 0302 	orr.w	r3, r3, #2
 800fb9a:	6313      	str	r3, [r2, #48]	; 0x30
 800fb9c:	4b26      	ldr	r3, [pc, #152]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba0:	f003 0302 	and.w	r3, r3, #2
 800fba4:	613b      	str	r3, [r7, #16]
 800fba6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800fba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fbae:	2312      	movs	r3, #18
 800fbb0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800fbba:	2304      	movs	r3, #4
 800fbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fbbe:	f107 031c 	add.w	r3, r7, #28
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	481e      	ldr	r0, [pc, #120]	; (800fc40 <I2Cx_MspInit+0x15c>)
 800fbc6:	f7f5 ff2d 	bl	8005a24 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800fbca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fbd0:	f107 031c 	add.w	r3, r7, #28
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	481a      	ldr	r0, [pc, #104]	; (800fc40 <I2Cx_MspInit+0x15c>)
 800fbd8:	f7f5 ff24 	bl	8005a24 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800fbdc:	4b16      	ldr	r3, [pc, #88]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbe0:	4a15      	ldr	r2, [pc, #84]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fbe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fbe6:	6413      	str	r3, [r2, #64]	; 0x40
 800fbe8:	4b13      	ldr	r3, [pc, #76]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbf0:	60fb      	str	r3, [r7, #12]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800fbf4:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	4a0f      	ldr	r2, [pc, #60]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fbfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fbfe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800fc00:	4b0d      	ldr	r3, [pc, #52]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	4a0c      	ldr	r2, [pc, #48]	; (800fc38 <I2Cx_MspInit+0x154>)
 800fc06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc0a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	210f      	movs	r1, #15
 800fc10:	201f      	movs	r0, #31
 800fc12:	f7f5 f8d9 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800fc16:	201f      	movs	r0, #31
 800fc18:	f7f5 f8f2 	bl	8004e00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	210f      	movs	r1, #15
 800fc20:	2020      	movs	r0, #32
 800fc22:	f7f5 f8d1 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800fc26:	2020      	movs	r0, #32
 800fc28:	f7f5 f8ea 	bl	8004e00 <HAL_NVIC_EnableIRQ>
}
 800fc2c:	bf00      	nop
 800fc2e:	3730      	adds	r7, #48	; 0x30
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	20008578 	.word	0x20008578
 800fc38:	40023800 	.word	0x40023800
 800fc3c:	40021c00 	.word	0x40021c00
 800fc40:	40020400 	.word	0x40020400

0800fc44 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7f6 fbc7 	bl	80063e0 <HAL_I2C_GetState>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d125      	bne.n	800fca4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4a14      	ldr	r2, [pc, #80]	; (800fcac <I2Cx_Init+0x68>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d103      	bne.n	800fc68 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a13      	ldr	r2, [pc, #76]	; (800fcb0 <I2Cx_Init+0x6c>)
 800fc64:	601a      	str	r2, [r3, #0]
 800fc66:	e002      	b.n	800fc6e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a12      	ldr	r2, [pc, #72]	; (800fcb4 <I2Cx_Init+0x70>)
 800fc6c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a11      	ldr	r2, [pc, #68]	; (800fcb8 <I2Cx_Init+0x74>)
 800fc72:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7ff ff23 	bl	800fae4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7f6 f89c 	bl	8005ddc <HAL_I2C_Init>
  }
}
 800fca4:	bf00      	nop
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	20008578 	.word	0x20008578
 800fcb0:	40005c00 	.word	0x40005c00
 800fcb4:	40005400 	.word	0x40005400
 800fcb8:	40912732 	.word	0x40912732

0800fcbc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08a      	sub	sp, #40	; 0x28
 800fcc0:	af04      	add	r7, sp, #16
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	461a      	mov	r2, r3
 800fcca:	4603      	mov	r3, r0
 800fccc:	72fb      	strb	r3, [r7, #11]
 800fcce:	460b      	mov	r3, r1
 800fcd0:	813b      	strh	r3, [r7, #8]
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fcda:	7afb      	ldrb	r3, [r7, #11]
 800fcdc:	b299      	uxth	r1, r3
 800fcde:	88f8      	ldrh	r0, [r7, #6]
 800fce0:	893a      	ldrh	r2, [r7, #8]
 800fce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fce6:	9302      	str	r3, [sp, #8]
 800fce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	68f8      	ldr	r0, [r7, #12]
 800fcf4:	f7f6 fa5a 	bl	80061ac <HAL_I2C_Mem_Read>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fcfc:	7dfb      	ldrb	r3, [r7, #23]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800fd02:	7afb      	ldrb	r3, [r7, #11]
 800fd04:	4619      	mov	r1, r3
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 f832 	bl	800fd70 <I2Cx_Error>
  }
  return status;    
 800fd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3718      	adds	r7, #24
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b08a      	sub	sp, #40	; 0x28
 800fd1a:	af04      	add	r7, sp, #16
 800fd1c:	60f8      	str	r0, [r7, #12]
 800fd1e:	4608      	mov	r0, r1
 800fd20:	4611      	mov	r1, r2
 800fd22:	461a      	mov	r2, r3
 800fd24:	4603      	mov	r3, r0
 800fd26:	72fb      	strb	r3, [r7, #11]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	813b      	strh	r3, [r7, #8]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fd30:	2300      	movs	r3, #0
 800fd32:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fd34:	7afb      	ldrb	r3, [r7, #11]
 800fd36:	b299      	uxth	r1, r3
 800fd38:	88f8      	ldrh	r0, [r7, #6]
 800fd3a:	893a      	ldrh	r2, [r7, #8]
 800fd3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd40:	9302      	str	r3, [sp, #8]
 800fd42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7f6 f919 	bl	8005f84 <HAL_I2C_Mem_Write>
 800fd52:	4603      	mov	r3, r0
 800fd54:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fd56:	7dfb      	ldrb	r3, [r7, #23]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d004      	beq.n	800fd66 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fd5c:	7afb      	ldrb	r3, [r7, #11]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f000 f805 	bl	800fd70 <I2Cx_Error>
  }
  return status;
 800fd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3718      	adds	r7, #24
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7f6 f8bd 	bl	8005efc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff ff5e 	bl	800fc44 <I2Cx_Init>
}
 800fd88:	bf00      	nop
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fd94:	4802      	ldr	r0, [pc, #8]	; (800fda0 <TS_IO_Init+0x10>)
 800fd96:	f7ff ff55 	bl	800fc44 <I2Cx_Init>
}
 800fd9a:	bf00      	nop
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	20008578 	.word	0x20008578

0800fda4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af02      	add	r7, sp, #8
 800fdaa:	4603      	mov	r3, r0
 800fdac:	71fb      	strb	r3, [r7, #7]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	71bb      	strb	r3, [r7, #6]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fdb6:	79bb      	ldrb	r3, [r7, #6]
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	79f9      	ldrb	r1, [r7, #7]
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	9301      	str	r3, [sp, #4]
 800fdc0:	1d7b      	adds	r3, r7, #5
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	4803      	ldr	r0, [pc, #12]	; (800fdd4 <TS_IO_Write+0x30>)
 800fdc8:	f7ff ffa5 	bl	800fd16 <I2Cx_WriteMultiple>
}
 800fdcc:	bf00      	nop
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20008578 	.word	0x20008578

0800fdd8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	4603      	mov	r3, r0
 800fde0:	460a      	mov	r2, r1
 800fde2:	71fb      	strb	r3, [r7, #7]
 800fde4:	4613      	mov	r3, r2
 800fde6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fdec:	79bb      	ldrb	r3, [r7, #6]
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	79f9      	ldrb	r1, [r7, #7]
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	9301      	str	r3, [sp, #4]
 800fdf6:	f107 030f 	add.w	r3, r7, #15
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	4804      	ldr	r0, [pc, #16]	; (800fe10 <TS_IO_Read+0x38>)
 800fe00:	f7ff ff5c 	bl	800fcbc <I2Cx_ReadMultiple>

  return read_value;
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20008578 	.word	0x20008578

0800fe14 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7f3 fecd 	bl	8003bbc <HAL_Delay>
}
 800fe22:	bf00      	nop
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	460a      	mov	r2, r1
 800fe36:	80fb      	strh	r3, [r7, #6]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fe40:	4a14      	ldr	r2, [pc, #80]	; (800fe94 <BSP_TS_Init+0x68>)
 800fe42:	88fb      	ldrh	r3, [r7, #6]
 800fe44:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fe46:	4a14      	ldr	r2, [pc, #80]	; (800fe98 <BSP_TS_Init+0x6c>)
 800fe48:	88bb      	ldrh	r3, [r7, #4]
 800fe4a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fe4c:	4b13      	ldr	r3, [pc, #76]	; (800fe9c <BSP_TS_Init+0x70>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2070      	movs	r0, #112	; 0x70
 800fe52:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fe54:	4b11      	ldr	r3, [pc, #68]	; (800fe9c <BSP_TS_Init+0x70>)
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	2070      	movs	r0, #112	; 0x70
 800fe5a:	4798      	blx	r3
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b51      	cmp	r3, #81	; 0x51
 800fe60:	d111      	bne.n	800fe86 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fe62:	4b0f      	ldr	r3, [pc, #60]	; (800fea0 <BSP_TS_Init+0x74>)
 800fe64:	4a0d      	ldr	r2, [pc, #52]	; (800fe9c <BSP_TS_Init+0x70>)
 800fe66:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fe68:	4b0e      	ldr	r3, [pc, #56]	; (800fea4 <BSP_TS_Init+0x78>)
 800fe6a:	2270      	movs	r2, #112	; 0x70
 800fe6c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fe6e:	4b0e      	ldr	r3, [pc, #56]	; (800fea8 <BSP_TS_Init+0x7c>)
 800fe70:	2208      	movs	r2, #8
 800fe72:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fe74:	4b0a      	ldr	r3, [pc, #40]	; (800fea0 <BSP_TS_Init+0x74>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	4a0a      	ldr	r2, [pc, #40]	; (800fea4 <BSP_TS_Init+0x78>)
 800fe7c:	7812      	ldrb	r2, [r2, #0]
 800fe7e:	b292      	uxth	r2, r2
 800fe80:	4610      	mov	r0, r2
 800fe82:	4798      	blx	r3
 800fe84:	e001      	b.n	800fe8a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fe86:	2303      	movs	r3, #3
 800fe88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	200085c8 	.word	0x200085c8
 800fe98:	200085ca 	.word	0x200085ca
 800fe9c:	20000060 	.word	0x20000060
 800fea0:	200085c4 	.word	0x200085c4
 800fea4:	200085cd 	.word	0x200085cd
 800fea8:	200085cc 	.word	0x200085cc

0800feac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800feac:	b590      	push	{r4, r7, lr}
 800feae:	b097      	sub	sp, #92	; 0x5c
 800feb0:	af02      	add	r7, sp, #8
 800feb2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fec6:	4b97      	ldr	r3, [pc, #604]	; (8010124 <BSP_TS_GetState+0x278>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	4a96      	ldr	r2, [pc, #600]	; (8010128 <BSP_TS_GetState+0x27c>)
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	b292      	uxth	r2, r2
 800fed2:	4610      	mov	r0, r2
 800fed4:	4798      	blx	r3
 800fed6:	4603      	mov	r3, r0
 800fed8:	461a      	mov	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 81a8 	beq.w	8010238 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fee8:	2300      	movs	r3, #0
 800feea:	64bb      	str	r3, [r7, #72]	; 0x48
 800feec:	e197      	b.n	801021e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800feee:	4b8d      	ldr	r3, [pc, #564]	; (8010124 <BSP_TS_GetState+0x278>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	695b      	ldr	r3, [r3, #20]
 800fef4:	4a8c      	ldr	r2, [pc, #560]	; (8010128 <BSP_TS_GetState+0x27c>)
 800fef6:	7812      	ldrb	r2, [r2, #0]
 800fef8:	b290      	uxth	r0, r2
 800fefa:	f107 0120 	add.w	r1, r7, #32
 800fefe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff00:	0052      	lsls	r2, r2, #1
 800ff02:	188c      	adds	r4, r1, r2
 800ff04:	f107 0114 	add.w	r1, r7, #20
 800ff08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff0a:	0052      	lsls	r2, r2, #1
 800ff0c:	440a      	add	r2, r1
 800ff0e:	4621      	mov	r1, r4
 800ff10:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800ff12:	4b86      	ldr	r3, [pc, #536]	; (801012c <BSP_TS_GetState+0x280>)
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d11b      	bne.n	800ff52 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800ff1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff22:	4413      	add	r3, r2
 800ff24:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800ff28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff30:	440b      	add	r3, r1
 800ff32:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800ff36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff38:	005b      	lsls	r3, r3, #1
 800ff3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff3e:	4413      	add	r3, r2
 800ff40:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800ff44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff4c:	440b      	add	r3, r1
 800ff4e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800ff52:	4b76      	ldr	r3, [pc, #472]	; (801012c <BSP_TS_GetState+0x280>)
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 0302 	and.w	r3, r3, #2
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d010      	beq.n	800ff80 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800ff5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff66:	4413      	add	r3, r2
 800ff68:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800ff6c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff74:	005b      	lsls	r3, r3, #1
 800ff76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff7a:	440b      	add	r3, r1
 800ff7c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800ff80:	4b6a      	ldr	r3, [pc, #424]	; (801012c <BSP_TS_GetState+0x280>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d010      	beq.n	800ffae <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800ff8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff8e:	005b      	lsls	r3, r3, #1
 800ff90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff94:	4413      	add	r3, r2
 800ff96:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800ff9a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffa2:	005b      	lsls	r3, r3, #1
 800ffa4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ffa8:	440b      	add	r3, r1
 800ffaa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800ffae:	4b5f      	ldr	r3, [pc, #380]	; (801012c <BSP_TS_GetState+0x280>)
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	f003 0308 	and.w	r3, r3, #8
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d01b      	beq.n	800fff2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800ffba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ffc2:	4413      	add	r3, r2
 800ffc4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800ffc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffca:	005b      	lsls	r3, r3, #1
 800ffcc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ffd0:	440b      	add	r3, r1
 800ffd2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800ffd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ffde:	4413      	add	r3, r2
 800ffe0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800ffe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe6:	005b      	lsls	r3, r3, #1
 800ffe8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ffec:	440b      	add	r3, r1
 800ffee:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fffa:	4413      	add	r3, r2
 800fffc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8010000:	4619      	mov	r1, r3
 8010002:	4a4b      	ldr	r2, [pc, #300]	; (8010130 <BSP_TS_GetState+0x284>)
 8010004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801000a:	4299      	cmp	r1, r3
 801000c:	d90e      	bls.n	801002c <BSP_TS_GetState+0x180>
 801000e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010016:	4413      	add	r3, r2
 8010018:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801001c:	4944      	ldr	r1, [pc, #272]	; (8010130 <BSP_TS_GetState+0x284>)
 801001e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010024:	b29b      	uxth	r3, r3
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	b29b      	uxth	r3, r3
 801002a:	e00d      	b.n	8010048 <BSP_TS_GetState+0x19c>
 801002c:	4a40      	ldr	r2, [pc, #256]	; (8010130 <BSP_TS_GetState+0x284>)
 801002e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010034:	b29a      	uxth	r2, r3
 8010036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801003e:	440b      	add	r3, r1
 8010040:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	b29b      	uxth	r3, r3
 8010048:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801004c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010054:	4413      	add	r3, r2
 8010056:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801005a:	4619      	mov	r1, r3
 801005c:	4a35      	ldr	r2, [pc, #212]	; (8010134 <BSP_TS_GetState+0x288>)
 801005e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010064:	4299      	cmp	r1, r3
 8010066:	d90e      	bls.n	8010086 <BSP_TS_GetState+0x1da>
 8010068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010070:	4413      	add	r3, r2
 8010072:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8010076:	492f      	ldr	r1, [pc, #188]	; (8010134 <BSP_TS_GetState+0x288>)
 8010078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801007a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801007e:	b29b      	uxth	r3, r3
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	b29b      	uxth	r3, r3
 8010084:	e00d      	b.n	80100a2 <BSP_TS_GetState+0x1f6>
 8010086:	4a2b      	ldr	r2, [pc, #172]	; (8010134 <BSP_TS_GetState+0x288>)
 8010088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801008a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801008e:	b29a      	uxth	r2, r3
 8010090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010098:	440b      	add	r3, r1
 801009a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80100a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80100aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80100ae:	4413      	add	r3, r2
 80100b0:	2b05      	cmp	r3, #5
 80100b2:	dd17      	ble.n	80100e4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80100b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80100bc:	4413      	add	r3, r2
 80100be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80100c2:	4619      	mov	r1, r3
 80100c4:	4a1a      	ldr	r2, [pc, #104]	; (8010130 <BSP_TS_GetState+0x284>)
 80100c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80100cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80100d4:	4413      	add	r3, r2
 80100d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80100da:	4619      	mov	r1, r3
 80100dc:	4a15      	ldr	r2, [pc, #84]	; (8010134 <BSP_TS_GetState+0x288>)
 80100de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80100e4:	4b10      	ldr	r3, [pc, #64]	; (8010128 <BSP_TS_GetState+0x27c>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2b70      	cmp	r3, #112	; 0x70
 80100ea:	d125      	bne.n	8010138 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80100ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80100f4:	4413      	add	r3, r2
 80100f6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80100fa:	687a      	ldr	r2, [r7, #4]
 80100fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	4413      	add	r3, r2
 8010102:	460a      	mov	r2, r1
 8010104:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8010106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801010e:	4413      	add	r3, r2
 8010110:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010118:	3304      	adds	r3, #4
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	4413      	add	r3, r2
 801011e:	460a      	mov	r2, r1
 8010120:	809a      	strh	r2, [r3, #4]
 8010122:	e02c      	b.n	801017e <BSP_TS_GetState+0x2d2>
 8010124:	200085c4 	.word	0x200085c4
 8010128:	200085cd 	.word	0x200085cd
 801012c:	200085cc 	.word	0x200085cc
 8010130:	200085d0 	.word	0x200085d0
 8010134:	200085e4 	.word	0x200085e4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8010138:	4b42      	ldr	r3, [pc, #264]	; (8010244 <BSP_TS_GetState+0x398>)
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	4619      	mov	r1, r3
 801013e:	4a42      	ldr	r2, [pc, #264]	; (8010248 <BSP_TS_GetState+0x39c>)
 8010140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010146:	fb03 f301 	mul.w	r3, r3, r1
 801014a:	0b1b      	lsrs	r3, r3, #12
 801014c:	b299      	uxth	r1, r3
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	4413      	add	r3, r2
 8010156:	460a      	mov	r2, r1
 8010158:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801015a:	4b3c      	ldr	r3, [pc, #240]	; (801024c <BSP_TS_GetState+0x3a0>)
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	4619      	mov	r1, r3
 8010160:	4a3b      	ldr	r2, [pc, #236]	; (8010250 <BSP_TS_GetState+0x3a4>)
 8010162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010168:	fb03 f301 	mul.w	r3, r3, r1
 801016c:	0b1b      	lsrs	r3, r3, #12
 801016e:	b299      	uxth	r1, r3
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010174:	3304      	adds	r3, #4
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	4413      	add	r3, r2
 801017a:	460a      	mov	r2, r1
 801017c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 801017e:	4b35      	ldr	r3, [pc, #212]	; (8010254 <BSP_TS_GetState+0x3a8>)
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	b298      	uxth	r0, r3
 8010184:	f107 010c 	add.w	r1, r7, #12
 8010188:	f107 0210 	add.w	r2, r7, #16
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	460b      	mov	r3, r1
 8010194:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010196:	f00a fc09 	bl	801a9ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	b2d9      	uxtb	r1, r3
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101a2:	4413      	add	r3, r2
 80101a4:	3316      	adds	r3, #22
 80101a6:	460a      	mov	r2, r1
 80101a8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	b2d9      	uxtb	r1, r3
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101b2:	4413      	add	r3, r2
 80101b4:	3320      	adds	r3, #32
 80101b6:	460a      	mov	r2, r1
 80101b8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	2b03      	cmp	r3, #3
 80101be:	d827      	bhi.n	8010210 <BSP_TS_GetState+0x364>
 80101c0:	a201      	add	r2, pc, #4	; (adr r2, 80101c8 <BSP_TS_GetState+0x31c>)
 80101c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c6:	bf00      	nop
 80101c8:	080101d9 	.word	0x080101d9
 80101cc:	080101e7 	.word	0x080101e7
 80101d0:	080101f5 	.word	0x080101f5
 80101d4:	08010203 	.word	0x08010203
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101dc:	4413      	add	r3, r2
 80101de:	331b      	adds	r3, #27
 80101e0:	2201      	movs	r2, #1
 80101e2:	701a      	strb	r2, [r3, #0]
          break;
 80101e4:	e018      	b.n	8010218 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ea:	4413      	add	r3, r2
 80101ec:	331b      	adds	r3, #27
 80101ee:	2202      	movs	r2, #2
 80101f0:	701a      	strb	r2, [r3, #0]
          break;
 80101f2:	e011      	b.n	8010218 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101f8:	4413      	add	r3, r2
 80101fa:	331b      	adds	r3, #27
 80101fc:	2203      	movs	r2, #3
 80101fe:	701a      	strb	r2, [r3, #0]
          break;
 8010200:	e00a      	b.n	8010218 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010206:	4413      	add	r3, r2
 8010208:	331b      	adds	r3, #27
 801020a:	2200      	movs	r2, #0
 801020c:	701a      	strb	r2, [r3, #0]
          break;
 801020e:	e003      	b.n	8010218 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8010210:	2301      	movs	r3, #1
 8010212:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8010216:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8010218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801021a:	3301      	adds	r3, #1
 801021c:	64bb      	str	r3, [r7, #72]	; 0x48
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	461a      	mov	r2, r3
 8010224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010226:	4293      	cmp	r3, r2
 8010228:	f4ff ae61 	bcc.w	800feee <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f813 	bl	8010258 <BSP_TS_Get_GestureId>
 8010232:	4603      	mov	r3, r0
 8010234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8010238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801023c:	4618      	mov	r0, r3
 801023e:	3754      	adds	r7, #84	; 0x54
 8010240:	46bd      	mov	sp, r7
 8010242:	bd90      	pop	{r4, r7, pc}
 8010244:	200085c8 	.word	0x200085c8
 8010248:	200085d0 	.word	0x200085d0
 801024c:	200085ca 	.word	0x200085ca
 8010250:	200085e4 	.word	0x200085e4
 8010254:	200085cd 	.word	0x200085cd

08010258 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8010264:	2300      	movs	r3, #0
 8010266:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8010268:	4b1f      	ldr	r3, [pc, #124]	; (80102e8 <BSP_TS_Get_GestureId+0x90>)
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	b29b      	uxth	r3, r3
 801026e:	f107 0208 	add.w	r2, r7, #8
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f00a fb80 	bl	801a97a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b18      	cmp	r3, #24
 801027e:	d01b      	beq.n	80102b8 <BSP_TS_Get_GestureId+0x60>
 8010280:	2b18      	cmp	r3, #24
 8010282:	d806      	bhi.n	8010292 <BSP_TS_Get_GestureId+0x3a>
 8010284:	2b10      	cmp	r3, #16
 8010286:	d00f      	beq.n	80102a8 <BSP_TS_Get_GestureId+0x50>
 8010288:	2b14      	cmp	r3, #20
 801028a:	d011      	beq.n	80102b0 <BSP_TS_Get_GestureId+0x58>
 801028c:	2b00      	cmp	r3, #0
 801028e:	d007      	beq.n	80102a0 <BSP_TS_Get_GestureId+0x48>
 8010290:	e022      	b.n	80102d8 <BSP_TS_Get_GestureId+0x80>
 8010292:	2b40      	cmp	r3, #64	; 0x40
 8010294:	d018      	beq.n	80102c8 <BSP_TS_Get_GestureId+0x70>
 8010296:	2b49      	cmp	r3, #73	; 0x49
 8010298:	d01a      	beq.n	80102d0 <BSP_TS_Get_GestureId+0x78>
 801029a:	2b1c      	cmp	r3, #28
 801029c:	d010      	beq.n	80102c0 <BSP_TS_Get_GestureId+0x68>
 801029e:	e01b      	b.n	80102d8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102a6:	e01a      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102ae:	e016      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2202      	movs	r2, #2
 80102b4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102b6:	e012      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2203      	movs	r2, #3
 80102bc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102be:	e00e      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2204      	movs	r2, #4
 80102c4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102c6:	e00a      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2205      	movs	r2, #5
 80102cc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102ce:	e006      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2206      	movs	r2, #6
 80102d4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80102d6:	e002      	b.n	80102de <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80102d8:	2301      	movs	r3, #1
 80102da:	73fb      	strb	r3, [r7, #15]
      break;
 80102dc:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80102de:	7bfb      	ldrb	r3, [r7, #15]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	200085cd 	.word	0x200085cd

080102ec <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80102f0:	f009 fd68 	bl	8019dc4 <touchgfx_init>
}
 80102f4:	bf00      	nop
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80102fc:	f009 fd8c 	bl	8019e18 <touchgfx_taskEntry>
}
 8010300:	bf00      	nop
 8010302:	bd80      	pop	{r7, pc}

08010304 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
    {
 801030c:	4a04      	ldr	r2, [pc, #16]	; (8010320 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	601a      	str	r2, [r3, #0]
    }
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4618      	mov	r0, r3
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr
 8010320:	0802c6b8 	.word	0x0802c6b8

08010324 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    }
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff ffe9 	bl	8010304 <_ZN8touchgfx12FontProviderD1Ev>
 8010332:	2104      	movs	r1, #4
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f01a fc2a 	bl	802ab8e <_ZdlPvj>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4618      	mov	r0, r3
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010350:	887b      	ldrh	r3, [r7, #2]
 8010352:	2b07      	cmp	r3, #7
 8010354:	d83a      	bhi.n	80103cc <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8010356:	a201      	add	r2, pc, #4	; (adr r2, 801035c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8010358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035c:	0801037d 	.word	0x0801037d
 8010360:	08010387 	.word	0x08010387
 8010364:	08010391 	.word	0x08010391
 8010368:	0801039b 	.word	0x0801039b
 801036c:	080103a5 	.word	0x080103a5
 8010370:	080103af 	.word	0x080103af
 8010374:	080103b9 	.word	0x080103b9
 8010378:	080103c3 	.word	0x080103c3
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801037c:	f006 fdca 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 8010380:	4603      	mov	r3, r0
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	e023      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8010386:	f006 fdc5 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 801038a:	4603      	mov	r3, r0
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	e01e      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010390:	f006 fdc0 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 8010394:	4603      	mov	r3, r0
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	e019      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801039a:	f006 fdbb 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 801039e:	4603      	mov	r3, r0
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	e014      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80103a4:	f006 fdb6 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 80103a8:	4603      	mov	r3, r0
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	e00f      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80103ae:	f006 fdb1 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 80103b2:	4603      	mov	r3, r0
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	e00a      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80103b8:	f006 fdac 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 80103bc:	4603      	mov	r3, r0
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	e005      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80103c2:	f006 fda7 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 80103c6:	4603      	mov	r3, r0
 80103c8:	699b      	ldr	r3, [r3, #24]
 80103ca:	e000      	b.n	80103ce <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 80103cc:	2300      	movs	r3, #0
    }
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop

080103d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	4a05      	ldr	r2, [pc, #20]	; (80103f8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7ff ff8b 	bl	8010304 <_ZN8touchgfx12FontProviderD1Ev>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	0802c6a4 	.word	0x0802c6a4

080103fc <_ZN23ApplicationFontProviderD0Ev>:
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff ffe7 	bl	80103d8 <_ZN23ApplicationFontProviderD1Ev>
 801040a:	2104      	movs	r1, #4
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f01a fbbe 	bl	802ab8e <_ZdlPvj>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	4a04      	ldr	r2, [pc, #16]	; (8010438 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	0802f27c 	.word	0x0802f27c

0801043c <_ZN8touchgfx4FontD0Ev>:
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff ffe9 	bl	801041c <_ZN8touchgfx4FontD1Ev>
 801044a:	2110      	movs	r1, #16
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f01a fb9e 	bl	802ab8e <_ZdlPvj>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801045c:	b590      	push	{r4, r7, lr}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	460b      	mov	r3, r1
 8010466:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8010468:	2300      	movs	r3, #0
 801046a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	3308      	adds	r3, #8
 8010476:	681c      	ldr	r4, [r3, #0]
 8010478:	f107 030f 	add.w	r3, r7, #15
 801047c:	f107 0210 	add.w	r2, r7, #16
 8010480:	8879      	ldrh	r1, [r7, #2]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	47a0      	blx	r4
 8010486:	6178      	str	r0, [r7, #20]
        return glyph;
 8010488:	697b      	ldr	r3, [r7, #20]
    }
 801048a:	4618      	mov	r0, r3
 801048c:	371c      	adds	r7, #28
 801048e:	46bd      	mov	sp, r7
 8010490:	bd90      	pop	{r4, r7, pc}

08010492 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010492:	b480      	push	{r7}
 8010494:	b083      	sub	sp, #12
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	895b      	ldrh	r3, [r3, #10]
    }
 801049e:	4618      	mov	r0, r3
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	899b      	ldrh	r3, [r3, #12]
    }
 80104b6:	4618      	mov	r0, r3
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr

080104c2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80104c2:	b480      	push	{r7}
 80104c4:	b083      	sub	sp, #12
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	889b      	ldrh	r3, [r3, #4]
    }
 80104ce:	4618      	mov	r0, r3
 80104d0:	370c      	adds	r7, #12
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr

080104da <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 80104da:	b480      	push	{r7}
 80104dc:	b083      	sub	sp, #12
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	889a      	ldrh	r2, [r3, #4]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	799b      	ldrb	r3, [r3, #6]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4413      	add	r3, r2
 80104ee:	b29b      	uxth	r3, r3
    }
 80104f0:	4618      	mov	r0, r3
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	79db      	ldrb	r3, [r3, #7]
 8010508:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801050c:	b2db      	uxtb	r3, r3
    }
 801050e:	4618      	mov	r0, r3
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801051a:	b480      	push	{r7}
 801051c:	b083      	sub	sp, #12
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	79db      	ldrb	r3, [r3, #7]
 8010526:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801052a:	b2db      	uxtb	r3, r3
    }
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	4a05      	ldr	r2, [pc, #20]	; (8010558 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff ff67 	bl	801041c <_ZN8touchgfx4FontD1Ev>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	0802f334 	.word	0x0802f334

0801055c <_ZN8touchgfx9ConstFontD0Ev>:
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7ff ffe7 	bl	8010538 <_ZN8touchgfx9ConstFontD1Ev>
 801056a:	2118      	movs	r1, #24
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f01a fb0e 	bl	802ab8e <_ZdlPvj>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	4a05      	ldr	r2, [pc, #20]	; (801059c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff ffd3 	bl	8010538 <_ZN8touchgfx9ConstFontD1Ev>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	0802c6fc 	.word	0x0802c6fc

080105a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff ffe7 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 80105ae:	2124      	movs	r1, #36	; 0x24
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f01a faec 	bl	802ab8e <_ZdlPvj>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4618      	mov	r0, r3
 80105ba:	3708      	adds	r7, #8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f82d 	bl	8010628 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80105ce:	4b08      	ldr	r3, [pc, #32]	; (80105f0 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 80105d4:	6819      	ldr	r1, [r3, #0]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	440b      	add	r3, r1
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	4413      	add	r3, r2
 80105e4:	681b      	ldr	r3, [r3, #0]
    }
 80105e6:	4618      	mov	r0, r3
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	2000c088 	.word	0x2000c088
 80105f4:	2000c080 	.word	0x2000c080

080105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f811 	bl	8010628 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8010606:	4b07      	ldr	r3, [pc, #28]	; (8010624 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010618:	b2db      	uxtb	r3, r3
    }
 801061a:	4618      	mov	r0, r3
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	2000c080 	.word	0x2000c080

08010628 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010630:	4b0c      	ldr	r3, [pc, #48]	; (8010664 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d105      	bne.n	8010644 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8010638:	4b0b      	ldr	r3, [pc, #44]	; (8010668 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 801063a:	4a0c      	ldr	r2, [pc, #48]	; (801066c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 801063c:	21de      	movs	r1, #222	; 0xde
 801063e:	480c      	ldr	r0, [pc, #48]	; (8010670 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010640:	f01a fad0 	bl	802abe4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	881a      	ldrh	r2, [r3, #0]
 8010648:	4b0a      	ldr	r3, [pc, #40]	; (8010674 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801064a:	881b      	ldrh	r3, [r3, #0]
 801064c:	429a      	cmp	r2, r3
 801064e:	d305      	bcc.n	801065c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010650:	4b09      	ldr	r3, [pc, #36]	; (8010678 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010652:	4a06      	ldr	r2, [pc, #24]	; (801066c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010654:	21df      	movs	r1, #223	; 0xdf
 8010656:	4806      	ldr	r0, [pc, #24]	; (8010670 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010658:	f01a fac4 	bl	802abe4 <__assert_func>
    }
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	2000c080 	.word	0x2000c080
 8010668:	0802bc98 	.word	0x0802bc98
 801066c:	0802c6c4 	.word	0x0802c6c4
 8010670:	0802bcdc 	.word	0x0802bcdc
 8010674:	2000c084 	.word	0x2000c084
 8010678:	0802bd20 	.word	0x0802bd20

0801067c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	7b5b      	ldrb	r3, [r3, #13]
 8010688:	021b      	lsls	r3, r3, #8
 801068a:	b21b      	sxth	r3, r3
 801068c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010690:	b21a      	sxth	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7adb      	ldrb	r3, [r3, #11]
 8010696:	b21b      	sxth	r3, r3
 8010698:	4313      	orrs	r3, r2
 801069a:	b21b      	sxth	r3, r3
 801069c:	b29b      	uxth	r3, r3
    }
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6a1b      	ldr	r3, [r3, #32]
    }
 80106b6:	4618      	mov	r0, r3
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
	...

080106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08c      	sub	sp, #48	; 0x30
 80106c8:	af08      	add	r7, sp, #32
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	4611      	mov	r1, r2
 80106d0:	461a      	mov	r2, r3
 80106d2:	460b      	mov	r3, r1
 80106d4:	80fb      	strh	r3, [r7, #6]
 80106d6:	4613      	mov	r3, r2
 80106d8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	88b9      	ldrh	r1, [r7, #4]
 80106de:	88fa      	ldrh	r2, [r7, #6]
 80106e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80106e2:	9306      	str	r3, [sp, #24]
 80106e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80106e6:	9305      	str	r3, [sp, #20]
 80106e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106ec:	9304      	str	r3, [sp, #16]
 80106ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106f2:	9303      	str	r3, [sp, #12]
 80106f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106f8:	9302      	str	r3, [sp, #8]
 80106fa:	7f3b      	ldrb	r3, [r7, #28]
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	7e3b      	ldrb	r3, [r7, #24]
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	460b      	mov	r3, r1
 8010704:	68b9      	ldr	r1, [r7, #8]
 8010706:	f00e ff27 	bl	801f558 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801070a:	4a08      	ldr	r2, [pc, #32]	; (801072c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010714:	619a      	str	r2, [r3, #24]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801071a:	61da      	str	r2, [r3, #28]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010720:	621a      	str	r2, [r3, #32]
{
}
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	0802c6fc 	.word	0x0802c6fc

08010730 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010730:	b480      	push	{r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	889b      	ldrh	r3, [r3, #4]
 8010744:	0adb      	lsrs	r3, r3, #11
 8010746:	b29b      	uxth	r3, r3
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	4413      	add	r3, r2
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4413      	add	r3, r2
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b086      	sub	sp, #24
 8010766:	af00      	add	r7, sp, #0
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	460b      	mov	r3, r1
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	7b1b      	ldrb	r3, [r3, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801077e:	2300      	movs	r3, #0
 8010780:	e023      	b.n	80107ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff ff7a 	bl	801067c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8010788:	4603      	mov	r3, r0
 801078a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801078c:	8abb      	ldrh	r3, [r7, #20]
 801078e:	82fb      	strh	r3, [r7, #22]
 8010790:	8afa      	ldrh	r2, [r7, #22]
 8010792:	8abb      	ldrh	r3, [r7, #20]
 8010794:	6879      	ldr	r1, [r7, #4]
 8010796:	7b09      	ldrb	r1, [r1, #12]
 8010798:	440b      	add	r3, r1
 801079a:	429a      	cmp	r2, r3
 801079c:	da14      	bge.n	80107c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	69da      	ldr	r2, [r3, #28]
 80107a2:	8afb      	ldrh	r3, [r7, #22]
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	881b      	ldrh	r3, [r3, #0]
 80107aa:	897a      	ldrh	r2, [r7, #10]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d107      	bne.n	80107c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	69da      	ldr	r2, [r3, #28]
 80107b4:	8afb      	ldrh	r3, [r7, #22]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80107be:	e004      	b.n	80107ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80107c0:	8afb      	ldrh	r3, [r7, #22]
 80107c2:	3301      	adds	r3, #1
 80107c4:	82fb      	strh	r3, [r7, #22]
 80107c6:	e7e3      	b.n	8010790 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
	...

080107d4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80107d4:	b580      	push	{r7, lr}
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	4801      	ldr	r0, [pc, #4]	; (80107e0 <__tcf_0+0xc>)
 80107da:	f7ff fecf 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	200085f8 	.word	0x200085f8

080107e4 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b08a      	sub	sp, #40	; 0x28
 80107e8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80107ea:	4b15      	ldr	r3, [pc, #84]	; (8010840 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f003 0301 	and.w	r3, r3, #1
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d11f      	bne.n	8010836 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 80107f6:	2300      	movs	r3, #0
 80107f8:	9309      	str	r3, [sp, #36]	; 0x24
 80107fa:	2300      	movs	r3, #0
 80107fc:	9308      	str	r3, [sp, #32]
 80107fe:	233f      	movs	r3, #63	; 0x3f
 8010800:	9307      	str	r3, [sp, #28]
 8010802:	4b10      	ldr	r3, [pc, #64]	; (8010844 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 8010804:	9306      	str	r3, [sp, #24]
 8010806:	4b10      	ldr	r3, [pc, #64]	; (8010848 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 8010808:	9305      	str	r3, [sp, #20]
 801080a:	2301      	movs	r3, #1
 801080c:	9304      	str	r3, [sp, #16]
 801080e:	2300      	movs	r3, #0
 8010810:	9303      	str	r3, [sp, #12]
 8010812:	2301      	movs	r3, #1
 8010814:	9302      	str	r3, [sp, #8]
 8010816:	2304      	movs	r3, #4
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	2300      	movs	r3, #0
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	230a      	movs	r3, #10
 8010820:	2204      	movs	r2, #4
 8010822:	490a      	ldr	r1, [pc, #40]	; (801084c <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 8010824:	480a      	ldr	r0, [pc, #40]	; (8010850 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 8010826:	f7ff ff4d 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801082a:	4b05      	ldr	r3, [pc, #20]	; (8010840 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 801082c:	2201      	movs	r2, #1
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	4808      	ldr	r0, [pc, #32]	; (8010854 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 8010832:	f01a f9f5 	bl	802ac20 <atexit>
    return Asap_Bold_10_4bpp;
 8010836:	4b06      	ldr	r3, [pc, #24]	; (8010850 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 8010838:	4618      	mov	r0, r3
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	2000861c 	.word	0x2000861c
 8010844:	08034bb4 	.word	0x08034bb4
 8010848:	0802c748 	.word	0x0802c748
 801084c:	08034bec 	.word	0x08034bec
 8010850:	200085f8 	.word	0x200085f8
 8010854:	080107d5 	.word	0x080107d5

08010858 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010858:	b580      	push	{r7, lr}
 801085a:	af00      	add	r7, sp, #0
 801085c:	4801      	ldr	r0, [pc, #4]	; (8010864 <__tcf_0+0xc>)
 801085e:	f7ff fe8d 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010862:	bd80      	pop	{r7, pc}
 8010864:	20008620 	.word	0x20008620

08010868 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	; 0x28
 801086c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801086e:	4b15      	ldr	r3, [pc, #84]	; (80108c4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	d11f      	bne.n	80108ba <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801087a:	2300      	movs	r3, #0
 801087c:	9309      	str	r3, [sp, #36]	; 0x24
 801087e:	2300      	movs	r3, #0
 8010880:	9308      	str	r3, [sp, #32]
 8010882:	233f      	movs	r3, #63	; 0x3f
 8010884:	9307      	str	r3, [sp, #28]
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 8010888:	9306      	str	r3, [sp, #24]
 801088a:	4b10      	ldr	r3, [pc, #64]	; (80108cc <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 801088c:	9305      	str	r3, [sp, #20]
 801088e:	2301      	movs	r3, #1
 8010890:	9304      	str	r3, [sp, #16]
 8010892:	2300      	movs	r3, #0
 8010894:	9303      	str	r3, [sp, #12]
 8010896:	2301      	movs	r3, #1
 8010898:	9302      	str	r3, [sp, #8]
 801089a:	2304      	movs	r3, #4
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	2300      	movs	r3, #0
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	230c      	movs	r3, #12
 80108a4:	2209      	movs	r2, #9
 80108a6:	490a      	ldr	r1, [pc, #40]	; (80108d0 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 80108a8:	480a      	ldr	r0, [pc, #40]	; (80108d4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 80108aa:	f7ff ff0b 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80108ae:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	4808      	ldr	r0, [pc, #32]	; (80108d8 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 80108b6:	f01a f9b3 	bl	802ac20 <atexit>
    return Asap_Bold_12_4bpp;
 80108ba:	4b06      	ldr	r3, [pc, #24]	; (80108d4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 80108bc:	4618      	mov	r0, r3
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	20008644 	.word	0x20008644
 80108c8:	08034bb8 	.word	0x08034bb8
 80108cc:	0802c74c 	.word	0x0802c74c
 80108d0:	08034c24 	.word	0x08034c24
 80108d4:	20008620 	.word	0x20008620
 80108d8:	08010859 	.word	0x08010859

080108dc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 59, 18, 4, 4, 1, 1, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
 80108e0:	4801      	ldr	r0, [pc, #4]	; (80108e8 <__tcf_0+0xc>)
 80108e2:	f7ff fe4b 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	20008648 	.word	0x20008648

080108ec <_Z25getFont_Asap_Bold_18_4bppv>:
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08a      	sub	sp, #40	; 0x28
 80108f0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 59, 18, 4, 4, 1, 1, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f003 0301 	and.w	r3, r3, #1
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d11f      	bne.n	801093e <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 80108fe:	2300      	movs	r3, #0
 8010900:	9309      	str	r3, [sp, #36]	; 0x24
 8010902:	2300      	movs	r3, #0
 8010904:	9308      	str	r3, [sp, #32]
 8010906:	2300      	movs	r3, #0
 8010908:	9307      	str	r3, [sp, #28]
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 801090c:	9306      	str	r3, [sp, #24]
 801090e:	4b10      	ldr	r3, [pc, #64]	; (8010950 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	2301      	movs	r3, #1
 8010914:	9304      	str	r3, [sp, #16]
 8010916:	2301      	movs	r3, #1
 8010918:	9303      	str	r3, [sp, #12]
 801091a:	2301      	movs	r3, #1
 801091c:	9302      	str	r3, [sp, #8]
 801091e:	2304      	movs	r3, #4
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	2304      	movs	r3, #4
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	2312      	movs	r3, #18
 8010928:	223b      	movs	r2, #59	; 0x3b
 801092a:	490a      	ldr	r1, [pc, #40]	; (8010954 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 801092c:	480a      	ldr	r0, [pc, #40]	; (8010958 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 801092e:	f7ff fec9 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010932:	4b05      	ldr	r3, [pc, #20]	; (8010948 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010934:	2201      	movs	r2, #1
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	4808      	ldr	r0, [pc, #32]	; (801095c <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 801093a:	f01a f971 	bl	802ac20 <atexit>
    return Asap_Bold_18_4bpp;
 801093e:	4b06      	ldr	r3, [pc, #24]	; (8010958 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 8010940:	4618      	mov	r0, r3
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	2000866c 	.word	0x2000866c
 801094c:	08034bbc 	.word	0x08034bbc
 8010950:	0802c750 	.word	0x0802c750
 8010954:	08034ca4 	.word	0x08034ca4
 8010958:	20008648 	.word	0x20008648
 801095c:	080108dd 	.word	0x080108dd

08010960 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
 8010964:	4801      	ldr	r0, [pc, #4]	; (801096c <__tcf_0+0xc>)
 8010966:	f7ff fe09 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 801096a:	bd80      	pop	{r7, pc}
 801096c:	20008670 	.word	0x20008670

08010970 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b08a      	sub	sp, #40	; 0x28
 8010974:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010976:	4b15      	ldr	r3, [pc, #84]	; (80109cc <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d11f      	bne.n	80109c2 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 8010982:	2300      	movs	r3, #0
 8010984:	9309      	str	r3, [sp, #36]	; 0x24
 8010986:	2300      	movs	r3, #0
 8010988:	9308      	str	r3, [sp, #32]
 801098a:	233f      	movs	r3, #63	; 0x3f
 801098c:	9307      	str	r3, [sp, #28]
 801098e:	4b10      	ldr	r3, [pc, #64]	; (80109d0 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 8010990:	9306      	str	r3, [sp, #24]
 8010992:	4b10      	ldr	r3, [pc, #64]	; (80109d4 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 8010994:	9305      	str	r3, [sp, #20]
 8010996:	2301      	movs	r3, #1
 8010998:	9304      	str	r3, [sp, #16]
 801099a:	2300      	movs	r3, #0
 801099c:	9303      	str	r3, [sp, #12]
 801099e:	2301      	movs	r3, #1
 80109a0:	9302      	str	r3, [sp, #8]
 80109a2:	2304      	movs	r3, #4
 80109a4:	9301      	str	r3, [sp, #4]
 80109a6:	2300      	movs	r3, #0
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	2315      	movs	r3, #21
 80109ac:	220d      	movs	r2, #13
 80109ae:	490a      	ldr	r1, [pc, #40]	; (80109d8 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 80109b0:	480a      	ldr	r0, [pc, #40]	; (80109dc <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 80109b2:	f7ff fe87 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80109b6:	4b05      	ldr	r3, [pc, #20]	; (80109cc <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 80109b8:	2201      	movs	r2, #1
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	4808      	ldr	r0, [pc, #32]	; (80109e0 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 80109be:	f01a f92f 	bl	802ac20 <atexit>
    return Asap_Bold_21_4bpp;
 80109c2:	4b06      	ldr	r3, [pc, #24]	; (80109dc <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20008694 	.word	0x20008694
 80109d0:	08034bdc 	.word	0x08034bdc
 80109d4:	0802c754 	.word	0x0802c754
 80109d8:	08034fe0 	.word	0x08034fe0
 80109dc:	20008670 	.word	0x20008670
 80109e0:	08010961 	.word	0x08010961

080109e4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80109e4:	b580      	push	{r7, lr}
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	4801      	ldr	r0, [pc, #4]	; (80109f0 <__tcf_0+0xc>)
 80109ea:	f7ff fdc7 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	20008698 	.word	0x20008698

080109f4 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08a      	sub	sp, #40	; 0x28
 80109f8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80109fa:	4b15      	ldr	r3, [pc, #84]	; (8010a50 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d11f      	bne.n	8010a46 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 8010a06:	2300      	movs	r3, #0
 8010a08:	9309      	str	r3, [sp, #36]	; 0x24
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	9308      	str	r3, [sp, #32]
 8010a0e:	233f      	movs	r3, #63	; 0x3f
 8010a10:	9307      	str	r3, [sp, #28]
 8010a12:	4b10      	ldr	r3, [pc, #64]	; (8010a54 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 8010a14:	9306      	str	r3, [sp, #24]
 8010a16:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 8010a18:	9305      	str	r3, [sp, #20]
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	9304      	str	r3, [sp, #16]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9303      	str	r3, [sp, #12]
 8010a22:	2301      	movs	r3, #1
 8010a24:	9302      	str	r3, [sp, #8]
 8010a26:	2304      	movs	r3, #4
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	231e      	movs	r3, #30
 8010a30:	220c      	movs	r2, #12
 8010a32:	490a      	ldr	r1, [pc, #40]	; (8010a5c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 8010a34:	480a      	ldr	r0, [pc, #40]	; (8010a60 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 8010a36:	f7ff fe45 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010a3a:	4b05      	ldr	r3, [pc, #20]	; (8010a50 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	4808      	ldr	r0, [pc, #32]	; (8010a64 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 8010a42:	f01a f8ed 	bl	802ac20 <atexit>
    return Asap_Bold_30_4bpp;
 8010a46:	4b06      	ldr	r3, [pc, #24]	; (8010a60 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	200086bc 	.word	0x200086bc
 8010a54:	08034be0 	.word	0x08034be0
 8010a58:	0802c758 	.word	0x0802c758
 8010a5c:	08035098 	.word	0x08035098
 8010a60:	20008698 	.word	0x20008698
 8010a64:	080109e5 	.word	0x080109e5

08010a68 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	4801      	ldr	r0, [pc, #4]	; (8010a74 <__tcf_0+0xc>)
 8010a6e:	f7ff fd85 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	200086c0 	.word	0x200086c0

08010a78 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08a      	sub	sp, #40	; 0x28
 8010a7c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010a7e:	4b15      	ldr	r3, [pc, #84]	; (8010ad4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d11f      	bne.n	8010aca <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8e:	2300      	movs	r3, #0
 8010a90:	9308      	str	r3, [sp, #32]
 8010a92:	233f      	movs	r3, #63	; 0x3f
 8010a94:	9307      	str	r3, [sp, #28]
 8010a96:	4b10      	ldr	r3, [pc, #64]	; (8010ad8 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 8010a98:	9306      	str	r3, [sp, #24]
 8010a9a:	4b10      	ldr	r3, [pc, #64]	; (8010adc <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 8010a9c:	9305      	str	r3, [sp, #20]
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	9304      	str	r3, [sp, #16]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9303      	str	r3, [sp, #12]
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	9302      	str	r3, [sp, #8]
 8010aaa:	2304      	movs	r3, #4
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	2328      	movs	r3, #40	; 0x28
 8010ab4:	220d      	movs	r2, #13
 8010ab6:	490a      	ldr	r1, [pc, #40]	; (8010ae0 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 8010ab8:	480a      	ldr	r0, [pc, #40]	; (8010ae4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 8010aba:	f7ff fe03 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010abe:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	601a      	str	r2, [r3, #0]
 8010ac4:	4808      	ldr	r0, [pc, #32]	; (8010ae8 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 8010ac6:	f01a f8ab 	bl	802ac20 <atexit>
    return Asap_Bold_40_4bpp;
 8010aca:	4b06      	ldr	r3, [pc, #24]	; (8010ae4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	200086e4 	.word	0x200086e4
 8010ad8:	08034be4 	.word	0x08034be4
 8010adc:	0802c75c 	.word	0x0802c75c
 8010ae0:	08035140 	.word	0x08035140
 8010ae4:	200086c0 	.word	0x200086c0
 8010ae8:	08010a69 	.word	0x08010a69

08010aec <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010aec:	b580      	push	{r7, lr}
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	4801      	ldr	r0, [pc, #4]	; (8010af8 <__tcf_0+0xc>)
 8010af2:	f7ff fd43 	bl	801057c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	200086e8 	.word	0x200086e8

08010afc <_Z25getFont_Asap_Bold_60_4bppv>:
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b08a      	sub	sp, #40	; 0x28
 8010b00:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010b02:	4b15      	ldr	r3, [pc, #84]	; (8010b58 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f003 0301 	and.w	r3, r3, #1
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d11f      	bne.n	8010b4e <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	9309      	str	r3, [sp, #36]	; 0x24
 8010b12:	2300      	movs	r3, #0
 8010b14:	9308      	str	r3, [sp, #32]
 8010b16:	233f      	movs	r3, #63	; 0x3f
 8010b18:	9307      	str	r3, [sp, #28]
 8010b1a:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 8010b1c:	9306      	str	r3, [sp, #24]
 8010b1e:	4b10      	ldr	r3, [pc, #64]	; (8010b60 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 8010b20:	9305      	str	r3, [sp, #20]
 8010b22:	2300      	movs	r3, #0
 8010b24:	9304      	str	r3, [sp, #16]
 8010b26:	2300      	movs	r3, #0
 8010b28:	9303      	str	r3, [sp, #12]
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	9302      	str	r3, [sp, #8]
 8010b2e:	2304      	movs	r3, #4
 8010b30:	9301      	str	r3, [sp, #4]
 8010b32:	2300      	movs	r3, #0
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	233c      	movs	r3, #60	; 0x3c
 8010b38:	220d      	movs	r2, #13
 8010b3a:	490a      	ldr	r1, [pc, #40]	; (8010b64 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 8010b3c:	480a      	ldr	r0, [pc, #40]	; (8010b68 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 8010b3e:	f7ff fdc1 	bl	80106c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010b42:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010b44:	2201      	movs	r2, #1
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	4808      	ldr	r0, [pc, #32]	; (8010b6c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 8010b4a:	f01a f869 	bl	802ac20 <atexit>
    return Asap_Bold_60_4bpp;
 8010b4e:	4b06      	ldr	r3, [pc, #24]	; (8010b68 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	2000870c 	.word	0x2000870c
 8010b5c:	08034be8 	.word	0x08034be8
 8010b60:	0802c760 	.word	0x0802c760
 8010b64:	080351f8 	.word	0x080351f8
 8010b68:	200086e8 	.word	0x200086e8
 8010b6c:	08010aed 	.word	0x08010aed

08010b70 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
    {
    }
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	6039      	str	r1, [r7, #0]
    {
    }
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
    {
    }
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010bd6:	bf00      	nop
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr

08010be2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010be2:	b480      	push	{r7}
 8010be4:	b083      	sub	sp, #12
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
    {
    }
 8010bea:	bf00      	nop
 8010bec:	370c      	adds	r7, #12
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010bf6:	b480      	push	{r7}
 8010bf8:	b083      	sub	sp, #12
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
    {
    }
 8010bfe:	bf00      	nop
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
	...

08010c0c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
    {
 8010c14:	4a04      	ldr	r2, [pc, #16]	; (8010c28 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
    }
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr
 8010c28:	0802c8ec 	.word	0x0802c8ec

08010c2c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
    }
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff ffe9 	bl	8010c0c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010c3a:	2104      	movs	r1, #4
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f019 ffa6 	bl	802ab8e <_ZdlPvj>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010c54:	4a07      	ldr	r2, [pc, #28]	; (8010c74 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	605a      	str	r2, [r3, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	721a      	strb	r2, [r3, #8]
    {
    }
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	0802c8cc 	.word	0x0802c8cc

08010c78 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    {
 8010c80:	4a04      	ldr	r2, [pc, #16]	; (8010c94 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	601a      	str	r2, [r3, #0]
    }
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr
 8010c94:	0802c8cc 	.word	0x0802c8cc

08010c98 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    }
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff ffe9 	bl	8010c78 <_ZN8touchgfx10TransitionD1Ev>
 8010ca6:	210c      	movs	r1, #12
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f019 ff70 	bl	802ab8e <_ZdlPvj>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	bf00      	nop
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	683a      	ldr	r2, [r7, #0]
 8010d02:	605a      	str	r2, [r3, #4]
    }
 8010d04:	bf00      	nop
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
    {
 8010d30:	4a04      	ldr	r2, [pc, #16]	; (8010d44 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	601a      	str	r2, [r3, #0]
    }
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr
 8010d44:	0802c8b4 	.word	0x0802c8b4

08010d48 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
    }
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff ffe9 	bl	8010d28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010d56:	2104      	movs	r1, #4
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f019 ff18 	bl	802ab8e <_ZdlPvj>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	4608      	mov	r0, r1
 8010d72:	4611      	mov	r1, r2
 8010d74:	461a      	mov	r2, r3
 8010d76:	4603      	mov	r3, r0
 8010d78:	817b      	strh	r3, [r7, #10]
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	813b      	strh	r3, [r7, #8]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3334      	adds	r3, #52	; 0x34
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010d8e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	4798      	blx	r3
        setWidth(width);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3338      	adds	r3, #56	; 0x38
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010da2:	4611      	mov	r1, r2
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	4798      	blx	r3
        setHeight(height);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	333c      	adds	r3, #60	; 0x3c
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010db4:	4611      	mov	r1, r2
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	4798      	blx	r3
    }
 8010dba:	bf00      	nop
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010dc2:	b480      	push	{r7}
 8010dc4:	b083      	sub	sp, #12
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010dea:	4618      	mov	r0, r3
 8010dec:	370c      	adds	r7, #12
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
	...

08010df8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010df8:	b480      	push	{r7}
 8010dfa:	af00      	add	r7, sp, #0
    {
        return instance;
 8010dfc:	4b03      	ldr	r3, [pc, #12]	; (8010e0c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
    }
 8010e00:	4618      	mov	r0, r3
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	2000bff0 	.word	0x2000bff0

08010e10 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010e10:	b480      	push	{r7}
 8010e12:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010e14:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d008      	beq.n	8010e32 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010e20:	4b08      	ldr	r3, [pc, #32]	; (8010e44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d003      	beq.n	8010e32 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010e2a:	4b06      	ldr	r3, [pc, #24]	; (8010e44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e30:	e002      	b.n	8010e38 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010e32:	4b04      	ldr	r3, [pc, #16]	; (8010e44 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010e38:	4618      	mov	r0, r3
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	2000bff0 	.word	0x2000bff0

08010e48 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	4a05      	ldr	r2, [pc, #20]	; (8010e68 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7ff fed7 	bl	8010c0c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	0802f194 	.word	0x0802f194

08010e6c <_ZN8touchgfx11ApplicationD0Ev>:
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7ff ffe7 	bl	8010e48 <_ZN8touchgfx11ApplicationD1Ev>
 8010e7a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f019 fe85 	bl	802ab8e <_ZdlPvj>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
	...

08010e90 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f00d fe96 	bl	801ebcc <_ZN8touchgfx11ApplicationC1Ev>
 8010ea0:	4a09      	ldr	r2, [pc, #36]	; (8010ec8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	4a04      	ldr	r2, [pc, #16]	; (8010ecc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010eba:	6013      	str	r3, [r2, #0]
    }
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3708      	adds	r7, #8
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	0802c878 	.word	0x0802c878
 8010ecc:	2000c07c 	.word	0x2000c07c

08010ed0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	4a05      	ldr	r2, [pc, #20]	; (8010ef0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	601a      	str	r2, [r3, #0]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff ffb1 	bl	8010e48 <_ZN8touchgfx11ApplicationD1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	0802c878 	.word	0x0802c878

08010ef4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff ffe7 	bl	8010ed0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010f02:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f019 fe41 	bl	802ab8e <_ZdlPvj>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3708      	adds	r7, #8
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b082      	sub	sp, #8
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 f804 	bl	8010f2c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00f      	beq.n	8010f5e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	330c      	adds	r3, #12
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4610      	mov	r0, r2
 8010f52:	4798      	blx	r3
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e000      	b.n	8010f60 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00e      	beq.n	8010f82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	3308      	adds	r3, #8
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b084      	sub	sp, #16
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	60f8      	str	r0, [r7, #12]
 8010f92:	60b9      	str	r1, [r7, #8]
 8010f94:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010f96:	f00d fdf7 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f00d fdf9 	bl	801eb94 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d008      	beq.n	8010fbc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	330c      	adds	r3, #12
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4610      	mov	r0, r2
 8010fba:	4798      	blx	r3
    }
    if (*currentTrans)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d007      	beq.n	8010fd4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	4798      	blx	r3
    }
    if (*currentScreen)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d008      	beq.n	8010fee <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3314      	adds	r3, #20
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4610      	mov	r0, r2
 8010fec:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d008      	beq.n	8011008 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	3304      	adds	r3, #4
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4610      	mov	r0, r2
 8011006:	4798      	blx	r3
    }
    if (*currentScreen)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d007      	beq.n	8011020 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4610      	mov	r0, r2
 801101e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d008      	beq.n	801103a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	3308      	adds	r3, #8
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4610      	mov	r0, r2
 8011038:	4798      	blx	r3
    }
}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b084      	sub	sp, #16
 8011046:	af00      	add	r7, sp, #0
 8011048:	60f8      	str	r0, [r7, #12]
 801104a:	60b9      	str	r1, [r7, #8]
 801104c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	330c      	adds	r3, #12
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	4798      	blx	r3
    newPresenter->activate();
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	68b8      	ldr	r0, [r7, #8]
 8011062:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011064:	6879      	ldr	r1, [r7, #4]
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f00e fe9e 	bl	801fda8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	3310      	adds	r3, #16
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	4798      	blx	r3

    Application::getInstance()->draw();
 8011078:	f00d fd86 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801107c:	4602      	mov	r2, r0
 801107e:	6813      	ldr	r3, [r2, #0]
 8011080:	3328      	adds	r3, #40	; 0x28
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4610      	mov	r0, r2
 8011086:	4798      	blx	r3
}
 8011088:	bf00      	nop
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	683a      	ldr	r2, [r7, #0]
 801109e:	601a      	str	r2, [r3, #0]
    }
 80110a0:	bf00      	nop
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	4a08      	ldr	r2, [pc, #32]	; (80110d8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 ff0d 	bl	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7ff ff01 	bl	8010ed0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0802c824 	.word	0x0802c824

080110dc <_ZN23FrontendApplicationBaseD0Ev>:
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ffe1 	bl	80110ac <_ZN23FrontendApplicationBaseD1Ev>
 80110ea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f019 fd4d 	bl	802ab8e <_ZdlPvj>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
	...

08011100 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff fd9e 	bl	8010c4c <_ZN8touchgfx10TransitionC1Ev>
 8011110:	4a03      	ldr	r2, [pc, #12]	; (8011120 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	601a      	str	r2, [r3, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4618      	mov	r0, r3
 801111a:	3708      	adds	r7, #8
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0802c804 	.word	0x0802c804

08011124 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	4a05      	ldr	r2, [pc, #20]	; (8011144 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff fd9f 	bl	8010c78 <_ZN8touchgfx10TransitionD1Ev>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	0802c804 	.word	0x0802c804

08011148 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff ffe7 	bl	8011124 <_ZN8touchgfx12NoTransitionD1Ev>
 8011156:	210c      	movs	r1, #12
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f019 fd18 	bl	802ab8e <_ZdlPvj>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2201      	movs	r2, #1
 8011174:	721a      	strb	r2, [r3, #8]
    }
 8011176:	bf00      	nop
 8011178:	370c      	adds	r7, #12
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr

08011182 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8011182:	b480      	push	{r7}
 8011184:	b083      	sub	sp, #12
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	605a      	str	r2, [r3, #4]
    }
 8011192:	bf00      	nop
 8011194:	370c      	adds	r7, #12
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
	...

080111a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7ff fe6e 	bl	8010e90 <_ZN8touchgfx14MVPApplicationC1Ev>
 80111b4:	4a13      	ldr	r2, [pc, #76]	; (8011204 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	601a      	str	r2, [r3, #0]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80111c0:	4618      	mov	r0, r3
 80111c2:	f000 f92b 	bl	801141c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80111d6:	f7ff fe0f 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 80111da:	4602      	mov	r2, r0
 80111dc:	6813      	ldr	r3, [r2, #0]
 80111de:	3308      	adds	r3, #8
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2100      	movs	r1, #0
 80111e4:	4610      	mov	r0, r2
 80111e6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80111e8:	2000      	movs	r0, #0
 80111ea:	f005 fe1b 	bl	8016e24 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80111ee:	f7ff fe0f 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 80111f2:	4603      	mov	r3, r0
 80111f4:	4618      	mov	r0, r3
 80111f6:	f013 f9d8 	bl	80245aa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	0802c824 	.word	0x0802c824

08011208 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	4611      	mov	r1, r2
 8011230:	4618      	mov	r0, r3
 8011232:	f7ff ffe9 	bl	8011208 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	605a      	str	r2, [r3, #4]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	3308      	adds	r3, #8
 8011244:	3208      	adds	r2, #8
 8011246:	e892 0003 	ldmia.w	r2, {r0, r1}
 801124a:	e883 0003 	stmia.w	r3, {r0, r1}
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8011258:	b590      	push	{r4, r7, lr}
 801125a:	b089      	sub	sp, #36	; 0x24
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011266:	4b10      	ldr	r3, [pc, #64]	; (80112a8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8011268:	61bb      	str	r3, [r7, #24]
 801126a:	2300      	movs	r3, #0
 801126c:	61fb      	str	r3, [r7, #28]
 801126e:	f107 0008 	add.w	r0, r7, #8
 8011272:	f107 0318 	add.w	r3, r7, #24
 8011276:	cb0c      	ldmia	r3, {r2, r3}
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	f000 f8eb 	bl	8011454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801127e:	f107 0308 	add.w	r3, r7, #8
 8011282:	4619      	mov	r1, r3
 8011284:	4620      	mov	r0, r4
 8011286:	f7ff ffcb 	bl	8011220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801128a:	f107 0308 	add.w	r3, r7, #8
 801128e:	4618      	mov	r0, r3
 8011290:	f000 fe26 	bl	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80112a0:	bf00      	nop
 80112a2:	3724      	adds	r7, #36	; 0x24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd90      	pop	{r4, r7, pc}
 80112a8:	080112ad 	.word	0x080112ad

080112ac <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af02      	add	r7, sp, #8
 80112b2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80112c0:	461a      	mov	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	4b04      	ldr	r3, [pc, #16]	; (80112dc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80112cc:	4804      	ldr	r0, [pc, #16]	; (80112e0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80112ce:	f000 f8e1 	bl	8011494 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80112d2:	bf00      	nop
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	2000c070 	.word	0x2000c070
 80112e0:	2000c06c 	.word	0x2000c06c

080112e4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWest()
{
 80112e4:	b590      	push	{r4, r7, lr}
 80112e6:	b089      	sub	sp, #36	; 0x24
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionWestImpl);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80112f2:	4b10      	ldr	r3, [pc, #64]	; (8011334 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv+0x50>)
 80112f4:	61bb      	str	r3, [r7, #24]
 80112f6:	2300      	movs	r3, #0
 80112f8:	61fb      	str	r3, [r7, #28]
 80112fa:	f107 0008 	add.w	r0, r7, #8
 80112fe:	f107 0318 	add.w	r3, r7, #24
 8011302:	cb0c      	ldmia	r3, {r2, r3}
 8011304:	6879      	ldr	r1, [r7, #4]
 8011306:	f000 f8a5 	bl	8011454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	4619      	mov	r1, r3
 8011310:	4620      	mov	r0, r4
 8011312:	f7ff ff85 	bl	8011220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011316:	f107 0308 	add.w	r3, r7, #8
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fde0 	bl	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801132c:	bf00      	nop
 801132e:	3724      	adds	r7, #36	; 0x24
 8011330:	46bd      	mov	sp, r7
 8011332:	bd90      	pop	{r4, r7, pc}
 8011334:	08011339 	.word	0x08011339

08011338 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWestImpl()
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af02      	add	r7, sp, #8
 801133e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801134c:	461a      	mov	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	4b04      	ldr	r3, [pc, #16]	; (8011368 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x30>)
 8011358:	4804      	ldr	r0, [pc, #16]	; (801136c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x34>)
 801135a:	f000 f957 	bl	801160c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801135e:	bf00      	nop
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	2000c070 	.word	0x2000c070
 801136c:	2000c06c 	.word	0x2000c06c

08011370 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8011370:	b590      	push	{r4, r7, lr}
 8011372:	b089      	sub	sp, #36	; 0x24
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801137e:	4b10      	ldr	r3, [pc, #64]	; (80113c0 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8011380:	61bb      	str	r3, [r7, #24]
 8011382:	2300      	movs	r3, #0
 8011384:	61fb      	str	r3, [r7, #28]
 8011386:	f107 0008 	add.w	r0, r7, #8
 801138a:	f107 0318 	add.w	r3, r7, #24
 801138e:	cb0c      	ldmia	r3, {r2, r3}
 8011390:	6879      	ldr	r1, [r7, #4]
 8011392:	f000 f85f 	bl	8011454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011396:	f107 0308 	add.w	r3, r7, #8
 801139a:	4619      	mov	r1, r3
 801139c:	4620      	mov	r0, r4
 801139e:	f7ff ff3f 	bl	8011220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80113a2:	f107 0308 	add.w	r3, r7, #8
 80113a6:	4618      	mov	r0, r3
 80113a8:	f000 fd9a 	bl	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80113b8:	bf00      	nop
 80113ba:	3724      	adds	r7, #36	; 0x24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd90      	pop	{r4, r7, pc}
 80113c0:	080113c5 	.word	0x080113c5

080113c4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af02      	add	r7, sp, #8
 80113ca:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80113d8:	461a      	mov	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 80113e4:	4804      	ldr	r0, [pc, #16]	; (80113f8 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 80113e6:	f000 f9cd 	bl	8011784 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80113ea:	bf00      	nop
 80113ec:	3708      	adds	r7, #8
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	2000c070 	.word	0x2000c070
 80113f8:	2000c06c 	.word	0x2000c06c

080113fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	4a04      	ldr	r2, [pc, #16]	; (8011418 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	0802c8b4 	.word	0x0802c8b4

0801141c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	4618      	mov	r0, r3
 8011428:	f7ff ffe8 	bl	80113fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801142c:	4a08      	ldr	r2, [pc, #32]	; (8011450 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	605a      	str	r2, [r3, #4]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	609a      	str	r2, [r3, #8]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2200      	movs	r2, #0
 8011442:	60da      	str	r2, [r3, #12]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4618      	mov	r0, r3
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	0802c860 	.word	0x0802c860

08011454 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	4639      	mov	r1, r7
 8011460:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff ffc8 	bl	80113fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801146c:	4a08      	ldr	r2, [pc, #32]	; (8011490 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	3308      	adds	r3, #8
 801147c:	463a      	mov	r2, r7
 801147e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011482:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	0802c860 	.word	0x0802c860

08011494 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011494:	b590      	push	{r4, r7, lr}
 8011496:	b089      	sub	sp, #36	; 0x24
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
 80114a0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689a      	ldr	r2, [r3, #8]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	3320      	adds	r3, #32
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4610      	mov	r0, r2
 80114b2:	4798      	blx	r3
 80114b4:	4602      	mov	r2, r0
 80114b6:	f642 03b7 	movw	r3, #10423	; 0x28b7
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d805      	bhi.n	80114ca <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80114be:	4b4e      	ldr	r3, [pc, #312]	; (80115f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80114c0:	4a4e      	ldr	r2, [pc, #312]	; (80115fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114c2:	21c2      	movs	r1, #194	; 0xc2
 80114c4:	484e      	ldr	r0, [pc, #312]	; (8011600 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80114c6:	f019 fb8d 	bl	802abe4 <__assert_func>
 80114ca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685a      	ldr	r2, [r3, #4]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	3320      	adds	r3, #32
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4610      	mov	r0, r2
 80114dc:	4798      	blx	r3
 80114de:	4603      	mov	r3, r0
 80114e0:	2b0f      	cmp	r3, #15
 80114e2:	d805      	bhi.n	80114f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80114e4:	4b47      	ldr	r3, [pc, #284]	; (8011604 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80114e6:	4a45      	ldr	r2, [pc, #276]	; (80115fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114e8:	21c3      	movs	r1, #195	; 0xc3
 80114ea:	4845      	ldr	r0, [pc, #276]	; (8011600 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80114ec:	f019 fb7a 	bl	802abe4 <__assert_func>
 80114f0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68da      	ldr	r2, [r3, #12]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	3320      	adds	r3, #32
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4610      	mov	r0, r2
 8011502:	4798      	blx	r3
 8011504:	4603      	mov	r3, r0
 8011506:	2b0b      	cmp	r3, #11
 8011508:	d805      	bhi.n	8011516 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801150a:	4b3f      	ldr	r3, [pc, #252]	; (8011608 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801150c:	4a3b      	ldr	r2, [pc, #236]	; (80115fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801150e:	21c4      	movs	r1, #196	; 0xc4
 8011510:	483b      	ldr	r0, [pc, #236]	; (8011600 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011512:	f019 fb67 	bl	802abe4 <__assert_func>
 8011516:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	68b9      	ldr	r1, [r7, #8]
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f7ff fd34 	bl	8010f8a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	2100      	movs	r1, #0
 8011528:	4618      	mov	r0, r3
 801152a:	f000 f9e7 	bl	80118fc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801152e:	4603      	mov	r3, r0
 8011530:	4619      	mov	r1, r3
 8011532:	200c      	movs	r0, #12
 8011534:	f7ff fb1c 	bl	8010b70 <_ZnwjPv>
 8011538:	4604      	mov	r4, r0
 801153a:	2c00      	cmp	r4, #0
 801153c:	d004      	beq.n	8011548 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801153e:	4620      	mov	r0, r4
 8011540:	f7ff fdde 	bl	8011100 <_ZN8touchgfx12NoTransitionC1Ev>
 8011544:	4623      	mov	r3, r4
 8011546:	e000      	b.n	801154a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011548:	4623      	mov	r3, r4
 801154a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	2100      	movs	r1, #0
 8011552:	4618      	mov	r0, r3
 8011554:	f000 f9e5 	bl	8011922 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011558:	4603      	mov	r3, r0
 801155a:	4619      	mov	r1, r3
 801155c:	f642 00b8 	movw	r0, #10424	; 0x28b8
 8011560:	f7ff fb06 	bl	8010b70 <_ZnwjPv>
 8011564:	4604      	mov	r4, r0
 8011566:	2c00      	cmp	r4, #0
 8011568:	d004      	beq.n	8011574 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801156a:	4620      	mov	r0, r4
 801156c:	f005 fed8 	bl	8017320 <_ZN8MainViewC1Ev>
 8011570:	4623      	mov	r3, r4
 8011572:	e000      	b.n	8011576 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011574:	4623      	mov	r3, r4
 8011576:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	2100      	movs	r1, #0
 801157e:	4618      	mov	r0, r3
 8011580:	f000 f9e2 	bl	8011948 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011584:	4603      	mov	r3, r0
 8011586:	4619      	mov	r1, r3
 8011588:	2010      	movs	r0, #16
 801158a:	f7ff faf1 	bl	8010b70 <_ZnwjPv>
 801158e:	4604      	mov	r4, r0
 8011590:	2c00      	cmp	r4, #0
 8011592:	d005      	beq.n	80115a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011594:	69b9      	ldr	r1, [r7, #24]
 8011596:	4620      	mov	r0, r4
 8011598:	f005 fe12 	bl	80171c0 <_ZN13MainPresenterC1ER8MainView>
 801159c:	4623      	mov	r3, r4
 801159e:	e000      	b.n	80115a2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80115a0:	4623      	mov	r3, r4
 80115a2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	69fa      	ldr	r2, [r7, #28]
 80115a8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	69ba      	ldr	r2, [r7, #24]
 80115b4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d002      	beq.n	80115c2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	3304      	adds	r3, #4
 80115c0:	e000      	b.n	80115c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80115c2:	2300      	movs	r3, #0
 80115c4:	4619      	mov	r1, r3
 80115c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115c8:	f7ff fd62 	bl	8011090 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	3304      	adds	r3, #4
 80115d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fdd5 	bl	8011182 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	6979      	ldr	r1, [r7, #20]
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 f9c6 	bl	801196e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80115e2:	69fa      	ldr	r2, [r7, #28]
 80115e4:	6979      	ldr	r1, [r7, #20]
 80115e6:	69b8      	ldr	r0, [r7, #24]
 80115e8:	f7ff fd2b 	bl	8011042 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80115ec:	697b      	ldr	r3, [r7, #20]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3724      	adds	r7, #36	; 0x24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd90      	pop	{r4, r7, pc}
 80115f6:	bf00      	nop
 80115f8:	0802bd74 	.word	0x0802bd74
 80115fc:	0802c90c 	.word	0x0802c90c
 8011600:	0802be04 	.word	0x0802be04
 8011604:	0802be48 	.word	0x0802be48
 8011608:	0802beec 	.word	0x0802beec

0801160c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801160c:	b590      	push	{r4, r7, lr}
 801160e:	b089      	sub	sp, #36	; 0x24
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]
 8011618:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	689a      	ldr	r2, [r3, #8]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	3320      	adds	r3, #32
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4610      	mov	r0, r2
 801162a:	4798      	blx	r3
 801162c:	4602      	mov	r2, r0
 801162e:	f642 03b7 	movw	r3, #10423	; 0x28b7
 8011632:	429a      	cmp	r2, r3
 8011634:	d805      	bhi.n	8011642 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8011636:	4b4e      	ldr	r3, [pc, #312]	; (8011770 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011638:	4a4e      	ldr	r2, [pc, #312]	; (8011774 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801163a:	21c2      	movs	r1, #194	; 0xc2
 801163c:	484e      	ldr	r0, [pc, #312]	; (8011778 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801163e:	f019 fad1 	bl	802abe4 <__assert_func>
 8011642:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	685a      	ldr	r2, [r3, #4]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	3320      	adds	r3, #32
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	4610      	mov	r0, r2
 8011654:	4798      	blx	r3
 8011656:	4603      	mov	r3, r0
 8011658:	2b0f      	cmp	r3, #15
 801165a:	d805      	bhi.n	8011668 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801165c:	4b47      	ldr	r3, [pc, #284]	; (801177c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801165e:	4a45      	ldr	r2, [pc, #276]	; (8011774 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011660:	21c3      	movs	r1, #195	; 0xc3
 8011662:	4845      	ldr	r0, [pc, #276]	; (8011778 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011664:	f019 fabe 	bl	802abe4 <__assert_func>
 8011668:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	68da      	ldr	r2, [r3, #12]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	3320      	adds	r3, #32
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4610      	mov	r0, r2
 801167a:	4798      	blx	r3
 801167c:	4603      	mov	r3, r0
 801167e:	2b53      	cmp	r3, #83	; 0x53
 8011680:	d805      	bhi.n	801168e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011682:	4b3f      	ldr	r3, [pc, #252]	; (8011780 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8011684:	4a3b      	ldr	r2, [pc, #236]	; (8011774 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011686:	21c4      	movs	r1, #196	; 0xc4
 8011688:	483b      	ldr	r0, [pc, #236]	; (8011778 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801168a:	f019 faab 	bl	802abe4 <__assert_func>
 801168e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	68b9      	ldr	r1, [r7, #8]
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	f7ff fc78 	bl	8010f8a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	2100      	movs	r1, #0
 80116a0:	4618      	mov	r0, r3
 80116a2:	f000 f972 	bl	801198a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 80116a6:	4603      	mov	r3, r0
 80116a8:	4619      	mov	r1, r3
 80116aa:	2054      	movs	r0, #84	; 0x54
 80116ac:	f7ff fa60 	bl	8010b70 <_ZnwjPv>
 80116b0:	4604      	mov	r4, r0
 80116b2:	2c00      	cmp	r4, #0
 80116b4:	d005      	beq.n	80116c2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80116b6:	2114      	movs	r1, #20
 80116b8:	4620      	mov	r0, r4
 80116ba:	f000 f99b 	bl	80119f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 80116be:	4623      	mov	r3, r4
 80116c0:	e000      	b.n	80116c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 80116c2:	4623      	mov	r3, r4
 80116c4:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	689b      	ldr	r3, [r3, #8]
 80116ca:	2100      	movs	r1, #0
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 f928 	bl	8011922 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80116d2:	4603      	mov	r3, r0
 80116d4:	4619      	mov	r1, r3
 80116d6:	f642 00b8 	movw	r0, #10424	; 0x28b8
 80116da:	f7ff fa49 	bl	8010b70 <_ZnwjPv>
 80116de:	4604      	mov	r4, r0
 80116e0:	2c00      	cmp	r4, #0
 80116e2:	d004      	beq.n	80116ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80116e4:	4620      	mov	r0, r4
 80116e6:	f005 fe1b 	bl	8017320 <_ZN8MainViewC1Ev>
 80116ea:	4623      	mov	r3, r4
 80116ec:	e000      	b.n	80116f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 80116ee:	4623      	mov	r3, r4
 80116f0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	2100      	movs	r1, #0
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 f925 	bl	8011948 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80116fe:	4603      	mov	r3, r0
 8011700:	4619      	mov	r1, r3
 8011702:	2010      	movs	r0, #16
 8011704:	f7ff fa34 	bl	8010b70 <_ZnwjPv>
 8011708:	4604      	mov	r4, r0
 801170a:	2c00      	cmp	r4, #0
 801170c:	d005      	beq.n	801171a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801170e:	69b9      	ldr	r1, [r7, #24]
 8011710:	4620      	mov	r0, r4
 8011712:	f005 fd55 	bl	80171c0 <_ZN13MainPresenterC1ER8MainView>
 8011716:	4623      	mov	r3, r4
 8011718:	e000      	b.n	801171c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801171a:	4623      	mov	r3, r4
 801171c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	69fa      	ldr	r2, [r7, #28]
 8011722:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	697a      	ldr	r2, [r7, #20]
 8011728:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	69ba      	ldr	r2, [r7, #24]
 801172e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d002      	beq.n	801173c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	3304      	adds	r3, #4
 801173a:	e000      	b.n	801173e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 801173c:	2300      	movs	r3, #0
 801173e:	4619      	mov	r1, r3
 8011740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011742:	f7ff fca5 	bl	8011090 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	3304      	adds	r3, #4
 801174a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff fd18 	bl	8011182 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	6979      	ldr	r1, [r7, #20]
 8011756:	4618      	mov	r0, r3
 8011758:	f000 f909 	bl	801196e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801175c:	69fa      	ldr	r2, [r7, #28]
 801175e:	6979      	ldr	r1, [r7, #20]
 8011760:	69b8      	ldr	r0, [r7, #24]
 8011762:	f7ff fc6e 	bl	8011042 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011766:	697b      	ldr	r3, [r7, #20]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3724      	adds	r7, #36	; 0x24
 801176c:	46bd      	mov	sp, r7
 801176e:	bd90      	pop	{r4, r7, pc}
 8011770:	0802bd74 	.word	0x0802bd74
 8011774:	0802ca0c 	.word	0x0802ca0c
 8011778:	0802be04 	.word	0x0802be04
 801177c:	0802be48 	.word	0x0802be48
 8011780:	0802beec 	.word	0x0802beec

08011784 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b089      	sub	sp, #36	; 0x24
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
 8011790:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	689a      	ldr	r2, [r3, #8]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	3320      	adds	r3, #32
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4610      	mov	r0, r2
 80117a2:	4798      	blx	r3
 80117a4:	4603      	mov	r3, r0
 80117a6:	f5b3 6fa7 	cmp.w	r3, #1336	; 0x538
 80117aa:	d205      	bcs.n	80117b8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80117ac:	4b4e      	ldr	r3, [pc, #312]	; (80118e8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80117ae:	4a4f      	ldr	r2, [pc, #316]	; (80118ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80117b0:	21c2      	movs	r1, #194	; 0xc2
 80117b2:	484f      	ldr	r0, [pc, #316]	; (80118f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80117b4:	f019 fa16 	bl	802abe4 <__assert_func>
 80117b8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685a      	ldr	r2, [r3, #4]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3320      	adds	r3, #32
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b0f      	cmp	r3, #15
 80117d0:	d805      	bhi.n	80117de <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80117d2:	4b48      	ldr	r3, [pc, #288]	; (80118f4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80117d4:	4a45      	ldr	r2, [pc, #276]	; (80118ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80117d6:	21c3      	movs	r1, #195	; 0xc3
 80117d8:	4845      	ldr	r0, [pc, #276]	; (80118f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80117da:	f019 fa03 	bl	802abe4 <__assert_func>
 80117de:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	68da      	ldr	r2, [r3, #12]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3320      	adds	r3, #32
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4610      	mov	r0, r2
 80117f0:	4798      	blx	r3
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b53      	cmp	r3, #83	; 0x53
 80117f6:	d805      	bhi.n	8011804 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80117f8:	4b3f      	ldr	r3, [pc, #252]	; (80118f8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80117fa:	4a3c      	ldr	r2, [pc, #240]	; (80118ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80117fc:	21c4      	movs	r1, #196	; 0xc4
 80117fe:	483c      	ldr	r0, [pc, #240]	; (80118f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011800:	f019 f9f0 	bl	802abe4 <__assert_func>
 8011804:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f7ff fbbd 	bl	8010f8a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	2100      	movs	r1, #0
 8011816:	4618      	mov	r0, r3
 8011818:	f000 f980 	bl	8011b1c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801181c:	4603      	mov	r3, r0
 801181e:	4619      	mov	r1, r3
 8011820:	2054      	movs	r0, #84	; 0x54
 8011822:	f7ff f9a5 	bl	8010b70 <_ZnwjPv>
 8011826:	4604      	mov	r4, r0
 8011828:	2c00      	cmp	r4, #0
 801182a:	d005      	beq.n	8011838 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801182c:	2114      	movs	r1, #20
 801182e:	4620      	mov	r0, r4
 8011830:	f000 f9aa 	bl	8011b88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8011834:	4623      	mov	r3, r4
 8011836:	e000      	b.n	801183a <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011838:	4623      	mov	r3, r4
 801183a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	2100      	movs	r1, #0
 8011842:	4618      	mov	r0, r3
 8011844:	f000 fa34 	bl	8011cb0 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011848:	4603      	mov	r3, r0
 801184a:	4619      	mov	r1, r3
 801184c:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 8011850:	f7ff f98e 	bl	8010b70 <_ZnwjPv>
 8011854:	4604      	mov	r4, r0
 8011856:	2c00      	cmp	r4, #0
 8011858:	d004      	beq.n	8011864 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801185a:	4620      	mov	r0, r4
 801185c:	f006 fab0 	bl	8017dc0 <_ZN16SecondScreenViewC1Ev>
 8011860:	4623      	mov	r3, r4
 8011862:	e000      	b.n	8011866 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011864:	4623      	mov	r3, r4
 8011866:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	2100      	movs	r1, #0
 801186e:	4618      	mov	r0, r3
 8011870:	f000 fa31 	bl	8011cd6 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011874:	4603      	mov	r3, r0
 8011876:	4619      	mov	r1, r3
 8011878:	2010      	movs	r0, #16
 801187a:	f7ff f979 	bl	8010b70 <_ZnwjPv>
 801187e:	4604      	mov	r4, r0
 8011880:	2c00      	cmp	r4, #0
 8011882:	d005      	beq.n	8011890 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011884:	69b9      	ldr	r1, [r7, #24]
 8011886:	4620      	mov	r0, r4
 8011888:	f006 f9c6 	bl	8017c18 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 801188c:	4623      	mov	r3, r4
 801188e:	e000      	b.n	8011892 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011890:	4623      	mov	r3, r4
 8011892:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	69fa      	ldr	r2, [r7, #28]
 8011898:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	697a      	ldr	r2, [r7, #20]
 801189e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	69ba      	ldr	r2, [r7, #24]
 80118a4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	3304      	adds	r3, #4
 80118b0:	e000      	b.n	80118b4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80118b2:	2300      	movs	r3, #0
 80118b4:	4619      	mov	r1, r3
 80118b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118b8:	f7ff fbea 	bl	8011090 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	3304      	adds	r3, #4
 80118c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff fc5d 	bl	8011182 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	6979      	ldr	r1, [r7, #20]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f000 fa15 	bl	8011cfc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80118d2:	69fa      	ldr	r2, [r7, #28]
 80118d4:	6979      	ldr	r1, [r7, #20]
 80118d6:	69b8      	ldr	r0, [r7, #24]
 80118d8:	f7ff fbb3 	bl	8011042 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80118dc:	697b      	ldr	r3, [r7, #20]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3724      	adds	r7, #36	; 0x24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd90      	pop	{r4, r7, pc}
 80118e6:	bf00      	nop
 80118e8:	0802bd74 	.word	0x0802bd74
 80118ec:	0802cb28 	.word	0x0802cb28
 80118f0:	0802be04 	.word	0x0802be04
 80118f4:	0802be48 	.word	0x0802be48
 80118f8:	0802beec 	.word	0x0802beec

080118fc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	3324      	adds	r3, #36	; 0x24
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	887a      	ldrh	r2, [r7, #2]
 8011912:	4611      	mov	r1, r2
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	4798      	blx	r3
 8011918:	4603      	mov	r3, r0
    }
 801191a:	4618      	mov	r0, r3
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8011922:	b580      	push	{r7, lr}
 8011924:	b082      	sub	sp, #8
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	460b      	mov	r3, r1
 801192c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3324      	adds	r3, #36	; 0x24
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	887a      	ldrh	r2, [r7, #2]
 8011938:	4611      	mov	r1, r2
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	4798      	blx	r3
 801193e:	4603      	mov	r3, r0
    }
 8011940:	4618      	mov	r0, r3
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	460b      	mov	r3, r1
 8011952:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	3324      	adds	r3, #36	; 0x24
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	887a      	ldrh	r2, [r7, #2]
 801195e:	4611      	mov	r1, r2
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	4798      	blx	r3
 8011964:	4603      	mov	r3, r0
    }
 8011966:	4618      	mov	r0, r3
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801196e:	b480      	push	{r7}
 8011970:	b083      	sub	sp, #12
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
 8011976:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801197e:	bf00      	nop
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
 8011992:	460b      	mov	r3, r1
 8011994:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	3324      	adds	r3, #36	; 0x24
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	887a      	ldrh	r2, [r7, #2]
 80119a0:	4611      	mov	r1, r2
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	4798      	blx	r3
 80119a6:	4603      	mov	r3, r0
    }
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	4a05      	ldr	r2, [pc, #20]	; (80119d0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f000 fa13 	bl	8011dec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	0802c794 	.word	0x0802c794

080119d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ffe7 	bl	80119b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 80119e2:	2110      	movs	r1, #16
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f019 f8d2 	bl	802ab8e <_ZdlPvj>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80119f4:	b590      	push	{r4, r7, lr}
 80119f6:	b087      	sub	sp, #28
 80119f8:	af02      	add	r7, sp, #8
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff f922 	bl	8010c4c <_ZN8touchgfx10TransitionC1Ev>
 8011a08:	4a3f      	ldr	r2, [pc, #252]	; (8011b08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	330c      	adds	r3, #12
 8011a12:	4618      	mov	r0, r3
 8011a14:	f00b fb2a 	bl	801d06c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f103 020c 	add.w	r2, r3, #12
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	639a      	str	r2, [r3, #56]	; 0x38
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011a28:	4a38      	ldr	r2, [pc, #224]	; (8011b0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 8011a2a:	f107 0308 	add.w	r3, r7, #8
 8011a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a32:	e883 0003 	stmia.w	r3, {r0, r1}
 8011a36:	f107 0308 	add.w	r3, r7, #8
 8011a3a:	cb0c      	ldmia	r3, {r2, r3}
 8011a3c:	6879      	ldr	r1, [r7, #4]
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f000 f9b4 	bl	8011dac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2203      	movs	r2, #3
 8011a48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	78fa      	ldrb	r2, [r7, #3]
 8011a50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011a64:	4b2a      	ldr	r3, [pc, #168]	; (8011b10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d047      	beq.n	8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f103 000c 	add.w	r0, r3, #12
 8011a72:	4b28      	ldr	r3, [pc, #160]	; (8011b14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011a74:	881b      	ldrh	r3, [r3, #0]
 8011a76:	b21a      	sxth	r2, r3
 8011a78:	4b27      	ldr	r3, [pc, #156]	; (8011b18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	b21b      	sxth	r3, r3
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	4613      	mov	r3, r2
 8011a82:	2200      	movs	r2, #0
 8011a84:	2100      	movs	r1, #0
 8011a86:	f7ff f96f 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	330c      	adds	r3, #12
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f00b fa69 	bl	801cf66 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	d82a      	bhi.n	8011af4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 8011a9e:	a201      	add	r2, pc, #4	; (adr r2, 8011aa4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 8011aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa4:	08011ad5 	.word	0x08011ad5
 8011aa8:	08011ae3 	.word	0x08011ae3
 8011aac:	08011ab5 	.word	0x08011ab5
 8011ab0:	08011ac7 	.word	0x08011ac7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011ab4:	4b17      	ldr	r3, [pc, #92]	; (8011b14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	425b      	negs	r3, r3
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	b21a      	sxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011ac4:	e01a      	b.n	8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8011ac6:	4b13      	ldr	r3, [pc, #76]	; (8011b14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	b21a      	sxth	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011ad2:	e013      	b.n	8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8011ad4:	4b10      	ldr	r3, [pc, #64]	; (8011b18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011ad6:	881b      	ldrh	r3, [r3, #0]
 8011ad8:	b21a      	sxth	r2, r3
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011ae0:	e00c      	b.n	8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011ae2:	4b0d      	ldr	r3, [pc, #52]	; (8011b18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	425b      	negs	r3, r3
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	b21a      	sxth	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011af2:	e003      	b.n	8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2201      	movs	r2, #1
 8011af8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011afa:	bf00      	nop
            }
        }
    }
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4618      	mov	r0, r3
 8011b00:	3714      	adds	r7, #20
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd90      	pop	{r4, r7, pc}
 8011b06:	bf00      	nop
 8011b08:	0802c76c 	.word	0x0802c76c
 8011b0c:	0802bf90 	.word	0x0802bf90
 8011b10:	2000bfed 	.word	0x2000bfed
 8011b14:	2000bfe2 	.word	0x2000bfe2
 8011b18:	2000bfe4 	.word	0x2000bfe4

08011b1c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	460b      	mov	r3, r1
 8011b26:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	3324      	adds	r3, #36	; 0x24
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	887a      	ldrh	r2, [r7, #2]
 8011b32:	4611      	mov	r1, r2
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	4798      	blx	r3
 8011b38:	4603      	mov	r3, r0
    }
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	4a05      	ldr	r2, [pc, #20]	; (8011b64 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f000 f949 	bl	8011dec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	0802c7d4 	.word	0x0802c7d4

08011b68 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7ff ffe7 	bl	8011b44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011b76:	2110      	movs	r1, #16
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f019 f808 	bl	802ab8e <_ZdlPvj>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b087      	sub	sp, #28
 8011b8c:	af02      	add	r7, sp, #8
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	460b      	mov	r3, r1
 8011b92:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff f858 	bl	8010c4c <_ZN8touchgfx10TransitionC1Ev>
 8011b9c:	4a3f      	ldr	r2, [pc, #252]	; (8011c9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	601a      	str	r2, [r3, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	330c      	adds	r3, #12
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f00b fa60 	bl	801d06c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f103 020c 	add.w	r2, r3, #12
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011bbc:	4a38      	ldr	r2, [pc, #224]	; (8011ca0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8011bbe:	f107 0308 	add.w	r3, r7, #8
 8011bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bca:	f107 0308 	add.w	r3, r7, #8
 8011bce:	cb0c      	ldmia	r3, {r2, r3}
 8011bd0:	6879      	ldr	r1, [r7, #4]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 f964 	bl	8011ea0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2202      	movs	r2, #2
 8011bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	78fa      	ldrb	r2, [r7, #3]
 8011be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 8011bf8:	4b2a      	ldr	r3, [pc, #168]	; (8011ca4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d047      	beq.n	8011c90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f103 000c 	add.w	r0, r3, #12
 8011c06:	4b28      	ldr	r3, [pc, #160]	; (8011ca8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	b21a      	sxth	r2, r3
 8011c0c:	4b27      	ldr	r3, [pc, #156]	; (8011cac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	b21b      	sxth	r3, r3
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4613      	mov	r3, r2
 8011c16:	2200      	movs	r2, #0
 8011c18:	2100      	movs	r1, #0
 8011c1a:	f7ff f8a5 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	330c      	adds	r3, #12
 8011c22:	4618      	mov	r0, r3
 8011c24:	f00b f99f 	bl	801cf66 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011c2e:	2b03      	cmp	r3, #3
 8011c30:	d82a      	bhi.n	8011c88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8011c32:	a201      	add	r2, pc, #4	; (adr r2, 8011c38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8011c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c38:	08011c69 	.word	0x08011c69
 8011c3c:	08011c77 	.word	0x08011c77
 8011c40:	08011c49 	.word	0x08011c49
 8011c44:	08011c5b 	.word	0x08011c5b
                targetValue = -HAL::DISPLAY_WIDTH;
 8011c48:	4b17      	ldr	r3, [pc, #92]	; (8011ca8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011c4a:	881b      	ldrh	r3, [r3, #0]
 8011c4c:	425b      	negs	r3, r3
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	b21a      	sxth	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c58:	e01a      	b.n	8011c90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 8011c5a:	4b13      	ldr	r3, [pc, #76]	; (8011ca8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	b21a      	sxth	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c66:	e013      	b.n	8011c90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 8011c68:	4b10      	ldr	r3, [pc, #64]	; (8011cac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	b21a      	sxth	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c74:	e00c      	b.n	8011c90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011c76:	4b0d      	ldr	r3, [pc, #52]	; (8011cac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	425b      	negs	r3, r3
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	b21a      	sxth	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c86:	e003      	b.n	8011c90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	721a      	strb	r2, [r3, #8]
                break;
 8011c8e:	bf00      	nop
    }
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4618      	mov	r0, r3
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd90      	pop	{r4, r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	0802c7ac 	.word	0x0802c7ac
 8011ca0:	0802bf98 	.word	0x0802bf98
 8011ca4:	2000bfed 	.word	0x2000bfed
 8011ca8:	2000bfe2 	.word	0x2000bfe2
 8011cac:	2000bfe4 	.word	0x2000bfe4

08011cb0 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	3324      	adds	r3, #36	; 0x24
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	887a      	ldrh	r2, [r7, #2]
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	4798      	blx	r3
 8011ccc:	4603      	mov	r3, r0
    }
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011cd6:	b580      	push	{r7, lr}
 8011cd8:	b082      	sub	sp, #8
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
 8011cde:	460b      	mov	r3, r1
 8011ce0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	3324      	adds	r3, #36	; 0x24
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	887a      	ldrh	r2, [r7, #2]
 8011cec:	4611      	mov	r1, r2
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	4798      	blx	r3
 8011cf2:	4603      	mov	r3, r0
    }
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	683a      	ldr	r2, [r7, #0]
 8011d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d26:	683a      	ldr	r2, [r7, #0]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d02a      	beq.n	8011d82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011d32:	2b03      	cmp	r3, #3
 8011d34:	d820      	bhi.n	8011d78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011d36:	a201      	add	r2, pc, #4	; (adr r2, 8011d3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d3c:	08011d63 	.word	0x08011d63
 8011d40:	08011d63 	.word	0x08011d63
 8011d44:	08011d4d 	.word	0x08011d4d
 8011d48:	08011d4d 	.word	0x08011d4d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	3354      	adds	r3, #84	; 0x54
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	6838      	ldr	r0, [r7, #0]
 8011d5e:	4798      	blx	r3
            break;
 8011d60:	e010      	b.n	8011d84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	3354      	adds	r3, #84	; 0x54
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011d70:	2100      	movs	r1, #0
 8011d72:	6838      	ldr	r0, [r7, #0]
 8011d74:	4798      	blx	r3
            break;
 8011d76:	e005      	b.n	8011d84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	721a      	strb	r2, [r3, #8]
            break;
 8011d7e:	bf00      	nop
 8011d80:	e000      	b.n	8011d84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011d82:	bf00      	nop
        }
    }
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop

08011d8c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011d8c:	b480      	push	{r7}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	4a04      	ldr	r2, [pc, #16]	; (8011da8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	601a      	str	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	370c      	adds	r7, #12
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr
 8011da8:	0802c7ec 	.word	0x0802c7ec

08011dac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	4639      	mov	r1, r7
 8011db8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7ff ffe4 	bl	8011d8c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011dc4:	4a08      	ldr	r2, [pc, #32]	; (8011de8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	3308      	adds	r3, #8
 8011dd4:	463a      	mov	r2, r7
 8011dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	4618      	mov	r0, r3
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	0802c794 	.word	0x0802c794

08011dec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    }
 8011df4:	4a04      	ldr	r2, [pc, #16]	; (8011e08 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	370c      	adds	r7, #12
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr
 8011e08:	0802c7ec 	.word	0x0802c7ec

08011e0c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
    }
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7ff ffe9 	bl	8011dec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011e1a:	2104      	movs	r1, #4
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f018 feb6 	bl	802ab8e <_ZdlPvj>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e3a:	683a      	ldr	r2, [r7, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d02a      	beq.n	8011e96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011e46:	2b03      	cmp	r3, #3
 8011e48:	d820      	bhi.n	8011e8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011e4a:	a201      	add	r2, pc, #4	; (adr r2, 8011e50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e50:	08011e77 	.word	0x08011e77
 8011e54:	08011e77 	.word	0x08011e77
 8011e58:	08011e61 	.word	0x08011e61
 8011e5c:	08011e61 	.word	0x08011e61
            d.moveRelative(calculatedValue, 0);
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3354      	adds	r3, #84	; 0x54
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011e6e:	2200      	movs	r2, #0
 8011e70:	6838      	ldr	r0, [r7, #0]
 8011e72:	4798      	blx	r3
            break;
 8011e74:	e010      	b.n	8011e98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3354      	adds	r3, #84	; 0x54
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011e84:	2100      	movs	r1, #0
 8011e86:	6838      	ldr	r0, [r7, #0]
 8011e88:	4798      	blx	r3
            break;
 8011e8a:	e005      	b.n	8011e98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	721a      	strb	r2, [r3, #8]
            break;
 8011e92:	bf00      	nop
 8011e94:	e000      	b.n	8011e98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011e96:	bf00      	nop
    }
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop

08011ea0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	4639      	mov	r1, r7
 8011eac:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff ff6a 	bl	8011d8c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011eb8:	4a08      	ldr	r2, [pc, #32]	; (8011edc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	68ba      	ldr	r2, [r7, #8]
 8011ec2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	3308      	adds	r3, #8
 8011ec8:	463a      	mov	r2, r7
 8011eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ece:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	0802c7d4 	.word	0x0802c7d4

08011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	4a05      	ldr	r2, [pc, #20]	; (8011f00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe ff19 	bl	8010d28 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	0802c860 	.word	0x0802c860

08011f04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff ffe7 	bl	8011ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011f12:	2110      	movs	r1, #16
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f018 fe3a 	bl	802ab8e <_ZdlPvj>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
    }
 8011f2c:	4a0a      	ldr	r2, [pc, #40]	; (8011f58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	333c      	adds	r3, #60	; 0x3c
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff fd3a 	bl	80119b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	330c      	adds	r3, #12
 8011f40:	4618      	mov	r0, r3
 8011f42:	f00b f80f 	bl	801cf64 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fe fe95 	bl	8010c78 <_ZN8touchgfx10TransitionD1Ev>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	0802c76c 	.word	0x0802c76c

08011f5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
    }
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff ffdd 	bl	8011f24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8011f6a:	2154      	movs	r1, #84	; 0x54
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f018 fe0e 	bl	802ab8e <_ZdlPvj>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011f84:	4b59      	ldr	r3, [pc, #356]	; (80120ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	f083 0301 	eor.w	r3, r3, #1
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d003      	beq.n	8011f9a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2201      	movs	r2, #1
 8011f96:	721a      	strb	r2, [r3, #8]
            return;
 8011f98:	e0a5      	b.n	80120e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fe fe8b 	bl	8010cb8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011fa8:	3301      	adds	r3, #1
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d82f      	bhi.n	8012022 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011fc8:	b298      	uxth	r0, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	2100      	movs	r1, #0
 8011fda:	f00d fefc 	bl	801fdd6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d01b      	beq.n	8012032 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012000:	b29b      	uxth	r3, r3
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8012008:	2a00      	cmp	r2, #0
 801200a:	dd01      	ble.n	8012010 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 801200c:	2201      	movs	r2, #1
 801200e:	e001      	b.n	8012014 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 8012010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012014:	4413      	add	r3, r2
 8012016:	b29b      	uxth	r3, r3
 8012018:	b21a      	sxth	r2, r3
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8012020:	e007      	b.n	8012032 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2201      	movs	r2, #1
 8012026:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8012030:	e059      	b.n	80120e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012038:	2b03      	cmp	r3, #3
 801203a:	d845      	bhi.n	80120c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 801203c:	a201      	add	r2, pc, #4	; (adr r2, 8012044 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 801203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012042:	bf00      	nop
 8012044:	0801208f 	.word	0x0801208f
 8012048:	0801208f 	.word	0x0801208f
 801204c:	08012055 	.word	0x08012055
 8012050:	08012055 	.word	0x08012055
            calculatedValue -= snapshot.getX();
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	330c      	adds	r3, #12
 8012058:	4618      	mov	r0, r3
 801205a:	f7fe feb2 	bl	8010dc2 <_ZNK8touchgfx8Drawable4getXEv>
 801205e:	4603      	mov	r3, r0
 8012060:	4619      	mov	r1, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012068:	b29a      	uxth	r2, r3
 801206a:	b28b      	uxth	r3, r1
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	b29b      	uxth	r3, r3
 8012070:	b21a      	sxth	r2, r3
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f103 000c 	add.w	r0, r3, #12
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012084:	2200      	movs	r2, #0
 8012086:	4619      	mov	r1, r3
 8012088:	f00d f9dc 	bl	801f444 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801208c:	e020      	b.n	80120d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	330c      	adds	r3, #12
 8012092:	4618      	mov	r0, r3
 8012094:	f7fe fea2 	bl	8010ddc <_ZNK8touchgfx8Drawable4getYEv>
 8012098:	4603      	mov	r3, r0
 801209a:	4619      	mov	r1, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	b28b      	uxth	r3, r1
 80120a6:	1ad3      	subs	r3, r2, r3
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	b21a      	sxth	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f103 000c 	add.w	r0, r3, #12
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80120be:	461a      	mov	r2, r3
 80120c0:	2100      	movs	r1, #0
 80120c2:	f00d f9bf 	bl	801f444 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80120c6:	e003      	b.n	80120d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	721a      	strb	r2, [r3, #8]
            break;
 80120ce:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6858      	ldr	r0, [r3, #4]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	3378      	adds	r3, #120	; 0x78
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	323c      	adds	r2, #60	; 0x3c
 80120e2:	4611      	mov	r1, r2
 80120e4:	4798      	blx	r3
    }
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	2000bfed 	.word	0x2000bfed

080120f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80120f8:	4b0b      	ldr	r3, [pc, #44]	; (8012128 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00e      	beq.n	801211e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00a      	beq.n	801211e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6858      	ldr	r0, [r3, #4]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3364      	adds	r3, #100	; 0x64
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	320c      	adds	r2, #12
 801211a:	4611      	mov	r1, r2
 801211c:	4798      	blx	r3
    }
 801211e:	bf00      	nop
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	2000bfed 	.word	0x2000bfed

0801212c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 801212c:	b580      	push	{r7, lr}
 801212e:	b088      	sub	sp, #32
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8012134:	4b1a      	ldr	r3, [pc, #104]	; (80121a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d02d      	beq.n	8012198 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	f7fe fdce 	bl	8010ce0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8012144:	4a17      	ldr	r2, [pc, #92]	; (80121a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8012146:	f107 0318 	add.w	r3, r7, #24
 801214a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801214e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012152:	f107 0008 	add.w	r0, r7, #8
 8012156:	f107 0318 	add.w	r3, r7, #24
 801215a:	cb0c      	ldmia	r3, {r2, r3}
 801215c:	6879      	ldr	r1, [r7, #4]
 801215e:	f7ff fe25 	bl	8011dac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	685a      	ldr	r2, [r3, #4]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	3378      	adds	r3, #120	; 0x78
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f107 0108 	add.w	r1, r7, #8
 8012174:	4610      	mov	r0, r2
 8012176:	4798      	blx	r3
            screenContainer->add(snapshot);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6858      	ldr	r0, [r3, #4]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	3360      	adds	r3, #96	; 0x60
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	320c      	adds	r2, #12
 801218a:	4611      	mov	r1, r2
 801218c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801218e:	f107 0308 	add.w	r3, r7, #8
 8012192:	4618      	mov	r0, r3
 8012194:	f7ff fc0c 	bl	80119b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8012198:	bf00      	nop
 801219a:	3720      	adds	r7, #32
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	2000bfed 	.word	0x2000bfed
 80121a4:	0802bfa0 	.word	0x0802bfa0

080121a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
        switch (direction)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80121b8:	2b03      	cmp	r3, #3
 80121ba:	d83b      	bhi.n	8012234 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 80121bc:	a201      	add	r2, pc, #4	; (adr r2, 80121c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 80121be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c2:	bf00      	nop
 80121c4:	08012205 	.word	0x08012205
 80121c8:	0801221f 	.word	0x0801221f
 80121cc:	080121d5 	.word	0x080121d5
 80121d0:	080121eb 	.word	0x080121eb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	3354      	adds	r3, #84	; 0x54
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4a18      	ldr	r2, [pc, #96]	; (8012240 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80121de:	8812      	ldrh	r2, [r2, #0]
 80121e0:	b211      	sxth	r1, r2
 80121e2:	2200      	movs	r2, #0
 80121e4:	6838      	ldr	r0, [r7, #0]
 80121e6:	4798      	blx	r3
            break;
 80121e8:	e025      	b.n	8012236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	3354      	adds	r3, #84	; 0x54
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4a13      	ldr	r2, [pc, #76]	; (8012240 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80121f4:	8812      	ldrh	r2, [r2, #0]
 80121f6:	4252      	negs	r2, r2
 80121f8:	b292      	uxth	r2, r2
 80121fa:	b211      	sxth	r1, r2
 80121fc:	2200      	movs	r2, #0
 80121fe:	6838      	ldr	r0, [r7, #0]
 8012200:	4798      	blx	r3
            break;
 8012202:	e018      	b.n	8012236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	3354      	adds	r3, #84	; 0x54
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a0d      	ldr	r2, [pc, #52]	; (8012244 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801220e:	8812      	ldrh	r2, [r2, #0]
 8012210:	4252      	negs	r2, r2
 8012212:	b292      	uxth	r2, r2
 8012214:	b212      	sxth	r2, r2
 8012216:	2100      	movs	r1, #0
 8012218:	6838      	ldr	r0, [r7, #0]
 801221a:	4798      	blx	r3
            break;
 801221c:	e00b      	b.n	8012236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	3354      	adds	r3, #84	; 0x54
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a07      	ldr	r2, [pc, #28]	; (8012244 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8012228:	8812      	ldrh	r2, [r2, #0]
 801222a:	b212      	sxth	r2, r2
 801222c:	2100      	movs	r1, #0
 801222e:	6838      	ldr	r0, [r7, #0]
 8012230:	4798      	blx	r3
            break;
 8012232:	e000      	b.n	8012236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8012234:	bf00      	nop
    }
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	2000bfe2 	.word	0x2000bfe2
 8012244:	2000bfe4 	.word	0x2000bfe4

08012248 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	68d2      	ldr	r2, [r2, #12]
 801225a:	1052      	asrs	r2, r2, #1
 801225c:	1898      	adds	r0, r3, r2
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	f003 0301 	and.w	r3, r3, #1
 8012266:	2b00      	cmp	r3, #0
 8012268:	d102      	bne.n	8012270 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	e00a      	b.n	8012286 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	68d2      	ldr	r2, [r2, #12]
 8012278:	1052      	asrs	r2, r2, #1
 801227a:	4413      	add	r3, r2
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	6892      	ldr	r2, [r2, #8]
 8012282:	4413      	add	r3, r2
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	4798      	blx	r3
    }
 801228a:	bf00      	nop
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012292:	b480      	push	{r7}
 8012294:	b083      	sub	sp, #12
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d010      	beq.n	80122c4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d107      	bne.n	80122ba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	f003 0301 	and.w	r3, r3, #1
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d101      	bne.n	80122ba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 80122b6:	2301      	movs	r3, #1
 80122b8:	e000      	b.n	80122bc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80122ba:	2300      	movs	r3, #0
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d001      	beq.n	80122c4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 80122c4:	2300      	movs	r3, #0
    }
 80122c6:	4618      	mov	r0, r3
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
	...

080122d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
    }
 80122dc:	4a0a      	ldr	r2, [pc, #40]	; (8012308 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	333c      	adds	r3, #60	; 0x3c
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff fc2c 	bl	8011b44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	330c      	adds	r3, #12
 80122f0:	4618      	mov	r0, r3
 80122f2:	f00a fe37 	bl	801cf64 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fe fcbd 	bl	8010c78 <_ZN8touchgfx10TransitionD1Ev>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	0802c7ac 	.word	0x0802c7ac

0801230c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
    }
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff ffdd 	bl	80122d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 801231a:	2154      	movs	r1, #84	; 0x54
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f018 fc36 	bl	802ab8e <_ZdlPvj>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8012334:	4b59      	ldr	r3, [pc, #356]	; (801249c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	f083 0301 	eor.w	r3, r3, #1
 801233c:	b2db      	uxtb	r3, r3
 801233e:	2b00      	cmp	r3, #0
 8012340:	d003      	beq.n	801234a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2201      	movs	r2, #1
 8012346:	721a      	strb	r2, [r3, #8]
            return;
 8012348:	e0a5      	b.n	8012496 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	f7fe fcb3 	bl	8010cb8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012358:	3301      	adds	r3, #1
 801235a:	b2da      	uxtb	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801236e:	429a      	cmp	r2, r3
 8012370:	d82f      	bhi.n	80123d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012378:	b298      	uxth	r0, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012386:	b29b      	uxth	r3, r3
 8012388:	2100      	movs	r1, #0
 801238a:	f00d fd24 	bl	801fdd6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801238e:	4603      	mov	r3, r0
 8012390:	461a      	mov	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801239e:	b29b      	uxth	r3, r3
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d01b      	beq.n	80123e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 80123b8:	2a00      	cmp	r2, #0
 80123ba:	dd01      	ble.n	80123c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 80123bc:	2201      	movs	r2, #1
 80123be:	e001      	b.n	80123c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 80123c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123c4:	4413      	add	r3, r2
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	b21a      	sxth	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80123d0:	e007      	b.n	80123e2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2201      	movs	r2, #1
 80123d6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80123e0:	e059      	b.n	8012496 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80123e8:	2b03      	cmp	r3, #3
 80123ea:	d845      	bhi.n	8012478 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80123ec:	a201      	add	r2, pc, #4	; (adr r2, 80123f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80123ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123f2:	bf00      	nop
 80123f4:	0801243f 	.word	0x0801243f
 80123f8:	0801243f 	.word	0x0801243f
 80123fc:	08012405 	.word	0x08012405
 8012400:	08012405 	.word	0x08012405
            calculatedValue -= snapshot.getX();
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	330c      	adds	r3, #12
 8012408:	4618      	mov	r0, r3
 801240a:	f7fe fcda 	bl	8010dc2 <_ZNK8touchgfx8Drawable4getXEv>
 801240e:	4603      	mov	r3, r0
 8012410:	4619      	mov	r1, r3
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012418:	b29a      	uxth	r2, r3
 801241a:	b28b      	uxth	r3, r1
 801241c:	1ad3      	subs	r3, r2, r3
 801241e:	b29b      	uxth	r3, r3
 8012420:	b21a      	sxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f103 000c 	add.w	r0, r3, #12
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012434:	2200      	movs	r2, #0
 8012436:	4619      	mov	r1, r3
 8012438:	f00d f804 	bl	801f444 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801243c:	e020      	b.n	8012480 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	330c      	adds	r3, #12
 8012442:	4618      	mov	r0, r3
 8012444:	f7fe fcca 	bl	8010ddc <_ZNK8touchgfx8Drawable4getYEv>
 8012448:	4603      	mov	r3, r0
 801244a:	4619      	mov	r1, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012452:	b29a      	uxth	r2, r3
 8012454:	b28b      	uxth	r3, r1
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	b29b      	uxth	r3, r3
 801245a:	b21a      	sxth	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f103 000c 	add.w	r0, r3, #12
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801246e:	461a      	mov	r2, r3
 8012470:	2100      	movs	r1, #0
 8012472:	f00c ffe7 	bl	801f444 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012476:	e003      	b.n	8012480 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2201      	movs	r2, #1
 801247c:	721a      	strb	r2, [r3, #8]
            break;
 801247e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6858      	ldr	r0, [r3, #4]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	3378      	adds	r3, #120	; 0x78
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	323c      	adds	r2, #60	; 0x3c
 8012492:	4611      	mov	r1, r2
 8012494:	4798      	blx	r3
    }
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	2000bfed 	.word	0x2000bfed

080124a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80124a8:	4b0b      	ldr	r3, [pc, #44]	; (80124d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00a      	beq.n	80124ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6858      	ldr	r0, [r3, #4]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3364      	adds	r3, #100	; 0x64
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	320c      	adds	r2, #12
 80124ca:	4611      	mov	r1, r2
 80124cc:	4798      	blx	r3
    }
 80124ce:	bf00      	nop
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	2000bfed 	.word	0x2000bfed

080124dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80124dc:	b580      	push	{r7, lr}
 80124de:	b088      	sub	sp, #32
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80124e4:	4b1a      	ldr	r3, [pc, #104]	; (8012550 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d02d      	beq.n	8012548 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fe fbf6 	bl	8010ce0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80124f4:	4a17      	ldr	r2, [pc, #92]	; (8012554 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80124f6:	f107 0318 	add.w	r3, r7, #24
 80124fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8012502:	f107 0008 	add.w	r0, r7, #8
 8012506:	f107 0318 	add.w	r3, r7, #24
 801250a:	cb0c      	ldmia	r3, {r2, r3}
 801250c:	6879      	ldr	r1, [r7, #4]
 801250e:	f7ff fcc7 	bl	8011ea0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3378      	adds	r3, #120	; 0x78
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f107 0108 	add.w	r1, r7, #8
 8012524:	4610      	mov	r0, r2
 8012526:	4798      	blx	r3
            screenContainer->add(snapshot);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6858      	ldr	r0, [r3, #4]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	3360      	adds	r3, #96	; 0x60
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	320c      	adds	r2, #12
 801253a:	4611      	mov	r1, r2
 801253c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801253e:	f107 0308 	add.w	r3, r7, #8
 8012542:	4618      	mov	r0, r3
 8012544:	f7ff fafe 	bl	8011b44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8012548:	bf00      	nop
 801254a:	3720      	adds	r7, #32
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	2000bfed 	.word	0x2000bfed
 8012554:	0802bfa8 	.word	0x0802bfa8

08012558 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
        switch (direction)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012568:	2b03      	cmp	r3, #3
 801256a:	d83b      	bhi.n	80125e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801256c:	a201      	add	r2, pc, #4	; (adr r2, 8012574 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012572:	bf00      	nop
 8012574:	080125b5 	.word	0x080125b5
 8012578:	080125cf 	.word	0x080125cf
 801257c:	08012585 	.word	0x08012585
 8012580:	0801259b 	.word	0x0801259b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	3354      	adds	r3, #84	; 0x54
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4a18      	ldr	r2, [pc, #96]	; (80125f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801258e:	8812      	ldrh	r2, [r2, #0]
 8012590:	b211      	sxth	r1, r2
 8012592:	2200      	movs	r2, #0
 8012594:	6838      	ldr	r0, [r7, #0]
 8012596:	4798      	blx	r3
            break;
 8012598:	e025      	b.n	80125e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	3354      	adds	r3, #84	; 0x54
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	4a13      	ldr	r2, [pc, #76]	; (80125f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80125a4:	8812      	ldrh	r2, [r2, #0]
 80125a6:	4252      	negs	r2, r2
 80125a8:	b292      	uxth	r2, r2
 80125aa:	b211      	sxth	r1, r2
 80125ac:	2200      	movs	r2, #0
 80125ae:	6838      	ldr	r0, [r7, #0]
 80125b0:	4798      	blx	r3
            break;
 80125b2:	e018      	b.n	80125e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3354      	adds	r3, #84	; 0x54
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4a0d      	ldr	r2, [pc, #52]	; (80125f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80125be:	8812      	ldrh	r2, [r2, #0]
 80125c0:	4252      	negs	r2, r2
 80125c2:	b292      	uxth	r2, r2
 80125c4:	b212      	sxth	r2, r2
 80125c6:	2100      	movs	r1, #0
 80125c8:	6838      	ldr	r0, [r7, #0]
 80125ca:	4798      	blx	r3
            break;
 80125cc:	e00b      	b.n	80125e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3354      	adds	r3, #84	; 0x54
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80125d8:	8812      	ldrh	r2, [r2, #0]
 80125da:	b212      	sxth	r2, r2
 80125dc:	2100      	movs	r1, #0
 80125de:	6838      	ldr	r0, [r7, #0]
 80125e0:	4798      	blx	r3
            break;
 80125e2:	e000      	b.n	80125e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80125e4:	bf00      	nop
    }
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	2000bfe2 	.word	0x2000bfe2
 80125f4:	2000bfe4 	.word	0x2000bfe4

080125f8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	687a      	ldr	r2, [r7, #4]
 8012608:	68d2      	ldr	r2, [r2, #12]
 801260a:	1052      	asrs	r2, r2, #1
 801260c:	1898      	adds	r0, r3, r2
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	f003 0301 	and.w	r3, r3, #1
 8012616:	2b00      	cmp	r3, #0
 8012618:	d102      	bne.n	8012620 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	e00a      	b.n	8012636 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	68d2      	ldr	r2, [r2, #12]
 8012628:	1052      	asrs	r2, r2, #1
 801262a:	4413      	add	r3, r2
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	6892      	ldr	r2, [r2, #8]
 8012632:	4413      	add	r3, r2
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	6839      	ldr	r1, [r7, #0]
 8012638:	4798      	blx	r3
    }
 801263a:	bf00      	nop
 801263c:	3708      	adds	r7, #8
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012642:	b480      	push	{r7}
 8012644:	b083      	sub	sp, #12
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d010      	beq.n	8012674 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d107      	bne.n	801266a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	f003 0301 	and.w	r3, r3, #1
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012666:	2301      	movs	r3, #1
 8012668:	e000      	b.n	801266c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801266a:	2300      	movs	r3, #0
 801266c:	2b01      	cmp	r3, #1
 801266e:	d001      	beq.n	8012674 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012670:	2301      	movs	r3, #1
 8012672:	e000      	b.n	8012676 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012674:	2300      	movs	r3, #0
    }
 8012676:	4618      	mov	r0, r3
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8012682:	b580      	push	{r7, lr}
 8012684:	b082      	sub	sp, #8
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	687a      	ldr	r2, [r7, #4]
 8012690:	68d2      	ldr	r2, [r2, #12]
 8012692:	1052      	asrs	r2, r2, #1
 8012694:	1899      	adds	r1, r3, r2
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d102      	bne.n	80126a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	e00a      	b.n	80126be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	68d2      	ldr	r2, [r2, #12]
 80126b0:	1052      	asrs	r2, r2, #1
 80126b2:	4413      	add	r3, r2
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	6892      	ldr	r2, [r2, #8]
 80126ba:	4413      	add	r3, r2
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	4608      	mov	r0, r1
 80126c0:	4798      	blx	r3
    }
 80126c2:	bf00      	nop
 80126c4:	3708      	adds	r7, #8
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80126ca:	b480      	push	{r7}
 80126cc:	b083      	sub	sp, #12
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d010      	beq.n	80126fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d107      	bne.n	80126f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	f003 0301 	and.w	r3, r3, #1
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d101      	bne.n	80126f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80126ee:	2301      	movs	r3, #1
 80126f0:	e000      	b.n	80126f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80126f2:	2300      	movs	r3, #0
 80126f4:	2b01      	cmp	r3, #1
 80126f6:	d001      	beq.n	80126fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80126f8:	2301      	movs	r3, #1
 80126fa:	e000      	b.n	80126fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80126fc:	2300      	movs	r3, #0
    }
 80126fe:	4618      	mov	r0, r3
 8012700:	370c      	adds	r7, #12
 8012702:	46bd      	mov	sp, r7
 8012704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012708:	4770      	bx	lr

0801270a <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 801270a:	b480      	push	{r7}
 801270c:	b083      	sub	sp, #12
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2200      	movs	r2, #0
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	4618      	mov	r0, r3
 801271c:	370c      	adds	r7, #12
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr

08012726 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8012726:	b480      	push	{r7}
 8012728:	b083      	sub	sp, #12
 801272a:	af00      	add	r7, sp, #0
 801272c:	6078      	str	r0, [r7, #4]
 801272e:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	683a      	ldr	r2, [r7, #0]
 8012734:	601a      	str	r2, [r3, #0]
    }
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4618      	mov	r0, r3
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr

08012744 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2200      	movs	r2, #0
 801275c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2200      	movs	r2, #0
 8012762:	80da      	strh	r2, [r3, #6]
    }
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012772:	b480      	push	{r7}
 8012774:	b085      	sub	sp, #20
 8012776:	af00      	add	r7, sp, #0
 8012778:	60f8      	str	r0, [r7, #12]
 801277a:	4608      	mov	r0, r1
 801277c:	4611      	mov	r1, r2
 801277e:	461a      	mov	r2, r3
 8012780:	4603      	mov	r3, r0
 8012782:	817b      	strh	r3, [r7, #10]
 8012784:	460b      	mov	r3, r1
 8012786:	813b      	strh	r3, [r7, #8]
 8012788:	4613      	mov	r3, r2
 801278a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	897a      	ldrh	r2, [r7, #10]
 8012790:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	893a      	ldrh	r2, [r7, #8]
 8012796:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	88fa      	ldrh	r2, [r7, #6]
 801279c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	8b3a      	ldrh	r2, [r7, #24]
 80127a2:	80da      	strh	r2, [r3, #6]
    }
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	4618      	mov	r0, r3
 80127a8:	3714      	adds	r7, #20
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr

080127b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 80127b2:	b480      	push	{r7}
 80127b4:	b083      	sub	sp, #12
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
    {
        return _type;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	791b      	ldrb	r3, [r3, #4]
    }
 80127be:	4618      	mov	r0, r3
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80127ca:	b480      	push	{r7}
 80127cc:	b083      	sub	sp, #12
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
 80127d2:	460b      	mov	r3, r1
 80127d4:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	887a      	ldrh	r2, [r7, #2]
 80127da:	801a      	strh	r2, [r3, #0]
    {
    }
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	370c      	adds	r7, #12
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr
	...

080127ec <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af02      	add	r7, sp, #8
 80127f2:	6078      	str	r0, [r7, #4]
        visible(true)
 80127f4:	4a13      	ldr	r2, [pc, #76]	; (8012844 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	1d18      	adds	r0, r3, #4
 80127fe:	2300      	movs	r3, #0
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	2300      	movs	r3, #0
 8012804:	2200      	movs	r2, #0
 8012806:	2100      	movs	r1, #0
 8012808:	f7ff ffb3 	bl	8012772 <_ZN8touchgfx4RectC1Essss>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	330c      	adds	r3, #12
 8012810:	4618      	mov	r0, r3
 8012812:	f7ff ff97 	bl	8012744 <_ZN8touchgfx4RectC1Ev>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2200      	movs	r2, #0
 801281a:	615a      	str	r2, [r3, #20]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	619a      	str	r2, [r3, #24]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	61da      	str	r2, [r3, #28]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2201      	movs	r2, #1
 8012834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	3708      	adds	r7, #8
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	0802f2cc 	.word	0x0802f2cc

08012848 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	4a04      	ldr	r2, [pc, #16]	; (8012864 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr
 8012864:	0802f2cc 	.word	0x0802f2cc

08012868 <_ZN8touchgfx8DrawableD0Ev>:
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff ffe9 	bl	8012848 <_ZN8touchgfx8DrawableD1Ev>
 8012876:	2128      	movs	r1, #40	; 0x28
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f018 f988 	bl	802ab8e <_ZdlPvj>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4618      	mov	r0, r3
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	887a      	ldrh	r2, [r7, #2]
 8012898:	809a      	strh	r2, [r3, #4]
    }
 801289a:	bf00      	nop
 801289c:	370c      	adds	r7, #12
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80128a6:	b480      	push	{r7}
 80128a8:	b083      	sub	sp, #12
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	460b      	mov	r3, r1
 80128b0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	887a      	ldrh	r2, [r7, #2]
 80128b6:	80da      	strh	r2, [r3, #6]
    }
 80128b8:	bf00      	nop
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	460b      	mov	r3, r1
 80128ce:	807b      	strh	r3, [r7, #2]
 80128d0:	4613      	mov	r3, r2
 80128d2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	332c      	adds	r3, #44	; 0x2c
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80128e0:	4611      	mov	r1, r2
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	4798      	blx	r3
        setY(y);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3330      	adds	r3, #48	; 0x30
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80128f2:	4611      	mov	r1, r2
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	4798      	blx	r3
    }
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8012900:	b480      	push	{r7}
 8012902:	b083      	sub	sp, #12
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	887a      	ldrh	r2, [r7, #2]
 8012910:	811a      	strh	r2, [r3, #8]
    }
 8012912:	bf00      	nop
 8012914:	370c      	adds	r7, #12
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr

0801291e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801291e:	b480      	push	{r7}
 8012920:	b083      	sub	sp, #12
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
 8012926:	460b      	mov	r3, r1
 8012928:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	887a      	ldrh	r2, [r7, #2]
 801292e:	815a      	strh	r2, [r3, #10]
    }
 8012930:	bf00      	nop
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	bf00      	nop
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
 801295a:	bf00      	nop
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	6039      	str	r1, [r7, #0]
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
 8012986:	bf00      	nop
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8012992:	b480      	push	{r7}
 8012994:	b083      	sub	sp, #12
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	bf00      	nop
 801299c:	370c      	adds	r7, #12
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
 80129ae:	460b      	mov	r3, r1
 80129b0:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	78fa      	ldrb	r2, [r7, #3]
 80129b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80129ba:	bf00      	nop
 80129bc:	370c      	adds	r7, #12
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr

080129c6 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80129c6:	b480      	push	{r7}
 80129c8:	b083      	sub	sp, #12
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	460b      	mov	r3, r1
 80129d0:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	78fa      	ldrb	r2, [r7, #3]
 80129d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80129da:	bf00      	nop
 80129dc:	370c      	adds	r7, #12
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr

080129e6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80129e6:	b480      	push	{r7}
 80129e8:	b083      	sub	sp, #12
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80129f4:	4618      	mov	r0, r3
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012a0e:	4618      	mov	r0, r3
 8012a10:	370c      	adds	r7, #12
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr

08012a1a <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b082      	sub	sp, #8
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	460b      	mov	r3, r1
 8012a24:	807b      	strh	r3, [r7, #2]
 8012a26:	4613      	mov	r3, r2
 8012a28:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3354      	adds	r3, #84	; 0x54
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	8879      	ldrh	r1, [r7, #2]
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8012a3a:	b292      	uxth	r2, r2
 8012a3c:	1a8a      	subs	r2, r1, r2
 8012a3e:	b292      	uxth	r2, r2
 8012a40:	b210      	sxth	r0, r2
 8012a42:	8839      	ldrh	r1, [r7, #0]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012a4a:	b292      	uxth	r2, r2
 8012a4c:	1a8a      	subs	r2, r1, r2
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	b212      	sxth	r2, r2
 8012a52:	4601      	mov	r1, r0
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	4798      	blx	r3
    }
 8012a58:	bf00      	nop
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a6e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a76:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a7e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012a80:	bf00      	nop
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr

08012a8c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	60f8      	str	r0, [r7, #12]
 8012a94:	60b9      	str	r1, [r7, #8]
 8012a96:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f7ff ffe1 	bl	8012a60 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]
    }
 8012aac:	bf00      	nop
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
        firstChild(0)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ff fe94 	bl	80127ec <_ZN8touchgfx8DrawableC1Ev>
 8012ac4:	4a05      	ldr	r2, [pc, #20]	; (8012adc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2200      	movs	r2, #0
 8012ace:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	0802deb0 	.word	0x0802deb0

08012ae0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	4a05      	ldr	r2, [pc, #20]	; (8012b00 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	601a      	str	r2, [r3, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fea9 	bl	8012848 <_ZN8touchgfx8DrawableD1Ev>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	3708      	adds	r7, #8
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	0802deb0 	.word	0x0802deb0

08012b04 <_ZN8touchgfx9ContainerD0Ev>:
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ff ffe7 	bl	8012ae0 <_ZN8touchgfx9ContainerD1Ev>
 8012b12:	212c      	movs	r1, #44	; 0x2c
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f018 f83a 	bl	802ab8e <_ZdlPvj>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	4a06      	ldr	r2, [pc, #24]	; (8012b48 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	601a      	str	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	3304      	adds	r3, #4
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff ffd2 	bl	8012ae0 <_ZN8touchgfx9ContainerD1Ev>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	0802f3c4 	.word	0x0802f3c4

08012b4c <_ZN8touchgfx6ScreenD0Ev>:
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff ffe5 	bl	8012b24 <_ZN8touchgfx6ScreenD1Ev>
 8012b5a:	213c      	movs	r1, #60	; 0x3c
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f018 f816 	bl	802ab8e <_ZdlPvj>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	3708      	adds	r7, #8
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	bf00      	nop
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	bf00      	nop
 8012b8a:	370c      	adds	r7, #12
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr

08012b94 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8012b94:	b480      	push	{r7}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	bf00      	nop
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012ba8:	b480      	push	{r7}
 8012baa:	b083      	sub	sp, #12
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
    {
    }
 8012bb0:	bf00      	nop
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	3304      	adds	r3, #4
 8012be2:	6839      	ldr	r1, [r7, #0]
 8012be4:	4618      	mov	r0, r3
 8012be6:	f008 fc4f 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8012bea:	bf00      	nop
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
	...

08012bf4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7ff fdf4 	bl	80127ec <_ZN8touchgfx8DrawableC1Ev>
 8012c04:	4a03      	ldr	r2, [pc, #12]	; (8012c14 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	601a      	str	r2, [r3, #0]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	0802cf2c 	.word	0x0802cf2c

08012c18 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	4a05      	ldr	r2, [pc, #20]	; (8012c38 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7ff fe0d 	bl	8012848 <_ZN8touchgfx8DrawableD1Ev>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0802cf2c 	.word	0x0802cf2c

08012c3c <_ZN8touchgfx6WidgetD0Ev>:
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ffe7 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 8012c4a:	2128      	movs	r1, #40	; 0x28
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f017 ff9e 	bl	802ab8e <_ZdlPvj>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	607b      	str	r3, [r7, #4]
 8012c66:	460b      	mov	r3, r1
 8012c68:	817b      	strh	r3, [r7, #10]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7ff feb8 	bl	80129e6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d008      	beq.n	8012c8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff febe 	bl	8012a00 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e000      	b.n	8012c90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	601a      	str	r2, [r3, #0]
        }
    }
 8012c9a:	bf00      	nop
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
	...

08012ca4 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7ff ffa0 	bl	8012bf4 <_ZN8touchgfx6WidgetC1Ev>
 8012cb4:	4a0a      	ldr	r2, [pc, #40]	; (8012ce0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	601a      	str	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	22ff      	movs	r2, #255	; 0xff
 8012cbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	3328      	adds	r3, #40	; 0x28
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff fd2c 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3708      	adds	r7, #8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	0802ecc4 	.word	0x0802ecc4

08012ce4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	4a05      	ldr	r2, [pc, #20]	; (8012d04 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	601a      	str	r2, [r3, #0]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff ff8f 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	0802ecc4 	.word	0x0802ecc4

08012d08 <_ZN8touchgfx3BoxD0Ev>:
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7ff ffe7 	bl	8012ce4 <_ZN8touchgfx3BoxD1Ev>
 8012d16:	2130      	movs	r1, #48	; 0x30
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f017 ff38 	bl	802ab8e <_ZdlPvj>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	683a      	ldr	r2, [r7, #0]
 8012d36:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	807b      	strh	r3, [r7, #2]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	887a      	ldrh	r2, [r7, #2]
 8012d54:	801a      	strh	r2, [r3, #0]
    }
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
        assertValid();
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7fd fc5b 	bl	8010628 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012d72:	4b06      	ldr	r3, [pc, #24]	; (8012d8c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	881b      	ldrh	r3, [r3, #0]
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	4610      	mov	r0, r2
 8012d7e:	f004 f8a7 	bl	8016ed0 <_ZNK8touchgfx5Texts7getTextEt>
 8012d82:	4603      	mov	r3, r0
    }
 8012d84:	4618      	mov	r0, r3
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	2000c08c 	.word	0x2000c08c

08012d90 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7ff ff2a 	bl	8012bf4 <_ZN8touchgfx6WidgetC1Ev>
 8012da0:	4a13      	ldr	r2, [pc, #76]	; (8012df0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	601a      	str	r2, [r3, #0]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	3326      	adds	r3, #38	; 0x26
 8012daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7ff ffc8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3328      	adds	r3, #40	; 0x28
 8012db8:	2100      	movs	r1, #0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff fcb3 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	22ff      	movs	r2, #255	; 0xff
 8012dca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2200      	movs	r2, #0
 8012de2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	4618      	mov	r0, r3
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	0802ec48 	.word	0x0802ec48

08012df4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af02      	add	r7, sp, #8
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8012dfe:	2300      	movs	r3, #0
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	2300      	movs	r3, #0
 8012e04:	2200      	movs	r2, #0
 8012e06:	2100      	movs	r1, #0
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f7ff fcb2 	bl	8012772 <_ZN8touchgfx4RectC1Essss>
    }
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	3708      	adds	r7, #8
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012e16:	b480      	push	{r7}
 8012e18:	b083      	sub	sp, #12
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	683a      	ldr	r2, [r7, #0]
 8012e24:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012e26:	bf00      	nop
 8012e28:	370c      	adds	r7, #12
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e34:	b085      	sub	sp, #20
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8012e3e:	687e      	ldr	r6, [r7, #4]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	3330      	adds	r3, #48	; 0x30
 8012e46:	681c      	ldr	r4, [r3, #0]
 8012e48:	887d      	ldrh	r5, [r7, #2]
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 f845 	bl	8012eda <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012e50:	4603      	mov	r3, r0
 8012e52:	81bb      	strh	r3, [r7, #12]
 8012e54:	f107 030c 	add.w	r3, r7, #12
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fd fbb1 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	6813      	ldr	r3, [r2, #0]
 8012e62:	332c      	adds	r3, #44	; 0x2c
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4610      	mov	r0, r2
 8012e68:	4798      	blx	r3
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	1aeb      	subs	r3, r5, r3
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	b21b      	sxth	r3, r3
 8012e72:	4619      	mov	r1, r3
 8012e74:	4630      	mov	r0, r6
 8012e76:	47a0      	blx	r4
    }
 8012e78:	bf00      	nop
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e80 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	460b      	mov	r3, r1
 8012e8a:	807b      	strh	r3, [r7, #2]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	332c      	adds	r3, #44	; 0x2c
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012e9e:	4610      	mov	r0, r2
 8012ea0:	4798      	blx	r3
        setBaselineY(baselineY);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	3360      	adds	r3, #96	; 0x60
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012eae:	4611      	mov	r1, r2
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	4798      	blx	r3
    }
 8012eb4:	bf00      	nop
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	887a      	ldrh	r2, [r7, #2]
 8012ecc:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8012ece:	bf00      	nop
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8012eda:	b480      	push	{r7}
 8012edc:	b083      	sub	sp, #12
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	370c      	adds	r7, #12
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
	...

08012ef4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7ff fe87 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	0802ec48 	.word	0x0802ec48

08012f18 <_ZN8touchgfx8TextAreaD0Ev>:
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f7ff ffe7 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8012f26:	2134      	movs	r1, #52	; 0x34
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f017 fe30 	bl	802ab8e <_ZdlPvj>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7ff ff24 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8012f48:	4a03      	ldr	r2, [pc, #12]	; (8012f58 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	601a      	str	r2, [r3, #0]
    {
    }
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	4618      	mov	r0, r3
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	0802ceb0 	.word	0x0802ceb0

08012f5c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	4a05      	ldr	r2, [pc, #20]	; (8012f7c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	601a      	str	r2, [r3, #0]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff ffc1 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	0802ceb0 	.word	0x0802ceb0

08012f80 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f7ff ffe7 	bl	8012f5c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012f8e:	2134      	movs	r1, #52	; 0x34
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f017 fdfc 	bl	802ab8e <_ZdlPvj>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff ffc4 	bl	8012f38 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012fb0:	4a05      	ldr	r2, [pc, #20]	; (8012fc8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3708      	adds	r7, #8
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	0802ee54 	.word	0x0802ee54

08012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012fdc:	bf00      	nop
 8012fde:	370c      	adds	r7, #12
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff fdfd 	bl	8012bf4 <_ZN8touchgfx6WidgetC1Ev>
 8012ffa:	4a0b      	ldr	r2, [pc, #44]	; (8013028 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	601a      	str	r2, [r3, #0]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	3326      	adds	r3, #38	; 0x26
 8013004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013008:	4618      	mov	r0, r3
 801300a:	f7ff fbde 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	22ff      	movs	r2, #255	; 0xff
 8013012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8013016:	6839      	ldr	r1, [r7, #0]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f00a fd07 	bl	801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	0802ef38 	.word	0x0802ef38

0801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	6039      	str	r1, [r7, #0]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	683a      	ldr	r2, [r7, #0]
 801303a:	601a      	str	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801304a:	b480      	push	{r7}
 801304c:	b083      	sub	sp, #12
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
        {
            return v;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
        }
 8013056:	4618      	mov	r0, r3
 8013058:	370c      	adds	r7, #12
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr

08013062 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8013062:	b590      	push	{r4, r7, lr}
 8013064:	b083      	sub	sp, #12
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
 801306a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	3340      	adds	r3, #64	; 0x40
 8013070:	4618      	mov	r0, r3
 8013072:	f7ff ffea 	bl	801304a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013076:	4604      	mov	r4, r0
 8013078:	463b      	mov	r3, r7
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ffe5 	bl	801304a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013080:	4603      	mov	r3, r0
 8013082:	429c      	cmp	r4, r3
 8013084:	bf0c      	ite	eq
 8013086:	2301      	moveq	r3, #1
 8013088:	2300      	movne	r3, #0
 801308a:	b2db      	uxtb	r3, r3
 801308c:	2b00      	cmp	r3, #0
 801308e:	d106      	bne.n	801309e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	683a      	ldr	r2, [r7, #0]
 8013094:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f009 fd5e 	bl	801cb58 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801309c:	e000      	b.n	80130a0 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801309e:	bf00      	nop
    }
 80130a0:	370c      	adds	r7, #12
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd90      	pop	{r4, r7, pc}
	...

080130a8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	4a05      	ldr	r2, [pc, #20]	; (80130c8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	f009 fb61 	bl	801c780 <_ZN8touchgfx15AbstractPainterD1Ev>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	0802e6c0 	.word	0x0802e6c0

080130cc <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7ff ffe7 	bl	80130a8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80130da:	2114      	movs	r1, #20
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f017 fd56 	bl	802ab8e <_ZdlPvj>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4618      	mov	r0, r3
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	4a05      	ldr	r2, [pc, #20]	; (801310c <_ZN8touchgfx5ImageD1Ev+0x20>)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff fd8b 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4618      	mov	r0, r3
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	0802ef38 	.word	0x0802ef38

08013110 <_ZN8touchgfx5ImageD0Ev>:
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7ff ffe7 	bl	80130ec <_ZN8touchgfx5ImageD1Ev>
 801311e:	212c      	movs	r1, #44	; 0x2c
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f017 fd34 	bl	802ab8e <_ZdlPvj>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4618      	mov	r0, r3
 801313c:	f7ff fcba 	bl	8012ab4 <_ZN8touchgfx9ContainerC1Ev>
 8013140:	4a0b      	ldr	r2, [pc, #44]	; (8013170 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	601a      	str	r2, [r3, #0]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	22ff      	movs	r2, #255	; 0xff
 8013152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2200      	movs	r2, #0
 801315a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2101      	movs	r1, #1
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fc30 	bl	80129c6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	0802ce1c 	.word	0x0802ce1c

08013174 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	4a05      	ldr	r2, [pc, #20]	; (8013194 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	f7ff fcab 	bl	8012ae0 <_ZN8touchgfx9ContainerD1Ev>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	0802ce1c 	.word	0x0802ce1c

08013198 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff ffe7 	bl	8013174 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80131a6:	2134      	movs	r1, #52	; 0x34
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f017 fcf0 	bl	802ab8e <_ZdlPvj>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4618      	mov	r0, r3
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	460b      	mov	r3, r1
 80131c2:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	78fa      	ldrb	r2, [r7, #3]
 80131c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	3384      	adds	r3, #132	; 0x84
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	4798      	blx	r3
    }
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 80131ee:	4618      	mov	r0, r3
 80131f0:	370c      	adds	r7, #12
 80131f2:	46bd      	mov	sp, r7
 80131f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f8:	4770      	bx	lr

080131fa <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b082      	sub	sp, #8
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	460b      	mov	r3, r1
 8013204:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	78fa      	ldrb	r2, [r7, #3]
 801320a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	3388      	adds	r3, #136	; 0x88
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	4798      	blx	r3
    }
 801321a:	bf00      	nop
 801321c:	3708      	adds	r7, #8
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}

08013222 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8013222:	b480      	push	{r7}
 8013224:	b083      	sub	sp, #12
 8013226:	af00      	add	r7, sp, #0
 8013228:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8013230:	4618      	mov	r0, r3
 8013232:	370c      	adds	r7, #12
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr

0801323c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	683a      	ldr	r2, [r7, #0]
 801324a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801324c:	bf00      	nop
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr

08013258 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	bf00      	nop
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr

08013280 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff ff50 	bl	8013130 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8013290:	4a03      	ldr	r2, [pc, #12]	; (80132a0 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	0802cd70 	.word	0x0802cd70

080132a4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	4a05      	ldr	r2, [pc, #20]	; (80132c4 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	601a      	str	r2, [r3, #0]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7ff ff5d 	bl	8013174 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4618      	mov	r0, r3
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	0802cd70 	.word	0x0802cd70

080132c8 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7ff ffe7 	bl	80132a4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 80132d6:	2134      	movs	r1, #52	; 0x34
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f017 fc58 	bl	802ab8e <_ZdlPvj>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4618      	mov	r0, r3
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7ff ff73 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80132fa:	4603      	mov	r3, r0
 80132fc:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80132fe:	6838      	ldr	r0, [r7, #0]
 8013300:	f7ff fa57 	bl	80127b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	bf0c      	ite	eq
 801330a:	2301      	moveq	r3, #1
 801330c:	2300      	movne	r3, #0
 801330e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8013310:	7bbb      	ldrb	r3, [r7, #14]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d005      	beq.n	8013322 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	f083 0301 	eor.w	r3, r3, #1
 801331c:	b2db      	uxtb	r3, r3
 801331e:	2b00      	cmp	r3, #0
 8013320:	d108      	bne.n	8013334 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8013322:	7bbb      	ldrb	r3, [r7, #14]
 8013324:	f083 0301 	eor.w	r3, r3, #1
 8013328:	b2db      	uxtb	r3, r3
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00f      	beq.n	801334e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 801332e:	7bfb      	ldrb	r3, [r7, #15]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00c      	beq.n	801334e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7bba      	ldrb	r2, [r7, #14]
 8013338:	4611      	mov	r1, r2
 801333a:	4618      	mov	r0, r3
 801333c:	f7ff ff3c 	bl	80131b8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3314      	adds	r3, #20
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4610      	mov	r0, r2
 801334c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 801334e:	7bbb      	ldrb	r3, [r7, #14]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d019      	beq.n	8013388 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013358:	2b00      	cmp	r3, #0
 801335a:	d015      	beq.n	8013388 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	330c      	adds	r3, #12
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4610      	mov	r0, r2
 801336c:	4798      	blx	r3
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d009      	beq.n	8013388 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3308      	adds	r3, #8
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	6879      	ldr	r1, [r7, #4]
 8013384:	4610      	mov	r0, r2
 8013386:	4798      	blx	r3
            }
        }
    }
 8013388:	bf00      	nop
 801338a:	3710      	adds	r7, #16
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4618      	mov	r0, r3
 801339c:	f7ff fc2a 	bl	8012bf4 <_ZN8touchgfx6WidgetC1Ev>
 80133a0:	4a0d      	ldr	r2, [pc, #52]	; (80133d8 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	601a      	str	r2, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	22ff      	movs	r2, #255	; 0xff
 80133aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	3328      	adds	r3, #40	; 0x28
 80133b2:	2100      	movs	r1, #0
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff f9b6 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	332c      	adds	r3, #44	; 0x2c
 80133be:	2100      	movs	r1, #0
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff f9b0 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	4618      	mov	r0, r3
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	0802eed0 	.word	0x0802eed0

080133dc <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	4a05      	ldr	r2, [pc, #20]	; (80133fc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	601a      	str	r2, [r3, #0]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7ff fc13 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	0802eed0 	.word	0x0802eed0

08013400 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ff ffe7 	bl	80133dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 801340e:	2134      	movs	r1, #52	; 0x34
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f017 fbbc 	bl	802ab8e <_ZdlPvj>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8013420:	b480      	push	{r7}
 8013422:	b083      	sub	sp, #12
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	683a      	ldr	r2, [r7, #0]
 801342e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013430:	bf00      	nop
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	683a      	ldr	r2, [r7, #0]
 801344a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801344c:	bf00      	nop
 801344e:	370c      	adds	r7, #12
 8013450:	46bd      	mov	sp, r7
 8013452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013456:	4770      	bx	lr

08013458 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	460b      	mov	r3, r1
 8013462:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	78fa      	ldrb	r2, [r7, #3]
 8013468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801346c:	bf00      	nop
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	460b      	mov	r3, r1
 8013482:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	78fa      	ldrb	r2, [r7, #3]
 8013488:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801348c:	bf00      	nop
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	4a05      	ldr	r2, [pc, #20]	; (80134b8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	601a      	str	r2, [r3, #0]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7ff fb3b 	bl	8012b24 <_ZN8touchgfx6ScreenD1Ev>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	0802cd3c 	.word	0x0802cd3c

080134bc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7ff ffe7 	bl	8013498 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80134ca:	2140      	movs	r1, #64	; 0x40
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f017 fb5e 	bl	802ab8e <_ZdlPvj>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	4618      	mov	r0, r3
 80134d6:	3708      	adds	r7, #8
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}

080134dc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	4a90      	ldr	r2, [pc, #576]	; (8013728 <_ZN12MainViewBaseD1Ev+0x24c>)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	601a      	str	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 80134f0:	4618      	mov	r0, r3
 80134f2:	f002 f9bd 	bl	8015870 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fcf9 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8013508:	4618      	mov	r0, r3
 801350a:	f002 f9d3 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8013514:	4618      	mov	r0, r3
 8013516:	f001 ffff 	bl	8015518 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013520:	4618      	mov	r0, r3
 8013522:	f002 f9c7 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801352c:	4618      	mov	r0, r3
 801352e:	f7ff fce1 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8013538:	4618      	mov	r0, r3
 801353a:	f002 f9bb 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013544:	4618      	mov	r0, r3
 8013546:	f7ff fcd5 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013550:	4618      	mov	r0, r3
 8013552:	f002 f9af 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801355c:	4618      	mov	r0, r3
 801355e:	f002 f9a9 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013568:	4618      	mov	r0, r3
 801356a:	f002 f9a3 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff fcbd 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013580:	4618      	mov	r0, r3
 8013582:	f002 f997 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801358c:	4618      	mov	r0, r3
 801358e:	f007 fc7f 	bl	801ae90 <_ZN8touchgfx13ImageProgressD1Ev>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013598:	4618      	mov	r0, r3
 801359a:	f002 f98b 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 80135a4:	4618      	mov	r0, r3
 80135a6:	f002 f9c9 	bl	801593c <_ZN8touchgfx13PainterRGB888D1Ev>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80135b0:	4618      	mov	r0, r3
 80135b2:	f002 f9a1 	bl	80158f8 <_ZN8touchgfx4LineD1Ev>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80135bc:	4618      	mov	r0, r3
 80135be:	f002 f9bd 	bl	801593c <_ZN8touchgfx13PainterRGB888D1Ev>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80135c8:	4618      	mov	r0, r3
 80135ca:	f002 f995 	bl	80158f8 <_ZN8touchgfx4LineD1Ev>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80135d4:	4618      	mov	r0, r3
 80135d6:	f007 fb5b 	bl	801ac90 <_ZN8touchgfx11BoxProgressD1Ev>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff fc87 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80135ec:	4618      	mov	r0, r3
 80135ee:	f002 f961 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80135f8:	4618      	mov	r0, r3
 80135fa:	f002 f95b 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013604:	4618      	mov	r0, r3
 8013606:	f7ff fc75 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff fc6f 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801361c:	4618      	mov	r0, r3
 801361e:	f002 f949 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013628:	4618      	mov	r0, r3
 801362a:	f002 f943 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013634:	4618      	mov	r0, r3
 8013636:	f7ff fc5d 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013640:	4618      	mov	r0, r3
 8013642:	f7ff fc57 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801364c:	4618      	mov	r0, r3
 801364e:	f002 f975 	bl	801593c <_ZN8touchgfx13PainterRGB888D1Ev>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013658:	4618      	mov	r0, r3
 801365a:	f002 f94d 	bl	80158f8 <_ZN8touchgfx4LineD1Ev>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8013664:	4618      	mov	r0, r3
 8013666:	f002 f925 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013670:	4618      	mov	r0, r3
 8013672:	f002 f91f 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801367c:	4618      	mov	r0, r3
 801367e:	f002 f919 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013688:	4618      	mov	r0, r3
 801368a:	f002 f913 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013694:	4618      	mov	r0, r3
 8013696:	f002 f90d 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80136a0:	4618      	mov	r0, r3
 80136a2:	f002 f907 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80136ac:	4618      	mov	r0, r3
 80136ae:	f002 f901 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80136b8:	4618      	mov	r0, r3
 80136ba:	f002 f8fb 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ff fd11 	bl	80130ec <_ZN8touchgfx5ImageD1Ev>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80136d0:	4618      	mov	r0, r3
 80136d2:	f002 f8ef 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80136dc:	4618      	mov	r0, r3
 80136de:	f002 f8e9 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7ff fc03 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	33d8      	adds	r3, #216	; 0xd8
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff fbfe 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	33a4      	adds	r3, #164	; 0xa4
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff fbf9 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	3370      	adds	r3, #112	; 0x70
 8013706:	4618      	mov	r0, r3
 8013708:	f7ff fbf4 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	3340      	adds	r3, #64	; 0x40
 8013710:	4618      	mov	r0, r3
 8013712:	f7ff fae7 	bl	8012ce4 <_ZN8touchgfx3BoxD1Ev>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4618      	mov	r0, r3
 801371a:	f7ff febd 	bl	8013498 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	0802cc5c 	.word	0x0802cc5c

0801372c <_ZN12MainViewBaseD0Ev>:
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff fed1 	bl	80134dc <_ZN12MainViewBaseD1Ev>
 801373a:	f642 01b8 	movw	r1, #10424	; 0x28b8
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f017 fa25 	bl	802ab8e <_ZdlPvj>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4618      	mov	r0, r3
 8013748:	3708      	adds	r7, #8
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801374e:	b580      	push	{r7, lr}
 8013750:	b082      	sub	sp, #8
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013756:	f00b fa17 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801375a:	4603      	mov	r3, r0
    }
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8013764:	b590      	push	{r4, r7, lr}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	4603      	mov	r3, r0
 801376c:	71fb      	strb	r3, [r7, #7]
 801376e:	460b      	mov	r3, r1
 8013770:	71bb      	strb	r3, [r7, #6]
 8013772:	4613      	mov	r3, r2
 8013774:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8013776:	f7fd fb3f 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d105      	bne.n	801378c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8013780:	4b0a      	ldr	r3, [pc, #40]	; (80137ac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8013782:	4a0b      	ldr	r2, [pc, #44]	; (80137b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8013784:	2138      	movs	r1, #56	; 0x38
 8013786:	480b      	ldr	r0, [pc, #44]	; (80137b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013788:	f017 fa2c 	bl	802abe4 <__assert_func>
 801378c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801378e:	f7fd fb3f 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 8013792:	6803      	ldr	r3, [r0, #0]
 8013794:	332c      	adds	r3, #44	; 0x2c
 8013796:	681c      	ldr	r4, [r3, #0]
 8013798:	797b      	ldrb	r3, [r7, #5]
 801379a:	79ba      	ldrb	r2, [r7, #6]
 801379c:	79f9      	ldrb	r1, [r7, #7]
 801379e:	47a0      	blx	r4
 80137a0:	4603      	mov	r3, r0
    }
 80137a2:	4618      	mov	r0, r3
 80137a4:	370c      	adds	r7, #12
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd90      	pop	{r4, r7, pc}
 80137aa:	bf00      	nop
 80137ac:	0802c08c 	.word	0x0802c08c
 80137b0:	0802cf8c 	.word	0x0802cf8c
 80137b4:	0802c0d0 	.word	0x0802c0d0

080137b8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 80137b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137bc:	b0c4      	sub	sp, #272	; 0x110
 80137be:	af02      	add	r7, sp, #8
 80137c0:	1d3b      	adds	r3, r7, #4
 80137c2:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 80137c4:	1d3b      	adds	r3, r7, #4
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f001 fecd 	bl	8015568 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80137ce:	4add      	ldr	r2, [pc, #884]	; (8013b44 <_ZN12MainViewBaseC1Ev+0x38c>)
 80137d0:	1d3b      	adds	r3, r7, #4
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	601a      	str	r2, [r3, #0]
 80137d6:	1d3b      	adds	r3, r7, #4
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	3340      	adds	r3, #64	; 0x40
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff fa61 	bl	8012ca4 <_ZN8touchgfx3BoxC1Ev>
 80137e2:	1d3b      	adds	r3, r7, #4
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	3370      	adds	r3, #112	; 0x70
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7ff fad1 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 80137ee:	1d3b      	adds	r3, r7, #4
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	33a4      	adds	r3, #164	; 0xa4
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff facb 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 80137fa:	1d3b      	adds	r3, r7, #4
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	33d8      	adds	r3, #216	; 0xd8
 8013800:	4618      	mov	r0, r3
 8013802:	f7ff fac5 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013806:	1d3b      	adds	r3, r7, #4
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801380e:	4618      	mov	r0, r3
 8013810:	f7ff fabe 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013814:	1d3b      	adds	r3, r7, #4
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801381c:	4618      	mov	r0, r3
 801381e:	f7ff fbbf 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013822:	1d3b      	adds	r3, r7, #4
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fbb8 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013830:	1d3b      	adds	r3, r7, #4
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8013838:	f107 0308 	add.w	r3, r7, #8
 801383c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013840:	4618      	mov	r0, r3
 8013842:	f7fe ffc2 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 8013846:	f107 0308 	add.w	r3, r7, #8
 801384a:	4619      	mov	r1, r3
 801384c:	4620      	mov	r0, r4
 801384e:	f7ff fbcb 	bl	8012fe8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013852:	1d3b      	adds	r3, r7, #4
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801385a:	4618      	mov	r0, r3
 801385c:	f7ff fba0 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013860:	1d3b      	adds	r3, r7, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff fb99 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801386e:	1d3b      	adds	r3, r7, #4
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff fb92 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801387c:	1d3b      	adds	r3, r7, #4
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013884:	4618      	mov	r0, r3
 8013886:	f7ff fb8b 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801388a:	1d3b      	adds	r3, r7, #4
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013892:	4618      	mov	r0, r3
 8013894:	f7ff fb84 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013898:	1d3b      	adds	r3, r7, #4
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7ff fb7d 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138a6:	1d3b      	adds	r3, r7, #4
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7ff fb76 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138b4:	1d3b      	adds	r3, r7, #4
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80138bc:	4618      	mov	r0, r3
 80138be:	f7ff fb6f 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138c2:	1d3b      	adds	r3, r7, #4
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80138ca:	4618      	mov	r0, r3
 80138cc:	f009 f924 	bl	801cb18 <_ZN8touchgfx4LineC1Ev>
 80138d0:	1d3b      	adds	r3, r7, #4
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80138d8:	f107 030c 	add.w	r3, r7, #12
 80138dc:	2100      	movs	r1, #0
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fe ff21 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 80138e4:	22ff      	movs	r2, #255	; 0xff
 80138e6:	68f9      	ldr	r1, [r7, #12]
 80138e8:	4620      	mov	r0, r4
 80138ea:	f008 ff07 	bl	801c6fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80138ee:	1d3b      	adds	r3, r7, #4
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff fa4a 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 80138fc:	1d3b      	adds	r3, r7, #4
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff fa43 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 801390a:	1d3b      	adds	r3, r7, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013912:	4618      	mov	r0, r3
 8013914:	f7ff fb44 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013918:	1d3b      	adds	r3, r7, #4
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013920:	4618      	mov	r0, r3
 8013922:	f7ff fb3d 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013926:	1d3b      	adds	r3, r7, #4
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801392e:	4618      	mov	r0, r3
 8013930:	f7ff fa2e 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013934:	1d3b      	adds	r3, r7, #4
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801393c:	4618      	mov	r0, r3
 801393e:	f7ff fa27 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013942:	1d3b      	adds	r3, r7, #4
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff fb28 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013950:	1d3b      	adds	r3, r7, #4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013958:	4618      	mov	r0, r3
 801395a:	f7ff fb21 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801395e:	1d3b      	adds	r3, r7, #4
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013966:	4618      	mov	r0, r3
 8013968:	f7ff fa12 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 801396c:	1d3b      	adds	r3, r7, #4
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013974:	4618      	mov	r0, r3
 8013976:	f007 f99f 	bl	801acb8 <_ZN8touchgfx11BoxProgressC1Ev>
 801397a:	1d3b      	adds	r3, r7, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013982:	4618      	mov	r0, r3
 8013984:	f009 f8c8 	bl	801cb18 <_ZN8touchgfx4LineC1Ev>
 8013988:	1d3b      	adds	r3, r7, #4
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013990:	f107 0310 	add.w	r3, r7, #16
 8013994:	2100      	movs	r1, #0
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe fec5 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 801399c:	22ff      	movs	r2, #255	; 0xff
 801399e:	6939      	ldr	r1, [r7, #16]
 80139a0:	4620      	mov	r0, r4
 80139a2:	f008 feab 	bl	801c6fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80139a6:	1d3b      	adds	r3, r7, #4
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80139ae:	4618      	mov	r0, r3
 80139b0:	f009 f8b2 	bl	801cb18 <_ZN8touchgfx4LineC1Ev>
 80139b4:	1d3b      	adds	r3, r7, #4
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 80139bc:	f107 0314 	add.w	r3, r7, #20
 80139c0:	2100      	movs	r1, #0
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7fe feaf 	bl	8012726 <_ZN8touchgfx9colortypeC1Em>
 80139c8:	22ff      	movs	r2, #255	; 0xff
 80139ca:	6979      	ldr	r1, [r7, #20]
 80139cc:	4620      	mov	r0, r4
 80139ce:	f008 fe95 	bl	801c6fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80139d2:	1d3b      	adds	r3, r7, #4
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff fae0 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80139e0:	1d3b      	adds	r3, r7, #4
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80139e8:	4618      	mov	r0, r3
 80139ea:	f007 fa7b 	bl	801aee4 <_ZN8touchgfx13ImageProgressC1Ev>
 80139ee:	1d3b      	adds	r3, r7, #4
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ff fad2 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80139fc:	1d3b      	adds	r3, r7, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ff f9c3 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013a0a:	1d3b      	adds	r3, r7, #4
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff fac4 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a18:	1d3b      	adds	r3, r7, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff fabd 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a26:	1d3b      	adds	r3, r7, #4
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7ff fab6 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a34:	1d3b      	adds	r3, r7, #4
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7ff f9a7 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013a42:	1d3b      	adds	r3, r7, #4
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7ff faa8 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a50:	1d3b      	adds	r3, r7, #4
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7ff f999 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013a5e:	1d3b      	adds	r3, r7, #4
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fa9a 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a6c:	1d3b      	adds	r3, r7, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8013a74:	4618      	mov	r0, r3
 8013a76:	f001 fd8d 	bl	8015594 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 8013a7a:	1d3b      	adds	r3, r7, #4
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7ff fa8c 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013a88:	1d3b      	adds	r3, r7, #4
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff f97d 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8013a96:	1d3b      	adds	r3, r7, #4
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f603 4088 	addw	r0, r3, #3208	; 0xc88
 8013a9e:	4b2a      	ldr	r3, [pc, #168]	; (8013b48 <_ZN12MainViewBaseC1Ev+0x390>)
 8013aa0:	61bb      	str	r3, [r7, #24]
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	61fb      	str	r3, [r7, #28]
 8013aa6:	1d39      	adds	r1, r7, #4
 8013aa8:	f107 0318 	add.w	r3, r7, #24
 8013aac:	cb0c      	ldmia	r3, {r2, r3}
 8013aae:	6809      	ldr	r1, [r1, #0]
 8013ab0:	f001 fdba 	bl	8015628 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8013ab4:	1d3b      	adds	r3, r7, #4
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8013abc:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f00a f821 	bl	801db08 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 488, 278);
 8013ac6:	1d3b      	adds	r3, r7, #4
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013ace:	f44f 738b 	mov.w	r3, #278	; 0x116
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2100      	movs	r1, #0
 8013adc:	f7fd f944 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013ae0:	1d3b      	adds	r3, r7, #4
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013ae8:	2200      	movs	r2, #0
 8013aea:	2100      	movs	r1, #0
 8013aec:	2000      	movs	r0, #0
 8013aee:	f7ff fe39 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013af2:	4603      	mov	r3, r0
 8013af4:	4619      	mov	r1, r3
 8013af6:	4620      	mov	r0, r4
 8013af8:	f7ff f916 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8013afc:	1d3b      	adds	r3, r7, #4
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	3370      	adds	r3, #112	; 0x70
 8013b02:	22da      	movs	r2, #218	; 0xda
 8013b04:	21e0      	movs	r1, #224	; 0xe0
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fe fedc 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b0c:	1d3b      	adds	r3, r7, #4
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013b14:	2200      	movs	r2, #0
 8013b16:	21dc      	movs	r1, #220	; 0xdc
 8013b18:	20ff      	movs	r0, #255	; 0xff
 8013b1a:	f7ff fe23 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	4619      	mov	r1, r3
 8013b22:	4620      	mov	r0, r4
 8013b24:	f7ff f977 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8013b28:	1d3b      	adds	r3, r7, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	3370      	adds	r3, #112	; 0x70
 8013b2e:	2100      	movs	r1, #0
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff f9c3 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8013b36:	1d3b      	adds	r3, r7, #4
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013b3e:	f107 0320 	add.w	r3, r7, #32
 8013b42:	e003      	b.n	8013b4c <_ZN12MainViewBaseC1Ev+0x394>
 8013b44:	0802cc5c 	.word	0x0802cc5c
 8013b48:	080154ed 	.word	0x080154ed
 8013b4c:	211a      	movs	r1, #26
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff f8f8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013b54:	8c39      	ldrh	r1, [r7, #32]
 8013b56:	4620      	mov	r0, r4
 8013b58:	f009 fbae 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 8013b5c:	1d3b      	adds	r3, r7, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	33a4      	adds	r3, #164	; 0xa4
 8013b62:	227e      	movs	r2, #126	; 0x7e
 8013b64:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fe feab 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b6e:	1d3b      	adds	r3, r7, #4
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013b76:	2200      	movs	r2, #0
 8013b78:	21dc      	movs	r1, #220	; 0xdc
 8013b7a:	20ff      	movs	r0, #255	; 0xff
 8013b7c:	f7ff fdf2 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b80:	4603      	mov	r3, r0
 8013b82:	4619      	mov	r1, r3
 8013b84:	4620      	mov	r0, r4
 8013b86:	f7ff f946 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8013b8a:	1d3b      	adds	r3, r7, #4
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	33a4      	adds	r3, #164	; 0xa4
 8013b90:	2100      	movs	r1, #0
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ff f992 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8013b98:	1d3b      	adds	r3, r7, #4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ba4:	2119      	movs	r1, #25
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7ff f8cc 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013bac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f009 fb82 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 8013bb4:	1d3b      	adds	r3, r7, #4
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	33d8      	adds	r3, #216	; 0xd8
 8013bba:	2288      	movs	r2, #136	; 0x88
 8013bbc:	21d8      	movs	r1, #216	; 0xd8
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7fe fe80 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013bc4:	1d3b      	adds	r3, r7, #4
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013bcc:	2200      	movs	r2, #0
 8013bce:	21dc      	movs	r1, #220	; 0xdc
 8013bd0:	20ff      	movs	r0, #255	; 0xff
 8013bd2:	f7ff fdc7 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	4619      	mov	r1, r3
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f7ff f91b 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8013be0:	1d3b      	adds	r3, r7, #4
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	33d8      	adds	r3, #216	; 0xd8
 8013be6:	2100      	movs	r1, #0
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7ff f967 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8013bee:	1d3b      	adds	r3, r7, #4
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bfa:	2113      	movs	r1, #19
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff f8a1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013c02:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8013c04:	4620      	mov	r0, r4
 8013c06:	f009 fb57 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8013c0a:	1d3b      	adds	r3, r7, #4
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013c12:	227e      	movs	r2, #126	; 0x7e
 8013c14:	2174      	movs	r1, #116	; 0x74
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fe fe54 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013c1c:	1d3b      	adds	r3, r7, #4
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013c24:	2200      	movs	r2, #0
 8013c26:	21dc      	movs	r1, #220	; 0xdc
 8013c28:	20ff      	movs	r0, #255	; 0xff
 8013c2a:	f7ff fd9b 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	4619      	mov	r1, r3
 8013c32:	4620      	mov	r0, r4
 8013c34:	f7ff f8ef 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8013c38:	1d3b      	adds	r3, r7, #4
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013c40:	2100      	movs	r1, #0
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff f93a 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c54:	2112      	movs	r1, #18
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff f874 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013c5c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f009 fb2a 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8013c64:	1d3b      	adds	r3, r7, #4
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8013c6c:	233e      	movs	r3, #62	; 0x3e
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	2372      	movs	r3, #114	; 0x72
 8013c72:	224d      	movs	r2, #77	; 0x4d
 8013c74:	21bb      	movs	r1, #187	; 0xbb
 8013c76:	f7fd f877 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c7a:	1d3b      	adds	r3, r7, #4
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013c82:	22ff      	movs	r2, #255	; 0xff
 8013c84:	21ff      	movs	r1, #255	; 0xff
 8013c86:	20ff      	movs	r0, #255	; 0xff
 8013c88:	f7ff fd6c 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4620      	mov	r0, r4
 8013c92:	f7ff f8c0 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8013c96:	1d3b      	adds	r3, r7, #4
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ff f90b 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8013ca6:	1d3b      	adds	r3, r7, #4
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f603 34dc 	addw	r4, r3, #3036	; 0xbdc
 8013cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cb2:	2103      	movs	r1, #3
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff f845 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7ff f850 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	4ae3      	ldr	r2, [pc, #908]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8013cc8:	2105      	movs	r1, #5
 8013cca:	4620      	mov	r0, r4
 8013ccc:	f00c fff2 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8013cd0:	1d3b      	adds	r3, r7, #4
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8013cd8:	1d3b      	adds	r3, r7, #4
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	4610      	mov	r0, r2
 8013ce4:	f7ff f972 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8013ce8:	1d3b      	adds	r3, r7, #4
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013cf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013cf4:	2102      	movs	r1, #2
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff f824 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013cfc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f009 fada 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 8013d04:	1d3b      	adds	r3, r7, #4
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013d0c:	2329      	movs	r3, #41	; 0x29
 8013d0e:	9300      	str	r3, [sp, #0]
 8013d10:	2347      	movs	r3, #71	; 0x47
 8013d12:	2255      	movs	r2, #85	; 0x55
 8013d14:	2166      	movs	r1, #102	; 0x66
 8013d16:	f7fd f827 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d1a:	1d3b      	adds	r3, r7, #4
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013d22:	22ff      	movs	r2, #255	; 0xff
 8013d24:	21ff      	movs	r1, #255	; 0xff
 8013d26:	20ff      	movs	r0, #255	; 0xff
 8013d28:	f7ff fd1c 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4620      	mov	r0, r4
 8013d32:	f7ff f870 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8013d36:	1d3b      	adds	r3, r7, #4
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013d3e:	2100      	movs	r1, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7ff f8bb 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8013d46:	1d3b      	adds	r3, r7, #4
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f603 34e6 	addw	r4, r3, #3046	; 0xbe6
 8013d4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d52:	2101      	movs	r1, #1
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fe fff5 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013d5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7ff f800 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d64:	4603      	mov	r3, r0
 8013d66:	4abb      	ldr	r2, [pc, #748]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8013d68:	2105      	movs	r1, #5
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f00c ffa2 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8013d70:	1d3b      	adds	r3, r7, #4
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8013d78:	1d3b      	adds	r3, r7, #4
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f603 33e6 	addw	r3, r3, #3046	; 0xbe6
 8013d80:	4619      	mov	r1, r3
 8013d82:	4610      	mov	r0, r2
 8013d84:	f7ff f922 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013d88:	1d3b      	adds	r3, r7, #4
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013d90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013d94:	2100      	movs	r1, #0
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fe ffd4 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013d9c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f009 fa8a 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8013da4:	1d3b      	adds	r3, r7, #4
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013dac:	223f      	movs	r2, #63	; 0x3f
 8013dae:	21b3      	movs	r1, #179	; 0xb3
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe fd87 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013db6:	1d3b      	adds	r3, r7, #4
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fe fdf0 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8013dc6:	1d3b      	adds	r3, r7, #4
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8013dce:	230e      	movs	r3, #14
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	2312      	movs	r3, #18
 8013dd4:	223f      	movs	r2, #63	; 0x3f
 8013dd6:	2136      	movs	r1, #54	; 0x36
 8013dd8:	f7fc ffc6 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013ddc:	1d3b      	adds	r3, r7, #4
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013de4:	22ff      	movs	r2, #255	; 0xff
 8013de6:	21ff      	movs	r1, #255	; 0xff
 8013de8:	20ff      	movs	r0, #255	; 0xff
 8013dea:	f7ff fcbb 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dee:	4603      	mov	r3, r0
 8013df0:	4619      	mov	r1, r3
 8013df2:	4620      	mov	r0, r4
 8013df4:	f7ff f80f 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8013df8:	1d3b      	adds	r3, r7, #4
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013e00:	2100      	movs	r1, #0
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff f85a 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8013e08:	1d3b      	adds	r3, r7, #4
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	f503 643f 	add.w	r4, r3, #3056	; 0xbf0
 8013e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013e14:	2126      	movs	r1, #38	; 0x26
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fe ff94 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fe ff9f 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8013e26:	4603      	mov	r3, r0
 8013e28:	4a8a      	ldr	r2, [pc, #552]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8013e2a:	2102      	movs	r1, #2
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	f00c ff41 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8013e32:	1d3b      	adds	r3, r7, #4
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8013e3a:	1d3b      	adds	r3, r7, #4
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8013e42:	4619      	mov	r1, r3
 8013e44:	4610      	mov	r0, r2
 8013e46:	f7ff f8c1 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8013e4a:	1d3b      	adds	r3, r7, #4
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013e52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013e56:	2104      	movs	r1, #4
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe ff73 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013e5e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013e62:	4620      	mov	r0, r4
 8013e64:	f009 fa28 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013e68:	1d3b      	adds	r3, r7, #4
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8013e70:	230e      	movs	r3, #14
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	2312      	movs	r3, #18
 8013e76:	223f      	movs	r2, #63	; 0x3f
 8013e78:	2173      	movs	r1, #115	; 0x73
 8013e7a:	f7fc ff75 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e7e:	1d3b      	adds	r3, r7, #4
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013e86:	22ff      	movs	r2, #255	; 0xff
 8013e88:	21ff      	movs	r1, #255	; 0xff
 8013e8a:	20ff      	movs	r0, #255	; 0xff
 8013e8c:	f7ff fc6a 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e90:	4603      	mov	r3, r0
 8013e92:	4619      	mov	r1, r3
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7fe ffbe 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013e9a:	1d3b      	adds	r3, r7, #4
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff f809 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8013eaa:	1d3b      	adds	r3, r7, #4
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 8013eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013eb6:	2127      	movs	r1, #39	; 0x27
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe ff43 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe ff4e 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	4a62      	ldr	r2, [pc, #392]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8013ecc:	2102      	movs	r1, #2
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f00c fef0 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8013ed4:	1d3b      	adds	r3, r7, #4
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8013edc:	1d3b      	adds	r3, r7, #4
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4610      	mov	r0, r2
 8013ee8:	f7ff f870 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8013eec:	1d3b      	adds	r3, r7, #4
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013ef8:	2105      	movs	r1, #5
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe ff22 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013f00:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8013f04:	4620      	mov	r0, r4
 8013f06:	f009 f9d7 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8013f0a:	1d3b      	adds	r3, r7, #4
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8013f12:	230e      	movs	r3, #14
 8013f14:	9300      	str	r3, [sp, #0]
 8013f16:	2312      	movs	r3, #18
 8013f18:	223e      	movs	r2, #62	; 0x3e
 8013f1a:	21ad      	movs	r1, #173	; 0xad
 8013f1c:	f7fc ff24 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013f20:	1d3b      	adds	r3, r7, #4
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013f28:	22ff      	movs	r2, #255	; 0xff
 8013f2a:	21ff      	movs	r1, #255	; 0xff
 8013f2c:	20ff      	movs	r0, #255	; 0xff
 8013f2e:	f7ff fc19 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f32:	4603      	mov	r3, r0
 8013f34:	4619      	mov	r1, r3
 8013f36:	4620      	mov	r0, r4
 8013f38:	f7fe ff6d 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013f3c:	1d3b      	adds	r3, r7, #4
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013f44:	2100      	movs	r1, #0
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fe ffb8 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8013f4c:	1d3b      	adds	r3, r7, #4
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f603 34f8 	addw	r4, r3, #3064	; 0xbf8
 8013f54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f58:	2128      	movs	r1, #40	; 0x28
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7fe fef2 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe fefd 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	4a39      	ldr	r2, [pc, #228]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8013f6e:	2102      	movs	r1, #2
 8013f70:	4620      	mov	r0, r4
 8013f72:	f00c fe9f 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8013f76:	1d3b      	adds	r3, r7, #4
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8013f7e:	1d3b      	adds	r3, r7, #4
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8013f86:	4619      	mov	r1, r3
 8013f88:	4610      	mov	r0, r2
 8013f8a:	f7ff f81f 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8013f8e:	1d3b      	adds	r3, r7, #4
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013f9a:	2106      	movs	r1, #6
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fe fed1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8013fa2:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f009 f986 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8013fac:	1d3b      	adds	r3, r7, #4
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013fb4:	230e      	movs	r3, #14
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	2312      	movs	r3, #18
 8013fba:	223e      	movs	r2, #62	; 0x3e
 8013fbc:	21e7      	movs	r1, #231	; 0xe7
 8013fbe:	f7fc fed3 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013fc2:	1d3b      	adds	r3, r7, #4
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013fca:	22ff      	movs	r2, #255	; 0xff
 8013fcc:	21ff      	movs	r1, #255	; 0xff
 8013fce:	20ff      	movs	r0, #255	; 0xff
 8013fd0:	f7ff fbc8 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f7fe ff1c 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8013fde:	1d3b      	adds	r3, r7, #4
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fe ff67 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8013fee:	1d3b      	adds	r3, r7, #4
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8013ff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013ffa:	2129      	movs	r1, #41	; 0x29
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fe fea1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014006:	4618      	mov	r0, r3
 8014008:	f7fe feac 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801400c:	4603      	mov	r3, r0
 801400e:	4a11      	ldr	r2, [pc, #68]	; (8014054 <_ZN12MainViewBaseC1Ev+0x89c>)
 8014010:	2102      	movs	r1, #2
 8014012:	4620      	mov	r0, r4
 8014014:	f00c fe4e 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8014018:	1d3b      	adds	r3, r7, #4
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8014020:	1d3b      	adds	r3, r7, #4
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8014028:	4619      	mov	r1, r3
 801402a:	4610      	mov	r0, r2
 801402c:	f7fe ffce 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8014030:	1d3b      	adds	r3, r7, #4
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8014038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801403c:	2107      	movs	r1, #7
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe fe80 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014044:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8014048:	4620      	mov	r0, r4
 801404a:	f009 f935 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 801404e:	1d3b      	adds	r3, r7, #4
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	e001      	b.n	8014058 <_ZN12MainViewBaseC1Ev+0x8a0>
 8014054:	0802c110 	.word	0x0802c110
 8014058:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 801405c:	230e      	movs	r3, #14
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	2312      	movs	r3, #18
 8014062:	223f      	movs	r2, #63	; 0x3f
 8014064:	f44f 7192 	mov.w	r1, #292	; 0x124
 8014068:	f7fc fe7e 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801406c:	1d3b      	adds	r3, r7, #4
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8014074:	22ff      	movs	r2, #255	; 0xff
 8014076:	21ff      	movs	r1, #255	; 0xff
 8014078:	20ff      	movs	r0, #255	; 0xff
 801407a:	f7ff fb73 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801407e:	4603      	mov	r3, r0
 8014080:	4619      	mov	r1, r3
 8014082:	4620      	mov	r0, r4
 8014084:	f7fe fec7 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8014088:	1d3b      	adds	r3, r7, #4
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014090:	2100      	movs	r1, #0
 8014092:	4618      	mov	r0, r3
 8014094:	f7fe ff12 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8014098:	1d3b      	adds	r3, r7, #4
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
 80140a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80140a4:	212a      	movs	r1, #42	; 0x2a
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fe fe4c 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80140ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7fe fe57 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80140b6:	4603      	mov	r3, r0
 80140b8:	4ae4      	ldr	r2, [pc, #912]	; (801444c <_ZN12MainViewBaseC1Ev+0xc94>)
 80140ba:	2102      	movs	r1, #2
 80140bc:	4620      	mov	r0, r4
 80140be:	f00c fdf9 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 80140c2:	1d3b      	adds	r3, r7, #4
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80140ca:	1d3b      	adds	r3, r7, #4
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80140d2:	4619      	mov	r1, r3
 80140d4:	4610      	mov	r0, r2
 80140d6:	f7fe ff79 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80140da:	1d3b      	adds	r3, r7, #4
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80140e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80140e6:	2108      	movs	r1, #8
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7fe fe2b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80140ee:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80140f2:	4620      	mov	r0, r4
 80140f4:	f009 f8e0 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80140f8:	1d3b      	adds	r3, r7, #4
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8014100:	230e      	movs	r3, #14
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	2312      	movs	r3, #18
 8014106:	223f      	movs	r2, #63	; 0x3f
 8014108:	f240 115d 	movw	r1, #349	; 0x15d
 801410c:	f7fc fe2c 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014110:	1d3b      	adds	r3, r7, #4
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014118:	22ff      	movs	r2, #255	; 0xff
 801411a:	21ff      	movs	r1, #255	; 0xff
 801411c:	20ff      	movs	r0, #255	; 0xff
 801411e:	f7ff fb21 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014122:	4603      	mov	r3, r0
 8014124:	4619      	mov	r1, r3
 8014126:	4620      	mov	r0, r4
 8014128:	f7fe fe75 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 801412c:	1d3b      	adds	r3, r7, #4
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014134:	2100      	movs	r1, #0
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe fec0 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 801413c:	1d3b      	adds	r3, r7, #4
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f603 4404 	addw	r4, r3, #3076	; 0xc04
 8014144:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014148:	212b      	movs	r1, #43	; 0x2b
 801414a:	4618      	mov	r0, r3
 801414c:	f7fe fdfa 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014150:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014154:	4618      	mov	r0, r3
 8014156:	f7fe fe05 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801415a:	4603      	mov	r3, r0
 801415c:	4abb      	ldr	r2, [pc, #748]	; (801444c <_ZN12MainViewBaseC1Ev+0xc94>)
 801415e:	2102      	movs	r1, #2
 8014160:	4620      	mov	r0, r4
 8014162:	f00c fda7 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8014166:	1d3b      	adds	r3, r7, #4
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 801416e:	1d3b      	adds	r3, r7, #4
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8014176:	4619      	mov	r1, r3
 8014178:	4610      	mov	r0, r2
 801417a:	f7fe ff27 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 801417e:	1d3b      	adds	r3, r7, #4
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014186:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801418a:	2109      	movs	r1, #9
 801418c:	4618      	mov	r0, r3
 801418e:	f7fe fdd9 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014192:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8014196:	4620      	mov	r0, r4
 8014198:	f009 f88e 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 801419c:	1d3b      	adds	r3, r7, #4
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 80141a4:	230f      	movs	r3, #15
 80141a6:	9300      	str	r3, [sp, #0]
 80141a8:	2312      	movs	r3, #18
 80141aa:	223e      	movs	r2, #62	; 0x3e
 80141ac:	f240 119b 	movw	r1, #411	; 0x19b
 80141b0:	f7fc fdda 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80141b4:	1d3b      	adds	r3, r7, #4
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80141bc:	22ff      	movs	r2, #255	; 0xff
 80141be:	21ff      	movs	r1, #255	; 0xff
 80141c0:	20ff      	movs	r0, #255	; 0xff
 80141c2:	f7ff facf 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80141c6:	4603      	mov	r3, r0
 80141c8:	4619      	mov	r1, r3
 80141ca:	4620      	mov	r0, r4
 80141cc:	f7fe fe23 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80141d0:	1d3b      	adds	r3, r7, #4
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80141d8:	2100      	movs	r1, #0
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fe fe6e 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80141e0:	1d3b      	adds	r3, r7, #4
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 80141e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80141ec:	212c      	movs	r1, #44	; 0x2c
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fe fda8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80141f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fe fdb3 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80141fe:	4603      	mov	r3, r0
 8014200:	4a92      	ldr	r2, [pc, #584]	; (801444c <_ZN12MainViewBaseC1Ev+0xc94>)
 8014202:	2102      	movs	r1, #2
 8014204:	4620      	mov	r0, r4
 8014206:	f00c fd55 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 801420a:	1d3b      	adds	r3, r7, #4
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8014212:	1d3b      	adds	r3, r7, #4
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 801421a:	4619      	mov	r1, r3
 801421c:	4610      	mov	r0, r2
 801421e:	f7fe fed5 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8014222:	1d3b      	adds	r3, r7, #4
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 801422a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801422e:	210a      	movs	r1, #10
 8014230:	4618      	mov	r0, r3
 8014232:	f7fe fd87 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014236:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 801423a:	4620      	mov	r0, r4
 801423c:	f009 f83c 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8014240:	1d3b      	adds	r3, r7, #4
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8014248:	230e      	movs	r3, #14
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	2312      	movs	r3, #18
 801424e:	223e      	movs	r2, #62	; 0x3e
 8014250:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8014254:	f7fc fd88 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014258:	1d3b      	adds	r3, r7, #4
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8014260:	22ff      	movs	r2, #255	; 0xff
 8014262:	21ff      	movs	r1, #255	; 0xff
 8014264:	20ff      	movs	r0, #255	; 0xff
 8014266:	f7ff fa7d 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801426a:	4603      	mov	r3, r0
 801426c:	4619      	mov	r1, r3
 801426e:	4620      	mov	r0, r4
 8014270:	f7fe fdd1 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8014274:	1d3b      	adds	r3, r7, #4
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801427c:	2100      	movs	r1, #0
 801427e:	4618      	mov	r0, r3
 8014280:	f7fe fe1c 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8014284:	1d3b      	adds	r3, r7, #4
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f603 440c 	addw	r4, r3, #3084	; 0xc0c
 801428c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014290:	212d      	movs	r1, #45	; 0x2d
 8014292:	4618      	mov	r0, r3
 8014294:	f7fe fd56 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014298:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801429c:	4618      	mov	r0, r3
 801429e:	f7fe fd61 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80142a2:	4603      	mov	r3, r0
 80142a4:	4a69      	ldr	r2, [pc, #420]	; (801444c <_ZN12MainViewBaseC1Ev+0xc94>)
 80142a6:	2102      	movs	r1, #2
 80142a8:	4620      	mov	r0, r4
 80142aa:	f00c fd03 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 80142ae:	1d3b      	adds	r3, r7, #4
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f503 7259 	add.w	r2, r3, #868	; 0x364
 80142b6:	1d3b      	adds	r3, r7, #4
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80142be:	4619      	mov	r1, r3
 80142c0:	4610      	mov	r0, r2
 80142c2:	f7fe fe83 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 80142c6:	1d3b      	adds	r3, r7, #4
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80142ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80142d2:	210b      	movs	r1, #11
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fe fd35 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80142da:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 80142de:	4620      	mov	r0, r4
 80142e0:	f008 ffea 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 80142e4:	1d3b      	adds	r3, r7, #4
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80142ec:	2305      	movs	r3, #5
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 80142f4:	223a      	movs	r2, #58	; 0x3a
 80142f6:	f06f 0101 	mvn.w	r1, #1
 80142fa:	f7fc fd35 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80142fe:	1d3b      	adds	r3, r7, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8014306:	22ff      	movs	r2, #255	; 0xff
 8014308:	21ff      	movs	r1, #255	; 0xff
 801430a:	20ff      	movs	r0, #255	; 0xff
 801430c:	f7ff fa2a 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014310:	4603      	mov	r3, r0
 8014312:	22ff      	movs	r2, #255	; 0xff
 8014314:	4619      	mov	r1, r3
 8014316:	4620      	mov	r0, r4
 8014318:	f008 f9d5 	bl	801c6c6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 801431c:	1d3b      	adds	r3, r7, #4
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8014324:	1d3b      	adds	r3, r7, #4
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801432c:	4619      	mov	r1, r3
 801432e:	4610      	mov	r0, r2
 8014330:	f008 fa32 	bl	801c798 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8014334:	1d3b      	adds	r3, r7, #4
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801433c:	2203      	movs	r2, #3
 801433e:	2100      	movs	r1, #0
 8014340:	4618      	mov	r0, r3
 8014342:	f001 f991 	bl	8015668 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8014346:	1d3b      	adds	r3, r7, #4
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801434e:	2203      	movs	r2, #3
 8014350:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8014354:	4618      	mov	r0, r3
 8014356:	f001 f9ad 	bl	80156b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801435a:	1d3b      	adds	r3, r7, #4
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014362:	2102      	movs	r1, #2
 8014364:	4618      	mov	r0, r3
 8014366:	f001 f9cb 	bl	8015700 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801436a:	1d3b      	adds	r3, r7, #4
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014372:	2101      	movs	r1, #1
 8014374:	4618      	mov	r0, r3
 8014376:	f008 fd29 	bl	801cdcc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 801437a:	1d3b      	adds	r3, r7, #4
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014382:	227e      	movs	r2, #126	; 0x7e
 8014384:	212b      	movs	r1, #43	; 0x2b
 8014386:	4618      	mov	r0, r3
 8014388:	f7fe fa9c 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801438c:	1d3b      	adds	r3, r7, #4
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8014394:	2200      	movs	r2, #0
 8014396:	21dc      	movs	r1, #220	; 0xdc
 8014398:	20ff      	movs	r0, #255	; 0xff
 801439a:	f7ff f9e3 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801439e:	4603      	mov	r3, r0
 80143a0:	4619      	mov	r1, r3
 80143a2:	4620      	mov	r0, r4
 80143a4:	f7fe fd37 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80143a8:	1d3b      	adds	r3, r7, #4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80143b0:	2100      	movs	r1, #0
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7fe fd82 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80143b8:	1d3b      	adds	r3, r7, #4
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80143c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80143c4:	2110      	movs	r1, #16
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fe fcbc 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80143cc:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80143d0:	4620      	mov	r0, r4
 80143d2:	f008 ff71 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 80143d6:	1d3b      	adds	r3, r7, #4
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80143de:	22c1      	movs	r2, #193	; 0xc1
 80143e0:	212a      	movs	r1, #42	; 0x2a
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7fe fa6e 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80143e8:	1d3b      	adds	r3, r7, #4
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80143f0:	2200      	movs	r2, #0
 80143f2:	21dc      	movs	r1, #220	; 0xdc
 80143f4:	20ff      	movs	r0, #255	; 0xff
 80143f6:	f7ff f9b5 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143fa:	4603      	mov	r3, r0
 80143fc:	4619      	mov	r1, r3
 80143fe:	4620      	mov	r0, r4
 8014400:	f7fe fd09 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8014404:	1d3b      	adds	r3, r7, #4
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801440c:	2100      	movs	r1, #0
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe fd54 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8014414:	1d3b      	adds	r3, r7, #4
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 801441c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014420:	2111      	movs	r1, #17
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe fc8e 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014428:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 801442c:	4620      	mov	r0, r4
 801442e:	f008 ff43 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 8014432:	1d3b      	adds	r3, r7, #4
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 801443a:	232a      	movs	r3, #42	; 0x2a
 801443c:	9300      	str	r3, [sp, #0]
 801443e:	233c      	movs	r3, #60	; 0x3c
 8014440:	2255      	movs	r2, #85	; 0x55
 8014442:	2119      	movs	r1, #25
 8014444:	f7fc fc90 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014448:	1d3b      	adds	r3, r7, #4
 801444a:	e001      	b.n	8014450 <_ZN12MainViewBaseC1Ev+0xc98>
 801444c:	0802c110 	.word	0x0802c110
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8014456:	22ff      	movs	r2, #255	; 0xff
 8014458:	21ff      	movs	r1, #255	; 0xff
 801445a:	20ff      	movs	r0, #255	; 0xff
 801445c:	f7ff f982 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014460:	4603      	mov	r3, r0
 8014462:	4619      	mov	r1, r3
 8014464:	4620      	mov	r0, r4
 8014466:	f7fe fcd6 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 801446a:	1d3b      	adds	r3, r7, #4
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8014472:	2100      	movs	r1, #0
 8014474:	4618      	mov	r0, r3
 8014476:	f7fe fd21 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 801447a:	1d3b      	adds	r3, r7, #4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f503 6441 	add.w	r4, r3, #3088	; 0xc10
 8014482:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014486:	210d      	movs	r1, #13
 8014488:	4618      	mov	r0, r3
 801448a:	f7fe fc5b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801448e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014492:	4618      	mov	r0, r3
 8014494:	f7fe fc66 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014498:	4603      	mov	r3, r0
 801449a:	4ae6      	ldr	r2, [pc, #920]	; (8014834 <_ZN12MainViewBaseC1Ev+0x107c>)
 801449c:	2105      	movs	r1, #5
 801449e:	4620      	mov	r0, r4
 80144a0:	f00c fc08 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80144a4:	1d3b      	adds	r3, r7, #4
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80144ac:	1d3b      	adds	r3, r7, #4
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80144b4:	4619      	mov	r1, r3
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7fe fd88 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80144bc:	1d3b      	adds	r3, r7, #4
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80144c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80144c8:	210c      	movs	r1, #12
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fe fc3a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80144d0:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 80144d4:	4620      	mov	r0, r4
 80144d6:	f008 feef 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 80144da:	1d3b      	adds	r3, r7, #4
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 80144e2:	232a      	movs	r3, #42	; 0x2a
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	2343      	movs	r3, #67	; 0x43
 80144e8:	2299      	movs	r2, #153	; 0x99
 80144ea:	2119      	movs	r1, #25
 80144ec:	f7fc fc3c 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80144f0:	1d3b      	adds	r3, r7, #4
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80144f8:	22ff      	movs	r2, #255	; 0xff
 80144fa:	21ff      	movs	r1, #255	; 0xff
 80144fc:	20ff      	movs	r0, #255	; 0xff
 80144fe:	f7ff f931 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014502:	4603      	mov	r3, r0
 8014504:	4619      	mov	r1, r3
 8014506:	4620      	mov	r0, r4
 8014508:	f7fe fc85 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 801450c:	1d3b      	adds	r3, r7, #4
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014514:	2100      	movs	r1, #0
 8014516:	4618      	mov	r0, r3
 8014518:	f7fe fcd0 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 801451c:	1d3b      	adds	r3, r7, #4
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f603 441a 	addw	r4, r3, #3098	; 0xc1a
 8014524:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014528:	210f      	movs	r1, #15
 801452a:	4618      	mov	r0, r3
 801452c:	f7fe fc0a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014530:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014534:	4618      	mov	r0, r3
 8014536:	f7fe fc15 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801453a:	4603      	mov	r3, r0
 801453c:	4abd      	ldr	r2, [pc, #756]	; (8014834 <_ZN12MainViewBaseC1Ev+0x107c>)
 801453e:	2105      	movs	r1, #5
 8014540:	4620      	mov	r0, r4
 8014542:	f00c fbb7 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8014546:	1d3b      	adds	r3, r7, #4
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 801454e:	1d3b      	adds	r3, r7, #4
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f603 431a 	addw	r3, r3, #3098	; 0xc1a
 8014556:	4619      	mov	r1, r3
 8014558:	4610      	mov	r0, r2
 801455a:	f7fe fd37 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 801455e:	1d3b      	adds	r3, r7, #4
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8014566:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801456a:	210e      	movs	r1, #14
 801456c:	4618      	mov	r0, r3
 801456e:	f7fe fbe9 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014572:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8014576:	4620      	mov	r0, r4
 8014578:	f008 fe9e 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 801457c:	1d3b      	adds	r3, r7, #4
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014584:	22c1      	movs	r2, #193	; 0xc1
 8014586:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801458a:	4618      	mov	r0, r3
 801458c:	f7fe f99a 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014590:	1d3b      	adds	r3, r7, #4
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8014598:	2200      	movs	r2, #0
 801459a:	21dc      	movs	r1, #220	; 0xdc
 801459c:	20ff      	movs	r0, #255	; 0xff
 801459e:	f7ff f8e1 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145a2:	4603      	mov	r3, r0
 80145a4:	4619      	mov	r1, r3
 80145a6:	4620      	mov	r0, r4
 80145a8:	f7fe fc35 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80145ac:	1d3b      	adds	r3, r7, #4
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80145b4:	2100      	movs	r1, #0
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fe fc80 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80145bc:	1d3b      	adds	r3, r7, #4
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80145c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80145c8:	2114      	movs	r1, #20
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fe fbba 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80145d0:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80145d4:	4620      	mov	r0, r4
 80145d6:	f008 fe6f 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 80145da:	1d3b      	adds	r3, r7, #4
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80145e2:	22c1      	movs	r2, #193	; 0xc1
 80145e4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fe f96b 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80145ee:	1d3b      	adds	r3, r7, #4
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f203 5434 	addw	r4, r3, #1332	; 0x534
 80145f6:	2200      	movs	r2, #0
 80145f8:	21dc      	movs	r1, #220	; 0xdc
 80145fa:	20ff      	movs	r0, #255	; 0xff
 80145fc:	f7ff f8b2 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014600:	4603      	mov	r3, r0
 8014602:	4619      	mov	r1, r3
 8014604:	4620      	mov	r0, r4
 8014606:	f7fe fc06 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801460a:	1d3b      	adds	r3, r7, #4
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014612:	2100      	movs	r1, #0
 8014614:	4618      	mov	r0, r3
 8014616:	f7fe fc51 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801461a:	1d3b      	adds	r3, r7, #4
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8014622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014626:	2115      	movs	r1, #21
 8014628:	4618      	mov	r0, r3
 801462a:	f7fe fb8b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801462e:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8014632:	4620      	mov	r0, r4
 8014634:	f008 fe40 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8014638:	1d3b      	adds	r3, r7, #4
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8014640:	232a      	movs	r3, #42	; 0x2a
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	234b      	movs	r3, #75	; 0x4b
 8014646:	2299      	movs	r2, #153	; 0x99
 8014648:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801464c:	f7fc fb8c 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014650:	1d3b      	adds	r3, r7, #4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8014658:	22ff      	movs	r2, #255	; 0xff
 801465a:	21ff      	movs	r1, #255	; 0xff
 801465c:	20ff      	movs	r0, #255	; 0xff
 801465e:	f7ff f881 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014662:	4603      	mov	r3, r0
 8014664:	4619      	mov	r1, r3
 8014666:	4620      	mov	r0, r4
 8014668:	f7fe fbd5 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 801466c:	1d3b      	adds	r3, r7, #4
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014674:	2100      	movs	r1, #0
 8014676:	4618      	mov	r0, r3
 8014678:	f7fe fc20 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 801467c:	1d3b      	adds	r3, r7, #4
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 8014684:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014688:	2117      	movs	r1, #23
 801468a:	4618      	mov	r0, r3
 801468c:	f7fe fb5a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014690:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014694:	4618      	mov	r0, r3
 8014696:	f7fe fb65 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801469a:	4603      	mov	r3, r0
 801469c:	4a65      	ldr	r2, [pc, #404]	; (8014834 <_ZN12MainViewBaseC1Ev+0x107c>)
 801469e:	2105      	movs	r1, #5
 80146a0:	4620      	mov	r0, r4
 80146a2:	f00c fb07 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80146a6:	1d3b      	adds	r3, r7, #4
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 80146ae:	1d3b      	adds	r3, r7, #4
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80146b6:	4619      	mov	r1, r3
 80146b8:	4610      	mov	r0, r2
 80146ba:	f7fe fc87 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80146be:	1d3b      	adds	r3, r7, #4
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 80146c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80146ca:	2116      	movs	r1, #22
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7fe fb39 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80146d2:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80146d6:	4620      	mov	r0, r4
 80146d8:	f008 fdee 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 80146dc:	1d3b      	adds	r3, r7, #4
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 80146e4:	2328      	movs	r3, #40	; 0x28
 80146e6:	9300      	str	r3, [sp, #0]
 80146e8:	2347      	movs	r3, #71	; 0x47
 80146ea:	2299      	movs	r2, #153	; 0x99
 80146ec:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80146f0:	f7fc fb3a 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80146f4:	1d3b      	adds	r3, r7, #4
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 80146fc:	22ff      	movs	r2, #255	; 0xff
 80146fe:	21ff      	movs	r1, #255	; 0xff
 8014700:	20ff      	movs	r0, #255	; 0xff
 8014702:	f7ff f82f 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014706:	4603      	mov	r3, r0
 8014708:	4619      	mov	r1, r3
 801470a:	4620      	mov	r0, r4
 801470c:	f7fe fb83 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8014710:	1d3b      	adds	r3, r7, #4
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014718:	2100      	movs	r1, #0
 801471a:	4618      	mov	r0, r3
 801471c:	f7fe fbce 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8014720:	1d3b      	adds	r3, r7, #4
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	f603 442e 	addw	r4, r3, #3118	; 0xc2e
 8014728:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801472c:	2125      	movs	r1, #37	; 0x25
 801472e:	4618      	mov	r0, r3
 8014730:	f7fe fb08 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014734:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014738:	4618      	mov	r0, r3
 801473a:	f7fe fb13 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801473e:	4603      	mov	r3, r0
 8014740:	4a3c      	ldr	r2, [pc, #240]	; (8014834 <_ZN12MainViewBaseC1Ev+0x107c>)
 8014742:	2105      	movs	r1, #5
 8014744:	4620      	mov	r0, r4
 8014746:	f00c fab5 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 801474a:	1d3b      	adds	r3, r7, #4
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8014752:	1d3b      	adds	r3, r7, #4
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f603 432e 	addw	r3, r3, #3118	; 0xc2e
 801475a:	4619      	mov	r1, r3
 801475c:	4610      	mov	r0, r2
 801475e:	f7fe fc35 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8014762:	1d3b      	adds	r3, r7, #4
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801476a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801476e:	2118      	movs	r1, #24
 8014770:	4618      	mov	r0, r3
 8014772:	f7fe fae7 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014776:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 801477a:	4620      	mov	r0, r4
 801477c:	f008 fd9c 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8014780:	1d3b      	adds	r3, r7, #4
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014788:	22f0      	movs	r2, #240	; 0xf0
 801478a:	f240 1197 	movw	r1, #407	; 0x197
 801478e:	4618      	mov	r0, r3
 8014790:	f7fe f898 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014794:	1d3b      	adds	r3, r7, #4
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 801479c:	2200      	movs	r2, #0
 801479e:	21dc      	movs	r1, #220	; 0xdc
 80147a0:	20ff      	movs	r0, #255	; 0xff
 80147a2:	f7fe ffdf 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80147a6:	4603      	mov	r3, r0
 80147a8:	4619      	mov	r1, r3
 80147aa:	4620      	mov	r0, r4
 80147ac:	f7fe fb33 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80147b0:	1d3b      	adds	r3, r7, #4
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80147b8:	2100      	movs	r1, #0
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7fe fb7e 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80147c0:	1d3b      	adds	r3, r7, #4
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80147c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80147cc:	211b      	movs	r1, #27
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fe fab8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80147d4:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80147d8:	4620      	mov	r0, r4
 80147da:	f008 fd6d 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 80147de:	1d3b      	adds	r3, r7, #4
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80147e6:	22e2      	movs	r2, #226	; 0xe2
 80147e8:	f240 116f 	movw	r1, #367	; 0x16f
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7fe f869 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80147f2:	1d3b      	adds	r3, r7, #4
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 80147fa:	230a      	movs	r3, #10
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	2364      	movs	r3, #100	; 0x64
 8014800:	2202      	movs	r2, #2
 8014802:	2102      	movs	r1, #2
 8014804:	f006 fa8e 	bl	801ad24 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8014808:	1d3b      	adds	r3, r7, #4
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8014810:	2300      	movs	r3, #0
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	2300      	movs	r3, #0
 8014816:	2264      	movs	r2, #100	; 0x64
 8014818:	2100      	movs	r1, #0
 801481a:	f006 fd01 	bl	801b220 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 801481e:	1d3b      	adds	r3, r7, #4
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014826:	2100      	movs	r1, #0
 8014828:	4618      	mov	r0, r3
 801482a:	f006 fadb 	bl	801ade4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 801482e:	1d3b      	adds	r3, r7, #4
 8014830:	e002      	b.n	8014838 <_ZN12MainViewBaseC1Ev+0x1080>
 8014832:	bf00      	nop
 8014834:	0802c110 	.word	0x0802c110
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 801483e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014842:	2100      	movs	r1, #0
 8014844:	4618      	mov	r0, r3
 8014846:	f7fd ffc0 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 801484a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801484e:	4619      	mov	r1, r3
 8014850:	4620      	mov	r0, r4
 8014852:	f006 fcda 	bl	801b20a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014856:	1d3b      	adds	r3, r7, #4
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 801485e:	2200      	movs	r2, #0
 8014860:	21dc      	movs	r1, #220	; 0xdc
 8014862:	20ff      	movs	r0, #255	; 0xff
 8014864:	f7fe ff7e 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014868:	4603      	mov	r3, r0
 801486a:	4619      	mov	r1, r3
 801486c:	4620      	mov	r0, r4
 801486e:	f006 fa03 	bl	801ac78 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8014872:	1d3b      	adds	r3, r7, #4
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801487a:	213c      	movs	r1, #60	; 0x3c
 801487c:	4618      	mov	r0, r3
 801487e:	f006 fa69 	bl	801ad54 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8014882:	1d3b      	adds	r3, r7, #4
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801488a:	230a      	movs	r3, #10
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	23b4      	movs	r3, #180	; 0xb4
 8014890:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014894:	210e      	movs	r1, #14
 8014896:	f7fc fa67 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801489a:	1d3b      	adds	r3, r7, #4
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 80148a2:	22ff      	movs	r2, #255	; 0xff
 80148a4:	21ff      	movs	r1, #255	; 0xff
 80148a6:	20ff      	movs	r0, #255	; 0xff
 80148a8:	f7fe ff5c 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148ac:	4603      	mov	r3, r0
 80148ae:	22ff      	movs	r2, #255	; 0xff
 80148b0:	4619      	mov	r1, r3
 80148b2:	4620      	mov	r0, r4
 80148b4:	f007 ff07 	bl	801c6c6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 80148b8:	1d3b      	adds	r3, r7, #4
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 80148c0:	1d3b      	adds	r3, r7, #4
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80148c8:	4619      	mov	r1, r3
 80148ca:	4610      	mov	r0, r2
 80148cc:	f007 ff64 	bl	801c798 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80148d0:	1d3b      	adds	r3, r7, #4
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80148d8:	2205      	movs	r2, #5
 80148da:	2100      	movs	r1, #0
 80148dc:	4618      	mov	r0, r3
 80148de:	f000 fec3 	bl	8015668 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80148e2:	1d3b      	adds	r3, r7, #4
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80148ea:	2205      	movs	r2, #5
 80148ec:	21b4      	movs	r1, #180	; 0xb4
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 fee0 	bl	80156b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80148f4:	1d3b      	adds	r3, r7, #4
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80148fc:	2102      	movs	r1, #2
 80148fe:	4618      	mov	r0, r3
 8014900:	f000 fefe 	bl	8015700 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014904:	1d3b      	adds	r3, r7, #4
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801490c:	2100      	movs	r1, #0
 801490e:	4618      	mov	r0, r3
 8014910:	f008 fa5c 	bl	801cdcc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8014914:	1d3b      	adds	r3, r7, #4
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 801491c:	230a      	movs	r3, #10
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	23b4      	movs	r3, #180	; 0xb4
 8014922:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014926:	f240 111f 	movw	r1, #287	; 0x11f
 801492a:	f7fc fa1d 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801492e:	1d3b      	adds	r3, r7, #4
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8014936:	22ff      	movs	r2, #255	; 0xff
 8014938:	21ff      	movs	r1, #255	; 0xff
 801493a:	20ff      	movs	r0, #255	; 0xff
 801493c:	f7fe ff12 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014940:	4603      	mov	r3, r0
 8014942:	22ff      	movs	r2, #255	; 0xff
 8014944:	4619      	mov	r1, r3
 8014946:	4620      	mov	r0, r4
 8014948:	f007 febd 	bl	801c6c6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 801494c:	1d3b      	adds	r3, r7, #4
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8014954:	1d3b      	adds	r3, r7, #4
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801495c:	4619      	mov	r1, r3
 801495e:	4610      	mov	r0, r2
 8014960:	f007 ff1a 	bl	801c798 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8014964:	1d3b      	adds	r3, r7, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801496c:	2205      	movs	r2, #5
 801496e:	2100      	movs	r1, #0
 8014970:	4618      	mov	r0, r3
 8014972:	f000 fe79 	bl	8015668 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8014976:	1d3b      	adds	r3, r7, #4
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801497e:	2205      	movs	r2, #5
 8014980:	21b4      	movs	r1, #180	; 0xb4
 8014982:	4618      	mov	r0, r3
 8014984:	f000 fe96 	bl	80156b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8014988:	1d3b      	adds	r3, r7, #4
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014990:	2102      	movs	r1, #2
 8014992:	4618      	mov	r0, r3
 8014994:	f000 feb4 	bl	8015700 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014998:	1d3b      	adds	r3, r7, #4
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80149a0:	2100      	movs	r1, #0
 80149a2:	4618      	mov	r0, r3
 80149a4:	f008 fa12 	bl	801cdcc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 80149a8:	1d3b      	adds	r3, r7, #4
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 80149b0:	2315      	movs	r3, #21
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	233c      	movs	r3, #60	; 0x3c
 80149b6:	22f7      	movs	r2, #247	; 0xf7
 80149b8:	21d2      	movs	r1, #210	; 0xd2
 80149ba:	f7fc f9d5 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80149be:	1d3b      	adds	r3, r7, #4
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 80149c6:	22ff      	movs	r2, #255	; 0xff
 80149c8:	21ff      	movs	r1, #255	; 0xff
 80149ca:	20ff      	movs	r0, #255	; 0xff
 80149cc:	f7fe feca 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80149d0:	4603      	mov	r3, r0
 80149d2:	4619      	mov	r1, r3
 80149d4:	4620      	mov	r0, r4
 80149d6:	f7fe fa1e 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 80149da:	1d3b      	adds	r3, r7, #4
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80149e2:	2100      	movs	r1, #0
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fe fa69 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 80149ea:	1d3b      	adds	r3, r7, #4
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 80149f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80149f6:	211d      	movs	r1, #29
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe f9a3 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80149fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fe f9ae 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	4ae4      	ldr	r2, [pc, #912]	; (8014d9c <_ZN12MainViewBaseC1Ev+0x15e4>)
 8014a0c:	2105      	movs	r1, #5
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f00c f950 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8014a14:	1d3b      	adds	r3, r7, #4
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 8014a1c:	1d3b      	adds	r3, r7, #4
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8014a24:	4619      	mov	r1, r3
 8014a26:	4610      	mov	r0, r2
 8014a28:	f7fe fad0 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8014a2c:	1d3b      	adds	r3, r7, #4
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8014a34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014a38:	211c      	movs	r1, #28
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7fe f982 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014a40:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8014a44:	4620      	mov	r0, r4
 8014a46:	f008 fc37 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8014a4a:	1d3b      	adds	r3, r7, #4
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014a52:	2201      	movs	r2, #1
 8014a54:	2101      	movs	r1, #1
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fd ff34 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8014a5c:	1d3b      	adds	r3, r7, #4
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8014a64:	2337      	movs	r3, #55	; 0x37
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8014a6c:	2202      	movs	r2, #2
 8014a6e:	2102      	movs	r1, #2
 8014a70:	f006 faa8 	bl	801afc4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8014a74:	1d3b      	adds	r3, r7, #4
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	9300      	str	r3, [sp, #0]
 8014a80:	2300      	movs	r3, #0
 8014a82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014a86:	2100      	movs	r1, #0
 8014a88:	f006 fbca 	bl	801b220 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014a8c:	1d3b      	adds	r3, r7, #4
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014a94:	2100      	movs	r1, #0
 8014a96:	4618      	mov	r0, r3
 8014a98:	f006 f9a4 	bl	801ade4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8014a9c:	1d3b      	adds	r3, r7, #4
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f006 f9e7 	bl	801ae7a <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8014aac:	1d3b      	adds	r3, r7, #4
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014ab4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f006 fa9b 	bl	801aff4 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8014abe:	1d3b      	adds	r3, r7, #4
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014ac6:	2101      	movs	r1, #1
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f006 f9bf 	bl	801ae4c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8014ace:	1d3b      	adds	r3, r7, #4
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8014ad6:	2316      	movs	r3, #22
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	2337      	movs	r3, #55	; 0x37
 8014adc:	2204      	movs	r2, #4
 8014ade:	2119      	movs	r1, #25
 8014ae0:	f7fc f942 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014ae4:	1d3b      	adds	r3, r7, #4
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014aec:	22ff      	movs	r2, #255	; 0xff
 8014aee:	21ff      	movs	r1, #255	; 0xff
 8014af0:	20ff      	movs	r0, #255	; 0xff
 8014af2:	f7fe fe37 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014af6:	4603      	mov	r3, r0
 8014af8:	4619      	mov	r1, r3
 8014afa:	4620      	mov	r0, r4
 8014afc:	f7fe f98b 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8014b00:	1d3b      	adds	r3, r7, #4
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8014b08:	2100      	movs	r1, #0
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe f9d6 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8014b10:	1d3b      	adds	r3, r7, #4
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f603 4442 	addw	r4, r3, #3138	; 0xc42
 8014b18:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014b1c:	211f      	movs	r1, #31
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe f910 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014b24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7fe f91b 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	4a9a      	ldr	r2, [pc, #616]	; (8014d9c <_ZN12MainViewBaseC1Ev+0x15e4>)
 8014b32:	2105      	movs	r1, #5
 8014b34:	4620      	mov	r0, r4
 8014b36:	f00c f8bd 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8014b3a:	1d3b      	adds	r3, r7, #4
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8014b42:	1d3b      	adds	r3, r7, #4
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	f603 4342 	addw	r3, r3, #3138	; 0xc42
 8014b4a:	4619      	mov	r1, r3
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	f7fe fa3d 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014b52:	1d3b      	adds	r3, r7, #4
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014b5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014b5e:	211e      	movs	r1, #30
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fe f8ef 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014b66:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8014b6a:	4620      	mov	r0, r4
 8014b6c:	f008 fba4 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8014b70:	1d3b      	adds	r3, r7, #4
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014b78:	220f      	movs	r2, #15
 8014b7a:	2152      	movs	r1, #82	; 0x52
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fd fea1 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014b82:	1d3b      	adds	r3, r7, #4
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014b8a:	22ff      	movs	r2, #255	; 0xff
 8014b8c:	21ff      	movs	r1, #255	; 0xff
 8014b8e:	20ff      	movs	r0, #255	; 0xff
 8014b90:	f7fe fde8 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b94:	4603      	mov	r3, r0
 8014b96:	4619      	mov	r1, r3
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f7fe f93c 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8014b9e:	1d3b      	adds	r3, r7, #4
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7fe f987 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8014bae:	1d3b      	adds	r3, r7, #4
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014bb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8014bba:	2120      	movs	r1, #32
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fe f8c1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014bc2:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f008 fb76 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8014bcc:	1d3b      	adds	r3, r7, #4
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8014bd4:	232a      	movs	r3, #42	; 0x2a
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	2348      	movs	r3, #72	; 0x48
 8014bda:	2255      	movs	r2, #85	; 0x55
 8014bdc:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014be0:	f7fc f8c2 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014be4:	1d3b      	adds	r3, r7, #4
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8014bec:	22ff      	movs	r2, #255	; 0xff
 8014bee:	21ff      	movs	r1, #255	; 0xff
 8014bf0:	20ff      	movs	r0, #255	; 0xff
 8014bf2:	f7fe fdb7 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7fe f90b 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8014c00:	1d3b      	adds	r3, r7, #4
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8014c08:	2100      	movs	r1, #0
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe f956 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8014c10:	1d3b      	adds	r3, r7, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f603 444c 	addw	r4, r3, #3148	; 0xc4c
 8014c18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014c1c:	2122      	movs	r1, #34	; 0x22
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fe f890 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014c24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fe f89b 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	4a5a      	ldr	r2, [pc, #360]	; (8014d9c <_ZN12MainViewBaseC1Ev+0x15e4>)
 8014c32:	2105      	movs	r1, #5
 8014c34:	4620      	mov	r0, r4
 8014c36:	f00c f83d 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8014c3a:	1d3b      	adds	r3, r7, #4
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f603 1278 	addw	r2, r3, #2424	; 0x978
 8014c42:	1d3b      	adds	r3, r7, #4
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	4610      	mov	r0, r2
 8014c4e:	f7fe f9bd 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8014c52:	1d3b      	adds	r3, r7, #4
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8014c5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014c5e:	2121      	movs	r1, #33	; 0x21
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7fe f86f 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014c66:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	f008 fb24 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8014c70:	1d3b      	adds	r3, r7, #4
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8014c78:	233c      	movs	r3, #60	; 0x3c
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	2360      	movs	r3, #96	; 0x60
 8014c7e:	229e      	movs	r2, #158	; 0x9e
 8014c80:	21c3      	movs	r1, #195	; 0xc3
 8014c82:	f7fc f871 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014c86:	1d3b      	adds	r3, r7, #4
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014c8e:	22ff      	movs	r2, #255	; 0xff
 8014c90:	21ff      	movs	r1, #255	; 0xff
 8014c92:	20ff      	movs	r0, #255	; 0xff
 8014c94:	f7fe fd66 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f7fe f8ba 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8014ca2:	1d3b      	adds	r3, r7, #4
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014caa:	2100      	movs	r1, #0
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fe f905 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8014cb2:	1d3b      	adds	r3, r7, #4
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f603 4456 	addw	r4, r3, #3158	; 0xc56
 8014cba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014cbe:	2124      	movs	r1, #36	; 0x24
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fe f83f 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014cc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe f84a 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	4a32      	ldr	r2, [pc, #200]	; (8014d9c <_ZN12MainViewBaseC1Ev+0x15e4>)
 8014cd4:	2105      	movs	r1, #5
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f00b ffec 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8014cdc:	1d3b      	adds	r3, r7, #4
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8014ce4:	1d3b      	adds	r3, r7, #4
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f603 4356 	addw	r3, r3, #3158	; 0xc56
 8014cec:	4619      	mov	r1, r3
 8014cee:	4610      	mov	r0, r2
 8014cf0:	f7fe f96c 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8014cf4:	1d3b      	adds	r3, r7, #4
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014cfc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014d00:	2123      	movs	r1, #35	; 0x23
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fe f81e 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014d08:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f008 fad3 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 8014d12:	1d3b      	adds	r3, r7, #4
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 8014d1a:	232a      	movs	r3, #42	; 0x2a
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	234e      	movs	r3, #78	; 0x4e
 8014d20:	2299      	movs	r2, #153	; 0x99
 8014d22:	2164      	movs	r1, #100	; 0x64
 8014d24:	f7fc f820 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014d28:	1d3b      	adds	r3, r7, #4
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8014d30:	22ff      	movs	r2, #255	; 0xff
 8014d32:	21ff      	movs	r1, #255	; 0xff
 8014d34:	20ff      	movs	r0, #255	; 0xff
 8014d36:	f7fe fd15 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f7fe f869 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 8014d44:	1d3b      	adds	r3, r7, #4
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe f8b4 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8014d54:	1d3b      	adds	r3, r7, #4
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	f503 6446 	add.w	r4, r3, #3168	; 0xc60
 8014d5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d60:	212f      	movs	r1, #47	; 0x2f
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fd ffee 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014d68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7fd fff9 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014d72:	4603      	mov	r3, r0
 8014d74:	4a09      	ldr	r2, [pc, #36]	; (8014d9c <_ZN12MainViewBaseC1Ev+0x15e4>)
 8014d76:	2105      	movs	r1, #5
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f00b ff9b 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014d7e:	1d3b      	adds	r3, r7, #4
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8014d86:	1d3b      	adds	r3, r7, #4
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8014d8e:	4619      	mov	r1, r3
 8014d90:	4610      	mov	r0, r2
 8014d92:	f7fe f91b 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014d96:	1d3b      	adds	r3, r7, #4
 8014d98:	e002      	b.n	8014da0 <_ZN12MainViewBaseC1Ev+0x15e8>
 8014d9a:	bf00      	nop
 8014d9c:	0802c110 	.word	0x0802c110
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8014da6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014daa:	212e      	movs	r1, #46	; 0x2e
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fd ffc9 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014db2:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	; 0xe0
 8014db6:	4620      	mov	r0, r4
 8014db8:	f008 fa7e 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8014dbc:	1d3b      	adds	r3, r7, #4
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014dc4:	22c1      	movs	r2, #193	; 0xc1
 8014dc6:	2172      	movs	r1, #114	; 0x72
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fd fd7b 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014dce:	1d3b      	adds	r3, r7, #4
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	21dc      	movs	r1, #220	; 0xdc
 8014dda:	20ff      	movs	r0, #255	; 0xff
 8014ddc:	f7fe fcc2 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014de0:	4603      	mov	r3, r0
 8014de2:	4619      	mov	r1, r3
 8014de4:	4620      	mov	r0, r4
 8014de6:	f7fe f816 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 8014dea:	1d3b      	adds	r3, r7, #4
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014df2:	2100      	movs	r1, #0
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fe f861 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 8014dfa:	1d3b      	adds	r3, r7, #4
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014e02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014e06:	2130      	movs	r1, #48	; 0x30
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7fd ff9b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014e0e:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8014e12:	4620      	mov	r0, r4
 8014e14:	f008 fa50 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 8014e18:	1d3b      	adds	r3, r7, #4
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8014e20:	232a      	movs	r3, #42	; 0x2a
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	2344      	movs	r3, #68	; 0x44
 8014e26:	2255      	movs	r2, #85	; 0x55
 8014e28:	f240 118f 	movw	r1, #399	; 0x18f
 8014e2c:	f7fb ff9c 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014e30:	1d3b      	adds	r3, r7, #4
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014e38:	22ff      	movs	r2, #255	; 0xff
 8014e3a:	21ff      	movs	r1, #255	; 0xff
 8014e3c:	20ff      	movs	r0, #255	; 0xff
 8014e3e:	f7fe fc91 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014e42:	4603      	mov	r3, r0
 8014e44:	4619      	mov	r1, r3
 8014e46:	4620      	mov	r0, r4
 8014e48:	f7fd ffe5 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8014e4c:	1d3b      	adds	r3, r7, #4
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014e54:	2100      	movs	r1, #0
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fe f830 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8014e5c:	1d3b      	adds	r3, r7, #4
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	f603 446a 	addw	r4, r3, #3178	; 0xc6a
 8014e64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014e68:	2132      	movs	r1, #50	; 0x32
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fd ff6a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014e70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fd ff75 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	4ae2      	ldr	r2, [pc, #904]	; (8015208 <_ZN12MainViewBaseC1Ev+0x1a50>)
 8014e7e:	2105      	movs	r1, #5
 8014e80:	4620      	mov	r0, r4
 8014e82:	f00b ff17 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8014e86:	1d3b      	adds	r3, r7, #4
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8014e8e:	1d3b      	adds	r3, r7, #4
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	f603 436a 	addw	r3, r3, #3178	; 0xc6a
 8014e96:	4619      	mov	r1, r3
 8014e98:	4610      	mov	r0, r2
 8014e9a:	f7fe f897 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014e9e:	1d3b      	adds	r3, r7, #4
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014ea6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014eaa:	2131      	movs	r1, #49	; 0x31
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fd ff49 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014eb2:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f008 f9fe 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8014ebc:	1d3b      	adds	r3, r7, #4
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014ec4:	227e      	movs	r2, #126	; 0x7e
 8014ec6:	f240 1197 	movw	r1, #407	; 0x197
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fd fcfa 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014ed0:	1d3b      	adds	r3, r7, #4
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014ed8:	2200      	movs	r2, #0
 8014eda:	21dc      	movs	r1, #220	; 0xdc
 8014edc:	20ff      	movs	r0, #255	; 0xff
 8014ede:	f7fe fc41 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f7fd ff95 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8014eec:	1d3b      	adds	r3, r7, #4
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014ef4:	2100      	movs	r1, #0
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7fd ffe0 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8014efc:	1d3b      	adds	r3, r7, #4
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014f04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014f08:	2133      	movs	r1, #51	; 0x33
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fd ff1a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014f10:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 8014f14:	4620      	mov	r0, r4
 8014f16:	f008 f9cf 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8014f1a:	1d3b      	adds	r3, r7, #4
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8014f22:	2311      	movs	r3, #17
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	2313      	movs	r3, #19
 8014f28:	22e2      	movs	r2, #226	; 0xe2
 8014f2a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8014f2e:	f7fb ff1b 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8014f32:	1d3b      	adds	r3, r7, #4
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014f3a:	220d      	movs	r2, #13
 8014f3c:	210d      	movs	r1, #13
 8014f3e:	200d      	movs	r0, #13
 8014f40:	f7fe fc10 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014f44:	4603      	mov	r3, r0
 8014f46:	4619      	mov	r1, r3
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f7fd ff64 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8014f4e:	1d3b      	adds	r3, r7, #4
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014f56:	2100      	movs	r1, #0
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fd ffaf 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014f5e:	1d3b      	adds	r3, r7, #4
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	f603 4474 	addw	r4, r3, #3188	; 0xc74
 8014f66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014f6a:	2135      	movs	r1, #53	; 0x35
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fd fee9 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014f72:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7fd fef4 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	4aa2      	ldr	r2, [pc, #648]	; (8015208 <_ZN12MainViewBaseC1Ev+0x1a50>)
 8014f80:	2105      	movs	r1, #5
 8014f82:	4620      	mov	r0, r4
 8014f84:	f00b fe96 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8014f88:	1d3b      	adds	r3, r7, #4
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014f90:	1d3b      	adds	r3, r7, #4
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f603 4374 	addw	r3, r3, #3188	; 0xc74
 8014f98:	4619      	mov	r1, r3
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	f7fe f816 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014fa0:	1d3b      	adds	r3, r7, #4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014fa8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014fac:	2134      	movs	r1, #52	; 0x34
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fd fec8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8014fb4:	f8b7 10f8 	ldrh.w	r1, [r7, #248]	; 0xf8
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f008 f97d 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 8014fbe:	1d3b      	adds	r3, r7, #4
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014fc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	237a      	movs	r3, #122	; 0x7a
 8014fce:	2200      	movs	r2, #0
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	f000 fbad 	bl	8015730 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014fd6:	1d3b      	adds	r3, r7, #4
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014fde:	2105      	movs	r1, #5
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f000 fbc5 	bl	8015770 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014fe6:	1d3b      	adds	r3, r7, #4
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014fee:	2299      	movs	r2, #153	; 0x99
 8014ff0:	2166      	movs	r1, #102	; 0x66
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	f7fe fbb6 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014ff8:	4605      	mov	r5, r0
 8014ffa:	22cc      	movs	r2, #204	; 0xcc
 8014ffc:	2199      	movs	r1, #153	; 0x99
 8014ffe:	2000      	movs	r0, #0
 8015000:	f7fe fbb0 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015004:	4606      	mov	r6, r0
 8015006:	2266      	movs	r2, #102	; 0x66
 8015008:	2133      	movs	r1, #51	; 0x33
 801500a:	2000      	movs	r0, #0
 801500c:	f7fe fbaa 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015010:	4680      	mov	r8, r0
 8015012:	2299      	movs	r2, #153	; 0x99
 8015014:	2166      	movs	r1, #102	; 0x66
 8015016:	2033      	movs	r0, #51	; 0x33
 8015018:	f7fe fba4 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801501c:	4603      	mov	r3, r0
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	4643      	mov	r3, r8
 8015022:	4632      	mov	r2, r6
 8015024:	4629      	mov	r1, r5
 8015026:	4620      	mov	r0, r4
 8015028:	f000 fbb3 	bl	8015792 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 801502c:	1d3b      	adds	r3, r7, #4
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8015034:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015038:	9300      	str	r3, [sp, #0]
 801503a:	237a      	movs	r3, #122	; 0x7a
 801503c:	2200      	movs	r2, #0
 801503e:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8015042:	f7fb fe91 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 8015046:	1d3b      	adds	r3, r7, #4
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801504e:	2100      	movs	r1, #0
 8015050:	4618      	mov	r0, r3
 8015052:	f7fe f8d2 	bl	80131fa <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 8015056:	1d3b      	adds	r3, r7, #4
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 801505e:	1d3b      	adds	r3, r7, #4
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8015066:	4619      	mov	r1, r3
 8015068:	4610      	mov	r0, r2
 801506a:	f7fe f8e7 	bl	801323c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    KMHValue.setPosition(47, 214, 67, 42);
 801506e:	1d3b      	adds	r3, r7, #4
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8015076:	232a      	movs	r3, #42	; 0x2a
 8015078:	9300      	str	r3, [sp, #0]
 801507a:	2343      	movs	r3, #67	; 0x43
 801507c:	22d6      	movs	r2, #214	; 0xd6
 801507e:	212f      	movs	r1, #47	; 0x2f
 8015080:	f7fb fe72 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015084:	1d3b      	adds	r3, r7, #4
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 801508c:	22ff      	movs	r2, #255	; 0xff
 801508e:	21ff      	movs	r1, #255	; 0xff
 8015090:	20ff      	movs	r0, #255	; 0xff
 8015092:	f7fe fb67 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015096:	4603      	mov	r3, r0
 8015098:	4619      	mov	r1, r3
 801509a:	4620      	mov	r0, r4
 801509c:	f7fd febb 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 80150a0:	1d3b      	adds	r3, r7, #4
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80150a8:	2100      	movs	r1, #0
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fd ff06 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID98).getText());
 80150b0:	1d3b      	adds	r3, r7, #4
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f603 447e 	addw	r4, r3, #3198	; 0xc7e
 80150b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80150bc:	215b      	movs	r1, #91	; 0x5b
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fd fe40 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80150c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fd fe4b 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80150ce:	4603      	mov	r3, r0
 80150d0:	4a4d      	ldr	r2, [pc, #308]	; (8015208 <_ZN12MainViewBaseC1Ev+0x1a50>)
 80150d2:	2105      	movs	r1, #5
 80150d4:	4620      	mov	r0, r4
 80150d6:	f00b fded 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 80150da:	1d3b      	adds	r3, r7, #4
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f503 6237 	add.w	r2, r3, #2928	; 0xb70
 80150e2:	1d3b      	adds	r3, r7, #4
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f603 437e 	addw	r3, r3, #3198	; 0xc7e
 80150ea:	4619      	mov	r1, r3
 80150ec:	4610      	mov	r0, r2
 80150ee:	f7fd ff6d 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID97));
 80150f2:	1d3b      	adds	r3, r7, #4
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 80150fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80150fe:	215a      	movs	r1, #90	; 0x5a
 8015100:	4618      	mov	r0, r3
 8015102:	f7fd fe1f 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8015106:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 801510a:	4620      	mov	r0, r4
 801510c:	f008 f8d4 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHDescriptor.setXY(116, 229);
 8015110:	1d3b      	adds	r3, r7, #4
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8015118:	22e5      	movs	r2, #229	; 0xe5
 801511a:	2174      	movs	r1, #116	; 0x74
 801511c:	4618      	mov	r0, r3
 801511e:	f7fd fbd1 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    KMHDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8015122:	1d3b      	adds	r3, r7, #4
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	f603 34a8 	addw	r4, r3, #2984	; 0xba8
 801512a:	2200      	movs	r2, #0
 801512c:	21dc      	movs	r1, #220	; 0xdc
 801512e:	20ff      	movs	r0, #255	; 0xff
 8015130:	f7fe fb18 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015134:	4603      	mov	r3, r0
 8015136:	4619      	mov	r1, r3
 8015138:	4620      	mov	r0, r4
 801513a:	f7fd fe6c 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHDescriptor.setLinespacing(0);
 801513e:	1d3b      	adds	r3, r7, #4
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8015146:	2100      	movs	r1, #0
 8015148:	4618      	mov	r0, r3
 801514a:	f7fd feb7 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    KMHDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID99));
 801514e:	1d3b      	adds	r3, r7, #4
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	f603 34a8 	addw	r4, r3, #2984	; 0xba8
 8015156:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801515a:	215c      	movs	r1, #92	; 0x5c
 801515c:	4618      	mov	r0, r3
 801515e:	f7fd fdf1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8015162:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 8015166:	4620      	mov	r0, r4
 8015168:	f008 f8a6 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 801516c:	1d3b      	adds	r3, r7, #4
 801516e:	681a      	ldr	r2, [r3, #0]
 8015170:	1d3b      	adds	r3, r7, #4
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	3340      	adds	r3, #64	; 0x40
 8015176:	4619      	mov	r1, r3
 8015178:	4610      	mov	r0, r2
 801517a:	f7fd fd2b 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801517e:	1d3b      	adds	r3, r7, #4
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	1d3b      	adds	r3, r7, #4
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	3370      	adds	r3, #112	; 0x70
 8015188:	4619      	mov	r1, r3
 801518a:	4610      	mov	r0, r2
 801518c:	f7fd fd22 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8015190:	1d3b      	adds	r3, r7, #4
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	1d3b      	adds	r3, r7, #4
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	33a4      	adds	r3, #164	; 0xa4
 801519a:	4619      	mov	r1, r3
 801519c:	4610      	mov	r0, r2
 801519e:	f7fd fd19 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80151a2:	1d3b      	adds	r3, r7, #4
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	1d3b      	adds	r3, r7, #4
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	33d8      	adds	r3, #216	; 0xd8
 80151ac:	4619      	mov	r1, r3
 80151ae:	4610      	mov	r0, r2
 80151b0:	f7fd fd10 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80151b4:	1d3b      	adds	r3, r7, #4
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	1d3b      	adds	r3, r7, #4
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80151c0:	4619      	mov	r1, r3
 80151c2:	4610      	mov	r0, r2
 80151c4:	f7fd fd06 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80151c8:	1d3b      	adds	r3, r7, #4
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	1d3b      	adds	r3, r7, #4
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80151d4:	4619      	mov	r1, r3
 80151d6:	4610      	mov	r0, r2
 80151d8:	f7fd fcfc 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 80151dc:	1d3b      	adds	r3, r7, #4
 80151de:	681a      	ldr	r2, [r3, #0]
 80151e0:	1d3b      	adds	r3, r7, #4
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80151e8:	4619      	mov	r1, r3
 80151ea:	4610      	mov	r0, r2
 80151ec:	f7fd fcf2 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80151f0:	1d3b      	adds	r3, r7, #4
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	1d3b      	adds	r3, r7, #4
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80151fc:	4619      	mov	r1, r3
 80151fe:	4610      	mov	r0, r2
 8015200:	f7fd fce8 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 8015204:	e002      	b.n	801520c <_ZN12MainViewBaseC1Ev+0x1a54>
 8015206:	bf00      	nop
 8015208:	0802c110 	.word	0x0802c110
    add(rpm1);
 801520c:	1d3b      	adds	r3, r7, #4
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	1d3b      	adds	r3, r7, #4
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015218:	4619      	mov	r1, r3
 801521a:	4610      	mov	r0, r2
 801521c:	f7fd fcda 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8015220:	1d3b      	adds	r3, r7, #4
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	1d3b      	adds	r3, r7, #4
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801522c:	4619      	mov	r1, r3
 801522e:	4610      	mov	r0, r2
 8015230:	f7fd fcd0 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8015234:	1d3b      	adds	r3, r7, #4
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	1d3b      	adds	r3, r7, #4
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015240:	4619      	mov	r1, r3
 8015242:	4610      	mov	r0, r2
 8015244:	f7fd fcc6 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8015248:	1d3b      	adds	r3, r7, #4
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	1d3b      	adds	r3, r7, #4
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015254:	4619      	mov	r1, r3
 8015256:	4610      	mov	r0, r2
 8015258:	f7fd fcbc 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 801525c:	1d3b      	adds	r3, r7, #4
 801525e:	681a      	ldr	r2, [r3, #0]
 8015260:	1d3b      	adds	r3, r7, #4
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015268:	4619      	mov	r1, r3
 801526a:	4610      	mov	r0, r2
 801526c:	f7fd fcb2 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8015270:	1d3b      	adds	r3, r7, #4
 8015272:	681a      	ldr	r2, [r3, #0]
 8015274:	1d3b      	adds	r3, r7, #4
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801527c:	4619      	mov	r1, r3
 801527e:	4610      	mov	r0, r2
 8015280:	f7fd fca8 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8015284:	1d3b      	adds	r3, r7, #4
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	1d3b      	adds	r3, r7, #4
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015290:	4619      	mov	r1, r3
 8015292:	4610      	mov	r0, r2
 8015294:	f7fd fc9e 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8015298:	1d3b      	adds	r3, r7, #4
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	1d3b      	adds	r3, r7, #4
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80152a4:	4619      	mov	r1, r3
 80152a6:	4610      	mov	r0, r2
 80152a8:	f7fd fc94 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80152ac:	1d3b      	adds	r3, r7, #4
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	1d3b      	adds	r3, r7, #4
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80152b8:	4619      	mov	r1, r3
 80152ba:	4610      	mov	r0, r2
 80152bc:	f7fd fc8a 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 80152c0:	1d3b      	adds	r3, r7, #4
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	1d3b      	adds	r3, r7, #4
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80152cc:	4619      	mov	r1, r3
 80152ce:	4610      	mov	r0, r2
 80152d0:	f7fd fc80 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 80152d4:	1d3b      	adds	r3, r7, #4
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	1d3b      	adds	r3, r7, #4
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80152e0:	4619      	mov	r1, r3
 80152e2:	4610      	mov	r0, r2
 80152e4:	f7fd fc76 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 80152e8:	1d3b      	adds	r3, r7, #4
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	1d3b      	adds	r3, r7, #4
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80152f4:	4619      	mov	r1, r3
 80152f6:	4610      	mov	r0, r2
 80152f8:	f7fd fc6c 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 80152fc:	1d3b      	adds	r3, r7, #4
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	1d3b      	adds	r3, r7, #4
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8015308:	4619      	mov	r1, r3
 801530a:	4610      	mov	r0, r2
 801530c:	f7fd fc62 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8015310:	1d3b      	adds	r3, r7, #4
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	1d3b      	adds	r3, r7, #4
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801531c:	4619      	mov	r1, r3
 801531e:	4610      	mov	r0, r2
 8015320:	f7fd fc58 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8015324:	1d3b      	adds	r3, r7, #4
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	1d3b      	adds	r3, r7, #4
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8015330:	4619      	mov	r1, r3
 8015332:	4610      	mov	r0, r2
 8015334:	f7fd fc4e 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8015338:	1d3b      	adds	r3, r7, #4
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	1d3b      	adds	r3, r7, #4
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8015344:	4619      	mov	r1, r3
 8015346:	4610      	mov	r0, r2
 8015348:	f7fd fc44 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 801534c:	1d3b      	adds	r3, r7, #4
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	1d3b      	adds	r3, r7, #4
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8015358:	4619      	mov	r1, r3
 801535a:	4610      	mov	r0, r2
 801535c:	f7fd fc3a 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8015360:	1d3b      	adds	r3, r7, #4
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	1d3b      	adds	r3, r7, #4
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801536c:	4619      	mov	r1, r3
 801536e:	4610      	mov	r0, r2
 8015370:	f7fd fc30 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8015374:	1d3b      	adds	r3, r7, #4
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	1d3b      	adds	r3, r7, #4
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8015380:	4619      	mov	r1, r3
 8015382:	4610      	mov	r0, r2
 8015384:	f7fd fc26 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8015388:	1d3b      	adds	r3, r7, #4
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	1d3b      	adds	r3, r7, #4
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8015394:	4619      	mov	r1, r3
 8015396:	4610      	mov	r0, r2
 8015398:	f7fd fc1c 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 801539c:	1d3b      	adds	r3, r7, #4
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	1d3b      	adds	r3, r7, #4
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80153a8:	4619      	mov	r1, r3
 80153aa:	4610      	mov	r0, r2
 80153ac:	f7fd fc12 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80153b0:	1d3b      	adds	r3, r7, #4
 80153b2:	681a      	ldr	r2, [r3, #0]
 80153b4:	1d3b      	adds	r3, r7, #4
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80153bc:	4619      	mov	r1, r3
 80153be:	4610      	mov	r0, r2
 80153c0:	f7fd fc08 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80153c4:	1d3b      	adds	r3, r7, #4
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	1d3b      	adds	r3, r7, #4
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80153d0:	4619      	mov	r1, r3
 80153d2:	4610      	mov	r0, r2
 80153d4:	f7fd fbfe 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 80153d8:	1d3b      	adds	r3, r7, #4
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	1d3b      	adds	r3, r7, #4
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80153e4:	4619      	mov	r1, r3
 80153e6:	4610      	mov	r0, r2
 80153e8:	f7fd fbf4 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80153ec:	1d3b      	adds	r3, r7, #4
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	1d3b      	adds	r3, r7, #4
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80153f8:	4619      	mov	r1, r3
 80153fa:	4610      	mov	r0, r2
 80153fc:	f7fd fbea 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8015400:	1d3b      	adds	r3, r7, #4
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	1d3b      	adds	r3, r7, #4
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801540c:	4619      	mov	r1, r3
 801540e:	4610      	mov	r0, r2
 8015410:	f7fd fbe0 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8015414:	1d3b      	adds	r3, r7, #4
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	1d3b      	adds	r3, r7, #4
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8015420:	4619      	mov	r1, r3
 8015422:	4610      	mov	r0, r2
 8015424:	f7fd fbd6 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 8015428:	1d3b      	adds	r3, r7, #4
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	1d3b      	adds	r3, r7, #4
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8015434:	4619      	mov	r1, r3
 8015436:	4610      	mov	r0, r2
 8015438:	f7fd fbcc 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 801543c:	1d3b      	adds	r3, r7, #4
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	1d3b      	adds	r3, r7, #4
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8015448:	4619      	mov	r1, r3
 801544a:	4610      	mov	r0, r2
 801544c:	f7fd fbc2 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8015450:	1d3b      	adds	r3, r7, #4
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	1d3b      	adds	r3, r7, #4
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7fd fbb8 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8015464:	1d3b      	adds	r3, r7, #4
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	1d3b      	adds	r3, r7, #4
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8015470:	4619      	mov	r1, r3
 8015472:	4610      	mov	r0, r2
 8015474:	f7fd fbae 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8015478:	1d3b      	adds	r3, r7, #4
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	1d3b      	adds	r3, r7, #4
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8015484:	4619      	mov	r1, r3
 8015486:	4610      	mov	r0, r2
 8015488:	f7fd fba4 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 801548c:	1d3b      	adds	r3, r7, #4
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	1d3b      	adds	r3, r7, #4
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8015498:	4619      	mov	r1, r3
 801549a:	4610      	mov	r0, r2
 801549c:	f7fd fb9a 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 80154a0:	1d3b      	adds	r3, r7, #4
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	1d3b      	adds	r3, r7, #4
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80154ac:	4619      	mov	r1, r3
 80154ae:	4610      	mov	r0, r2
 80154b0:	f7fd fb90 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHDescriptor);
 80154b4:	1d3b      	adds	r3, r7, #4
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	1d3b      	adds	r3, r7, #4
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80154c0:	4619      	mov	r1, r3
 80154c2:	4610      	mov	r0, r2
 80154c4:	f7fd fb86 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80154c8:	1d3b      	adds	r3, r7, #4
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4618      	mov	r0, r3
 80154ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80154d2:	46bd      	mov	sp, r7
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154d8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80154d8:	b480      	push	{r7}
 80154da:	b083      	sub	sp, #12
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]

}
 80154e0:	bf00      	nop
 80154e2:	370c      	adds	r7, #12
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d106      	bne.n	8015510 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f7fe f923 	bl	801374e <_ZN12MainViewBase11applicationEv>
 8015508:	4603      	mov	r3, r0
 801550a:	4618      	mov	r0, r3
 801550c:	f7fb ff30 	bl	8011370 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8015510:	bf00      	nop
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	4a08      	ldr	r2, [pc, #32]	; (8015544 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	601a      	str	r2, [r3, #0]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	3334      	adds	r3, #52	; 0x34
 801552a:	4618      	mov	r0, r3
 801552c:	f7fd ff56 	bl	80133dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	4618      	mov	r0, r3
 8015534:	f7fd feb6 	bl	80132a4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	4618      	mov	r0, r3
 801553c:	3708      	adds	r7, #8
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	0802cca8 	.word	0x0802cca8

08015548 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f7ff ffe1 	bl	8015518 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8015556:	2178      	movs	r1, #120	; 0x78
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f015 fb18 	bl	802ab8e <_ZdlPvj>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	4618      	mov	r0, r3
 8015562:	3708      	adds	r7, #8
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	4618      	mov	r0, r3
 8015574:	f00a fa9e 	bl	801fab4 <_ZN8touchgfx6ScreenC1Ev>
 8015578:	4a05      	ldr	r2, [pc, #20]	; (8015590 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2200      	movs	r2, #0
 8015582:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	4618      	mov	r0, r3
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	0802cd3c 	.word	0x0802cd3c

08015594 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7fd fe6e 	bl	8013280 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 80155a4:	4a17      	ldr	r2, [pc, #92]	; (8015604 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	3334      	adds	r3, #52	; 0x34
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7fd feee 	bl	8013390 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	3368      	adds	r3, #104	; 0x68
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7fd f8a6 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	336c      	adds	r3, #108	; 0x6c
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fd f8a1 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	3370      	adds	r3, #112	; 0x70
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fd f89c 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	3374      	adds	r3, #116	; 0x74
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7fd f897 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	3334      	adds	r3, #52	; 0x34
 80155e0:	2200      	movs	r2, #0
 80155e2:	2100      	movs	r1, #0
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7fd f96d 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	3334      	adds	r3, #52	; 0x34
 80155f0:	4619      	mov	r1, r3
 80155f2:	4610      	mov	r0, r2
 80155f4:	f005 ff48 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	4618      	mov	r0, r3
 80155fc:	3708      	adds	r7, #8
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}
 8015602:	bf00      	nop
 8015604:	0802cca8 	.word	0x0802cca8

08015608 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	4a04      	ldr	r2, [pc, #16]	; (8015624 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	601a      	str	r2, [r3, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	4618      	mov	r0, r3
 801561a:	370c      	adds	r7, #12
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr
 8015624:	0802ce04 	.word	0x0802ce04

08015628 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015628:	b580      	push	{r7, lr}
 801562a:	b084      	sub	sp, #16
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	4639      	mov	r1, r7
 8015634:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	4618      	mov	r0, r3
 801563c:	f7ff ffe4 	bl	8015608 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8015640:	4a08      	ldr	r2, [pc, #32]	; (8015664 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	68ba      	ldr	r2, [r7, #8]
 801564a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	3308      	adds	r3, #8
 8015650:	463a      	mov	r2, r7
 8015652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015656:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	4618      	mov	r0, r3
 801565e:	3710      	adds	r7, #16
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	0802cc90 	.word	0x0802cc90

08015668 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8015668:	b590      	push	{r4, r7, lr}
 801566a:	b089      	sub	sp, #36	; 0x24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	015a      	lsls	r2, r3, #5
 801567c:	f107 0314 	add.w	r3, r7, #20
 8015680:	4611      	mov	r1, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f7fd fcd2 	bl	801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	461c      	mov	r4, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	61fb      	str	r3, [r7, #28]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	015a      	lsls	r2, r3, #5
 8015694:	f107 0310 	add.w	r3, r7, #16
 8015698:	4611      	mov	r1, r2
 801569a:	4618      	mov	r0, r3
 801569c:	f7fd fcc6 	bl	801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80156a0:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80156a2:	461a      	mov	r2, r3
 80156a4:	4621      	mov	r1, r4
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	f007 fb7a 	bl	801cda0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80156ac:	bf00      	nop
 80156ae:	3724      	adds	r7, #36	; 0x24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd90      	pop	{r4, r7, pc}

080156b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80156b4:	b590      	push	{r4, r7, lr}
 80156b6:	b089      	sub	sp, #36	; 0x24
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	60f8      	str	r0, [r7, #12]
 80156bc:	60b9      	str	r1, [r7, #8]
 80156be:	607a      	str	r2, [r7, #4]
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	61bb      	str	r3, [r7, #24]
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	015a      	lsls	r2, r3, #5
 80156c8:	f107 0314 	add.w	r3, r7, #20
 80156cc:	4611      	mov	r1, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fd fcac 	bl	801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	461c      	mov	r4, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	61fb      	str	r3, [r7, #28]
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	015a      	lsls	r2, r3, #5
 80156e0:	f107 0310 	add.w	r3, r7, #16
 80156e4:	4611      	mov	r1, r2
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fd fca0 	bl	801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80156ec:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80156ee:	461a      	mov	r2, r3
 80156f0:	4621      	mov	r1, r4
 80156f2:	68f8      	ldr	r0, [r7, #12]
 80156f4:	f007 fb5f 	bl	801cdb6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80156f8:	bf00      	nop
 80156fa:	3724      	adds	r7, #36	; 0x24
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd90      	pop	{r4, r7, pc}

08015700 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	60fb      	str	r3, [r7, #12]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	015a      	lsls	r2, r3, #5
 8015712:	f107 0308 	add.w	r3, r7, #8
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd fc87 	bl	801302c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801571e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8015720:	4619      	mov	r1, r3
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7fd fc9d 	bl	8013062 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8015728:	bf00      	nop
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8015730:	b590      	push	{r4, r7, lr}
 8015732:	b087      	sub	sp, #28
 8015734:	af02      	add	r7, sp, #8
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	4608      	mov	r0, r1
 801573a:	4611      	mov	r1, r2
 801573c:	461a      	mov	r2, r3
 801573e:	4603      	mov	r3, r0
 8015740:	817b      	strh	r3, [r7, #10]
 8015742:	460b      	mov	r3, r1
 8015744:	813b      	strh	r3, [r7, #8]
 8015746:	4613      	mov	r3, r2
 8015748:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8015750:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015754:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015758:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801575c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015760:	9300      	str	r3, [sp, #0]
 8015762:	4623      	mov	r3, r4
 8015764:	f7fb fb00 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8015768:	bf00      	nop
 801576a:	3714      	adds	r7, #20
 801576c:	46bd      	mov	sp, r7
 801576e:	bd90      	pop	{r4, r7, pc}

08015770 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	460b      	mov	r3, r1
 801577a:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	3334      	adds	r3, #52	; 0x34
 8015780:	78fa      	ldrb	r2, [r7, #3]
 8015782:	4611      	mov	r1, r2
 8015784:	4618      	mov	r0, r3
 8015786:	f7fd fe67 	bl	8013458 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801578a:	bf00      	nop
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015792:	b580      	push	{r7, lr}
 8015794:	b084      	sub	sp, #16
 8015796:	af00      	add	r7, sp, #0
 8015798:	60f8      	str	r0, [r7, #12]
 801579a:	60b9      	str	r1, [r7, #8]
 801579c:	607a      	str	r2, [r7, #4]
 801579e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	68ba      	ldr	r2, [r7, #8]
 80157a4:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	683a      	ldr	r2, [r7, #0]
 80157b0:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	69ba      	ldr	r2, [r7, #24]
 80157b6:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	3384      	adds	r3, #132	; 0x84
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	4798      	blx	r3
    }
 80157c4:	bf00      	nop
 80157c6:	3710      	adds	r7, #16
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
    }
 80157d4:	4a04      	ldr	r2, [pc, #16]	; (80157e8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	601a      	str	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	0802ce04 	.word	0x0802ce04

080157ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    }
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7ff ffe9 	bl	80157cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80157fa:	2104      	movs	r1, #4
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f015 f9c6 	bl	802ab8e <_ZdlPvj>
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	4618      	mov	r0, r3
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801580c:	b590      	push	{r4, r7, lr}
 801580e:	b083      	sub	sp, #12
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4618      	mov	r0, r3
 801581e:	f7fd fcdf 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d002      	beq.n	801582e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	336c      	adds	r3, #108	; 0x6c
 801582c:	e001      	b.n	8015832 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	3368      	adds	r3, #104	; 0x68
 8015832:	6819      	ldr	r1, [r3, #0]
 8015834:	4620      	mov	r0, r4
 8015836:	f7fd fdf3 	bl	8013420 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	4618      	mov	r0, r3
 8015844:	f7fd fccc 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d002      	beq.n	8015854 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	3374      	adds	r3, #116	; 0x74
 8015852:	e001      	b.n	8015858 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3370      	adds	r3, #112	; 0x70
 8015858:	6819      	ldr	r1, [r3, #0]
 801585a:	4620      	mov	r0, r4
 801585c:	f7fd fdee 	bl	801343c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	f7fd fcf8 	bl	8013258 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8015868:	bf00      	nop
 801586a:	370c      	adds	r7, #12
 801586c:	46bd      	mov	sp, r7
 801586e:	bd90      	pop	{r4, r7, pc}

08015870 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	4a05      	ldr	r2, [pc, #20]	; (8015890 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	601a      	str	r2, [r3, #0]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	4618      	mov	r0, r3
 8015882:	f7ff ffa3 	bl	80157cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	0802cc90 	.word	0x0802cc90

08015894 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7ff ffe7 	bl	8015870 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80158a2:	2110      	movs	r1, #16
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f015 f972 	bl	802ab8e <_ZdlPvj>
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	4618      	mov	r0, r3
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	4a05      	ldr	r2, [pc, #20]	; (80158d4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	601a      	str	r2, [r3, #0]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7fd fb49 	bl	8012f5c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	0802ee54 	.word	0x0802ee54

080158d8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff ffe7 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80158e6:	2138      	movs	r1, #56	; 0x38
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f015 f950 	bl	802ab8e <_ZdlPvj>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b082      	sub	sp, #8
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	4a05      	ldr	r2, [pc, #20]	; (8015918 <_ZN8touchgfx4LineD1Ev+0x20>)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	601a      	str	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4618      	mov	r0, r3
 801590a:	f007 f823 	bl	801c954 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	0802ea80 	.word	0x0802ea80

0801591c <_ZN8touchgfx4LineD0Ev>:
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f7ff ffe7 	bl	80158f8 <_ZN8touchgfx4LineD1Ev>
 801592a:	2174      	movs	r1, #116	; 0x74
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f015 f92e 	bl	802ab8e <_ZdlPvj>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}

0801593c <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	4a05      	ldr	r2, [pc, #20]	; (801595c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	601a      	str	r2, [r3, #0]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	4618      	mov	r0, r3
 801594e:	f7fd fbab 	bl	80130a8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	4618      	mov	r0, r3
 8015956:	3708      	adds	r7, #8
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}
 801595c:	0802e784 	.word	0x0802e784

08015960 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f7ff ffe7 	bl	801593c <_ZN8touchgfx13PainterRGB888D1Ev>
 801596e:	2118      	movs	r1, #24
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f015 f90c 	bl	802ab8e <_ZdlPvj>
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	4618      	mov	r0, r3
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	68d2      	ldr	r2, [r2, #12]
 8015992:	1052      	asrs	r2, r2, #1
 8015994:	1898      	adds	r0, r3, r2
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	f003 0301 	and.w	r3, r3, #1
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d102      	bne.n	80159a8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	e00a      	b.n	80159be <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	68d2      	ldr	r2, [r2, #12]
 80159b0:	1052      	asrs	r2, r2, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	6892      	ldr	r2, [r2, #8]
 80159ba:	4413      	add	r3, r2
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	6839      	ldr	r1, [r7, #0]
 80159c0:	4798      	blx	r3
    }
 80159c2:	bf00      	nop
 80159c4:	3708      	adds	r7, #8
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}

080159ca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80159ca:	b480      	push	{r7}
 80159cc:	b083      	sub	sp, #12
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d010      	beq.n	80159fc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d107      	bne.n	80159f2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	f003 0301 	and.w	r3, r3, #1
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d101      	bne.n	80159f2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80159ee:	2301      	movs	r3, #1
 80159f0:	e000      	b.n	80159f4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80159f2:	2300      	movs	r3, #0
 80159f4:	2b01      	cmp	r3, #1
 80159f6:	d001      	beq.n	80159fc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80159f8:	2301      	movs	r3, #1
 80159fa:	e000      	b.n	80159fe <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80159fc:	2300      	movs	r3, #0
    }
 80159fe:	4618      	mov	r0, r3
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8015a0a:	b590      	push	{r4, r7, lr}
 8015a0c:	b083      	sub	sp, #12
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7fd fc01 	bl	8013222 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015a20:	4603      	mov	r3, r0
 8015a22:	4619      	mov	r1, r3
 8015a24:	4620      	mov	r0, r4
 8015a26:	f7fd fd27 	bl	8013478 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7fd fc1d 	bl	801326c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8015a32:	bf00      	nop
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd90      	pop	{r4, r7, pc}
	...

08015a3c <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7fd fb72 	bl	8013130 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8015a4c:	4a03      	ldr	r2, [pc, #12]	; (8015a5c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	4618      	mov	r0, r3
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	0802d140 	.word	0x0802d140

08015a60 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	4a05      	ldr	r2, [pc, #20]	; (8015a80 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	601a      	str	r2, [r3, #0]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fd fb7f 	bl	8013174 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	0802d140 	.word	0x0802d140

08015a84 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f7ff ffe7 	bl	8015a60 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015a92:	2134      	movs	r1, #52	; 0x34
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f015 f87a 	bl	802ab8e <_ZdlPvj>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7fd fb95 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8015aba:	6838      	ldr	r0, [r7, #0]
 8015abc:	f7fc fe79 	bl	80127b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	bf0c      	ite	eq
 8015ac6:	2301      	moveq	r3, #1
 8015ac8:	2300      	movne	r3, #0
 8015aca:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8015acc:	7bbb      	ldrb	r3, [r7, #14]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d005      	beq.n	8015ade <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8015ad2:	7bfb      	ldrb	r3, [r7, #15]
 8015ad4:	f083 0301 	eor.w	r3, r3, #1
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d108      	bne.n	8015af0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	f083 0301 	eor.w	r3, r3, #1
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00f      	beq.n	8015b0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d00c      	beq.n	8015b0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	7bba      	ldrb	r2, [r7, #14]
 8015af4:	4611      	mov	r1, r2
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fd fb5e 	bl	80131b8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	3314      	adds	r3, #20
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	4610      	mov	r0, r2
 8015b08:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00b      	beq.n	8015b28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b10:	6838      	ldr	r0, [r7, #0]
 8015b12:	f7fc fe4e 	bl	80127b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d105      	bne.n	8015b28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d001      	beq.n	8015b28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015b24:	2301      	movs	r3, #1
 8015b26:	e000      	b.n	8015b2a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8015b28:	2300      	movs	r3, #0
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d015      	beq.n	8015b5a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	330c      	adds	r3, #12
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4610      	mov	r0, r2
 8015b3e:	4798      	blx	r3
 8015b40:	4603      	mov	r3, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d009      	beq.n	8015b5a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	3308      	adds	r3, #8
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	6879      	ldr	r1, [r7, #4]
 8015b56:	4610      	mov	r0, r2
 8015b58:	4798      	blx	r3
            }
        }
    }
 8015b5a:	bf00      	nop
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
	...

08015b64 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7fd f840 	bl	8012bf4 <_ZN8touchgfx6WidgetC1Ev>
 8015b74:	4a09      	ldr	r2, [pc, #36]	; (8015b9c <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	601a      	str	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2200      	movs	r2, #0
 8015b84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2101      	movs	r1, #1
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fc ff1a 	bl	80129c6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	4618      	mov	r0, r3
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}
 8015b9c:	0802eb6c 	.word	0x0802eb6c

08015ba0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	683a      	ldr	r2, [r7, #0]
 8015bae:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8015bb0:	bf00      	nop
 8015bb2:	370c      	adds	r7, #12
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bba:	4770      	bx	lr

08015bbc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	4a05      	ldr	r2, [pc, #20]	; (8015bdc <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	601a      	str	r2, [r3, #0]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fd f823 	bl	8012c18 <_ZN8touchgfx6WidgetD1Ev>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3708      	adds	r7, #8
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0802eb6c 	.word	0x0802eb6c

08015be0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7ff ffe7 	bl	8015bbc <_ZN8touchgfx14AbstractButtonD1Ev>
 8015bee:	2130      	movs	r1, #48	; 0x30
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f014 ffcc 	bl	802ab8e <_ZdlPvj>
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3708      	adds	r7, #8
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff ffaa 	bl	8015b64 <_ZN8touchgfx14AbstractButtonC1Ev>
 8015c10:	4a0c      	ldr	r2, [pc, #48]	; (8015c44 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	601a      	str	r2, [r3, #0]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	332e      	adds	r3, #46	; 0x2e
 8015c1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7fc fdd3 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	3330      	adds	r3, #48	; 0x30
 8015c28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f7fc fdcc 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	22ff      	movs	r2, #255	; 0xff
 8015c36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	0802edb0 	.word	0x0802edb0

08015c48 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	4a05      	ldr	r2, [pc, #20]	; (8015c68 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	601a      	str	r2, [r3, #0]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ff ffaf 	bl	8015bbc <_ZN8touchgfx14AbstractButtonD1Ev>
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	0802edb0 	.word	0x0802edb0

08015c6c <_ZN8touchgfx6ButtonD0Ev>:
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f7ff ffe7 	bl	8015c48 <_ZN8touchgfx6ButtonD1Ev>
 8015c7a:	2134      	movs	r1, #52	; 0x34
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f014 ff86 	bl	802ab8e <_ZdlPvj>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	4a05      	ldr	r2, [pc, #20]	; (8015cac <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	601a      	str	r2, [r3, #0]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7fc ff41 	bl	8012b24 <_ZN8touchgfx6ScreenD1Ev>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3708      	adds	r7, #8
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	0802d0f4 	.word	0x0802d0f4

08015cb0 <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b082      	sub	sp, #8
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f7ff ffe7 	bl	8015c8c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015cbe:	2140      	movs	r1, #64	; 0x40
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f014 ff64 	bl	802ab8e <_ZdlPvj>
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	4a3d      	ldr	r2, [pc, #244]	; (8015dd0 <_ZN20SecondScreenViewBaseD1Ev+0x100>)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	601a      	str	r2, [r3, #0]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f000 ff89 	bl	8016bfc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f000 ffa5 	bl	8016c40 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ff fdd9 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fdd3 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7fd f8ed 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7ff fdc7 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7fd f8e1 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7ff fdbb 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7fd f8d5 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7ff fdaf 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7fd f8c9 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7ff fda3 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7ff ff67 	bl	8015c48 <_ZN8touchgfx6ButtonD1Ev>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7ff ff61 	bl	8015c48 <_ZN8touchgfx6ButtonD1Ev>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7ff fd91 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7fd f8ab 	bl	8012ef4 <_ZN8touchgfx8TextAreaD1Ev>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	33e8      	adds	r3, #232	; 0xe8
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7ff fd86 	bl	80158b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	3370      	adds	r3, #112	; 0x70
 8015dac:	4618      	mov	r0, r3
 8015dae:	f000 fdbd 	bl	801692c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	3340      	adds	r3, #64	; 0x40
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7fc ff94 	bl	8012ce4 <_ZN8touchgfx3BoxD1Ev>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7ff ff64 	bl	8015c8c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3708      	adds	r7, #8
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	0802cff0 	.word	0x0802cff0

08015dd4 <_ZN20SecondScreenViewBaseD0Ev>:
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7ff ff77 	bl	8015cd0 <_ZN20SecondScreenViewBaseD1Ev>
 8015de2:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f014 fed1 	bl	802ab8e <_ZdlPvj>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	4618      	mov	r0, r3
 8015df0:	3708      	adds	r7, #8
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <_ZN20SecondScreenViewBase9nextErrorEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void nextError()
 8015df6:	b480      	push	{r7}
 8015df8:	b083      	sub	sp, #12
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015dfe:	bf00      	nop
 8015e00:	370c      	adds	r7, #12
 8015e02:	46bd      	mov	sp, r7
 8015e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e08:	4770      	bx	lr

08015e0a <_ZN20SecondScreenViewBase11clearErrorsEv>:

    virtual void clearErrors()
 8015e0a:	b480      	push	{r7}
 8015e0c:	b083      	sub	sp, #12
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015e12:	bf00      	nop
 8015e14:	370c      	adds	r7, #12
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr

08015e1e <_ZN20SecondScreenViewBase16moveToMainScreenEv>:

    virtual void moveToMainScreen()
 8015e1e:	b480      	push	{r7}
 8015e20:	b083      	sub	sp, #12
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015e26:	bf00      	nop
 8015e28:	370c      	adds	r7, #12
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr

08015e32 <_ZN20SecondScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b082      	sub	sp, #8
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015e3a:	f008 fea5 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 8015e3e:	4603      	mov	r3, r0
    }
 8015e40:	4618      	mov	r0, r3
 8015e42:	3708      	adds	r7, #8
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <_ZN20SecondScreenViewBaseC1Ev>:
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

SecondScreenViewBase::SecondScreenViewBase() :
 8015e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e4c:	b0a2      	sub	sp, #136	; 0x88
 8015e4e:	af02      	add	r7, sp, #8
 8015e50:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &SecondScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f000 fd91 	bl	801697c <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 8015e5a:	4ada      	ldr	r2, [pc, #872]	; (80161c4 <_ZN20SecondScreenViewBaseC1Ev+0x37c>)
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	601a      	str	r2, [r3, #0]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	3340      	adds	r3, #64	; 0x40
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7fc ff1d 	bl	8012ca4 <_ZN8touchgfx3BoxC1Ev>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	3370      	adds	r3, #112	; 0x70
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f000 fd9a 	bl	80169a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	33e8      	adds	r3, #232	; 0xe8
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fd f891 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fc ff83 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fd f885 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	f7ff feaf 	bl	8015c00 <_ZN8touchgfx6ButtonC1Ev>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7ff fea9 	bl	8015c00 <_ZN8touchgfx6ButtonC1Ev>
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fd f873 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f7fc ff65 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7fd f867 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7fc ff59 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7fd f85b 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fc ff4d 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fd f84f 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7fc ff41 	bl	8012d90 <_ZN8touchgfx8TextAreaC1Ev>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7fd f843 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7fd f83d 	bl	8012fa0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f503 60a3 	add.w	r0, r3, #1304	; 0x518
 8015f2c:	4ba6      	ldr	r3, [pc, #664]	; (80161c8 <_ZN20SecondScreenViewBaseC1Ev+0x380>)
 8015f2e:	60fb      	str	r3, [r7, #12]
 8015f30:	2300      	movs	r3, #0
 8015f32:	613b      	str	r3, [r7, #16]
 8015f34:	f107 030c 	add.w	r3, r7, #12
 8015f38:	cb0c      	ldmia	r3, {r2, r3}
 8015f3a:	6879      	ldr	r1, [r7, #4]
 8015f3c:	f000 fd7e 	bl	8016a3c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f503 60a5 	add.w	r0, r3, #1320	; 0x528
 8015f46:	4ba1      	ldr	r3, [pc, #644]	; (80161cc <_ZN20SecondScreenViewBaseC1Ev+0x384>)
 8015f48:	617b      	str	r3, [r7, #20]
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	61bb      	str	r3, [r7, #24]
 8015f4e:	f107 0314 	add.w	r3, r7, #20
 8015f52:	cb0c      	ldmia	r3, {r2, r3}
 8015f54:	6879      	ldr	r1, [r7, #4]
 8015f56:	f000 fd91 	bl	8016a7c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015f60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015f64:	9300      	str	r3, [sp, #0]
 8015f66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	2100      	movs	r1, #0
 8015f6e:	f7fa fefb 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015f78:	2200      	movs	r2, #0
 8015f7a:	2100      	movs	r1, #0
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	f7fd fbf1 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f82:	4603      	mov	r3, r0
 8015f84:	4619      	mov	r1, r3
 8015f86:	4620      	mov	r0, r4
 8015f88:	f7fc fece 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015f92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015f96:	9300      	str	r3, [sp, #0]
 8015f98:	2385      	movs	r3, #133	; 0x85
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	2100      	movs	r1, #0
 8015f9e:	f000 fd8d 	bl	8016abc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	3370      	adds	r3, #112	; 0x70
 8015fa6:	2105      	movs	r1, #5
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f000 fda7 	bl	8016afc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015fb4:	2299      	movs	r2, #153	; 0x99
 8015fb6:	2166      	movs	r1, #102	; 0x66
 8015fb8:	2000      	movs	r0, #0
 8015fba:	f7fd fbd3 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015fbe:	4605      	mov	r5, r0
 8015fc0:	22cc      	movs	r2, #204	; 0xcc
 8015fc2:	2199      	movs	r1, #153	; 0x99
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	f7fd fbcd 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015fca:	4606      	mov	r6, r0
 8015fcc:	2266      	movs	r2, #102	; 0x66
 8015fce:	2133      	movs	r1, #51	; 0x33
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	f7fd fbc7 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015fd6:	4680      	mov	r8, r0
 8015fd8:	2299      	movs	r2, #153	; 0x99
 8015fda:	2166      	movs	r1, #102	; 0x66
 8015fdc:	2033      	movs	r0, #51	; 0x33
 8015fde:	f7fd fbc1 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	9300      	str	r3, [sp, #0]
 8015fe6:	4643      	mov	r3, r8
 8015fe8:	4632      	mov	r2, r6
 8015fea:	4629      	mov	r1, r5
 8015fec:	4620      	mov	r0, r4
 8015fee:	f000 fd96 	bl	8016b1e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015ff8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ffc:	9300      	str	r3, [sp, #0]
 8015ffe:	2385      	movs	r3, #133	; 0x85
 8016000:	2200      	movs	r2, #0
 8016002:	2100      	movs	r1, #0
 8016004:	f7fa feb0 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	3370      	adds	r3, #112	; 0x70
 801600c:	2100      	movs	r1, #0
 801600e:	4618      	mov	r0, r3
 8016010:	f7fd f8f3 	bl	80131fa <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8016020:	4619      	mov	r1, r3
 8016022:	4610      	mov	r0, r2
 8016024:	f7fd f90a 	bl	801323c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    IngAngValue.setPosition(12, 11, 71, 42);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 801602e:	232a      	movs	r3, #42	; 0x2a
 8016030:	9300      	str	r3, [sp, #0]
 8016032:	2347      	movs	r3, #71	; 0x47
 8016034:	220b      	movs	r2, #11
 8016036:	210c      	movs	r1, #12
 8016038:	f7fa fe96 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    IngAngValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8016042:	22ff      	movs	r2, #255	; 0xff
 8016044:	21ff      	movs	r1, #255	; 0xff
 8016046:	20ff      	movs	r0, #255	; 0xff
 8016048:	f7fd fb8c 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801604c:	4603      	mov	r3, r0
 801604e:	4619      	mov	r1, r3
 8016050:	4620      	mov	r0, r4
 8016052:	f7fc fee0 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IngAngValue.setLinespacing(0);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	33e8      	adds	r3, #232	; 0xe8
 801605a:	2100      	movs	r1, #0
 801605c:	4618      	mov	r0, r3
 801605e:	f7fc ff2d 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IngAngValueBuffer, INGANGVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f203 4414 	addw	r4, r3, #1044	; 0x414
 8016068:	f107 031c 	add.w	r3, r7, #28
 801606c:	2137      	movs	r1, #55	; 0x37
 801606e:	4618      	mov	r0, r3
 8016070:	f7fc fe68 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016074:	f107 031c 	add.w	r3, r7, #28
 8016078:	4618      	mov	r0, r3
 801607a:	f7fc fe73 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801607e:	4603      	mov	r3, r0
 8016080:	4a53      	ldr	r2, [pc, #332]	; (80161d0 <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 8016082:	2105      	movs	r1, #5
 8016084:	4620      	mov	r0, r4
 8016086:	f00a fe15 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IngAngValue.setWildcard(IngAngValueBuffer);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8016096:	4619      	mov	r1, r3
 8016098:	4610      	mov	r0, r2
 801609a:	f7fc ff97 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IngAngValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80160a4:	f107 0320 	add.w	r3, r7, #32
 80160a8:	2136      	movs	r1, #54	; 0x36
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7fc fe4a 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80160b0:	8c39      	ldrh	r1, [r7, #32]
 80160b2:	4620      	mov	r0, r4
 80160b4:	f007 f900 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IgnAngDescriptor.setXY(12, 53);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80160be:	2235      	movs	r2, #53	; 0x35
 80160c0:	210c      	movs	r1, #12
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7fc fbfe 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    IgnAngDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80160ce:	2200      	movs	r2, #0
 80160d0:	21dc      	movs	r1, #220	; 0xdc
 80160d2:	20ff      	movs	r0, #255	; 0xff
 80160d4:	f7fd fb46 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80160d8:	4603      	mov	r3, r0
 80160da:	4619      	mov	r1, r3
 80160dc:	4620      	mov	r0, r4
 80160de:	f7fc fe9a 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IgnAngDescriptor.setLinespacing(0);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80160e8:	2100      	movs	r1, #0
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fc fee6 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    IgnAngDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID78));
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80160f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80160fa:	2138      	movs	r1, #56	; 0x38
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7fc fe21 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016102:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8016104:	4620      	mov	r0, r4
 8016106:	f007 f8d7 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ErrorMessage.setXY(193, 205);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016110:	22cd      	movs	r2, #205	; 0xcd
 8016112:	21c1      	movs	r1, #193	; 0xc1
 8016114:	4618      	mov	r0, r3
 8016116:	f7fc fbd5 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    ErrorMessage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8016120:	2200      	movs	r2, #0
 8016122:	21dc      	movs	r1, #220	; 0xdc
 8016124:	20ff      	movs	r0, #255	; 0xff
 8016126:	f7fd fb1d 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801612a:	4603      	mov	r3, r0
 801612c:	4619      	mov	r1, r3
 801612e:	4620      	mov	r0, r4
 8016130:	f7fc fe71 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ErrorMessage.setLinespacing(0);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801613a:	2100      	movs	r1, #0
 801613c:	4618      	mov	r0, r3
 801613e:	f7fc febd 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(ErrorMessageBuffer, ERRORMESSAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID80).getText());
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f203 441e 	addw	r4, r3, #1054	; 0x41e
 8016148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801614c:	213a      	movs	r1, #58	; 0x3a
 801614e:	4618      	mov	r0, r3
 8016150:	f7fc fdf8 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016158:	4618      	mov	r0, r3
 801615a:	f7fc fe03 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801615e:	4603      	mov	r3, r0
 8016160:	4a1b      	ldr	r2, [pc, #108]	; (80161d0 <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 8016162:	2123      	movs	r1, #35	; 0x23
 8016164:	4620      	mov	r0, r4
 8016166:	f00a fda5 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ErrorMessage.setWildcard(ErrorMessageBuffer);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8016176:	4619      	mov	r1, r3
 8016178:	4610      	mov	r0, r2
 801617a:	f7fc ff27 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ErrorMessage.resizeToCurrentText();
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016184:	4618      	mov	r0, r3
 8016186:	f007 f86d 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ErrorMessage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID79));
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8016190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016194:	2139      	movs	r1, #57	; 0x39
 8016196:	4618      	mov	r0, r3
 8016198:	f7fc fdd4 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801619c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 801619e:	4620      	mov	r0, r4
 80161a0:	f007 f88a 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    nextErrorButton.setXY(256, 226);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80161aa:	22e2      	movs	r2, #226	; 0xe2
 80161ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7fc fb87 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    nextErrorButton.setVisible(false);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80161bc:	2100      	movs	r1, #0
 80161be:	4618      	mov	r0, r3
 80161c0:	e008      	b.n	80161d4 <_ZN20SecondScreenViewBaseC1Ev+0x38c>
 80161c2:	bf00      	nop
 80161c4:	0802cff0 	.word	0x0802cff0
 80161c8:	080168b1 	.word	0x080168b1
 80161cc:	080168f5 	.word	0x080168f5
 80161d0:	0802c274 	.word	0x0802c274
 80161d4:	f7fc fbe7 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
    nextErrorButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID));
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 80161de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161e2:	2104      	movs	r1, #4
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7fc faf0 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 80161ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80161ee:	2104      	movs	r1, #4
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7fc faea 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 80161f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80161fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161fe:	4619      	mov	r1, r3
 8016200:	4620      	mov	r0, r4
 8016202:	f007 fa67 	bl	801d6d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    nextErrorButton.setAction(buttonCallback);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8016212:	4619      	mov	r1, r3
 8016214:	4610      	mov	r0, r2
 8016216:	f7ff fcc3 	bl	8015ba0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    clearErrorsBtn.setXY(193, 226);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016220:	22e2      	movs	r2, #226	; 0xe2
 8016222:	21c1      	movs	r1, #193	; 0xc1
 8016224:	4618      	mov	r0, r3
 8016226:	f7fc fb4d 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    clearErrorsBtn.setVisible(false);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016230:	2100      	movs	r1, #0
 8016232:	4618      	mov	r0, r3
 8016234:	f7fc fbb7 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
    clearErrorsBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID));
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 801623e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016242:	2103      	movs	r1, #3
 8016244:	4618      	mov	r0, r3
 8016246:	f7fc fac0 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 801624a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801624e:	2103      	movs	r1, #3
 8016250:	4618      	mov	r0, r3
 8016252:	f7fc faba 	bl	80127ca <_ZN8touchgfx6BitmapC1Et>
 8016256:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801625a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801625e:	4619      	mov	r1, r3
 8016260:	4620      	mov	r0, r4
 8016262:	f007 fa37 	bl	801d6d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    clearErrorsBtn.setAction(buttonCallback);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8016272:	4619      	mov	r1, r3
 8016274:	4610      	mov	r0, r2
 8016276:	f7ff fc93 	bl	8015ba0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VeValue.setPosition(102, 11, 71, 42);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8016280:	232a      	movs	r3, #42	; 0x2a
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	2347      	movs	r3, #71	; 0x47
 8016286:	220b      	movs	r2, #11
 8016288:	2166      	movs	r1, #102	; 0x66
 801628a:	f7fa fd6d 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    VeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8016294:	22ff      	movs	r2, #255	; 0xff
 8016296:	21ff      	movs	r1, #255	; 0xff
 8016298:	20ff      	movs	r0, #255	; 0xff
 801629a:	f7fd fa63 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801629e:	4603      	mov	r3, r0
 80162a0:	4619      	mov	r1, r3
 80162a2:	4620      	mov	r0, r4
 80162a4:	f7fc fdb7 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    VeValue.setLinespacing(0);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80162ae:	2100      	movs	r1, #0
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7fc fe03 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(VeValueBuffer, VEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID82).getText());
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f203 4464 	addw	r4, r3, #1124	; 0x464
 80162bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162c0:	2147      	movs	r1, #71	; 0x47
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fc fd3e 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80162c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fc fd49 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80162d2:	4603      	mov	r3, r0
 80162d4:	4ae4      	ldr	r2, [pc, #912]	; (8016668 <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 80162d6:	2105      	movs	r1, #5
 80162d8:	4620      	mov	r0, r4
 80162da:	f00a fceb 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    VeValue.setWildcard(VeValueBuffer);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f203 4364 	addw	r3, r3, #1124	; 0x464
 80162ea:	4619      	mov	r1, r3
 80162ec:	4610      	mov	r0, r2
 80162ee:	f7fc fe6d 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    VeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID81));
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 80162f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80162fc:	2146      	movs	r1, #70	; 0x46
 80162fe:	4618      	mov	r0, r3
 8016300:	f7fc fd20 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016304:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016308:	4620      	mov	r0, r4
 801630a:	f006 ffd5 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    VeDescriptor.setXY(127, 53);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8016314:	2235      	movs	r2, #53	; 0x35
 8016316:	217f      	movs	r1, #127	; 0x7f
 8016318:	4618      	mov	r0, r3
 801631a:	f7fc fad3 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    VeDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 8016324:	2200      	movs	r2, #0
 8016326:	21dc      	movs	r1, #220	; 0xdc
 8016328:	20ff      	movs	r0, #255	; 0xff
 801632a:	f7fd fa1b 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801632e:	4603      	mov	r3, r0
 8016330:	4619      	mov	r1, r3
 8016332:	4620      	mov	r0, r4
 8016334:	f7fc fd6f 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    VeDescriptor.setLinespacing(0);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801633e:	2100      	movs	r1, #0
 8016340:	4618      	mov	r0, r3
 8016342:	f7fc fdbb 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    VeDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID83));
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 801634c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016350:	2148      	movs	r1, #72	; 0x48
 8016352:	4618      	mov	r0, r3
 8016354:	f7fc fcf6 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016358:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 801635c:	4620      	mov	r0, r4
 801635e:	f006 ffab 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostDcValue.setPosition(195, 11, 71, 42);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8016368:	232a      	movs	r3, #42	; 0x2a
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	2347      	movs	r3, #71	; 0x47
 801636e:	220b      	movs	r2, #11
 8016370:	21c3      	movs	r1, #195	; 0xc3
 8016372:	f7fa fcf9 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    BoostDcValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f503 7418 	add.w	r4, r3, #608	; 0x260
 801637c:	22ff      	movs	r2, #255	; 0xff
 801637e:	21ff      	movs	r1, #255	; 0xff
 8016380:	20ff      	movs	r0, #255	; 0xff
 8016382:	f7fd f9ef 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016386:	4603      	mov	r3, r0
 8016388:	4619      	mov	r1, r3
 801638a:	4620      	mov	r0, r4
 801638c:	f7fc fd43 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostDcValue.setLinespacing(0);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016396:	2100      	movs	r1, #0
 8016398:	4618      	mov	r0, r3
 801639a:	f7fc fd8f 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BoostDcValueBuffer, BOOSTDCVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f203 446e 	addw	r4, r3, #1134	; 0x46e
 80163a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80163a8:	214a      	movs	r1, #74	; 0x4a
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7fc fcca 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80163b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7fc fcd5 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80163ba:	4603      	mov	r3, r0
 80163bc:	4aaa      	ldr	r2, [pc, #680]	; (8016668 <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 80163be:	2105      	movs	r1, #5
 80163c0:	4620      	mov	r0, r4
 80163c2:	f00a fc77 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BoostDcValue.setWildcard(BoostDcValueBuffer);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f203 436e 	addw	r3, r3, #1134	; 0x46e
 80163d2:	4619      	mov	r1, r3
 80163d4:	4610      	mov	r0, r2
 80163d6:	f7fc fdf9 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BoostDcValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f503 7418 	add.w	r4, r3, #608	; 0x260
 80163e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80163e4:	2149      	movs	r1, #73	; 0x49
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7fc fcac 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80163ec:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80163f0:	4620      	mov	r0, r4
 80163f2:	f006 ff61 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostDcDescriptior.setXY(194, 53);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80163fc:	2235      	movs	r2, #53	; 0x35
 80163fe:	21c2      	movs	r1, #194	; 0xc2
 8016400:	4618      	mov	r0, r3
 8016402:	f7fc fa5f 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    BoostDcDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f503 7426 	add.w	r4, r3, #664	; 0x298
 801640c:	2200      	movs	r2, #0
 801640e:	21dc      	movs	r1, #220	; 0xdc
 8016410:	20ff      	movs	r0, #255	; 0xff
 8016412:	f7fd f9a7 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016416:	4603      	mov	r3, r0
 8016418:	4619      	mov	r1, r3
 801641a:	4620      	mov	r0, r4
 801641c:	f7fc fcfb 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostDcDescriptior.setLinespacing(0);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8016426:	2100      	movs	r1, #0
 8016428:	4618      	mov	r0, r3
 801642a:	f7fc fd47 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    BoostDcDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID86));
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8016434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016438:	214b      	movs	r1, #75	; 0x4b
 801643a:	4618      	mov	r0, r3
 801643c:	f7fc fc82 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016440:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8016444:	4620      	mov	r0, r4
 8016446:	f006 ff37 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostTrgtValue.setPosition(294, 11, 71, 42);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8016450:	232a      	movs	r3, #42	; 0x2a
 8016452:	9300      	str	r3, [sp, #0]
 8016454:	2347      	movs	r3, #71	; 0x47
 8016456:	220b      	movs	r2, #11
 8016458:	f44f 7193 	mov.w	r1, #294	; 0x126
 801645c:	f7fa fc84 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    BoostTrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
 8016466:	22ff      	movs	r2, #255	; 0xff
 8016468:	21ff      	movs	r1, #255	; 0xff
 801646a:	20ff      	movs	r0, #255	; 0xff
 801646c:	f7fd f97a 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016470:	4603      	mov	r3, r0
 8016472:	4619      	mov	r1, r3
 8016474:	4620      	mov	r0, r4
 8016476:	f7fc fcce 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostTrgtValue.setLinespacing(0);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8016480:	2100      	movs	r1, #0
 8016482:	4618      	mov	r0, r3
 8016484:	f7fc fd1a 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BoostTrgtValueBuffer, BOOSTTRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID88).getText());
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f503 648f 	add.w	r4, r3, #1144	; 0x478
 801648e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016492:	214d      	movs	r1, #77	; 0x4d
 8016494:	4618      	mov	r0, r3
 8016496:	f7fc fc55 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801649a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801649e:	4618      	mov	r0, r3
 80164a0:	f7fc fc60 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 80164a4:	4603      	mov	r3, r0
 80164a6:	4a70      	ldr	r2, [pc, #448]	; (8016668 <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 80164a8:	2105      	movs	r1, #5
 80164aa:	4620      	mov	r0, r4
 80164ac:	f00a fc02 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BoostTrgtValue.setWildcard(BoostTrgtValueBuffer);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f503 7233 	add.w	r2, r3, #716	; 0x2cc
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80164bc:	4619      	mov	r1, r3
 80164be:	4610      	mov	r0, r2
 80164c0:	f7fc fd84 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BoostTrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID87));
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
 80164ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80164ce:	214c      	movs	r1, #76	; 0x4c
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7fc fc37 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80164d6:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80164da:	4620      	mov	r0, r4
 80164dc:	f006 feec 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostTrgtDescriptior.setXY(288, 53);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80164e6:	2235      	movs	r2, #53	; 0x35
 80164e8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7fc f9e9 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    BoostTrgtDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f503 7441 	add.w	r4, r3, #772	; 0x304
 80164f8:	2200      	movs	r2, #0
 80164fa:	21dc      	movs	r1, #220	; 0xdc
 80164fc:	20ff      	movs	r0, #255	; 0xff
 80164fe:	f7fd f931 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016502:	4603      	mov	r3, r0
 8016504:	4619      	mov	r1, r3
 8016506:	4620      	mov	r0, r4
 8016508:	f7fc fc85 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostTrgtDescriptior.setLinespacing(0);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8016512:	2100      	movs	r1, #0
 8016514:	4618      	mov	r0, r3
 8016516:	f7fc fcd1 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    BoostTrgtDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID89));
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	f503 7441 	add.w	r4, r3, #772	; 0x304
 8016520:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016524:	214e      	movs	r1, #78	; 0x4e
 8016526:	4618      	mov	r0, r3
 8016528:	f7fc fc0c 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801652c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8016530:	4620      	mov	r0, r4
 8016532:	f006 fec1 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    InjctorDcValue.setPosition(391, 11, 71, 42);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f503 704e 	add.w	r0, r3, #824	; 0x338
 801653c:	232a      	movs	r3, #42	; 0x2a
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	2347      	movs	r3, #71	; 0x47
 8016542:	220b      	movs	r2, #11
 8016544:	f240 1187 	movw	r1, #391	; 0x187
 8016548:	f7fa fc0e 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    InjctorDcValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f503 744e 	add.w	r4, r3, #824	; 0x338
 8016552:	22ff      	movs	r2, #255	; 0xff
 8016554:	21ff      	movs	r1, #255	; 0xff
 8016556:	20ff      	movs	r0, #255	; 0xff
 8016558:	f7fd f904 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801655c:	4603      	mov	r3, r0
 801655e:	4619      	mov	r1, r3
 8016560:	4620      	mov	r0, r4
 8016562:	f7fc fc58 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    InjctorDcValue.setLinespacing(0);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801656c:	2100      	movs	r1, #0
 801656e:	4618      	mov	r0, r3
 8016570:	f7fc fca4 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(InjctorDcValueBuffer, INJCTORDCVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID91).getText());
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f203 4482 	addw	r4, r3, #1154	; 0x482
 801657a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801657e:	2150      	movs	r1, #80	; 0x50
 8016580:	4618      	mov	r0, r3
 8016582:	f7fc fbdf 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016586:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801658a:	4618      	mov	r0, r3
 801658c:	f7fc fbea 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8016590:	4603      	mov	r3, r0
 8016592:	4a35      	ldr	r2, [pc, #212]	; (8016668 <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 8016594:	2105      	movs	r1, #5
 8016596:	4620      	mov	r0, r4
 8016598:	f00a fb8c 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    InjctorDcValue.setWildcard(InjctorDcValueBuffer);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	f503 724e 	add.w	r2, r3, #824	; 0x338
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f203 4382 	addw	r3, r3, #1154	; 0x482
 80165a8:	4619      	mov	r1, r3
 80165aa:	4610      	mov	r0, r2
 80165ac:	f7fc fd0e 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    InjctorDcValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID90));
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f503 744e 	add.w	r4, r3, #824	; 0x338
 80165b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80165ba:	214f      	movs	r1, #79	; 0x4f
 80165bc:	4618      	mov	r0, r3
 80165be:	f7fc fbc1 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80165c2:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 80165c6:	4620      	mov	r0, r4
 80165c8:	f006 fe76 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    InjectorDcDescriptior.setXY(382, 53);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80165d2:	2235      	movs	r2, #53	; 0x35
 80165d4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fc f973 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    InjectorDcDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f503 745c 	add.w	r4, r3, #880	; 0x370
 80165e4:	2200      	movs	r2, #0
 80165e6:	21dc      	movs	r1, #220	; 0xdc
 80165e8:	20ff      	movs	r0, #255	; 0xff
 80165ea:	f7fd f8bb 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80165ee:	4603      	mov	r3, r0
 80165f0:	4619      	mov	r1, r3
 80165f2:	4620      	mov	r0, r4
 80165f4:	f7fc fc0f 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    InjectorDcDescriptior.setLinespacing(0);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80165fe:	2100      	movs	r1, #0
 8016600:	4618      	mov	r0, r3
 8016602:	f7fc fc5b 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    InjectorDcDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID92));
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f503 745c 	add.w	r4, r3, #880	; 0x370
 801660c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016610:	2151      	movs	r1, #81	; 0x51
 8016612:	4618      	mov	r0, r3
 8016614:	f7fc fb96 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016618:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 801661c:	4620      	mov	r0, r4
 801661e:	f006 fe4b 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CheckEngCodeValue.setXY(12, 237);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8016628:	22ed      	movs	r2, #237	; 0xed
 801662a:	210c      	movs	r1, #12
 801662c:	4618      	mov	r0, r3
 801662e:	f7fc f949 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    CheckEngCodeValue.setVisible(false);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8016638:	2100      	movs	r1, #0
 801663a:	4618      	mov	r0, r3
 801663c:	f7fc f9b3 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
    CheckEngCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 8016646:	2200      	movs	r2, #0
 8016648:	21dc      	movs	r1, #220	; 0xdc
 801664a:	20ff      	movs	r0, #255	; 0xff
 801664c:	f7fd f88a 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016650:	4603      	mov	r3, r0
 8016652:	4619      	mov	r1, r3
 8016654:	4620      	mov	r0, r4
 8016656:	f7fc fbde 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CheckEngCodeValue.setLinespacing(0);
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8016660:	2100      	movs	r1, #0
 8016662:	4618      	mov	r0, r3
 8016664:	e002      	b.n	801666c <_ZN20SecondScreenViewBaseC1Ev+0x824>
 8016666:	bf00      	nop
 8016668:	0802c274 	.word	0x0802c274
 801666c:	f7fc fc26 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID94).getText());
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8016676:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801667a:	2157      	movs	r1, #87	; 0x57
 801667c:	4618      	mov	r0, r3
 801667e:	f7fc fb61 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016686:	4618      	mov	r0, r3
 8016688:	f7fc fb6c 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801668c:	4603      	mov	r3, r0
 801668e:	4a82      	ldr	r2, [pc, #520]	; (8016898 <_ZN20SecondScreenViewBaseC1Ev+0xa50>)
 8016690:	2123      	movs	r1, #35	; 0x23
 8016692:	4620      	mov	r0, r4
 8016694:	f00a fb0e 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CheckEngCodeValue.setWildcard(CheckEngCodeValueBuffer);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80166a4:	4619      	mov	r1, r3
 80166a6:	4610      	mov	r0, r2
 80166a8:	f7fc fc90 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CheckEngCodeValue.resizeToCurrentText();
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80166b2:	4618      	mov	r0, r3
 80166b4:	f006 fdd6 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CheckEngCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID93));
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 80166be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80166c2:	2156      	movs	r1, #86	; 0x56
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fc fb3d 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80166ca:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80166ce:	4620      	mov	r0, r4
 80166d0:	f006 fdf2 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EngProtCodeValue.setXY(314, 232);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80166da:	22e8      	movs	r2, #232	; 0xe8
 80166dc:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7fc f8ef 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
    EngProtCodeValue.setVisible(false);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80166ec:	2100      	movs	r1, #0
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7fc f959 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
    EngProtCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 80166fa:	2200      	movs	r2, #0
 80166fc:	21dc      	movs	r1, #220	; 0xdc
 80166fe:	20ff      	movs	r0, #255	; 0xff
 8016700:	f7fd f830 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016704:	4603      	mov	r3, r0
 8016706:	4619      	mov	r1, r3
 8016708:	4620      	mov	r0, r4
 801670a:	f7fc fb84 	bl	8012e16 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EngProtCodeValue.setLinespacing(0);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8016714:	2100      	movs	r1, #0
 8016716:	4618      	mov	r0, r3
 8016718:	f7fc fbd0 	bl	8012ebc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID96).getText());
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f203 44d2 	addw	r4, r3, #1234	; 0x4d2
 8016722:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016726:	2159      	movs	r1, #89	; 0x59
 8016728:	4618      	mov	r0, r3
 801672a:	f7fc fb0b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801672e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016732:	4618      	mov	r0, r3
 8016734:	f7fc fb16 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8016738:	4603      	mov	r3, r0
 801673a:	4a57      	ldr	r2, [pc, #348]	; (8016898 <_ZN20SecondScreenViewBaseC1Ev+0xa50>)
 801673c:	2123      	movs	r1, #35	; 0x23
 801673e:	4620      	mov	r0, r4
 8016740:	f00a fab8 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EngProtCodeValue.setWildcard(EngProtCodeValueBuffer);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f503 7277 	add.w	r2, r3, #988	; 0x3dc
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f203 43d2 	addw	r3, r3, #1234	; 0x4d2
 8016750:	4619      	mov	r1, r3
 8016752:	4610      	mov	r0, r2
 8016754:	f7fc fc3a 	bl	8012fcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EngProtCodeValue.resizeToCurrentText();
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801675e:	4618      	mov	r0, r3
 8016760:	f006 fd80 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    EngProtCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID95));
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 801676a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801676e:	2158      	movs	r1, #88	; 0x58
 8016770:	4618      	mov	r0, r3
 8016772:	f7fc fae7 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8016776:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 801677a:	4620      	mov	r0, r4
 801677c:	f006 fd9c 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	3340      	adds	r3, #64	; 0x40
 8016786:	4619      	mov	r1, r3
 8016788:	4610      	mov	r0, r2
 801678a:	f7fc fa23 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3370      	adds	r3, #112	; 0x70
 8016794:	4619      	mov	r1, r3
 8016796:	4610      	mov	r0, r2
 8016798:	f7fc fa1c 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IngAngValue);
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	33e8      	adds	r3, #232	; 0xe8
 80167a2:	4619      	mov	r1, r3
 80167a4:	4610      	mov	r0, r2
 80167a6:	f7fc fa15 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IgnAngDescriptor);
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80167b2:	4619      	mov	r1, r3
 80167b4:	4610      	mov	r0, r2
 80167b6:	f7fc fa0d 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ErrorMessage);
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80167c2:	4619      	mov	r1, r3
 80167c4:	4610      	mov	r0, r2
 80167c6:	f7fc fa05 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(nextErrorButton);
 80167ca:	687a      	ldr	r2, [r7, #4]
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80167d2:	4619      	mov	r1, r3
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7fc f9fd 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(clearErrorsBtn);
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80167e2:	4619      	mov	r1, r3
 80167e4:	4610      	mov	r0, r2
 80167e6:	f7fc f9f5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VeValue);
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80167f2:	4619      	mov	r1, r3
 80167f4:	4610      	mov	r0, r2
 80167f6:	f7fc f9ed 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VeDescriptor);
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8016802:	4619      	mov	r1, r3
 8016804:	4610      	mov	r0, r2
 8016806:	f7fc f9e5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostDcValue);
 801680a:	687a      	ldr	r2, [r7, #4]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016812:	4619      	mov	r1, r3
 8016814:	4610      	mov	r0, r2
 8016816:	f7fc f9dd 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostDcDescriptior);
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8016822:	4619      	mov	r1, r3
 8016824:	4610      	mov	r0, r2
 8016826:	f7fc f9d5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostTrgtValue);
 801682a:	687a      	ldr	r2, [r7, #4]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8016832:	4619      	mov	r1, r3
 8016834:	4610      	mov	r0, r2
 8016836:	f7fc f9cd 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostTrgtDescriptior);
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8016842:	4619      	mov	r1, r3
 8016844:	4610      	mov	r0, r2
 8016846:	f7fc f9c5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(InjctorDcValue);
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016852:	4619      	mov	r1, r3
 8016854:	4610      	mov	r0, r2
 8016856:	f7fc f9bd 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(InjectorDcDescriptior);
 801685a:	687a      	ldr	r2, [r7, #4]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016862:	4619      	mov	r1, r3
 8016864:	4610      	mov	r0, r2
 8016866:	f7fc f9b5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CheckEngCodeValue);
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8016872:	4619      	mov	r1, r3
 8016874:	4610      	mov	r0, r2
 8016876:	f7fc f9ad 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EngProtCodeValue);
 801687a:	687a      	ldr	r2, [r7, #4]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8016882:	4619      	mov	r1, r3
 8016884:	4610      	mov	r0, r2
 8016886:	f7fc f9a5 	bl	8012bd4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	4618      	mov	r0, r3
 801688e:	3780      	adds	r7, #128	; 0x80
 8016890:	46bd      	mov	sp, r7
 8016892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016896:	bf00      	nop
 8016898:	0802c274 	.word	0x0802c274

0801689c <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 801689c:	b480      	push	{r7}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]

}
 80168a4:	bf00      	nop
 80168a6:	370c      	adds	r7, #12
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr

080168b0 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void SecondScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
    if (&src == &nextErrorButton)
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80168c0:	683a      	ldr	r2, [r7, #0]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d106      	bne.n	80168d4 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //DisplayNextErrorInteraction
        //When nextErrorButton clicked call virtual function
        //Call nextError
        nextError();
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	332c      	adds	r3, #44	; 0x2c
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	4798      	blx	r3
        //ClearErrorsInteraction
        //When clearErrorsBtn clicked call virtual function
        //Call clearErrors
        clearErrors();
    }
}
 80168d2:	e00b      	b.n	80168ec <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &clearErrorsBtn)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80168da:	683a      	ldr	r2, [r7, #0]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d105      	bne.n	80168ec <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        clearErrors();
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	3330      	adds	r3, #48	; 0x30
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	4798      	blx	r3
}
 80168ec:	bf00      	nop
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	3370      	adds	r3, #112	; 0x70
 8016902:	683a      	ldr	r2, [r7, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d10c      	bne.n	8016922 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
    {
        //MoveToMainScreenBtnInteraction
        //When ButtonGoToMainScreen clicked call virtual function
        //Call moveToMainScreen
        moveToMainScreen();
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	3334      	adds	r3, #52	; 0x34
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	4798      	blx	r3

        //MoveToMainScreenInteraction
        //When MoveToMainScreenBtnInteraction completed change screen to Main
        //Go to Main with screen transition towards West
        application().gotoMainScreenSlideTransitionWest();
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7ff fa8c 	bl	8015e32 <_ZN20SecondScreenViewBase11applicationEv>
 801691a:	4603      	mov	r3, r0
 801691c:	4618      	mov	r0, r3
 801691e:	f7fa fce1 	bl	80112e4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>
    }
}
 8016922:	bf00      	nop
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
	...

0801692c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	4a08      	ldr	r2, [pc, #32]	; (8016958 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	601a      	str	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	3334      	adds	r3, #52	; 0x34
 801693e:	4618      	mov	r0, r3
 8016940:	f7fc fd4c 	bl	80133dc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	4618      	mov	r0, r3
 8016948:	f7ff f88a 	bl	8015a60 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	4618      	mov	r0, r3
 8016950:	3708      	adds	r7, #8
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	0802d060 	.word	0x0802d060

0801695c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f7ff ffe1 	bl	801692c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801696a:	2178      	movs	r1, #120	; 0x78
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f014 f90e 	bl	802ab8e <_ZdlPvj>
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	4618      	mov	r0, r3
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	4618      	mov	r0, r3
 8016988:	f009 f894 	bl	801fab4 <_ZN8touchgfx6ScreenC1Ev>
 801698c:	4a05      	ldr	r2, [pc, #20]	; (80169a4 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	601a      	str	r2, [r3, #0]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	2200      	movs	r2, #0
 8016996:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	4618      	mov	r0, r3
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	bf00      	nop
 80169a4:	0802d0f4 	.word	0x0802d0f4

080169a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7ff f842 	bl	8015a3c <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 80169b8:	4a17      	ldr	r2, [pc, #92]	; (8016a18 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	601a      	str	r2, [r3, #0]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3334      	adds	r3, #52	; 0x34
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7fc fce4 	bl	8013390 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	3368      	adds	r3, #104	; 0x68
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7fb fe9c 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	336c      	adds	r3, #108	; 0x6c
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7fb fe97 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	3370      	adds	r3, #112	; 0x70
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7fb fe92 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	3374      	adds	r3, #116	; 0x74
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7fb fe8d 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	3334      	adds	r3, #52	; 0x34
 80169f4:	2200      	movs	r2, #0
 80169f6:	2100      	movs	r1, #0
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fb ff63 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80169fe:	687a      	ldr	r2, [r7, #4]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3334      	adds	r3, #52	; 0x34
 8016a04:	4619      	mov	r1, r3
 8016a06:	4610      	mov	r0, r2
 8016a08:	f004 fd3e 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	3708      	adds	r7, #8
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	0802d060 	.word	0x0802d060

08016a1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	4a04      	ldr	r2, [pc, #16]	; (8016a38 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	601a      	str	r2, [r3, #0]
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	370c      	adds	r7, #12
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr
 8016a38:	0802d128 	.word	0x0802d128

08016a3c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b084      	sub	sp, #16
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	60f8      	str	r0, [r7, #12]
 8016a44:	60b9      	str	r1, [r7, #8]
 8016a46:	4639      	mov	r1, r7
 8016a48:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7ff ffe4 	bl	8016a1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8016a54:	4a08      	ldr	r2, [pc, #32]	; (8016a78 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	68ba      	ldr	r2, [r7, #8]
 8016a5e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	3308      	adds	r3, #8
 8016a64:	463a      	mov	r2, r7
 8016a66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a6a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	4618      	mov	r0, r3
 8016a72:	3710      	adds	r7, #16
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	0802d048 	.word	0x0802d048

08016a7c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b084      	sub	sp, #16
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	4639      	mov	r1, r7
 8016a88:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f7fe fdba 	bl	8015608 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8016a94:	4a08      	ldr	r2, [pc, #32]	; (8016ab8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	68ba      	ldr	r2, [r7, #8]
 8016a9e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	3308      	adds	r3, #8
 8016aa4:	463a      	mov	r2, r7
 8016aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016aaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3710      	adds	r7, #16
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	0802d030 	.word	0x0802d030

08016abc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8016abc:	b590      	push	{r4, r7, lr}
 8016abe:	b087      	sub	sp, #28
 8016ac0:	af02      	add	r7, sp, #8
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	4608      	mov	r0, r1
 8016ac6:	4611      	mov	r1, r2
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4603      	mov	r3, r0
 8016acc:	817b      	strh	r3, [r7, #10]
 8016ace:	460b      	mov	r3, r1
 8016ad0:	813b      	strh	r3, [r7, #8]
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8016adc:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8016ae0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016ae4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8016ae8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016aec:	9300      	str	r3, [sp, #0]
 8016aee:	4623      	mov	r3, r4
 8016af0:	f7fa f93a 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8016af4:	bf00      	nop
 8016af6:	3714      	adds	r7, #20
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd90      	pop	{r4, r7, pc}

08016afc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	460b      	mov	r3, r1
 8016b06:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	3334      	adds	r3, #52	; 0x34
 8016b0c:	78fa      	ldrb	r2, [r7, #3]
 8016b0e:	4611      	mov	r1, r2
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7fc fca1 	bl	8013458 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8016b16:	bf00      	nop
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b084      	sub	sp, #16
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	60f8      	str	r0, [r7, #12]
 8016b26:	60b9      	str	r1, [r7, #8]
 8016b28:	607a      	str	r2, [r7, #4]
 8016b2a:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	68ba      	ldr	r2, [r7, #8]
 8016b30:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	687a      	ldr	r2, [r7, #4]
 8016b36:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	69ba      	ldr	r2, [r7, #24]
 8016b42:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	3384      	adds	r3, #132	; 0x84
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	68f8      	ldr	r0, [r7, #12]
 8016b4e:	4798      	blx	r3
    }
 8016b50:	bf00      	nop
 8016b52:	3710      	adds	r7, #16
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}

08016b58 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8016b58:	b480      	push	{r7}
 8016b5a:	b083      	sub	sp, #12
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
    }
 8016b60:	4a04      	ldr	r2, [pc, #16]	; (8016b74 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	601a      	str	r2, [r3, #0]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	370c      	adds	r7, #12
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr
 8016b74:	0802d128 	.word	0x0802d128

08016b78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
    }
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	f7ff ffe9 	bl	8016b58 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016b86:	2104      	movs	r1, #4
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f014 f800 	bl	802ab8e <_ZdlPvj>
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	4618      	mov	r0, r3
 8016b92:	3708      	adds	r7, #8
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8016b98:	b590      	push	{r4, r7, lr}
 8016b9a:	b083      	sub	sp, #12
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7fc fb19 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d002      	beq.n	8016bba <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	336c      	adds	r3, #108	; 0x6c
 8016bb8:	e001      	b.n	8016bbe <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	3368      	adds	r3, #104	; 0x68
 8016bbe:	6819      	ldr	r1, [r3, #0]
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f7fc fc2d 	bl	8013420 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7fc fb06 	bl	80131e0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d002      	beq.n	8016be0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	3374      	adds	r3, #116	; 0x74
 8016bde:	e001      	b.n	8016be4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	3370      	adds	r3, #112	; 0x70
 8016be4:	6819      	ldr	r1, [r3, #0]
 8016be6:	4620      	mov	r0, r4
 8016be8:	f7fc fc28 	bl	801343c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7fc fb32 	bl	8013258 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8016bf4:	bf00      	nop
 8016bf6:	370c      	adds	r7, #12
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd90      	pop	{r4, r7, pc}

08016bfc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	4a05      	ldr	r2, [pc, #20]	; (8016c1c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	601a      	str	r2, [r3, #0]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7fe fddd 	bl	80157cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	4618      	mov	r0, r3
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}
 8016c1c:	0802d030 	.word	0x0802d030

08016c20 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f7ff ffe7 	bl	8016bfc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8016c2e:	2110      	movs	r1, #16
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f013 ffac 	bl	802ab8e <_ZdlPvj>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3708      	adds	r7, #8
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	4a05      	ldr	r2, [pc, #20]	; (8016c60 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	601a      	str	r2, [r3, #0]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ff ff81 	bl	8016b58 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	0802d048 	.word	0x0802d048

08016c64 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f7ff ffe7 	bl	8016c40 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8016c72:	2110      	movs	r1, #16
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f013 ff8a 	bl	802ab8e <_ZdlPvj>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	68d2      	ldr	r2, [r2, #12]
 8016c96:	1052      	asrs	r2, r2, #1
 8016c98:	1898      	adds	r0, r3, r2
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	68db      	ldr	r3, [r3, #12]
 8016c9e:	f003 0301 	and.w	r3, r3, #1
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d102      	bne.n	8016cac <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	689b      	ldr	r3, [r3, #8]
 8016caa:	e00a      	b.n	8016cc2 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	68d2      	ldr	r2, [r2, #12]
 8016cb4:	1052      	asrs	r2, r2, #1
 8016cb6:	4413      	add	r3, r2
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	6892      	ldr	r2, [r2, #8]
 8016cbe:	4413      	add	r3, r2
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	4798      	blx	r3
    }
 8016cc6:	bf00      	nop
 8016cc8:	3708      	adds	r7, #8
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}

08016cce <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8016cce:	b480      	push	{r7}
 8016cd0:	b083      	sub	sp, #12
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d010      	beq.n	8016d00 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	689b      	ldr	r3, [r3, #8]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d107      	bne.n	8016cf6 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	f003 0301 	and.w	r3, r3, #1
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d101      	bne.n	8016cf6 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	e000      	b.n	8016cf8 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d001      	beq.n	8016d00 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	e000      	b.n	8016d02 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8016d00:	2300      	movs	r3, #0
    }
 8016d02:	4618      	mov	r0, r3
 8016d04:	370c      	adds	r7, #12
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr

08016d0e <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b082      	sub	sp, #8
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
 8016d16:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	68d2      	ldr	r2, [r2, #12]
 8016d20:	1052      	asrs	r2, r2, #1
 8016d22:	1898      	adds	r0, r3, r2
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	68db      	ldr	r3, [r3, #12]
 8016d28:	f003 0301 	and.w	r3, r3, #1
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d102      	bne.n	8016d36 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	689b      	ldr	r3, [r3, #8]
 8016d34:	e00a      	b.n	8016d4c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	685b      	ldr	r3, [r3, #4]
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	68d2      	ldr	r2, [r2, #12]
 8016d3e:	1052      	asrs	r2, r2, #1
 8016d40:	4413      	add	r3, r2
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	6892      	ldr	r2, [r2, #8]
 8016d48:	4413      	add	r3, r2
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	6839      	ldr	r1, [r7, #0]
 8016d4e:	4798      	blx	r3
    }
 8016d50:	bf00      	nop
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8016d58:	b480      	push	{r7}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	685b      	ldr	r3, [r3, #4]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d010      	beq.n	8016d8a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	689b      	ldr	r3, [r3, #8]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d107      	bne.n	8016d80 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	f003 0301 	and.w	r3, r3, #1
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d101      	bne.n	8016d80 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	e000      	b.n	8016d82 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8016d80:	2300      	movs	r3, #0
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d001      	beq.n	8016d8a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8016d86:	2301      	movs	r3, #1
 8016d88:	e000      	b.n	8016d8c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8016d8a:	2300      	movs	r3, #0
    }
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	370c      	adds	r7, #12
 8016d90:	46bd      	mov	sp, r7
 8016d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d96:	4770      	bx	lr

08016d98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8016d98:	b590      	push	{r4, r7, lr}
 8016d9a:	b083      	sub	sp, #12
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fc fa3a 	bl	8013222 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8016dae:	4603      	mov	r3, r0
 8016db0:	4619      	mov	r1, r3
 8016db2:	4620      	mov	r0, r4
 8016db4:	f7fc fb60 	bl	8013478 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fc fa56 	bl	801326c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8016dc0:	bf00      	nop
 8016dc2:	370c      	adds	r7, #12
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd90      	pop	{r4, r7, pc}

08016dc8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8016dc8:	b480      	push	{r7}
 8016dca:	af00      	add	r7, sp, #0
    return bitmap_database;
 8016dcc:	4b02      	ldr	r3, [pc, #8]	; (8016dd8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd6:	4770      	bx	lr
 8016dd8:	0802d1cc 	.word	0x0802d1cc

08016ddc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8016ddc:	b480      	push	{r7}
 8016dde:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8016de0:	2305      	movs	r3, #5
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	46bd      	mov	sp, r7
 8016de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dea:	4770      	bx	lr

08016dec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8016dec:	b480      	push	{r7}
 8016dee:	b085      	sub	sp, #20
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	60f8      	str	r0, [r7, #12]
 8016df4:	60b9      	str	r1, [r7, #8]
 8016df6:	4613      	mov	r3, r2
 8016df8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8016dfa:	4a07      	ldr	r2, [pc, #28]	; (8016e18 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	6013      	str	r3, [r2, #0]
        fonts = f;
 8016e00:	4a06      	ldr	r2, [pc, #24]	; (8016e1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8016e06:	4a06      	ldr	r2, [pc, #24]	; (8016e20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8016e08:	88fb      	ldrh	r3, [r7, #6]
 8016e0a:	8013      	strh	r3, [r2, #0]
    }
 8016e0c:	bf00      	nop
 8016e0e:	3714      	adds	r7, #20
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr
 8016e18:	2000c080 	.word	0x2000c080
 8016e1c:	2000c088 	.word	0x2000c088
 8016e20:	2000c084 	.word	0x2000c084

08016e24 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8016e24:	b590      	push	{r4, r7, lr}
 8016e26:	b085      	sub	sp, #20
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8016e32:	88fb      	ldrh	r3, [r7, #6]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d127      	bne.n	8016e88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8016e38:	88fb      	ldrh	r3, [r7, #6]
 8016e3a:	4a1e      	ldr	r2, [pc, #120]	; (8016eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8016e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d016      	beq.n	8016e72 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8016e44:	88fb      	ldrh	r3, [r7, #6]
 8016e46:	4a1b      	ldr	r2, [pc, #108]	; (8016eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8016e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e4c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	68ba      	ldr	r2, [r7, #8]
 8016e54:	4413      	add	r3, r2
 8016e56:	4a18      	ldr	r2, [pc, #96]	; (8016eb8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8016e58:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	68ba      	ldr	r2, [r7, #8]
 8016e60:	4413      	add	r3, r2
 8016e62:	4a16      	ldr	r2, [pc, #88]	; (8016ebc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8016e64:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	689b      	ldr	r3, [r3, #8]
 8016e6a:	68ba      	ldr	r2, [r7, #8]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	60fb      	str	r3, [r7, #12]
 8016e70:	e00a      	b.n	8016e88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8016e72:	4b11      	ldr	r3, [pc, #68]	; (8016eb8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8016e74:	4a12      	ldr	r2, [pc, #72]	; (8016ec0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8016e76:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8016e78:	4a12      	ldr	r2, [pc, #72]	; (8016ec4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8016e7a:	4b10      	ldr	r3, [pc, #64]	; (8016ebc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8016e7c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8016e7e:	88fb      	ldrh	r3, [r7, #6]
 8016e80:	4a11      	ldr	r2, [pc, #68]	; (8016ec8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8016e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e86:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d00d      	beq.n	8016eaa <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8016e8e:	4a0f      	ldr	r2, [pc, #60]	; (8016ecc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8016e90:	88fb      	ldrh	r3, [r7, #6]
 8016e92:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8016e94:	f000 f83e 	bl	8016f14 <_ZN17TypedTextDatabase8getFontsEv>
 8016e98:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8016e9a:	f000 f833 	bl	8016f04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	461a      	mov	r2, r3
 8016ea2:	4621      	mov	r1, r4
 8016ea4:	68f8      	ldr	r0, [r7, #12]
 8016ea6:	f7ff ffa1 	bl	8016dec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8016eaa:	bf00      	nop
 8016eac:	3714      	adds	r7, #20
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd90      	pop	{r4, r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	20008720 	.word	0x20008720
 8016eb8:	20008728 	.word	0x20008728
 8016ebc:	2000872c 	.word	0x2000872c
 8016ec0:	0806a91c 	.word	0x0806a91c
 8016ec4:	0806a7a8 	.word	0x0806a7a8
 8016ec8:	0806adf0 	.word	0x0806adf0
 8016ecc:	20008724 	.word	0x20008724

08016ed0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8016edc:	4b07      	ldr	r3, [pc, #28]	; (8016efc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	4b07      	ldr	r3, [pc, #28]	; (8016f00 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8016ee2:	6819      	ldr	r1, [r3, #0]
 8016ee4:	887b      	ldrh	r3, [r7, #2]
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	440b      	add	r3, r1
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	4413      	add	r3, r2
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	370c      	adds	r7, #12
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efa:	4770      	bx	lr
 8016efc:	20008728 	.word	0x20008728
 8016f00:	2000872c 	.word	0x2000872c

08016f04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8016f04:	b480      	push	{r7}
 8016f06:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8016f08:	235d      	movs	r3, #93	; 0x5d
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr

08016f14 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8016f14:	b480      	push	{r7}
 8016f16:	af00      	add	r7, sp, #0
    return _fonts;
 8016f18:	4b02      	ldr	r3, [pc, #8]	; (8016f24 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr
 8016f24:	20008730 	.word	0x20008730

08016f28 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d127      	bne.n	8016f88 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	d122      	bne.n	8016f88 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8016f42:	f7f9 fcd3 	bl	80108ec <_Z25getFont_Asap_Bold_18_4bppv>
 8016f46:	4602      	mov	r2, r0
};
 8016f48:	4b11      	ldr	r3, [pc, #68]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f4a:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8016f4c:	f7f9 fd94 	bl	8010a78 <_Z25getFont_Asap_Bold_40_4bppv>
 8016f50:	4602      	mov	r2, r0
};
 8016f52:	4b0f      	ldr	r3, [pc, #60]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f54:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8016f56:	f7f9 fd4d 	bl	80109f4 <_Z25getFont_Asap_Bold_30_4bppv>
 8016f5a:	4602      	mov	r2, r0
};
 8016f5c:	4b0c      	ldr	r3, [pc, #48]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f5e:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8016f60:	f7f9 fc82 	bl	8010868 <_Z25getFont_Asap_Bold_12_4bppv>
 8016f64:	4602      	mov	r2, r0
};
 8016f66:	4b0a      	ldr	r3, [pc, #40]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f68:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8016f6a:	f7f9 fdc7 	bl	8010afc <_Z25getFont_Asap_Bold_60_4bppv>
 8016f6e:	4602      	mov	r2, r0
};
 8016f70:	4b07      	ldr	r3, [pc, #28]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f72:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8016f74:	f7f9 fcfc 	bl	8010970 <_Z25getFont_Asap_Bold_21_4bppv>
 8016f78:	4602      	mov	r2, r0
};
 8016f7a:	4b05      	ldr	r3, [pc, #20]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f7c:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8016f7e:	f7f9 fc31 	bl	80107e4 <_Z25getFont_Asap_Bold_10_4bppv>
 8016f82:	4602      	mov	r2, r0
};
 8016f84:	4b02      	ldr	r3, [pc, #8]	; (8016f90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016f86:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8016f88:	bf00      	nop
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	20008730 	.word	0x20008730

08016f94 <_GLOBAL__sub_I__fonts>:
 8016f94:	b580      	push	{r7, lr}
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016f9c:	2001      	movs	r0, #1
 8016f9e:	f7ff ffc3 	bl	8016f28 <_Z41__static_initialization_and_destruction_0ii>
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	4a05      	ldr	r2, [pc, #20]	; (8016fc4 <_ZN19FrontendApplicationD1Ev+0x20>)
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	601a      	str	r2, [r3, #0]
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7fa f879 	bl	80110ac <_ZN23FrontendApplicationBaseD1Ev>
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	3708      	adds	r7, #8
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	0802d238 	.word	0x0802d238

08016fc8 <_ZN19FrontendApplicationD0Ev>:
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6878      	ldr	r0, [r7, #4]
 8016fd2:	f7ff ffe7 	bl	8016fa4 <_ZN19FrontendApplicationD1Ev>
 8016fd6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f013 fdd7 	bl	802ab8e <_ZdlPvj>
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8016fea:	b580      	push	{r7, lr}
 8016fec:	b082      	sub	sp, #8
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f000 fd77 	bl	8017aec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	4618      	mov	r0, r3
 8017002:	f007 fcdb 	bl	801e9bc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8017006:	bf00      	nop
 8017008:	3708      	adds	r7, #8
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
	...

08017010 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	60f8      	str	r0, [r7, #12]
 8017018:	60b9      	str	r1, [r7, #8]
 801701a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	68b9      	ldr	r1, [r7, #8]
 8017022:	4618      	mov	r0, r3
 8017024:	f7fa f8bc 	bl	80111a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8017028:	4a03      	ldr	r2, [pc, #12]	; (8017038 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	601a      	str	r2, [r3, #0]
{
}
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	4618      	mov	r0, r3
 8017032:	3710      	adds	r7, #16
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	0802d238 	.word	0x0802d238

0801703c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
    {
    }
 8017044:	bf00      	nop
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
    {
    }
 8017058:	bf00      	nop
 801705a:	370c      	adds	r7, #12
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8017064:	b480      	push	{r7}
 8017066:	b083      	sub	sp, #12
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
    {
 801706c:	4a04      	ldr	r2, [pc, #16]	; (8017080 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	601a      	str	r2, [r3, #0]
    }
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	4618      	mov	r0, r3
 8017076:	370c      	adds	r7, #12
 8017078:	46bd      	mov	sp, r7
 801707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707e:	4770      	bx	lr
 8017080:	0802d2c4 	.word	0x0802d2c4

08017084 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
    }
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f7ff ffe9 	bl	8017064 <_ZN8touchgfx9PresenterD1Ev>
 8017092:	2104      	movs	r1, #4
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f013 fd7a 	bl	802ab8e <_ZdlPvj>
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4618      	mov	r0, r3
 801709e:	3708      	adds	r7, #8
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}

080170a4 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80170a4:	b480      	push	{r7}
 80170a6:	b083      	sub	sp, #12
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
    {
 80170ac:	4a04      	ldr	r2, [pc, #16]	; (80170c0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	601a      	str	r2, [r3, #0]
    }
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	4618      	mov	r0, r3
 80170b6:	370c      	adds	r7, #12
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr
 80170c0:	0802d2c4 	.word	0x0802d2c4

080170c4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80170c4:	b480      	push	{r7}
 80170c6:	b083      	sub	sp, #12
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	4a06      	ldr	r2, [pc, #24]	; (80170e8 <_ZN13ModelListenerC1Ev+0x24>)
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	601a      	str	r2, [r3, #0]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2200      	movs	r2, #0
 80170d6:	605a      	str	r2, [r3, #4]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	4618      	mov	r0, r3
 80170dc:	370c      	adds	r7, #12
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr
 80170e6:	bf00      	nop
 80170e8:	0802d2ac 	.word	0x0802d2ac

080170ec <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80170ec:	b480      	push	{r7}
 80170ee:	b083      	sub	sp, #12
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	4a04      	ldr	r2, [pc, #16]	; (8017108 <_ZN13ModelListenerD1Ev+0x1c>)
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	601a      	str	r2, [r3, #0]
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	4618      	mov	r0, r3
 80170fe:	370c      	adds	r7, #12
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr
 8017108:	0802d2ac 	.word	0x0802d2ac

0801710c <_ZN13ModelListenerD0Ev>:
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f7ff ffe9 	bl	80170ec <_ZN13ModelListenerD1Ev>
 801711a:	2108      	movs	r1, #8
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f013 fd36 	bl	802ab8e <_ZdlPvj>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	4618      	mov	r0, r3
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
 8017136:	bf00      	nop
 8017138:	370c      	adds	r7, #12
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	4770      	bx	lr

08017142 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8017142:	b480      	push	{r7}
 8017144:	b083      	sub	sp, #12
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
 801714a:	6039      	str	r1, [r7, #0]
 801714c:	bf00      	nop
 801714e:	370c      	adds	r7, #12
 8017150:	46bd      	mov	sp, r7
 8017152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017156:	4770      	bx	lr

08017158 <_ZN13MainPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~MainPresenter() {
 8017158:	b580      	push	{r7, lr}
 801715a:	b082      	sub	sp, #8
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	4a09      	ldr	r2, [pc, #36]	; (8017188 <_ZN13MainPresenterD1Ev+0x30>)
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	601a      	str	r2, [r3, #0]
 8017166:	4a09      	ldr	r2, [pc, #36]	; (801718c <_ZN13MainPresenterD1Ev+0x34>)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	605a      	str	r2, [r3, #4]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	3304      	adds	r3, #4
 8017170:	4618      	mov	r0, r3
 8017172:	f7ff ffbb 	bl	80170ec <_ZN13ModelListenerD1Ev>
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	4618      	mov	r0, r3
 801717a:	f7ff ff73 	bl	8017064 <_ZN8touchgfx9PresenterD1Ev>
	}
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	4618      	mov	r0, r3
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	0802d274 	.word	0x0802d274
 801718c:	0802d294 	.word	0x0802d294

08017190 <_ZThn4_N13MainPresenterD1Ev>:
	virtual ~MainPresenter() {
 8017190:	f1a0 0004 	sub.w	r0, r0, #4
 8017194:	e7e0      	b.n	8017158 <_ZN13MainPresenterD1Ev>
 8017196:	bf00      	nop

08017198 <_ZN13MainPresenterD0Ev>:
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
	}
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7ff ffd9 	bl	8017158 <_ZN13MainPresenterD1Ev>
 80171a6:	2110      	movs	r1, #16
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f013 fcf0 	bl	802ab8e <_ZdlPvj>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	4618      	mov	r0, r3
 80171b2:	3708      	adds	r7, #8
 80171b4:	46bd      	mov	sp, r7
 80171b6:	bd80      	pop	{r7, pc}

080171b8 <_ZThn4_N13MainPresenterD0Ev>:
	virtual ~MainPresenter() {
 80171b8:	f1a0 0004 	sub.w	r0, r0, #4
 80171bc:	e7ec      	b.n	8017198 <_ZN13MainPresenterD0Ev>
	...

080171c0 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
    : view(v)
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7ff ff69 	bl	80170a4 <_ZN8touchgfx9PresenterC1Ev>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	3304      	adds	r3, #4
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ff ff74 	bl	80170c4 <_ZN13ModelListenerC1Ev>
 80171dc:	4a06      	ldr	r2, [pc, #24]	; (80171f8 <_ZN13MainPresenterC1ER8MainView+0x38>)
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	601a      	str	r2, [r3, #0]
 80171e2:	4a06      	ldr	r2, [pc, #24]	; (80171fc <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	605a      	str	r2, [r3, #4]
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	683a      	ldr	r2, [r7, #0]
 80171ec:	60da      	str	r2, [r3, #12]
{
}
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4618      	mov	r0, r3
 80171f2:	3708      	adds	r7, #8
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}
 80171f8:	0802d274 	.word	0x0802d274
 80171fc:	0802d294 	.word	0x0802d294

08017200 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
	 model -> saveCurrentScreenIndex(1);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	689b      	ldr	r3, [r3, #8]
 801720c:	2101      	movs	r1, #1
 801720e:	4618      	mov	r0, r3
 8017210:	f000 fcae 	bl	8017b70 <_ZN5Model22saveCurrentScreenIndexEi>
}
 8017214:	bf00      	nop
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
}
 8017224:	bf00      	nop
 8017226:	370c      	adds	r7, #12
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr

08017230 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	68db      	ldr	r3, [r3, #12]
 801723e:	6839      	ldr	r1, [r7, #0]
 8017240:	4618      	mov	r0, r3
 8017242:	f000 f9fd 	bl	8017640 <_ZN8MainView9updateValEPh>
}
 8017246:	bf00      	nop
 8017248:	3708      	adds	r7, #8
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}

0801724e <_ZThn4_N13MainPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 801724e:	f1a0 0004 	sub.w	r0, r0, #4
 8017252:	f7ff bfed 	b.w	8017230 <_ZN13MainPresenter11setNewValueEPh>

08017256 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b082      	sub	sp, #8
 801725a:	af00      	add	r7, sp, #0
 801725c:	6078      	str	r0, [r7, #4]
 801725e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	68db      	ldr	r3, [r3, #12]
 8017264:	6839      	ldr	r1, [r7, #0]
 8017266:	4618      	mov	r0, r3
 8017268:	f000 f908 	bl	801747c <_ZN8MainView14updateSettingsEPh>
}
 801726c:	bf00      	nop
 801726e:	3708      	adds	r7, #8
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
	void updateDisplaySettings(uint8_t *settings);
 8017274:	f1a0 0004 	sub.w	r0, r0, #4
 8017278:	f7ff bfed 	b.w	8017256 <_ZN13MainPresenter21updateDisplaySettingsEPh>

0801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	460b      	mov	r3, r1
 8017286:	607a      	str	r2, [r7, #4]
 8017288:	ed87 0a00 	vstr	s0, [r7]
 801728c:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 801728e:	463b      	mov	r3, r7
 8017290:	8979      	ldrh	r1, [r7, #10]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	68f8      	ldr	r0, [r7, #12]
 8017296:	f009 fe67 	bl	8020f68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 801729a:	4603      	mov	r3, r0
    }
 801729c:	4618      	mov	r0, r3
 801729e:	3710      	adds	r7, #16
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80172a4:	b480      	push	{r7}
 80172a6:	b083      	sub	sp, #12
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
        return rect.width;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80172b2:	4618      	mov	r0, r3
 80172b4:	370c      	adds	r7, #12
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr

080172be <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80172be:	b480      	push	{r7}
 80172c0:	b083      	sub	sp, #12
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
        return rect.height;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80172cc:	4618      	mov	r0, r3
 80172ce:	370c      	adds	r7, #12
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr

080172d8 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80172d8:	b580      	push	{r7, lr}
 80172da:	b082      	sub	sp, #8
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	4a05      	ldr	r2, [pc, #20]	; (80172f8 <_ZN8MainViewD1Ev+0x20>)
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	601a      	str	r2, [r3, #0]
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7fc f8f7 	bl	80134dc <_ZN12MainViewBaseD1Ev>
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	4618      	mov	r0, r3
 80172f2:	3708      	adds	r7, #8
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}
 80172f8:	0802d2dc 	.word	0x0802d2dc

080172fc <_ZN8MainViewD0Ev>:
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7ff ffe7 	bl	80172d8 <_ZN8MainViewD1Ev>
 801730a:	f642 01b8 	movw	r1, #10424	; 0x28b8
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f013 fc3d 	bl	802ab8e <_ZdlPvj>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	4618      	mov	r0, r3
 8017318:	3708      	adds	r7, #8
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
	...

08017320 <_ZN8MainViewC1Ev>:
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;
static int prev_vspd = 0;

MainView::MainView() {
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b083      	sub	sp, #12
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	4618      	mov	r0, r3
 801732c:	f7fc fa44 	bl	80137b8 <_ZN12MainViewBaseC1Ev>
 8017330:	4a15      	ldr	r2, [pc, #84]	; (8017388 <_ZN8MainViewC1Ev+0x68>)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	601a      	str	r2, [r3, #0]
	// Support of larger displays for this example
	// is handled by showing a black box in the
	// unused part of the display.
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 8017336:	4b15      	ldr	r3, [pc, #84]	; (801738c <_ZN8MainViewC1Ev+0x6c>)
 8017338:	881b      	ldrh	r3, [r3, #0]
 801733a:	461c      	mov	r4, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8017342:	4618      	mov	r0, r3
 8017344:	f7ff ffae 	bl	80172a4 <_ZNK8touchgfx8Drawable8getWidthEv>
 8017348:	4603      	mov	r3, r0
			|| HAL::DISPLAY_HEIGHT > backgroundImage.getHeight()) {
 801734a:	429c      	cmp	r4, r3
 801734c:	dc0b      	bgt.n	8017366 <_ZN8MainViewC1Ev+0x46>
 801734e:	4b10      	ldr	r3, [pc, #64]	; (8017390 <_ZN8MainViewC1Ev+0x70>)
 8017350:	881b      	ldrh	r3, [r3, #0]
 8017352:	461c      	mov	r4, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801735a:	4618      	mov	r0, r3
 801735c:	f7ff ffaf 	bl	80172be <_ZNK8touchgfx8Drawable9getHeightEv>
 8017360:	4603      	mov	r3, r0
 8017362:	429c      	cmp	r4, r3
 8017364:	dd01      	ble.n	801736a <_ZN8MainViewC1Ev+0x4a>
 8017366:	2301      	movs	r3, #1
 8017368:	e000      	b.n	801736c <_ZN8MainViewC1Ev+0x4c>
 801736a:	2300      	movs	r3, #0
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 801736c:	2b00      	cmp	r3, #0
 801736e:	d005      	beq.n	801737c <_ZN8MainViewC1Ev+0x5c>
		backgroundBox.setVisible(true);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	3340      	adds	r3, #64	; 0x40
 8017374:	2101      	movs	r1, #1
 8017376:	4618      	mov	r0, r3
 8017378:	f7fb fb15 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
	}
}
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	4618      	mov	r0, r3
 8017380:	370c      	adds	r7, #12
 8017382:	46bd      	mov	sp, r7
 8017384:	bd90      	pop	{r4, r7, pc}
 8017386:	bf00      	nop
 8017388:	0802d2dc 	.word	0x0802d2dc
 801738c:	2000bfe2 	.word	0x2000bfe2
 8017390:	2000bfe4 	.word	0x2000bfe4

08017394 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen() {
 8017394:	b480      	push	{r7}
 8017396:	b083      	sub	sp, #12
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
}
 801739c:	bf00      	nop
 801739e:	370c      	adds	r7, #12
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr

080173a8 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen() {
 80173a8:	b480      	push	{r7}
 80173aa:	b083      	sub	sp, #12
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
}
 80173b0:	bf00      	nop
 80173b2:	370c      	adds	r7, #12
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr

080173bc <_ZL14getYellowColorv>:

static colortype getYellowColor() {
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 255, 0);
 80173c2:	2200      	movs	r2, #0
 80173c4:	21ff      	movs	r1, #255	; 0xff
 80173c6:	20ff      	movs	r0, #255	; 0xff
 80173c8:	f7fc f9cc 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80173cc:	4603      	mov	r3, r0
 80173ce:	607b      	str	r3, [r7, #4]
	return black_color;
 80173d0:	687b      	ldr	r3, [r7, #4]
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}

080173da <_ZL13getBlackColorv>:
static colortype getRedColor() {
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
	return black_color;
}

static colortype getBlackColor() {
 80173da:	b580      	push	{r7, lr}
 80173dc:	b082      	sub	sp, #8
 80173de:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80173e0:	2200      	movs	r2, #0
 80173e2:	2100      	movs	r1, #0
 80173e4:	2000      	movs	r0, #0
 80173e6:	f7fc f9bd 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80173ea:	4603      	mov	r3, r0
 80173ec:	607b      	str	r3, [r7, #4]
	return black_color;
 80173ee:	687b      	ldr	r3, [r7, #4]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3708      	adds	r7, #8
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit() {
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b084      	sub	sp, #16
 80173fc:	af00      	add	r7, sp, #0

	color_index++;
 80173fe:	4b1e      	ldr	r3, [pc, #120]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	3301      	adds	r3, #1
 8017404:	4a1c      	ldr	r2, [pc, #112]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 8017406:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 8017408:	4b1b      	ldr	r3, [pc, #108]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2b02      	cmp	r3, #2
 801740e:	dd02      	ble.n	8017416 <_ZL20getColorFromRevLimitv+0x1e>
		color_index = 0;
 8017410:	4b19      	ldr	r3, [pc, #100]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 8017412:	2200      	movs	r2, #0
 8017414:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8017416:	2200      	movs	r2, #0
 8017418:	2100      	movs	r1, #0
 801741a:	20ff      	movs	r0, #255	; 0xff
 801741c:	f7fc f9a2 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017420:	4603      	mov	r3, r0
 8017422:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8017424:	2200      	movs	r2, #0
 8017426:	2100      	movs	r1, #0
 8017428:	2000      	movs	r0, #0
 801742a:	f7fc f99b 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801742e:	4603      	mov	r3, r0
 8017430:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 8017432:	22ff      	movs	r2, #255	; 0xff
 8017434:	21ff      	movs	r1, #255	; 0xff
 8017436:	20ff      	movs	r0, #255	; 0xff
 8017438:	f7fc f994 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801743c:	4603      	mov	r3, r0
 801743e:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8017440:	463b      	mov	r3, r7
 8017442:	4618      	mov	r0, r3
 8017444:	f7fb f961 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8017448:	4b0b      	ldr	r3, [pc, #44]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <_ZL20getColorFromRevLimitv+0x5c>
		color_to_set = red_color;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 8017454:	4b08      	ldr	r3, [pc, #32]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b01      	cmp	r3, #1
 801745a:	d101      	bne.n	8017460 <_ZL20getColorFromRevLimitv+0x68>
		color_to_set = black_color;
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8017460:	4b05      	ldr	r3, [pc, #20]	; (8017478 <_ZL20getColorFromRevLimitv+0x80>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	2b02      	cmp	r3, #2
 8017466:	d101      	bne.n	801746c <_ZL20getColorFromRevLimitv+0x74>
		color_to_set = white_color;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 801746c:	683b      	ldr	r3, [r7, #0]
}
 801746e:	4618      	mov	r0, r3
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	2000874c 	.word	0x2000874c

0801747c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t *settings) {
 801747c:	b580      	push	{r7, lr}
 801747e:	b086      	sub	sp, #24
 8017480:	af02      	add	r7, sp, #8
 8017482:	6078      	str	r0, [r7, #4]
 8017484:	6039      	str	r1, [r7, #0]
	settings_message *new_settings = (settings_message*) settings;
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	60fb      	str	r3, [r7, #12]

	rev_limit_warning = (int) new_settings->rpm_limit_warning;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a68      	ldr	r2, [pc, #416]	; (8017630 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017490:	6013      	str	r3, [r2, #0]
	rev_limit = (int) new_settings->rpm_limit;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	4a67      	ldr	r2, [pc, #412]	; (8017634 <_ZN8MainView14updateSettingsEPh+0x1b8>)
 8017498:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int) (new_settings->rpm8 * 1000.0f), 0, 0);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a4:	ee07 3a90 	vmov	s15, r3
 80174a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174ac:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8017638 <_ZN8MainView14updateSettingsEPh+0x1bc>
 80174b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80174b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174b8:	ee17 3a90 	vmov	r3, s15
 80174bc:	b21a      	sxth	r2, r3
 80174be:	2300      	movs	r3, #0
 80174c0:	9300      	str	r3, [sp, #0]
 80174c2:	2300      	movs	r3, #0
 80174c4:	2100      	movs	r1, #0
 80174c6:	f003 feab 	bl	801b220 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80174d0:	4618      	mov	r0, r3
 80174d2:	f007 ff87 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f503 603f 	add.w	r0, r3, #3056	; 0xbf0
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	689b      	ldr	r3, [r3, #8]
 80174e0:	4a56      	ldr	r2, [pc, #344]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 80174e2:	2102      	movs	r1, #2
 80174e4:	f009 fbe6 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80174ee:	4618      	mov	r0, r3
 80174f0:	f005 feb8 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80174fa:	4618      	mov	r0, r3
 80174fc:	f007 ff72 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	68db      	ldr	r3, [r3, #12]
 801750a:	4a4c      	ldr	r2, [pc, #304]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 801750c:	2102      	movs	r1, #2
 801750e:	f009 fbd1 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8017518:	4618      	mov	r0, r3
 801751a:	f005 fea3 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8017524:	4618      	mov	r0, r3
 8017526:	f007 ff5d 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f603 30f8 	addw	r0, r3, #3064	; 0xbf8
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	691b      	ldr	r3, [r3, #16]
 8017534:	4a41      	ldr	r2, [pc, #260]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017536:	2102      	movs	r1, #2
 8017538:	f009 fbbc 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8017542:	4618      	mov	r0, r3
 8017544:	f005 fe8e 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801754e:	4618      	mov	r0, r3
 8017550:	f007 ff48 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	695b      	ldr	r3, [r3, #20]
 801755e:	4a37      	ldr	r2, [pc, #220]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017560:	2102      	movs	r1, #2
 8017562:	f009 fba7 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801756c:	4618      	mov	r0, r3
 801756e:	f005 fe79 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8017578:	4618      	mov	r0, r3
 801757a:	f007 ff33 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f503 6040 	add.w	r0, r3, #3072	; 0xc00
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	699b      	ldr	r3, [r3, #24]
 8017588:	4a2c      	ldr	r2, [pc, #176]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 801758a:	2102      	movs	r1, #2
 801758c:	f009 fb92 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8017596:	4618      	mov	r0, r3
 8017598:	f005 fe64 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80175a2:	4618      	mov	r0, r3
 80175a4:	f007 ff1e 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f603 4004 	addw	r0, r3, #3076	; 0xc04
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	69db      	ldr	r3, [r3, #28]
 80175b2:	4a22      	ldr	r2, [pc, #136]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 80175b4:	2102      	movs	r1, #2
 80175b6:	f009 fb7d 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80175c0:	4618      	mov	r0, r3
 80175c2:	f005 fe4f 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80175cc:	4618      	mov	r0, r3
 80175ce:	f007 ff09 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	6a1b      	ldr	r3, [r3, #32]
 80175dc:	4a17      	ldr	r2, [pc, #92]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 80175de:	2102      	movs	r1, #2
 80175e0:	f009 fb68 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80175ea:	4618      	mov	r0, r3
 80175ec:	f005 fe3a 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80175f6:	4618      	mov	r0, r3
 80175f8:	f007 fef4 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f603 400c 	addw	r0, r3, #3084	; 0xc0c
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017606:	4a0d      	ldr	r2, [pc, #52]	; (801763c <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017608:	2102      	movs	r1, #2
 801760a:	f009 fb53 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8017614:	4618      	mov	r0, r3
 8017616:	f005 fe25 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8017620:	4618      	mov	r0, r3
 8017622:	f007 fedf 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8017626:	bf00      	nop
 8017628:	3710      	adds	r7, #16
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}
 801762e:	bf00      	nop
 8017630:	20000038 	.word	0x20000038
 8017634:	2000003c 	.word	0x2000003c
 8017638:	447a0000 	.word	0x447a0000
 801763c:	0802c3d8 	.word	0x0802c3d8

08017640 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t *newValue) {
 8017640:	b590      	push	{r4, r7, lr}
 8017642:	b085      	sub	sp, #20
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
	static bool background_is_black = false;
	display_values *values = (display_values*) newValue;
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	60fb      	str	r3, [r7, #12]

	bool on_rev_limit_warning = values->rpm >= rev_limit_warning;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	681a      	ldr	r2, [r3, #0]
 8017652:	4b21      	ldr	r3, [pc, #132]	; (80176d8 <_ZN8MainView9updateValEPh+0x98>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	429a      	cmp	r2, r3
 8017658:	bfac      	ite	ge
 801765a:	2301      	movge	r3, #1
 801765c:	2300      	movlt	r3, #0
 801765e:	72fb      	strb	r3, [r7, #11]
	bool on_rev_limiter = values->rpm >= rev_limit;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	4b1d      	ldr	r3, [pc, #116]	; (80176dc <_ZN8MainView9updateValEPh+0x9c>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	429a      	cmp	r2, r3
 801766a:	bfac      	ite	ge
 801766c:	2301      	movge	r3, #1
 801766e:	2300      	movlt	r3, #0
 8017670:	72bb      	strb	r3, [r7, #10]
//			|| ((int) values->check_eng_code) > 0 || ((int) values->eng_protection_code) > 0;
//	if (has_error) {
//		backgroundBox.setColor(getRedColor());
//		backgroundBox.invalidate();
//	} else
	if(on_rev_limit_warning && !on_rev_limiter) {
 8017672:	7afb      	ldrb	r3, [r7, #11]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d018      	beq.n	80176aa <_ZN8MainView9updateValEPh+0x6a>
 8017678:	7abb      	ldrb	r3, [r7, #10]
 801767a:	f083 0301 	eor.w	r3, r3, #1
 801767e:	b2db      	uxtb	r3, r3
 8017680:	2b00      	cmp	r3, #0
 8017682:	d012      	beq.n	80176aa <_ZN8MainView9updateValEPh+0x6a>
		background_is_black = false;
 8017684:	4b16      	ldr	r3, [pc, #88]	; (80176e0 <_ZN8MainView9updateValEPh+0xa0>)
 8017686:	2200      	movs	r2, #0
 8017688:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getYellowColor());
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017690:	f7ff fe94 	bl	80173bc <_ZL14getYellowColorv>
 8017694:	4603      	mov	r3, r0
 8017696:	4619      	mov	r1, r3
 8017698:	4620      	mov	r0, r4
 801769a:	f7fb fb45 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	3340      	adds	r3, #64	; 0x40
 80176a2:	4618      	mov	r0, r3
 80176a4:	f007 fe9e 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80176a8:	e035      	b.n	8017716 <_ZN8MainView9updateValEPh+0xd6>
	} else if (on_rev_limiter) {
 80176aa:	7abb      	ldrb	r3, [r7, #10]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d019      	beq.n	80176e4 <_ZN8MainView9updateValEPh+0xa4>
		background_is_black = false;
 80176b0:	4b0b      	ldr	r3, [pc, #44]	; (80176e0 <_ZN8MainView9updateValEPh+0xa0>)
 80176b2:	2200      	movs	r2, #0
 80176b4:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80176bc:	f7ff fe9c 	bl	80173f8 <_ZL20getColorFromRevLimitv>
 80176c0:	4603      	mov	r3, r0
 80176c2:	4619      	mov	r1, r3
 80176c4:	4620      	mov	r0, r4
 80176c6:	f7fb fb2f 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	3340      	adds	r3, #64	; 0x40
 80176ce:	4618      	mov	r0, r3
 80176d0:	f007 fe88 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80176d4:	e01f      	b.n	8017716 <_ZN8MainView9updateValEPh+0xd6>
 80176d6:	bf00      	nop
 80176d8:	20000038 	.word	0x20000038
 80176dc:	2000003c 	.word	0x2000003c
 80176e0:	20008774 	.word	0x20008774
	} else if (!background_is_black) {
 80176e4:	4bac      	ldr	r3, [pc, #688]	; (8017998 <_ZN8MainView9updateValEPh+0x358>)
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	f083 0301 	eor.w	r3, r3, #1
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d011      	beq.n	8017716 <_ZN8MainView9updateValEPh+0xd6>
		backgroundBox.setColor(getBlackColor());
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80176f8:	f7ff fe6f 	bl	80173da <_ZL13getBlackColorv>
 80176fc:	4603      	mov	r3, r0
 80176fe:	4619      	mov	r1, r3
 8017700:	4620      	mov	r0, r4
 8017702:	f7fb fb11 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	3340      	adds	r3, #64	; 0x40
 801770a:	4618      	mov	r0, r3
 801770c:	f007 fe6a 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8017710:	4ba1      	ldr	r3, [pc, #644]	; (8017998 <_ZN8MainView9updateValEPh+0x358>)
 8017712:	2201      	movs	r2, #1
 8017714:	701a      	strb	r2, [r3, #0]
	}

	if (values->rpm != prev_rpm) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	4ba0      	ldr	r3, [pc, #640]	; (801799c <_ZN8MainView9updateValEPh+0x35c>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	429a      	cmp	r2, r3
 8017720:	d021      	beq.n	8017766 <_ZN8MainView9updateValEPh+0x126>
		prev_rpm = values->rpm;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	4a9d      	ldr	r2, [pc, #628]	; (801799c <_ZN8MainView9updateValEPh+0x35c>)
 8017728:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4619      	mov	r1, r3
 8017736:	4610      	mov	r0, r2
 8017738:	f003 fc5c 	bl	801aff4 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8017742:	4618      	mov	r0, r3
 8017744:	f007 fe4e 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f603 4042 	addw	r0, r3, #3138	; 0xc42
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	4a93      	ldr	r2, [pc, #588]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 8017754:	2105      	movs	r1, #5
 8017756:	f009 faad 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8017760:	4618      	mov	r0, r3
 8017762:	f007 fe3f 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->map != prev_map) {
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	689a      	ldr	r2, [r3, #8]
 801776a:	4b8e      	ldr	r3, [pc, #568]	; (80179a4 <_ZN8MainView9updateValEPh+0x364>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	429a      	cmp	r2, r3
 8017770:	d012      	beq.n	8017798 <_ZN8MainView9updateValEPh+0x158>
		prev_map = values->map;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	689b      	ldr	r3, [r3, #8]
 8017776:	4a8b      	ldr	r2, [pc, #556]	; (80179a4 <_ZN8MainView9updateValEPh+0x364>)
 8017778:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f603 4056 	addw	r0, r3, #3158	; 0xc56
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	4a86      	ldr	r2, [pc, #536]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 8017786:	2105      	movs	r1, #5
 8017788:	f009 fa94 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8017792:	4618      	mov	r0, r3
 8017794:	f007 fe26 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->clt != prev_clt) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	685a      	ldr	r2, [r3, #4]
 801779c:	4b82      	ldr	r3, [pc, #520]	; (80179a8 <_ZN8MainView9updateValEPh+0x368>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d012      	beq.n	80177ca <_ZN8MainView9updateValEPh+0x18a>
		prev_clt = values->clt;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	4a7f      	ldr	r2, [pc, #508]	; (80179a8 <_ZN8MainView9updateValEPh+0x368>)
 80177aa:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f603 404c 	addw	r0, r3, #3148	; 0xc4c
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	685b      	ldr	r3, [r3, #4]
 80177b6:	4a7a      	ldr	r2, [pc, #488]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 80177b8:	2105      	movs	r1, #5
 80177ba:	f009 fa7b 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80177c4:	4618      	mov	r0, r3
 80177c6:	f007 fe0d 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda != prev_lambda) {
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80177d0:	4b76      	ldr	r3, [pc, #472]	; (80179ac <_ZN8MainView9updateValEPh+0x36c>)
 80177d2:	edd3 7a00 	vldr	s15, [r3]
 80177d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80177da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177de:	d015      	beq.n	801780c <_ZN8MainView9updateValEPh+0x1cc>
		prev_lambda = values->lambda;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	4a71      	ldr	r2, [pc, #452]	; (80179ac <_ZN8MainView9updateValEPh+0x36c>)
 80177e6:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80177f4:	eeb0 0a67 	vmov.f32	s0, s15
 80177f8:	4a6d      	ldr	r2, [pc, #436]	; (80179b0 <_ZN8MainView9updateValEPh+0x370>)
 80177fa:	2105      	movs	r1, #5
 80177fc:	f7ff fd3e 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda);
		LambdaValue.invalidate();
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8017806:	4618      	mov	r0, r3
 8017808:	f007 fdec 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda_trgt != prev_lambda_targ) {
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	ed93 7a04 	vldr	s14, [r3, #16]
 8017812:	4b68      	ldr	r3, [pc, #416]	; (80179b4 <_ZN8MainView9updateValEPh+0x374>)
 8017814:	edd3 7a00 	vldr	s15, [r3]
 8017818:	eeb4 7a67 	vcmp.f32	s14, s15
 801781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017820:	d015      	beq.n	801784e <_ZN8MainView9updateValEPh+0x20e>
		prev_lambda_targ = values->lambda_trgt;
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	691b      	ldr	r3, [r3, #16]
 8017826:	4a63      	ldr	r2, [pc, #396]	; (80179b4 <_ZN8MainView9updateValEPh+0x374>)
 8017828:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f603 30e6 	addw	r0, r3, #3046	; 0xbe6
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	edd3 7a04 	vldr	s15, [r3, #16]
 8017836:	eeb0 0a67 	vmov.f32	s0, s15
 801783a:	4a5d      	ldr	r2, [pc, #372]	; (80179b0 <_ZN8MainView9updateValEPh+0x370>)
 801783c:	2105      	movs	r1, #5
 801783e:	f7ff fd1d 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda_trgt);
		TrgtValue.invalidate();
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017848:	4618      	mov	r0, r3
 801784a:	f007 fdcb 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_press != prev_oil_press) {
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	ed93 7a06 	vldr	s14, [r3, #24]
 8017854:	4b58      	ldr	r3, [pc, #352]	; (80179b8 <_ZN8MainView9updateValEPh+0x378>)
 8017856:	edd3 7a00 	vldr	s15, [r3]
 801785a:	eeb4 7a67 	vcmp.f32	s14, s15
 801785e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017862:	d015      	beq.n	8017890 <_ZN8MainView9updateValEPh+0x250>
		prev_oil_press = values->oil_press;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	699b      	ldr	r3, [r3, #24]
 8017868:	4a53      	ldr	r2, [pc, #332]	; (80179b8 <_ZN8MainView9updateValEPh+0x378>)
 801786a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE,
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f603 402e 	addw	r0, r3, #3118	; 0xc2e
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	edd3 7a06 	vldr	s15, [r3, #24]
 8017878:	eeb0 0a67 	vmov.f32	s0, s15
 801787c:	4a4f      	ldr	r2, [pc, #316]	; (80179bc <_ZN8MainView9updateValEPh+0x37c>)
 801787e:	2105      	movs	r1, #5
 8017880:	f7ff fcfc 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->oil_press);
		OILPressureValue.invalidate();
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801788a:	4618      	mov	r0, r3
 801788c:	f007 fdaa 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->fuel_press != prev_fuel_press) {
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	69da      	ldr	r2, [r3, #28]
 8017894:	4b4a      	ldr	r3, [pc, #296]	; (80179c0 <_ZN8MainView9updateValEPh+0x380>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	429a      	cmp	r2, r3
 801789a:	d012      	beq.n	80178c2 <_ZN8MainView9updateValEPh+0x282>
		prev_fuel_press = values->fuel_press;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	69db      	ldr	r3, [r3, #28]
 80178a0:	4a47      	ldr	r2, [pc, #284]	; (80179c0 <_ZN8MainView9updateValEPh+0x380>)
 80178a2:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	f603 406a 	addw	r0, r3, #3178	; 0xc6a
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	69db      	ldr	r3, [r3, #28]
 80178ae:	4a3c      	ldr	r2, [pc, #240]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 80178b0:	2105      	movs	r1, #5
 80178b2:	f009 f9ff 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->fuel_press);
		FuelPValue.invalidate();
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80178bc:	4618      	mov	r0, r3
 80178be:	f007 fd91 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_tmp != prev_oil_tmp) {
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	695a      	ldr	r2, [r3, #20]
 80178c6:	4b3f      	ldr	r3, [pc, #252]	; (80179c4 <_ZN8MainView9updateValEPh+0x384>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d012      	beq.n	80178f4 <_ZN8MainView9updateValEPh+0x2b4>
		prev_oil_tmp = values->oil_tmp;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	695b      	ldr	r3, [r3, #20]
 80178d2:	4a3c      	ldr	r2, [pc, #240]	; (80179c4 <_ZN8MainView9updateValEPh+0x384>)
 80178d4:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	f603 4024 	addw	r0, r3, #3108	; 0xc24
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	695b      	ldr	r3, [r3, #20]
 80178e0:	4a2f      	ldr	r2, [pc, #188]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 80178e2:	2105      	movs	r1, #5
 80178e4:	f009 f9e6 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->oil_tmp);
		OILTempValue.invalidate();
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80178ee:	4618      	mov	r0, r3
 80178f0:	f007 fd78 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->iat != prev_iat) {
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6a1a      	ldr	r2, [r3, #32]
 80178f8:	4b33      	ldr	r3, [pc, #204]	; (80179c8 <_ZN8MainView9updateValEPh+0x388>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d012      	beq.n	8017926 <_ZN8MainView9updateValEPh+0x2e6>
		prev_iat = values->iat;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	6a1b      	ldr	r3, [r3, #32]
 8017904:	4a30      	ldr	r2, [pc, #192]	; (80179c8 <_ZN8MainView9updateValEPh+0x388>)
 8017906:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d", values->iat);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f503 6041 	add.w	r0, r3, #3088	; 0xc10
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	6a1b      	ldr	r3, [r3, #32]
 8017912:	4a23      	ldr	r2, [pc, #140]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 8017914:	2105      	movs	r1, #5
 8017916:	f009 f9cd 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8017920:	4618      	mov	r0, r3
 8017922:	f007 fd5f 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt != prev_egt) {
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801792a:	4b28      	ldr	r3, [pc, #160]	; (80179cc <_ZN8MainView9updateValEPh+0x38c>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	429a      	cmp	r2, r3
 8017930:	d012      	beq.n	8017958 <_ZN8MainView9updateValEPh+0x318>
		prev_egt = values->egt;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017936:	4a25      	ldr	r2, [pc, #148]	; (80179cc <_ZN8MainView9updateValEPh+0x38c>)
 8017938:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d", values->egt);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f603 401a 	addw	r0, r3, #3098	; 0xc1a
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017944:	4a16      	ldr	r2, [pc, #88]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 8017946:	2105      	movs	r1, #5
 8017948:	f009 f9b4 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8017952:	4618      	mov	r0, r3
 8017954:	f007 fd46 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt_2 != prev_egt_2) {
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801795c:	4b1c      	ldr	r3, [pc, #112]	; (80179d0 <_ZN8MainView9updateValEPh+0x390>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	429a      	cmp	r2, r3
 8017962:	d012      	beq.n	801798a <_ZN8MainView9updateValEPh+0x34a>
		prev_egt_2 = values->egt_2;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017968:	4a19      	ldr	r2, [pc, #100]	; (80179d0 <_ZN8MainView9updateValEPh+0x390>)
 801796a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d", values->egt_2);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f503 6046 	add.w	r0, r3, #3168	; 0xc60
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017976:	4a0a      	ldr	r2, [pc, #40]	; (80179a0 <_ZN8MainView9updateValEPh+0x360>)
 8017978:	2105      	movs	r1, #5
 801797a:	f009 f99b 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8017984:	4618      	mov	r0, r3
 8017986:	f007 fd2d 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tps != prev_tps) {
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801798e:	4b11      	ldr	r3, [pc, #68]	; (80179d4 <_ZN8MainView9updateValEPh+0x394>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	429a      	cmp	r2, r3
 8017994:	d042      	beq.n	8017a1c <_ZN8MainView9updateValEPh+0x3dc>
 8017996:	e01f      	b.n	80179d8 <_ZN8MainView9updateValEPh+0x398>
 8017998:	20008774 	.word	0x20008774
 801799c:	20000040 	.word	0x20000040
 80179a0:	0802c3d8 	.word	0x0802c3d8
 80179a4:	20000044 	.word	0x20000044
 80179a8:	20000048 	.word	0x20000048
 80179ac:	2000004c 	.word	0x2000004c
 80179b0:	0802c3dc 	.word	0x0802c3dc
 80179b4:	20000050 	.word	0x20000050
 80179b8:	20008754 	.word	0x20008754
 80179bc:	0802c3e4 	.word	0x0802c3e4
 80179c0:	20008758 	.word	0x20008758
 80179c4:	20008750 	.word	0x20008750
 80179c8:	2000875c 	.word	0x2000875c
 80179cc:	20008760 	.word	0x20008760
 80179d0:	20008764 	.word	0x20008764
 80179d4:	20008768 	.word	0x20008768
		prev_tps = values->tps;
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179dc:	4a2e      	ldr	r2, [pc, #184]	; (8017a98 <_ZN8MainView9updateValEPh+0x458>)
 80179de:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ea:	4619      	mov	r1, r3
 80179ec:	4610      	mov	r0, r2
 80179ee:	f003 f9b1 	bl	801ad54 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80179f8:	4618      	mov	r0, r3
 80179fa:	f007 fcf3 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	f603 4074 	addw	r0, r3, #3188	; 0xc74
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a08:	4a24      	ldr	r2, [pc, #144]	; (8017a9c <_ZN8MainView9updateValEPh+0x45c>)
 8017a0a:	2105      	movs	r1, #5
 8017a0c:	f009 f952 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->tps);
		TpsNumberValue.invalidate();
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8017a16:	4618      	mov	r0, r3
 8017a18:	f007 fce4 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->batt_v != prev_batt_v) {
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8017a22:	4b1f      	ldr	r3, [pc, #124]	; (8017aa0 <_ZN8MainView9updateValEPh+0x460>)
 8017a24:	edd3 7a00 	vldr	s15, [r3]
 8017a28:	eeb4 7a67 	vcmp.f32	s14, s15
 8017a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a30:	d015      	beq.n	8017a5e <_ZN8MainView9updateValEPh+0x41e>
		prev_batt_v = values->batt_v;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a36:	4a1a      	ldr	r2, [pc, #104]	; (8017aa0 <_ZN8MainView9updateValEPh+0x460>)
 8017a38:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE,
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	f603 4038 	addw	r0, r3, #3128	; 0xc38
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8017a46:	eeb0 0a67 	vmov.f32	s0, s15
 8017a4a:	4a16      	ldr	r2, [pc, #88]	; (8017aa4 <_ZN8MainView9updateValEPh+0x464>)
 8017a4c:	2105      	movs	r1, #5
 8017a4e:	f7ff fc15 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.2f", values->batt_v);
		BatteryVoltage.invalidate();
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f007 fcc3 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->vspd != prev_vspd) {
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017a62:	4b11      	ldr	r3, [pc, #68]	; (8017aa8 <_ZN8MainView9updateValEPh+0x468>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d012      	beq.n	8017a90 <_ZN8MainView9updateValEPh+0x450>
		prev_vspd = values->vspd;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a6e:	4a0e      	ldr	r2, [pc, #56]	; (8017aa8 <_ZN8MainView9updateValEPh+0x468>)
 8017a70:	6013      	str	r3, [r2, #0]
			Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE,
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f603 407e 	addw	r0, r3, #3198	; 0xc7e
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a7c:	4a07      	ldr	r2, [pc, #28]	; (8017a9c <_ZN8MainView9updateValEPh+0x45c>)
 8017a7e:	2105      	movs	r1, #5
 8017a80:	f009 f918 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
					"%d", values->vspd);
			KMHValue.invalidate();
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f007 fcaa 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Commented because of strange behavior of EMU error codes. Need USB to CAN to trace the problem.
//	if (has_error && !presenter->getManualErrorChangeScreen()) {
//		static_cast<FrontendApplication*>(Application::getInstance())->gotoSecondScreenScreenSlideTransitionEast();
//	}
}
 8017a90:	bf00      	nop
 8017a92:	3714      	adds	r7, #20
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd90      	pop	{r4, r7, pc}
 8017a98:	20008768 	.word	0x20008768
 8017a9c:	0802c3d8 	.word	0x0802c3d8
 8017aa0:	2000876c 	.word	0x2000876c
 8017aa4:	0802c3dc 	.word	0x0802c3dc
 8017aa8:	20008770 	.word	0x20008770

08017aac <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8017aba:	2200      	movs	r2, #0
 8017abc:	215c      	movs	r1, #92	; 0x5c
 8017abe:	2001      	movs	r0, #1
 8017ac0:	f7f5 fd6d 	bl	800d59e <xQueueGenericCreate>
 8017ac4:	4602      	mov	r2, r0
 8017ac6:	4b07      	ldr	r3, [pc, #28]	; (8017ae4 <_ZN5ModelC1Ev+0x38>)
 8017ac8:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8017aca:	2200      	movs	r2, #0
 8017acc:	212c      	movs	r1, #44	; 0x2c
 8017ace:	2001      	movs	r0, #1
 8017ad0:	f7f5 fd65 	bl	800d59e <xQueueGenericCreate>
 8017ad4:	4602      	mov	r2, r0
 8017ad6:	4b04      	ldr	r3, [pc, #16]	; (8017ae8 <_ZN5ModelC1Ev+0x3c>)
 8017ad8:	601a      	str	r2, [r3, #0]
}
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	4618      	mov	r0, r3
 8017ade:	3708      	adds	r7, #8
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	20008808 	.word	0x20008808
 8017ae8:	2000880c 	.word	0x2000880c

08017aec <_ZN5Model4tickEv>:

void Model::tick()
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8017af4:	4b1a      	ldr	r3, [pc, #104]	; (8017b60 <_ZN5Model4tickEv+0x74>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2200      	movs	r2, #0
 8017afa:	491a      	ldr	r1, [pc, #104]	; (8017b64 <_ZN5Model4tickEv+0x78>)
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f5 ffdf 	bl	800dac0 <xQueueReceive>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b01      	cmp	r3, #1
 8017b06:	bf0c      	ite	eq
 8017b08:	2301      	moveq	r3, #1
 8017b0a:	2300      	movne	r3, #0
 8017b0c:	b2db      	uxtb	r3, r3
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d009      	beq.n	8017b26 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	3308      	adds	r3, #8
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	4910      	ldr	r1, [pc, #64]	; (8017b64 <_ZN5Model4tickEv+0x78>)
 8017b22:	4610      	mov	r0, r2
 8017b24:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8017b26:	4b10      	ldr	r3, [pc, #64]	; (8017b68 <_ZN5Model4tickEv+0x7c>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	490f      	ldr	r1, [pc, #60]	; (8017b6c <_ZN5Model4tickEv+0x80>)
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7f5 ffc6 	bl	800dac0 <xQueueReceive>
 8017b34:	4603      	mov	r3, r0
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	bf0c      	ite	eq
 8017b3a:	2301      	moveq	r3, #1
 8017b3c:	2300      	movne	r3, #0
 8017b3e:	b2db      	uxtb	r3, r3
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d009      	beq.n	8017b58 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681a      	ldr	r2, [r3, #0]
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	330c      	adds	r3, #12
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	4906      	ldr	r1, [pc, #24]	; (8017b6c <_ZN5Model4tickEv+0x80>)
 8017b54:	4610      	mov	r0, r2
 8017b56:	4798      	blx	r3
	}
}
 8017b58:	bf00      	nop
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	20008808 	.word	0x20008808
 8017b64:	20008778 	.word	0x20008778
 8017b68:	2000880c 	.word	0x2000880c
 8017b6c:	200087d4 	.word	0x200087d4

08017b70 <_ZN5Model22saveCurrentScreenIndexEi>:

void Model::saveCurrentScreenIndex(int cScreen)
{
 8017b70:	b480      	push	{r7}
 8017b72:	b083      	sub	sp, #12
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
 8017b78:	6039      	str	r1, [r7, #0]
	currentScreenIndex = cScreen;
 8017b7a:	4a04      	ldr	r2, [pc, #16]	; (8017b8c <_ZN5Model22saveCurrentScreenIndexEi+0x1c>)
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	6013      	str	r3, [r2, #0]
}
 8017b80:	bf00      	nop
 8017b82:	370c      	adds	r7, #12
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr
 8017b8c:	20008800 	.word	0x20008800

08017b90 <_ZN5Model26setManualErrorChangeScreenEv>:
int Model::getCurrentScreenIndex()
{
	return currentScreenIndex;
}

void Model::setManualErrorChangeScreen() {
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
	manualErrorScreenChange = true;
 8017b98:	4b04      	ldr	r3, [pc, #16]	; (8017bac <_ZN5Model26setManualErrorChangeScreenEv+0x1c>)
 8017b9a:	2201      	movs	r2, #1
 8017b9c:	701a      	strb	r2, [r3, #0]
}
 8017b9e:	bf00      	nop
 8017ba0:	370c      	adds	r7, #12
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba8:	4770      	bx	lr
 8017baa:	bf00      	nop
 8017bac:	20008804 	.word	0x20008804

08017bb0 <_ZN21SecondScreenPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~SecondScreenPresenter() {
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	4a09      	ldr	r2, [pc, #36]	; (8017be0 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	601a      	str	r2, [r3, #0]
 8017bbe:	4a09      	ldr	r2, [pc, #36]	; (8017be4 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	605a      	str	r2, [r3, #4]
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	3304      	adds	r3, #4
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7ff fa8f 	bl	80170ec <_ZN13ModelListenerD1Ev>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7ff fa47 	bl	8017064 <_ZN8touchgfx9PresenterD1Ev>
	}
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	0802d310 	.word	0x0802d310
 8017be4:	0802d330 	.word	0x0802d330

08017be8 <_ZThn4_N21SecondScreenPresenterD1Ev>:
	virtual ~SecondScreenPresenter() {
 8017be8:	f1a0 0004 	sub.w	r0, r0, #4
 8017bec:	e7e0      	b.n	8017bb0 <_ZN21SecondScreenPresenterD1Ev>
 8017bee:	bf00      	nop

08017bf0 <_ZN21SecondScreenPresenterD0Ev>:
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
	}
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f7ff ffd9 	bl	8017bb0 <_ZN21SecondScreenPresenterD1Ev>
 8017bfe:	2110      	movs	r1, #16
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f012 ffc4 	bl	802ab8e <_ZdlPvj>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3708      	adds	r7, #8
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <_ZThn4_N21SecondScreenPresenterD0Ev>:
	virtual ~SecondScreenPresenter() {
 8017c10:	f1a0 0004 	sub.w	r0, r0, #4
 8017c14:	e7ec      	b.n	8017bf0 <_ZN21SecondScreenPresenterD0Ev>
	...

08017c18 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	6039      	str	r1, [r7, #0]
    : view(v)
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7ff fa3d 	bl	80170a4 <_ZN8touchgfx9PresenterC1Ev>
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7ff fa48 	bl	80170c4 <_ZN13ModelListenerC1Ev>
 8017c34:	4a06      	ldr	r2, [pc, #24]	; (8017c50 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	601a      	str	r2, [r3, #0]
 8017c3a:	4a06      	ldr	r2, [pc, #24]	; (8017c54 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	605a      	str	r2, [r3, #4]
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	683a      	ldr	r2, [r7, #0]
 8017c44:	60da      	str	r2, [r3, #12]
{

}
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	0802d310 	.word	0x0802d310
 8017c54:	0802d330 	.word	0x0802d330

08017c58 <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
	model -> saveCurrentScreenIndex(2);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	689b      	ldr	r3, [r3, #8]
 8017c64:	2102      	movs	r1, #2
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7ff ff82 	bl	8017b70 <_ZN5Model22saveCurrentScreenIndexEi>
}
 8017c6c:	bf00      	nop
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 8017c74:	b480      	push	{r7}
 8017c76:	b083      	sub	sp, #12
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]

}
 8017c7c:	bf00      	nop
 8017c7e:	370c      	adds	r7, #12
 8017c80:	46bd      	mov	sp, r7
 8017c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c86:	4770      	bx	lr

08017c88 <_ZN21SecondScreenPresenter11setNewValueEPh>:

void SecondScreenPresenter::setNewValue(uint8_t* newValue)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
 8017c90:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	68db      	ldr	r3, [r3, #12]
 8017c96:	6839      	ldr	r1, [r7, #0]
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f000 f94d 	bl	8017f38 <_ZN16SecondScreenView9updateValEPh>
}
 8017c9e:	bf00      	nop
 8017ca0:	3708      	adds	r7, #8
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}

08017ca6 <_ZThn4_N21SecondScreenPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 8017ca6:	f1a0 0004 	sub.w	r0, r0, #4
 8017caa:	f7ff bfed 	b.w	8017c88 <_ZN21SecondScreenPresenter11setNewValueEPh>

08017cae <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>:

void SecondScreenPresenter::updateDisplaySettings(uint8_t* settings)
{
 8017cae:	b580      	push	{r7, lr}
 8017cb0:	b082      	sub	sp, #8
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	6078      	str	r0, [r7, #4]
 8017cb6:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	68db      	ldr	r3, [r3, #12]
 8017cbc:	6839      	ldr	r1, [r7, #0]
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f000 f918 	bl	8017ef4 <_ZN16SecondScreenView14updateSettingsEPh>
}
 8017cc4:	bf00      	nop
 8017cc6:	3708      	adds	r7, #8
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <_ZThn4_N21SecondScreenPresenter21updateDisplaySettingsEPh>:

	void updateDisplaySettings(uint8_t *settings);
 8017ccc:	f1a0 0004 	sub.w	r0, r0, #4
 8017cd0:	f7ff bfed 	b.w	8017cae <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>

08017cd4 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>:

	void setManualErrorChangeScreen() {
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
		model->setManualErrorChangeScreen();
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	689b      	ldr	r3, [r3, #8]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7ff ff55 	bl	8017b90 <_ZN5Model26setManualErrorChangeScreenEv>
	}
 8017ce6:	bf00      	nop
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 8017cee:	b480      	push	{r7}
 8017cf0:	b083      	sub	sp, #12
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	881b      	ldrh	r3, [r3, #0]
 8017cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	bf14      	ite	ne
 8017d02:	2301      	movne	r3, #1
 8017d04:	2300      	moveq	r3, #0
 8017d06:	b2db      	uxtb	r3, r3
    }
 8017d08:	4618      	mov	r0, r3
 8017d0a:	370c      	adds	r7, #12
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d12:	4770      	bx	lr

08017d14 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 8017d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d16:	b085      	sub	sp, #20
 8017d18:	af02      	add	r7, sp, #8
 8017d1a:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard, 0) : 0;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	3326      	adds	r3, #38	; 0x26
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7ff ffe4 	bl	8017cee <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8017d26:	4603      	mov	r3, r0
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d020      	beq.n	8017d6e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5a>
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	3326      	adds	r3, #38	; 0x26
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7f8 fc45 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 8017d36:	4605      	mov	r5, r0
 8017d38:	682b      	ldr	r3, [r5, #0]
 8017d3a:	331c      	adds	r3, #28
 8017d3c:	681c      	ldr	r4, [r3, #0]
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	3326      	adds	r3, #38	; 0x26
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7f8 fc58 	bl	80105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	461e      	mov	r6, r3
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	3326      	adds	r3, #38	; 0x26
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7fb f807 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 8017d56:	4601      	mov	r1, r0
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	9300      	str	r3, [sp, #0]
 8017d60:	4613      	mov	r3, r2
 8017d62:	460a      	mov	r2, r1
 8017d64:	4631      	mov	r1, r6
 8017d66:	4628      	mov	r0, r5
 8017d68:	47a0      	blx	r4
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	e000      	b.n	8017d70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5c>
 8017d6e:	2300      	movs	r3, #0
    }
 8017d70:	4618      	mov	r0, r3
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d78 <_ZN16SecondScreenViewD1Ev>:
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

class SecondScreenView: public SecondScreenViewBase {
public:
	SecondScreenView();
	virtual ~SecondScreenView() {
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
 8017d80:	4a05      	ldr	r2, [pc, #20]	; (8017d98 <_ZN16SecondScreenViewD1Ev+0x20>)
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	601a      	str	r2, [r3, #0]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7fd ffa1 	bl	8015cd0 <_ZN20SecondScreenViewBaseD1Ev>
	}
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	4618      	mov	r0, r3
 8017d92:	3708      	adds	r7, #8
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}
 8017d98:	0802d348 	.word	0x0802d348

08017d9c <_ZN16SecondScreenViewD0Ev>:
	virtual ~SecondScreenView() {
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
	}
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f7ff ffe7 	bl	8017d78 <_ZN16SecondScreenViewD1Ev>
 8017daa:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f012 feed 	bl	802ab8e <_ZdlPvj>
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	4618      	mov	r0, r3
 8017db8:	3708      	adds	r7, #8
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
	...

08017dc0 <_ZN16SecondScreenViewC1Ev>:
static TEXTS *error;
static unsigned cutrrentErrorIndex = 0;
static int check_eng_code = 0;
static int eng_prot_code = 0;

SecondScreenView::SecondScreenView() {
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fe f83c 	bl	8015e48 <_ZN20SecondScreenViewBaseC1Ev>
 8017dd0:	4a03      	ldr	r2, [pc, #12]	; (8017de0 <_ZN16SecondScreenViewC1Ev+0x20>)
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	601a      	str	r2, [r3, #0]

}
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	4618      	mov	r0, r3
 8017dda:	3708      	adds	r7, #8
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}
 8017de0:	0802d348 	.word	0x0802d348

08017de4 <_ZL13getBlackColorv>:

static colortype getBlackColor() {
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8017dea:	2200      	movs	r2, #0
 8017dec:	2100      	movs	r1, #0
 8017dee:	2000      	movs	r0, #0
 8017df0:	f7fb fcb8 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017df4:	4603      	mov	r3, r0
 8017df6:	607b      	str	r3, [r7, #4]
	return black_color;
 8017df8:	687b      	ldr	r3, [r7, #4]
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}

08017e02 <_ZL11getRedColorv>:

static colortype getRedColor() {
 8017e02:	b580      	push	{r7, lr}
 8017e04:	b082      	sub	sp, #8
 8017e06:	af00      	add	r7, sp, #0
	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8017e08:	2200      	movs	r2, #0
 8017e0a:	2100      	movs	r1, #0
 8017e0c:	20ff      	movs	r0, #255	; 0xff
 8017e0e:	f7fb fca9 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017e12:	4603      	mov	r3, r0
 8017e14:	607b      	str	r3, [r7, #4]
	return red_color;
 8017e16:	687b      	ldr	r3, [r7, #4]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3708      	adds	r7, #8
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <_ZL17getColorForErrorsv>:

static colortype getColorForErrors() {
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b084      	sub	sp, #16
 8017e24:	af00      	add	r7, sp, #0

	color_index++;
 8017e26:	4b24      	ldr	r3, [pc, #144]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	4a22      	ldr	r2, [pc, #136]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e2e:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 8017e30:	4b21      	ldr	r3, [pc, #132]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	2b02      	cmp	r3, #2
 8017e36:	dd0f      	ble.n	8017e58 <_ZL17getColorForErrorsv+0x38>
		color_index = 0;
 8017e38:	4b1f      	ldr	r3, [pc, #124]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	601a      	str	r2, [r3, #0]
		error_screen_blinks++;
 8017e3e:	4b1f      	ldr	r3, [pc, #124]	; (8017ebc <_ZL17getColorForErrorsv+0x9c>)
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	3301      	adds	r3, #1
 8017e44:	4a1d      	ldr	r2, [pc, #116]	; (8017ebc <_ZL17getColorForErrorsv+0x9c>)
 8017e46:	6013      	str	r3, [r2, #0]
		if (error_screen_blinks > 1000000) {
 8017e48:	4b1c      	ldr	r3, [pc, #112]	; (8017ebc <_ZL17getColorForErrorsv+0x9c>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	4a1c      	ldr	r2, [pc, #112]	; (8017ec0 <_ZL17getColorForErrorsv+0xa0>)
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	dd02      	ble.n	8017e58 <_ZL17getColorForErrorsv+0x38>
			error_screen_blinks = 0;
 8017e52:	4b1a      	ldr	r3, [pc, #104]	; (8017ebc <_ZL17getColorForErrorsv+0x9c>)
 8017e54:	2200      	movs	r2, #0
 8017e56:	601a      	str	r2, [r3, #0]
		}
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8017e58:	2200      	movs	r2, #0
 8017e5a:	2100      	movs	r1, #0
 8017e5c:	20ff      	movs	r0, #255	; 0xff
 8017e5e:	f7fb fc81 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017e62:	4603      	mov	r3, r0
 8017e64:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8017e66:	2200      	movs	r2, #0
 8017e68:	2100      	movs	r1, #0
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	f7fb fc7a 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017e70:	4603      	mov	r3, r0
 8017e72:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 8017e74:	22ff      	movs	r2, #255	; 0xff
 8017e76:	21ff      	movs	r1, #255	; 0xff
 8017e78:	20ff      	movs	r0, #255	; 0xff
 8017e7a:	f7fb fc73 	bl	8013764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8017e82:	463b      	mov	r3, r7
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7fa fc40 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8017e8a:	4b0b      	ldr	r3, [pc, #44]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d101      	bne.n	8017e96 <_ZL17getColorForErrorsv+0x76>
		color_to_set = red_color;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 8017e96:	4b08      	ldr	r3, [pc, #32]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d101      	bne.n	8017ea2 <_ZL17getColorForErrorsv+0x82>
		color_to_set = black_color;
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8017ea2:	4b05      	ldr	r3, [pc, #20]	; (8017eb8 <_ZL17getColorForErrorsv+0x98>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d101      	bne.n	8017eae <_ZL17getColorForErrorsv+0x8e>
		color_to_set = white_color;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8017eae:	683b      	ldr	r3, [r7, #0]
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3710      	adds	r7, #16
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	20008820 	.word	0x20008820
 8017ebc:	20008824 	.word	0x20008824
 8017ec0:	000f4240 	.word	0x000f4240

08017ec4 <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen() {
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b082      	sub	sp, #8
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::setupScreen();
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7fe fce4 	bl	801689c <_ZN20SecondScreenViewBase11setupScreenEv>
}
 8017ed4:	bf00      	nop
 8017ed6:	3708      	adds	r7, #8
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}

08017edc <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen() {
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::tearDownScreen();
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7fa fe54 	bl	8012b94 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8017eec:	bf00      	nop
 8017eee:	3708      	adds	r7, #8
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	bd80      	pop	{r7, pc}

08017ef4 <_ZN16SecondScreenView14updateSettingsEPh>:

void SecondScreenView::updateSettings(uint8_t *settings) {
 8017ef4:	b480      	push	{r7}
 8017ef6:	b083      	sub	sp, #12
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
 8017efc:	6039      	str	r1, [r7, #0]
}
 8017efe:	bf00      	nop
 8017f00:	370c      	adds	r7, #12
 8017f02:	46bd      	mov	sp, r7
 8017f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f08:	4770      	bx	lr

08017f0a <_ZL11isKthBitSetii>:

static bool isKthBitSet(int n, int k) {
 8017f0a:	b480      	push	{r7}
 8017f0c:	b083      	sub	sp, #12
 8017f0e:	af00      	add	r7, sp, #0
 8017f10:	6078      	str	r0, [r7, #4]
 8017f12:	6039      	str	r1, [r7, #0]
	if (n & (1 << (k - 1))) {
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	3b01      	subs	r3, #1
 8017f18:	687a      	ldr	r2, [r7, #4]
 8017f1a:	fa42 f303 	asr.w	r3, r2, r3
 8017f1e:	f003 0301 	and.w	r3, r3, #1
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d001      	beq.n	8017f2a <_ZL11isKthBitSetii+0x20>
		return true;
 8017f26:	2301      	movs	r3, #1
 8017f28:	e000      	b.n	8017f2c <_ZL11isKthBitSetii+0x22>
	} else {
		return false;
 8017f2a:	2300      	movs	r3, #0
	}
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	370c      	adds	r7, #12
 8017f30:	46bd      	mov	sp, r7
 8017f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f36:	4770      	bx	lr

08017f38 <_ZN16SecondScreenView9updateValEPh>:
		break;
	}
	return a;
}

void SecondScreenView::updateVal(uint8_t *newValue) {
 8017f38:	b590      	push	{r4, r7, lr}
 8017f3a:	b097      	sub	sp, #92	; 0x5c
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]

	display_values *values = (display_values*) newValue;
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	657b      	str	r3, [r7, #84]	; 0x54

	if (values->ing_ang != prev_ign_ang) {
 8017f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f48:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8017f4c:	4ba5      	ldr	r3, [pc, #660]	; (80181e4 <_ZN16SecondScreenView9updateValEPh+0x2ac>)
 8017f4e:	edd3 7a00 	vldr	s15, [r3]
 8017f52:	eeb4 7a67 	vcmp.f32	s14, s15
 8017f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5a:	d014      	beq.n	8017f86 <_ZN16SecondScreenView9updateValEPh+0x4e>
		prev_ign_ang = values->ing_ang;
 8017f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f60:	4aa0      	ldr	r2, [pc, #640]	; (80181e4 <_ZN16SecondScreenView9updateValEPh+0x2ac>)
 8017f62:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(IngAngValueBuffer, INGANGVALUE_SIZE, "%.1f",
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f203 4014 	addw	r0, r3, #1044	; 0x414
 8017f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f6c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8017f70:	eeb0 0a67 	vmov.f32	s0, s15
 8017f74:	4a9c      	ldr	r2, [pc, #624]	; (80181e8 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017f76:	2105      	movs	r1, #5
 8017f78:	f7ff f980 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->ing_ang);
		IngAngValue.invalidate();
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	33e8      	adds	r3, #232	; 0xe8
 8017f80:	4618      	mov	r0, r3
 8017f82:	f007 fa2f 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->ve != prev_ve) {
 8017f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f88:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8017f8c:	4b97      	ldr	r3, [pc, #604]	; (80181ec <_ZN16SecondScreenView9updateValEPh+0x2b4>)
 8017f8e:	edd3 7a00 	vldr	s15, [r3]
 8017f92:	eeb4 7a67 	vcmp.f32	s14, s15
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	d015      	beq.n	8017fc8 <_ZN16SecondScreenView9updateValEPh+0x90>
		prev_ve = values->ve;
 8017f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa0:	4a92      	ldr	r2, [pc, #584]	; (80181ec <_ZN16SecondScreenView9updateValEPh+0x2b4>)
 8017fa2:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(VeValueBuffer, VEVALUE_SIZE, "%.1f", values->ve);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f203 4064 	addw	r0, r3, #1124	; 0x464
 8017faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8017fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8017fb4:	4a8c      	ldr	r2, [pc, #560]	; (80181e8 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017fb6:	2105      	movs	r1, #5
 8017fb8:	f7ff f960 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		VeValue.invalidate();
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f007 fa0e 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->boost_dc != prev_boost_dc) {
 8017fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8017fce:	4b88      	ldr	r3, [pc, #544]	; (80181f0 <_ZN16SecondScreenView9updateValEPh+0x2b8>)
 8017fd0:	edd3 7a00 	vldr	s15, [r3]
 8017fd4:	eeb4 7a67 	vcmp.f32	s14, s15
 8017fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fdc:	d015      	beq.n	801800a <_ZN16SecondScreenView9updateValEPh+0xd2>
		prev_boost_dc = values->boost_dc;
 8017fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fe2:	4a83      	ldr	r2, [pc, #524]	; (80181f0 <_ZN16SecondScreenView9updateValEPh+0x2b8>)
 8017fe4:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BoostDcValueBuffer, BOOSTDCVALUE_SIZE, "%.1f",
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f203 406e 	addw	r0, r3, #1134	; 0x46e
 8017fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fee:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8017ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8017ff6:	4a7c      	ldr	r2, [pc, #496]	; (80181e8 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017ff8:	2105      	movs	r1, #5
 8017ffa:	f7ff f93f 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->boost_dc);
		BoostDcValue.invalidate();
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8018004:	4618      	mov	r0, r3
 8018006:	f007 f9ed 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->boost_trgt != prev_boost_trgt) {
 801800a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801800c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801800e:	4b79      	ldr	r3, [pc, #484]	; (80181f4 <_ZN16SecondScreenView9updateValEPh+0x2bc>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	429a      	cmp	r2, r3
 8018014:	d012      	beq.n	801803c <_ZN16SecondScreenView9updateValEPh+0x104>
		prev_boost_trgt = values->boost_trgt;
 8018016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801801a:	4a76      	ldr	r2, [pc, #472]	; (80181f4 <_ZN16SecondScreenView9updateValEPh+0x2bc>)
 801801c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(BoostTrgtValueBuffer, BOOSTTRGTVALUE_SIZE, "%d",
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f503 608f 	add.w	r0, r3, #1144	; 0x478
 8018024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018028:	4a73      	ldr	r2, [pc, #460]	; (80181f8 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 801802a:	2105      	movs	r1, #5
 801802c:	f008 fe42 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->boost_trgt);
		BoostTrgtValue.invalidate();
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8018036:	4618      	mov	r0, r3
 8018038:	f007 f9d4 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->injector_dc != prev_injector_dc) {
 801803c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801803e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8018042:	4b6e      	ldr	r3, [pc, #440]	; (80181fc <_ZN16SecondScreenView9updateValEPh+0x2c4>)
 8018044:	edd3 7a00 	vldr	s15, [r3]
 8018048:	eeb4 7a67 	vcmp.f32	s14, s15
 801804c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018050:	d015      	beq.n	801807e <_ZN16SecondScreenView9updateValEPh+0x146>
		prev_injector_dc = values->injector_dc;
 8018052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018056:	4a69      	ldr	r2, [pc, #420]	; (80181fc <_ZN16SecondScreenView9updateValEPh+0x2c4>)
 8018058:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(InjctorDcValueBuffer, INJCTORDCVALUE_SIZE,
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f203 4082 	addw	r0, r3, #1154	; 0x482
 8018060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018062:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8018066:	eeb0 0a67 	vmov.f32	s0, s15
 801806a:	4a5f      	ldr	r2, [pc, #380]	; (80181e8 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 801806c:	2105      	movs	r1, #5
 801806e:	f7ff f905 	bl	801727c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->injector_dc);
		InjctorDcValue.invalidate();
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8018078:	4618      	mov	r0, r3
 801807a:	f007 f9b3 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
	bool has_error = ((int) values->emu_errors) > 0;
 801807e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018082:	2b00      	cmp	r3, #0
 8018084:	bfcc      	ite	gt
 8018086:	2301      	movgt	r3, #1
 8018088:	2300      	movle	r3, #0
 801808a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	bool has_protection_error = ((int) values->emu_protection) > 0;
 801808e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018092:	2b00      	cmp	r3, #0
 8018094:	bfcc      	ite	gt
 8018096:	2301      	movgt	r3, #1
 8018098:	2300      	movle	r3, #0
 801809a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	bool has_check_eng_code = ((int) values->check_eng_code) > 0;
 801809e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80180a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	bfcc      	ite	gt
 80180a6:	2301      	movgt	r3, #1
 80180a8:	2300      	movle	r3, #0
 80180aa:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	bool has_eng_prot_code = ((int) values->eng_protection_code) > 0;
 80180ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80180b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	bfcc      	ite	gt
 80180b6:	2301      	movgt	r3, #1
 80180b8:	2300      	movle	r3, #0
 80180ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	if (has_check_eng_code) {
 80180be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d03a      	beq.n	801813c <_ZN16SecondScreenView9updateValEPh+0x204>
		if (error_screen_blinks < 100) {
 80180c6:	4b4e      	ldr	r3, [pc, #312]	; (8018200 <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2b63      	cmp	r3, #99	; 0x63
 80180cc:	dc0a      	bgt.n	80180e4 <_ZN16SecondScreenView9updateValEPh+0x1ac>
			backgroundBox.setColor(getColorForErrors());
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80180d4:	f7ff fea4 	bl	8017e20 <_ZL17getColorForErrorsv>
 80180d8:	4603      	mov	r3, r0
 80180da:	4619      	mov	r1, r3
 80180dc:	4620      	mov	r0, r4
 80180de:	f7fa fe23 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 80180e2:	e009      	b.n	80180f8 <_ZN16SecondScreenView9updateValEPh+0x1c0>
		} else {
			backgroundBox.setColor(getRedColor());
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80180ea:	f7ff fe8a 	bl	8017e02 <_ZL11getRedColorv>
 80180ee:	4603      	mov	r3, r0
 80180f0:	4619      	mov	r1, r3
 80180f2:	4620      	mov	r0, r4
 80180f4:	f7fa fe18 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	3340      	adds	r3, #64	; 0x40
 80180fc:	4618      	mov	r0, r3
 80180fe:	f007 f971 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		CheckEngCodeValue.setVisible(true);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018108:	2101      	movs	r1, #1
 801810a:	4618      	mov	r0, r3
 801810c:	f7fa fc4b 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%d",
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801811a:	4a37      	ldr	r2, [pc, #220]	; (80181f8 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 801811c:	2123      	movs	r1, #35	; 0x23
 801811e:	f008 fdc9 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->check_eng_code);
		CheckEngCodeValue.invalidate();
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018128:	4618      	mov	r0, r3
 801812a:	f007 f95b 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		check_eng_code = values->check_eng_code;
 801812e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018132:	4a34      	ldr	r2, [pc, #208]	; (8018204 <_ZN16SecondScreenView9updateValEPh+0x2cc>)
 8018134:	6013      	str	r3, [r2, #0]
		prev_error = true;
 8018136:	4b34      	ldr	r3, [pc, #208]	; (8018208 <_ZN16SecondScreenView9updateValEPh+0x2d0>)
 8018138:	2201      	movs	r2, #1
 801813a:	701a      	strb	r2, [r3, #0]
	}
	if (has_eng_prot_code) {
 801813c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8018140:	2b00      	cmp	r3, #0
 8018142:	d03a      	beq.n	80181ba <_ZN16SecondScreenView9updateValEPh+0x282>
		if (error_screen_blinks < 100) {
 8018144:	4b2e      	ldr	r3, [pc, #184]	; (8018200 <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b63      	cmp	r3, #99	; 0x63
 801814a:	dc0a      	bgt.n	8018162 <_ZN16SecondScreenView9updateValEPh+0x22a>
			backgroundBox.setColor(getColorForErrors());
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018152:	f7ff fe65 	bl	8017e20 <_ZL17getColorForErrorsv>
 8018156:	4603      	mov	r3, r0
 8018158:	4619      	mov	r1, r3
 801815a:	4620      	mov	r0, r4
 801815c:	f7fa fde4 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 8018160:	e009      	b.n	8018176 <_ZN16SecondScreenView9updateValEPh+0x23e>
		} else {
			backgroundBox.setColor(getRedColor());
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018168:	f7ff fe4b 	bl	8017e02 <_ZL11getRedColorv>
 801816c:	4603      	mov	r3, r0
 801816e:	4619      	mov	r1, r3
 8018170:	4620      	mov	r0, r4
 8018172:	f7fa fdd9 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	3340      	adds	r3, #64	; 0x40
 801817a:	4618      	mov	r0, r3
 801817c:	f007 f932 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		EngProtCodeValue.setVisible(true);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8018186:	2101      	movs	r1, #1
 8018188:	4618      	mov	r0, r3
 801818a:	f7fa fc0c 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%d",
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f203 40d2 	addw	r0, r3, #1234	; 0x4d2
 8018194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018198:	4a17      	ldr	r2, [pc, #92]	; (80181f8 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 801819a:	2123      	movs	r1, #35	; 0x23
 801819c:	f008 fd8a 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->eng_protection_code);
		EngProtCodeValue.invalidate();
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80181a6:	4618      	mov	r0, r3
 80181a8:	f007 f91c 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		eng_prot_code = values->eng_protection_code;
 80181ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181b0:	4a16      	ldr	r2, [pc, #88]	; (801820c <_ZN16SecondScreenView9updateValEPh+0x2d4>)
 80181b2:	6013      	str	r3, [r2, #0]
		prev_error = true;
 80181b4:	4b14      	ldr	r3, [pc, #80]	; (8018208 <_ZN16SecondScreenView9updateValEPh+0x2d0>)
 80181b6:	2201      	movs	r2, #1
 80181b8:	701a      	strb	r2, [r3, #0]
	}
	if (has_error) {
 80181ba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80181be:	2b00      	cmp	r3, #0
 80181c0:	f000 816c 	beq.w	801849c <_ZN16SecondScreenView9updateValEPh+0x564>
		if (error_screen_blinks < 100) {
 80181c4:	4b0e      	ldr	r3, [pc, #56]	; (8018200 <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	2b63      	cmp	r3, #99	; 0x63
 80181ca:	dc21      	bgt.n	8018210 <_ZN16SecondScreenView9updateValEPh+0x2d8>
			backgroundBox.setColor(getColorForErrors());
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80181d2:	f7ff fe25 	bl	8017e20 <_ZL17getColorForErrorsv>
 80181d6:	4603      	mov	r3, r0
 80181d8:	4619      	mov	r1, r3
 80181da:	4620      	mov	r0, r4
 80181dc:	f7fa fda4 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 80181e0:	e020      	b.n	8018224 <_ZN16SecondScreenView9updateValEPh+0x2ec>
 80181e2:	bf00      	nop
 80181e4:	20000054 	.word	0x20000054
 80181e8:	0802c54c 	.word	0x0802c54c
 80181ec:	20008810 	.word	0x20008810
 80181f0:	20008814 	.word	0x20008814
 80181f4:	20008818 	.word	0x20008818
 80181f8:	0802c554 	.word	0x0802c554
 80181fc:	2000881c 	.word	0x2000881c
 8018200:	20008824 	.word	0x20008824
 8018204:	20008830 	.word	0x20008830
 8018208:	20000058 	.word	0x20000058
 801820c:	20008834 	.word	0x20008834
		} else {
			backgroundBox.setColor(getRedColor());
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018216:	f7ff fdf4 	bl	8017e02 <_ZL11getRedColorv>
 801821a:	4603      	mov	r3, r0
 801821c:	4619      	mov	r1, r3
 801821e:	4620      	mov	r0, r4
 8018220:	f7fa fd82 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	3340      	adds	r3, #64	; 0x40
 8018228:	4618      	mov	r0, r3
 801822a:	f007 f8db 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>

		if (isKthBitSet((int) values->emu_errors, (int) 1)) {
 801822e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018232:	2101      	movs	r1, #1
 8018234:	4618      	mov	r0, r3
 8018236:	f7ff fe68 	bl	8017f0a <_ZL11isKthBitSetii>
 801823a:	4603      	mov	r3, r0
 801823c:	2b00      	cmp	r3, #0
 801823e:	d010      	beq.n	8018262 <_ZN16SecondScreenView9updateValEPh+0x32a>
			ErrorMessage.setTypedText(TypedText(T_COOLANT_SENSOR_FAILURE));
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018246:	f107 0308 	add.w	r3, r7, #8
 801824a:	213b      	movs	r1, #59	; 0x3b
 801824c:	4618      	mov	r0, r3
 801824e:	f7fa fd79 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018252:	8939      	ldrh	r1, [r7, #8]
 8018254:	4620      	mov	r0, r4
 8018256:	f005 f82f 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 801825a:	4b9a      	ldr	r3, [pc, #616]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	223b      	movs	r2, #59	; 0x3b
 8018260:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 2)) {
 8018262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018266:	2102      	movs	r1, #2
 8018268:	4618      	mov	r0, r3
 801826a:	f7ff fe4e 	bl	8017f0a <_ZL11isKthBitSetii>
 801826e:	4603      	mov	r3, r0
 8018270:	2b00      	cmp	r3, #0
 8018272:	d010      	beq.n	8018296 <_ZN16SecondScreenView9updateValEPh+0x35e>
			ErrorMessage.setTypedText(TypedText(T_IAT_SENSOR_FAILURE));
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801827a:	f107 030c 	add.w	r3, r7, #12
 801827e:	213e      	movs	r1, #62	; 0x3e
 8018280:	4618      	mov	r0, r3
 8018282:	f7fa fd5f 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018286:	89b9      	ldrh	r1, [r7, #12]
 8018288:	4620      	mov	r0, r4
 801828a:	f005 f815 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_IAT_SENSOR_FAILURE;
 801828e:	4b8d      	ldr	r3, [pc, #564]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	223e      	movs	r2, #62	; 0x3e
 8018294:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 3)) {
 8018296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801829a:	2103      	movs	r1, #3
 801829c:	4618      	mov	r0, r3
 801829e:	f7ff fe34 	bl	8017f0a <_ZL11isKthBitSetii>
 80182a2:	4603      	mov	r3, r0
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d010      	beq.n	80182ca <_ZN16SecondScreenView9updateValEPh+0x392>
			ErrorMessage.setTypedText(TypedText(T_MAP_SENSOR_FAILURE));
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80182ae:	f107 0310 	add.w	r3, r7, #16
 80182b2:	213f      	movs	r1, #63	; 0x3f
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7fa fd45 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80182ba:	8a39      	ldrh	r1, [r7, #16]
 80182bc:	4620      	mov	r0, r4
 80182be:	f004 fffb 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_MAP_SENSOR_FAILURE;
 80182c2:	4b80      	ldr	r3, [pc, #512]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	223f      	movs	r2, #63	; 0x3f
 80182c8:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 4)) {
 80182ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ce:	2104      	movs	r1, #4
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7ff fe1a 	bl	8017f0a <_ZL11isKthBitSetii>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d010      	beq.n	80182fe <_ZN16SecondScreenView9updateValEPh+0x3c6>
			ErrorMessage.setTypedText(TypedText(T_O2_SENSOR_FAILED));
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80182e2:	f107 0314 	add.w	r3, r7, #20
 80182e6:	2140      	movs	r1, #64	; 0x40
 80182e8:	4618      	mov	r0, r3
 80182ea:	f7fa fd2b 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80182ee:	8ab9      	ldrh	r1, [r7, #20]
 80182f0:	4620      	mov	r0, r4
 80182f2:	f004 ffe1 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_O2_SENSOR_FAILED;
 80182f6:	4b73      	ldr	r3, [pc, #460]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	2240      	movs	r2, #64	; 0x40
 80182fc:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 5)) {
 80182fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018302:	2105      	movs	r1, #5
 8018304:	4618      	mov	r0, r3
 8018306:	f7ff fe00 	bl	8017f0a <_ZL11isKthBitSetii>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	d010      	beq.n	8018332 <_ZN16SecondScreenView9updateValEPh+0x3fa>
			ErrorMessage.setTypedText(TypedText(T_EGT1_SESNSOR_FAILED));
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018316:	f107 0318 	add.w	r3, r7, #24
 801831a:	2141      	movs	r1, #65	; 0x41
 801831c:	4618      	mov	r0, r3
 801831e:	f7fa fd11 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018322:	8b39      	ldrh	r1, [r7, #24]
 8018324:	4620      	mov	r0, r4
 8018326:	f004 ffc7 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT1_SESNSOR_FAILED;
 801832a:	4b66      	ldr	r3, [pc, #408]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	2241      	movs	r2, #65	; 0x41
 8018330:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 6)) {
 8018332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018336:	2106      	movs	r1, #6
 8018338:	4618      	mov	r0, r3
 801833a:	f7ff fde6 	bl	8017f0a <_ZL11isKthBitSetii>
 801833e:	4603      	mov	r3, r0
 8018340:	2b00      	cmp	r3, #0
 8018342:	d010      	beq.n	8018366 <_ZN16SecondScreenView9updateValEPh+0x42e>
			ErrorMessage.setTypedText(TypedText(T_EGT2_SENSOR_FAILED));
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801834a:	f107 031c 	add.w	r3, r7, #28
 801834e:	2142      	movs	r1, #66	; 0x42
 8018350:	4618      	mov	r0, r3
 8018352:	f7fa fcf7 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018356:	8bb9      	ldrh	r1, [r7, #28]
 8018358:	4620      	mov	r0, r4
 801835a:	f004 ffad 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT2_SENSOR_FAILED;
 801835e:	4b59      	ldr	r3, [pc, #356]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	2242      	movs	r2, #66	; 0x42
 8018364:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 7)) {
 8018366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801836a:	2107      	movs	r1, #7
 801836c:	4618      	mov	r0, r3
 801836e:	f7ff fdcc 	bl	8017f0a <_ZL11isKthBitSetii>
 8018372:	4603      	mov	r3, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	d010      	beq.n	801839a <_ZN16SecondScreenView9updateValEPh+0x462>
			ErrorMessage.setTypedText(TypedText(T_EGT_HIGH));
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801837e:	f107 0320 	add.w	r3, r7, #32
 8018382:	2143      	movs	r1, #67	; 0x43
 8018384:	4618      	mov	r0, r3
 8018386:	f7fa fcdd 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801838a:	8c39      	ldrh	r1, [r7, #32]
 801838c:	4620      	mov	r0, r4
 801838e:	f004 ff93 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT_HIGH;
 8018392:	4b4c      	ldr	r3, [pc, #304]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	2243      	movs	r2, #67	; 0x43
 8018398:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 8)) {
 801839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801839e:	2108      	movs	r1, #8
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7ff fdb2 	bl	8017f0a <_ZL11isKthBitSetii>
 80183a6:	4603      	mov	r3, r0
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d010      	beq.n	80183ce <_ZN16SecondScreenView9updateValEPh+0x496>
			ErrorMessage.setTypedText(TypedText(T_KNOCKING));
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80183b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80183b6:	213d      	movs	r1, #61	; 0x3d
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fa fcc3 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80183be:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80183c0:	4620      	mov	r0, r4
 80183c2:	f004 ff79 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_KNOCKING;
 80183c6:	4b3f      	ldr	r3, [pc, #252]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	223d      	movs	r2, #61	; 0x3d
 80183cc:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 10)) {
 80183ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80183d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183d2:	210a      	movs	r1, #10
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7ff fd98 	bl	8017f0a <_ZL11isKthBitSetii>
 80183da:	4603      	mov	r3, r0
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d010      	beq.n	8018402 <_ZN16SecondScreenView9updateValEPh+0x4ca>
			ErrorMessage.setTypedText(TypedText(T_DBW_SENSOR_FAILED));
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80183e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80183ea:	2144      	movs	r1, #68	; 0x44
 80183ec:	4618      	mov	r0, r3
 80183ee:	f7fa fca9 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80183f2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80183f4:	4620      	mov	r0, r4
 80183f6:	f004 ff5f 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_DBW_SENSOR_FAILED;
 80183fa:	4b32      	ldr	r3, [pc, #200]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	2244      	movs	r2, #68	; 0x44
 8018400:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 11)) {
 8018402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018406:	210b      	movs	r1, #11
 8018408:	4618      	mov	r0, r3
 801840a:	f7ff fd7e 	bl	8017f0a <_ZL11isKthBitSetii>
 801840e:	4603      	mov	r3, r0
 8018410:	2b00      	cmp	r3, #0
 8018412:	d010      	beq.n	8018436 <_ZN16SecondScreenView9updateValEPh+0x4fe>
			ErrorMessage.setTypedText(TypedText(T_FPR_RELATIVE_ERROR));
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801841a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801841e:	2145      	movs	r1, #69	; 0x45
 8018420:	4618      	mov	r0, r3
 8018422:	f7fa fc8f 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018426:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8018428:	4620      	mov	r0, r4
 801842a:	f004 ff45 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_FPR_RELATIVE_ERROR;
 801842e:	4b25      	ldr	r3, [pc, #148]	; (80184c4 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	2245      	movs	r2, #69	; 0x45
 8018434:	701a      	strb	r2, [r3, #0]
		}

		int x = 240 - ErrorMessage.getTextWidth() / 2;
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801843c:	4618      	mov	r0, r3
 801843e:	f7ff fc69 	bl	8017d14 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8018442:	4603      	mov	r3, r0
 8018444:	085b      	lsrs	r3, r3, #1
 8018446:	b29b      	uxth	r3, r3
 8018448:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 801844c:	64bb      	str	r3, [r7, #72]	; 0x48
		ErrorMessage.setXY(x, 205);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018456:	b211      	sxth	r1, r2
 8018458:	22cd      	movs	r2, #205	; 0xcd
 801845a:	4618      	mov	r0, r3
 801845c:	f7fa fa32 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.resizeToCurrentText();
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018466:	4618      	mov	r0, r3
 8018468:	f004 fefc 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		ErrorMessage.invalidate();
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018472:	4618      	mov	r0, r3
 8018474:	f006 ffb6 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801847e:	2101      	movs	r1, #1
 8018480:	4618      	mov	r0, r3
 8018482:	f7fa fa90 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801848c:	2101      	movs	r1, #1
 801848e:	4618      	mov	r0, r3
 8018490:	f7fa fa89 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = true;
 8018494:	4b0c      	ldr	r3, [pc, #48]	; (80184c8 <_ZN16SecondScreenView9updateValEPh+0x590>)
 8018496:	2201      	movs	r2, #1
 8018498:	701a      	strb	r2, [r3, #0]
		CheckEngCodeValue.setVisible(false);
		EngProtCodeValue.setVisible(false);
		prev_error = false;
	}

}
 801849a:	e19b      	b.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (has_protection_error) {
 801849c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	f000 80bf 	beq.w	8018624 <_ZN16SecondScreenView9updateValEPh+0x6ec>
		if (error_screen_blinks < 100) {
 80184a6:	4b09      	ldr	r3, [pc, #36]	; (80184cc <_ZN16SecondScreenView9updateValEPh+0x594>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	2b63      	cmp	r3, #99	; 0x63
 80184ac:	dc10      	bgt.n	80184d0 <_ZN16SecondScreenView9updateValEPh+0x598>
			backgroundBox.setColor(getColorForErrors());
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80184b4:	f7ff fcb4 	bl	8017e20 <_ZL17getColorForErrorsv>
 80184b8:	4603      	mov	r3, r0
 80184ba:	4619      	mov	r1, r3
 80184bc:	4620      	mov	r0, r4
 80184be:	f7fa fc33 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 80184c2:	e00f      	b.n	80184e4 <_ZN16SecondScreenView9updateValEPh+0x5ac>
 80184c4:	20008828 	.word	0x20008828
 80184c8:	20000058 	.word	0x20000058
 80184cc:	20008824 	.word	0x20008824
			backgroundBox.setColor(getRedColor());
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80184d6:	f7ff fc94 	bl	8017e02 <_ZL11getRedColorv>
 80184da:	4603      	mov	r3, r0
 80184dc:	4619      	mov	r1, r3
 80184de:	4620      	mov	r0, r4
 80184e0:	f7fa fc22 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	3340      	adds	r3, #64	; 0x40
 80184e8:	4618      	mov	r0, r3
 80184ea:	f006 ff7b 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		if (isKthBitSet((int) values->emu_protection, (int) 1)) {
 80184ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184f2:	2101      	movs	r1, #1
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7ff fd08 	bl	8017f0a <_ZL11isKthBitSetii>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d010      	beq.n	8018522 <_ZN16SecondScreenView9updateValEPh+0x5ea>
			ErrorMessage.setTypedText(TypedText(T_OIL_TEMPERATURE_PROTECTION));
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801850a:	2152      	movs	r1, #82	; 0x52
 801850c:	4618      	mov	r0, r3
 801850e:	f7fa fc19 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018512:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8018514:	4620      	mov	r0, r4
 8018516:	f004 fecf 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_OIL_TEMPERATURE_PROTECTION;
 801851a:	4bb0      	ldr	r3, [pc, #704]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2252      	movs	r2, #82	; 0x52
 8018520:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 2)) {
 8018522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018526:	2102      	movs	r1, #2
 8018528:	4618      	mov	r0, r3
 801852a:	f7ff fcee 	bl	8017f0a <_ZL11isKthBitSetii>
 801852e:	4603      	mov	r3, r0
 8018530:	2b00      	cmp	r3, #0
 8018532:	d010      	beq.n	8018556 <_ZN16SecondScreenView9updateValEPh+0x61e>
			ErrorMessage.setTypedText(TypedText(T_CLT_PROTECTION));
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801853a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801853e:	2154      	movs	r1, #84	; 0x54
 8018540:	4618      	mov	r0, r3
 8018542:	f7fa fbff 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018546:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8018548:	4620      	mov	r0, r4
 801854a:	f004 feb5 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_CLT_PROTECTION;
 801854e:	4ba3      	ldr	r3, [pc, #652]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	2254      	movs	r2, #84	; 0x54
 8018554:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 3)) {
 8018556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801855a:	2103      	movs	r1, #3
 801855c:	4618      	mov	r0, r3
 801855e:	f7ff fcd4 	bl	8017f0a <_ZL11isKthBitSetii>
 8018562:	4603      	mov	r3, r0
 8018564:	2b00      	cmp	r3, #0
 8018566:	d010      	beq.n	801858a <_ZN16SecondScreenView9updateValEPh+0x652>
			ErrorMessage.setTypedText(TypedText(T_OIL_PRESSSURE_PROTECTION));
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801856e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018572:	2153      	movs	r1, #83	; 0x53
 8018574:	4618      	mov	r0, r3
 8018576:	f7fa fbe5 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 801857a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801857c:	4620      	mov	r0, r4
 801857e:	f004 fe9b 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_OIL_PRESSSURE_PROTECTION;
 8018582:	4b96      	ldr	r3, [pc, #600]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2253      	movs	r2, #83	; 0x53
 8018588:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 4)) {
 801858a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801858e:	2104      	movs	r1, #4
 8018590:	4618      	mov	r0, r3
 8018592:	f7ff fcba 	bl	8017f0a <_ZL11isKthBitSetii>
 8018596:	4603      	mov	r3, r0
 8018598:	2b00      	cmp	r3, #0
 801859a:	d010      	beq.n	80185be <_ZN16SecondScreenView9updateValEPh+0x686>
			ErrorMessage.setTypedText(TypedText(T_FUEL_PRESSURE_PROTECTION));
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80185a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80185a6:	2155      	movs	r1, #85	; 0x55
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7fa fbcb 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80185ae:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80185b0:	4620      	mov	r0, r4
 80185b2:	f004 fe81 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_FUEL_PRESSURE_PROTECTION;
 80185b6:	4b89      	ldr	r3, [pc, #548]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2255      	movs	r2, #85	; 0x55
 80185bc:	701a      	strb	r2, [r3, #0]
		int x = 240 - ErrorMessage.getTextWidth() / 2;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7ff fba5 	bl	8017d14 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 80185ca:	4603      	mov	r3, r0
 80185cc:	085b      	lsrs	r3, r3, #1
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80185d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		ErrorMessage.setXY(x, 205);
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80185dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80185de:	b211      	sxth	r1, r2
 80185e0:	22cd      	movs	r2, #205	; 0xcd
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7fa f96e 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.resizeToCurrentText();
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80185ee:	4618      	mov	r0, r3
 80185f0:	f004 fe38 	bl	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		ErrorMessage.invalidate();
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80185fa:	4618      	mov	r0, r3
 80185fc:	f006 fef2 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8018606:	2101      	movs	r1, #1
 8018608:	4618      	mov	r0, r3
 801860a:	f7fa f9cc 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8018614:	2101      	movs	r1, #1
 8018616:	4618      	mov	r0, r3
 8018618:	f7fa f9c5 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = true;
 801861c:	4b70      	ldr	r3, [pc, #448]	; (80187e0 <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 801861e:	2201      	movs	r2, #1
 8018620:	701a      	strb	r2, [r3, #0]
}
 8018622:	e0d7      	b.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (error || check_eng_code > 0 || eng_prot_code > 0) {
 8018624:	4b6d      	ldr	r3, [pc, #436]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d107      	bne.n	801863c <_ZN16SecondScreenView9updateValEPh+0x704>
 801862c:	4b6d      	ldr	r3, [pc, #436]	; (80187e4 <_ZN16SecondScreenView9updateValEPh+0x8ac>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	dc03      	bgt.n	801863c <_ZN16SecondScreenView9updateValEPh+0x704>
 8018634:	4b6c      	ldr	r3, [pc, #432]	; (80187e8 <_ZN16SecondScreenView9updateValEPh+0x8b0>)
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	dd6f      	ble.n	801871c <_ZN16SecondScreenView9updateValEPh+0x7e4>
		CheckEngCodeValue.setVisible(true);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018642:	2101      	movs	r1, #1
 8018644:	4618      	mov	r0, r3
 8018646:	f7fa f9ae 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%d",
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018650:	4b64      	ldr	r3, [pc, #400]	; (80187e4 <_ZN16SecondScreenView9updateValEPh+0x8ac>)
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	4a65      	ldr	r2, [pc, #404]	; (80187ec <_ZN16SecondScreenView9updateValEPh+0x8b4>)
 8018656:	2123      	movs	r1, #35	; 0x23
 8018658:	f008 fb2c 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CheckEngCodeValue.invalidate();
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018662:	4618      	mov	r0, r3
 8018664:	f006 febe 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		EngProtCodeValue.setVisible(true);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801866e:	2101      	movs	r1, #1
 8018670:	4618      	mov	r0, r3
 8018672:	f7fa f998 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%d",
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f203 40d2 	addw	r0, r3, #1234	; 0x4d2
 801867c:	4b5a      	ldr	r3, [pc, #360]	; (80187e8 <_ZN16SecondScreenView9updateValEPh+0x8b0>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	4a5a      	ldr	r2, [pc, #360]	; (80187ec <_ZN16SecondScreenView9updateValEPh+0x8b4>)
 8018682:	2123      	movs	r1, #35	; 0x23
 8018684:	f008 fb16 	bl	8020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EngProtCodeValue.invalidate();
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801868e:	4618      	mov	r0, r3
 8018690:	f006 fea8 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		backgroundBox.setColor(getBlackColor());
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801869a:	f7ff fba3 	bl	8017de4 <_ZL13getBlackColorv>
 801869e:	4603      	mov	r3, r0
 80186a0:	4619      	mov	r1, r3
 80186a2:	4620      	mov	r0, r4
 80186a4:	f7fa fb40 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	3340      	adds	r3, #64	; 0x40
 80186ac:	4618      	mov	r0, r3
 80186ae:	f006 fe99 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(*error));
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80186b8:	4b48      	ldr	r3, [pc, #288]	; (80187dc <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	781b      	ldrb	r3, [r3, #0]
 80186be:	b29a      	uxth	r2, r3
 80186c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80186c4:	4611      	mov	r1, r2
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fa fb3c 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 80186cc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80186d0:	4620      	mov	r0, r4
 80186d2:	f004 fdf1 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 205);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80186dc:	22cd      	movs	r2, #205	; 0xcd
 80186de:	21c1      	movs	r1, #193	; 0xc1
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7fa f8ef 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80186ec:	4618      	mov	r0, r3
 80186ee:	f006 fe79 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80186f8:	2101      	movs	r1, #1
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7fa f953 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8018706:	2101      	movs	r1, #1
 8018708:	4618      	mov	r0, r3
 801870a:	f7fa f94c 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		cutrrentErrorIndex = 0;
 801870e:	4b38      	ldr	r3, [pc, #224]	; (80187f0 <_ZN16SecondScreenView9updateValEPh+0x8b8>)
 8018710:	2200      	movs	r2, #0
 8018712:	601a      	str	r2, [r3, #0]
		prev_error = true;
 8018714:	4b32      	ldr	r3, [pc, #200]	; (80187e0 <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 8018716:	2201      	movs	r2, #1
 8018718:	701a      	strb	r2, [r3, #0]
}
 801871a:	e05b      	b.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (prev_error && !has_check_eng_code && !has_eng_prot_code) {
 801871c:	4b30      	ldr	r3, [pc, #192]	; (80187e0 <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 801871e:	781b      	ldrb	r3, [r3, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d057      	beq.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
 8018724:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8018728:	f083 0301 	eor.w	r3, r3, #1
 801872c:	b2db      	uxtb	r3, r3
 801872e:	2b00      	cmp	r3, #0
 8018730:	d050      	beq.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
 8018732:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8018736:	f083 0301 	eor.w	r3, r3, #1
 801873a:	b2db      	uxtb	r3, r3
 801873c:	2b00      	cmp	r3, #0
 801873e:	d049      	beq.n	80187d4 <_ZN16SecondScreenView9updateValEPh+0x89c>
		backgroundBox.setColor(getBlackColor());
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018746:	f7ff fb4d 	bl	8017de4 <_ZL13getBlackColorv>
 801874a:	4603      	mov	r3, r0
 801874c:	4619      	mov	r1, r3
 801874e:	4620      	mov	r0, r4
 8018750:	f7fa faea 	bl	8012d28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	3340      	adds	r3, #64	; 0x40
 8018758:	4618      	mov	r0, r3
 801875a:	f006 fe43 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018768:	213c      	movs	r1, #60	; 0x3c
 801876a:	4618      	mov	r0, r3
 801876c:	f7fa faea 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018770:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8018774:	4620      	mov	r0, r4
 8018776:	f004 fd9f 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 232);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018780:	22e8      	movs	r2, #232	; 0xe8
 8018782:	21c1      	movs	r1, #193	; 0xc1
 8018784:	4618      	mov	r0, r3
 8018786:	f7fa f89d 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018790:	4618      	mov	r0, r3
 8018792:	f006 fe27 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(false);
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801879c:	2100      	movs	r1, #0
 801879e:	4618      	mov	r0, r3
 80187a0:	f7fa f901 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(false);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80187aa:	2100      	movs	r1, #0
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7fa f8fa 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		CheckEngCodeValue.setVisible(false);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80187b8:	2100      	movs	r1, #0
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7fa f8f3 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		EngProtCodeValue.setVisible(false);
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80187c6:	2100      	movs	r1, #0
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fa f8ec 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = false;
 80187ce:	4b04      	ldr	r3, [pc, #16]	; (80187e0 <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 80187d0:	2200      	movs	r2, #0
 80187d2:	701a      	strb	r2, [r3, #0]
}
 80187d4:	bf00      	nop
 80187d6:	375c      	adds	r7, #92	; 0x5c
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd90      	pop	{r4, r7, pc}
 80187dc:	20008828 	.word	0x20008828
 80187e0:	20000058 	.word	0x20000058
 80187e4:	20008830 	.word	0x20008830
 80187e8:	20008834 	.word	0x20008834
 80187ec:	0802c554 	.word	0x0802c554
 80187f0:	2000882c 	.word	0x2000882c

080187f4 <_ZN16SecondScreenView11clearErrorsEv>:

void SecondScreenView::clearErrors() {
 80187f4:	b590      	push	{r4, r7, lr}
 80187f6:	b085      	sub	sp, #20
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
	error = NULL;
 80187fc:	4b23      	ldr	r3, [pc, #140]	; (801888c <_ZN16SecondScreenView11clearErrorsEv+0x98>)
 80187fe:	2200      	movs	r2, #0
 8018800:	601a      	str	r2, [r3, #0]
	check_eng_code = 0;
 8018802:	4b23      	ldr	r3, [pc, #140]	; (8018890 <_ZN16SecondScreenView11clearErrorsEv+0x9c>)
 8018804:	2200      	movs	r2, #0
 8018806:	601a      	str	r2, [r3, #0]
	eng_prot_code = 0;
 8018808:	4b22      	ldr	r3, [pc, #136]	; (8018894 <_ZN16SecondScreenView11clearErrorsEv+0xa0>)
 801880a:	2200      	movs	r2, #0
 801880c:	601a      	str	r2, [r3, #0]
	ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018814:	f107 030c 	add.w	r3, r7, #12
 8018818:	213c      	movs	r1, #60	; 0x3c
 801881a:	4618      	mov	r0, r3
 801881c:	f7fa fa92 	bl	8012d44 <_ZN8touchgfx9TypedTextC1Et>
 8018820:	89b9      	ldrh	r1, [r7, #12]
 8018822:	4620      	mov	r0, r4
 8018824:	f004 fd48 	bl	801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
	ErrorMessage.setXY(193, 232);
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801882e:	22e8      	movs	r2, #232	; 0xe8
 8018830:	21c1      	movs	r1, #193	; 0xc1
 8018832:	4618      	mov	r0, r3
 8018834:	f7fa f846 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
	ErrorMessage.invalidate();
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801883e:	4618      	mov	r0, r3
 8018840:	f006 fdd0 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
	nextErrorButton.setVisible(false);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801884a:	2100      	movs	r1, #0
 801884c:	4618      	mov	r0, r3
 801884e:	f7fa f8aa 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
	clearErrorsBtn.setVisible(false);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8018858:	2100      	movs	r1, #0
 801885a:	4618      	mov	r0, r3
 801885c:	f7fa f8a3 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
	EngProtCodeValue.setVisible(false);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8018866:	2100      	movs	r1, #0
 8018868:	4618      	mov	r0, r3
 801886a:	f7fa f89c 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
	CheckEngCodeValue.setVisible(false);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018874:	2100      	movs	r1, #0
 8018876:	4618      	mov	r0, r3
 8018878:	f7fa f895 	bl	80129a6 <_ZN8touchgfx8Drawable10setVisibleEb>
	prev_error = true;
 801887c:	4b06      	ldr	r3, [pc, #24]	; (8018898 <_ZN16SecondScreenView11clearErrorsEv+0xa4>)
 801887e:	2201      	movs	r2, #1
 8018880:	701a      	strb	r2, [r3, #0]
}
 8018882:	bf00      	nop
 8018884:	3714      	adds	r7, #20
 8018886:	46bd      	mov	sp, r7
 8018888:	bd90      	pop	{r4, r7, pc}
 801888a:	bf00      	nop
 801888c:	20008828 	.word	0x20008828
 8018890:	20008830 	.word	0x20008830
 8018894:	20008834 	.word	0x20008834
 8018898:	20000058 	.word	0x20000058

0801889c <_ZN16SecondScreenView9nextErrorEv>:

void SecondScreenView::nextError() {
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
//	ErrorMessage.setTypedText(TypedText(text));
//	int x = 240 - ErrorMessage.getTextWidth() / 2;
//	ErrorMessage.setXY(x, 205);
//	ErrorMessage.resizeToCurrentText();
//	ErrorMessage.invalidate();
}
 80188a4:	bf00      	nop
 80188a6:	370c      	adds	r7, #12
 80188a8:	46bd      	mov	sp, r7
 80188aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ae:	4770      	bx	lr

080188b0 <_ZN16SecondScreenView16moveToMainScreenEv>:

void SecondScreenView::moveToMainScreen() {
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
	presenter->setManualErrorChangeScreen();
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ff fa09 	bl	8017cd4 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>
}
 80188c2:	bf00      	nop
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
	...

080188cc <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80188cc:	b480      	push	{r7}
 80188ce:	b083      	sub	sp, #12
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
    {
 80188d4:	4a04      	ldr	r2, [pc, #16]	; (80188e8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	601a      	str	r2, [r3, #0]
    }
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	4618      	mov	r0, r3
 80188de:	370c      	adds	r7, #12
 80188e0:	46bd      	mov	sp, r7
 80188e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e6:	4770      	bx	lr
 80188e8:	0802d3a0 	.word	0x0802d3a0

080188ec <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
    }
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f7ff ffe9 	bl	80188cc <_ZN8touchgfx15TouchControllerD1Ev>
 80188fa:	2104      	movs	r1, #4
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f012 f946 	bl	802ab8e <_ZdlPvj>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	4618      	mov	r0, r3
 8018906:	3708      	adds	r7, #8
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8018914:	f44f 7188 	mov.w	r1, #272	; 0x110
 8018918:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 801891c:	f7f7 fa86 	bl	800fe2c <BSP_TS_Init>
}
 8018920:	bf00      	nop
 8018922:	3708      	adds	r7, #8
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}

08018928 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b090      	sub	sp, #64	; 0x40
 801892c:	af00      	add	r7, sp, #0
 801892e:	60f8      	str	r0, [r7, #12]
 8018930:	60b9      	str	r1, [r7, #8]
 8018932:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8018934:	f107 0314 	add.w	r3, r7, #20
 8018938:	222c      	movs	r2, #44	; 0x2c
 801893a:	2100      	movs	r1, #0
 801893c:	4618      	mov	r0, r3
 801893e:	f012 f9da 	bl	802acf6 <memset>
	    BSP_TS_GetState(&state);
 8018942:	f107 0314 	add.w	r3, r7, #20
 8018946:	4618      	mov	r0, r3
 8018948:	f7f7 fab0 	bl	800feac <BSP_TS_GetState>
	    if (state.touchDetected)
 801894c:	7d3b      	ldrb	r3, [r7, #20]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d009      	beq.n	8018966 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 8018952:	8afb      	ldrh	r3, [r7, #22]
 8018954:	461a      	mov	r2, r3
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 801895a:	8c3b      	ldrh	r3, [r7, #32]
 801895c:	461a      	mov	r2, r3
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	601a      	str	r2, [r3, #0]

	        return true;
 8018962:	2301      	movs	r3, #1
 8018964:	e000      	b.n	8018968 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 8018966:	2300      	movs	r3, #0
}
 8018968:	4618      	mov	r0, r3
 801896a:	3740      	adds	r7, #64	; 0x40
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}

08018970 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8018970:	b580      	push	{r7, lr}
 8018972:	b082      	sub	sp, #8
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	4a05      	ldr	r2, [pc, #20]	; (8018990 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	601a      	str	r2, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	4618      	mov	r0, r3
 8018982:	f7ff ffa3 	bl	80188cc <_ZN8touchgfx15TouchControllerD1Ev>
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	4618      	mov	r0, r3
 801898a:	3708      	adds	r7, #8
 801898c:	46bd      	mov	sp, r7
 801898e:	bd80      	pop	{r7, pc}
 8018990:	0802d388 	.word	0x0802d388

08018994 <_ZN20STM32TouchControllerD0Ev>:
 8018994:	b580      	push	{r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f7ff ffe7 	bl	8018970 <_ZN20STM32TouchControllerD1Ev>
 80189a2:	2104      	movs	r1, #4
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f012 f8f2 	bl	802ab8e <_ZdlPvj>
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	4618      	mov	r0, r3
 80189ae:	3708      	adds	r7, #8
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bd80      	pop	{r7, pc}

080189b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80189b4:	b480      	push	{r7}
 80189b6:	b083      	sub	sp, #12
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	4603      	mov	r3, r0
 80189bc:	71fb      	strb	r3, [r7, #7]

}
 80189be:	bf00      	nop
 80189c0:	370c      	adds	r7, #12
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr

080189ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80189ca:	b480      	push	{r7}
 80189cc:	b083      	sub	sp, #12
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	4603      	mov	r3, r0
 80189d2:	71fb      	strb	r3, [r7, #7]

}
 80189d4:	bf00      	nop
 80189d6:	370c      	adds	r7, #12
 80189d8:	46bd      	mov	sp, r7
 80189da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189de:	4770      	bx	lr

080189e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	4603      	mov	r3, r0
 80189e8:	71fb      	strb	r3, [r7, #7]

}
 80189ea:	bf00      	nop
 80189ec:	370c      	adds	r7, #12
 80189ee:	46bd      	mov	sp, r7
 80189f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f4:	4770      	bx	lr
	...

080189f8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80189f8:	b480      	push	{r7}
 80189fa:	b083      	sub	sp, #12
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
    {
 8018a00:	4a04      	ldr	r2, [pc, #16]	; (8018a14 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	601a      	str	r2, [r3, #0]
    }
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	4618      	mov	r0, r3
 8018a0a:	370c      	adds	r7, #12
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a12:	4770      	bx	lr
 8018a14:	0802e158 	.word	0x0802e158

08018a18 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b082      	sub	sp, #8
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
    }
 8018a20:	6878      	ldr	r0, [r7, #4]
 8018a22:	f7ff ffe9 	bl	80189f8 <_ZN8touchgfx3HALD1Ev>
 8018a26:	2178      	movs	r1, #120	; 0x78
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f012 f8b0 	bl	802ab8e <_ZdlPvj>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	4618      	mov	r0, r3
 8018a32:	3708      	adds	r7, #8
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}

08018a38 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8018a38:	b480      	push	{r7}
 8018a3a:	b083      	sub	sp, #12
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
 8018a40:	460b      	mov	r3, r1
 8018a42:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	78fa      	ldrb	r2, [r7, #3]
 8018a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	2201      	movs	r2, #1
 8018a50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8018a54:	bf00      	nop
 8018a56:	370c      	adds	r7, #12
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a5e:	4770      	bx	lr

08018a60 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	685a      	ldr	r2, [r3, #4]
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	685b      	ldr	r3, [r3, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	4610      	mov	r0, r2
 8018a76:	4798      	blx	r3
 8018a78:	4603      	mov	r3, r0
    }
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3708      	adds	r7, #8
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}

08018a82 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8018a82:	b580      	push	{r7, lr}
 8018a84:	b082      	sub	sp, #8
 8018a86:	af00      	add	r7, sp, #0
 8018a88:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8018a8a:	6878      	ldr	r0, [r7, #4]
 8018a8c:	f003 fbbc 	bl	801c208 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	3390      	adds	r3, #144	; 0x90
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	4798      	blx	r3
    }
 8018a9c:	bf00      	nop
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8018aa4:	b480      	push	{r7}
 8018aa6:	b083      	sub	sp, #12
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
 8018aac:	6039      	str	r1, [r7, #0]
    {
        return false;
 8018aae:	2300      	movs	r3, #0
    }
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	370c      	adds	r7, #12
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aba:	4770      	bx	lr

08018abc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8018abc:	b590      	push	{r4, r7, lr}
 8018abe:	b08b      	sub	sp, #44	; 0x2c
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	4611      	mov	r1, r2
 8018ac8:	461a      	mov	r2, r3
 8018aca:	460b      	mov	r3, r1
 8018acc:	80fb      	strh	r3, [r7, #6]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8018ad2:	f7f8 f99d 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 8018ad6:	4602      	mov	r2, r0
 8018ad8:	6813      	ldr	r3, [r2, #0]
 8018ada:	3328      	adds	r3, #40	; 0x28
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	4610      	mov	r0, r2
 8018ae0:	4798      	blx	r3
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8018ae6:	8b7b      	ldrh	r3, [r7, #26]
 8018ae8:	4a3d      	ldr	r2, [pc, #244]	; (8018be0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8018aea:	8812      	ldrh	r2, [r2, #0]
 8018aec:	fb02 f303 	mul.w	r3, r2, r3
 8018af0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8018af6:	2300      	movs	r3, #0
 8018af8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8018afa:	2300      	movs	r3, #0
 8018afc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8018afe:	797b      	ldrb	r3, [r7, #5]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d005      	beq.n	8018b10 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8018b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	4413      	add	r3, r2
 8018b0a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8018b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8018b10:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d005      	beq.n	8018b24 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8018b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	4413      	add	r3, r2
 8018b1e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8018b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b22:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8018b24:	88fb      	ldrh	r3, [r7, #6]
 8018b26:	3b01      	subs	r3, #1
 8018b28:	2b1f      	cmp	r3, #31
 8018b2a:	d84d      	bhi.n	8018bc8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8018b2c:	a201      	add	r2, pc, #4	; (adr r2, 8018b34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8018b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b32:	bf00      	nop
 8018b34:	08018bb5 	.word	0x08018bb5
 8018b38:	08018bb5 	.word	0x08018bb5
 8018b3c:	08018bc9 	.word	0x08018bc9
 8018b40:	08018bb5 	.word	0x08018bb5
 8018b44:	08018bc9 	.word	0x08018bc9
 8018b48:	08018bc9 	.word	0x08018bc9
 8018b4c:	08018bc9 	.word	0x08018bc9
 8018b50:	08018bb5 	.word	0x08018bb5
 8018b54:	08018bc9 	.word	0x08018bc9
 8018b58:	08018bc9 	.word	0x08018bc9
 8018b5c:	08018bc9 	.word	0x08018bc9
 8018b60:	08018bc9 	.word	0x08018bc9
 8018b64:	08018bc9 	.word	0x08018bc9
 8018b68:	08018bc9 	.word	0x08018bc9
 8018b6c:	08018bc9 	.word	0x08018bc9
 8018b70:	08018bb5 	.word	0x08018bb5
 8018b74:	08018bc9 	.word	0x08018bc9
 8018b78:	08018bc9 	.word	0x08018bc9
 8018b7c:	08018bc9 	.word	0x08018bc9
 8018b80:	08018bc9 	.word	0x08018bc9
 8018b84:	08018bc9 	.word	0x08018bc9
 8018b88:	08018bc9 	.word	0x08018bc9
 8018b8c:	08018bc9 	.word	0x08018bc9
 8018b90:	08018bb5 	.word	0x08018bb5
 8018b94:	08018bc9 	.word	0x08018bc9
 8018b98:	08018bc9 	.word	0x08018bc9
 8018b9c:	08018bc9 	.word	0x08018bc9
 8018ba0:	08018bc9 	.word	0x08018bc9
 8018ba4:	08018bc9 	.word	0x08018bc9
 8018ba8:	08018bc9 	.word	0x08018bc9
 8018bac:	08018bc9 	.word	0x08018bc9
 8018bb0:	08018bb5 	.word	0x08018bb5
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	3374      	adds	r3, #116	; 0x74
 8018bba:	681c      	ldr	r4, [r3, #0]
 8018bbc:	69fb      	ldr	r3, [r7, #28]
 8018bbe:	6a3a      	ldr	r2, [r7, #32]
 8018bc0:	68b9      	ldr	r1, [r7, #8]
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	47a0      	blx	r4
            break;
 8018bc6:	e006      	b.n	8018bd6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8018bc8:	4b06      	ldr	r3, [pc, #24]	; (8018be4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8018bca:	4a07      	ldr	r2, [pc, #28]	; (8018be8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8018bcc:	f240 3125 	movw	r1, #805	; 0x325
 8018bd0:	4806      	ldr	r0, [pc, #24]	; (8018bec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8018bd2:	f012 f807 	bl	802abe4 <__assert_func>
            break;
        }
    }
 8018bd6:	bf00      	nop
 8018bd8:	372c      	adds	r7, #44	; 0x2c
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd90      	pop	{r4, r7, pc}
 8018bde:	bf00      	nop
 8018be0:	2000bfea 	.word	0x2000bfea
 8018be4:	0802c558 	.word	0x0802c558
 8018be8:	0802d4b4 	.word	0x0802d4b4
 8018bec:	0802c578 	.word	0x0802c578

08018bf0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	60f8      	str	r0, [r7, #12]
 8018bf8:	60b9      	str	r1, [r7, #8]
 8018bfa:	607a      	str	r2, [r7, #4]
 8018bfc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d106      	bne.n	8018c12 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8018c04:	4b11      	ldr	r3, [pc, #68]	; (8018c4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8018c06:	4a12      	ldr	r2, [pc, #72]	; (8018c50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8018c08:	f240 3137 	movw	r1, #823	; 0x337
 8018c0c:	4811      	ldr	r0, [pc, #68]	; (8018c54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8018c0e:	f011 ffe9 	bl	802abe4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	68ba      	ldr	r2, [r7, #8]
 8018c16:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	687a      	ldr	r2, [r7, #4]
 8018c1c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	683a      	ldr	r2, [r7, #0]
 8018c22:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	bf14      	ite	ne
 8018c2a:	2301      	movne	r3, #1
 8018c2c:	2300      	moveq	r3, #0
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	4b09      	ldr	r3, [pc, #36]	; (8018c58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8018c32:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8018c34:	683b      	ldr	r3, [r7, #0]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	bf14      	ite	ne
 8018c3a:	2301      	movne	r3, #1
 8018c3c:	2300      	moveq	r3, #0
 8018c3e:	b2da      	uxtb	r2, r3
 8018c40:	4b06      	ldr	r3, [pc, #24]	; (8018c5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8018c42:	701a      	strb	r2, [r3, #0]
    }
 8018c44:	bf00      	nop
 8018c46:	3710      	adds	r7, #16
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	0802c5bc 	.word	0x0802c5bc
 8018c50:	0802d464 	.word	0x0802d464
 8018c54:	0802c578 	.word	0x0802c578
 8018c58:	2000bfec 	.word	0x2000bfec
 8018c5c:	2000bfed 	.word	0x2000bfed

08018c60 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	460b      	mov	r3, r1
 8018c6a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d004      	beq.n	8018c7e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c78:	887a      	ldrh	r2, [r7, #2]
 8018c7a:	4610      	mov	r0, r2
 8018c7c:	4798      	blx	r3
        }
    }
 8018c7e:	bf00      	nop
 8018c80:	3708      	adds	r7, #8
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}

08018c86 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8018c86:	b580      	push	{r7, lr}
 8018c88:	b082      	sub	sp, #8
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	685a      	ldr	r2, [r3, #4]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	3318      	adds	r3, #24
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	4610      	mov	r0, r2
 8018c9e:	4798      	blx	r3
 8018ca0:	4603      	mov	r3, r0
    }
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	3708      	adds	r7, #8
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
	...

08018cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8018cac:	b480      	push	{r7}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d017      	beq.n	8018cf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8018cc4:	4b1a      	ldr	r3, [pc, #104]	; (8018d30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018cc6:	781b      	ldrb	r3, [r3, #0]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d12a      	bne.n	8018d22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8018ccc:	4b19      	ldr	r3, [pc, #100]	; (8018d34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018cce:	881a      	ldrh	r2, [r3, #0]
 8018cd0:	4b19      	ldr	r3, [pc, #100]	; (8018d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018cd2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018cd4:	4b19      	ldr	r3, [pc, #100]	; (8018d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018cd6:	881a      	ldrh	r2, [r3, #0]
 8018cd8:	4b19      	ldr	r3, [pc, #100]	; (8018d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018cda:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8018cdc:	4b16      	ldr	r3, [pc, #88]	; (8018d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018cde:	881a      	ldrh	r2, [r3, #0]
 8018ce0:	4b16      	ldr	r3, [pc, #88]	; (8018d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018ce2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8018ce4:	4b16      	ldr	r3, [pc, #88]	; (8018d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018ce6:	881a      	ldrh	r2, [r3, #0]
 8018ce8:	4b12      	ldr	r3, [pc, #72]	; (8018d34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018cea:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8018cec:	4b10      	ldr	r3, [pc, #64]	; (8018d30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018cee:	2201      	movs	r2, #1
 8018cf0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8018cf2:	e016      	b.n	8018d22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8018cf4:	4b0e      	ldr	r3, [pc, #56]	; (8018d30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018cf6:	781b      	ldrb	r3, [r3, #0]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d012      	beq.n	8018d22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8018cfc:	4b0f      	ldr	r3, [pc, #60]	; (8018d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018cfe:	881a      	ldrh	r2, [r3, #0]
 8018d00:	4b0d      	ldr	r3, [pc, #52]	; (8018d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018d02:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8018d04:	4b0b      	ldr	r3, [pc, #44]	; (8018d34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018d06:	881a      	ldrh	r2, [r3, #0]
 8018d08:	4b0d      	ldr	r3, [pc, #52]	; (8018d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018d0a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8018d0c:	4b0c      	ldr	r3, [pc, #48]	; (8018d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018d0e:	881a      	ldrh	r2, [r3, #0]
 8018d10:	4b0a      	ldr	r3, [pc, #40]	; (8018d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018d12:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8018d14:	4b08      	ldr	r3, [pc, #32]	; (8018d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018d16:	881a      	ldrh	r2, [r3, #0]
 8018d18:	4b06      	ldr	r3, [pc, #24]	; (8018d34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018d1a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8018d1c:	4b04      	ldr	r3, [pc, #16]	; (8018d30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018d1e:	2200      	movs	r2, #0
 8018d20:	701a      	strb	r2, [r3, #0]
    }
 8018d22:	bf00      	nop
 8018d24:	370c      	adds	r7, #12
 8018d26:	46bd      	mov	sp, r7
 8018d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2c:	4770      	bx	lr
 8018d2e:	bf00      	nop
 8018d30:	2000bfe6 	.word	0x2000bfe6
 8018d34:	2000bfe2 	.word	0x2000bfe2
 8018d38:	2000bfe8 	.word	0x2000bfe8
 8018d3c:	2000bfe4 	.word	0x2000bfe4
 8018d40:	2000bfea 	.word	0x2000bfea

08018d44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b082      	sub	sp, #8
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f002 fcdc 	bl	801b70c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8018d54:	bf00      	nop
 8018d56:	3708      	adds	r7, #8
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}

08018d5c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	4a05      	ldr	r2, [pc, #20]	; (8018d7c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	601a      	str	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7ff fe43 	bl	80189f8 <_ZN8touchgfx3HALD1Ev>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	4618      	mov	r0, r3
 8018d76:	3708      	adds	r7, #8
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd80      	pop	{r7, pc}
 8018d7c:	0802d68c 	.word	0x0802d68c

08018d80 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	f7ff ffe7 	bl	8018d5c <_ZN20TouchGFXGeneratedHALD1Ev>
 8018d8e:	2178      	movs	r1, #120	; 0x78
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	f011 fefc 	bl	802ab8e <_ZdlPvj>
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7ff ffca 	bl	8018d44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8018db0:	bf00      	nop
 8018db2:	3708      	adds	r7, #8
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}

08018db8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f001 fb08 	bl	801a3d8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8018dc8:	bf00      	nop
 8018dca:	3708      	adds	r7, #8
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f001 fb88 	bl	801a4f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8018de0:	4603      	mov	r3, r0
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3708      	adds	r7, #8
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}

08018dea <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8018dea:	b580      	push	{r7, lr}
 8018dec:	b082      	sub	sp, #8
 8018dee:	af00      	add	r7, sp, #0
 8018df0:	6078      	str	r0, [r7, #4]
 8018df2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	6839      	ldr	r1, [r7, #0]
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f001 fb87 	bl	801a50c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}

08018e06 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8018e06:	b580      	push	{r7, lr}
 8018e08:	b082      	sub	sp, #8
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	6078      	str	r0, [r7, #4]
 8018e0e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	6839      	ldr	r1, [r7, #0]
 8018e14:	4618      	mov	r0, r3
 8018e16:	f001 fb8f 	bl	801a538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8018e1a:	bf00      	nop
 8018e1c:	3708      	adds	r7, #8
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8018e22:	b580      	push	{r7, lr}
 8018e24:	b082      	sub	sp, #8
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f001 fb05 	bl	801a43c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8018e32:	bf00      	nop
 8018e34:	3708      	adds	r7, #8
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}

08018e3a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8018e3a:	b580      	push	{r7, lr}
 8018e3c:	b082      	sub	sp, #8
 8018e3e:	af00      	add	r7, sp, #0
 8018e40:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	4618      	mov	r0, r3
 8018e46:	f001 fb09 	bl	801a45c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8018e4a:	bf00      	nop
 8018e4c:	3708      	adds	r7, #8
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}

08018e52 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8018e52:	b580      	push	{r7, lr}
 8018e54:	b082      	sub	sp, #8
 8018e56:	af00      	add	r7, sp, #0
 8018e58:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f001 fb0b 	bl	801a478 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8018e62:	bf00      	nop
 8018e64:	3708      	adds	r7, #8
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}

08018e6a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8018e6a:	b580      	push	{r7, lr}
 8018e6c:	b082      	sub	sp, #8
 8018e6e:	af00      	add	r7, sp, #0
 8018e70:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	4618      	mov	r0, r3
 8018e76:	f001 fb0d 	bl	801a494 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8018e7a:	bf00      	nop
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
	...

08018e84 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	4a05      	ldr	r2, [pc, #20]	; (8018ea4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	601a      	str	r2, [r3, #0]
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	4618      	mov	r0, r3
 8018e96:	f7ff ff61 	bl	8018d5c <_ZN20TouchGFXGeneratedHALD1Ev>
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	3708      	adds	r7, #8
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}
 8018ea4:	0802d3b8 	.word	0x0802d3b8

08018ea8 <_ZN11TouchGFXHALD0Ev>:
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b082      	sub	sp, #8
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f7ff ffe7 	bl	8018e84 <_ZN11TouchGFXHALD1Ev>
 8018eb6:	2178      	movs	r1, #120	; 0x78
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f011 fe68 	bl	802ab8e <_ZdlPvj>
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8018ecc:	2203      	movs	r2, #3
 8018ece:	2100      	movs	r1, #0
 8018ed0:	2001      	movs	r0, #1
 8018ed2:	f7f4 fb64 	bl	800d59e <xQueueGenericCreate>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	4b0b      	ldr	r3, [pc, #44]	; (8018f08 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018eda:	601a      	str	r2, [r3, #0]
 8018edc:	4b0a      	ldr	r3, [pc, #40]	; (8018f08 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d006      	beq.n	8018ef2 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8018ee4:	4b08      	ldr	r3, [pc, #32]	; (8018f08 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018ee6:	6818      	ldr	r0, [r3, #0]
 8018ee8:	2300      	movs	r3, #0
 8018eea:	2200      	movs	r2, #0
 8018eec:	2100      	movs	r1, #0
 8018eee:	f7f4 fbb7 	bl	800d660 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	2101      	movs	r1, #1
 8018ef6:	2001      	movs	r0, #1
 8018ef8:	f7f4 fb51 	bl	800d59e <xQueueGenericCreate>
 8018efc:	4602      	mov	r2, r0
 8018efe:	4b03      	ldr	r3, [pc, #12]	; (8018f0c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8018f00:	601a      	str	r2, [r3, #0]
}
 8018f02:	bf00      	nop
 8018f04:	bd80      	pop	{r7, pc}
 8018f06:	bf00      	nop
 8018f08:	20008838 	.word	0x20008838
 8018f0c:	2000883c 	.word	0x2000883c

08018f10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8018f14:	4b04      	ldr	r3, [pc, #16]	; (8018f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	f04f 31ff 	mov.w	r1, #4294967295
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7f4 feb1 	bl	800dc84 <xQueueSemaphoreTake>
}
 8018f22:	bf00      	nop
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	20008838 	.word	0x20008838

08018f2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8018f30:	4b04      	ldr	r3, [pc, #16]	; (8018f44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8018f32:	6818      	ldr	r0, [r3, #0]
 8018f34:	2300      	movs	r3, #0
 8018f36:	2200      	movs	r2, #0
 8018f38:	2100      	movs	r1, #0
 8018f3a:	f7f4 fb91 	bl	800d660 <xQueueGenericSend>
}
 8018f3e:	bf00      	nop
 8018f40:	bd80      	pop	{r7, pc}
 8018f42:	bf00      	nop
 8018f44:	20008838 	.word	0x20008838

08018f48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8018f4c:	4b03      	ldr	r3, [pc, #12]	; (8018f5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	2100      	movs	r1, #0
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7f4 fe96 	bl	800dc84 <xQueueSemaphoreTake>
}
 8018f58:	bf00      	nop
 8018f5a:	bd80      	pop	{r7, pc}
 8018f5c:	20008838 	.word	0x20008838

08018f60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8018f66:	2300      	movs	r3, #0
 8018f68:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8018f6a:	4b0b      	ldr	r3, [pc, #44]	; (8018f98 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	1d3a      	adds	r2, r7, #4
 8018f70:	4611      	mov	r1, r2
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7f4 fd12 	bl	800d99c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d007      	beq.n	8018f8e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8018f7e:	4b07      	ldr	r3, [pc, #28]	; (8018f9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8018f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f84:	601a      	str	r2, [r3, #0]
 8018f86:	f3bf 8f4f 	dsb	sy
 8018f8a:	f3bf 8f6f 	isb	sy
}
 8018f8e:	bf00      	nop
 8018f90:	3708      	adds	r7, #8
 8018f92:	46bd      	mov	sp, r7
 8018f94:	bd80      	pop	{r7, pc}
 8018f96:	bf00      	nop
 8018f98:	20008838 	.word	0x20008838
 8018f9c:	e000ed04 	.word	0xe000ed04

08018fa0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
    if (vsync_q)
 8018fa6:	4b0e      	ldr	r3, [pc, #56]	; (8018fe0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d013      	beq.n	8018fd6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8018fb2:	4b0b      	ldr	r3, [pc, #44]	; (8018fe0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018fb4:	6818      	ldr	r0, [r3, #0]
 8018fb6:	1d3a      	adds	r2, r7, #4
 8018fb8:	2300      	movs	r3, #0
 8018fba:	490a      	ldr	r1, [pc, #40]	; (8018fe4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8018fbc:	f7f4 fc52 	bl	800d864 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d007      	beq.n	8018fd6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8018fc6:	4b08      	ldr	r3, [pc, #32]	; (8018fe8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8018fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fcc:	601a      	str	r2, [r3, #0]
 8018fce:	f3bf 8f4f 	dsb	sy
 8018fd2:	f3bf 8f6f 	isb	sy
    }
}
 8018fd6:	bf00      	nop
 8018fd8:	3708      	adds	r7, #8
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	2000883c 	.word	0x2000883c
 8018fe4:	20000059 	.word	0x20000059
 8018fe8:	e000ed04 	.word	0xe000ed04

08018fec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8018ff0:	4b08      	ldr	r3, [pc, #32]	; (8019014 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	4908      	ldr	r1, [pc, #32]	; (8019018 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7f4 fd61 	bl	800dac0 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8018ffe:	4b05      	ldr	r3, [pc, #20]	; (8019014 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f04f 32ff 	mov.w	r2, #4294967295
 8019006:	4904      	ldr	r1, [pc, #16]	; (8019018 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8019008:	4618      	mov	r0, r3
 801900a:	f7f4 fd59 	bl	800dac0 <xQueueReceive>
}
 801900e:	bf00      	nop
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	2000883c 	.word	0x2000883c
 8019018:	20000059 	.word	0x20000059

0801901c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af00      	add	r7, sp, #0
 8019022:	4603      	mov	r3, r0
 8019024:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8019026:	88fb      	ldrh	r3, [r7, #6]
 8019028:	4618      	mov	r0, r3
 801902a:	f7f5 fa89 	bl	800e540 <vTaskDelay>
}
 801902e:	bf00      	nop
 8019030:	3708      	adds	r7, #8
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}
	...

08019038 <__NVIC_EnableIRQ>:
{
 8019038:	b480      	push	{r7}
 801903a:	b083      	sub	sp, #12
 801903c:	af00      	add	r7, sp, #0
 801903e:	4603      	mov	r3, r0
 8019040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019046:	2b00      	cmp	r3, #0
 8019048:	db0d      	blt.n	8019066 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801904a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801904e:	b2db      	uxtb	r3, r3
 8019050:	f003 021f 	and.w	r2, r3, #31
 8019054:	4907      	ldr	r1, [pc, #28]	; (8019074 <__NVIC_EnableIRQ+0x3c>)
 8019056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801905a:	095b      	lsrs	r3, r3, #5
 801905c:	2001      	movs	r0, #1
 801905e:	fa00 f202 	lsl.w	r2, r0, r2
 8019062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019066:	bf00      	nop
 8019068:	370c      	adds	r7, #12
 801906a:	46bd      	mov	sp, r7
 801906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019070:	4770      	bx	lr
 8019072:	bf00      	nop
 8019074:	e000e100 	.word	0xe000e100

08019078 <__NVIC_DisableIRQ>:
{
 8019078:	b480      	push	{r7}
 801907a:	b083      	sub	sp, #12
 801907c:	af00      	add	r7, sp, #0
 801907e:	4603      	mov	r3, r0
 8019080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019086:	2b00      	cmp	r3, #0
 8019088:	db12      	blt.n	80190b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801908a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801908e:	b2db      	uxtb	r3, r3
 8019090:	f003 021f 	and.w	r2, r3, #31
 8019094:	4909      	ldr	r1, [pc, #36]	; (80190bc <__NVIC_DisableIRQ+0x44>)
 8019096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801909a:	095b      	lsrs	r3, r3, #5
 801909c:	2001      	movs	r0, #1
 801909e:	fa00 f202 	lsl.w	r2, r0, r2
 80190a2:	3320      	adds	r3, #32
 80190a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80190a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80190ac:	f3bf 8f6f 	isb	sy
}
 80190b0:	bf00      	nop
 80190b2:	370c      	adds	r7, #12
 80190b4:	46bd      	mov	sp, r7
 80190b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ba:	4770      	bx	lr
 80190bc:	e000e100 	.word	0xe000e100

080190c0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80190c0:	b480      	push	{r7}
 80190c2:	b083      	sub	sp, #12
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	6078      	str	r0, [r7, #4]
        return color;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
    }
 80190cc:	4618      	mov	r0, r3
 80190ce:	370c      	adds	r7, #12
 80190d0:	46bd      	mov	sp, r7
 80190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d6:	4770      	bx	lr

080190d8 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	b29b      	uxth	r3, r3
    }
 80190e6:	4618      	mov	r0, r3
 80190e8:	370c      	adds	r7, #12
 80190ea:	46bd      	mov	sp, r7
 80190ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f0:	4770      	bx	lr
	...

080190f4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80190f4:	b480      	push	{r7}
 80190f6:	b083      	sub	sp, #12
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
    {
 80190fc:	4a04      	ldr	r2, [pc, #16]	; (8019110 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	601a      	str	r2, [r3, #0]
    }
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	4618      	mov	r0, r3
 8019106:	370c      	adds	r7, #12
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr
 8019110:	0802d560 	.word	0x0802d560

08019114 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
    }
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7ff ffe9 	bl	80190f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8019122:	2104      	movs	r1, #4
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f011 fd32 	bl	802ab8e <_ZdlPvj>
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	4618      	mov	r0, r3
 801912e:	3708      	adds	r7, #8
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	3344      	adds	r3, #68	; 0x44
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	6878      	ldr	r0, [r7, #4]
 8019146:	4798      	blx	r3
    }
 8019148:	bf00      	nop
 801914a:	3708      	adds	r7, #8
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8019150:	b480      	push	{r7}
 8019152:	b083      	sub	sp, #12
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8019158:	2300      	movs	r3, #0
    }
 801915a:	4618      	mov	r0, r3
 801915c:	370c      	adds	r7, #12
 801915e:	46bd      	mov	sp, r7
 8019160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019164:	4770      	bx	lr
	...

08019168 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8019168:	b480      	push	{r7}
 801916a:	b083      	sub	sp, #12
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
    {
 8019170:	4a04      	ldr	r2, [pc, #16]	; (8019184 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	601a      	str	r2, [r3, #0]
    }
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	4618      	mov	r0, r3
 801917a:	370c      	adds	r7, #12
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr
 8019184:	0802e59c 	.word	0x0802e59c

08019188 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8019188:	b580      	push	{r7, lr}
 801918a:	b082      	sub	sp, #8
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
    }
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f7ff ffe9 	bl	8019168 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8019196:	210c      	movs	r1, #12
 8019198:	6878      	ldr	r0, [r7, #4]
 801919a:	f011 fcf8 	bl	802ab8e <_ZdlPvj>
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	4618      	mov	r0, r3
 80191a2:	3708      	adds	r7, #8
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}

080191a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80191a8:	b480      	push	{r7}
 80191aa:	b083      	sub	sp, #12
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
 80191b0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80191b2:	4a09      	ldr	r2, [pc, #36]	; (80191d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	601a      	str	r2, [r3, #0]
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	683a      	ldr	r2, [r7, #0]
 80191bc:	605a      	str	r2, [r3, #4]
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2200      	movs	r2, #0
 80191c2:	721a      	strb	r2, [r3, #8]
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2200      	movs	r2, #0
 80191c8:	725a      	strb	r2, [r3, #9]
    {
    }
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	4618      	mov	r0, r3
 80191ce:	370c      	adds	r7, #12
 80191d0:	46bd      	mov	sp, r7
 80191d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d6:	4770      	bx	lr
 80191d8:	0802e59c 	.word	0x0802e59c

080191dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	685a      	ldr	r2, [r3, #4]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	685b      	ldr	r3, [r3, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	3314      	adds	r3, #20
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	4610      	mov	r0, r2
 80191f4:	4798      	blx	r3
    }
 80191f6:	bf00      	nop
 80191f8:	3708      	adds	r7, #8
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80191fe:	b580      	push	{r7, lr}
 8019200:	b082      	sub	sp, #8
 8019202:	af00      	add	r7, sp, #0
 8019204:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8019206:	687a      	ldr	r2, [r7, #4]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	3328      	adds	r3, #40	; 0x28
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	4610      	mov	r0, r2
 8019212:	4798      	blx	r3
    }
 8019214:	bf00      	nop
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801921c:	b480      	push	{r7}
 801921e:	b085      	sub	sp, #20
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
 8019228:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	430a      	orrs	r2, r1
 801923c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019244:	f023 0107 	bic.w	r1, r3, #7
 8019248:	687a      	ldr	r2, [r7, #4]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	430a      	orrs	r2, r1
 8019250:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019258:	4b06      	ldr	r3, [pc, #24]	; (8019274 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801925a:	4013      	ands	r3, r2
 801925c:	6839      	ldr	r1, [r7, #0]
 801925e:	68fa      	ldr	r2, [r7, #12]
 8019260:	6812      	ldr	r2, [r2, #0]
 8019262:	430b      	orrs	r3, r1
 8019264:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8019266:	2300      	movs	r3, #0
}
 8019268:	4618      	mov	r0, r3
 801926a:	3714      	adds	r7, #20
 801926c:	46bd      	mov	sp, r7
 801926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019272:	4770      	bx	lr
 8019274:	ffffc000 	.word	0xffffc000

08019278 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b082      	sub	sp, #8
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8019280:	f7f7 fdba 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 8019284:	4603      	mov	r3, r0
 8019286:	4618      	mov	r0, r3
 8019288:	f7ff ffa8 	bl	80191dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801928c:	bf00      	nop
 801928e:	3708      	adds	r7, #8
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}

08019294 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
    assert(0);
 801929c:	4b02      	ldr	r3, [pc, #8]	; (80192a8 <DMA2D_XferErrorCallback+0x14>)
 801929e:	4a03      	ldr	r2, [pc, #12]	; (80192ac <DMA2D_XferErrorCallback+0x18>)
 80192a0:	213e      	movs	r1, #62	; 0x3e
 80192a2:	4803      	ldr	r0, [pc, #12]	; (80192b0 <DMA2D_XferErrorCallback+0x1c>)
 80192a4:	f011 fc9e 	bl	802abe4 <__assert_func>
 80192a8:	0802c5f4 	.word	0x0802c5f4
 80192ac:	0802d57c 	.word	0x0802d57c
 80192b0:	0802c5f8 	.word	0x0802c5f8

080192b4 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	3318      	adds	r3, #24
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7f9 fa22 	bl	801270a <_ZN8touchgfx9colortypeC1Ev>
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	4618      	mov	r0, r3
 80192ca:	3708      	adds	r7, #8
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80192d0:	b5b0      	push	{r4, r5, r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80192d8:	687a      	ldr	r2, [r7, #4]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	330c      	adds	r3, #12
 80192de:	4619      	mov	r1, r3
 80192e0:	4610      	mov	r0, r2
 80192e2:	f7ff ff61 	bl	80191a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80192e6:	4a0e      	ldr	r2, [pc, #56]	; (8019320 <_ZN10STM32F7DMAC1Ev+0x50>)
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	601a      	str	r2, [r3, #0]
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	f103 000c 	add.w	r0, r3, #12
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	3320      	adds	r3, #32
 80192f6:	2260      	movs	r2, #96	; 0x60
 80192f8:	4619      	mov	r1, r3
 80192fa:	f003 f8ab 	bl	801c454 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	3320      	adds	r3, #32
 8019302:	245f      	movs	r4, #95	; 0x5f
 8019304:	461d      	mov	r5, r3
 8019306:	2c00      	cmp	r4, #0
 8019308:	db05      	blt.n	8019316 <_ZN10STM32F7DMAC1Ev+0x46>
 801930a:	4628      	mov	r0, r5
 801930c:	f7ff ffd2 	bl	80192b4 <_ZN8touchgfx6BlitOpC1Ev>
 8019310:	3520      	adds	r5, #32
 8019312:	3c01      	subs	r4, #1
 8019314:	e7f7      	b.n	8019306 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	4618      	mov	r0, r3
 801931a:	3708      	adds	r7, #8
 801931c:	46bd      	mov	sp, r7
 801931e:	bdb0      	pop	{r4, r5, r7, pc}
 8019320:	0802d510 	.word	0x0802d510

08019324 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8019324:	b580      	push	{r7, lr}
 8019326:	b082      	sub	sp, #8
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	4a0b      	ldr	r2, [pc, #44]	; (801935c <_ZN10STM32F7DMAD1Ev+0x38>)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8019332:	480b      	ldr	r0, [pc, #44]	; (8019360 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8019334:	f7eb ffc8 	bl	80052c8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8019338:	205a      	movs	r0, #90	; 0x5a
 801933a:	f7ff fe9d 	bl	8019078 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	330c      	adds	r3, #12
 8019342:	4618      	mov	r0, r3
 8019344:	f000 faa0 	bl	8019888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	4618      	mov	r0, r3
 801934c:	f7ff ff0c 	bl	8019168 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	4618      	mov	r0, r3
 8019354:	3708      	adds	r7, #8
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	0802d510 	.word	0x0802d510
 8019360:	2000c7d4 	.word	0x2000c7d4

08019364 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
}
 801936c:	6878      	ldr	r0, [r7, #4]
 801936e:	f7ff ffd9 	bl	8019324 <_ZN10STM32F7DMAD1Ev>
 8019372:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8019376:	6878      	ldr	r0, [r7, #4]
 8019378:	f011 fc09 	bl	802ab8e <_ZdlPvj>
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	4618      	mov	r0, r3
 8019380:	3708      	adds	r7, #8
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
	...

08019388 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b082      	sub	sp, #8
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8019390:	4b09      	ldr	r3, [pc, #36]	; (80193b8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8019392:	4a0a      	ldr	r2, [pc, #40]	; (80193bc <_ZN10STM32F7DMA10initializeEv+0x34>)
 8019394:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8019396:	4808      	ldr	r0, [pc, #32]	; (80193b8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8019398:	f7eb ff4c 	bl	8005234 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801939c:	4b06      	ldr	r3, [pc, #24]	; (80193b8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801939e:	4a08      	ldr	r2, [pc, #32]	; (80193c0 <_ZN10STM32F7DMA10initializeEv+0x38>)
 80193a0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80193a2:	4b05      	ldr	r3, [pc, #20]	; (80193b8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80193a4:	4a07      	ldr	r2, [pc, #28]	; (80193c4 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80193a6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80193a8:	205a      	movs	r0, #90	; 0x5a
 80193aa:	f7ff fe45 	bl	8019038 <__NVIC_EnableIRQ>
}
 80193ae:	bf00      	nop
 80193b0:	3708      	adds	r7, #8
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	2000c7d4 	.word	0x2000c7d4
 80193bc:	4002b000 	.word	0x4002b000
 80193c0:	08019279 	.word	0x08019279
 80193c4:	08019295 	.word	0x08019295

080193c8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80193c8:	b480      	push	{r7}
 80193ca:	b083      	sub	sp, #12
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80193d0:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	370c      	adds	r7, #12
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr

080193e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80193e0:	b590      	push	{r4, r7, lr}
 80193e2:	b08d      	sub	sp, #52	; 0x34
 80193e4:	af02      	add	r7, sp, #8
 80193e6:	6078      	str	r0, [r7, #4]
 80193e8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80193ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80193ee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80193f0:	2300      	movs	r3, #0
 80193f2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80193f8:	2b20      	cmp	r3, #32
 80193fa:	d007      	beq.n	801940c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2b40      	cmp	r3, #64	; 0x40
 8019402:	d003      	beq.n	801940c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	2b04      	cmp	r3, #4
 801940a:	d101      	bne.n	8019410 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801940c:	2301      	movs	r3, #1
 801940e:	e000      	b.n	8019412 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8019410:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8019412:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8019418:	2b80      	cmp	r3, #128	; 0x80
 801941a:	d004      	beq.n	8019426 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801941c:	683b      	ldr	r3, [r7, #0]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019424:	d101      	bne.n	801942a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8019426:	2301      	movs	r3, #1
 8019428:	e000      	b.n	801942c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801942a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801942c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801942e:	f7f7 fcef 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 8019432:	4602      	mov	r2, r0
 8019434:	6813      	ldr	r3, [r2, #0]
 8019436:	3320      	adds	r3, #32
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	4610      	mov	r0, r2
 801943c:	4798      	blx	r3
 801943e:	4603      	mov	r3, r0
 8019440:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	2b40      	cmp	r3, #64	; 0x40
 8019448:	d01d      	beq.n	8019486 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801944a:	2b40      	cmp	r3, #64	; 0x40
 801944c:	d804      	bhi.n	8019458 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801944e:	2b04      	cmp	r3, #4
 8019450:	d00e      	beq.n	8019470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8019452:	2b20      	cmp	r3, #32
 8019454:	d017      	beq.n	8019486 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8019456:	e019      	b.n	801948c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8019458:	2b80      	cmp	r3, #128	; 0x80
 801945a:	d003      	beq.n	8019464 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801945c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019460:	d003      	beq.n	801946a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8019462:	e013      	b.n	801948c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8019464:	230a      	movs	r3, #10
 8019466:	623b      	str	r3, [r7, #32]
        break;
 8019468:	e01a      	b.n	80194a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801946a:	2309      	movs	r3, #9
 801946c:	623b      	str	r3, [r7, #32]
        break;
 801946e:	e017      	b.n	80194a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8019470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019474:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019476:	7f7b      	ldrb	r3, [r7, #29]
 8019478:	2b10      	cmp	r3, #16
 801947a:	d101      	bne.n	8019480 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801947c:	2302      	movs	r3, #2
 801947e:	e000      	b.n	8019482 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8019480:	2301      	movs	r3, #1
 8019482:	623b      	str	r3, [r7, #32]
        break;
 8019484:	e00c      	b.n	80194a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8019486:	2300      	movs	r3, #0
 8019488:	623b      	str	r3, [r7, #32]
        break;
 801948a:	e009      	b.n	80194a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801948c:	2300      	movs	r3, #0
 801948e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019490:	7f7b      	ldrb	r3, [r7, #29]
 8019492:	2b10      	cmp	r3, #16
 8019494:	d101      	bne.n	801949a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8019496:	2302      	movs	r3, #2
 8019498:	e000      	b.n	801949c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801949a:	2301      	movs	r3, #1
 801949c:	623b      	str	r3, [r7, #32]
        break;
 801949e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80194a0:	4a76      	ldr	r2, [pc, #472]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80194a6:	7f7b      	ldrb	r3, [r7, #29]
 80194a8:	2b10      	cmp	r3, #16
 80194aa:	d101      	bne.n	80194b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80194ac:	2302      	movs	r3, #2
 80194ae:	e000      	b.n	80194b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80194b0:	2301      	movs	r3, #1
 80194b2:	4a72      	ldr	r2, [pc, #456]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194b4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	8adb      	ldrh	r3, [r3, #22]
 80194ba:	461a      	mov	r2, r3
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	8a1b      	ldrh	r3, [r3, #16]
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	461a      	mov	r2, r3
 80194c4:	4b6d      	ldr	r3, [pc, #436]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194c6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80194c8:	7f7b      	ldrb	r3, [r7, #29]
 80194ca:	2b10      	cmp	r3, #16
 80194cc:	d101      	bne.n	80194d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80194ce:	2202      	movs	r2, #2
 80194d0:	e000      	b.n	80194d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80194d2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	8adb      	ldrh	r3, [r3, #22]
 80194d8:	4619      	mov	r1, r3
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	8a1b      	ldrh	r3, [r3, #16]
 80194de:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80194e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80194e2:	4866      	ldr	r0, [pc, #408]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194e4:	f7ff fe9a 	bl	801921c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80194e8:	4a64      	ldr	r2, [pc, #400]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194ea:	6a3b      	ldr	r3, [r7, #32]
 80194ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80194ee:	683b      	ldr	r3, [r7, #0]
 80194f0:	8a9b      	ldrh	r3, [r3, #20]
 80194f2:	461a      	mov	r2, r3
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	8a1b      	ldrh	r3, [r3, #16]
 80194f8:	1ad3      	subs	r3, r2, r3
 80194fa:	461a      	mov	r2, r3
 80194fc:	4b5f      	ldr	r3, [pc, #380]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194fe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8019500:	7ffb      	ldrb	r3, [r7, #31]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d103      	bne.n	801950e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8019506:	7fbb      	ldrb	r3, [r7, #30]
 8019508:	2b00      	cmp	r3, #0
 801950a:	f000 8082 	beq.w	8019612 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	7f1b      	ldrb	r3, [r3, #28]
 8019512:	2bff      	cmp	r3, #255	; 0xff
 8019514:	d008      	beq.n	8019528 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8019516:	4b59      	ldr	r3, [pc, #356]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019518:	2202      	movs	r2, #2
 801951a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	7f1b      	ldrb	r3, [r3, #28]
 8019520:	461a      	mov	r2, r3
 8019522:	4b56      	ldr	r3, [pc, #344]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019524:	635a      	str	r2, [r3, #52]	; 0x34
 8019526:	e002      	b.n	801952e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8019528:	4b54      	ldr	r3, [pc, #336]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801952a:	2200      	movs	r2, #0
 801952c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801952e:	7fbb      	ldrb	r3, [r7, #30]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d059      	beq.n	80195e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8019534:	7f7b      	ldrb	r3, [r7, #29]
 8019536:	2b10      	cmp	r3, #16
 8019538:	d14a      	bne.n	80195d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	3318      	adds	r3, #24
 801953e:	4618      	mov	r0, r3
 8019540:	f7ff fdca 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 8019544:	4603      	mov	r3, r0
 8019546:	12db      	asrs	r3, r3, #11
 8019548:	f003 021f 	and.w	r2, r3, #31
 801954c:	4613      	mov	r3, r2
 801954e:	021b      	lsls	r3, r3, #8
 8019550:	1a9b      	subs	r3, r3, r2
 8019552:	4a4b      	ldr	r2, [pc, #300]	; (8019680 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8019554:	fb82 1203 	smull	r1, r2, r2, r3
 8019558:	441a      	add	r2, r3
 801955a:	1112      	asrs	r2, r2, #4
 801955c:	17db      	asrs	r3, r3, #31
 801955e:	1ad3      	subs	r3, r2, r3
 8019560:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	3318      	adds	r3, #24
 8019566:	4618      	mov	r0, r3
 8019568:	f7ff fdb6 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 801956c:	4603      	mov	r3, r0
 801956e:	115b      	asrs	r3, r3, #5
 8019570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019574:	4613      	mov	r3, r2
 8019576:	021b      	lsls	r3, r3, #8
 8019578:	1a9b      	subs	r3, r3, r2
 801957a:	4a42      	ldr	r2, [pc, #264]	; (8019684 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801957c:	fb82 1203 	smull	r1, r2, r2, r3
 8019580:	441a      	add	r2, r3
 8019582:	1152      	asrs	r2, r2, #5
 8019584:	17db      	asrs	r3, r3, #31
 8019586:	1ad3      	subs	r3, r2, r3
 8019588:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	3318      	adds	r3, #24
 801958e:	4618      	mov	r0, r3
 8019590:	f7ff fda2 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 8019594:	4603      	mov	r3, r0
 8019596:	f003 021f 	and.w	r2, r3, #31
 801959a:	4613      	mov	r3, r2
 801959c:	021b      	lsls	r3, r3, #8
 801959e:	1a9b      	subs	r3, r3, r2
 80195a0:	4a37      	ldr	r2, [pc, #220]	; (8019680 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80195a2:	fb82 1203 	smull	r1, r2, r2, r3
 80195a6:	441a      	add	r2, r3
 80195a8:	1112      	asrs	r2, r2, #4
 80195aa:	17db      	asrs	r3, r3, #31
 80195ac:	1ad3      	subs	r3, r2, r3
 80195ae:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	7f1b      	ldrb	r3, [r3, #28]
 80195b4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	061a      	lsls	r2, r3, #24
 80195ba:	69bb      	ldr	r3, [r7, #24]
 80195bc:	041b      	lsls	r3, r3, #16
 80195be:	431a      	orrs	r2, r3
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	021b      	lsls	r3, r3, #8
 80195c4:	431a      	orrs	r2, r3
 80195c6:	693b      	ldr	r3, [r7, #16]
 80195c8:	4313      	orrs	r3, r2
 80195ca:	4a2c      	ldr	r2, [pc, #176]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80195cc:	6353      	str	r3, [r2, #52]	; 0x34
 80195ce:	e00b      	b.n	80195e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	3318      	adds	r3, #24
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7ff fd73 	bl	80190c0 <_ZNK8touchgfx9colortype10getColor32Ev>
 80195da:	4602      	mov	r2, r0
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	7f1b      	ldrb	r3, [r3, #28]
 80195e0:	061b      	lsls	r3, r3, #24
 80195e2:	4313      	orrs	r3, r2
 80195e4:	4a25      	ldr	r2, [pc, #148]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80195e6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	8adb      	ldrh	r3, [r3, #22]
 80195ec:	461a      	mov	r2, r3
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	8a1b      	ldrh	r3, [r3, #16]
 80195f2:	1ad3      	subs	r3, r2, r3
 80195f4:	461a      	mov	r2, r3
 80195f6:	4b21      	ldr	r3, [pc, #132]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80195f8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80195fa:	7f7b      	ldrb	r3, [r7, #29]
 80195fc:	2b10      	cmp	r3, #16
 80195fe:	d101      	bne.n	8019604 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8019600:	2302      	movs	r3, #2
 8019602:	e000      	b.n	8019606 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8019604:	2301      	movs	r3, #1
 8019606:	4a1d      	ldr	r2, [pc, #116]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019608:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801960a:	2100      	movs	r1, #0
 801960c:	481b      	ldr	r0, [pc, #108]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801960e:	f7ec f8db 	bl	80057c8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8019612:	2101      	movs	r1, #1
 8019614:	4819      	ldr	r0, [pc, #100]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019616:	f7ec f8d7 	bl	80057c8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801961a:	7ffb      	ldrb	r3, [r7, #31]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d102      	bne.n	8019626 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8019620:	7fbb      	ldrb	r3, [r7, #30]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d015      	beq.n	8019652 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801962a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019630:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019636:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801963c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019642:	9301      	str	r3, [sp, #4]
 8019644:	9200      	str	r2, [sp, #0]
 8019646:	4623      	mov	r3, r4
 8019648:	4602      	mov	r2, r0
 801964a:	480c      	ldr	r0, [pc, #48]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801964c:	f7eb fedf 	bl	800540e <HAL_DMA2D_BlendingStart_IT>
 8019650:	e00f      	b.n	8019672 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019656:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801965c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019662:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019668:	9300      	str	r3, [sp, #0]
 801966a:	4603      	mov	r3, r0
 801966c:	4803      	ldr	r0, [pc, #12]	; (801967c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801966e:	f7eb fe9b 	bl	80053a8 <HAL_DMA2D_Start_IT>
    }
}
 8019672:	bf00      	nop
 8019674:	372c      	adds	r7, #44	; 0x2c
 8019676:	46bd      	mov	sp, r7
 8019678:	bd90      	pop	{r4, r7, pc}
 801967a:	bf00      	nop
 801967c:	2000c7d4 	.word	0x2000c7d4
 8019680:	84210843 	.word	0x84210843
 8019684:	82082083 	.word	0x82082083

08019688 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8019688:	b590      	push	{r4, r7, lr}
 801968a:	b08d      	sub	sp, #52	; 0x34
 801968c:	af02      	add	r7, sp, #8
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8019692:	f7f7 fbbd 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 8019696:	4602      	mov	r2, r0
 8019698:	6813      	ldr	r3, [r2, #0]
 801969a:	3320      	adds	r3, #32
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	4610      	mov	r0, r2
 80196a0:	4798      	blx	r3
 80196a2:	4603      	mov	r3, r0
 80196a4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80196a6:	7ffb      	ldrb	r3, [r7, #31]
 80196a8:	2b10      	cmp	r3, #16
 80196aa:	d101      	bne.n	80196b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80196ac:	2302      	movs	r3, #2
 80196ae:	e000      	b.n	80196b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80196b0:	2301      	movs	r3, #1
 80196b2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80196b4:	2300      	movs	r3, #0
 80196b6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80196b8:	7ffb      	ldrb	r3, [r7, #31]
 80196ba:	2b10      	cmp	r3, #16
 80196bc:	d149      	bne.n	8019752 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	3318      	adds	r3, #24
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7ff fd08 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 80196c8:	4603      	mov	r3, r0
 80196ca:	12db      	asrs	r3, r3, #11
 80196cc:	f003 021f 	and.w	r2, r3, #31
 80196d0:	4613      	mov	r3, r2
 80196d2:	021b      	lsls	r3, r3, #8
 80196d4:	1a9b      	subs	r3, r3, r2
 80196d6:	4a69      	ldr	r2, [pc, #420]	; (801987c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80196d8:	fb82 1203 	smull	r1, r2, r2, r3
 80196dc:	441a      	add	r2, r3
 80196de:	1112      	asrs	r2, r2, #4
 80196e0:	17db      	asrs	r3, r3, #31
 80196e2:	1ad3      	subs	r3, r2, r3
 80196e4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	3318      	adds	r3, #24
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7ff fcf4 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 80196f0:	4603      	mov	r3, r0
 80196f2:	115b      	asrs	r3, r3, #5
 80196f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80196f8:	4613      	mov	r3, r2
 80196fa:	021b      	lsls	r3, r3, #8
 80196fc:	1a9b      	subs	r3, r3, r2
 80196fe:	4a60      	ldr	r2, [pc, #384]	; (8019880 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8019700:	fb82 1203 	smull	r1, r2, r2, r3
 8019704:	441a      	add	r2, r3
 8019706:	1152      	asrs	r2, r2, #5
 8019708:	17db      	asrs	r3, r3, #31
 801970a:	1ad3      	subs	r3, r2, r3
 801970c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	3318      	adds	r3, #24
 8019712:	4618      	mov	r0, r3
 8019714:	f7ff fce0 	bl	80190d8 <_ZNK8touchgfx9colortypecvtEv>
 8019718:	4603      	mov	r3, r0
 801971a:	f003 021f 	and.w	r2, r3, #31
 801971e:	4613      	mov	r3, r2
 8019720:	021b      	lsls	r3, r3, #8
 8019722:	1a9b      	subs	r3, r3, r2
 8019724:	4a55      	ldr	r2, [pc, #340]	; (801987c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8019726:	fb82 1203 	smull	r1, r2, r2, r3
 801972a:	441a      	add	r2, r3
 801972c:	1112      	asrs	r2, r2, #4
 801972e:	17db      	asrs	r3, r3, #31
 8019730:	1ad3      	subs	r3, r2, r3
 8019732:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8019734:	683b      	ldr	r3, [r7, #0]
 8019736:	7f1b      	ldrb	r3, [r3, #28]
 8019738:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	061a      	lsls	r2, r3, #24
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	041b      	lsls	r3, r3, #16
 8019742:	431a      	orrs	r2, r3
 8019744:	693b      	ldr	r3, [r7, #16]
 8019746:	021b      	lsls	r3, r3, #8
 8019748:	4313      	orrs	r3, r2
 801974a:	68fa      	ldr	r2, [r7, #12]
 801974c:	4313      	orrs	r3, r2
 801974e:	623b      	str	r3, [r7, #32]
 8019750:	e00b      	b.n	801976a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	7f1b      	ldrb	r3, [r3, #28]
 8019756:	061b      	lsls	r3, r3, #24
 8019758:	461c      	mov	r4, r3
 801975a:	683b      	ldr	r3, [r7, #0]
 801975c:	3318      	adds	r3, #24
 801975e:	4618      	mov	r0, r3
 8019760:	f7ff fcae 	bl	80190c0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8019764:	4603      	mov	r3, r0
 8019766:	4323      	orrs	r3, r4
 8019768:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	2b08      	cmp	r3, #8
 8019770:	d103      	bne.n	801977a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8019772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019778:	e003      	b.n	8019782 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801977a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801977e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019780:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8019782:	4a40      	ldr	r2, [pc, #256]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019786:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8019788:	7ffb      	ldrb	r3, [r7, #31]
 801978a:	2b10      	cmp	r3, #16
 801978c:	d101      	bne.n	8019792 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801978e:	2302      	movs	r3, #2
 8019790:	e000      	b.n	8019794 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8019792:	2301      	movs	r3, #1
 8019794:	4a3b      	ldr	r2, [pc, #236]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019796:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	8adb      	ldrh	r3, [r3, #22]
 801979c:	461a      	mov	r2, r3
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	8a1b      	ldrh	r3, [r3, #16]
 80197a2:	1ad3      	subs	r3, r2, r3
 80197a4:	461a      	mov	r2, r3
 80197a6:	4b37      	ldr	r3, [pc, #220]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197a8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80197aa:	7ffb      	ldrb	r3, [r7, #31]
 80197ac:	2b10      	cmp	r3, #16
 80197ae:	d101      	bne.n	80197b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80197b0:	2202      	movs	r2, #2
 80197b2:	e000      	b.n	80197b6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80197b4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	8adb      	ldrh	r3, [r3, #22]
 80197ba:	4619      	mov	r1, r3
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	8a1b      	ldrh	r3, [r3, #16]
 80197c0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80197c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197c4:	482f      	ldr	r0, [pc, #188]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197c6:	f7ff fd29 	bl	801921c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80197ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80197d0:	d11e      	bne.n	8019810 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80197d2:	4b2c      	ldr	r3, [pc, #176]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197d4:	2201      	movs	r2, #1
 80197d6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80197d8:	4a2a      	ldr	r2, [pc, #168]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197da:	6a3b      	ldr	r3, [r7, #32]
 80197dc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80197de:	4b29      	ldr	r3, [pc, #164]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197e0:	2209      	movs	r2, #9
 80197e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	8adb      	ldrh	r3, [r3, #22]
 80197e8:	461a      	mov	r2, r3
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	8a1b      	ldrh	r3, [r3, #16]
 80197ee:	1ad3      	subs	r3, r2, r3
 80197f0:	461a      	mov	r2, r3
 80197f2:	4b24      	ldr	r3, [pc, #144]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80197f4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80197f6:	7ffb      	ldrb	r3, [r7, #31]
 80197f8:	2b10      	cmp	r3, #16
 80197fa:	d101      	bne.n	8019800 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80197fc:	2302      	movs	r3, #2
 80197fe:	e000      	b.n	8019802 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8019800:	2301      	movs	r3, #1
 8019802:	4a20      	ldr	r2, [pc, #128]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019804:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8019806:	2100      	movs	r1, #0
 8019808:	481e      	ldr	r0, [pc, #120]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801980a:	f7eb ffdd 	bl	80057c8 <HAL_DMA2D_ConfigLayer>
 801980e:	e005      	b.n	801981c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8019810:	4a1c      	ldr	r2, [pc, #112]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019812:	69bb      	ldr	r3, [r7, #24]
 8019814:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8019816:	4b1b      	ldr	r3, [pc, #108]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019818:	2200      	movs	r2, #0
 801981a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801981c:	2101      	movs	r1, #1
 801981e:	4819      	ldr	r0, [pc, #100]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019820:	f7eb ffd2 	bl	80057c8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8019824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801982a:	d115      	bne.n	8019858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019830:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019836:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801983c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019842:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019848:	9301      	str	r3, [sp, #4]
 801984a:	9200      	str	r2, [sp, #0]
 801984c:	4623      	mov	r3, r4
 801984e:	4602      	mov	r2, r0
 8019850:	480c      	ldr	r0, [pc, #48]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019852:	f7eb fddc 	bl	800540e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8019856:	e00d      	b.n	8019874 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019862:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	460b      	mov	r3, r1
 801986c:	6a39      	ldr	r1, [r7, #32]
 801986e:	4805      	ldr	r0, [pc, #20]	; (8019884 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019870:	f7eb fd9a 	bl	80053a8 <HAL_DMA2D_Start_IT>
}
 8019874:	bf00      	nop
 8019876:	372c      	adds	r7, #44	; 0x2c
 8019878:	46bd      	mov	sp, r7
 801987a:	bd90      	pop	{r4, r7, pc}
 801987c:	84210843 	.word	0x84210843
 8019880:	82082083 	.word	0x82082083
 8019884:	2000c7d4 	.word	0x2000c7d4

08019888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8019888:	b580      	push	{r7, lr}
 801988a:	b082      	sub	sp, #8
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
 8019890:	4a05      	ldr	r2, [pc, #20]	; (80198a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	601a      	str	r2, [r3, #0]
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	4618      	mov	r0, r3
 801989a:	f7ff fc2b 	bl	80190f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	4618      	mov	r0, r3
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	0802e5ec 	.word	0x0802e5ec

080198ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b082      	sub	sp, #8
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7ff ffe7 	bl	8019888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80198ba:	2114      	movs	r1, #20
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	f011 f966 	bl	802ab8e <_ZdlPvj>
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	4618      	mov	r0, r3
 80198c6:	3708      	adds	r7, #8
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
        texts = t;
 80198d4:	4a04      	ldr	r2, [pc, #16]	; (80198e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	6013      	str	r3, [r2, #0]
    }
 80198da:	bf00      	nop
 80198dc:	370c      	adds	r7, #12
 80198de:	46bd      	mov	sp, r7
 80198e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	2000c08c 	.word	0x2000c08c

080198ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80198ec:	b480      	push	{r7}
 80198ee:	b085      	sub	sp, #20
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	60f8      	str	r0, [r7, #12]
 80198f4:	60b9      	str	r1, [r7, #8]
 80198f6:	607a      	str	r2, [r7, #4]
 80198f8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80198fa:	4a0b      	ldr	r2, [pc, #44]	; (8019928 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	601a      	str	r2, [r3, #0]
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	68ba      	ldr	r2, [r7, #8]
 8019904:	605a      	str	r2, [r3, #4]
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	609a      	str	r2, [r3, #8]
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	683a      	ldr	r2, [r7, #0]
 8019910:	60da      	str	r2, [r3, #12]
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	69ba      	ldr	r2, [r7, #24]
 8019916:	611a      	str	r2, [r3, #16]
    {
    }
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	4618      	mov	r0, r3
 801991c:	3714      	adds	r7, #20
 801991e:	46bd      	mov	sp, r7
 8019920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019924:	4770      	bx	lr
 8019926:	bf00      	nop
 8019928:	0802d67c 	.word	0x0802d67c

0801992c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801992c:	b480      	push	{r7}
 801992e:	b083      	sub	sp, #12
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
    {
 8019934:	4a04      	ldr	r2, [pc, #16]	; (8019948 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	601a      	str	r2, [r3, #0]
    }
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	4618      	mov	r0, r3
 801993e:	370c      	adds	r7, #12
 8019940:	46bd      	mov	sp, r7
 8019942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019946:	4770      	bx	lr
 8019948:	0802d67c 	.word	0x0802d67c

0801994c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801994c:	b580      	push	{r7, lr}
 801994e:	b082      	sub	sp, #8
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
    }
 8019954:	6878      	ldr	r0, [r7, #4]
 8019956:	f7ff ffe9 	bl	801992c <_ZN8touchgfx7MVPHeapD1Ev>
 801995a:	2114      	movs	r1, #20
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f011 f916 	bl	802ab8e <_ZdlPvj>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	4618      	mov	r0, r3
 8019966:	3708      	adds	r7, #8
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}

0801996c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801996c:	b480      	push	{r7}
 801996e:	b083      	sub	sp, #12
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
    {
 8019974:	4a04      	ldr	r2, [pc, #16]	; (8019988 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	601a      	str	r2, [r3, #0]
    }
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4618      	mov	r0, r3
 801997e:	370c      	adds	r7, #12
 8019980:	46bd      	mov	sp, r7
 8019982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019986:	4770      	bx	lr
 8019988:	0802f0b8 	.word	0x0802f0b8

0801998c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
    }
 8019994:	6878      	ldr	r0, [r7, #4]
 8019996:	f7ff ffe9 	bl	801996c <_ZN8touchgfx3LCDD1Ev>
 801999a:	2108      	movs	r1, #8
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f011 f8f6 	bl	802ab8e <_ZdlPvj>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	4618      	mov	r0, r3
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80199ac:	b480      	push	{r7}
 80199ae:	b083      	sub	sp, #12
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	2200      	movs	r2, #0
 80199b8:	801a      	strh	r2, [r3, #0]
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	2200      	movs	r2, #0
 80199be:	805a      	strh	r2, [r3, #2]
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	2200      	movs	r2, #0
 80199c4:	809a      	strh	r2, [r3, #4]
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	2200      	movs	r2, #0
 80199ca:	80da      	strh	r2, [r3, #6]
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	2200      	movs	r2, #0
 80199d0:	811a      	strh	r2, [r3, #8]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	2200      	movs	r2, #0
 80199d6:	815a      	strh	r2, [r3, #10]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	2200      	movs	r2, #0
 80199dc:	819a      	strh	r2, [r3, #12]
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	2200      	movs	r2, #0
 80199e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	4618      	mov	r0, r3
 80199e8:	370c      	adds	r7, #12
 80199ea:	46bd      	mov	sp, r7
 80199ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f0:	4770      	bx	lr

080199f2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80199f2:	b580      	push	{r7, lr}
 80199f4:	b082      	sub	sp, #8
 80199f6:	af00      	add	r7, sp, #0
 80199f8:	6078      	str	r0, [r7, #4]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7ff ffd5 	bl	80199ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2200      	movs	r2, #0
 8019a06:	611a      	str	r2, [r3, #16]
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	829a      	strh	r2, [r3, #20]
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	4618      	mov	r0, r3
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}

08019a18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b084      	sub	sp, #16
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	60f8      	str	r0, [r7, #12]
 8019a20:	60b9      	str	r1, [r7, #8]
 8019a22:	607a      	str	r2, [r7, #4]
 8019a24:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8019a26:	4a44      	ldr	r2, [pc, #272]	; (8019b38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	601a      	str	r2, [r3, #0]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	68ba      	ldr	r2, [r7, #8]
 8019a30:	605a      	str	r2, [r3, #4]
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	609a      	str	r2, [r3, #8]
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	683a      	ldr	r2, [r7, #0]
 8019a3c:	60da      	str	r2, [r3, #12]
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	2200      	movs	r2, #0
 8019a42:	611a      	str	r2, [r3, #16]
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2200      	movs	r2, #0
 8019a48:	615a      	str	r2, [r3, #20]
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	619a      	str	r2, [r3, #24]
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	331c      	adds	r3, #28
 8019a54:	4618      	mov	r0, r3
 8019a56:	f7ff ffcc 	bl	80199f2 <_ZN8touchgfx8GesturesC1Ev>
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	2200      	movs	r2, #0
 8019a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	2200      	movs	r2, #0
 8019a70:	645a      	str	r2, [r3, #68]	; 0x44
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	2200      	movs	r2, #0
 8019a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	2201      	movs	r2, #1
 8019a7e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	2201      	movs	r2, #1
 8019a86:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	3350      	adds	r3, #80	; 0x50
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7f8 fe55 	bl	8012744 <_ZN8touchgfx4RectC1Ev>
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2201      	movs	r2, #1
 8019a9e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	2200      	movs	r2, #0
 8019aae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	2201      	movs	r2, #1
 8019ab6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	2200      	movs	r2, #0
 8019abe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	2200      	movs	r2, #0
 8019ace:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	2200      	movs	r2, #0
 8019ade:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	671a      	str	r2, [r3, #112]	; 0x70
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	2200      	movs	r2, #0
 8019aec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8019af0:	4a12      	ldr	r2, [pc, #72]	; (8019b3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8019af6:	4a12      	ldr	r2, [pc, #72]	; (8019b40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8019af8:	8b3b      	ldrh	r3, [r7, #24]
 8019afa:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8019afc:	4a11      	ldr	r2, [pc, #68]	; (8019b44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8019afe:	8bbb      	ldrh	r3, [r7, #28]
 8019b00:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8019b02:	4b11      	ldr	r3, [pc, #68]	; (8019b48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8019b04:	2200      	movs	r2, #0
 8019b06:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8019b08:	4b0d      	ldr	r3, [pc, #52]	; (8019b40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8019b0a:	881a      	ldrh	r2, [r3, #0]
 8019b0c:	4b0f      	ldr	r3, [pc, #60]	; (8019b4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8019b0e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8019b10:	4b0c      	ldr	r3, [pc, #48]	; (8019b44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8019b12:	881a      	ldrh	r2, [r3, #0]
 8019b14:	4b0e      	ldr	r3, [pc, #56]	; (8019b50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8019b16:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8019b18:	8b3a      	ldrh	r2, [r7, #24]
 8019b1a:	8bbb      	ldrh	r3, [r7, #28]
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d301      	bcc.n	8019b24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8019b20:	2200      	movs	r2, #0
 8019b22:	e000      	b.n	8019b26 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8019b24:	2201      	movs	r2, #1
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3710      	adds	r7, #16
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}
 8019b36:	bf00      	nop
 8019b38:	0802e158 	.word	0x0802e158
 8019b3c:	2000bff0 	.word	0x2000bff0
 8019b40:	2000bfe2 	.word	0x2000bfe2
 8019b44:	2000bfe4 	.word	0x2000bfe4
 8019b48:	2000bfe6 	.word	0x2000bfe6
 8019b4c:	2000bfe8 	.word	0x2000bfe8
 8019b50:	2000bfea 	.word	0x2000bfea

08019b54 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b082      	sub	sp, #8
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
 8019b5c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7f7 fb79 	bl	8011258 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8019b66:	bf00      	nop
 8019b68:	3708      	adds	r7, #8
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
	...

08019b70 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b086      	sub	sp, #24
 8019b74:	af02      	add	r7, sp, #8
 8019b76:	60f8      	str	r0, [r7, #12]
 8019b78:	60b9      	str	r1, [r7, #8]
 8019b7a:	607a      	str	r2, [r7, #4]
 8019b7c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	69bb      	ldr	r3, [r7, #24]
 8019b82:	9300      	str	r3, [sp, #0]
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	687a      	ldr	r2, [r7, #4]
 8019b88:	68b9      	ldr	r1, [r7, #8]
 8019b8a:	f7ff feaf 	bl	80198ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8019b8e:	4a04      	ldr	r2, [pc, #16]	; (8019ba0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	601a      	str	r2, [r3, #0]
    {

    }
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	4618      	mov	r0, r3
 8019b98:	3710      	adds	r7, #16
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	bd80      	pop	{r7, pc}
 8019b9e:	bf00      	nop
 8019ba0:	0802d668 	.word	0x0802d668

08019ba4 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	4801      	ldr	r0, [pc, #4]	; (8019bb0 <__tcf_0+0xc>)
 8019baa:	f000 f9dd 	bl	8019f68 <_ZN12FrontendHeapD1Ev>
 8019bae:	bd80      	pop	{r7, pc}
 8019bb0:	20008840 	.word	0x20008840

08019bb4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8019bb8:	4b08      	ldr	r3, [pc, #32]	; (8019bdc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f003 0301 	and.w	r3, r3, #1
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d108      	bne.n	8019bd6 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8019bc4:	4806      	ldr	r0, [pc, #24]	; (8019be0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8019bc6:	f000 f831 	bl	8019c2c <_ZN12FrontendHeapC1Ev>
 8019bca:	4b04      	ldr	r3, [pc, #16]	; (8019bdc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019bcc:	2201      	movs	r2, #1
 8019bce:	601a      	str	r2, [r3, #0]
 8019bd0:	4804      	ldr	r0, [pc, #16]	; (8019be4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8019bd2:	f011 f825 	bl	802ac20 <atexit>
        return instance;
 8019bd6:	4b02      	ldr	r3, [pc, #8]	; (8019be0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8019bd8:	4618      	mov	r0, r3
 8019bda:	bd80      	pop	{r7, pc}
 8019bdc:	2000b2dc 	.word	0x2000b2dc
 8019be0:	20008840 	.word	0x20008840
 8019be4:	08019ba5 	.word	0x08019ba5

08019be8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	4a05      	ldr	r2, [pc, #20]	; (8019c08 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	601a      	str	r2, [r3, #0]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	f7ff fe97 	bl	801992c <_ZN8touchgfx7MVPHeapD1Ev>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	4618      	mov	r0, r3
 8019c02:	3708      	adds	r7, #8
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	0802d668 	.word	0x0802d668

08019c0c <_ZN16FrontendHeapBaseD0Ev>:
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	6878      	ldr	r0, [r7, #4]
 8019c16:	f7ff ffe7 	bl	8019be8 <_ZN16FrontendHeapBaseD1Ev>
 8019c1a:	2114      	movs	r1, #20
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f010 ffb6 	bl	802ab8e <_ZdlPvj>
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	4618      	mov	r0, r3
 8019c26:	3708      	adds	r7, #8
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8019c2c:	b5b0      	push	{r4, r5, r7, lr}
 8019c2e:	b084      	sub	sp, #16
 8019c30:	af02      	add	r7, sp, #8
 8019c32:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8019c34:	6878      	ldr	r0, [r7, #4]
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	f103 0414 	add.w	r4, r3, #20
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f642 02ec 	movw	r2, #10476	; 0x28ec
 8019c48:	441a      	add	r2, r3
 8019c4a:	6879      	ldr	r1, [r7, #4]
 8019c4c:	f642 1348 	movw	r3, #10568	; 0x2948
 8019c50:	440b      	add	r3, r1
 8019c52:	9300      	str	r3, [sp, #0]
 8019c54:	4613      	mov	r3, r2
 8019c56:	462a      	mov	r2, r5
 8019c58:	4621      	mov	r1, r4
 8019c5a:	f7ff ff89 	bl	8019b70 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8019c5e:	4a1a      	ldr	r2, [pc, #104]	; (8019cc8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	601a      	str	r2, [r3, #0]
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	3314      	adds	r3, #20
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f000 f8df 	bl	8019e2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	332c      	adds	r3, #44	; 0x2c
 8019c72:	4618      	mov	r0, r3
 8019c74:	f000 f90e 	bl	8019e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8019c78:	687a      	ldr	r2, [r7, #4]
 8019c7a:	f642 03ec 	movw	r3, #10476	; 0x28ec
 8019c7e:	4413      	add	r3, r2
 8019c80:	4618      	mov	r0, r3
 8019c82:	f000 f93d 	bl	8019f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8019c86:	687a      	ldr	r2, [r7, #4]
 8019c88:	f642 1348 	movw	r3, #10568	; 0x2948
 8019c8c:	4413      	add	r3, r2
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	f642 2198 	movw	r1, #10904	; 0x2a98
 8019c94:	4411      	add	r1, r2
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7fd f9b9 	bl	8017010 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	f642 2398 	movw	r3, #10904	; 0x2a98
 8019ca4:	4413      	add	r3, r2
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7fd ff00 	bl	8017aac <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	f642 1348 	movw	r3, #10568	; 0x2948
 8019cb4:	4413      	add	r3, r2
 8019cb6:	4619      	mov	r1, r3
 8019cb8:	f7ff ff4c 	bl	8019b54 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	3708      	adds	r7, #8
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	0802d5b8 	.word	0x0802d5b8

08019ccc <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b082      	sub	sp, #8
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
    {
 8019cd4:	4a05      	ldr	r2, [pc, #20]	; (8019cec <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	601a      	str	r2, [r3, #0]
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7ff fe45 	bl	801996c <_ZN8touchgfx3LCDD1Ev>
    }
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	3708      	adds	r7, #8
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	bd80      	pop	{r7, pc}
 8019cec:	08030494 	.word	0x08030494

08019cf0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
    }
 8019cf8:	6878      	ldr	r0, [r7, #4]
 8019cfa:	f7ff ffe7 	bl	8019ccc <_ZN8touchgfx8LCD24bppD1Ev>
 8019cfe:	2158      	movs	r1, #88	; 0x58
 8019d00:	6878      	ldr	r0, [r7, #4]
 8019d02:	f010 ff44 	bl	802ab8e <_ZdlPvj>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3708      	adds	r7, #8
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b086      	sub	sp, #24
 8019d14:	af02      	add	r7, sp, #8
 8019d16:	60f8      	str	r0, [r7, #12]
 8019d18:	60b9      	str	r1, [r7, #8]
 8019d1a:	607a      	str	r2, [r7, #4]
 8019d1c:	603b      	str	r3, [r7, #0]
 8019d1e:	68f8      	ldr	r0, [r7, #12]
 8019d20:	8bbb      	ldrh	r3, [r7, #28]
 8019d22:	9301      	str	r3, [sp, #4]
 8019d24:	8b3b      	ldrh	r3, [r7, #24]
 8019d26:	9300      	str	r3, [sp, #0]
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	687a      	ldr	r2, [r7, #4]
 8019d2c:	68b9      	ldr	r1, [r7, #8]
 8019d2e:	f7ff fe73 	bl	8019a18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8019d32:	4a04      	ldr	r2, [pc, #16]	; (8019d44 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	601a      	str	r2, [r3, #0]
    }
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3710      	adds	r7, #16
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	0802d68c 	.word	0x0802d68c

08019d48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b086      	sub	sp, #24
 8019d4c:	af02      	add	r7, sp, #8
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	603b      	str	r3, [r7, #0]
 8019d56:	68f8      	ldr	r0, [r7, #12]
 8019d58:	8bbb      	ldrh	r3, [r7, #28]
 8019d5a:	9301      	str	r3, [sp, #4]
 8019d5c:	8b3b      	ldrh	r3, [r7, #24]
 8019d5e:	9300      	str	r3, [sp, #0]
 8019d60:	683b      	ldr	r3, [r7, #0]
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	68b9      	ldr	r1, [r7, #8]
 8019d66:	f7ff ffd3 	bl	8019d10 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8019d6a:	4a04      	ldr	r2, [pc, #16]	; (8019d7c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	601a      	str	r2, [r3, #0]
    }
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	4618      	mov	r0, r3
 8019d74:	3710      	adds	r7, #16
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}
 8019d7a:	bf00      	nop
 8019d7c:	0802d3b8 	.word	0x0802d3b8

08019d80 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8019d80:	b480      	push	{r7}
 8019d82:	b083      	sub	sp, #12
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
 8019d88:	4a04      	ldr	r2, [pc, #16]	; (8019d9c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	601a      	str	r2, [r3, #0]
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	4618      	mov	r0, r3
 8019d92:	370c      	adds	r7, #12
 8019d94:	46bd      	mov	sp, r7
 8019d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9a:	4770      	bx	lr
 8019d9c:	0802d3a0 	.word	0x0802d3a0

08019da0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7ff ffe8 	bl	8019d80 <_ZN8touchgfx15TouchControllerC1Ev>
 8019db0:	4a03      	ldr	r2, [pc, #12]	; (8019dc0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	601a      	str	r2, [r3, #0]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	4618      	mov	r0, r3
 8019dba:	3708      	adds	r7, #8
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	bd80      	pop	{r7, pc}
 8019dc0:	0802d388 	.word	0x0802d388

08019dc4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8019dc4:	b590      	push	{r4, r7, lr}
 8019dc6:	b085      	sub	sp, #20
 8019dc8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8019dca:	f7fc fffd 	bl	8016dc8 <_ZN14BitmapDatabase11getInstanceEv>
 8019dce:	4604      	mov	r4, r0
 8019dd0:	f7fd f804 	bl	8016ddc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	4619      	mov	r1, r3
 8019dd8:	2300      	movs	r3, #0
 8019dda:	9300      	str	r3, [sp, #0]
 8019ddc:	2300      	movs	r3, #0
 8019dde:	2200      	movs	r2, #0
 8019de0:	4620      	mov	r0, r4
 8019de2:	f007 f999 	bl	8021118 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8019de6:	4809      	ldr	r0, [pc, #36]	; (8019e0c <touchgfx_init+0x48>)
 8019de8:	f7ff fd70 	bl	80198cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8019dec:	2000      	movs	r0, #0
 8019dee:	f7fd f819 	bl	8016e24 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8019df2:	4807      	ldr	r0, [pc, #28]	; (8019e10 <touchgfx_init+0x4c>)
 8019df4:	f007 f8de 	bl	8020fb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8019df8:	f7ff fedc 	bl	8019bb4 <_ZN12FrontendHeap11getInstanceEv>
 8019dfc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8019dfe:	4805      	ldr	r0, [pc, #20]	; (8019e14 <touchgfx_init+0x50>)
 8019e00:	f7fe ffda 	bl	8018db8 <_ZN11TouchGFXHAL10initializeEv>
}
 8019e04:	bf00      	nop
 8019e06:	370c      	adds	r7, #12
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd90      	pop	{r4, r7, pc}
 8019e0c:	2000bf5c 	.word	0x2000bf5c
 8019e10:	2000005c 	.word	0x2000005c
 8019e14:	2000bf60 	.word	0x2000bf60

08019e18 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8019e1c:	4802      	ldr	r0, [pc, #8]	; (8019e28 <touchgfx_taskEntry+0x10>)
 8019e1e:	f001 fca6 	bl	801b76e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8019e22:	bf00      	nop
 8019e24:	bd80      	pop	{r7, pc}
 8019e26:	bf00      	nop
 8019e28:	2000bf60 	.word	0x2000bf60

08019e2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	4618      	mov	r0, r3
 8019e38:	f000 ff16 	bl	801ac68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019e3c:	4a03      	ldr	r2, [pc, #12]	; (8019e4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	601a      	str	r2, [r3, #0]
    {
    }
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	4618      	mov	r0, r3
 8019e46:	3708      	adds	r7, #8
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}
 8019e4c:	0802d634 	.word	0x0802d634

08019e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
    {
    }
 8019e58:	4a05      	ldr	r2, [pc, #20]	; (8019e70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	601a      	str	r2, [r3, #0]
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f000 feff 	bl	801ac64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	0802d634 	.word	0x0802d634

08019e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b082      	sub	sp, #8
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
    }
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	f7ff ffe7 	bl	8019e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019e82:	2118      	movs	r1, #24
 8019e84:	6878      	ldr	r0, [r7, #4]
 8019e86:	f010 fe82 	bl	802ab8e <_ZdlPvj>
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3708      	adds	r7, #8
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b082      	sub	sp, #8
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f000 fee2 	bl	801ac68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019ea4:	4a03      	ldr	r2, [pc, #12]	; (8019eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	601a      	str	r2, [r3, #0]
    }
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	4618      	mov	r0, r3
 8019eae:	3708      	adds	r7, #8
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}
 8019eb4:	0802d600 	.word	0x0802d600

08019eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
    }
 8019ec0:	4a05      	ldr	r2, [pc, #20]	; (8019ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	601a      	str	r2, [r3, #0]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	4618      	mov	r0, r3
 8019eca:	f000 fecb 	bl	801ac64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	3708      	adds	r7, #8
 8019ed4:	46bd      	mov	sp, r7
 8019ed6:	bd80      	pop	{r7, pc}
 8019ed8:	0802d600 	.word	0x0802d600

08019edc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b082      	sub	sp, #8
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
    }
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	f7ff ffe7 	bl	8019eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019eea:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 8019eee:	6878      	ldr	r0, [r7, #4]
 8019ef0:	f010 fe4d 	bl	802ab8e <_ZdlPvj>
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	3708      	adds	r7, #8
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}
	...

08019f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f000 feac 	bl	801ac68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019f10:	4a03      	ldr	r2, [pc, #12]	; (8019f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	601a      	str	r2, [r3, #0]
    }
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	3708      	adds	r7, #8
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	0802d5cc 	.word	0x0802d5cc

08019f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b082      	sub	sp, #8
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
    }
 8019f2c:	4a05      	ldr	r2, [pc, #20]	; (8019f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	601a      	str	r2, [r3, #0]
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	4618      	mov	r0, r3
 8019f36:	f000 fe95 	bl	801ac64 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3708      	adds	r7, #8
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}
 8019f44:	0802d5cc 	.word	0x0802d5cc

08019f48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
    }
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f7ff ffe7 	bl	8019f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019f56:	215c      	movs	r1, #92	; 0x5c
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f010 fe18 	bl	802ab8e <_ZdlPvj>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	4618      	mov	r0, r3
 8019f62:	3708      	adds	r7, #8
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b082      	sub	sp, #8
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	4a11      	ldr	r2, [pc, #68]	; (8019fb8 <_ZN12FrontendHeapD1Ev+0x50>)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	601a      	str	r2, [r3, #0]
 8019f76:	687a      	ldr	r2, [r7, #4]
 8019f78:	f642 1348 	movw	r3, #10568	; 0x2948
 8019f7c:	4413      	add	r3, r2
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7fd f810 	bl	8016fa4 <_ZN19FrontendApplicationD1Ev>
 8019f84:	687a      	ldr	r2, [r7, #4]
 8019f86:	f642 03ec 	movw	r3, #10476	; 0x28ec
 8019f8a:	4413      	add	r3, r2
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f7ff ffc9 	bl	8019f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	332c      	adds	r3, #44	; 0x2c
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7ff ff8e 	bl	8019eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	3314      	adds	r3, #20
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f7ff ff55 	bl	8019e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7ff fe1d 	bl	8019be8 <_ZN16FrontendHeapBaseD1Ev>
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	3708      	adds	r7, #8
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}
 8019fb8:	0802d5b8 	.word	0x0802d5b8

08019fbc <_ZN12FrontendHeapD0Ev>:
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f7ff ffcf 	bl	8019f68 <_ZN12FrontendHeapD1Ev>
 8019fca:	f642 219c 	movw	r1, #10908	; 0x2a9c
 8019fce:	6878      	ldr	r0, [r7, #4]
 8019fd0:	f010 fddd 	bl	802ab8e <_ZdlPvj>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	3708      	adds	r7, #8
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
	...

08019fe0 <_Z41__static_initialization_and_destruction_0ii>:
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b084      	sub	sp, #16
 8019fe4:	af02      	add	r7, sp, #8
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	6039      	str	r1, [r7, #0]
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d119      	bne.n	801a024 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	d114      	bne.n	801a024 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8019ffa:	4818      	ldr	r0, [pc, #96]	; (801a05c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019ffc:	f7ff fed0 	bl	8019da0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 801a000:	4817      	ldr	r0, [pc, #92]	; (801a060 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801a002:	f7ff f965 	bl	80192d0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 801a006:	4817      	ldr	r0, [pc, #92]	; (801a064 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801a008:	f009 faac 	bl	8023564 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801a00c:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a010:	9301      	str	r3, [sp, #4]
 801a012:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a016:	9300      	str	r3, [sp, #0]
 801a018:	4b10      	ldr	r3, [pc, #64]	; (801a05c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801a01a:	4a12      	ldr	r2, [pc, #72]	; (801a064 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801a01c:	4910      	ldr	r1, [pc, #64]	; (801a060 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801a01e:	4812      	ldr	r0, [pc, #72]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801a020:	f7ff fe92 	bl	8019d48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d113      	bne.n	801a052 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a030:	4293      	cmp	r3, r2
 801a032:	d10e      	bne.n	801a052 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801a034:	480c      	ldr	r0, [pc, #48]	; (801a068 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801a036:	f7fe ff25 	bl	8018e84 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801a03a:	480c      	ldr	r0, [pc, #48]	; (801a06c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801a03c:	f7f6 f9cc 	bl	80103d8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 801a040:	4808      	ldr	r0, [pc, #32]	; (801a064 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801a042:	f7ff fe43 	bl	8019ccc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 801a046:	4806      	ldr	r0, [pc, #24]	; (801a060 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801a048:	f7ff f96c 	bl	8019324 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801a04c:	4803      	ldr	r0, [pc, #12]	; (801a05c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801a04e:	f7fe fc8f 	bl	8018970 <_ZN20STM32TouchControllerD1Ev>
}
 801a052:	bf00      	nop
 801a054:	3708      	adds	r7, #8
 801a056:	46bd      	mov	sp, r7
 801a058:	bd80      	pop	{r7, pc}
 801a05a:	bf00      	nop
 801a05c:	2000b2e0 	.word	0x2000b2e0
 801a060:	2000b2e4 	.word	0x2000b2e4
 801a064:	2000bf04 	.word	0x2000bf04
 801a068:	2000bf60 	.word	0x2000bf60
 801a06c:	2000005c 	.word	0x2000005c

0801a070 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 801a070:	b480      	push	{r7}
 801a072:	b083      	sub	sp, #12
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801a078:	2301      	movs	r3, #1
    }
 801a07a:	4618      	mov	r0, r3
 801a07c:	370c      	adds	r7, #12
 801a07e:	46bd      	mov	sp, r7
 801a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a084:	4770      	bx	lr

0801a086 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801a086:	b480      	push	{r7}
 801a088:	b083      	sub	sp, #12
 801a08a:	af00      	add	r7, sp, #0
 801a08c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801a08e:	2354      	movs	r3, #84	; 0x54
    }
 801a090:	4618      	mov	r0, r3
 801a092:	370c      	adds	r7, #12
 801a094:	46bd      	mov	sp, r7
 801a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09a:	4770      	bx	lr

0801a09c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801a09c:	b480      	push	{r7}
 801a09e:	b083      	sub	sp, #12
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
 801a0a4:	460b      	mov	r3, r1
 801a0a6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801a0a8:	887b      	ldrh	r3, [r7, #2]
 801a0aa:	2254      	movs	r2, #84	; 0x54
 801a0ac:	fb02 f303 	mul.w	r3, r2, r3
 801a0b0:	3308      	adds	r3, #8
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	4413      	add	r3, r2
    }
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	370c      	adds	r7, #12
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801a0c2:	b480      	push	{r7}
 801a0c4:	b083      	sub	sp, #12
 801a0c6:	af00      	add	r7, sp, #0
 801a0c8:	6078      	str	r0, [r7, #4]
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801a0ce:	887b      	ldrh	r3, [r7, #2]
 801a0d0:	2254      	movs	r2, #84	; 0x54
 801a0d2:	fb02 f303 	mul.w	r3, r2, r3
 801a0d6:	3308      	adds	r3, #8
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	4413      	add	r3, r2
    }
 801a0dc:	4618      	mov	r0, r3
 801a0de:	370c      	adds	r7, #12
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e6:	4770      	bx	lr

0801a0e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801a0e8:	b480      	push	{r7}
 801a0ea:	b083      	sub	sp, #12
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801a0f0:	2301      	movs	r3, #1
    }
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	370c      	adds	r7, #12
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fc:	4770      	bx	lr

0801a0fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801a0fe:	b480      	push	{r7}
 801a100:	b083      	sub	sp, #12
 801a102:	af00      	add	r7, sp, #0
 801a104:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801a106:	f642 03b8 	movw	r3, #10424	; 0x28b8
    }
 801a10a:	4618      	mov	r0, r3
 801a10c:	370c      	adds	r7, #12
 801a10e:	46bd      	mov	sp, r7
 801a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a114:	4770      	bx	lr

0801a116 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801a116:	b480      	push	{r7}
 801a118:	b083      	sub	sp, #12
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	6078      	str	r0, [r7, #4]
 801a11e:	460b      	mov	r3, r1
 801a120:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a122:	887b      	ldrh	r3, [r7, #2]
 801a124:	f642 02b8 	movw	r2, #10424	; 0x28b8
 801a128:	fb02 f303 	mul.w	r3, r2, r3
 801a12c:	3308      	adds	r3, #8
 801a12e:	687a      	ldr	r2, [r7, #4]
 801a130:	4413      	add	r3, r2
    }
 801a132:	4618      	mov	r0, r3
 801a134:	370c      	adds	r7, #12
 801a136:	46bd      	mov	sp, r7
 801a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13c:	4770      	bx	lr

0801a13e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801a13e:	b480      	push	{r7}
 801a140:	b083      	sub	sp, #12
 801a142:	af00      	add	r7, sp, #0
 801a144:	6078      	str	r0, [r7, #4]
 801a146:	460b      	mov	r3, r1
 801a148:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a14a:	887b      	ldrh	r3, [r7, #2]
 801a14c:	f642 02b8 	movw	r2, #10424	; 0x28b8
 801a150:	fb02 f303 	mul.w	r3, r2, r3
 801a154:	3308      	adds	r3, #8
 801a156:	687a      	ldr	r2, [r7, #4]
 801a158:	4413      	add	r3, r2
    }
 801a15a:	4618      	mov	r0, r3
 801a15c:	370c      	adds	r7, #12
 801a15e:	46bd      	mov	sp, r7
 801a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a164:	4770      	bx	lr

0801a166 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801a166:	b480      	push	{r7}
 801a168:	b083      	sub	sp, #12
 801a16a:	af00      	add	r7, sp, #0
 801a16c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801a16e:	2301      	movs	r3, #1
    }
 801a170:	4618      	mov	r0, r3
 801a172:	370c      	adds	r7, #12
 801a174:	46bd      	mov	sp, r7
 801a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17a:	4770      	bx	lr

0801a17c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801a17c:	b480      	push	{r7}
 801a17e:	b083      	sub	sp, #12
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801a184:	2310      	movs	r3, #16
    }
 801a186:	4618      	mov	r0, r3
 801a188:	370c      	adds	r7, #12
 801a18a:	46bd      	mov	sp, r7
 801a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a190:	4770      	bx	lr

0801a192 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801a192:	b480      	push	{r7}
 801a194:	b083      	sub	sp, #12
 801a196:	af00      	add	r7, sp, #0
 801a198:	6078      	str	r0, [r7, #4]
 801a19a:	460b      	mov	r3, r1
 801a19c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a19e:	887b      	ldrh	r3, [r7, #2]
 801a1a0:	011b      	lsls	r3, r3, #4
 801a1a2:	3308      	adds	r3, #8
 801a1a4:	687a      	ldr	r2, [r7, #4]
 801a1a6:	4413      	add	r3, r2
    }
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	370c      	adds	r7, #12
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b2:	4770      	bx	lr

0801a1b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801a1b4:	b480      	push	{r7}
 801a1b6:	b083      	sub	sp, #12
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
 801a1bc:	460b      	mov	r3, r1
 801a1be:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a1c0:	887b      	ldrh	r3, [r7, #2]
 801a1c2:	011b      	lsls	r3, r3, #4
 801a1c4:	3308      	adds	r3, #8
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	4413      	add	r3, r2
    }
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	370c      	adds	r7, #12
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d4:	4770      	bx	lr

0801a1d6 <_GLOBAL__sub_I_touchgfx_init>:
 801a1d6:	b580      	push	{r7, lr}
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a1de:	2001      	movs	r0, #1
 801a1e0:	f7ff fefe 	bl	8019fe0 <_Z41__static_initialization_and_destruction_0ii>
 801a1e4:	bd80      	pop	{r7, pc}

0801a1e6 <_GLOBAL__sub_D_touchgfx_init>:
 801a1e6:	b580      	push	{r7, lr}
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a1ee:	2000      	movs	r0, #0
 801a1f0:	f7ff fef6 	bl	8019fe0 <_Z41__static_initialization_and_destruction_0ii>
 801a1f4:	bd80      	pop	{r7, pc}

0801a1f6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801a1f6:	b580      	push	{r7, lr}
 801a1f8:	b082      	sub	sp, #8
 801a1fa:	af00      	add	r7, sp, #0
 801a1fc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	3318      	adds	r3, #24
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	4798      	blx	r3
    }
 801a20a:	bf00      	nop
 801a20c:	3708      	adds	r7, #8
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}

0801a212 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801a212:	b480      	push	{r7}
 801a214:	b083      	sub	sp, #12
 801a216:	af00      	add	r7, sp, #0
 801a218:	6078      	str	r0, [r7, #4]
 801a21a:	460b      	mov	r3, r1
 801a21c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	78fa      	ldrb	r2, [r7, #3]
 801a222:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801a226:	bf00      	nop
 801a228:	370c      	adds	r7, #12
 801a22a:	46bd      	mov	sp, r7
 801a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a230:	4770      	bx	lr

0801a232 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801a232:	b480      	push	{r7}
 801a234:	b083      	sub	sp, #12
 801a236:	af00      	add	r7, sp, #0
 801a238:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801a240:	3301      	adds	r3, #1
 801a242:	b2da      	uxtb	r2, r3
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801a24a:	bf00      	nop
 801a24c:	370c      	adds	r7, #12
 801a24e:	46bd      	mov	sp, r7
 801a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a254:	4770      	bx	lr
	...

0801a258 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801a258:	b580      	push	{r7, lr}
 801a25a:	b082      	sub	sp, #8
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
 801a260:	460b      	mov	r3, r1
 801a262:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801a264:	78fb      	ldrb	r3, [r7, #3]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d002      	beq.n	801a270 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801a26a:	78fb      	ldrb	r3, [r7, #3]
 801a26c:	2b02      	cmp	r3, #2
 801a26e:	d105      	bne.n	801a27c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	78fa      	ldrb	r2, [r7, #3]
 801a274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801a278:	2301      	movs	r3, #1
 801a27a:	e027      	b.n	801a2cc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801a27c:	78fb      	ldrb	r3, [r7, #3]
 801a27e:	2b01      	cmp	r3, #1
 801a280:	d123      	bne.n	801a2ca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a286:	2b00      	cmp	r3, #0
 801a288:	d014      	beq.n	801a2b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	3380      	adds	r3, #128	; 0x80
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	6878      	ldr	r0, [r7, #4]
 801a294:	4798      	blx	r3
 801a296:	4603      	mov	r3, r0
 801a298:	461a      	mov	r2, r3
 801a29a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d008      	beq.n	801a2b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a2a2:	4b0c      	ldr	r3, [pc, #48]	; (801a2d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801a2a4:	781b      	ldrb	r3, [r3, #0]
 801a2a6:	f083 0301 	eor.w	r3, r3, #1
 801a2aa:	b2db      	uxtb	r3, r3
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d001      	beq.n	801a2b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a2b0:	2301      	movs	r3, #1
 801a2b2:	e000      	b.n	801a2b6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d005      	beq.n	801a2c6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	78fa      	ldrb	r2, [r7, #3]
 801a2be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801a2c2:	2301      	movs	r3, #1
 801a2c4:	e002      	b.n	801a2cc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	e000      	b.n	801a2cc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801a2ca:	2300      	movs	r3, #0
    }
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	3708      	adds	r7, #8
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}
 801a2d4:	2000bfec 	.word	0x2000bfec

0801a2d8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801a2d8:	b480      	push	{r7}
 801a2da:	b083      	sub	sp, #12
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	683a      	ldr	r2, [r7, #0]
 801a2e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801a2e8:	bf00      	nop
 801a2ea:	370c      	adds	r7, #12
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f2:	4770      	bx	lr

0801a2f4 <__NVIC_EnableIRQ>:
{
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a2fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a302:	2b00      	cmp	r3, #0
 801a304:	db0d      	blt.n	801a322 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	f003 021f 	and.w	r2, r3, #31
 801a310:	4907      	ldr	r1, [pc, #28]	; (801a330 <__NVIC_EnableIRQ+0x3c>)
 801a312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a316:	095b      	lsrs	r3, r3, #5
 801a318:	2001      	movs	r0, #1
 801a31a:	fa00 f202 	lsl.w	r2, r0, r2
 801a31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a322:	bf00      	nop
 801a324:	370c      	adds	r7, #12
 801a326:	46bd      	mov	sp, r7
 801a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32c:	4770      	bx	lr
 801a32e:	bf00      	nop
 801a330:	e000e100 	.word	0xe000e100

0801a334 <__NVIC_DisableIRQ>:
{
 801a334:	b480      	push	{r7}
 801a336:	b083      	sub	sp, #12
 801a338:	af00      	add	r7, sp, #0
 801a33a:	4603      	mov	r3, r0
 801a33c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a33e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a342:	2b00      	cmp	r3, #0
 801a344:	db12      	blt.n	801a36c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	f003 021f 	and.w	r2, r3, #31
 801a350:	4909      	ldr	r1, [pc, #36]	; (801a378 <__NVIC_DisableIRQ+0x44>)
 801a352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a356:	095b      	lsrs	r3, r3, #5
 801a358:	2001      	movs	r0, #1
 801a35a:	fa00 f202 	lsl.w	r2, r0, r2
 801a35e:	3320      	adds	r3, #32
 801a360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801a364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a368:	f3bf 8f6f 	isb	sy
}
 801a36c:	bf00      	nop
 801a36e:	370c      	adds	r7, #12
 801a370:	46bd      	mov	sp, r7
 801a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a376:	4770      	bx	lr
 801a378:	e000e100 	.word	0xe000e100

0801a37c <__NVIC_SetPriority>:
{
 801a37c:	b480      	push	{r7}
 801a37e:	b083      	sub	sp, #12
 801a380:	af00      	add	r7, sp, #0
 801a382:	4603      	mov	r3, r0
 801a384:	6039      	str	r1, [r7, #0]
 801a386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	db0c      	blt.n	801a3aa <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a390:	683b      	ldr	r3, [r7, #0]
 801a392:	b2db      	uxtb	r3, r3
 801a394:	4a0e      	ldr	r2, [pc, #56]	; (801a3d0 <__NVIC_SetPriority+0x54>)
 801a396:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a39a:	4608      	mov	r0, r1
 801a39c:	011b      	lsls	r3, r3, #4
 801a39e:	b2d9      	uxtb	r1, r3
 801a3a0:	1813      	adds	r3, r2, r0
 801a3a2:	460a      	mov	r2, r1
 801a3a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a3a8:	e00c      	b.n	801a3c4 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a3aa:	683b      	ldr	r3, [r7, #0]
 801a3ac:	b2da      	uxtb	r2, r3
 801a3ae:	4909      	ldr	r1, [pc, #36]	; (801a3d4 <__NVIC_SetPriority+0x58>)
 801a3b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	f003 030f 	and.w	r3, r3, #15
 801a3ba:	3b04      	subs	r3, #4
 801a3bc:	0112      	lsls	r2, r2, #4
 801a3be:	b2d2      	uxtb	r2, r2
 801a3c0:	440b      	add	r3, r1
 801a3c2:	761a      	strb	r2, [r3, #24]
}
 801a3c4:	bf00      	nop
 801a3c6:	370c      	adds	r7, #12
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ce:	4770      	bx	lr
 801a3d0:	e000e100 	.word	0xe000e100
 801a3d4:	e000ed00 	.word	0xe000ed00

0801a3d8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801a3d8:	b5b0      	push	{r4, r5, r7, lr}
 801a3da:	b082      	sub	sp, #8
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f001 fc88 	bl	801bcf8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 801a3e8:	687d      	ldr	r5, [r7, #4]
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	334c      	adds	r3, #76	; 0x4c
 801a3f0:	681c      	ldr	r4, [r3, #0]
 801a3f2:	f004 fbc9 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	490d      	ldr	r1, [pc, #52]	; (801a438 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801a402:	4618      	mov	r0, r3
 801a404:	f7ff ff68 	bl	801a2d8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2101      	movs	r1, #1
 801a40c:	4618      	mov	r0, r3
 801a40e:	f7ff ff23 	bl	801a258 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	3374      	adds	r3, #116	; 0x74
 801a41a:	681c      	ldr	r4, [r3, #0]
 801a41c:	2300      	movs	r3, #0
 801a41e:	2200      	movs	r2, #0
 801a420:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801a424:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2101      	movs	r1, #1
 801a42a:	4618      	mov	r0, r3
 801a42c:	f7ff fef1 	bl	801a212 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 801a430:	bf00      	nop
 801a432:	3708      	adds	r7, #8
 801a434:	46bd      	mov	sp, r7
 801a436:	bdb0      	pop	{r4, r5, r7, pc}
 801a438:	0801901d 	.word	0x0801901d

0801a43c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b082      	sub	sp, #8
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801a444:	2109      	movs	r1, #9
 801a446:	205a      	movs	r0, #90	; 0x5a
 801a448:	f7ff ff98 	bl	801a37c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801a44c:	2109      	movs	r1, #9
 801a44e:	2058      	movs	r0, #88	; 0x58
 801a450:	f7ff ff94 	bl	801a37c <__NVIC_SetPriority>
}
 801a454:	bf00      	nop
 801a456:	3708      	adds	r7, #8
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}

0801a45c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801a464:	205a      	movs	r0, #90	; 0x5a
 801a466:	f7ff ff45 	bl	801a2f4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801a46a:	2058      	movs	r0, #88	; 0x58
 801a46c:	f7ff ff42 	bl	801a2f4 <__NVIC_EnableIRQ>
}
 801a470:	bf00      	nop
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}

0801a478 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b082      	sub	sp, #8
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801a480:	205a      	movs	r0, #90	; 0x5a
 801a482:	f7ff ff57 	bl	801a334 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801a486:	2058      	movs	r0, #88	; 0x58
 801a488:	f7ff ff54 	bl	801a334 <__NVIC_DisableIRQ>
}
 801a48c:	bf00      	nop
 801a48e:	3708      	adds	r7, #8
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}

0801a494 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801a494:	b480      	push	{r7}
 801a496:	b083      	sub	sp, #12
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801a49c:	4b11      	ldr	r3, [pc, #68]	; (801a4e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a49e:	68db      	ldr	r3, [r3, #12]
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	3b01      	subs	r3, #1
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	4b0e      	ldr	r3, [pc, #56]	; (801a4e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a4ae:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801a4b0:	4b0c      	ldr	r3, [pc, #48]	; (801a4e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a4b2:	691b      	ldr	r3, [r3, #16]
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a4ba:	b29b      	uxth	r3, r3
 801a4bc:	3b01      	subs	r3, #1
 801a4be:	b29a      	uxth	r2, r3
 801a4c0:	4b0a      	ldr	r3, [pc, #40]	; (801a4ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801a4c2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801a4c4:	4b08      	ldr	r3, [pc, #32]	; (801a4e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a4c6:	881a      	ldrh	r2, [r3, #0]
 801a4c8:	4b06      	ldr	r3, [pc, #24]	; (801a4e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a4ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801a4cc:	4b05      	ldr	r3, [pc, #20]	; (801a4e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a4d0:	4a04      	ldr	r2, [pc, #16]	; (801a4e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a4d2:	f043 0301 	orr.w	r3, r3, #1
 801a4d6:	6353      	str	r3, [r2, #52]	; 0x34
}
 801a4d8:	bf00      	nop
 801a4da:	370c      	adds	r7, #12
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e2:	4770      	bx	lr
 801a4e4:	40016800 	.word	0x40016800
 801a4e8:	2000bfd8 	.word	0x2000bfd8
 801a4ec:	2000bfda 	.word	0x2000bfda

0801a4f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b083      	sub	sp, #12
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801a4f8:	4b03      	ldr	r3, [pc, #12]	; (801a508 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	370c      	adds	r7, #12
 801a500:	46bd      	mov	sp, r7
 801a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a506:	4770      	bx	lr
 801a508:	40016884 	.word	0x40016884

0801a50c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801a50c:	b480      	push	{r7}
 801a50e:	b083      	sub	sp, #12
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801a516:	4a06      	ldr	r2, [pc, #24]	; (801a530 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801a51c:	4b05      	ldr	r3, [pc, #20]	; (801a534 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801a51e:	2201      	movs	r2, #1
 801a520:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a522:	bf00      	nop
 801a524:	370c      	adds	r7, #12
 801a526:	46bd      	mov	sp, r7
 801a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52c:	4770      	bx	lr
 801a52e:	bf00      	nop
 801a530:	40016884 	.word	0x40016884
 801a534:	40016800 	.word	0x40016800

0801a538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b082      	sub	sp, #8
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
 801a540:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6839      	ldr	r1, [r7, #0]
 801a546:	4618      	mov	r0, r3
 801a548:	f001 f8e6 	bl	801b718 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801a54c:	bf00      	nop
 801a54e:	3708      	adds	r7, #8
 801a550:	46bd      	mov	sp, r7
 801a552:	bd80      	pop	{r7, pc}

0801a554 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801a554:	b480      	push	{r7}
 801a556:	b085      	sub	sp, #20
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801a55c:	4b0d      	ldr	r3, [pc, #52]	; (801a594 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a560:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801a562:	4b0c      	ldr	r3, [pc, #48]	; (801a594 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a564:	68db      	ldr	r3, [r3, #12]
 801a566:	b29b      	uxth	r3, r3
 801a568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	3301      	adds	r3, #1
 801a570:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801a572:	89fa      	ldrh	r2, [r7, #14]
 801a574:	89bb      	ldrh	r3, [r7, #12]
 801a576:	429a      	cmp	r2, r3
 801a578:	d201      	bcs.n	801a57e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801a57a:	2300      	movs	r3, #0
 801a57c:	e003      	b.n	801a586 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801a57e:	89fa      	ldrh	r2, [r7, #14]
 801a580:	89bb      	ldrh	r3, [r7, #12]
 801a582:	1ad3      	subs	r3, r2, r3
 801a584:	b29b      	uxth	r3, r3
    }
}
 801a586:	4618      	mov	r0, r3
 801a588:	3714      	adds	r7, #20
 801a58a:	46bd      	mov	sp, r7
 801a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a590:	4770      	bx	lr
 801a592:	bf00      	nop
 801a594:	40016800 	.word	0x40016800

0801a598 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801a598:	b580      	push	{r7, lr}
 801a59a:	b082      	sub	sp, #8
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801a5a0:	4b1a      	ldr	r3, [pc, #104]	; (801a60c <HAL_LTDC_LineEventCallback+0x74>)
 801a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5a4:	4a1a      	ldr	r2, [pc, #104]	; (801a610 <HAL_LTDC_LineEventCallback+0x78>)
 801a5a6:	8812      	ldrh	r2, [r2, #0]
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	bf0c      	ite	eq
 801a5ac:	2301      	moveq	r3, #1
 801a5ae:	2300      	movne	r3, #0
 801a5b0:	b2db      	uxtb	r3, r3
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d017      	beq.n	801a5e6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801a5b6:	4b17      	ldr	r3, [pc, #92]	; (801a614 <HAL_LTDC_LineEventCallback+0x7c>)
 801a5b8:	881b      	ldrh	r3, [r3, #0]
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	6878      	ldr	r0, [r7, #4]
 801a5be:	f7ec faff 	bl	8006bc0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801a5c2:	f7f6 fc19 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7ff fe32 	bl	801a232 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801a5ce:	f7fe fce7 	bl	8018fa0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801a5d2:	f7f6 fc11 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f001 fe15 	bl	801c208 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801a5de:	2000      	movs	r0, #0
 801a5e0:	f7fe f9e8 	bl	80189b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801a5e4:	e00e      	b.n	801a604 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801a5e6:	4b0a      	ldr	r3, [pc, #40]	; (801a610 <HAL_LTDC_LineEventCallback+0x78>)
 801a5e8:	881b      	ldrh	r3, [r3, #0]
 801a5ea:	4619      	mov	r1, r3
 801a5ec:	6878      	ldr	r0, [r7, #4]
 801a5ee:	f7ec fae7 	bl	8006bc0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801a5f2:	2000      	movs	r0, #0
 801a5f4:	f7fe f9e9 	bl	80189ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801a5f8:	f7f6 fbfe 	bl	8010df8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ff fdf9 	bl	801a1f6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801a604:	bf00      	nop
 801a606:	3708      	adds	r7, #8
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}
 801a60c:	40016800 	.word	0x40016800
 801a610:	2000bfd8 	.word	0x2000bfd8
 801a614:	2000bfda 	.word	0x2000bfda

0801a618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b082      	sub	sp, #8
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	4603      	mov	r3, r0
 801a620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 801a622:	20c8      	movs	r0, #200	; 0xc8
 801a624:	f7f5 fbf6 	bl	800fe14 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a628:	f000 fa7a 	bl	801ab20 <ft5336_I2C_InitializeIfRequired>
}
 801a62c:	bf00      	nop
 801a62e:	3708      	adds	r7, #8
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}

0801a634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 801a634:	b480      	push	{r7}
 801a636:	b083      	sub	sp, #12
 801a638:	af00      	add	r7, sp, #0
 801a63a:	4603      	mov	r3, r0
 801a63c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801a63e:	bf00      	nop
 801a640:	370c      	adds	r7, #12
 801a642:	46bd      	mov	sp, r7
 801a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a648:	4770      	bx	lr

0801a64a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 801a64a:	b580      	push	{r7, lr}
 801a64c:	b084      	sub	sp, #16
 801a64e:	af00      	add	r7, sp, #0
 801a650:	4603      	mov	r3, r0
 801a652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 801a654:	2300      	movs	r3, #0
 801a656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 801a658:	2300      	movs	r3, #0
 801a65a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 801a65c:	2300      	movs	r3, #0
 801a65e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a660:	f000 fa5e 	bl	801ab20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a664:	2300      	movs	r3, #0
 801a666:	73fb      	strb	r3, [r7, #15]
 801a668:	e010      	b.n	801a68c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 801a66a:	88fb      	ldrh	r3, [r7, #6]
 801a66c:	b2db      	uxtb	r3, r3
 801a66e:	21a8      	movs	r1, #168	; 0xa8
 801a670:	4618      	mov	r0, r3
 801a672:	f7f5 fbb1 	bl	800fdd8 <TS_IO_Read>
 801a676:	4603      	mov	r3, r0
 801a678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 801a67a:	7b7b      	ldrb	r3, [r7, #13]
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	2b51      	cmp	r3, #81	; 0x51
 801a680:	d101      	bne.n	801a686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801a682:	2301      	movs	r3, #1
 801a684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a686:	7bfb      	ldrb	r3, [r7, #15]
 801a688:	3301      	adds	r3, #1
 801a68a:	73fb      	strb	r3, [r7, #15]
 801a68c:	7bfb      	ldrb	r3, [r7, #15]
 801a68e:	2b02      	cmp	r3, #2
 801a690:	d802      	bhi.n	801a698 <ft5336_ReadID+0x4e>
 801a692:	7bbb      	ldrb	r3, [r7, #14]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d0e8      	beq.n	801a66a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 801a698:	7b7b      	ldrb	r3, [r7, #13]
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	b29b      	uxth	r3, r3
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3710      	adds	r7, #16
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}

0801a6a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801a6a6:	b580      	push	{r7, lr}
 801a6a8:	b082      	sub	sp, #8
 801a6aa:	af00      	add	r7, sp, #0
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 801a6b0:	88fb      	ldrh	r3, [r7, #6]
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f000 fa44 	bl	801ab40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 801a6b8:	88fb      	ldrh	r3, [r7, #6]
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f000 f932 	bl	801a924 <ft5336_TS_DisableIT>
}
 801a6c0:	bf00      	nop
 801a6c2:	3708      	adds	r7, #8
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}

0801a6c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b084      	sub	sp, #16
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 801a6d6:	88fb      	ldrh	r3, [r7, #6]
 801a6d8:	b2db      	uxtb	r3, r3
 801a6da:	2102      	movs	r1, #2
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f7f5 fb7b 	bl	800fdd8 <TS_IO_Read>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 801a6e6:	7bfb      	ldrb	r3, [r7, #15]
 801a6e8:	b2db      	uxtb	r3, r3
 801a6ea:	f003 030f 	and.w	r3, r3, #15
 801a6ee:	b2db      	uxtb	r3, r3
 801a6f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801a6f2:	7bfb      	ldrb	r3, [r7, #15]
 801a6f4:	b2db      	uxtb	r3, r3
 801a6f6:	2b05      	cmp	r3, #5
 801a6f8:	d901      	bls.n	801a6fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801a6fe:	7bfb      	ldrb	r3, [r7, #15]
 801a700:	b2da      	uxtb	r2, r3
 801a702:	4b05      	ldr	r3, [pc, #20]	; (801a718 <ft5336_TS_DetectTouch+0x50>)
 801a704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 801a706:	4b04      	ldr	r3, [pc, #16]	; (801a718 <ft5336_TS_DetectTouch+0x50>)
 801a708:	2200      	movs	r2, #0
 801a70a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 801a70c:	7bfb      	ldrb	r3, [r7, #15]
 801a70e:	b2db      	uxtb	r3, r3
}
 801a710:	4618      	mov	r0, r3
 801a712:	3710      	adds	r7, #16
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}
 801a718:	2000bfdc 	.word	0x2000bfdc

0801a71c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b086      	sub	sp, #24
 801a720:	af00      	add	r7, sp, #0
 801a722:	4603      	mov	r3, r0
 801a724:	60b9      	str	r1, [r7, #8]
 801a726:	607a      	str	r2, [r7, #4]
 801a728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a72a:	2300      	movs	r3, #0
 801a72c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801a72e:	2300      	movs	r3, #0
 801a730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801a732:	2300      	movs	r3, #0
 801a734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801a736:	2300      	movs	r3, #0
 801a738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801a73a:	2300      	movs	r3, #0
 801a73c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801a73e:	4b6d      	ldr	r3, [pc, #436]	; (801a8f4 <ft5336_TS_GetXY+0x1d8>)
 801a740:	789a      	ldrb	r2, [r3, #2]
 801a742:	4b6c      	ldr	r3, [pc, #432]	; (801a8f4 <ft5336_TS_GetXY+0x1d8>)
 801a744:	785b      	ldrb	r3, [r3, #1]
 801a746:	429a      	cmp	r2, r3
 801a748:	f080 80cf 	bcs.w	801a8ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 801a74c:	4b69      	ldr	r3, [pc, #420]	; (801a8f4 <ft5336_TS_GetXY+0x1d8>)
 801a74e:	789b      	ldrb	r3, [r3, #2]
 801a750:	2b09      	cmp	r3, #9
 801a752:	d871      	bhi.n	801a838 <ft5336_TS_GetXY+0x11c>
 801a754:	a201      	add	r2, pc, #4	; (adr r2, 801a75c <ft5336_TS_GetXY+0x40>)
 801a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a75a:	bf00      	nop
 801a75c:	0801a785 	.word	0x0801a785
 801a760:	0801a797 	.word	0x0801a797
 801a764:	0801a7a9 	.word	0x0801a7a9
 801a768:	0801a7bb 	.word	0x0801a7bb
 801a76c:	0801a7cd 	.word	0x0801a7cd
 801a770:	0801a7df 	.word	0x0801a7df
 801a774:	0801a7f1 	.word	0x0801a7f1
 801a778:	0801a803 	.word	0x0801a803
 801a77c:	0801a815 	.word	0x0801a815
 801a780:	0801a827 	.word	0x0801a827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 801a784:	2304      	movs	r3, #4
 801a786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 801a788:	2303      	movs	r3, #3
 801a78a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 801a78c:	2306      	movs	r3, #6
 801a78e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 801a790:	2305      	movs	r3, #5
 801a792:	753b      	strb	r3, [r7, #20]
      break;
 801a794:	e051      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801a796:	230a      	movs	r3, #10
 801a798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 801a79a:	2309      	movs	r3, #9
 801a79c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 801a79e:	230c      	movs	r3, #12
 801a7a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801a7a2:	230b      	movs	r3, #11
 801a7a4:	753b      	strb	r3, [r7, #20]
      break;
 801a7a6:	e048      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 801a7a8:	2310      	movs	r3, #16
 801a7aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 801a7ac:	230f      	movs	r3, #15
 801a7ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 801a7b0:	2312      	movs	r3, #18
 801a7b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 801a7b4:	2311      	movs	r3, #17
 801a7b6:	753b      	strb	r3, [r7, #20]
      break;
 801a7b8:	e03f      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 801a7ba:	2316      	movs	r3, #22
 801a7bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 801a7be:	2315      	movs	r3, #21
 801a7c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801a7c2:	2318      	movs	r3, #24
 801a7c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 801a7c6:	2317      	movs	r3, #23
 801a7c8:	753b      	strb	r3, [r7, #20]
      break;
 801a7ca:	e036      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 801a7cc:	231c      	movs	r3, #28
 801a7ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 801a7d0:	231b      	movs	r3, #27
 801a7d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 801a7d4:	231e      	movs	r3, #30
 801a7d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 801a7d8:	231d      	movs	r3, #29
 801a7da:	753b      	strb	r3, [r7, #20]
      break;
 801a7dc:	e02d      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801a7de:	2322      	movs	r3, #34	; 0x22
 801a7e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801a7e2:	2321      	movs	r3, #33	; 0x21
 801a7e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 801a7e6:	2324      	movs	r3, #36	; 0x24
 801a7e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 801a7ea:	2323      	movs	r3, #35	; 0x23
 801a7ec:	753b      	strb	r3, [r7, #20]
      break;
 801a7ee:	e024      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801a7f0:	2328      	movs	r3, #40	; 0x28
 801a7f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 801a7f4:	2327      	movs	r3, #39	; 0x27
 801a7f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 801a7f8:	232a      	movs	r3, #42	; 0x2a
 801a7fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 801a7fc:	2329      	movs	r3, #41	; 0x29
 801a7fe:	753b      	strb	r3, [r7, #20]
      break;
 801a800:	e01b      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801a802:	232e      	movs	r3, #46	; 0x2e
 801a804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 801a806:	232d      	movs	r3, #45	; 0x2d
 801a808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 801a80a:	2330      	movs	r3, #48	; 0x30
 801a80c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801a80e:	232f      	movs	r3, #47	; 0x2f
 801a810:	753b      	strb	r3, [r7, #20]
      break;
 801a812:	e012      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 801a814:	2334      	movs	r3, #52	; 0x34
 801a816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 801a818:	2333      	movs	r3, #51	; 0x33
 801a81a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 801a81c:	2336      	movs	r3, #54	; 0x36
 801a81e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 801a820:	2335      	movs	r3, #53	; 0x35
 801a822:	753b      	strb	r3, [r7, #20]
      break;
 801a824:	e009      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 801a826:	233a      	movs	r3, #58	; 0x3a
 801a828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801a82a:	2339      	movs	r3, #57	; 0x39
 801a82c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801a82e:	233c      	movs	r3, #60	; 0x3c
 801a830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801a832:	233b      	movs	r3, #59	; 0x3b
 801a834:	753b      	strb	r3, [r7, #20]
      break;
 801a836:	e000      	b.n	801a83a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 801a838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801a83a:	89fb      	ldrh	r3, [r7, #14]
 801a83c:	b2db      	uxtb	r3, r3
 801a83e:	7dfa      	ldrb	r2, [r7, #23]
 801a840:	4611      	mov	r1, r2
 801a842:	4618      	mov	r0, r3
 801a844:	f7f5 fac8 	bl	800fdd8 <TS_IO_Read>
 801a848:	4603      	mov	r3, r0
 801a84a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a84c:	7cfb      	ldrb	r3, [r7, #19]
 801a84e:	b2db      	uxtb	r3, r3
 801a850:	b29a      	uxth	r2, r3
 801a852:	4b29      	ldr	r3, [pc, #164]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801a856:	89fb      	ldrh	r3, [r7, #14]
 801a858:	b2db      	uxtb	r3, r3
 801a85a:	7dba      	ldrb	r2, [r7, #22]
 801a85c:	4611      	mov	r1, r2
 801a85e:	4618      	mov	r0, r3
 801a860:	f7f5 faba 	bl	800fdd8 <TS_IO_Read>
 801a864:	4603      	mov	r3, r0
 801a866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a868:	7cfb      	ldrb	r3, [r7, #19]
 801a86a:	b2db      	uxtb	r3, r3
 801a86c:	021b      	lsls	r3, r3, #8
 801a86e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a872:	b21a      	sxth	r2, r3
 801a874:	4b20      	ldr	r3, [pc, #128]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a876:	881b      	ldrh	r3, [r3, #0]
 801a878:	b21b      	sxth	r3, r3
 801a87a:	4313      	orrs	r3, r2
 801a87c:	b21b      	sxth	r3, r3
 801a87e:	b29a      	uxth	r2, r3
 801a880:	4b1d      	ldr	r3, [pc, #116]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 801a884:	4b1c      	ldr	r3, [pc, #112]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a886:	881a      	ldrh	r2, [r3, #0]
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801a88c:	89fb      	ldrh	r3, [r7, #14]
 801a88e:	b2db      	uxtb	r3, r3
 801a890:	7d7a      	ldrb	r2, [r7, #21]
 801a892:	4611      	mov	r1, r2
 801a894:	4618      	mov	r0, r3
 801a896:	f7f5 fa9f 	bl	800fdd8 <TS_IO_Read>
 801a89a:	4603      	mov	r3, r0
 801a89c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a89e:	7cfb      	ldrb	r3, [r7, #19]
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	b29a      	uxth	r2, r3
 801a8a4:	4b14      	ldr	r3, [pc, #80]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a8a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801a8a8:	89fb      	ldrh	r3, [r7, #14]
 801a8aa:	b2db      	uxtb	r3, r3
 801a8ac:	7d3a      	ldrb	r2, [r7, #20]
 801a8ae:	4611      	mov	r1, r2
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7f5 fa91 	bl	800fdd8 <TS_IO_Read>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a8ba:	7cfb      	ldrb	r3, [r7, #19]
 801a8bc:	b2db      	uxtb	r3, r3
 801a8be:	021b      	lsls	r3, r3, #8
 801a8c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a8c4:	b21a      	sxth	r2, r3
 801a8c6:	4b0c      	ldr	r3, [pc, #48]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a8c8:	881b      	ldrh	r3, [r3, #0]
 801a8ca:	b21b      	sxth	r3, r3
 801a8cc:	4313      	orrs	r3, r2
 801a8ce:	b21b      	sxth	r3, r3
 801a8d0:	b29a      	uxth	r2, r3
 801a8d2:	4b09      	ldr	r3, [pc, #36]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a8d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 801a8d6:	4b08      	ldr	r3, [pc, #32]	; (801a8f8 <ft5336_TS_GetXY+0x1dc>)
 801a8d8:	881a      	ldrh	r2, [r3, #0]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801a8de:	4b05      	ldr	r3, [pc, #20]	; (801a8f4 <ft5336_TS_GetXY+0x1d8>)
 801a8e0:	789b      	ldrb	r3, [r3, #2]
 801a8e2:	3301      	adds	r3, #1
 801a8e4:	b2da      	uxtb	r2, r3
 801a8e6:	4b03      	ldr	r3, [pc, #12]	; (801a8f4 <ft5336_TS_GetXY+0x1d8>)
 801a8e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 801a8ea:	bf00      	nop
 801a8ec:	3718      	adds	r7, #24
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}
 801a8f2:	bf00      	nop
 801a8f4:	2000bfdc 	.word	0x2000bfdc
 801a8f8:	2000bfe0 	.word	0x2000bfe0

0801a8fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b084      	sub	sp, #16
 801a900:	af00      	add	r7, sp, #0
 801a902:	4603      	mov	r3, r0
 801a904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 801a906:	2300      	movs	r3, #0
 801a908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a90a:	2301      	movs	r3, #1
 801a90c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a90e:	88fb      	ldrh	r3, [r7, #6]
 801a910:	b2db      	uxtb	r3, r3
 801a912:	7bfa      	ldrb	r2, [r7, #15]
 801a914:	21a4      	movs	r1, #164	; 0xa4
 801a916:	4618      	mov	r0, r3
 801a918:	f7f5 fa44 	bl	800fda4 <TS_IO_Write>
}
 801a91c:	bf00      	nop
 801a91e:	3710      	adds	r7, #16
 801a920:	46bd      	mov	sp, r7
 801a922:	bd80      	pop	{r7, pc}

0801a924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b084      	sub	sp, #16
 801a928:	af00      	add	r7, sp, #0
 801a92a:	4603      	mov	r3, r0
 801a92c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801a92e:	2300      	movs	r3, #0
 801a930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a932:	2300      	movs	r3, #0
 801a934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a936:	88fb      	ldrh	r3, [r7, #6]
 801a938:	b2db      	uxtb	r3, r3
 801a93a:	7bfa      	ldrb	r2, [r7, #15]
 801a93c:	21a4      	movs	r1, #164	; 0xa4
 801a93e:	4618      	mov	r0, r3
 801a940:	f7f5 fa30 	bl	800fda4 <TS_IO_Write>
}
 801a944:	bf00      	nop
 801a946:	3710      	adds	r7, #16
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 801a94c:	b480      	push	{r7}
 801a94e:	b083      	sub	sp, #12
 801a950:	af00      	add	r7, sp, #0
 801a952:	4603      	mov	r3, r0
 801a954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801a956:	2300      	movs	r3, #0
}
 801a958:	4618      	mov	r0, r3
 801a95a:	370c      	adds	r7, #12
 801a95c:	46bd      	mov	sp, r7
 801a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a962:	4770      	bx	lr

0801a964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 801a964:	b480      	push	{r7}
 801a966:	b083      	sub	sp, #12
 801a968:	af00      	add	r7, sp, #0
 801a96a:	4603      	mov	r3, r0
 801a96c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 801a96e:	bf00      	nop
 801a970:	370c      	adds	r7, #12
 801a972:	46bd      	mov	sp, r7
 801a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a978:	4770      	bx	lr

0801a97a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b084      	sub	sp, #16
 801a97e:	af00      	add	r7, sp, #0
 801a980:	4603      	mov	r3, r0
 801a982:	6039      	str	r1, [r7, #0]
 801a984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 801a986:	2300      	movs	r3, #0
 801a988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801a98a:	88fb      	ldrh	r3, [r7, #6]
 801a98c:	b2db      	uxtb	r3, r3
 801a98e:	2101      	movs	r1, #1
 801a990:	4618      	mov	r0, r3
 801a992:	f7f5 fa21 	bl	800fdd8 <TS_IO_Read>
 801a996:	4603      	mov	r3, r0
 801a998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 801a99a:	7bfb      	ldrb	r3, [r7, #15]
 801a99c:	b2db      	uxtb	r3, r3
 801a99e:	461a      	mov	r2, r3
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	601a      	str	r2, [r3, #0]
}
 801a9a4:	bf00      	nop
 801a9a6:	3710      	adds	r7, #16
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	bd80      	pop	{r7, pc}

0801a9ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b086      	sub	sp, #24
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	60b9      	str	r1, [r7, #8]
 801a9b4:	607a      	str	r2, [r7, #4]
 801a9b6:	603b      	str	r3, [r7, #0]
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a9bc:	2300      	movs	r3, #0
 801a9be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801a9cc:	4b4d      	ldr	r3, [pc, #308]	; (801ab04 <ft5336_TS_GetTouchInfo+0x158>)
 801a9ce:	785b      	ldrb	r3, [r3, #1]
 801a9d0:	461a      	mov	r2, r3
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	f080 8090 	bcs.w	801aafa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 801a9da:	68bb      	ldr	r3, [r7, #8]
 801a9dc:	2b09      	cmp	r3, #9
 801a9de:	d85d      	bhi.n	801aa9c <ft5336_TS_GetTouchInfo+0xf0>
 801a9e0:	a201      	add	r2, pc, #4	; (adr r2, 801a9e8 <ft5336_TS_GetTouchInfo+0x3c>)
 801a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9e6:	bf00      	nop
 801a9e8:	0801aa11 	.word	0x0801aa11
 801a9ec:	0801aa1f 	.word	0x0801aa1f
 801a9f0:	0801aa2d 	.word	0x0801aa2d
 801a9f4:	0801aa3b 	.word	0x0801aa3b
 801a9f8:	0801aa49 	.word	0x0801aa49
 801a9fc:	0801aa57 	.word	0x0801aa57
 801aa00:	0801aa65 	.word	0x0801aa65
 801aa04:	0801aa73 	.word	0x0801aa73
 801aa08:	0801aa81 	.word	0x0801aa81
 801aa0c:	0801aa8f 	.word	0x0801aa8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801aa10:	2303      	movs	r3, #3
 801aa12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 801aa14:	2307      	movs	r3, #7
 801aa16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 801aa18:	2308      	movs	r3, #8
 801aa1a:	757b      	strb	r3, [r7, #21]
      break;
 801aa1c:	e03f      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801aa1e:	2309      	movs	r3, #9
 801aa20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 801aa22:	230d      	movs	r3, #13
 801aa24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801aa26:	230e      	movs	r3, #14
 801aa28:	757b      	strb	r3, [r7, #21]
      break;
 801aa2a:	e038      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 801aa2c:	230f      	movs	r3, #15
 801aa2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801aa30:	2313      	movs	r3, #19
 801aa32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 801aa34:	2314      	movs	r3, #20
 801aa36:	757b      	strb	r3, [r7, #21]
      break;
 801aa38:	e031      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801aa3a:	2315      	movs	r3, #21
 801aa3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801aa3e:	2319      	movs	r3, #25
 801aa40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801aa42:	231a      	movs	r3, #26
 801aa44:	757b      	strb	r3, [r7, #21]
      break;
 801aa46:	e02a      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 801aa48:	231b      	movs	r3, #27
 801aa4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801aa4c:	231f      	movs	r3, #31
 801aa4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801aa50:	2320      	movs	r3, #32
 801aa52:	757b      	strb	r3, [r7, #21]
      break;
 801aa54:	e023      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 801aa56:	2321      	movs	r3, #33	; 0x21
 801aa58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801aa5a:	2325      	movs	r3, #37	; 0x25
 801aa5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801aa5e:	2326      	movs	r3, #38	; 0x26
 801aa60:	757b      	strb	r3, [r7, #21]
      break;
 801aa62:	e01c      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 801aa64:	2327      	movs	r3, #39	; 0x27
 801aa66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 801aa68:	232b      	movs	r3, #43	; 0x2b
 801aa6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 801aa6c:	232c      	movs	r3, #44	; 0x2c
 801aa6e:	757b      	strb	r3, [r7, #21]
      break;
 801aa70:	e015      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 801aa72:	232d      	movs	r3, #45	; 0x2d
 801aa74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801aa76:	2331      	movs	r3, #49	; 0x31
 801aa78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801aa7a:	2332      	movs	r3, #50	; 0x32
 801aa7c:	757b      	strb	r3, [r7, #21]
      break;
 801aa7e:	e00e      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 801aa80:	2333      	movs	r3, #51	; 0x33
 801aa82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 801aa84:	2337      	movs	r3, #55	; 0x37
 801aa86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 801aa88:	2338      	movs	r3, #56	; 0x38
 801aa8a:	757b      	strb	r3, [r7, #21]
      break;
 801aa8c:	e007      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 801aa8e:	2339      	movs	r3, #57	; 0x39
 801aa90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 801aa92:	233d      	movs	r3, #61	; 0x3d
 801aa94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801aa96:	233e      	movs	r3, #62	; 0x3e
 801aa98:	757b      	strb	r3, [r7, #21]
      break;
 801aa9a:	e000      	b.n	801aa9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 801aa9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801aa9e:	89fb      	ldrh	r3, [r7, #14]
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	7dfa      	ldrb	r2, [r7, #23]
 801aaa4:	4611      	mov	r1, r2
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7f5 f996 	bl	800fdd8 <TS_IO_Read>
 801aaac:	4603      	mov	r3, r0
 801aaae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801aab0:	7d3b      	ldrb	r3, [r7, #20]
 801aab2:	b2db      	uxtb	r3, r3
 801aab4:	119b      	asrs	r3, r3, #6
 801aab6:	f003 0203 	and.w	r2, r3, #3
 801aaba:	6a3b      	ldr	r3, [r7, #32]
 801aabc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801aabe:	89fb      	ldrh	r3, [r7, #14]
 801aac0:	b2db      	uxtb	r3, r3
 801aac2:	7dba      	ldrb	r2, [r7, #22]
 801aac4:	4611      	mov	r1, r2
 801aac6:	4618      	mov	r0, r3
 801aac8:	f7f5 f986 	bl	800fdd8 <TS_IO_Read>
 801aacc:	4603      	mov	r3, r0
 801aace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801aad0:	7d3b      	ldrb	r3, [r7, #20]
 801aad2:	b2db      	uxtb	r3, r3
 801aad4:	461a      	mov	r2, r3
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 801aada:	89fb      	ldrh	r3, [r7, #14]
 801aadc:	b2db      	uxtb	r3, r3
 801aade:	7d7a      	ldrb	r2, [r7, #21]
 801aae0:	4611      	mov	r1, r2
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7f5 f978 	bl	800fdd8 <TS_IO_Read>
 801aae8:	4603      	mov	r3, r0
 801aaea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801aaec:	7d3b      	ldrb	r3, [r7, #20]
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	111b      	asrs	r3, r3, #4
 801aaf2:	f003 0204 	and.w	r2, r3, #4
 801aaf6:	683b      	ldr	r3, [r7, #0]
 801aaf8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 801aafa:	bf00      	nop
 801aafc:	3718      	adds	r7, #24
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd80      	pop	{r7, pc}
 801ab02:	bf00      	nop
 801ab04:	2000bfdc 	.word	0x2000bfdc

0801ab08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 801ab08:	b480      	push	{r7}
 801ab0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 801ab0c:	4b03      	ldr	r3, [pc, #12]	; (801ab1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 801ab0e:	781b      	ldrb	r3, [r3, #0]
}
 801ab10:	4618      	mov	r0, r3
 801ab12:	46bd      	mov	sp, r7
 801ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab18:	4770      	bx	lr
 801ab1a:	bf00      	nop
 801ab1c:	2000bfdc 	.word	0x2000bfdc

0801ab20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 801ab24:	f7ff fff0 	bl	801ab08 <ft5336_Get_I2C_InitializedStatus>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d104      	bne.n	801ab38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801ab2e:	f7f5 f92f 	bl	800fd90 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801ab32:	4b02      	ldr	r3, [pc, #8]	; (801ab3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 801ab34:	2201      	movs	r2, #1
 801ab36:	701a      	strb	r2, [r3, #0]
  }
}
 801ab38:	bf00      	nop
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	2000bfdc 	.word	0x2000bfdc

0801ab40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801ab40:	b480      	push	{r7}
 801ab42:	b085      	sub	sp, #20
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	4603      	mov	r3, r0
 801ab48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801ab4e:	68fb      	ldr	r3, [r7, #12]
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	3714      	adds	r7, #20
 801ab54:	46bd      	mov	sp, r7
 801ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5a:	4770      	bx	lr

0801ab5c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801ab5c:	8880      	ldrh	r0, [r0, #4]
 801ab5e:	4770      	bx	lr

0801ab60 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801ab60:	2300      	movs	r3, #0
 801ab62:	8083      	strh	r3, [r0, #4]
 801ab64:	4770      	bx	lr
	...

0801ab68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab6a:	6803      	ldr	r3, [r0, #0]
 801ab6c:	460e      	mov	r6, r1
 801ab6e:	2100      	movs	r1, #0
 801ab70:	4605      	mov	r5, r0
 801ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab74:	4798      	blx	r3
 801ab76:	4604      	mov	r4, r0
 801ab78:	682b      	ldr	r3, [r5, #0]
 801ab7a:	4628      	mov	r0, r5
 801ab7c:	1b34      	subs	r4, r6, r4
 801ab7e:	6a1b      	ldr	r3, [r3, #32]
 801ab80:	b2a4      	uxth	r4, r4
 801ab82:	4798      	blx	r3
 801ab84:	88ab      	ldrh	r3, [r5, #4]
 801ab86:	fbb4 f4f0 	udiv	r4, r4, r0
 801ab8a:	42a3      	cmp	r3, r4
 801ab8c:	d805      	bhi.n	801ab9a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801ab8e:	4b0e      	ldr	r3, [pc, #56]	; (801abc8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801ab90:	211e      	movs	r1, #30
 801ab92:	4a0e      	ldr	r2, [pc, #56]	; (801abcc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ab94:	480e      	ldr	r0, [pc, #56]	; (801abd0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ab96:	f010 f825 	bl	802abe4 <__assert_func>
 801ab9a:	682b      	ldr	r3, [r5, #0]
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	4628      	mov	r0, r5
 801aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aba2:	4798      	blx	r3
 801aba4:	682b      	ldr	r3, [r5, #0]
 801aba6:	4607      	mov	r7, r0
 801aba8:	4628      	mov	r0, r5
 801abaa:	6a1b      	ldr	r3, [r3, #32]
 801abac:	4798      	blx	r3
 801abae:	1bf3      	subs	r3, r6, r7
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	fbb3 f2f0 	udiv	r2, r3, r0
 801abb6:	fb02 3010 	mls	r0, r2, r0, r3
 801abba:	b118      	cbz	r0, 801abc4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801abbc:	4b05      	ldr	r3, [pc, #20]	; (801abd4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801abbe:	211f      	movs	r1, #31
 801abc0:	4a02      	ldr	r2, [pc, #8]	; (801abcc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801abc2:	e7e7      	b.n	801ab94 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801abc4:	4620      	mov	r0, r4
 801abc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc8:	0802d738 	.word	0x0802d738
 801abcc:	0802d8a6 	.word	0x0802d8a6
 801abd0:	0802d74d 	.word	0x0802d74d
 801abd4:	0802d77b 	.word	0x0802d77b

0801abd8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801abd8:	b538      	push	{r3, r4, r5, lr}
 801abda:	6803      	ldr	r3, [r0, #0]
 801abdc:	460d      	mov	r5, r1
 801abde:	4604      	mov	r4, r0
 801abe0:	6a1b      	ldr	r3, [r3, #32]
 801abe2:	4798      	blx	r3
 801abe4:	4285      	cmp	r5, r0
 801abe6:	d905      	bls.n	801abf4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801abe8:	4b0c      	ldr	r3, [pc, #48]	; (801ac1c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801abea:	212f      	movs	r1, #47	; 0x2f
 801abec:	4a0c      	ldr	r2, [pc, #48]	; (801ac20 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801abee:	480d      	ldr	r0, [pc, #52]	; (801ac24 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801abf0:	f00f fff8 	bl	802abe4 <__assert_func>
 801abf4:	6823      	ldr	r3, [r4, #0]
 801abf6:	4620      	mov	r0, r4
 801abf8:	88a5      	ldrh	r5, [r4, #4]
 801abfa:	69db      	ldr	r3, [r3, #28]
 801abfc:	4798      	blx	r3
 801abfe:	4285      	cmp	r5, r0
 801ac00:	d303      	bcc.n	801ac0a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801ac02:	4b09      	ldr	r3, [pc, #36]	; (801ac28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801ac04:	2130      	movs	r1, #48	; 0x30
 801ac06:	4a06      	ldr	r2, [pc, #24]	; (801ac20 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ac08:	e7f1      	b.n	801abee <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801ac0a:	6823      	ldr	r3, [r4, #0]
 801ac0c:	4620      	mov	r0, r4
 801ac0e:	88a1      	ldrh	r1, [r4, #4]
 801ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac12:	4798      	blx	r3
 801ac14:	88a3      	ldrh	r3, [r4, #4]
 801ac16:	3301      	adds	r3, #1
 801ac18:	80a3      	strh	r3, [r4, #4]
 801ac1a:	bd38      	pop	{r3, r4, r5, pc}
 801ac1c:	0802d7f5 	.word	0x0802d7f5
 801ac20:	0802d8e9 	.word	0x0802d8e9
 801ac24:	0802d74d 	.word	0x0802d74d
 801ac28:	0802d80c 	.word	0x0802d80c

0801ac2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801ac2c:	b570      	push	{r4, r5, r6, lr}
 801ac2e:	6803      	ldr	r3, [r0, #0]
 801ac30:	4616      	mov	r6, r2
 801ac32:	4604      	mov	r4, r0
 801ac34:	460d      	mov	r5, r1
 801ac36:	6a1b      	ldr	r3, [r3, #32]
 801ac38:	4798      	blx	r3
 801ac3a:	4286      	cmp	r6, r0
 801ac3c:	d905      	bls.n	801ac4a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801ac3e:	4b06      	ldr	r3, [pc, #24]	; (801ac58 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801ac40:	2139      	movs	r1, #57	; 0x39
 801ac42:	4a06      	ldr	r2, [pc, #24]	; (801ac5c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801ac44:	4806      	ldr	r0, [pc, #24]	; (801ac60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801ac46:	f00f ffcd 	bl	802abe4 <__assert_func>
 801ac4a:	6823      	ldr	r3, [r4, #0]
 801ac4c:	4629      	mov	r1, r5
 801ac4e:	4620      	mov	r0, r4
 801ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac56:	4718      	bx	r3
 801ac58:	0802d7f5 	.word	0x0802d7f5
 801ac5c:	0802d85c 	.word	0x0802d85c
 801ac60:	0802d74d 	.word	0x0802d74d

0801ac64 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801ac64:	4770      	bx	lr
	...

0801ac68 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801ac68:	4a02      	ldr	r2, [pc, #8]	; (801ac74 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801ac6a:	6002      	str	r2, [r0, #0]
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	8082      	strh	r2, [r0, #4]
 801ac70:	4770      	bx	lr
 801ac72:	bf00      	nop
 801ac74:	0802d830 	.word	0x0802d830

0801ac78 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 801ac78:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801ac7c:	4770      	bx	lr

0801ac7e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801ac7e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801ac82:	4770      	bx	lr

0801ac84 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 801ac84:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 801ac88:	4770      	bx	lr

0801ac8a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801ac8a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801ac8e:	4770      	bx	lr

0801ac90 <_ZN8touchgfx11BoxProgressD1Ev>:
 801ac90:	4b03      	ldr	r3, [pc, #12]	; (801aca0 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 801ac92:	b510      	push	{r4, lr}
 801ac94:	4604      	mov	r4, r0
 801ac96:	6003      	str	r3, [r0, #0]
 801ac98:	f000 f8b6 	bl	801ae08 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801ac9c:	4620      	mov	r0, r4
 801ac9e:	bd10      	pop	{r4, pc}
 801aca0:	0802d930 	.word	0x0802d930

0801aca4 <_ZN8touchgfx11BoxProgressD0Ev>:
 801aca4:	b510      	push	{r4, lr}
 801aca6:	4604      	mov	r4, r0
 801aca8:	f7ff fff2 	bl	801ac90 <_ZN8touchgfx11BoxProgressD1Ev>
 801acac:	21c0      	movs	r1, #192	; 0xc0
 801acae:	4620      	mov	r0, r4
 801acb0:	f00f ff6d 	bl	802ab8e <_ZdlPvj>
 801acb4:	4620      	mov	r0, r4
 801acb6:	bd10      	pop	{r4, pc}

0801acb8 <_ZN8touchgfx11BoxProgressC1Ev>:
 801acb8:	b510      	push	{r4, lr}
 801acba:	4604      	mov	r4, r0
 801acbc:	f000 f8b8 	bl	801ae30 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801acc0:	2201      	movs	r2, #1
 801acc2:	4b16      	ldr	r3, [pc, #88]	; (801ad1c <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801acc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acc8:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801accc:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 801acd0:	4a13      	ldr	r2, [pc, #76]	; (801ad20 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801acd2:	6023      	str	r3, [r4, #0]
 801acd4:	2300      	movs	r3, #0
 801acd6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801acda:	22ff      	movs	r2, #255	; 0xff
 801acdc:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 801ace0:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801ace4:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 801ace8:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801acec:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 801acf0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801acf4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801acf8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801acfc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801ad00:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801ad04:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801ad08:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801ad0c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801ad10:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801ad14:	f000 fbb8 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ad18:	4620      	mov	r0, r4
 801ad1a:	bd10      	pop	{r4, pc}
 801ad1c:	0802d930 	.word	0x0802d930
 801ad20:	0802ecc4 	.word	0x0802ecc4

0801ad24 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 801ad24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ad28:	4617      	mov	r7, r2
 801ad2a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	4604      	mov	r4, r0
 801ad32:	460e      	mov	r6, r1
 801ad34:	4698      	mov	r8, r3
 801ad36:	4611      	mov	r1, r2
 801ad38:	9500      	str	r5, [sp, #0]
 801ad3a:	3090      	adds	r0, #144	; 0x90
 801ad3c:	f7f6 f814 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ad40:	4643      	mov	r3, r8
 801ad42:	463a      	mov	r2, r7
 801ad44:	4631      	mov	r1, r6
 801ad46:	4620      	mov	r0, r4
 801ad48:	9508      	str	r5, [sp, #32]
 801ad4a:	b002      	add	sp, #8
 801ad4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad50:	f000 b9fa 	b.w	801b148 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801ad54 <_ZN8touchgfx11BoxProgress8setValueEi>:
 801ad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad56:	4604      	mov	r4, r0
 801ad58:	f000 fa40 	bl	801b1dc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801ad5c:	f104 0590 	add.w	r5, r4, #144	; 0x90
 801ad60:	4628      	mov	r0, r5
 801ad62:	f004 fb3f 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801ad66:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801ad6a:	2b03      	cmp	r3, #3
 801ad6c:	d814      	bhi.n	801ad98 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801ad6e:	e8df f003 	tbb	[pc, r3]
 801ad72:	0202      	.short	0x0202
 801ad74:	1010      	.short	0x1010
 801ad76:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	f000 fa88 	bl	801b290 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801ad80:	b200      	sxth	r0, r0
 801ad82:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801ad86:	2b03      	cmp	r3, #3
 801ad88:	d81a      	bhi.n	801adc0 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801ad8a:	e8df f003 	tbb	[pc, r3]
 801ad8e:	0e07      	.short	0x0e07
 801ad90:	231f      	.short	0x231f
 801ad92:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 801ad96:	e7f0      	b.n	801ad7a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 801ad98:	2000      	movs	r0, #0
 801ad9a:	e7f2      	b.n	801ad82 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801ad9c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801ada0:	9300      	str	r3, [sp, #0]
 801ada2:	4603      	mov	r3, r0
 801ada4:	2200      	movs	r2, #0
 801ada6:	2100      	movs	r1, #0
 801ada8:	e007      	b.n	801adba <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801adaa:	8921      	ldrh	r1, [r4, #8]
 801adac:	2200      	movs	r2, #0
 801adae:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801adb2:	1a09      	subs	r1, r1, r0
 801adb4:	9300      	str	r3, [sp, #0]
 801adb6:	4603      	mov	r3, r0
 801adb8:	b209      	sxth	r1, r1
 801adba:	4628      	mov	r0, r5
 801adbc:	f7f5 ffd4 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801adc0:	4628      	mov	r0, r5
 801adc2:	b003      	add	sp, #12
 801adc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801adc8:	f004 bb0c 	b.w	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801adcc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801add0:	9000      	str	r0, [sp, #0]
 801add2:	e7e7      	b.n	801ada4 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 801add4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801add8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801addc:	1a12      	subs	r2, r2, r0
 801adde:	9000      	str	r0, [sp, #0]
 801ade0:	b212      	sxth	r2, r2
 801ade2:	e7e0      	b.n	801ada6 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

0801ade4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801ade4:	b570      	push	{r4, r5, r6, lr}
 801ade6:	6803      	ldr	r3, [r0, #0]
 801ade8:	4604      	mov	r4, r0
 801adea:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801adee:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801adf2:	4798      	blx	r3
 801adf4:	4601      	mov	r1, r0
 801adf6:	462b      	mov	r3, r5
 801adf8:	4620      	mov	r0, r4
 801adfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adfe:	4718      	bx	r3

0801ae00 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801ae00:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801ae04:	4770      	bx	lr
	...

0801ae08 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 801ae08:	4b03      	ldr	r3, [pc, #12]	; (801ae18 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801ae0a:	b510      	push	{r4, lr}
 801ae0c:	4604      	mov	r4, r0
 801ae0e:	6003      	str	r3, [r0, #0]
 801ae10:	f000 f999 	bl	801b146 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801ae14:	4620      	mov	r0, r4
 801ae16:	bd10      	pop	{r4, pc}
 801ae18:	0802da08 	.word	0x0802da08

0801ae1c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801ae1c:	b510      	push	{r4, lr}
 801ae1e:	4604      	mov	r4, r0
 801ae20:	f7ff fff2 	bl	801ae08 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801ae24:	2190      	movs	r1, #144	; 0x90
 801ae26:	4620      	mov	r0, r4
 801ae28:	f00f feb1 	bl	802ab8e <_ZdlPvj>
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	bd10      	pop	{r4, pc}

0801ae30 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801ae30:	b510      	push	{r4, lr}
 801ae32:	4604      	mov	r4, r0
 801ae34:	f000 fa4c 	bl	801b2d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801ae38:	4b03      	ldr	r3, [pc, #12]	; (801ae48 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801ae3a:	2100      	movs	r1, #0
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	6023      	str	r3, [r4, #0]
 801ae40:	f7ff ffd0 	bl	801ade4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 801ae44:	4620      	mov	r0, r4
 801ae46:	bd10      	pop	{r4, pc}
 801ae48:	0802da08 	.word	0x0802da08

0801ae4c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801ae4c:	b570      	push	{r4, r5, r6, lr}
 801ae4e:	6803      	ldr	r3, [r0, #0]
 801ae50:	4604      	mov	r4, r0
 801ae52:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801ae56:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801ae5a:	4798      	blx	r3
 801ae5c:	4601      	mov	r1, r0
 801ae5e:	462b      	mov	r3, r5
 801ae60:	4620      	mov	r0, r4
 801ae62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae66:	4718      	bx	r3

0801ae68 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 801ae68:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801ae6c:	4770      	bx	lr

0801ae6e <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801ae6e:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801ae72:	4770      	bx	lr

0801ae74 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801ae74:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 801ae78:	4770      	bx	lr

0801ae7a <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801ae7a:	b507      	push	{r0, r1, r2, lr}
 801ae7c:	ab02      	add	r3, sp, #8
 801ae7e:	30bc      	adds	r0, #188	; 0xbc
 801ae80:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801ae84:	4619      	mov	r1, r3
 801ae86:	f002 fa73 	bl	801d370 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801ae8a:	b003      	add	sp, #12
 801ae8c:	f85d fb04 	ldr.w	pc, [sp], #4

0801ae90 <_ZN8touchgfx13ImageProgressD1Ev>:
 801ae90:	4b03      	ldr	r3, [pc, #12]	; (801aea0 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801ae92:	b510      	push	{r4, lr}
 801ae94:	4604      	mov	r4, r0
 801ae96:	6003      	str	r3, [r0, #0]
 801ae98:	f7ff ffb6 	bl	801ae08 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	bd10      	pop	{r4, pc}
 801aea0:	0802db34 	.word	0x0802db34

0801aea4 <_ZN8touchgfx13ImageProgressD0Ev>:
 801aea4:	b510      	push	{r4, lr}
 801aea6:	4604      	mov	r4, r0
 801aea8:	f7ff fff2 	bl	801ae90 <_ZN8touchgfx13ImageProgressD1Ev>
 801aeac:	21f0      	movs	r1, #240	; 0xf0
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f00f fe6d 	bl	802ab8e <_ZdlPvj>
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	bd10      	pop	{r4, pc}

0801aeb8 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 801aeb8:	b508      	push	{r3, lr}
 801aeba:	4b06      	ldr	r3, [pc, #24]	; (801aed4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	b92b      	cbnz	r3, 801aecc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 801aec0:	4b05      	ldr	r3, [pc, #20]	; (801aed8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801aec2:	21b8      	movs	r1, #184	; 0xb8
 801aec4:	4a05      	ldr	r2, [pc, #20]	; (801aedc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801aec6:	4806      	ldr	r0, [pc, #24]	; (801aee0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 801aec8:	f00f fe8c 	bl	802abe4 <__assert_func>
 801aecc:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 801aed0:	bd08      	pop	{r3, pc}
 801aed2:	bf00      	nop
 801aed4:	2000c0b8 	.word	0x2000c0b8
 801aed8:	0802dac8 	.word	0x0802dac8
 801aedc:	0802dc0c 	.word	0x0802dc0c
 801aee0:	0802db04 	.word	0x0802db04

0801aee4 <_ZN8touchgfx13ImageProgressC1Ev>:
 801aee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801aee8:	4604      	mov	r4, r0
 801aeea:	f7ff ffa1 	bl	801ae30 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801aeee:	4b31      	ldr	r3, [pc, #196]	; (801afb4 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 801aef0:	a902      	add	r1, sp, #8
 801aef2:	4626      	mov	r6, r4
 801aef4:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 801aef8:	2500      	movs	r5, #0
 801aefa:	4a2f      	ldr	r2, [pc, #188]	; (801afb8 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801aefc:	f846 3b90 	str.w	r3, [r6], #144
 801af00:	2701      	movs	r7, #1
 801af02:	4b2e      	ldr	r3, [pc, #184]	; (801afbc <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 801af04:	4640      	mov	r0, r8
 801af06:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801af0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801af0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af12:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801af16:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801af1a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801af1e:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 801af22:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801af26:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801af2a:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 801af2e:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 801af32:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801af36:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801af3a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801af3e:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 801af42:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801af46:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801af4a:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801af4e:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 801af52:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801af56:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801af5a:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801af5e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 801af62:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801af66:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801af6a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801af6e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 801af72:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801af76:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801af7a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 801af7e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801af82:	f002 fd53 	bl	801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801af86:	4b0e      	ldr	r3, [pc, #56]	; (801afc0 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 801af88:	4641      	mov	r1, r8
 801af8a:	4630      	mov	r0, r6
 801af8c:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 801af90:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801af94:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 801af98:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801af9c:	f000 fa74 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801afa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801afa4:	4631      	mov	r1, r6
 801afa6:	f000 fa6f 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801afaa:	4620      	mov	r0, r4
 801afac:	b002      	add	sp, #8
 801afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afb2:	bf00      	nop
 801afb4:	0802db34 	.word	0x0802db34
 801afb8:	0802ef38 	.word	0x0802ef38
 801afbc:	0802deb0 	.word	0x0802deb0
 801afc0:	0802ed2c 	.word	0x0802ed2c

0801afc4 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801afc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801afc8:	4617      	mov	r7, r2
 801afca:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801afce:	2200      	movs	r2, #0
 801afd0:	4604      	mov	r4, r0
 801afd2:	460e      	mov	r6, r1
 801afd4:	4698      	mov	r8, r3
 801afd6:	4611      	mov	r1, r2
 801afd8:	9500      	str	r5, [sp, #0]
 801afda:	3090      	adds	r0, #144	; 0x90
 801afdc:	f7f5 fec4 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801afe0:	4643      	mov	r3, r8
 801afe2:	463a      	mov	r2, r7
 801afe4:	4631      	mov	r1, r6
 801afe6:	4620      	mov	r0, r4
 801afe8:	9508      	str	r5, [sp, #32]
 801afea:	b002      	add	sp, #8
 801afec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aff0:	f000 b8aa 	b.w	801b148 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801aff4 <_ZN8touchgfx13ImageProgress8setValueEi>:
 801aff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aff6:	4604      	mov	r4, r0
 801aff8:	f000 f8f0 	bl	801b1dc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801affc:	f104 0790 	add.w	r7, r4, #144	; 0x90
 801b000:	4638      	mov	r0, r7
 801b002:	f004 f9ef 	bl	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b006:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801b00a:	4620      	mov	r0, r4
 801b00c:	2b01      	cmp	r3, #1
 801b00e:	bf94      	ite	ls
 801b010:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801b014:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 801b018:	f000 f93a 	bl	801b290 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801b01c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 801b020:	4606      	mov	r6, r0
 801b022:	b205      	sxth	r5, r0
 801b024:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801b028:	2a00      	cmp	r2, #0
 801b02a:	d056      	beq.n	801b0da <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 801b02c:	2b03      	cmp	r3, #3
 801b02e:	d82c      	bhi.n	801b08a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801b030:	e8df f003 	tbb	[pc, r3]
 801b034:	3d311202 	.word	0x3d311202
 801b038:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801b03c:	2200      	movs	r2, #0
 801b03e:	9300      	str	r3, [sp, #0]
 801b040:	4611      	mov	r1, r2
 801b042:	462b      	mov	r3, r5
 801b044:	4638      	mov	r0, r7
 801b046:	f7f5 fe8f 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b04a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801b04e:	9300      	str	r3, [sp, #0]
 801b050:	462b      	mov	r3, r5
 801b052:	2200      	movs	r2, #0
 801b054:	4611      	mov	r1, r2
 801b056:	e014      	b.n	801b082 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801b058:	8921      	ldrh	r1, [r4, #8]
 801b05a:	2200      	movs	r2, #0
 801b05c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801b060:	1a09      	subs	r1, r1, r0
 801b062:	4638      	mov	r0, r7
 801b064:	9300      	str	r3, [sp, #0]
 801b066:	462b      	mov	r3, r5
 801b068:	b209      	sxth	r1, r1
 801b06a:	f7f5 fe7d 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b06e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801b072:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b076:	4249      	negs	r1, r1
 801b078:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801b07c:	9200      	str	r2, [sp, #0]
 801b07e:	b209      	sxth	r1, r1
 801b080:	2200      	movs	r2, #0
 801b082:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801b086:	f7f5 fe6f 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b08a:	4638      	mov	r0, r7
 801b08c:	b003      	add	sp, #12
 801b08e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b092:	f004 b9a7 	b.w	801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b096:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b09a:	2200      	movs	r2, #0
 801b09c:	9500      	str	r5, [sp, #0]
 801b09e:	2100      	movs	r1, #0
 801b0a0:	4638      	mov	r0, r7
 801b0a2:	f7f5 fe61 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b0a6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b0aa:	9500      	str	r5, [sp, #0]
 801b0ac:	e7d1      	b.n	801b052 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801b0ae:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801b0b2:	2100      	movs	r1, #0
 801b0b4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b0b8:	1a12      	subs	r2, r2, r0
 801b0ba:	9500      	str	r5, [sp, #0]
 801b0bc:	4638      	mov	r0, r7
 801b0be:	b212      	sxth	r2, r2
 801b0c0:	f7f5 fe52 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b0c4:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 801b0c8:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801b0cc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b0d0:	4252      	negs	r2, r2
 801b0d2:	9100      	str	r1, [sp, #0]
 801b0d4:	b212      	sxth	r2, r2
 801b0d6:	2100      	movs	r1, #0
 801b0d8:	e7d3      	b.n	801b082 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801b0da:	2b03      	cmp	r3, #3
 801b0dc:	d8d5      	bhi.n	801b08a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801b0de:	e8df f003 	tbb	[pc, r3]
 801b0e2:	1102      	.short	0x1102
 801b0e4:	2a1b      	.short	0x2a1b
 801b0e6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b0ea:	2200      	movs	r2, #0
 801b0ec:	4638      	mov	r0, r7
 801b0ee:	4611      	mov	r1, r2
 801b0f0:	9300      	str	r3, [sp, #0]
 801b0f2:	462b      	mov	r3, r5
 801b0f4:	f7f5 fe38 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b0f8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b0fc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801b100:	1af1      	subs	r1, r6, r3
 801b102:	e7bb      	b.n	801b07c <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 801b104:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801b108:	2200      	movs	r2, #0
 801b10a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801b10e:	1a09      	subs	r1, r1, r0
 801b110:	9300      	str	r3, [sp, #0]
 801b112:	462b      	mov	r3, r5
 801b114:	b209      	sxth	r1, r1
 801b116:	e795      	b.n	801b044 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 801b118:	2200      	movs	r2, #0
 801b11a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b11e:	4638      	mov	r0, r7
 801b120:	9500      	str	r5, [sp, #0]
 801b122:	4611      	mov	r1, r2
 801b124:	f7f5 fe20 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b128:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 801b12c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b130:	1a32      	subs	r2, r6, r0
 801b132:	9000      	str	r0, [sp, #0]
 801b134:	e7ce      	b.n	801b0d4 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801b136:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801b13a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b13e:	1a12      	subs	r2, r2, r0
 801b140:	9500      	str	r5, [sp, #0]
 801b142:	b212      	sxth	r2, r2
 801b144:	e7ab      	b.n	801b09e <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801b146 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801b146:	4770      	bx	lr

0801b148 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801b148:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b14c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 801b150:	4604      	mov	r4, r0
 801b152:	460e      	mov	r6, r1
 801b154:	4698      	mov	r8, r3
 801b156:	9700      	str	r7, [sp, #0]
 801b158:	3058      	adds	r0, #88	; 0x58
 801b15a:	4615      	mov	r5, r2
 801b15c:	f7f5 fe04 	bl	8010d68 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b160:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801b164:	eb06 0308 	add.w	r3, r6, r8
 801b168:	429a      	cmp	r2, r3
 801b16a:	eb05 0207 	add.w	r2, r5, r7
 801b16e:	bfb8      	it	lt
 801b170:	8123      	strhlt	r3, [r4, #8]
 801b172:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b176:	4293      	cmp	r3, r2
 801b178:	bfb8      	it	lt
 801b17a:	8162      	strhlt	r2, [r4, #10]
 801b17c:	b002      	add	sp, #8
 801b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b182 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801b182:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801b186:	4770      	bx	lr

0801b188 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801b188:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801b18c:	4770      	bx	lr

0801b18e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801b18e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801b192:	4770      	bx	lr

0801b194 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801b194:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801b198:	4770      	bx	lr

0801b19a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801b19a:	b510      	push	{r4, lr}
 801b19c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801b1a0:	800c      	strh	r4, [r1, #0]
 801b1a2:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801b1a6:	8011      	strh	r1, [r2, #0]
 801b1a8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801b1ac:	801a      	strh	r2, [r3, #0]
 801b1ae:	9b02      	ldr	r3, [sp, #8]
 801b1b0:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801b1b4:	801a      	strh	r2, [r3, #0]
 801b1b6:	bd10      	pop	{r4, pc}

0801b1b8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801b1b8:	b510      	push	{r4, lr}
 801b1ba:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801b1be:	800c      	strh	r4, [r1, #0]
 801b1c0:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801b1c4:	8011      	strh	r1, [r2, #0]
 801b1c6:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801b1ca:	801a      	strh	r2, [r3, #0]
 801b1cc:	bd10      	pop	{r4, pc}

0801b1ce <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801b1ce:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801b1d2:	800b      	strh	r3, [r1, #0]
 801b1d4:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801b1d8:	8013      	strh	r3, [r2, #0]
 801b1da:	4770      	bx	lr

0801b1dc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801b1dc:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801b1e0:	4299      	cmp	r1, r3
 801b1e2:	bfb8      	it	lt
 801b1e4:	4619      	movlt	r1, r3
 801b1e6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801b1ea:	4299      	cmp	r1, r3
 801b1ec:	bfa8      	it	ge
 801b1ee:	4619      	movge	r1, r3
 801b1f0:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801b1f4:	4770      	bx	lr

0801b1f6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801b1f6:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801b1fa:	4770      	bx	lr

0801b1fc <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	4604      	mov	r4, r0
 801b200:	2190      	movs	r1, #144	; 0x90
 801b202:	f00f fcc4 	bl	802ab8e <_ZdlPvj>
 801b206:	4620      	mov	r0, r4
 801b208:	bd10      	pop	{r4, pc}

0801b20a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801b20a:	b510      	push	{r4, lr}
 801b20c:	4604      	mov	r4, r0
 801b20e:	302c      	adds	r0, #44	; 0x2c
 801b210:	f002 fc0c 	bl	801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b214:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b216:	8123      	strh	r3, [r4, #8]
 801b218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b21a:	8163      	strh	r3, [r4, #10]
 801b21c:	bd10      	pop	{r4, pc}
	...

0801b220 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 801b220:	4291      	cmp	r1, r2
 801b222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b226:	4604      	mov	r4, r0
 801b228:	460e      	mov	r6, r1
 801b22a:	4615      	mov	r5, r2
 801b22c:	4698      	mov	r8, r3
 801b22e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801b232:	db05      	blt.n	801b240 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801b234:	4b12      	ldr	r3, [pc, #72]	; (801b280 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801b236:	214d      	movs	r1, #77	; 0x4d
 801b238:	4a12      	ldr	r2, [pc, #72]	; (801b284 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801b23a:	4813      	ldr	r0, [pc, #76]	; (801b288 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801b23c:	f00f fcd2 	bl	802abe4 <__assert_func>
 801b240:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801b244:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801b248:	6803      	ldr	r3, [r0, #0]
 801b24a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801b24e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b252:	4798      	blx	r3
 801b254:	f1b8 0f00 	cmp.w	r8, #0
 801b258:	d10c      	bne.n	801b274 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801b25a:	1bad      	subs	r5, r5, r6
 801b25c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 801b260:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801b264:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 801b268:	42bb      	cmp	r3, r7
 801b26a:	d806      	bhi.n	801b27a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801b26c:	4b07      	ldr	r3, [pc, #28]	; (801b28c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801b26e:	215a      	movs	r1, #90	; 0x5a
 801b270:	4a04      	ldr	r2, [pc, #16]	; (801b284 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801b272:	e7e2      	b.n	801b23a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801b274:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 801b278:	e7f2      	b.n	801b260 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801b27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b27e:	bf00      	nop
 801b280:	0802dc3f 	.word	0x0802dc3f
 801b284:	0802dd7c 	.word	0x0802dd7c
 801b288:	0802dc49 	.word	0x0802dc49
 801b28c:	0802dca0 	.word	0x0802dca0

0801b290 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801b290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b292:	4604      	mov	r4, r0
 801b294:	460d      	mov	r5, r1
 801b296:	b1b9      	cbz	r1, 801b2c8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 801b298:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801b29c:	ab01      	add	r3, sp, #4
 801b29e:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801b2a2:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801b2a6:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801b2aa:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801b2ae:	1a12      	subs	r2, r2, r0
 801b2b0:	1b89      	subs	r1, r1, r6
 801b2b2:	1a38      	subs	r0, r7, r0
 801b2b4:	f004 f9d7 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801b2b8:	4629      	mov	r1, r5
 801b2ba:	ab01      	add	r3, sp, #4
 801b2bc:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 801b2c0:	4430      	add	r0, r6
 801b2c2:	f004 f9d0 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801b2c6:	b285      	uxth	r5, r0
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	b003      	add	sp, #12
 801b2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b2d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801b2d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b2d4:	4604      	mov	r4, r0
 801b2d6:	2600      	movs	r6, #0
 801b2d8:	f7f7 fa88 	bl	80127ec <_ZN8touchgfx8DrawableC1Ev>
 801b2dc:	4b1b      	ldr	r3, [pc, #108]	; (801b34c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801b2de:	4625      	mov	r5, r4
 801b2e0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b2e4:	af02      	add	r7, sp, #8
 801b2e6:	62a6      	str	r6, [r4, #40]	; 0x28
 801b2e8:	f845 3b2c 	str.w	r3, [r5], #44
 801b2ec:	4628      	mov	r0, r5
 801b2ee:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801b2f2:	f7f7 fa7b 	bl	80127ec <_ZN8touchgfx8DrawableC1Ev>
 801b2f6:	4b16      	ldr	r3, [pc, #88]	; (801b350 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801b2f8:	4639      	mov	r1, r7
 801b2fa:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801b2fe:	4628      	mov	r0, r5
 801b300:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b302:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801b306:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801b30a:	f002 fb8f 	bl	801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b30e:	4638      	mov	r0, r7
 801b310:	f7f7 fa6c 	bl	80127ec <_ZN8touchgfx8DrawableC1Ev>
 801b314:	4b0f      	ldr	r3, [pc, #60]	; (801b354 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801b316:	4632      	mov	r2, r6
 801b318:	4631      	mov	r1, r6
 801b31a:	65a3      	str	r3, [r4, #88]	; 0x58
 801b31c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801b320:	4628      	mov	r0, r5
 801b322:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801b326:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801b32a:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 801b32e:	f7f7 fac9 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
 801b332:	4629      	mov	r1, r5
 801b334:	4620      	mov	r0, r4
 801b336:	f000 f8a7 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b33a:	4620      	mov	r0, r4
 801b33c:	4639      	mov	r1, r7
 801b33e:	f000 f8a3 	bl	801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b342:	4620      	mov	r0, r4
 801b344:	b002      	add	sp, #8
 801b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b34a:	bf00      	nop
 801b34c:	0802dcc4 	.word	0x0802dcc4
 801b350:	0802ef38 	.word	0x0802ef38
 801b354:	0802deb0 	.word	0x0802deb0

0801b358 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801b358:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b35a:	2000      	movs	r0, #0
 801b35c:	b12b      	cbz	r3, 801b36a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801b35e:	b920      	cbnz	r0, 801b36a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801b360:	1a5a      	subs	r2, r3, r1
 801b362:	699b      	ldr	r3, [r3, #24]
 801b364:	4250      	negs	r0, r2
 801b366:	4150      	adcs	r0, r2
 801b368:	e7f8      	b.n	801b35c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801b36a:	4770      	bx	lr

0801b36c <_ZN8touchgfx9Container9removeAllEv>:
 801b36c:	2200      	movs	r2, #0
 801b36e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b370:	b123      	cbz	r3, 801b37c <_ZN8touchgfx9Container9removeAllEv+0x10>
 801b372:	6999      	ldr	r1, [r3, #24]
 801b374:	6281      	str	r1, [r0, #40]	; 0x28
 801b376:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801b37a:	e7f8      	b.n	801b36e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801b37c:	4770      	bx	lr

0801b37e <_ZN8touchgfx9Container6unlinkEv>:
 801b37e:	2300      	movs	r3, #0
 801b380:	6283      	str	r3, [r0, #40]	; 0x28
 801b382:	4770      	bx	lr

0801b384 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b388:	461f      	mov	r7, r3
 801b38a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801b38e:	460d      	mov	r5, r1
 801b390:	4616      	mov	r6, r2
 801b392:	b103      	cbz	r3, 801b396 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801b394:	6038      	str	r0, [r7, #0]
 801b396:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b398:	b314      	cbz	r4, 801b3e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801b39a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b39e:	b1eb      	cbz	r3, 801b3dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b3a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b3a4:	428d      	cmp	r5, r1
 801b3a6:	db19      	blt.n	801b3dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b3a8:	b289      	uxth	r1, r1
 801b3aa:	8923      	ldrh	r3, [r4, #8]
 801b3ac:	440b      	add	r3, r1
 801b3ae:	b21b      	sxth	r3, r3
 801b3b0:	429d      	cmp	r5, r3
 801b3b2:	da13      	bge.n	801b3dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b3b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b3b8:	4296      	cmp	r6, r2
 801b3ba:	db0f      	blt.n	801b3dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b3bc:	b292      	uxth	r2, r2
 801b3be:	8963      	ldrh	r3, [r4, #10]
 801b3c0:	4413      	add	r3, r2
 801b3c2:	b21b      	sxth	r3, r3
 801b3c4:	429e      	cmp	r6, r3
 801b3c6:	da09      	bge.n	801b3dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b3c8:	6823      	ldr	r3, [r4, #0]
 801b3ca:	1ab2      	subs	r2, r6, r2
 801b3cc:	1a69      	subs	r1, r5, r1
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b3d4:	b212      	sxth	r2, r2
 801b3d6:	463b      	mov	r3, r7
 801b3d8:	b209      	sxth	r1, r1
 801b3da:	47c0      	blx	r8
 801b3dc:	69a4      	ldr	r4, [r4, #24]
 801b3de:	e7db      	b.n	801b398 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801b3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b3e4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801b3e4:	2200      	movs	r2, #0
 801b3e6:	8002      	strh	r2, [r0, #0]
 801b3e8:	8042      	strh	r2, [r0, #2]
 801b3ea:	8082      	strh	r2, [r0, #4]
 801b3ec:	80c2      	strh	r2, [r0, #6]
 801b3ee:	4770      	bx	lr

0801b3f0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	460d      	mov	r5, r1
 801b3f4:	4616      	mov	r6, r2
 801b3f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b3f8:	b13c      	cbz	r4, 801b40a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	4632      	mov	r2, r6
 801b400:	4629      	mov	r1, r5
 801b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b404:	4798      	blx	r3
 801b406:	69a4      	ldr	r4, [r4, #24]
 801b408:	e7f6      	b.n	801b3f8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801b40a:	bd70      	pop	{r4, r5, r6, pc}

0801b40c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801b40c:	b538      	push	{r3, r4, r5, lr}
 801b40e:	460d      	mov	r5, r1
 801b410:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b412:	b134      	cbz	r4, 801b422 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801b414:	682b      	ldr	r3, [r5, #0]
 801b416:	4621      	mov	r1, r4
 801b418:	4628      	mov	r0, r5
 801b41a:	689b      	ldr	r3, [r3, #8]
 801b41c:	4798      	blx	r3
 801b41e:	69a4      	ldr	r4, [r4, #24]
 801b420:	e7f7      	b.n	801b412 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801b422:	bd38      	pop	{r3, r4, r5, pc}

0801b424 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801b424:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b426:	b19b      	cbz	r3, 801b450 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801b428:	428b      	cmp	r3, r1
 801b42a:	d109      	bne.n	801b440 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801b42c:	699a      	ldr	r2, [r3, #24]
 801b42e:	2100      	movs	r1, #0
 801b430:	6159      	str	r1, [r3, #20]
 801b432:	6282      	str	r2, [r0, #40]	; 0x28
 801b434:	b902      	cbnz	r2, 801b438 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801b436:	4770      	bx	lr
 801b438:	6199      	str	r1, [r3, #24]
 801b43a:	4770      	bx	lr
 801b43c:	4613      	mov	r3, r2
 801b43e:	b13a      	cbz	r2, 801b450 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801b440:	699a      	ldr	r2, [r3, #24]
 801b442:	428a      	cmp	r2, r1
 801b444:	d1fa      	bne.n	801b43c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801b446:	698a      	ldr	r2, [r1, #24]
 801b448:	619a      	str	r2, [r3, #24]
 801b44a:	2300      	movs	r3, #0
 801b44c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801b450:	4770      	bx	lr

0801b452 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801b452:	b410      	push	{r4}
 801b454:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b456:	4604      	mov	r4, r0
 801b458:	b92b      	cbnz	r3, 801b466 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801b45a:	6803      	ldr	r3, [r0, #0]
 801b45c:	4611      	mov	r1, r2
 801b45e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b464:	4718      	bx	r3
 801b466:	b941      	cbnz	r1, 801b47a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801b468:	6193      	str	r3, [r2, #24]
 801b46a:	6282      	str	r2, [r0, #40]	; 0x28
 801b46c:	6154      	str	r4, [r2, #20]
 801b46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b472:	4770      	bx	lr
 801b474:	4603      	mov	r3, r0
 801b476:	2800      	cmp	r0, #0
 801b478:	d0f9      	beq.n	801b46e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801b47a:	4299      	cmp	r1, r3
 801b47c:	6998      	ldr	r0, [r3, #24]
 801b47e:	d1f9      	bne.n	801b474 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801b480:	6190      	str	r0, [r2, #24]
 801b482:	618a      	str	r2, [r1, #24]
 801b484:	e7f2      	b.n	801b46c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801b488 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801b488:	4288      	cmp	r0, r1
 801b48a:	b508      	push	{r3, lr}
 801b48c:	d105      	bne.n	801b49a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801b48e:	4b11      	ldr	r3, [pc, #68]	; (801b4d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801b490:	2123      	movs	r1, #35	; 0x23
 801b492:	4a11      	ldr	r2, [pc, #68]	; (801b4d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b494:	4811      	ldr	r0, [pc, #68]	; (801b4dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801b496:	f00f fba5 	bl	802abe4 <__assert_func>
 801b49a:	694b      	ldr	r3, [r1, #20]
 801b49c:	b11b      	cbz	r3, 801b4a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801b49e:	4b10      	ldr	r3, [pc, #64]	; (801b4e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801b4a0:	2124      	movs	r1, #36	; 0x24
 801b4a2:	4a0d      	ldr	r2, [pc, #52]	; (801b4d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b4a4:	e7f6      	b.n	801b494 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b4a6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801b4aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b4ac:	b913      	cbnz	r3, 801b4b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801b4ae:	6281      	str	r1, [r0, #40]	; 0x28
 801b4b0:	bd08      	pop	{r3, pc}
 801b4b2:	4613      	mov	r3, r2
 801b4b4:	699a      	ldr	r2, [r3, #24]
 801b4b6:	b12a      	cbz	r2, 801b4c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801b4b8:	428b      	cmp	r3, r1
 801b4ba:	d1fa      	bne.n	801b4b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801b4bc:	4b09      	ldr	r3, [pc, #36]	; (801b4e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b4be:	2135      	movs	r1, #53	; 0x35
 801b4c0:	4a05      	ldr	r2, [pc, #20]	; (801b4d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b4c2:	e7e7      	b.n	801b494 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b4c4:	428b      	cmp	r3, r1
 801b4c6:	d103      	bne.n	801b4d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801b4c8:	4b06      	ldr	r3, [pc, #24]	; (801b4e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b4ca:	2138      	movs	r1, #56	; 0x38
 801b4cc:	4a02      	ldr	r2, [pc, #8]	; (801b4d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b4ce:	e7e1      	b.n	801b494 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b4d0:	6199      	str	r1, [r3, #24]
 801b4d2:	e7ed      	b.n	801b4b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801b4d4:	0802dddd 	.word	0x0802dddd
 801b4d8:	0802df34 	.word	0x0802df34
 801b4dc:	0802de09 	.word	0x0802de09
 801b4e0:	0802de3c 	.word	0x0802de3c
 801b4e4:	0802de72 	.word	0x0802de72

0801b4e8 <_ZN8touchgfx4RectaNERKS0_>:
 801b4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4ec:	888b      	ldrh	r3, [r1, #4]
 801b4ee:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b4f2:	f9b0 a000 	ldrsh.w	sl, [r0]
 801b4f6:	444b      	add	r3, r9
 801b4f8:	b29b      	uxth	r3, r3
 801b4fa:	fa0f f883 	sxth.w	r8, r3
 801b4fe:	45c2      	cmp	sl, r8
 801b500:	da30      	bge.n	801b564 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b502:	8882      	ldrh	r2, [r0, #4]
 801b504:	4452      	add	r2, sl
 801b506:	b292      	uxth	r2, r2
 801b508:	fa0f fe82 	sxth.w	lr, r2
 801b50c:	45f1      	cmp	r9, lr
 801b50e:	da29      	bge.n	801b564 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b510:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b514:	88cc      	ldrh	r4, [r1, #6]
 801b516:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801b51a:	442c      	add	r4, r5
 801b51c:	b224      	sxth	r4, r4
 801b51e:	42a6      	cmp	r6, r4
 801b520:	da20      	bge.n	801b564 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b522:	88c7      	ldrh	r7, [r0, #6]
 801b524:	4437      	add	r7, r6
 801b526:	b2bf      	uxth	r7, r7
 801b528:	fa0f fc87 	sxth.w	ip, r7
 801b52c:	4565      	cmp	r5, ip
 801b52e:	da19      	bge.n	801b564 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b530:	45ca      	cmp	sl, r9
 801b532:	4654      	mov	r4, sl
 801b534:	bfb8      	it	lt
 801b536:	464c      	movlt	r4, r9
 801b538:	42b5      	cmp	r5, r6
 801b53a:	bfb8      	it	lt
 801b53c:	4635      	movlt	r5, r6
 801b53e:	45f0      	cmp	r8, lr
 801b540:	bfc8      	it	gt
 801b542:	4613      	movgt	r3, r2
 801b544:	1b1b      	subs	r3, r3, r4
 801b546:	8083      	strh	r3, [r0, #4]
 801b548:	88ca      	ldrh	r2, [r1, #6]
 801b54a:	884b      	ldrh	r3, [r1, #2]
 801b54c:	8004      	strh	r4, [r0, #0]
 801b54e:	4413      	add	r3, r2
 801b550:	8045      	strh	r5, [r0, #2]
 801b552:	b29b      	uxth	r3, r3
 801b554:	b21a      	sxth	r2, r3
 801b556:	4594      	cmp	ip, r2
 801b558:	bfb8      	it	lt
 801b55a:	463b      	movlt	r3, r7
 801b55c:	1b5b      	subs	r3, r3, r5
 801b55e:	80c3      	strh	r3, [r0, #6]
 801b560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b564:	2300      	movs	r3, #0
 801b566:	8003      	strh	r3, [r0, #0]
 801b568:	8043      	strh	r3, [r0, #2]
 801b56a:	8083      	strh	r3, [r0, #4]
 801b56c:	80c3      	strh	r3, [r0, #6]
 801b56e:	e7f7      	b.n	801b560 <_ZN8touchgfx4RectaNERKS0_+0x78>

0801b570 <_ZNK8touchgfx4Rect7isEmptyEv>:
 801b570:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b574:	b12b      	cbz	r3, 801b582 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801b576:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801b57a:	fab0 f080 	clz	r0, r0
 801b57e:	0940      	lsrs	r0, r0, #5
 801b580:	4770      	bx	lr
 801b582:	2001      	movs	r0, #1
 801b584:	4770      	bx	lr

0801b586 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801b586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b58a:	2300      	movs	r3, #0
 801b58c:	4604      	mov	r4, r0
 801b58e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b590:	8003      	strh	r3, [r0, #0]
 801b592:	8043      	strh	r3, [r0, #2]
 801b594:	8083      	strh	r3, [r0, #4]
 801b596:	80c3      	strh	r3, [r0, #6]
 801b598:	2d00      	cmp	r5, #0
 801b59a:	d040      	beq.n	801b61e <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801b59c:	1d28      	adds	r0, r5, #4
 801b59e:	f7ff ffe7 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5a2:	b988      	cbnz	r0, 801b5c8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	f7ff ffe3 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5aa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b5ae:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b5b2:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801b5b6:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801b5ba:	b138      	cbz	r0, 801b5cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801b5bc:	8022      	strh	r2, [r4, #0]
 801b5be:	8063      	strh	r3, [r4, #2]
 801b5c0:	f8a4 e004 	strh.w	lr, [r4, #4]
 801b5c4:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b5c8:	69ad      	ldr	r5, [r5, #24]
 801b5ca:	e7e5      	b.n	801b598 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801b5cc:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b5d0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b5d4:	4290      	cmp	r0, r2
 801b5d6:	4607      	mov	r7, r0
 801b5d8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801b5dc:	460e      	mov	r6, r1
 801b5de:	bfa8      	it	ge
 801b5e0:	4617      	movge	r7, r2
 801b5e2:	4299      	cmp	r1, r3
 801b5e4:	4472      	add	r2, lr
 801b5e6:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801b5ea:	bfa8      	it	ge
 801b5ec:	461e      	movge	r6, r3
 801b5ee:	4440      	add	r0, r8
 801b5f0:	4471      	add	r1, lr
 801b5f2:	4463      	add	r3, ip
 801b5f4:	b200      	sxth	r0, r0
 801b5f6:	8027      	strh	r7, [r4, #0]
 801b5f8:	b212      	sxth	r2, r2
 801b5fa:	8066      	strh	r6, [r4, #2]
 801b5fc:	b209      	sxth	r1, r1
 801b5fe:	b21b      	sxth	r3, r3
 801b600:	4290      	cmp	r0, r2
 801b602:	bfac      	ite	ge
 801b604:	ebc7 0200 	rsbge	r2, r7, r0
 801b608:	ebc7 0202 	rsblt	r2, r7, r2
 801b60c:	4299      	cmp	r1, r3
 801b60e:	bfac      	ite	ge
 801b610:	ebc6 0301 	rsbge	r3, r6, r1
 801b614:	ebc6 0303 	rsblt	r3, r6, r3
 801b618:	80a2      	strh	r2, [r4, #4]
 801b61a:	80e3      	strh	r3, [r4, #6]
 801b61c:	e7d4      	b.n	801b5c8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b61e:	4620      	mov	r0, r4
 801b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b624 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801b624:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b628:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b62c:	b383      	cbz	r3, 801b690 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b62e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b630:	b374      	cbz	r4, 801b690 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b632:	f9b1 5000 	ldrsh.w	r5, [r1]
 801b636:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801b63a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801b63e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801b642:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b646:	b303      	cbz	r3, 801b68a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b648:	4668      	mov	r0, sp
 801b64a:	1d21      	adds	r1, r4, #4
 801b64c:	f8ad 5000 	strh.w	r5, [sp]
 801b650:	f8ad 6002 	strh.w	r6, [sp, #2]
 801b654:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b658:	f8ad 8006 	strh.w	r8, [sp, #6]
 801b65c:	f7ff ff44 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801b660:	4668      	mov	r0, sp
 801b662:	f7ff ff85 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b666:	b980      	cbnz	r0, 801b68a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b668:	f8bd 3000 	ldrh.w	r3, [sp]
 801b66c:	4669      	mov	r1, sp
 801b66e:	88a2      	ldrh	r2, [r4, #4]
 801b670:	4620      	mov	r0, r4
 801b672:	1a9b      	subs	r3, r3, r2
 801b674:	88e2      	ldrh	r2, [r4, #6]
 801b676:	f8ad 3000 	strh.w	r3, [sp]
 801b67a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b67e:	1a9b      	subs	r3, r3, r2
 801b680:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b684:	6823      	ldr	r3, [r4, #0]
 801b686:	689b      	ldr	r3, [r3, #8]
 801b688:	4798      	blx	r3
 801b68a:	69a4      	ldr	r4, [r4, #24]
 801b68c:	2c00      	cmp	r4, #0
 801b68e:	d1d8      	bne.n	801b642 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801b690:	b002      	add	sp, #8
 801b692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b696 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801b696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b698:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b69c:	460d      	mov	r5, r1
 801b69e:	4616      	mov	r6, r2
 801b6a0:	b323      	cbz	r3, 801b6ec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b6a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b6a4:	b314      	cbz	r4, 801b6ec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b6a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b6aa:	b1eb      	cbz	r3, 801b6e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b6ac:	6828      	ldr	r0, [r5, #0]
 801b6ae:	466b      	mov	r3, sp
 801b6b0:	6869      	ldr	r1, [r5, #4]
 801b6b2:	c303      	stmia	r3!, {r0, r1}
 801b6b4:	4668      	mov	r0, sp
 801b6b6:	1d21      	adds	r1, r4, #4
 801b6b8:	f7ff ff16 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801b6bc:	4668      	mov	r0, sp
 801b6be:	f7ff ff57 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6c2:	b988      	cbnz	r0, 801b6e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b6c4:	f8bd 3000 	ldrh.w	r3, [sp]
 801b6c8:	4669      	mov	r1, sp
 801b6ca:	88a2      	ldrh	r2, [r4, #4]
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	1a9b      	subs	r3, r3, r2
 801b6d0:	88e2      	ldrh	r2, [r4, #6]
 801b6d2:	f8ad 3000 	strh.w	r3, [sp]
 801b6d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b6da:	1a9b      	subs	r3, r3, r2
 801b6dc:	4632      	mov	r2, r6
 801b6de:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b6e2:	6823      	ldr	r3, [r4, #0]
 801b6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6e6:	4798      	blx	r3
 801b6e8:	69a4      	ldr	r4, [r4, #24]
 801b6ea:	e7db      	b.n	801b6a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801b6ec:	b002      	add	sp, #8
 801b6ee:	bd70      	pop	{r4, r5, r6, pc}

0801b6f0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801b6f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b6f4:	4770      	bx	lr

0801b6f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801b6f6:	6803      	ldr	r3, [r0, #0]
 801b6f8:	b513      	push	{r0, r1, r4, lr}
 801b6fa:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801b6fe:	2300      	movs	r3, #0
 801b700:	e9cd 3300 	strd	r3, r3, [sp]
 801b704:	466b      	mov	r3, sp
 801b706:	47a0      	blx	r4
 801b708:	b002      	add	sp, #8
 801b70a:	bd10      	pop	{r4, pc}

0801b70c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801b70c:	2301      	movs	r3, #1
 801b70e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801b712:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801b716:	4770      	bx	lr

0801b718 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801b718:	2301      	movs	r3, #1
 801b71a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801b71e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801b722:	4770      	bx	lr

0801b724 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801b724:	6843      	ldr	r3, [r0, #4]
 801b726:	2201      	movs	r2, #1
 801b728:	725a      	strb	r2, [r3, #9]
 801b72a:	6840      	ldr	r0, [r0, #4]
 801b72c:	6803      	ldr	r3, [r0, #0]
 801b72e:	691b      	ldr	r3, [r3, #16]
 801b730:	4718      	bx	r3

0801b732 <_ZN8touchgfx3HAL8flushDMAEv>:
 801b732:	6840      	ldr	r0, [r0, #4]
 801b734:	6803      	ldr	r3, [r0, #0]
 801b736:	689b      	ldr	r3, [r3, #8]
 801b738:	4718      	bx	r3
	...

0801b73c <_ZN8touchgfx3HAL10beginFrameEv>:
 801b73c:	4b04      	ldr	r3, [pc, #16]	; (801b750 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801b73e:	781b      	ldrb	r3, [r3, #0]
 801b740:	b123      	cbz	r3, 801b74c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801b742:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801b746:	f080 0001 	eor.w	r0, r0, #1
 801b74a:	4770      	bx	lr
 801b74c:	2001      	movs	r0, #1
 801b74e:	4770      	bx	lr
 801b750:	2000bfec 	.word	0x2000bfec

0801b754 <_ZN8touchgfx3HAL8endFrameEv>:
 801b754:	b510      	push	{r4, lr}
 801b756:	4604      	mov	r4, r0
 801b758:	6840      	ldr	r0, [r0, #4]
 801b75a:	6803      	ldr	r3, [r0, #0]
 801b75c:	689b      	ldr	r3, [r3, #8]
 801b75e:	4798      	blx	r3
 801b760:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801b764:	b113      	cbz	r3, 801b76c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801b766:	2301      	movs	r3, #1
 801b768:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801b76c:	bd10      	pop	{r4, pc}

0801b76e <_ZN8touchgfx3HAL9taskEntryEv>:
 801b76e:	b508      	push	{r3, lr}
 801b770:	6803      	ldr	r3, [r0, #0]
 801b772:	4604      	mov	r4, r0
 801b774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b776:	4798      	blx	r3
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b77c:	4620      	mov	r0, r4
 801b77e:	4798      	blx	r3
 801b780:	f7fd fc34 	bl	8018fec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801b784:	6823      	ldr	r3, [r4, #0]
 801b786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b788:	e7f8      	b.n	801b77c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801b78c <_ZN8touchgfx3HAL4tickEv>:
 801b78c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b78e:	6803      	ldr	r3, [r0, #0]
 801b790:	4604      	mov	r4, r0
 801b792:	4d5c      	ldr	r5, [pc, #368]	; (801b904 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801b794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b798:	4798      	blx	r3
 801b79a:	2800      	cmp	r0, #0
 801b79c:	f000 8097 	beq.w	801b8ce <_ZN8touchgfx3HAL4tickEv+0x142>
 801b7a0:	2001      	movs	r0, #1
 801b7a2:	2600      	movs	r6, #0
 801b7a4:	f7fd f906 	bl	80189b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b7a8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801b7ac:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801b7b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801b7b4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801b7b8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801b7bc:	b133      	cbz	r3, 801b7cc <_ZN8touchgfx3HAL4tickEv+0x40>
 801b7be:	6823      	ldr	r3, [r4, #0]
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b7c6:	4798      	blx	r3
 801b7c8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801b7cc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801b7d0:	2601      	movs	r6, #1
 801b7d2:	6862      	ldr	r2, [r4, #4]
 801b7d4:	f083 0301 	eor.w	r3, r3, #1
 801b7d8:	702e      	strb	r6, [r5, #0]
 801b7da:	7253      	strb	r3, [r2, #9]
 801b7dc:	f003 f9d4 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801b7e0:	6803      	ldr	r3, [r0, #0]
 801b7e2:	4631      	mov	r1, r6
 801b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7e6:	4798      	blx	r3
 801b7e8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801b7ec:	b90b      	cbnz	r3, 801b7f2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801b7ee:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801b7f2:	f003 f9c9 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801b7f6:	6803      	ldr	r3, [r0, #0]
 801b7f8:	695b      	ldr	r3, [r3, #20]
 801b7fa:	4798      	blx	r3
 801b7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7fe:	6803      	ldr	r3, [r0, #0]
 801b800:	691b      	ldr	r3, [r3, #16]
 801b802:	4798      	blx	r3
 801b804:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801b808:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801b80c:	3b01      	subs	r3, #1
 801b80e:	b2db      	uxtb	r3, r3
 801b810:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801b814:	b10a      	cbz	r2, 801b81a <_ZN8touchgfx3HAL4tickEv+0x8e>
 801b816:	2b00      	cmp	r3, #0
 801b818:	d1eb      	bne.n	801b7f2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801b81a:	4a3b      	ldr	r2, [pc, #236]	; (801b908 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801b81c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801b820:	7813      	ldrb	r3, [r2, #0]
 801b822:	3301      	adds	r3, #1
 801b824:	b25b      	sxtb	r3, r3
 801b826:	4299      	cmp	r1, r3
 801b828:	7013      	strb	r3, [r2, #0]
 801b82a:	dc10      	bgt.n	801b84e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801b82c:	2300      	movs	r3, #0
 801b82e:	68e0      	ldr	r0, [r4, #12]
 801b830:	a902      	add	r1, sp, #8
 801b832:	7013      	strb	r3, [r2, #0]
 801b834:	aa03      	add	r2, sp, #12
 801b836:	6803      	ldr	r3, [r0, #0]
 801b838:	68db      	ldr	r3, [r3, #12]
 801b83a:	4798      	blx	r3
 801b83c:	6823      	ldr	r3, [r4, #0]
 801b83e:	2800      	cmp	r0, #0
 801b840:	d051      	beq.n	801b8e6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801b842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b846:	4620      	mov	r0, r4
 801b848:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b84c:	4798      	blx	r3
 801b84e:	2300      	movs	r3, #0
 801b850:	6960      	ldr	r0, [r4, #20]
 801b852:	f88d 3007 	strb.w	r3, [sp, #7]
 801b856:	b158      	cbz	r0, 801b870 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801b858:	6803      	ldr	r3, [r0, #0]
 801b85a:	f10d 0107 	add.w	r1, sp, #7
 801b85e:	68db      	ldr	r3, [r3, #12]
 801b860:	4798      	blx	r3
 801b862:	b128      	cbz	r0, 801b870 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801b864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b866:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801b86a:	6803      	ldr	r3, [r0, #0]
 801b86c:	68db      	ldr	r3, [r3, #12]
 801b86e:	4798      	blx	r3
 801b870:	f104 001c 	add.w	r0, r4, #28
 801b874:	f00d fcea 	bl	802924c <_ZN8touchgfx8Gestures4tickEv>
 801b878:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801b87c:	b30b      	cbz	r3, 801b8c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801b87e:	6920      	ldr	r0, [r4, #16]
 801b880:	6803      	ldr	r3, [r0, #0]
 801b882:	691b      	ldr	r3, [r3, #16]
 801b884:	4798      	blx	r3
 801b886:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b888:	4606      	mov	r6, r0
 801b88a:	b903      	cbnz	r3, 801b88e <_ZN8touchgfx3HAL4tickEv+0x102>
 801b88c:	6720      	str	r0, [r4, #112]	; 0x70
 801b88e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b890:	4a1e      	ldr	r2, [pc, #120]	; (801b90c <_ZN8touchgfx3HAL4tickEv+0x180>)
 801b892:	1af3      	subs	r3, r6, r3
 801b894:	4293      	cmp	r3, r2
 801b896:	d914      	bls.n	801b8c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801b898:	6920      	ldr	r0, [r4, #16]
 801b89a:	6803      	ldr	r3, [r0, #0]
 801b89c:	699b      	ldr	r3, [r3, #24]
 801b89e:	4798      	blx	r3
 801b8a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b8a2:	2264      	movs	r2, #100	; 0x64
 801b8a4:	1af3      	subs	r3, r6, r3
 801b8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8aa:	fbb0 f0f3 	udiv	r0, r0, r3
 801b8ae:	2800      	cmp	r0, #0
 801b8b0:	dc1e      	bgt.n	801b8f0 <_ZN8touchgfx3HAL4tickEv+0x164>
 801b8b2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801b8b6:	6920      	ldr	r0, [r4, #16]
 801b8b8:	2100      	movs	r1, #0
 801b8ba:	6803      	ldr	r3, [r0, #0]
 801b8bc:	69db      	ldr	r3, [r3, #28]
 801b8be:	4798      	blx	r3
 801b8c0:	6726      	str	r6, [r4, #112]	; 0x70
 801b8c2:	f003 f961 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801b8c6:	6803      	ldr	r3, [r0, #0]
 801b8c8:	2100      	movs	r1, #0
 801b8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8cc:	4798      	blx	r3
 801b8ce:	6823      	ldr	r3, [r4, #0]
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b8d6:	4798      	blx	r3
 801b8d8:	2001      	movs	r0, #1
 801b8da:	f7fd f876 	bl	80189ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b8de:	2300      	movs	r3, #0
 801b8e0:	702b      	strb	r3, [r5, #0]
 801b8e2:	b004      	add	sp, #16
 801b8e4:	bd70      	pop	{r4, r5, r6, pc}
 801b8e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b8ea:	4620      	mov	r0, r4
 801b8ec:	4798      	blx	r3
 801b8ee:	e7ae      	b.n	801b84e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801b8f0:	2863      	cmp	r0, #99	; 0x63
 801b8f2:	bfcb      	itete	gt
 801b8f4:	2300      	movgt	r3, #0
 801b8f6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801b8fa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801b8fe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801b902:	e7d8      	b.n	801b8b6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 801b904:	2000bff4 	.word	0x2000bff4
 801b908:	2000bff5 	.word	0x2000bff5
 801b90c:	05f5e100 	.word	0x05f5e100

0801b910 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801b910:	f7fd bb0c 	b.w	8018f2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b914 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801b914:	6581      	str	r1, [r0, #88]	; 0x58
 801b916:	301c      	adds	r0, #28
 801b918:	f00d bc96 	b.w	8029248 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801b91c <_ZN8touchgfx3HAL5touchEll>:
 801b91c:	b530      	push	{r4, r5, lr}
 801b91e:	b087      	sub	sp, #28
 801b920:	4604      	mov	r4, r0
 801b922:	a804      	add	r0, sp, #16
 801b924:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801b928:	f002 ff32 	bl	801e790 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801b92c:	9b04      	ldr	r3, [sp, #16]
 801b92e:	a906      	add	r1, sp, #24
 801b930:	a803      	add	r0, sp, #12
 801b932:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b936:	9b05      	ldr	r3, [sp, #20]
 801b938:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801b93c:	f002 ff76 	bl	801e82c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801b940:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801b944:	f104 001c 	add.w	r0, r4, #28
 801b948:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b94c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b950:	b189      	cbz	r1, 801b976 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801b952:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801b956:	9300      	str	r3, [sp, #0]
 801b958:	4613      	mov	r3, r2
 801b95a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801b95e:	462a      	mov	r2, r5
 801b960:	f00d fc82 	bl	8029268 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801b964:	b128      	cbz	r0, 801b972 <_ZN8touchgfx3HAL5touchEll+0x56>
 801b966:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b96a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b96c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b970:	6623      	str	r3, [r4, #96]	; 0x60
 801b972:	b007      	add	sp, #28
 801b974:	bd30      	pop	{r4, r5, pc}
 801b976:	f00d fcbb 	bl	80292f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801b97a:	2301      	movs	r3, #1
 801b97c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801b980:	e7f1      	b.n	801b966 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801b982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801b982:	b570      	push	{r4, r5, r6, lr}
 801b984:	2b00      	cmp	r3, #0
 801b986:	d050      	beq.n	801ba2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801b988:	ea81 0002 	eor.w	r0, r1, r2
 801b98c:	07c6      	lsls	r6, r0, #31
 801b98e:	d508      	bpl.n	801b9a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801b990:	3a01      	subs	r2, #1
 801b992:	18cc      	adds	r4, r1, r3
 801b994:	42a1      	cmp	r1, r4
 801b996:	d048      	beq.n	801ba2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801b998:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801b99c:	f801 0b01 	strb.w	r0, [r1], #1
 801b9a0:	e7f8      	b.n	801b994 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801b9a2:	07d5      	lsls	r5, r2, #31
 801b9a4:	bf42      	ittt	mi
 801b9a6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801b9aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801b9ae:	f801 0b01 	strbmi.w	r0, [r1], #1
 801b9b2:	2b01      	cmp	r3, #1
 801b9b4:	d915      	bls.n	801b9e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b9b6:	ea82 0001 	eor.w	r0, r2, r1
 801b9ba:	0784      	lsls	r4, r0, #30
 801b9bc:	d02d      	beq.n	801ba1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801b9be:	1e94      	subs	r4, r2, #2
 801b9c0:	4608      	mov	r0, r1
 801b9c2:	18ce      	adds	r6, r1, r3
 801b9c4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801b9c8:	f820 5b02 	strh.w	r5, [r0], #2
 801b9cc:	1a35      	subs	r5, r6, r0
 801b9ce:	2d01      	cmp	r5, #1
 801b9d0:	d8f8      	bhi.n	801b9c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801b9d2:	1e98      	subs	r0, r3, #2
 801b9d4:	f003 0301 	and.w	r3, r3, #1
 801b9d8:	f020 0001 	bic.w	r0, r0, #1
 801b9dc:	3002      	adds	r0, #2
 801b9de:	4401      	add	r1, r0
 801b9e0:	4402      	add	r2, r0
 801b9e2:	1f14      	subs	r4, r2, #4
 801b9e4:	4608      	mov	r0, r1
 801b9e6:	18ce      	adds	r6, r1, r3
 801b9e8:	1a35      	subs	r5, r6, r0
 801b9ea:	2d03      	cmp	r5, #3
 801b9ec:	d810      	bhi.n	801ba10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801b9ee:	089c      	lsrs	r4, r3, #2
 801b9f0:	00a0      	lsls	r0, r4, #2
 801b9f2:	4401      	add	r1, r0
 801b9f4:	3801      	subs	r0, #1
 801b9f6:	4402      	add	r2, r0
 801b9f8:	f06f 0003 	mvn.w	r0, #3
 801b9fc:	fb00 3404 	mla	r4, r0, r4, r3
 801ba00:	440c      	add	r4, r1
 801ba02:	42a1      	cmp	r1, r4
 801ba04:	d011      	beq.n	801ba2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801ba06:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ba0a:	f801 3b01 	strb.w	r3, [r1], #1
 801ba0e:	e7f8      	b.n	801ba02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801ba10:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801ba14:	f840 5b04 	str.w	r5, [r0], #4
 801ba18:	e7e6      	b.n	801b9e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801ba1a:	0790      	lsls	r0, r2, #30
 801ba1c:	d0e1      	beq.n	801b9e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801ba1e:	f832 0b02 	ldrh.w	r0, [r2], #2
 801ba22:	3b02      	subs	r3, #2
 801ba24:	f821 0b02 	strh.w	r0, [r1], #2
 801ba28:	e7db      	b.n	801b9e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801ba2a:	2001      	movs	r0, #1
 801ba2c:	bd70      	pop	{r4, r5, r6, pc}

0801ba2e <_ZN8touchgfx3HAL7noTouchEv>:
 801ba2e:	b510      	push	{r4, lr}
 801ba30:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801ba34:	4604      	mov	r4, r0
 801ba36:	b153      	cbz	r3, 801ba4e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801ba38:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801ba3c:	2101      	movs	r1, #1
 801ba3e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801ba42:	301c      	adds	r0, #28
 801ba44:	f00d fc54 	bl	80292f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801ba48:	2300      	movs	r3, #0
 801ba4a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801ba4e:	bd10      	pop	{r4, pc}

0801ba50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801ba50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba54:	4605      	mov	r5, r0
 801ba56:	6980      	ldr	r0, [r0, #24]
 801ba58:	b085      	sub	sp, #20
 801ba5a:	460f      	mov	r7, r1
 801ba5c:	4690      	mov	r8, r2
 801ba5e:	4699      	mov	r9, r3
 801ba60:	b930      	cbnz	r0, 801ba70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801ba62:	4b1f      	ldr	r3, [pc, #124]	; (801bae0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801ba64:	f44f 7198 	mov.w	r1, #304	; 0x130
 801ba68:	4a1e      	ldr	r2, [pc, #120]	; (801bae4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801ba6a:	481f      	ldr	r0, [pc, #124]	; (801bae8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801ba6c:	f00f f8ba 	bl	802abe4 <__assert_func>
 801ba70:	ac04      	add	r4, sp, #16
 801ba72:	2600      	movs	r6, #0
 801ba74:	f844 6d04 	str.w	r6, [r4, #-4]!
 801ba78:	6806      	ldr	r6, [r0, #0]
 801ba7a:	9401      	str	r4, [sp, #4]
 801ba7c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801ba80:	9400      	str	r4, [sp, #0]
 801ba82:	6834      	ldr	r4, [r6, #0]
 801ba84:	47a0      	blx	r4
 801ba86:	4c19      	ldr	r4, [pc, #100]	; (801baec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801ba88:	4606      	mov	r6, r0
 801ba8a:	f8a4 9000 	strh.w	r9, [r4]
 801ba8e:	f7f5 f9bf 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801ba92:	6803      	ldr	r3, [r0, #0]
 801ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba96:	4798      	blx	r3
 801ba98:	280c      	cmp	r0, #12
 801ba9a:	d80f      	bhi.n	801babc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801ba9c:	e8df f000 	tbb	[pc, r0]
 801baa0:	1b1b1207 	.word	0x1b1b1207
 801baa4:	1b1b1b1b 	.word	0x1b1b1b1b
 801baa8:	1b1b1b1b 	.word	0x1b1b1b1b
 801baac:	1b          	.byte	0x1b
 801baad:	00          	.byte	0x00
 801baae:	8823      	ldrh	r3, [r4, #0]
 801bab0:	fb08 7203 	mla	r2, r8, r3, r7
 801bab4:	9b03      	ldr	r3, [sp, #12]
 801bab6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801baba:	63eb      	str	r3, [r5, #60]	; 0x3c
 801babc:	4630      	mov	r0, r6
 801babe:	b005      	add	sp, #20
 801bac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bac4:	8822      	ldrh	r2, [r4, #0]
 801bac6:	9b03      	ldr	r3, [sp, #12]
 801bac8:	fb08 7202 	mla	r2, r8, r2, r7
 801bacc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bad0:	1a9a      	subs	r2, r3, r2
 801bad2:	63ea      	str	r2, [r5, #60]	; 0x3c
 801bad4:	e7f2      	b.n	801babc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801bad6:	4b06      	ldr	r3, [pc, #24]	; (801baf0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801bad8:	f240 114d 	movw	r1, #333	; 0x14d
 801badc:	4a01      	ldr	r2, [pc, #4]	; (801bae4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801bade:	e7c4      	b.n	801ba6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801bae0:	0802dfdd 	.word	0x0802dfdd
 801bae4:	0802e2ee 	.word	0x0802e2ee
 801bae8:	0802e022 	.word	0x0802e022
 801baec:	2000bfe8 	.word	0x2000bfe8
 801baf0:	0802e048 	.word	0x0802e048

0801baf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801baf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baf8:	4698      	mov	r8, r3
 801bafa:	6803      	ldr	r3, [r0, #0]
 801bafc:	b087      	sub	sp, #28
 801bafe:	460e      	mov	r6, r1
 801bb00:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801bb02:	4617      	mov	r7, r2
 801bb04:	4b0d      	ldr	r3, [pc, #52]	; (801bb3c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801bb06:	4604      	mov	r4, r0
 801bb08:	f8b3 9000 	ldrh.w	r9, [r3]
 801bb0c:	f7f5 f980 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801bb10:	6803      	ldr	r3, [r0, #0]
 801bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb14:	4798      	blx	r3
 801bb16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801bb1a:	463a      	mov	r2, r7
 801bb1c:	4631      	mov	r1, r6
 801bb1e:	9302      	str	r3, [sp, #8]
 801bb20:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801bb24:	9301      	str	r3, [sp, #4]
 801bb26:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bb2a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801bb2e:	9300      	str	r3, [sp, #0]
 801bb30:	4620      	mov	r0, r4
 801bb32:	4643      	mov	r3, r8
 801bb34:	47a8      	blx	r5
 801bb36:	b007      	add	sp, #28
 801bb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb3c:	2000bfe8 	.word	0x2000bfe8

0801bb40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb44:	4606      	mov	r6, r0
 801bb46:	b089      	sub	sp, #36	; 0x24
 801bb48:	4610      	mov	r0, r2
 801bb4a:	460c      	mov	r4, r1
 801bb4c:	4691      	mov	r9, r2
 801bb4e:	4698      	mov	r8, r3
 801bb50:	f005 fa36 	bl	8020fc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	f000 8092 	beq.w	801bc7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801bb5a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801bc98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801bb5e:	ad08      	add	r5, sp, #32
 801bb60:	f8df b138 	ldr.w	fp, [pc, #312]	; 801bc9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801bb64:	f8da 0000 	ldr.w	r0, [sl]
 801bb68:	4f4a      	ldr	r7, [pc, #296]	; (801bc94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801bb6a:	6802      	ldr	r2, [r0, #0]
 801bb6c:	6a12      	ldr	r2, [r2, #32]
 801bb6e:	4790      	blx	r2
 801bb70:	f8da 0000 	ldr.w	r0, [sl]
 801bb74:	6802      	ldr	r2, [r0, #0]
 801bb76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bb78:	4790      	blx	r2
 801bb7a:	f8bb 3000 	ldrh.w	r3, [fp]
 801bb7e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801bb82:	4628      	mov	r0, r5
 801bb84:	9300      	str	r3, [sp, #0]
 801bb86:	883b      	ldrh	r3, [r7, #0]
 801bb88:	9301      	str	r3, [sp, #4]
 801bb8a:	f005 fad9 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb8e:	f8ab 0000 	strh.w	r0, [fp]
 801bb92:	4628      	mov	r0, r5
 801bb94:	f005 fb0e 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb98:	f8da b000 	ldr.w	fp, [sl]
 801bb9c:	8038      	strh	r0, [r7, #0]
 801bb9e:	4648      	mov	r0, r9
 801bba0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801bba4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801bba8:	9302      	str	r3, [sp, #8]
 801bbaa:	f005 fa09 	bl	8020fc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801bbae:	f8da 2000 	ldr.w	r2, [sl]
 801bbb2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801bbb6:	63d0      	str	r0, [r2, #60]	; 0x3c
 801bbb8:	4620      	mov	r0, r4
 801bbba:	6822      	ldr	r2, [r4, #0]
 801bbbc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801bbc0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801bbc2:	2200      	movs	r2, #0
 801bbc4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801bbc8:	4611      	mov	r1, r2
 801bbca:	4798      	blx	r3
 801bbcc:	2201      	movs	r2, #1
 801bbce:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801bbd2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801bbd6:	1d22      	adds	r2, r4, #4
 801bbd8:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801bbdc:	2900      	cmp	r1, #0
 801bbde:	d051      	beq.n	801bc84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801bbe0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801bbe4:	2900      	cmp	r1, #0
 801bbe6:	d04d      	beq.n	801bc84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801bbe8:	6810      	ldr	r0, [r2, #0]
 801bbea:	f10d 0c18 	add.w	ip, sp, #24
 801bbee:	6851      	ldr	r1, [r2, #4]
 801bbf0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bbf4:	4641      	mov	r1, r8
 801bbf6:	a806      	add	r0, sp, #24
 801bbf8:	f7ff fc76 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801bbfc:	4628      	mov	r0, r5
 801bbfe:	f005 fc2b 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bc02:	4680      	mov	r8, r0
 801bc04:	f7f5 f904 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801bc08:	6802      	ldr	r2, [r0, #0]
 801bc0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bc0c:	4790      	blx	r2
 801bc0e:	4580      	cmp	r8, r0
 801bc10:	d03d      	beq.n	801bc8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801bc12:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801bc14:	b150      	cbz	r0, 801bc2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801bc16:	4628      	mov	r0, r5
 801bc18:	f005 fc1e 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bc1c:	4605      	mov	r5, r0
 801bc1e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801bc20:	6803      	ldr	r3, [r0, #0]
 801bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc24:	4798      	blx	r3
 801bc26:	1a2b      	subs	r3, r5, r0
 801bc28:	4258      	negs	r0, r3
 801bc2a:	4158      	adcs	r0, r3
 801bc2c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801bc30:	2500      	movs	r5, #0
 801bc32:	6963      	ldr	r3, [r4, #20]
 801bc34:	4620      	mov	r0, r4
 801bc36:	6822      	ldr	r2, [r4, #0]
 801bc38:	a906      	add	r1, sp, #24
 801bc3a:	6165      	str	r5, [r4, #20]
 801bc3c:	9303      	str	r3, [sp, #12]
 801bc3e:	6892      	ldr	r2, [r2, #8]
 801bc40:	4790      	blx	r2
 801bc42:	9b03      	ldr	r3, [sp, #12]
 801bc44:	4620      	mov	r0, r4
 801bc46:	4652      	mov	r2, sl
 801bc48:	6163      	str	r3, [r4, #20]
 801bc4a:	4649      	mov	r1, r9
 801bc4c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801bc50:	6823      	ldr	r3, [r4, #0]
 801bc52:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801bc56:	4c10      	ldr	r4, [pc, #64]	; (801bc98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801bc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc5a:	4798      	blx	r3
 801bc5c:	6820      	ldr	r0, [r4, #0]
 801bc5e:	9b02      	ldr	r3, [sp, #8]
 801bc60:	9a00      	ldr	r2, [sp, #0]
 801bc62:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801bc66:	4b0d      	ldr	r3, [pc, #52]	; (801bc9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801bc68:	801a      	strh	r2, [r3, #0]
 801bc6a:	4b0a      	ldr	r3, [pc, #40]	; (801bc94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801bc6c:	9a01      	ldr	r2, [sp, #4]
 801bc6e:	801a      	strh	r2, [r3, #0]
 801bc70:	6803      	ldr	r3, [r0, #0]
 801bc72:	6a1b      	ldr	r3, [r3, #32]
 801bc74:	4798      	blx	r3
 801bc76:	6820      	ldr	r0, [r4, #0]
 801bc78:	6803      	ldr	r3, [r0, #0]
 801bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc7c:	4798      	blx	r3
 801bc7e:	b009      	add	sp, #36	; 0x24
 801bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc84:	ab06      	add	r3, sp, #24
 801bc86:	6810      	ldr	r0, [r2, #0]
 801bc88:	6851      	ldr	r1, [r2, #4]
 801bc8a:	c303      	stmia	r3!, {r0, r1}
 801bc8c:	e7b6      	b.n	801bbfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801bc8e:	2000      	movs	r0, #0
 801bc90:	e7cc      	b.n	801bc2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801bc92:	bf00      	nop
 801bc94:	2000bfea 	.word	0x2000bfea
 801bc98:	2000bff0 	.word	0x2000bff0
 801bc9c:	2000bfe8 	.word	0x2000bfe8

0801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801bca0:	4b07      	ldr	r3, [pc, #28]	; (801bcc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801bca2:	b510      	push	{r4, lr}
 801bca4:	781b      	ldrb	r3, [r3, #0]
 801bca6:	4604      	mov	r4, r0
 801bca8:	b13b      	cbz	r3, 801bcba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801bcaa:	6803      	ldr	r3, [r0, #0]
 801bcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcae:	4798      	blx	r3
 801bcb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bcb2:	4283      	cmp	r3, r0
 801bcb4:	d101      	bne.n	801bcba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801bcb6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801bcb8:	bd10      	pop	{r4, pc}
 801bcba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801bcbc:	e7fc      	b.n	801bcb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801bcbe:	bf00      	nop
 801bcc0:	2000bfec 	.word	0x2000bfec

0801bcc4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801bcc4:	4b0b      	ldr	r3, [pc, #44]	; (801bcf4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801bcc6:	b510      	push	{r4, lr}
 801bcc8:	781b      	ldrb	r3, [r3, #0]
 801bcca:	4604      	mov	r4, r0
 801bccc:	b95b      	cbnz	r3, 801bce6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801bcce:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801bcd2:	2b02      	cmp	r3, #2
 801bcd4:	d007      	beq.n	801bce6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801bcd6:	6840      	ldr	r0, [r0, #4]
 801bcd8:	f000 fbc8 	bl	801c46c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801bcdc:	b118      	cbz	r0, 801bce6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801bcde:	6862      	ldr	r2, [r4, #4]
 801bce0:	7a53      	ldrb	r3, [r2, #9]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d0fc      	beq.n	801bce0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801bce6:	f7fd f913 	bl	8018f10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801bcea:	4620      	mov	r0, r4
 801bcec:	f7ff ffd8 	bl	801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bcf0:	bd10      	pop	{r4, pc}
 801bcf2:	bf00      	nop
 801bcf4:	2000bfec 	.word	0x2000bfec

0801bcf8 <_ZN8touchgfx3HAL10initializeEv>:
 801bcf8:	b510      	push	{r4, lr}
 801bcfa:	4604      	mov	r4, r0
 801bcfc:	f7fd f8e4 	bl	8018ec8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801bd00:	6860      	ldr	r0, [r4, #4]
 801bd02:	6803      	ldr	r3, [r0, #0]
 801bd04:	68db      	ldr	r3, [r3, #12]
 801bd06:	4798      	blx	r3
 801bd08:	68e0      	ldr	r0, [r4, #12]
 801bd0a:	6803      	ldr	r3, [r0, #0]
 801bd0c:	689b      	ldr	r3, [r3, #8]
 801bd0e:	4798      	blx	r3
 801bd10:	6823      	ldr	r3, [r4, #0]
 801bd12:	4620      	mov	r0, r4
 801bd14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd1a:	4718      	bx	r3

0801bd1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801bd1c:	b508      	push	{r3, lr}
 801bd1e:	290c      	cmp	r1, #12
 801bd20:	d817      	bhi.n	801bd52 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801bd22:	e8df f001 	tbb	[pc, r1]
 801bd26:	090b      	.short	0x090b
 801bd28:	0d0d0d07 	.word	0x0d0d0d07
 801bd2c:	1414140d 	.word	0x1414140d
 801bd30:	1414      	.short	0x1414
 801bd32:	0d          	.byte	0x0d
 801bd33:	00          	.byte	0x00
 801bd34:	2020      	movs	r0, #32
 801bd36:	bd08      	pop	{r3, pc}
 801bd38:	2018      	movs	r0, #24
 801bd3a:	e7fc      	b.n	801bd36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801bd3c:	2010      	movs	r0, #16
 801bd3e:	e7fa      	b.n	801bd36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801bd40:	4b05      	ldr	r3, [pc, #20]	; (801bd58 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801bd42:	f44f 710c 	mov.w	r1, #560	; 0x230
 801bd46:	4a05      	ldr	r2, [pc, #20]	; (801bd5c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801bd48:	4805      	ldr	r0, [pc, #20]	; (801bd60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801bd4a:	f00e ff4b 	bl	802abe4 <__assert_func>
 801bd4e:	2008      	movs	r0, #8
 801bd50:	e7f1      	b.n	801bd36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801bd52:	2000      	movs	r0, #0
 801bd54:	e7ef      	b.n	801bd36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801bd56:	bf00      	nop
 801bd58:	0802e11b 	.word	0x0802e11b
 801bd5c:	0802e4b0 	.word	0x0802e4b0
 801bd60:	0802e022 	.word	0x0802e022

0801bd64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801bd64:	b570      	push	{r4, r5, r6, lr}
 801bd66:	460d      	mov	r5, r1
 801bd68:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801bd6c:	4616      	mov	r6, r2
 801bd6e:	461c      	mov	r4, r3
 801bd70:	f7ff ffd4 	bl	801bd1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801bd74:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801bd78:	10c0      	asrs	r0, r0, #3
 801bd7a:	fb06 5101 	mla	r1, r6, r1, r5
 801bd7e:	fb00 4001 	mla	r0, r0, r1, r4
 801bd82:	bd70      	pop	{r4, r5, r6, pc}

0801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801bd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd88:	b08a      	sub	sp, #40	; 0x28
 801bd8a:	f04f 0c00 	mov.w	ip, #0
 801bd8e:	4604      	mov	r4, r0
 801bd90:	469a      	mov	sl, r3
 801bd92:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801bd96:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801bd9a:	f1b8 0f02 	cmp.w	r8, #2
 801bd9e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801bda2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801bda6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801bdaa:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801bdae:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801bdb2:	f8cd c020 	str.w	ip, [sp, #32]
 801bdb6:	d030      	beq.n	801be1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801bdb8:	2bff      	cmp	r3, #255	; 0xff
 801bdba:	d12c      	bne.n	801be16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801bdbc:	4560      	cmp	r0, ip
 801bdbe:	bf14      	ite	ne
 801bdc0:	2004      	movne	r0, #4
 801bdc2:	2001      	moveq	r0, #1
 801bdc4:	9204      	str	r2, [sp, #16]
 801bdc6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801bdca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801bdce:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bdd2:	f8ad 6018 	strh.w	r6, [sp, #24]
 801bdd6:	f8ad 501a 	strh.w	r5, [sp, #26]
 801bdda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdde:	4620      	mov	r0, r4
 801bde0:	f7ff ff5e 	bl	801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bde4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801bde8:	4603      	mov	r3, r0
 801bdea:	4651      	mov	r1, sl
 801bdec:	4620      	mov	r0, r4
 801bdee:	e9cd 9700 	strd	r9, r7, [sp]
 801bdf2:	f7ff ffb7 	bl	801bd64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801bdf6:	f8ad 901e 	strh.w	r9, [sp, #30]
 801bdfa:	9005      	str	r0, [sp, #20]
 801bdfc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801be00:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801be04:	b106      	cbz	r6, 801be08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801be06:	b98d      	cbnz	r5, 801be2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801be08:	4b12      	ldr	r3, [pc, #72]	; (801be54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801be0a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801be0e:	4a12      	ldr	r2, [pc, #72]	; (801be58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801be10:	4812      	ldr	r0, [pc, #72]	; (801be5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801be12:	f00e fee7 	bl	802abe4 <__assert_func>
 801be16:	2004      	movs	r0, #4
 801be18:	e7d4      	b.n	801bdc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801be1a:	2bff      	cmp	r3, #255	; 0xff
 801be1c:	d104      	bne.n	801be28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801be1e:	2800      	cmp	r0, #0
 801be20:	bf14      	ite	ne
 801be22:	2040      	movne	r0, #64	; 0x40
 801be24:	2020      	moveq	r0, #32
 801be26:	e7cd      	b.n	801bdc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801be28:	2040      	movs	r0, #64	; 0x40
 801be2a:	e7cb      	b.n	801bdc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801be2c:	6823      	ldr	r3, [r4, #0]
 801be2e:	4620      	mov	r0, r4
 801be30:	9d02      	ldr	r5, [sp, #8]
 801be32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be34:	4798      	blx	r3
 801be36:	4228      	tst	r0, r5
 801be38:	d104      	bne.n	801be44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801be3a:	4b09      	ldr	r3, [pc, #36]	; (801be60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801be3c:	f240 11b1 	movw	r1, #433	; 0x1b1
 801be40:	4a05      	ldr	r2, [pc, #20]	; (801be58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801be42:	e7e5      	b.n	801be10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801be44:	6860      	ldr	r0, [r4, #4]
 801be46:	a902      	add	r1, sp, #8
 801be48:	6803      	ldr	r3, [r0, #0]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	4798      	blx	r3
 801be4e:	b00a      	add	sp, #40	; 0x28
 801be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be54:	0802e09e 	.word	0x0802e09e
 801be58:	0802e352 	.word	0x0802e352
 801be5c:	0802e022 	.word	0x0802e022
 801be60:	0802e0d6 	.word	0x0802e0d6

0801be64 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801be64:	b510      	push	{r4, lr}
 801be66:	b08a      	sub	sp, #40	; 0x28
 801be68:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801be6c:	9408      	str	r4, [sp, #32]
 801be6e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801be72:	9407      	str	r4, [sp, #28]
 801be74:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801be78:	9406      	str	r4, [sp, #24]
 801be7a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801be7e:	9405      	str	r4, [sp, #20]
 801be80:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801be84:	9404      	str	r4, [sp, #16]
 801be86:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801be8a:	9403      	str	r4, [sp, #12]
 801be8c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801be90:	9402      	str	r4, [sp, #8]
 801be92:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801be96:	e9cd 3400 	strd	r3, r4, [sp]
 801be9a:	4613      	mov	r3, r2
 801be9c:	2200      	movs	r2, #0
 801be9e:	f7ff ff71 	bl	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bea2:	b00a      	add	sp, #40	; 0x28
 801bea4:	bd10      	pop	{r4, pc}
	...

0801bea8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801beaa:	b08b      	sub	sp, #44	; 0x2c
 801beac:	4616      	mov	r6, r2
 801beae:	460d      	mov	r5, r1
 801beb0:	461f      	mov	r7, r3
 801beb2:	4604      	mov	r4, r0
 801beb4:	f7f4 ffac 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801beb8:	6803      	ldr	r3, [r0, #0]
 801beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bebc:	4798      	blx	r3
 801bebe:	4b0e      	ldr	r3, [pc, #56]	; (801bef8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801bec0:	2200      	movs	r2, #0
 801bec2:	4629      	mov	r1, r5
 801bec4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bec8:	881b      	ldrh	r3, [r3, #0]
 801beca:	4620      	mov	r0, r4
 801becc:	9306      	str	r3, [sp, #24]
 801bece:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801bed2:	9305      	str	r3, [sp, #20]
 801bed4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801bed8:	9304      	str	r3, [sp, #16]
 801beda:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801bede:	9303      	str	r3, [sp, #12]
 801bee0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bee4:	9302      	str	r3, [sp, #8]
 801bee6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801beea:	e9cd 7300 	strd	r7, r3, [sp]
 801beee:	4633      	mov	r3, r6
 801bef0:	f7ff ff48 	bl	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bef4:	b00b      	add	sp, #44	; 0x2c
 801bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bef8:	2000bfe8 	.word	0x2000bfe8

0801befc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf00:	461f      	mov	r7, r3
 801bf02:	4b14      	ldr	r3, [pc, #80]	; (801bf54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801bf04:	b08a      	sub	sp, #40	; 0x28
 801bf06:	4616      	mov	r6, r2
 801bf08:	f8b3 8000 	ldrh.w	r8, [r3]
 801bf0c:	460d      	mov	r5, r1
 801bf0e:	4604      	mov	r4, r0
 801bf10:	f7f4 ff7e 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801bf14:	6803      	ldr	r3, [r0, #0]
 801bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf18:	4798      	blx	r3
 801bf1a:	2302      	movs	r3, #2
 801bf1c:	9008      	str	r0, [sp, #32]
 801bf1e:	2200      	movs	r2, #0
 801bf20:	4629      	mov	r1, r5
 801bf22:	4620      	mov	r0, r4
 801bf24:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801bf28:	2301      	movs	r3, #1
 801bf2a:	9305      	str	r3, [sp, #20]
 801bf2c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801bf30:	9304      	str	r3, [sp, #16]
 801bf32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801bf36:	9303      	str	r3, [sp, #12]
 801bf38:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bf3c:	9302      	str	r3, [sp, #8]
 801bf3e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bf42:	e9cd 7300 	strd	r7, r3, [sp]
 801bf46:	4633      	mov	r3, r6
 801bf48:	f7ff ff1c 	bl	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bf4c:	b00a      	add	sp, #40	; 0x28
 801bf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf52:	bf00      	nop
 801bf54:	2000bfe8 	.word	0x2000bfe8

0801bf58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf5c:	b08b      	sub	sp, #44	; 0x2c
 801bf5e:	469b      	mov	fp, r3
 801bf60:	4604      	mov	r4, r0
 801bf62:	4692      	mov	sl, r2
 801bf64:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801bf68:	2600      	movs	r6, #0
 801bf6a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801bf6e:	4689      	mov	r9, r1
 801bf70:	2fff      	cmp	r7, #255	; 0xff
 801bf72:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801bf76:	9608      	str	r6, [sp, #32]
 801bf78:	bf14      	ite	ne
 801bf7a:	2308      	movne	r3, #8
 801bf7c:	2302      	moveq	r3, #2
 801bf7e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801bf82:	f7ff fe8d 	bl	801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bf86:	465a      	mov	r2, fp
 801bf88:	4603      	mov	r3, r0
 801bf8a:	4651      	mov	r1, sl
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	e9cd 8500 	strd	r8, r5, [sp]
 801bf92:	f7ff fee7 	bl	801bd64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801bf96:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801bf9a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801bf9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bfa2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801bfa6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801bfaa:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bfae:	6823      	ldr	r3, [r4, #0]
 801bfb0:	9d02      	ldr	r5, [sp, #8]
 801bfb2:	9005      	str	r0, [sp, #20]
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f8ad 601c 	strh.w	r6, [sp, #28]
 801bfba:	f8ad 801e 	strh.w	r8, [sp, #30]
 801bfbe:	f8cd 9020 	str.w	r9, [sp, #32]
 801bfc2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801bfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfc8:	4798      	blx	r3
 801bfca:	4228      	tst	r0, r5
 801bfcc:	d106      	bne.n	801bfdc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801bfce:	4b07      	ldr	r3, [pc, #28]	; (801bfec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801bfd0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801bfd4:	4a06      	ldr	r2, [pc, #24]	; (801bff0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801bfd6:	4807      	ldr	r0, [pc, #28]	; (801bff4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801bfd8:	f00e fe04 	bl	802abe4 <__assert_func>
 801bfdc:	6860      	ldr	r0, [r4, #4]
 801bfde:	a902      	add	r1, sp, #8
 801bfe0:	6803      	ldr	r3, [r0, #0]
 801bfe2:	685b      	ldr	r3, [r3, #4]
 801bfe4:	4798      	blx	r3
 801bfe6:	b00b      	add	sp, #44	; 0x2c
 801bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfec:	0802e0d6 	.word	0x0802e0d6
 801bff0:	0802e41b 	.word	0x0802e41b
 801bff4:	0802e022 	.word	0x0802e022

0801bff8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801bff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801bffc:	461f      	mov	r7, r3
 801bffe:	4b0b      	ldr	r3, [pc, #44]	; (801c02c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801c000:	460d      	mov	r5, r1
 801c002:	4616      	mov	r6, r2
 801c004:	f8b3 8000 	ldrh.w	r8, [r3]
 801c008:	4604      	mov	r4, r0
 801c00a:	f7f4 ff01 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c00e:	6803      	ldr	r3, [r0, #0]
 801c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c012:	4798      	blx	r3
 801c014:	463b      	mov	r3, r7
 801c016:	4632      	mov	r2, r6
 801c018:	4629      	mov	r1, r5
 801c01a:	e9cd 8000 	strd	r8, r0, [sp]
 801c01e:	4620      	mov	r0, r4
 801c020:	f7ff fea0 	bl	801bd64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c024:	b002      	add	sp, #8
 801c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c02a:	bf00      	nop
 801c02c:	2000bfe8 	.word	0x2000bfe8

0801c030 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c034:	4698      	mov	r8, r3
 801c036:	b088      	sub	sp, #32
 801c038:	2300      	movs	r3, #0
 801c03a:	4617      	mov	r7, r2
 801c03c:	4604      	mov	r4, r0
 801c03e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801c042:	9306      	str	r3, [sp, #24]
 801c044:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801c048:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801c04c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801c050:	f8ad 5012 	strh.w	r5, [sp, #18]
 801c054:	e9cd 3100 	strd	r3, r1, [sp]
 801c058:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c05c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c060:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c064:	f88d 301c 	strb.w	r3, [sp, #28]
 801c068:	f7ff fe1a 	bl	801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c06c:	4642      	mov	r2, r8
 801c06e:	4603      	mov	r3, r0
 801c070:	4639      	mov	r1, r7
 801c072:	4620      	mov	r0, r4
 801c074:	f7ff ffc0 	bl	801bff8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c078:	4b16      	ldr	r3, [pc, #88]	; (801c0d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801c07a:	9003      	str	r0, [sp, #12]
 801c07c:	881b      	ldrh	r3, [r3, #0]
 801c07e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c082:	f7f4 fec5 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c086:	6803      	ldr	r3, [r0, #0]
 801c088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c08a:	4798      	blx	r3
 801c08c:	f88d 001e 	strb.w	r0, [sp, #30]
 801c090:	f88d 001d 	strb.w	r0, [sp, #29]
 801c094:	b106      	cbz	r6, 801c098 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801c096:	b935      	cbnz	r5, 801c0a6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801c098:	4b0f      	ldr	r3, [pc, #60]	; (801c0d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801c09a:	f240 11cd 	movw	r1, #461	; 0x1cd
 801c09e:	4a0f      	ldr	r2, [pc, #60]	; (801c0dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801c0a0:	480f      	ldr	r0, [pc, #60]	; (801c0e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801c0a2:	f00e fd9f 	bl	802abe4 <__assert_func>
 801c0a6:	6823      	ldr	r3, [r4, #0]
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	9d00      	ldr	r5, [sp, #0]
 801c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0ae:	4798      	blx	r3
 801c0b0:	4228      	tst	r0, r5
 801c0b2:	d104      	bne.n	801c0be <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801c0b4:	4b0b      	ldr	r3, [pc, #44]	; (801c0e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801c0b6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801c0ba:	4a08      	ldr	r2, [pc, #32]	; (801c0dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801c0bc:	e7f0      	b.n	801c0a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801c0be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c0c0:	4669      	mov	r1, sp
 801c0c2:	6860      	ldr	r0, [r4, #4]
 801c0c4:	9306      	str	r3, [sp, #24]
 801c0c6:	6803      	ldr	r3, [r0, #0]
 801c0c8:	685b      	ldr	r3, [r3, #4]
 801c0ca:	4798      	blx	r3
 801c0cc:	b008      	add	sp, #32
 801c0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0d2:	bf00      	nop
 801c0d4:	2000bfe8 	.word	0x2000bfe8
 801c0d8:	0802e09e 	.word	0x0802e09e
 801c0dc:	0802e204 	.word	0x0802e204
 801c0e0:	0802e022 	.word	0x0802e022
 801c0e4:	0802e0d6 	.word	0x0802e0d6

0801c0e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801c0e8:	b570      	push	{r4, r5, r6, lr}
 801c0ea:	b08a      	sub	sp, #40	; 0x28
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	466b      	mov	r3, sp
 801c0f0:	e883 0006 	stmia.w	r3, {r1, r2}
 801c0f4:	4b1f      	ldr	r3, [pc, #124]	; (801c174 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801c0f6:	781b      	ldrb	r3, [r3, #0]
 801c0f8:	b933      	cbnz	r3, 801c108 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801c0fa:	4b1f      	ldr	r3, [pc, #124]	; (801c178 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801c0fc:	f240 11f9 	movw	r1, #505	; 0x1f9
 801c100:	4a1e      	ldr	r2, [pc, #120]	; (801c17c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801c102:	481f      	ldr	r0, [pc, #124]	; (801c180 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801c104:	f00e fd6e 	bl	802abe4 <__assert_func>
 801c108:	2300      	movs	r3, #0
 801c10a:	f8bd 5000 	ldrh.w	r5, [sp]
 801c10e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801c112:	9308      	str	r3, [sp, #32]
 801c114:	2301      	movs	r3, #1
 801c116:	9302      	str	r3, [sp, #8]
 801c118:	6803      	ldr	r3, [r0, #0]
 801c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c11c:	4798      	blx	r3
 801c11e:	4632      	mov	r2, r6
 801c120:	4629      	mov	r1, r5
 801c122:	4603      	mov	r3, r0
 801c124:	4620      	mov	r0, r4
 801c126:	f7ff ff67 	bl	801bff8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c12a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c12c:	9003      	str	r0, [sp, #12]
 801c12e:	9305      	str	r3, [sp, #20]
 801c130:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c134:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c138:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c13c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c140:	4b10      	ldr	r3, [pc, #64]	; (801c184 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801c142:	881b      	ldrh	r3, [r3, #0]
 801c144:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c148:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c14c:	f7f4 fe60 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c150:	6803      	ldr	r3, [r0, #0]
 801c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c154:	4798      	blx	r3
 801c156:	23ff      	movs	r3, #255	; 0xff
 801c158:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801c15c:	a902      	add	r1, sp, #8
 801c15e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801c162:	6860      	ldr	r0, [r4, #4]
 801c164:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c168:	6803      	ldr	r3, [r0, #0]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	4798      	blx	r3
 801c16e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801c170:	b00a      	add	sp, #40	; 0x28
 801c172:	bd70      	pop	{r4, r5, r6, pc}
 801c174:	2000bfed 	.word	0x2000bfed
 801c178:	0802df6f 	.word	0x0802df6f
 801c17c:	0802e2a8 	.word	0x0802e2a8
 801c180:	0802e022 	.word	0x0802e022
 801c184:	2000bfe8 	.word	0x2000bfe8

0801c188 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801c188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c18a:	b08b      	sub	sp, #44	; 0x2c
 801c18c:	4604      	mov	r4, r0
 801c18e:	466d      	mov	r5, sp
 801c190:	e885 0006 	stmia.w	r5, {r1, r2}
 801c194:	461d      	mov	r5, r3
 801c196:	2300      	movs	r3, #0
 801c198:	f8bd 6000 	ldrh.w	r6, [sp]
 801c19c:	9308      	str	r3, [sp, #32]
 801c19e:	2301      	movs	r3, #1
 801c1a0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801c1a4:	9302      	str	r3, [sp, #8]
 801c1a6:	6803      	ldr	r3, [r0, #0]
 801c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1aa:	4798      	blx	r3
 801c1ac:	463a      	mov	r2, r7
 801c1ae:	4631      	mov	r1, r6
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	4620      	mov	r0, r4
 801c1b4:	f7ff ff20 	bl	801bff8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c1b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c1bc:	9003      	str	r0, [sp, #12]
 801c1be:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c1c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c1c6:	9505      	str	r5, [sp, #20]
 801c1c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c1cc:	4b0d      	ldr	r3, [pc, #52]	; (801c204 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801c1ce:	881b      	ldrh	r3, [r3, #0]
 801c1d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c1da:	f7f4 fe19 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c1de:	6803      	ldr	r3, [r0, #0]
 801c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1e2:	4798      	blx	r3
 801c1e4:	23ff      	movs	r3, #255	; 0xff
 801c1e6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801c1ea:	a902      	add	r1, sp, #8
 801c1ec:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801c1f0:	6860      	ldr	r0, [r4, #4]
 801c1f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c1f6:	6803      	ldr	r3, [r0, #0]
 801c1f8:	685b      	ldr	r3, [r3, #4]
 801c1fa:	4798      	blx	r3
 801c1fc:	4628      	mov	r0, r5
 801c1fe:	b00b      	add	sp, #44	; 0x2c
 801c200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c202:	bf00      	nop
 801c204:	2000bfe8 	.word	0x2000bfe8

0801c208 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801c208:	b570      	push	{r4, r5, r6, lr}
 801c20a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801c20e:	4604      	mov	r4, r0
 801c210:	b19b      	cbz	r3, 801c23a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801c212:	2002      	movs	r0, #2
 801c214:	f7fc fbe4 	bl	80189e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801c218:	2300      	movs	r3, #0
 801c21a:	4620      	mov	r0, r4
 801c21c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801c220:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801c224:	6823      	ldr	r3, [r4, #0]
 801c226:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801c22a:	f7ff fd39 	bl	801bca0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c22e:	4601      	mov	r1, r0
 801c230:	4620      	mov	r0, r4
 801c232:	462b      	mov	r3, r5
 801c234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c238:	4718      	bx	r3
 801c23a:	bd70      	pop	{r4, r5, r6, pc}

0801c23c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801c23c:	4770      	bx	lr

0801c23e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801c23e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801c242:	1a13      	subs	r3, r2, r0
 801c244:	4258      	negs	r0, r3
 801c246:	4158      	adcs	r0, r3
 801c248:	4770      	bx	lr

0801c24a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801c24a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801c24e:	1a9b      	subs	r3, r3, r2
 801c250:	2b00      	cmp	r3, #0
 801c252:	bfdc      	itt	le
 801c254:	6882      	ldrle	r2, [r0, #8]
 801c256:	189b      	addle	r3, r3, r2
 801c258:	2b01      	cmp	r3, #1
 801c25a:	bfcc      	ite	gt
 801c25c:	2000      	movgt	r0, #0
 801c25e:	2001      	movle	r0, #1
 801c260:	4770      	bx	lr

0801c262 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801c262:	6902      	ldr	r2, [r0, #16]
 801c264:	6840      	ldr	r0, [r0, #4]
 801c266:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801c26a:	4770      	bx	lr

0801c26c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801c26c:	6803      	ldr	r3, [r0, #0]
 801c26e:	691b      	ldr	r3, [r3, #16]
 801c270:	4718      	bx	r3

0801c272 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801c272:	4770      	bx	lr

0801c274 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801c274:	4770      	bx	lr
	...

0801c278 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801c278:	2301      	movs	r3, #1
 801c27a:	b570      	push	{r4, r5, r6, lr}
 801c27c:	7203      	strb	r3, [r0, #8]
 801c27e:	4604      	mov	r4, r0
 801c280:	6840      	ldr	r0, [r0, #4]
 801c282:	6803      	ldr	r3, [r0, #0]
 801c284:	699b      	ldr	r3, [r3, #24]
 801c286:	4798      	blx	r3
 801c288:	6803      	ldr	r3, [r0, #0]
 801c28a:	4605      	mov	r5, r0
 801c28c:	2b08      	cmp	r3, #8
 801c28e:	d01e      	beq.n	801c2ce <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801c290:	d80b      	bhi.n	801c2aa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801c292:	2b02      	cmp	r3, #2
 801c294:	d027      	beq.n	801c2e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801c296:	2b04      	cmp	r3, #4
 801c298:	d011      	beq.n	801c2be <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801c29a:	2b01      	cmp	r3, #1
 801c29c:	d028      	beq.n	801c2f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c29e:	4b17      	ldr	r3, [pc, #92]	; (801c2fc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801c2a0:	218b      	movs	r1, #139	; 0x8b
 801c2a2:	4a17      	ldr	r2, [pc, #92]	; (801c300 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801c2a4:	4817      	ldr	r0, [pc, #92]	; (801c304 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801c2a6:	f00e fc9d 	bl	802abe4 <__assert_func>
 801c2aa:	2b40      	cmp	r3, #64	; 0x40
 801c2ac:	d020      	beq.n	801c2f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c2ae:	d801      	bhi.n	801c2b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801c2b0:	2b20      	cmp	r3, #32
 801c2b2:	e7f3      	b.n	801c29c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c2b4:	2b80      	cmp	r3, #128	; 0x80
 801c2b6:	d01b      	beq.n	801c2f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c2bc:	e7ee      	b.n	801c29c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c2be:	6823      	ldr	r3, [r4, #0]
 801c2c0:	7f01      	ldrb	r1, [r0, #28]
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2c6:	4798      	blx	r3
 801c2c8:	6823      	ldr	r3, [r4, #0]
 801c2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2cc:	e006      	b.n	801c2dc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801c2ce:	6823      	ldr	r3, [r4, #0]
 801c2d0:	7f01      	ldrb	r1, [r0, #28]
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2d6:	4798      	blx	r3
 801c2d8:	6823      	ldr	r3, [r4, #0]
 801c2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c2dc:	4629      	mov	r1, r5
 801c2de:	4620      	mov	r0, r4
 801c2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2e4:	4718      	bx	r3
 801c2e6:	6823      	ldr	r3, [r4, #0]
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c2ec:	4798      	blx	r3
 801c2ee:	e7f3      	b.n	801c2d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801c2f0:	6823      	ldr	r3, [r4, #0]
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c2f6:	4798      	blx	r3
 801c2f8:	e7e6      	b.n	801c2c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801c2fa:	bf00      	nop
 801c2fc:	0802e4f9 	.word	0x0802e4f9
 801c300:	0802e608 	.word	0x0802e608
 801c304:	0802e51e 	.word	0x0802e51e

0801c308 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801c308:	b570      	push	{r4, r5, r6, lr}
 801c30a:	4604      	mov	r4, r0
 801c30c:	460e      	mov	r6, r1
 801c30e:	6860      	ldr	r0, [r4, #4]
 801c310:	6803      	ldr	r3, [r0, #0]
 801c312:	685b      	ldr	r3, [r3, #4]
 801c314:	4798      	blx	r3
 801c316:	2800      	cmp	r0, #0
 801c318:	d1f9      	bne.n	801c30e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801c31a:	4d0b      	ldr	r5, [pc, #44]	; (801c348 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801c31c:	6828      	ldr	r0, [r5, #0]
 801c31e:	6803      	ldr	r3, [r0, #0]
 801c320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c322:	4798      	blx	r3
 801c324:	f7fc fe10 	bl	8018f48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801c328:	6860      	ldr	r0, [r4, #4]
 801c32a:	4631      	mov	r1, r6
 801c32c:	6803      	ldr	r3, [r0, #0]
 801c32e:	689b      	ldr	r3, [r3, #8]
 801c330:	4798      	blx	r3
 801c332:	6823      	ldr	r3, [r4, #0]
 801c334:	4620      	mov	r0, r4
 801c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c338:	4798      	blx	r3
 801c33a:	6828      	ldr	r0, [r5, #0]
 801c33c:	6803      	ldr	r3, [r0, #0]
 801c33e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c344:	4718      	bx	r3
 801c346:	bf00      	nop
 801c348:	2000bff0 	.word	0x2000bff0

0801c34c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801c34c:	b508      	push	{r3, lr}
 801c34e:	f7fc fddf 	bl	8018f10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c356:	f7fc bde9 	b.w	8018f2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801c35a <_ZN8touchgfx13DMA_Interface5startEv>:
 801c35a:	b510      	push	{r4, lr}
 801c35c:	4604      	mov	r4, r0
 801c35e:	6840      	ldr	r0, [r0, #4]
 801c360:	6803      	ldr	r3, [r0, #0]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	4798      	blx	r3
 801c366:	b948      	cbnz	r0, 801c37c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c368:	7a63      	ldrb	r3, [r4, #9]
 801c36a:	b13b      	cbz	r3, 801c37c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c36c:	7a23      	ldrb	r3, [r4, #8]
 801c36e:	b92b      	cbnz	r3, 801c37c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c370:	6823      	ldr	r3, [r4, #0]
 801c372:	4620      	mov	r0, r4
 801c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c37a:	4718      	bx	r3
 801c37c:	bd10      	pop	{r4, pc}
	...

0801c380 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801c380:	b510      	push	{r4, lr}
 801c382:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801c386:	1b12      	subs	r2, r2, r4
 801c388:	2a00      	cmp	r2, #0
 801c38a:	bfdc      	itt	le
 801c38c:	6883      	ldrle	r3, [r0, #8]
 801c38e:	18d2      	addle	r2, r2, r3
 801c390:	2a01      	cmp	r2, #1
 801c392:	dd18      	ble.n	801c3c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801c394:	6843      	ldr	r3, [r0, #4]
 801c396:	f101 021c 	add.w	r2, r1, #28
 801c39a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801c39e:	f851 4b04 	ldr.w	r4, [r1], #4
 801c3a2:	4291      	cmp	r1, r2
 801c3a4:	f843 4b04 	str.w	r4, [r3], #4
 801c3a8:	d1f9      	bne.n	801c39e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801c3aa:	880a      	ldrh	r2, [r1, #0]
 801c3ac:	801a      	strh	r2, [r3, #0]
 801c3ae:	788a      	ldrb	r2, [r1, #2]
 801c3b0:	709a      	strb	r2, [r3, #2]
 801c3b2:	68c3      	ldr	r3, [r0, #12]
 801c3b4:	6882      	ldr	r2, [r0, #8]
 801c3b6:	f3bf 8f5b 	dmb	ish
 801c3ba:	3301      	adds	r3, #1
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	bfd8      	it	le
 801c3c0:	1a9b      	suble	r3, r3, r2
 801c3c2:	60c3      	str	r3, [r0, #12]
 801c3c4:	bd10      	pop	{r4, pc}
 801c3c6:	4b03      	ldr	r3, [pc, #12]	; (801c3d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801c3c8:	2139      	movs	r1, #57	; 0x39
 801c3ca:	4a03      	ldr	r2, [pc, #12]	; (801c3d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801c3cc:	4803      	ldr	r0, [pc, #12]	; (801c3dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801c3ce:	f00e fc09 	bl	802abe4 <__assert_func>
 801c3d2:	bf00      	nop
 801c3d4:	0802e544 	.word	0x0802e544
 801c3d8:	0802e638 	.word	0x0802e638
 801c3dc:	0802e51e 	.word	0x0802e51e

0801c3e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801c3e0:	b510      	push	{r4, lr}
 801c3e2:	6803      	ldr	r3, [r0, #0]
 801c3e4:	4604      	mov	r4, r0
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4798      	blx	r3
 801c3ea:	b128      	cbz	r0, 801c3f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801c3ec:	4b07      	ldr	r3, [pc, #28]	; (801c40c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801c3ee:	213f      	movs	r1, #63	; 0x3f
 801c3f0:	4a07      	ldr	r2, [pc, #28]	; (801c410 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801c3f2:	4808      	ldr	r0, [pc, #32]	; (801c414 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801c3f4:	f00e fbf6 	bl	802abe4 <__assert_func>
 801c3f8:	6923      	ldr	r3, [r4, #16]
 801c3fa:	68a2      	ldr	r2, [r4, #8]
 801c3fc:	f3bf 8f5b 	dmb	ish
 801c400:	3301      	adds	r3, #1
 801c402:	429a      	cmp	r2, r3
 801c404:	bfd8      	it	le
 801c406:	1a9b      	suble	r3, r3, r2
 801c408:	6123      	str	r3, [r4, #16]
 801c40a:	bd10      	pop	{r4, pc}
 801c40c:	0802e567 	.word	0x0802e567
 801c410:	0802e686 	.word	0x0802e686
 801c414:	0802e51e 	.word	0x0802e51e

0801c418 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801c418:	b570      	push	{r4, r5, r6, lr}
 801c41a:	4604      	mov	r4, r0
 801c41c:	6840      	ldr	r0, [r0, #4]
 801c41e:	6803      	ldr	r3, [r0, #0]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	4798      	blx	r3
 801c424:	4605      	mov	r5, r0
 801c426:	b930      	cbnz	r0, 801c436 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801c428:	7a23      	ldrb	r3, [r4, #8]
 801c42a:	b123      	cbz	r3, 801c436 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801c42c:	6860      	ldr	r0, [r4, #4]
 801c42e:	6803      	ldr	r3, [r0, #0]
 801c430:	695b      	ldr	r3, [r3, #20]
 801c432:	4798      	blx	r3
 801c434:	7225      	strb	r5, [r4, #8]
 801c436:	6860      	ldr	r0, [r4, #4]
 801c438:	6803      	ldr	r3, [r0, #0]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	4798      	blx	r3
 801c43e:	b928      	cbnz	r0, 801c44c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801c440:	6823      	ldr	r3, [r4, #0]
 801c442:	4620      	mov	r0, r4
 801c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c44a:	4718      	bx	r3
 801c44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c450:	f7fc bd86 	b.w	8018f60 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801c454 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801c454:	b510      	push	{r4, lr}
 801c456:	6082      	str	r2, [r0, #8]
 801c458:	2200      	movs	r2, #0
 801c45a:	4c03      	ldr	r4, [pc, #12]	; (801c468 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801c45c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c460:	e9c0 4100 	strd	r4, r1, [r0]
 801c464:	bd10      	pop	{r4, pc}
 801c466:	bf00      	nop
 801c468:	0802e5ec 	.word	0x0802e5ec

0801c46c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801c46c:	6840      	ldr	r0, [r0, #4]
 801c46e:	6803      	ldr	r3, [r0, #0]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	4718      	bx	r3

0801c474 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801c474:	2001      	movs	r0, #1
 801c476:	4770      	bx	lr

0801c478 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801c478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c47c:	460d      	mov	r5, r1
 801c47e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c482:	b085      	sub	sp, #20
 801c484:	4690      	mov	r8, r2
 801c486:	4411      	add	r1, r2
 801c488:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801c48c:	4699      	mov	r9, r3
 801c48e:	6803      	ldr	r3, [r0, #0]
 801c490:	60c1      	str	r1, [r0, #12]
 801c492:	4604      	mov	r4, r0
 801c494:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c496:	440a      	add	r2, r1
 801c498:	6102      	str	r2, [r0, #16]
 801c49a:	68db      	ldr	r3, [r3, #12]
 801c49c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801c4a0:	4798      	blx	r3
 801c4a2:	2800      	cmp	r0, #0
 801c4a4:	d039      	beq.n	801c51a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801c4a6:	44c8      	add	r8, r9
 801c4a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c4ac:	4445      	add	r5, r8
 801c4ae:	6823      	ldr	r3, [r4, #0]
 801c4b0:	f10d 020f 	add.w	r2, sp, #15
 801c4b4:	a903      	add	r1, sp, #12
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	9200      	str	r2, [sp, #0]
 801c4ba:	f10d 020d 	add.w	r2, sp, #13
 801c4be:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801c4c2:	f10d 030e 	add.w	r3, sp, #14
 801c4c6:	47c0      	blx	r8
 801c4c8:	b1f8      	cbz	r0, 801c50a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801c4ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801c4ce:	7a20      	ldrb	r0, [r4, #8]
 801c4d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801c4d4:	4358      	muls	r0, r3
 801c4d6:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801c4da:	1c43      	adds	r3, r0, #1
 801c4dc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c4e0:	f817 0b01 	ldrb.w	r0, [r7], #1
 801c4e4:	121b      	asrs	r3, r3, #8
 801c4e6:	fb10 f003 	smulbb	r0, r0, r3
 801c4ea:	b283      	uxth	r3, r0
 801c4ec:	1c58      	adds	r0, r3, #1
 801c4ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c4f2:	6823      	ldr	r3, [r4, #0]
 801c4f4:	1200      	asrs	r0, r0, #8
 801c4f6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801c4fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801c4fe:	28ff      	cmp	r0, #255	; 0xff
 801c500:	d10e      	bne.n	801c520 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801c502:	9100      	str	r1, [sp, #0]
 801c504:	4629      	mov	r1, r5
 801c506:	4620      	mov	r0, r4
 801c508:	47c0      	blx	r8
 801c50a:	68e3      	ldr	r3, [r4, #12]
 801c50c:	3e01      	subs	r6, #1
 801c50e:	f105 0503 	add.w	r5, r5, #3
 801c512:	f103 0301 	add.w	r3, r3, #1
 801c516:	60e3      	str	r3, [r4, #12]
 801c518:	d1c9      	bne.n	801c4ae <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801c51a:	b005      	add	sp, #20
 801c51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c520:	fa1f fc80 	uxth.w	ip, r0
 801c524:	43c0      	mvns	r0, r0
 801c526:	f895 e002 	ldrb.w	lr, [r5, #2]
 801c52a:	fb12 f20c 	smulbb	r2, r2, ip
 801c52e:	b2c0      	uxtb	r0, r0
 801c530:	fb13 f30c 	smulbb	r3, r3, ip
 801c534:	fb0e 2200 	mla	r2, lr, r0, r2
 801c538:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c53c:	fb11 f10c 	smulbb	r1, r1, ip
 801c540:	fb0e 3300 	mla	r3, lr, r0, r3
 801c544:	f895 e000 	ldrb.w	lr, [r5]
 801c548:	b292      	uxth	r2, r2
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	fb0e 1000 	mla	r0, lr, r0, r1
 801c550:	1c59      	adds	r1, r3, #1
 801c552:	b280      	uxth	r0, r0
 801c554:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c558:	1c51      	adds	r1, r2, #1
 801c55a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c55e:	1c41      	adds	r1, r0, #1
 801c560:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c564:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801c568:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c56c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c570:	9000      	str	r0, [sp, #0]
 801c572:	e7c7      	b.n	801c504 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801c574 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801c574:	f89d 0000 	ldrb.w	r0, [sp]
 801c578:	704b      	strb	r3, [r1, #1]
 801c57a:	7008      	strb	r0, [r1, #0]
 801c57c:	708a      	strb	r2, [r1, #2]
 801c57e:	4770      	bx	lr

0801c580 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801c580:	4413      	add	r3, r2
 801c582:	7dc2      	ldrb	r2, [r0, #23]
 801c584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c588:	4419      	add	r1, r3
 801c58a:	7a03      	ldrb	r3, [r0, #8]
 801c58c:	435a      	muls	r2, r3
 801c58e:	1c53      	adds	r3, r2, #1
 801c590:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c594:	121b      	asrs	r3, r3, #8
 801c596:	2bff      	cmp	r3, #255	; 0xff
 801c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c59a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801c59e:	d13e      	bne.n	801c61e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801c5a0:	4427      	add	r7, r4
 801c5a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c5a6:	3103      	adds	r1, #3
 801c5a8:	7d86      	ldrb	r6, [r0, #22]
 801c5aa:	2bff      	cmp	r3, #255	; 0xff
 801c5ac:	d10a      	bne.n	801c5c4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801c5ae:	f801 6c03 	strb.w	r6, [r1, #-3]
 801c5b2:	7d43      	ldrb	r3, [r0, #21]
 801c5b4:	f801 3c02 	strb.w	r3, [r1, #-2]
 801c5b8:	7d03      	ldrb	r3, [r0, #20]
 801c5ba:	f801 3c01 	strb.w	r3, [r1, #-1]
 801c5be:	42a7      	cmp	r7, r4
 801c5c0:	d1ef      	bne.n	801c5a2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5c4:	b29a      	uxth	r2, r3
 801c5c6:	43db      	mvns	r3, r3
 801c5c8:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801c5cc:	fb16 f602 	smulbb	r6, r6, r2
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	fb05 6503 	mla	r5, r5, r3, r6
 801c5d6:	b2ad      	uxth	r5, r5
 801c5d8:	1c6e      	adds	r6, r5, #1
 801c5da:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c5de:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801c5e2:	fb16 f603 	smulbb	r6, r6, r3
 801c5e6:	122d      	asrs	r5, r5, #8
 801c5e8:	f801 5c03 	strb.w	r5, [r1, #-3]
 801c5ec:	7d45      	ldrb	r5, [r0, #21]
 801c5ee:	fb05 6502 	mla	r5, r5, r2, r6
 801c5f2:	b2ad      	uxth	r5, r5
 801c5f4:	1c6e      	adds	r6, r5, #1
 801c5f6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c5fa:	122d      	asrs	r5, r5, #8
 801c5fc:	f801 5c02 	strb.w	r5, [r1, #-2]
 801c600:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801c604:	7d06      	ldrb	r6, [r0, #20]
 801c606:	fb15 f303 	smulbb	r3, r5, r3
 801c60a:	fb06 3202 	mla	r2, r6, r2, r3
 801c60e:	b292      	uxth	r2, r2
 801c610:	1c53      	adds	r3, r2, #1
 801c612:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c616:	1212      	asrs	r2, r2, #8
 801c618:	f801 2c01 	strb.w	r2, [r1, #-1]
 801c61c:	e7cf      	b.n	801c5be <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801c61e:	b2de      	uxtb	r6, r3
 801c620:	2b00      	cmp	r3, #0
 801c622:	d0ce      	beq.n	801c5c2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801c624:	3103      	adds	r1, #3
 801c626:	4427      	add	r7, r4
 801c628:	f814 2b01 	ldrb.w	r2, [r4], #1
 801c62c:	3103      	adds	r1, #3
 801c62e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801c632:	fb02 f306 	mul.w	r3, r2, r6
 801c636:	42bc      	cmp	r4, r7
 801c638:	f103 0201 	add.w	r2, r3, #1
 801c63c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c640:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c644:	b295      	uxth	r5, r2
 801c646:	ea6f 0202 	mvn.w	r2, r2
 801c64a:	b2d3      	uxtb	r3, r2
 801c64c:	7d82      	ldrb	r2, [r0, #22]
 801c64e:	fb1c fc03 	smulbb	ip, ip, r3
 801c652:	fb02 c205 	mla	r2, r2, r5, ip
 801c656:	b292      	uxth	r2, r2
 801c658:	f102 0c01 	add.w	ip, r2, #1
 801c65c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c660:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801c664:	fb1c fc03 	smulbb	ip, ip, r3
 801c668:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c66c:	f801 2c06 	strb.w	r2, [r1, #-6]
 801c670:	7d42      	ldrb	r2, [r0, #21]
 801c672:	fb02 c205 	mla	r2, r2, r5, ip
 801c676:	b292      	uxth	r2, r2
 801c678:	f102 0c01 	add.w	ip, r2, #1
 801c67c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c680:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c684:	f801 2c05 	strb.w	r2, [r1, #-5]
 801c688:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801c68c:	f890 c014 	ldrb.w	ip, [r0, #20]
 801c690:	fb12 f303 	smulbb	r3, r2, r3
 801c694:	fb0c 3305 	mla	r3, ip, r5, r3
 801c698:	b29b      	uxth	r3, r3
 801c69a:	f103 0201 	add.w	r2, r3, #1
 801c69e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c6a2:	ea4f 2323 	mov.w	r3, r3, asr #8
 801c6a6:	f801 3c04 	strb.w	r3, [r1, #-4]
 801c6aa:	d1bd      	bne.n	801c628 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801c6ac:	e789      	b.n	801c5c2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801c6ae <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801c6ae:	b510      	push	{r4, lr}
 801c6b0:	7d04      	ldrb	r4, [r0, #20]
 801c6b2:	700c      	strb	r4, [r1, #0]
 801c6b4:	7d41      	ldrb	r1, [r0, #21]
 801c6b6:	7011      	strb	r1, [r2, #0]
 801c6b8:	7d82      	ldrb	r2, [r0, #22]
 801c6ba:	701a      	strb	r2, [r3, #0]
 801c6bc:	9b02      	ldr	r3, [sp, #8]
 801c6be:	7dc2      	ldrb	r2, [r0, #23]
 801c6c0:	2001      	movs	r0, #1
 801c6c2:	701a      	strb	r2, [r3, #0]
 801c6c4:	bd10      	pop	{r4, pc}

0801c6c6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801c6c6:	b570      	push	{r4, r5, r6, lr}
 801c6c8:	4616      	mov	r6, r2
 801c6ca:	4604      	mov	r4, r0
 801c6cc:	460d      	mov	r5, r1
 801c6ce:	f7f4 fb9f 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c6d2:	6803      	ldr	r3, [r0, #0]
 801c6d4:	4629      	mov	r1, r5
 801c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6d8:	4798      	blx	r3
 801c6da:	7520      	strb	r0, [r4, #20]
 801c6dc:	f7f4 fb98 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c6e0:	6803      	ldr	r3, [r0, #0]
 801c6e2:	4629      	mov	r1, r5
 801c6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6e6:	4798      	blx	r3
 801c6e8:	7560      	strb	r0, [r4, #21]
 801c6ea:	f7f4 fb91 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c6ee:	6803      	ldr	r3, [r0, #0]
 801c6f0:	4629      	mov	r1, r5
 801c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6f4:	4798      	blx	r3
 801c6f6:	75e6      	strb	r6, [r4, #23]
 801c6f8:	75a0      	strb	r0, [r4, #22]
 801c6fa:	bd70      	pop	{r4, r5, r6, pc}

0801c6fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6fe:	460e      	mov	r6, r1
 801c700:	4617      	mov	r7, r2
 801c702:	4604      	mov	r4, r0
 801c704:	f000 f832 	bl	801c76c <_ZN8touchgfx15AbstractPainterC1Ev>
 801c708:	4b12      	ldr	r3, [pc, #72]	; (801c754 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801c70a:	6023      	str	r3, [r4, #0]
 801c70c:	f7f4 fb80 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801c710:	6803      	ldr	r3, [r0, #0]
 801c712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c714:	4798      	blx	r3
 801c716:	1e43      	subs	r3, r0, #1
 801c718:	425d      	negs	r5, r3
 801c71a:	415d      	adcs	r5, r3
 801c71c:	4b0e      	ldr	r3, [pc, #56]	; (801c758 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c722:	b130      	cbz	r0, 801c732 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801c724:	6803      	ldr	r3, [r0, #0]
 801c726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c728:	4798      	blx	r3
 801c72a:	2801      	cmp	r0, #1
 801c72c:	bf08      	it	eq
 801c72e:	f045 0501 	orreq.w	r5, r5, #1
 801c732:	b92d      	cbnz	r5, 801c740 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801c734:	4b09      	ldr	r3, [pc, #36]	; (801c75c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801c736:	2129      	movs	r1, #41	; 0x29
 801c738:	4a09      	ldr	r2, [pc, #36]	; (801c760 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801c73a:	480a      	ldr	r0, [pc, #40]	; (801c764 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801c73c:	f00e fa52 	bl	802abe4 <__assert_func>
 801c740:	4b09      	ldr	r3, [pc, #36]	; (801c768 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801c742:	4620      	mov	r0, r4
 801c744:	463a      	mov	r2, r7
 801c746:	4631      	mov	r1, r6
 801c748:	6023      	str	r3, [r4, #0]
 801c74a:	f7ff ffbc 	bl	801c6c6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801c74e:	4620      	mov	r0, r4
 801c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c752:	bf00      	nop
 801c754:	0802e6c0 	.word	0x0802e6c0
 801c758:	2000bff0 	.word	0x2000bff0
 801c75c:	0802e6d8 	.word	0x0802e6d8
 801c760:	0802e79c 	.word	0x0802e79c
 801c764:	0802e736 	.word	0x0802e736
 801c768:	0802e784 	.word	0x0802e784

0801c76c <_ZN8touchgfx15AbstractPainterC1Ev>:
 801c76c:	4a03      	ldr	r2, [pc, #12]	; (801c77c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801c76e:	6002      	str	r2, [r0, #0]
 801c770:	2200      	movs	r2, #0
 801c772:	6042      	str	r2, [r0, #4]
 801c774:	22ff      	movs	r2, #255	; 0xff
 801c776:	7202      	strb	r2, [r0, #8]
 801c778:	4770      	bx	lr
 801c77a:	bf00      	nop
 801c77c:	0802e7e0 	.word	0x0802e7e0

0801c780 <_ZN8touchgfx15AbstractPainterD1Ev>:
 801c780:	4770      	bx	lr

0801c782 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801c782:	8081      	strh	r1, [r0, #4]
 801c784:	80c2      	strh	r2, [r0, #6]
 801c786:	4770      	bx	lr

0801c788 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801c788:	7201      	strb	r1, [r0, #8]
 801c78a:	4770      	bx	lr

0801c78c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801c78c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801c790:	4770      	bx	lr

0801c792 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801c792:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801c796:	4770      	bx	lr

0801c798 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801c798:	6281      	str	r1, [r0, #40]	; 0x28
 801c79a:	4770      	bx	lr

0801c79c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801c79c:	b513      	push	{r0, r1, r4, lr}
 801c79e:	6803      	ldr	r3, [r0, #0]
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	4601      	mov	r1, r0
 801c7a4:	4668      	mov	r0, sp
 801c7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7a8:	4798      	blx	r3
 801c7aa:	6823      	ldr	r3, [r4, #0]
 801c7ac:	4669      	mov	r1, sp
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	691b      	ldr	r3, [r3, #16]
 801c7b2:	4798      	blx	r3
 801c7b4:	b002      	add	sp, #8
 801c7b6:	bd10      	pop	{r4, pc}

0801c7b8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801c7b8:	b510      	push	{r4, lr}
 801c7ba:	2200      	movs	r2, #0
 801c7bc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801c7c0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801c7c4:	8002      	strh	r2, [r0, #0]
 801c7c6:	8042      	strh	r2, [r0, #2]
 801c7c8:	8084      	strh	r4, [r0, #4]
 801c7ca:	80c1      	strh	r1, [r0, #6]
 801c7cc:	bd10      	pop	{r4, pc}

0801c7ce <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	8002      	strh	r2, [r0, #0]
 801c7d2:	8042      	strh	r2, [r0, #2]
 801c7d4:	8082      	strh	r2, [r0, #4]
 801c7d6:	80c2      	strh	r2, [r0, #6]
 801c7d8:	4770      	bx	lr
	...

0801c7dc <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801c7dc:	b508      	push	{r3, lr}
 801c7de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c7e0:	b928      	cbnz	r0, 801c7ee <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801c7e2:	4b03      	ldr	r3, [pc, #12]	; (801c7f0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801c7e4:	2127      	movs	r1, #39	; 0x27
 801c7e6:	4a03      	ldr	r2, [pc, #12]	; (801c7f4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801c7e8:	4803      	ldr	r0, [pc, #12]	; (801c7f8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801c7ea:	f00e f9fb 	bl	802abe4 <__assert_func>
 801c7ee:	bd08      	pop	{r3, pc}
 801c7f0:	0802e7ec 	.word	0x0802e7ec
 801c7f4:	0802e8d0 	.word	0x0802e8d0
 801c7f8:	0802e813 	.word	0x0802e813

0801c7fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c800:	b089      	sub	sp, #36	; 0x24
 801c802:	4604      	mov	r4, r0
 801c804:	6808      	ldr	r0, [r1, #0]
 801c806:	f04f 0a00 	mov.w	sl, #0
 801c80a:	6849      	ldr	r1, [r1, #4]
 801c80c:	ab02      	add	r3, sp, #8
 801c80e:	f04f 0b01 	mov.w	fp, #1
 801c812:	c303      	stmia	r3!, {r0, r1}
 801c814:	4b3f      	ldr	r3, [pc, #252]	; (801c914 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801c816:	4621      	mov	r1, r4
 801c818:	a804      	add	r0, sp, #16
 801c81a:	781b      	ldrb	r3, [r3, #0]
 801c81c:	2b01      	cmp	r3, #1
 801c81e:	6823      	ldr	r3, [r4, #0]
 801c820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c822:	bf1f      	itttt	ne
 801c824:	f10d 0906 	addne.w	r9, sp, #6
 801c828:	ae03      	addne	r6, sp, #12
 801c82a:	f10d 050e 	addne.w	r5, sp, #14
 801c82e:	f10d 080a 	addne.w	r8, sp, #10
 801c832:	bf01      	itttt	eq
 801c834:	f10d 090e 	addeq.w	r9, sp, #14
 801c838:	f10d 0606 	addeq.w	r6, sp, #6
 801c83c:	ad03      	addeq	r5, sp, #12
 801c83e:	f10d 0808 	addeq.w	r8, sp, #8
 801c842:	4798      	blx	r3
 801c844:	f9b5 3000 	ldrsh.w	r3, [r5]
 801c848:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d056      	beq.n	801c8fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801c850:	4293      	cmp	r3, r2
 801c852:	bfa8      	it	ge
 801c854:	4613      	movge	r3, r2
 801c856:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c85a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c85e:	2f00      	cmp	r7, #0
 801c860:	dd34      	ble.n	801c8cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801c862:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801c866:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801c86a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801c86e:	4484      	add	ip, r0
 801c870:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801c874:	f9b6 e000 	ldrsh.w	lr, [r6]
 801c878:	fa0f fc8c 	sxth.w	ip, ip
 801c87c:	f9b9 1000 	ldrsh.w	r1, [r9]
 801c880:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c884:	4562      	cmp	r2, ip
 801c886:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c88a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c88e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c892:	da29      	bge.n	801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c894:	4472      	add	r2, lr
 801c896:	b212      	sxth	r2, r2
 801c898:	4290      	cmp	r0, r2
 801c89a:	da25      	bge.n	801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c89c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c8a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c8a4:	4402      	add	r2, r0
 801c8a6:	b212      	sxth	r2, r2
 801c8a8:	4293      	cmp	r3, r2
 801c8aa:	da1d      	bge.n	801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c8ac:	440b      	add	r3, r1
 801c8ae:	b21b      	sxth	r3, r3
 801c8b0:	4298      	cmp	r0, r3
 801c8b2:	da19      	bge.n	801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c8b4:	6823      	ldr	r3, [r4, #0]
 801c8b6:	a906      	add	r1, sp, #24
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c8bc:	4798      	blx	r3
 801c8be:	b998      	cbnz	r0, 801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c8c0:	107f      	asrs	r7, r7, #1
 801c8c2:	f04f 0a01 	mov.w	sl, #1
 801c8c6:	f8ad 7006 	strh.w	r7, [sp, #6]
 801c8ca:	e7c6      	b.n	801c85a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801c8cc:	d10c      	bne.n	801c8e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c8ce:	f8ad b006 	strh.w	fp, [sp, #6]
 801c8d2:	f8b8 2000 	ldrh.w	r2, [r8]
 801c8d6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801c8da:	440a      	add	r2, r1
 801c8dc:	f8a8 2000 	strh.w	r2, [r8]
 801c8e0:	882b      	ldrh	r3, [r5, #0]
 801c8e2:	1a5b      	subs	r3, r3, r1
 801c8e4:	802b      	strh	r3, [r5, #0]
 801c8e6:	e7ad      	b.n	801c844 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801c8e8:	f1ba 0f00 	cmp.w	sl, #0
 801c8ec:	d0f1      	beq.n	801c8d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801c8ee:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c8f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c8f6:	429a      	cmp	r2, r3
 801c8f8:	bf08      	it	eq
 801c8fa:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801c8fc:	e7e9      	b.n	801c8d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801c8fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c902:	429a      	cmp	r2, r3
 801c904:	bf04      	itt	eq
 801c906:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801c90a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801c90c:	b009      	add	sp, #36	; 0x24
 801c90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c912:	bf00      	nop
 801c914:	2000bfe6 	.word	0x2000bfe6

0801c918 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801c918:	2200      	movs	r2, #0
 801c91a:	2101      	movs	r1, #1
 801c91c:	8082      	strh	r2, [r0, #4]
 801c91e:	80c2      	strh	r2, [r0, #6]
 801c920:	8102      	strh	r2, [r0, #8]
 801c922:	8142      	strh	r2, [r0, #10]
 801c924:	8182      	strh	r2, [r0, #12]
 801c926:	81c2      	strh	r2, [r0, #14]
 801c928:	8202      	strh	r2, [r0, #16]
 801c92a:	8242      	strh	r2, [r0, #18]
 801c92c:	61c2      	str	r2, [r0, #28]
 801c92e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801c932:	6282      	str	r2, [r0, #40]	; 0x28
 801c934:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801c938:	4905      	ldr	r1, [pc, #20]	; (801c950 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801c93a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c93e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c942:	6001      	str	r1, [r0, #0]
 801c944:	8582      	strh	r2, [r0, #44]	; 0x2c
 801c946:	22ff      	movs	r2, #255	; 0xff
 801c948:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801c94c:	4770      	bx	lr
 801c94e:	bf00      	nop
 801c950:	0802e858 	.word	0x0802e858

0801c954 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801c954:	4770      	bx	lr

0801c956 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801c956:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801c95a:	4602      	mov	r2, r0
 801c95c:	cb03      	ldmia	r3!, {r0, r1}
 801c95e:	6010      	str	r0, [r2, #0]
 801c960:	4610      	mov	r0, r2
 801c962:	6051      	str	r1, [r2, #4]
 801c964:	4770      	bx	lr

0801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c96a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801c96e:	b395      	cbz	r5, 801c9d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801c970:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801c974:	f1bc 0f00 	cmp.w	ip, #0
 801c978:	d02d      	beq.n	801c9d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801c97a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c97e:	f9b1 e000 	ldrsh.w	lr, [r1]
 801c982:	b354      	cbz	r4, 801c9da <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801c984:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801c988:	b33f      	cbz	r7, 801c9da <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801c98a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c98e:	4475      	add	r5, lr
 801c990:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c994:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c998:	45f0      	cmp	r8, lr
 801c99a:	4646      	mov	r6, r8
 801c99c:	4444      	add	r4, r8
 801c99e:	bfa8      	it	ge
 801c9a0:	4676      	movge	r6, lr
 801c9a2:	4293      	cmp	r3, r2
 801c9a4:	4619      	mov	r1, r3
 801c9a6:	443b      	add	r3, r7
 801c9a8:	bfa8      	it	ge
 801c9aa:	4611      	movge	r1, r2
 801c9ac:	4462      	add	r2, ip
 801c9ae:	b22d      	sxth	r5, r5
 801c9b0:	8006      	strh	r6, [r0, #0]
 801c9b2:	b224      	sxth	r4, r4
 801c9b4:	8041      	strh	r1, [r0, #2]
 801c9b6:	b212      	sxth	r2, r2
 801c9b8:	b21b      	sxth	r3, r3
 801c9ba:	42a5      	cmp	r5, r4
 801c9bc:	bfac      	ite	ge
 801c9be:	ebc6 0405 	rsbge	r4, r6, r5
 801c9c2:	ebc6 0404 	rsblt	r4, r6, r4
 801c9c6:	429a      	cmp	r2, r3
 801c9c8:	bfac      	ite	ge
 801c9ca:	ebc1 0302 	rsbge	r3, r1, r2
 801c9ce:	ebc1 0303 	rsblt	r3, r1, r3
 801c9d2:	8084      	strh	r4, [r0, #4]
 801c9d4:	80c3      	strh	r3, [r0, #6]
 801c9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9da:	f8a0 e000 	strh.w	lr, [r0]
 801c9de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c9e2:	8043      	strh	r3, [r0, #2]
 801c9e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c9e8:	8083      	strh	r3, [r0, #4]
 801c9ea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c9ee:	e7f1      	b.n	801c9d4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801c9f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801c9f0:	b507      	push	{r0, r1, r2, lr}
 801c9f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c9f6:	ab01      	add	r3, sp, #4
 801c9f8:	6809      	ldr	r1, [r1, #0]
 801c9fa:	6800      	ldr	r0, [r0, #0]
 801c9fc:	f002 fe33 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801ca00:	b003      	add	sp, #12
 801ca02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ca08 <_ZN8touchgfx7CWRUtil4sineEi>:
 801ca08:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ca0c:	fb90 f3f2 	sdiv	r3, r0, r2
 801ca10:	fb03 0312 	mls	r3, r3, r2, r0
 801ca14:	4413      	add	r3, r2
 801ca16:	fb93 f0f2 	sdiv	r0, r3, r2
 801ca1a:	fb02 3010 	mls	r0, r2, r0, r3
 801ca1e:	4b0a      	ldr	r3, [pc, #40]	; (801ca48 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801ca20:	285a      	cmp	r0, #90	; 0x5a
 801ca22:	dc02      	bgt.n	801ca2a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801ca24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ca28:	4770      	bx	lr
 801ca2a:	28b4      	cmp	r0, #180	; 0xb4
 801ca2c:	dc02      	bgt.n	801ca34 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801ca2e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801ca32:	e7f7      	b.n	801ca24 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801ca34:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801ca38:	bfd4      	ite	le
 801ca3a:	38b4      	suble	r0, #180	; 0xb4
 801ca3c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801ca40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ca44:	4240      	negs	r0, r0
 801ca46:	4770      	bx	lr
 801ca48:	0802e97a 	.word	0x0802e97a

0801ca4c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801ca4c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801ca50:	f04f 0300 	mov.w	r3, #0
 801ca54:	bf2c      	ite	cs
 801ca56:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801ca5a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801ca5e:	1899      	adds	r1, r3, r2
 801ca60:	4288      	cmp	r0, r1
 801ca62:	bf24      	itt	cs
 801ca64:	1853      	addcs	r3, r2, r1
 801ca66:	1a40      	subcs	r0, r0, r1
 801ca68:	0892      	lsrs	r2, r2, #2
 801ca6a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801ca6e:	d1f6      	bne.n	801ca5e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801ca70:	4618      	mov	r0, r3
 801ca72:	4770      	bx	lr

0801ca74 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801ca74:	2800      	cmp	r0, #0
 801ca76:	b508      	push	{r3, lr}
 801ca78:	da05      	bge.n	801ca86 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801ca7a:	4240      	negs	r0, r0
 801ca7c:	f7ff fffa 	bl	801ca74 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801ca80:	4240      	negs	r0, r0
 801ca82:	b240      	sxtb	r0, r0
 801ca84:	bd08      	pop	{r3, pc}
 801ca86:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ca8a:	dc11      	bgt.n	801cab0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801ca8c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801ca90:	dd09      	ble.n	801caa6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801ca92:	4340      	muls	r0, r0
 801ca94:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801ca98:	f7ff ffd8 	bl	801ca4c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801ca9c:	f7ff ffea 	bl	801ca74 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801caa0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801caa4:	e7ed      	b.n	801ca82 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801caa6:	3003      	adds	r0, #3
 801caa8:	4b02      	ldr	r3, [pc, #8]	; (801cab4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801caaa:	10c0      	asrs	r0, r0, #3
 801caac:	5618      	ldrsb	r0, [r3, r0]
 801caae:	e7e9      	b.n	801ca84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801cab0:	2000      	movs	r0, #0
 801cab2:	e7e7      	b.n	801ca84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801cab4:	0802e91e 	.word	0x0802e91e

0801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801cab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801caba:	460c      	mov	r4, r1
 801cabc:	1e01      	subs	r1, r0, #0
 801cabe:	4615      	mov	r5, r2
 801cac0:	db01      	blt.n	801cac6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801cac2:	2c00      	cmp	r4, #0
 801cac4:	da06      	bge.n	801cad4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801cac6:	4b11      	ldr	r3, [pc, #68]	; (801cb0c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801cac8:	f240 3197 	movw	r1, #919	; 0x397
 801cacc:	4a10      	ldr	r2, [pc, #64]	; (801cb10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801cace:	4811      	ldr	r0, [pc, #68]	; (801cb14 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801cad0:	f00e f888 	bl	802abe4 <__assert_func>
 801cad4:	428c      	cmp	r4, r1
 801cad6:	dd06      	ble.n	801cae6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801cad8:	4620      	mov	r0, r4
 801cada:	f7ff ffed 	bl	801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801cade:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801cae2:	b003      	add	sp, #12
 801cae4:	bd30      	pop	{r4, r5, pc}
 801cae6:	4349      	muls	r1, r1
 801cae8:	fb04 1004 	mla	r0, r4, r4, r1
 801caec:	f7ff ffae 	bl	801ca4c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801caf0:	6028      	str	r0, [r5, #0]
 801caf2:	2800      	cmp	r0, #0
 801caf4:	d0f5      	beq.n	801cae2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801caf6:	4602      	mov	r2, r0
 801caf8:	ab01      	add	r3, sp, #4
 801cafa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801cafe:	4620      	mov	r0, r4
 801cb00:	f002 fdb1 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801cb04:	f7ff ffb6 	bl	801ca74 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801cb08:	e7eb      	b.n	801cae2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801cb0a:	bf00      	nop
 801cb0c:	0802ea30 	.word	0x0802ea30
 801cb10:	0802eaf8 	.word	0x0802eaf8
 801cb14:	0802ea41 	.word	0x0802ea41

0801cb18 <_ZN8touchgfx4LineC1Ev>:
 801cb18:	b510      	push	{r4, lr}
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	f7ff fefc 	bl	801c918 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801cb20:	4b0c      	ldr	r3, [pc, #48]	; (801cb54 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801cb22:	2220      	movs	r2, #32
 801cb24:	4620      	mov	r0, r4
 801cb26:	6023      	str	r3, [r4, #0]
 801cb28:	2300      	movs	r3, #0
 801cb2a:	6422      	str	r2, [r4, #64]	; 0x40
 801cb2c:	2212      	movs	r2, #18
 801cb2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cb32:	6722      	str	r2, [r4, #112]	; 0x70
 801cb34:	60a3      	str	r3, [r4, #8]
 801cb36:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801cb3a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801cb3e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cb42:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801cb46:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801cb4a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801cb4e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801cb52:	bd10      	pop	{r4, pc}
 801cb54:	0802ea80 	.word	0x0802ea80

0801cb58 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb5c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801cb5e:	b085      	sub	sp, #20
 801cb60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cb62:	4604      	mov	r4, r0
 801cb64:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801cb66:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801cb68:	1af6      	subs	r6, r6, r3
 801cb6a:	eba5 0502 	sub.w	r5, r5, r2
 801cb6e:	f040 809b 	bne.w	801cca8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801cb72:	b955      	cbnz	r5, 801cb8a <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801cb74:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801cb78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801cb7c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801cb80:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801cb84:	b005      	add	sp, #20
 801cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb8a:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801cb8e:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801cb92:	f04f 0802 	mov.w	r8, #2
 801cb96:	463a      	mov	r2, r7
 801cb98:	4629      	mov	r1, r5
 801cb9a:	ab03      	add	r3, sp, #12
 801cb9c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cb9e:	f002 fd62 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801cba2:	ab03      	add	r3, sp, #12
 801cba4:	463a      	mov	r2, r7
 801cba6:	4631      	mov	r1, r6
 801cba8:	fb90 f5f8 	sdiv	r5, r0, r8
 801cbac:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cbae:	f002 fd5a 	bl	801f666 <_ZN8touchgfx6muldivElllRl>
 801cbb2:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801cbb6:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801cbba:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801cbbe:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801cbc0:	fb90 f0f8 	sdiv	r0, r0, r8
 801cbc4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801cbc8:	eba8 0305 	sub.w	r3, r8, r5
 801cbcc:	f1ba 0f00 	cmp.w	sl, #0
 801cbd0:	f040 80c3 	bne.w	801cd5a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801cbd4:	64a3      	str	r3, [r4, #72]	; 0x48
 801cbd6:	19c3      	adds	r3, r0, r7
 801cbd8:	65a3      	str	r3, [r4, #88]	; 0x58
 801cbda:	ebae 0305 	sub.w	r3, lr, r5
 801cbde:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cbe0:	eb00 030c 	add.w	r3, r0, ip
 801cbe4:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cbe6:	eb05 030e 	add.w	r3, r5, lr
 801cbea:	6523      	str	r3, [r4, #80]	; 0x50
 801cbec:	ebac 0300 	sub.w	r3, ip, r0
 801cbf0:	6623      	str	r3, [r4, #96]	; 0x60
 801cbf2:	eb05 0308 	add.w	r3, r5, r8
 801cbf6:	6563      	str	r3, [r4, #84]	; 0x54
 801cbf8:	1a3b      	subs	r3, r7, r0
 801cbfa:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801cbfc:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801cc00:	6663      	str	r3, [r4, #100]	; 0x64
 801cc02:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801cc06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cc08:	4632      	mov	r2, r6
 801cc0a:	9301      	str	r3, [sp, #4]
 801cc0c:	9100      	str	r1, [sp, #0]
 801cc0e:	f859 bb04 	ldr.w	fp, [r9], #4
 801cc12:	9b00      	ldr	r3, [sp, #0]
 801cc14:	455e      	cmp	r6, fp
 801cc16:	bfa8      	it	ge
 801cc18:	465e      	movge	r6, fp
 801cc1a:	455a      	cmp	r2, fp
 801cc1c:	bfb8      	it	lt
 801cc1e:	465a      	movlt	r2, fp
 801cc20:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801cc24:	4559      	cmp	r1, fp
 801cc26:	bfa8      	it	ge
 801cc28:	4659      	movge	r1, fp
 801cc2a:	455b      	cmp	r3, fp
 801cc2c:	bfb8      	it	lt
 801cc2e:	465b      	movlt	r3, fp
 801cc30:	9300      	str	r3, [sp, #0]
 801cc32:	9b01      	ldr	r3, [sp, #4]
 801cc34:	454b      	cmp	r3, r9
 801cc36:	d1ea      	bne.n	801cc0e <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801cc38:	f04f 0b20 	mov.w	fp, #32
 801cc3c:	b209      	sxth	r1, r1
 801cc3e:	b212      	sxth	r2, r2
 801cc40:	f1ba 0f01 	cmp.w	sl, #1
 801cc44:	b236      	sxth	r6, r6
 801cc46:	fb91 f9fb 	sdiv	r9, r1, fp
 801cc4a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801cc4e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801cc52:	fb92 f2fb 	sdiv	r2, r2, fp
 801cc56:	fb91 f1fb 	sdiv	r1, r1, fp
 801cc5a:	fb96 f6fb 	sdiv	r6, r6, fp
 801cc5e:	f102 0201 	add.w	r2, r2, #1
 801cc62:	f101 0101 	add.w	r1, r1, #1
 801cc66:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801cc6a:	eba1 0109 	sub.w	r1, r1, r9
 801cc6e:	eba2 0606 	sub.w	r6, r2, r6
 801cc72:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801cc76:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801cc7a:	d183      	bne.n	801cb84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801cc7c:	eba8 0305 	sub.w	r3, r8, r5
 801cc80:	64a3      	str	r3, [r4, #72]	; 0x48
 801cc82:	19c3      	adds	r3, r0, r7
 801cc84:	65a3      	str	r3, [r4, #88]	; 0x58
 801cc86:	ebae 0305 	sub.w	r3, lr, r5
 801cc8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cc8c:	eb00 030c 	add.w	r3, r0, ip
 801cc90:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cc92:	eb05 030e 	add.w	r3, r5, lr
 801cc96:	4445      	add	r5, r8
 801cc98:	6523      	str	r3, [r4, #80]	; 0x50
 801cc9a:	ebac 0300 	sub.w	r3, ip, r0
 801cc9e:	1a38      	subs	r0, r7, r0
 801cca0:	6565      	str	r5, [r4, #84]	; 0x54
 801cca2:	6623      	str	r3, [r4, #96]	; 0x60
 801cca4:	6660      	str	r0, [r4, #100]	; 0x64
 801cca6:	e76d      	b.n	801cb84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801cca8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801ccac:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801ccb0:	2d00      	cmp	r5, #0
 801ccb2:	f43f af6e 	beq.w	801cb92 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801ccb6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801ccba:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801ccbe:	fb93 f2f7 	sdiv	r2, r3, r7
 801ccc2:	fb07 3312 	mls	r3, r7, r2, r3
 801ccc6:	b34b      	cbz	r3, 801cd1c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801ccc8:	fb97 f2f3 	sdiv	r2, r7, r3
 801cccc:	fb03 7712 	mls	r7, r3, r2, r7
 801ccd0:	2f00      	cmp	r7, #0
 801ccd2:	d1f4      	bne.n	801ccbe <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801ccd4:	2b01      	cmp	r3, #1
 801ccd6:	f24b 5204 	movw	r2, #46340	; 0xb504
 801ccda:	bf18      	it	ne
 801ccdc:	fb96 f6f3 	sdivne	r6, r6, r3
 801cce0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801cce4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801cce8:	bf18      	it	ne
 801ccea:	fb95 f5f3 	sdivne	r5, r5, r3
 801ccee:	4291      	cmp	r1, r2
 801ccf0:	dd16      	ble.n	801cd20 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801ccf2:	2d00      	cmp	r5, #0
 801ccf4:	da4d      	bge.n	801cd92 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801ccf6:	4b29      	ldr	r3, [pc, #164]	; (801cd9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801ccf8:	429d      	cmp	r5, r3
 801ccfa:	da27      	bge.n	801cd4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801ccfc:	426a      	negs	r2, r5
 801ccfe:	f24b 5304 	movw	r3, #46340	; 0xb504
 801cd02:	fb91 f1f3 	sdiv	r1, r1, r3
 801cd06:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd0a:	4299      	cmp	r1, r3
 801cd0c:	bfcc      	ite	gt
 801cd0e:	1c4b      	addgt	r3, r1, #1
 801cd10:	3301      	addle	r3, #1
 801cd12:	fb96 f6f3 	sdiv	r6, r6, r3
 801cd16:	fb95 f5f3 	sdiv	r5, r5, r3
 801cd1a:	e00f      	b.n	801cd3c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801cd1c:	463b      	mov	r3, r7
 801cd1e:	e7d9      	b.n	801ccd4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801cd20:	2d00      	cmp	r5, #0
 801cd22:	fb92 f2f1 	sdiv	r2, r2, r1
 801cd26:	da13      	bge.n	801cd50 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801cd28:	4269      	negs	r1, r5
 801cd2a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801cd2e:	fb93 f3f1 	sdiv	r3, r3, r1
 801cd32:	429a      	cmp	r2, r3
 801cd34:	bfa8      	it	ge
 801cd36:	461a      	movge	r2, r3
 801cd38:	4356      	muls	r6, r2
 801cd3a:	4355      	muls	r5, r2
 801cd3c:	fb05 f005 	mul.w	r0, r5, r5
 801cd40:	fb06 0006 	mla	r0, r6, r6, r0
 801cd44:	f7ff fe82 	bl	801ca4c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801cd48:	4607      	mov	r7, r0
 801cd4a:	e722      	b.n	801cb92 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	e7eb      	b.n	801cd28 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801cd50:	4629      	mov	r1, r5
 801cd52:	e7ea      	b.n	801cd2a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801cd54:	4629      	mov	r1, r5
 801cd56:	2200      	movs	r2, #0
 801cd58:	e7e7      	b.n	801cd2a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801cd5a:	1a1b      	subs	r3, r3, r0
 801cd5c:	64a3      	str	r3, [r4, #72]	; 0x48
 801cd5e:	19c3      	adds	r3, r0, r7
 801cd60:	1b5b      	subs	r3, r3, r5
 801cd62:	65a3      	str	r3, [r4, #88]	; 0x58
 801cd64:	ebae 0305 	sub.w	r3, lr, r5
 801cd68:	4403      	add	r3, r0
 801cd6a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cd6c:	eb00 030c 	add.w	r3, r0, ip
 801cd70:	442b      	add	r3, r5
 801cd72:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cd74:	eb05 030e 	add.w	r3, r5, lr
 801cd78:	4403      	add	r3, r0
 801cd7a:	6523      	str	r3, [r4, #80]	; 0x50
 801cd7c:	ebac 0300 	sub.w	r3, ip, r0
 801cd80:	442b      	add	r3, r5
 801cd82:	6623      	str	r3, [r4, #96]	; 0x60
 801cd84:	eb05 0308 	add.w	r3, r5, r8
 801cd88:	1a1b      	subs	r3, r3, r0
 801cd8a:	6563      	str	r3, [r4, #84]	; 0x54
 801cd8c:	1a3b      	subs	r3, r7, r0
 801cd8e:	1b5b      	subs	r3, r3, r5
 801cd90:	e733      	b.n	801cbfa <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801cd92:	4295      	cmp	r5, r2
 801cd94:	ddde      	ble.n	801cd54 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801cd96:	462a      	mov	r2, r5
 801cd98:	e7b1      	b.n	801ccfe <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801cd9a:	bf00      	nop
 801cd9c:	ffff4afc 	.word	0xffff4afc

0801cda0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801cda0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cda2:	428b      	cmp	r3, r1
 801cda4:	d102      	bne.n	801cdac <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801cda6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801cda8:	4293      	cmp	r3, r2
 801cdaa:	d003      	beq.n	801cdb4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801cdac:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801cdb0:	f7ff bed2 	b.w	801cb58 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801cdb4:	4770      	bx	lr

0801cdb6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801cdb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801cdb8:	428b      	cmp	r3, r1
 801cdba:	d102      	bne.n	801cdc2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801cdbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d003      	beq.n	801cdca <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801cdc2:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801cdc6:	f7ff bec7 	b.w	801cb58 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801cdca:	4770      	bx	lr

0801cdcc <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801cdcc:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801cdd0:	f7ff bec2 	b.w	801cb58 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801cdd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801cdd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cdd8:	b0b3      	sub	sp, #204	; 0xcc
 801cdda:	4604      	mov	r4, r0
 801cddc:	460a      	mov	r2, r1
 801cdde:	4601      	mov	r1, r0
 801cde0:	a804      	add	r0, sp, #16
 801cde2:	ad32      	add	r5, sp, #200	; 0xc8
 801cde4:	f00c fb32 	bl	802944c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801cde8:	2300      	movs	r3, #0
 801cdea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801cdec:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801cdf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cdf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cdf4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801cdf6:	1ac0      	subs	r0, r0, r3
 801cdf8:	eba1 0102 	sub.w	r1, r1, r2
 801cdfc:	d43c      	bmi.n	801ce78 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801cdfe:	2900      	cmp	r1, #0
 801ce00:	462a      	mov	r2, r5
 801ce02:	db33      	blt.n	801ce6c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801ce04:	f7ff fe58 	bl	801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ce08:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801ce0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801ce0e:	a804      	add	r0, sp, #16
 801ce10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ce12:	f00c fce4 	bl	80297de <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801ce16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ce18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801ce1a:	a804      	add	r0, sp, #16
 801ce1c:	f00c fc6e 	bl	80296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ce20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ce24:	2b01      	cmp	r3, #1
 801ce26:	d137      	bne.n	801ce98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801ce28:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801ce2a:	2eb3      	cmp	r6, #179	; 0xb3
 801ce2c:	dc34      	bgt.n	801ce98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801ce2e:	eba7 0906 	sub.w	r9, r7, r6
 801ce32:	4648      	mov	r0, r9
 801ce34:	f7ff fde8 	bl	801ca08 <_ZN8touchgfx7CWRUtil4sineEi>
 801ce38:	a902      	add	r1, sp, #8
 801ce3a:	9002      	str	r0, [sp, #8]
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	f7ff fdd7 	bl	801c9f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ce42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ce44:	eb00 0801 	add.w	r8, r0, r1
 801ce48:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801ce4c:	f7ff fddc 	bl	801ca08 <_ZN8touchgfx7CWRUtil4sineEi>
 801ce50:	a903      	add	r1, sp, #12
 801ce52:	9003      	str	r0, [sp, #12]
 801ce54:	4628      	mov	r0, r5
 801ce56:	f7ff fdcb 	bl	801c9f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ce5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801ce5c:	4641      	mov	r1, r8
 801ce5e:	1a12      	subs	r2, r2, r0
 801ce60:	a804      	add	r0, sp, #16
 801ce62:	f00c fc4b 	bl	80296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ce66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ce68:	441e      	add	r6, r3
 801ce6a:	e7de      	b.n	801ce2a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801ce6c:	4249      	negs	r1, r1
 801ce6e:	f7ff fe23 	bl	801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ce72:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801ce76:	e7c9      	b.n	801ce0c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ce78:	2900      	cmp	r1, #0
 801ce7a:	f1c0 0000 	rsb	r0, r0, #0
 801ce7e:	462a      	mov	r2, r5
 801ce80:	db04      	blt.n	801ce8c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801ce82:	f7ff fe19 	bl	801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ce86:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801ce8a:	e7bf      	b.n	801ce0c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ce8c:	4249      	negs	r1, r1
 801ce8e:	f7ff fe13 	bl	801cab8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ce92:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801ce96:	e7b9      	b.n	801ce0c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ce98:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801ce9a:	a804      	add	r0, sp, #16
 801ce9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801ce9e:	f00c fc2d 	bl	80296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801cea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cea4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801cea6:	a804      	add	r0, sp, #16
 801cea8:	f00c fc28 	bl	80296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ceac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ceb0:	2b01      	cmp	r3, #1
 801ceb2:	d123      	bne.n	801cefc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801ceb4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801ceb6:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801ceba:	2e00      	cmp	r6, #0
 801cebc:	dd1e      	ble.n	801cefc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801cebe:	eb06 0907 	add.w	r9, r6, r7
 801cec2:	4648      	mov	r0, r9
 801cec4:	f7ff fda0 	bl	801ca08 <_ZN8touchgfx7CWRUtil4sineEi>
 801cec8:	a902      	add	r1, sp, #8
 801ceca:	9002      	str	r0, [sp, #8]
 801cecc:	4628      	mov	r0, r5
 801cece:	f7ff fd8f 	bl	801c9f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ced2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ced4:	eb00 0801 	add.w	r8, r0, r1
 801ced8:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801cedc:	f7ff fd94 	bl	801ca08 <_ZN8touchgfx7CWRUtil4sineEi>
 801cee0:	a903      	add	r1, sp, #12
 801cee2:	9003      	str	r0, [sp, #12]
 801cee4:	4628      	mov	r0, r5
 801cee6:	f7ff fd83 	bl	801c9f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ceea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ceec:	4641      	mov	r1, r8
 801ceee:	1a12      	subs	r2, r2, r0
 801cef0:	a804      	add	r0, sp, #16
 801cef2:	f00c fc03 	bl	80296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801cef6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801cef8:	1af6      	subs	r6, r6, r3
 801cefa:	e7de      	b.n	801ceba <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801cefc:	a804      	add	r0, sp, #16
 801cefe:	f00c fd72 	bl	80299e6 <_ZN8touchgfx6Canvas6renderEv>
 801cf02:	4604      	mov	r4, r0
 801cf04:	a804      	add	r0, sp, #16
 801cf06:	f00c fdaf 	bl	8029a68 <_ZN8touchgfx6CanvasD1Ev>
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	b033      	add	sp, #204	; 0xcc
 801cf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801cf12 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801cf12:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801cf16:	4770      	bx	lr

0801cf18 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801cf18:	b570      	push	{r4, r5, r6, lr}
 801cf1a:	790b      	ldrb	r3, [r1, #4]
 801cf1c:	4604      	mov	r4, r0
 801cf1e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801cf22:	460e      	mov	r6, r1
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	bf0c      	ite	eq
 801cf28:	2301      	moveq	r3, #1
 801cf2a:	2300      	movne	r3, #0
 801cf2c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801cf30:	d110      	bne.n	801cf54 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801cf32:	b185      	cbz	r5, 801cf56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801cf34:	7933      	ldrb	r3, [r6, #4]
 801cf36:	2b01      	cmp	r3, #1
 801cf38:	d113      	bne.n	801cf62 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cf3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801cf3c:	b188      	cbz	r0, 801cf62 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cf3e:	6803      	ldr	r3, [r0, #0]
 801cf40:	68db      	ldr	r3, [r3, #12]
 801cf42:	4798      	blx	r3
 801cf44:	b168      	cbz	r0, 801cf62 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cf46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801cf48:	4621      	mov	r1, r4
 801cf4a:	6803      	ldr	r3, [r0, #0]
 801cf4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf50:	689b      	ldr	r3, [r3, #8]
 801cf52:	4718      	bx	r3
 801cf54:	b12d      	cbz	r5, 801cf62 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cf56:	6823      	ldr	r3, [r4, #0]
 801cf58:	4620      	mov	r0, r4
 801cf5a:	695b      	ldr	r3, [r3, #20]
 801cf5c:	4798      	blx	r3
 801cf5e:	2d00      	cmp	r5, #0
 801cf60:	d1e8      	bne.n	801cf34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801cf62:	bd70      	pop	{r4, r5, r6, pc}

0801cf64 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801cf64:	4770      	bx	lr

0801cf66 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801cf66:	6803      	ldr	r3, [r0, #0]
 801cf68:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801cf6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cf6e:	4718      	bx	r3

0801cf70 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801cf70:	b510      	push	{r4, lr}
 801cf72:	4604      	mov	r4, r0
 801cf74:	212c      	movs	r1, #44	; 0x2c
 801cf76:	f00d fe0a 	bl	802ab8e <_ZdlPvj>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	bd10      	pop	{r4, pc}

0801cf7e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801cf7e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801cf82:	2bff      	cmp	r3, #255	; 0xff
 801cf84:	b510      	push	{r4, lr}
 801cf86:	d104      	bne.n	801cf92 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801cf88:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801cf8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf8e:	429a      	cmp	r2, r3
 801cf90:	d105      	bne.n	801cf9e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801cf92:	2300      	movs	r3, #0
 801cf94:	8003      	strh	r3, [r0, #0]
 801cf96:	8043      	strh	r3, [r0, #2]
 801cf98:	8083      	strh	r3, [r0, #4]
 801cf9a:	80c3      	strh	r3, [r0, #6]
 801cf9c:	bd10      	pop	{r4, pc}
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801cfa4:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801cfa8:	8003      	strh	r3, [r0, #0]
 801cfaa:	8043      	strh	r3, [r0, #2]
 801cfac:	8084      	strh	r4, [r0, #4]
 801cfae:	80c2      	strh	r2, [r0, #6]
 801cfb0:	e7f4      	b.n	801cf9c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801cfb2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801cfb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cfb6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801cfba:	b087      	sub	sp, #28
 801cfbc:	4604      	mov	r4, r0
 801cfbe:	4689      	mov	r9, r1
 801cfc0:	b363      	cbz	r3, 801d01c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801cfc2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801cfc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfc8:	429a      	cmp	r2, r3
 801cfca:	d027      	beq.n	801d01c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801cfcc:	ad06      	add	r5, sp, #24
 801cfce:	2700      	movs	r7, #0
 801cfd0:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	f004 f8b3 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cfda:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801cfde:	a904      	add	r1, sp, #16
 801cfe0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cfe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cfe8:	4620      	mov	r0, r4
 801cfea:	6823      	ldr	r3, [r4, #0]
 801cfec:	9704      	str	r7, [sp, #16]
 801cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cff0:	4798      	blx	r3
 801cff2:	f7f3 ff0d 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801cff6:	6803      	ldr	r3, [r0, #0]
 801cff8:	4606      	mov	r6, r0
 801cffa:	4628      	mov	r0, r5
 801cffc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801d000:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d002:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d006:	f004 f9a3 	bl	8021350 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d00a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d00e:	4601      	mov	r1, r0
 801d010:	9701      	str	r7, [sp, #4]
 801d012:	aa04      	add	r2, sp, #16
 801d014:	9300      	str	r3, [sp, #0]
 801d016:	4630      	mov	r0, r6
 801d018:	464b      	mov	r3, r9
 801d01a:	47c0      	blx	r8
 801d01c:	b007      	add	sp, #28
 801d01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d022 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801d022:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d024:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d028:	460d      	mov	r5, r1
 801d02a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d02e:	2100      	movs	r1, #0
 801d030:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d034:	4604      	mov	r4, r0
 801d036:	6803      	ldr	r3, [r0, #0]
 801d038:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d03c:	6a1b      	ldr	r3, [r3, #32]
 801d03e:	9100      	str	r1, [sp, #0]
 801d040:	4669      	mov	r1, sp
 801d042:	4798      	blx	r3
 801d044:	4621      	mov	r1, r4
 801d046:	a802      	add	r0, sp, #8
 801d048:	f002 fa73 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d04c:	f7f3 fee0 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801d050:	6803      	ldr	r3, [r0, #0]
 801d052:	aa02      	add	r2, sp, #8
 801d054:	4669      	mov	r1, sp
 801d056:	699e      	ldr	r6, [r3, #24]
 801d058:	462b      	mov	r3, r5
 801d05a:	47b0      	blx	r6
 801d05c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d060:	2800      	cmp	r0, #0
 801d062:	bf08      	it	eq
 801d064:	461d      	moveq	r5, r3
 801d066:	84e5      	strh	r5, [r4, #38]	; 0x26
 801d068:	b004      	add	sp, #16
 801d06a:	bd70      	pop	{r4, r5, r6, pc}

0801d06c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801d06c:	2200      	movs	r2, #0
 801d06e:	8082      	strh	r2, [r0, #4]
 801d070:	80c2      	strh	r2, [r0, #6]
 801d072:	8102      	strh	r2, [r0, #8]
 801d074:	8142      	strh	r2, [r0, #10]
 801d076:	8182      	strh	r2, [r0, #12]
 801d078:	81c2      	strh	r2, [r0, #14]
 801d07a:	8202      	strh	r2, [r0, #16]
 801d07c:	8242      	strh	r2, [r0, #18]
 801d07e:	61c2      	str	r2, [r0, #28]
 801d080:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801d084:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d088:	2201      	movs	r2, #1
 801d08a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801d08e:	4a04      	ldr	r2, [pc, #16]	; (801d0a0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801d090:	6002      	str	r2, [r0, #0]
 801d092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d096:	84c2      	strh	r2, [r0, #38]	; 0x26
 801d098:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d09c:	4770      	bx	lr
 801d09e:	bf00      	nop
 801d0a0:	0802ebd8 	.word	0x0802ebd8

0801d0a4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801d0a4:	b570      	push	{r4, r5, r6, lr}
 801d0a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d0aa:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d0ac:	4604      	mov	r4, r0
 801d0ae:	429a      	cmp	r2, r3
 801d0b0:	d00c      	beq.n	801d0cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801d0b2:	f850 3b26 	ldr.w	r3, [r0], #38
 801d0b6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801d0b8:	f7f5 fe54 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801d0bc:	2300      	movs	r3, #0
 801d0be:	4601      	mov	r1, r0
 801d0c0:	46ac      	mov	ip, r5
 801d0c2:	4620      	mov	r0, r4
 801d0c4:	461a      	mov	r2, r3
 801d0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0ca:	4760      	bx	ip
 801d0cc:	2000      	movs	r0, #0
 801d0ce:	bd70      	pop	{r4, r5, r6, pc}

0801d0d0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801d0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d0d6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d016      	beq.n	801d10a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801d0dc:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	f7f3 fa6d 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d0e6:	6803      	ldr	r3, [r0, #0]
 801d0e8:	4605      	mov	r5, r0
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	69de      	ldr	r6, [r3, #28]
 801d0ee:	f7f3 fa83 	bl	80105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d0f2:	4607      	mov	r7, r0
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	f7f5 fe35 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	4602      	mov	r2, r0
 801d0fe:	4639      	mov	r1, r7
 801d100:	9300      	str	r3, [sp, #0]
 801d102:	4628      	mov	r0, r5
 801d104:	47b0      	blx	r6
 801d106:	b003      	add	sp, #12
 801d108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d10a:	2000      	movs	r0, #0
 801d10c:	e7fb      	b.n	801d106 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801d10e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801d10e:	b40e      	push	{r1, r2, r3}
 801d110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d118:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d11a:	b09b      	sub	sp, #108	; 0x6c
 801d11c:	4604      	mov	r4, r0
 801d11e:	429a      	cmp	r2, r3
 801d120:	d03f      	beq.n	801d1a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801d122:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801d126:	ab22      	add	r3, sp, #136	; 0x88
 801d128:	4638      	mov	r0, r7
 801d12a:	9303      	str	r3, [sp, #12]
 801d12c:	f7f3 fa48 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d130:	6803      	ldr	r3, [r0, #0]
 801d132:	4680      	mov	r8, r0
 801d134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d136:	4798      	blx	r3
 801d138:	4606      	mov	r6, r0
 801d13a:	b205      	sxth	r5, r0
 801d13c:	a804      	add	r0, sp, #16
 801d13e:	f003 f8d3 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801d142:	f8d8 3000 	ldr.w	r3, [r8]
 801d146:	4640      	mov	r0, r8
 801d148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d14a:	4798      	blx	r3
 801d14c:	9a03      	ldr	r2, [sp, #12]
 801d14e:	4603      	mov	r3, r0
 801d150:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d152:	a804      	add	r0, sp, #16
 801d154:	f003 f8e5 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d158:	4638      	mov	r0, r7
 801d15a:	f7f3 fa4d 	bl	80105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d15e:	4680      	mov	r8, r0
 801d160:	4638      	mov	r0, r7
 801d162:	f7f3 fa2d 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d166:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801d16a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801d16e:	4642      	mov	r2, r8
 801d170:	9300      	str	r3, [sp, #0]
 801d172:	4603      	mov	r3, r0
 801d174:	a804      	add	r0, sp, #16
 801d176:	f001 f930 	bl	801e3da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801d17a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801d17e:	b203      	sxth	r3, r0
 801d180:	18a9      	adds	r1, r5, r2
 801d182:	2900      	cmp	r1, #0
 801d184:	dd0b      	ble.n	801d19e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801d186:	3b01      	subs	r3, #1
 801d188:	fb13 f302 	smulbb	r3, r3, r2
 801d18c:	fb16 3300 	smlabb	r3, r6, r0, r3
 801d190:	b21d      	sxth	r5, r3
 801d192:	4628      	mov	r0, r5
 801d194:	b01b      	add	sp, #108	; 0x6c
 801d196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d19a:	b003      	add	sp, #12
 801d19c:	4770      	bx	lr
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	dcf7      	bgt.n	801d192 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801d1a2:	2500      	movs	r5, #0
 801d1a4:	e7f5      	b.n	801d192 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801d1a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d1b0:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801d1b2:	b08d      	sub	sp, #52	; 0x34
 801d1b4:	4604      	mov	r4, r0
 801d1b6:	429e      	cmp	r6, r3
 801d1b8:	4688      	mov	r8, r1
 801d1ba:	d04b      	beq.n	801d254 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801d1bc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801d1c0:	4628      	mov	r0, r5
 801d1c2:	f7f3 f9fd 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d1c6:	4607      	mov	r7, r0
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d043      	beq.n	801d254 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801d1cc:	4628      	mov	r0, r5
 801d1ce:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801d1d2:	f7f3 fa29 	bl	8010628 <_ZNK8touchgfx9TypedText11assertValidEv>
 801d1d6:	4b21      	ldr	r3, [pc, #132]	; (801d25c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801d1d8:	4628      	mov	r0, r5
 801d1da:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801d1e4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801d1e8:	785e      	ldrb	r6, [r3, #1]
 801d1ea:	f7f3 fa05 	bl	80105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d1ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d1f0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801d1f4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801d1f8:	9309      	str	r3, [sp, #36]	; 0x24
 801d1fa:	4b19      	ldr	r3, [pc, #100]	; (801d260 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801d1fc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801d206:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d20a:	9707      	str	r7, [sp, #28]
 801d20c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801d210:	f88d 6020 	strb.w	r6, [sp, #32]
 801d214:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801d218:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801d21c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d220:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801d224:	b10a      	cbz	r2, 801d22a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801d226:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801d228:	b906      	cbnz	r6, 801d22c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801d22a:	689e      	ldr	r6, [r3, #8]
 801d22c:	af05      	add	r7, sp, #20
 801d22e:	4621      	mov	r1, r4
 801d230:	4638      	mov	r0, r7
 801d232:	f002 f97e 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d236:	4628      	mov	r0, r5
 801d238:	f7f5 fd94 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801d23c:	2300      	movs	r3, #0
 801d23e:	9001      	str	r0, [sp, #4]
 801d240:	4630      	mov	r0, r6
 801d242:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d246:	ab07      	add	r3, sp, #28
 801d248:	9300      	str	r3, [sp, #0]
 801d24a:	4643      	mov	r3, r8
 801d24c:	e897 0006 	ldmia.w	r7, {r1, r2}
 801d250:	f000 fe90 	bl	801df74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d254:	b00d      	add	sp, #52	; 0x34
 801d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d25a:	bf00      	nop
 801d25c:	2000c080 	.word	0x2000c080
 801d260:	2000bff0 	.word	0x2000bff0

0801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801d264:	b570      	push	{r4, r5, r6, lr}
 801d266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d26a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d26c:	4604      	mov	r4, r0
 801d26e:	429a      	cmp	r2, r3
 801d270:	d021      	beq.n	801d2b6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801d272:	6803      	ldr	r3, [r0, #0]
 801d274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d276:	4798      	blx	r3
 801d278:	6823      	ldr	r3, [r4, #0]
 801d27a:	4605      	mov	r5, r0
 801d27c:	4620      	mov	r0, r4
 801d27e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d280:	4798      	blx	r3
 801d282:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801d286:	4606      	mov	r6, r0
 801d288:	b22d      	sxth	r5, r5
 801d28a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801d28e:	6823      	ldr	r3, [r4, #0]
 801d290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d292:	d109      	bne.n	801d2a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801d294:	4629      	mov	r1, r5
 801d296:	4620      	mov	r0, r4
 801d298:	4798      	blx	r3
 801d29a:	6823      	ldr	r3, [r4, #0]
 801d29c:	4631      	mov	r1, r6
 801d29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d2a6:	4718      	bx	r3
 801d2a8:	4601      	mov	r1, r0
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	4798      	blx	r3
 801d2ae:	6823      	ldr	r3, [r4, #0]
 801d2b0:	4629      	mov	r1, r5
 801d2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d2b4:	e7f4      	b.n	801d2a0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801d2b6:	bd70      	pop	{r4, r5, r6, pc}

0801d2b8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801d2b8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d2bc:	84c1      	strh	r1, [r0, #38]	; 0x26
 801d2be:	b922      	cbnz	r2, 801d2ca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801d2c0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d2c4:	b90b      	cbnz	r3, 801d2ca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801d2c6:	f7ff bfcd 	b.w	801d264 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801d2ca:	4770      	bx	lr

0801d2cc <_ZNK8touchgfx3Box12getSolidRectEv>:
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	8003      	strh	r3, [r0, #0]
 801d2d0:	8043      	strh	r3, [r0, #2]
 801d2d2:	8083      	strh	r3, [r0, #4]
 801d2d4:	80c3      	strh	r3, [r0, #6]
 801d2d6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d2da:	b91b      	cbnz	r3, 801d2e4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801d2dc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801d2e0:	2bff      	cmp	r3, #255	; 0xff
 801d2e2:	d103      	bne.n	801d2ec <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801d2e4:	890b      	ldrh	r3, [r1, #8]
 801d2e6:	8083      	strh	r3, [r0, #4]
 801d2e8:	894b      	ldrh	r3, [r1, #10]
 801d2ea:	80c3      	strh	r3, [r0, #6]
 801d2ec:	4770      	bx	lr
	...

0801d2f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801d2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2f2:	4604      	mov	r4, r0
 801d2f4:	466b      	mov	r3, sp
 801d2f6:	6808      	ldr	r0, [r1, #0]
 801d2f8:	6849      	ldr	r1, [r1, #4]
 801d2fa:	c303      	stmia	r3!, {r0, r1}
 801d2fc:	6823      	ldr	r3, [r4, #0]
 801d2fe:	4669      	mov	r1, sp
 801d300:	4620      	mov	r0, r4
 801d302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d304:	4798      	blx	r3
 801d306:	4b08      	ldr	r3, [pc, #32]	; (801d328 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d30e:	b10a      	cbz	r2, 801d314 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801d310:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d312:	b900      	cbnz	r0, 801d316 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801d314:	6898      	ldr	r0, [r3, #8]
 801d316:	6803      	ldr	r3, [r0, #0]
 801d318:	4669      	mov	r1, sp
 801d31a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d31c:	69dd      	ldr	r5, [r3, #28]
 801d31e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801d322:	47a8      	blx	r5
 801d324:	b003      	add	sp, #12
 801d326:	bd30      	pop	{r4, r5, pc}
 801d328:	2000bff0 	.word	0x2000bff0

0801d32c <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801d32c:	b570      	push	{r4, r5, r6, lr}
 801d32e:	6803      	ldr	r3, [r0, #0]
 801d330:	4604      	mov	r4, r0
 801d332:	4615      	mov	r5, r2
 801d334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d336:	4798      	blx	r3
 801d338:	6823      	ldr	r3, [r4, #0]
 801d33a:	4629      	mov	r1, r5
 801d33c:	4620      	mov	r0, r4
 801d33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d344:	4718      	bx	r3

0801d346 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801d346:	b570      	push	{r4, r5, r6, lr}
 801d348:	6803      	ldr	r3, [r0, #0]
 801d34a:	4604      	mov	r4, r0
 801d34c:	460e      	mov	r6, r1
 801d34e:	4615      	mov	r5, r2
 801d350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d352:	4798      	blx	r3
 801d354:	8030      	strh	r0, [r6, #0]
 801d356:	6823      	ldr	r3, [r4, #0]
 801d358:	4620      	mov	r0, r4
 801d35a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d35c:	4798      	blx	r3
 801d35e:	8028      	strh	r0, [r5, #0]
 801d360:	bd70      	pop	{r4, r5, r6, pc}

0801d362 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801d362:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801d366:	4770      	bx	lr

0801d368 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801d368:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801d36c:	4770      	bx	lr

0801d36e <_ZN8touchgfx10TiledImageD1Ev>:
 801d36e:	4770      	bx	lr

0801d370 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801d370:	b510      	push	{r4, lr}
 801d372:	4604      	mov	r4, r0
 801d374:	f000 fb5a 	bl	801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801d378:	6823      	ldr	r3, [r4, #0]
 801d37a:	4620      	mov	r0, r4
 801d37c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801d380:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801d384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d38a:	4718      	bx	r3

0801d38c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d38e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801d392:	4605      	mov	r5, r0
 801d394:	8541      	strh	r1, [r0, #42]	; 0x2a
 801d396:	4630      	mov	r0, r6
 801d398:	f003 fed2 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d39c:	b1a0      	cbz	r0, 801d3c8 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801d39e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801d3a2:	4630      	mov	r0, r6
 801d3a4:	f003 fecc 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d3a8:	fb97 f4f0 	sdiv	r4, r7, r0
 801d3ac:	fb04 7410 	mls	r4, r4, r0, r7
 801d3b0:	4630      	mov	r0, r6
 801d3b2:	f003 fec5 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d3b6:	4404      	add	r4, r0
 801d3b8:	4630      	mov	r0, r6
 801d3ba:	f003 fec1 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d3be:	fb94 f3f0 	sdiv	r3, r4, r0
 801d3c2:	fb03 4010 	mls	r0, r3, r0, r4
 801d3c6:	8568      	strh	r0, [r5, #42]	; 0x2a
 801d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d3ca <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801d3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3cc:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801d3d0:	4605      	mov	r5, r0
 801d3d2:	8581      	strh	r1, [r0, #44]	; 0x2c
 801d3d4:	4630      	mov	r0, r6
 801d3d6:	f003 feed 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d3da:	b1a0      	cbz	r0, 801d406 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801d3dc:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801d3e0:	4630      	mov	r0, r6
 801d3e2:	f003 fee7 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d3e6:	fb97 f4f0 	sdiv	r4, r7, r0
 801d3ea:	fb04 7410 	mls	r4, r4, r0, r7
 801d3ee:	4630      	mov	r0, r6
 801d3f0:	f003 fee0 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d3f4:	4404      	add	r4, r0
 801d3f6:	4630      	mov	r0, r6
 801d3f8:	f003 fedc 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d3fc:	fb94 f3f0 	sdiv	r3, r4, r0
 801d400:	fb03 4010 	mls	r0, r3, r0, r4
 801d404:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801d406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d408 <_ZN8touchgfx10TiledImageD0Ev>:
 801d408:	b510      	push	{r4, lr}
 801d40a:	4604      	mov	r4, r0
 801d40c:	2130      	movs	r1, #48	; 0x30
 801d40e:	f00d fbbe 	bl	802ab8e <_ZdlPvj>
 801d412:	4620      	mov	r0, r4
 801d414:	bd10      	pop	{r4, pc}
	...

0801d418 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d41c:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801d420:	b093      	sub	sp, #76	; 0x4c
 801d422:	4607      	mov	r7, r0
 801d424:	460e      	mov	r6, r1
 801d426:	4658      	mov	r0, fp
 801d428:	f003 fe8a 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d42c:	4605      	mov	r5, r0
 801d42e:	4658      	mov	r0, fp
 801d430:	f003 fec0 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d434:	4680      	mov	r8, r0
 801d436:	2d00      	cmp	r5, #0
 801d438:	f000 80c5 	beq.w	801d5c6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d43c:	2800      	cmp	r0, #0
 801d43e:	f000 80c2 	beq.w	801d5c6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d442:	2300      	movs	r3, #0
 801d444:	a90e      	add	r1, sp, #56	; 0x38
 801d446:	4638      	mov	r0, r7
 801d448:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801d44c:	683b      	ldr	r3, [r7, #0]
 801d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d450:	4798      	blx	r3
 801d452:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801d456:	f9b6 3000 	ldrsh.w	r3, [r6]
 801d45a:	88b1      	ldrh	r1, [r6, #4]
 801d45c:	189c      	adds	r4, r3, r2
 801d45e:	440b      	add	r3, r1
 801d460:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801d464:	fa02 f383 	sxtah	r3, r2, r3
 801d468:	3b01      	subs	r3, #1
 801d46a:	fb93 f3f5 	sdiv	r3, r3, r5
 801d46e:	fb94 f4f5 	sdiv	r4, r4, r5
 801d472:	fb13 f305 	smulbb	r3, r3, r5
 801d476:	fb14 f405 	smulbb	r4, r4, r5
 801d47a:	b21b      	sxth	r3, r3
 801d47c:	1aa4      	subs	r4, r4, r2
 801d47e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d480:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801d484:	b2a4      	uxth	r4, r4
 801d486:	185a      	adds	r2, r3, r1
 801d488:	fb92 f2f8 	sdiv	r2, r2, r8
 801d48c:	fb12 f208 	smulbb	r2, r2, r8
 801d490:	1a52      	subs	r2, r2, r1
 801d492:	b212      	sxth	r2, r2
 801d494:	920c      	str	r2, [sp, #48]	; 0x30
 801d496:	88f2      	ldrh	r2, [r6, #6]
 801d498:	4413      	add	r3, r2
 801d49a:	fa01 f383 	sxtah	r3, r1, r3
 801d49e:	3b01      	subs	r3, #1
 801d4a0:	fb93 f3f8 	sdiv	r3, r3, r8
 801d4a4:	fb13 f308 	smulbb	r3, r3, r8
 801d4a8:	b21b      	sxth	r3, r3
 801d4aa:	930d      	str	r3, [sp, #52]	; 0x34
 801d4ac:	1963      	adds	r3, r4, r5
 801d4ae:	fa1f fa83 	uxth.w	sl, r3
 801d4b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4b4:	b223      	sxth	r3, r4
 801d4b6:	4293      	cmp	r3, r2
 801d4b8:	9305      	str	r3, [sp, #20]
 801d4ba:	f300 8084 	bgt.w	801d5c6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d4be:	fa0f f38a 	sxth.w	r3, sl
 801d4c2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d4c6:	9309      	str	r3, [sp, #36]	; 0x24
 801d4c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4ca:	4599      	cmp	r9, r3
 801d4cc:	dd04      	ble.n	801d4d8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801d4ce:	442c      	add	r4, r5
 801d4d0:	eb05 030a 	add.w	r3, r5, sl
 801d4d4:	b2a4      	uxth	r4, r4
 801d4d6:	e7ea      	b.n	801d4ae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801d4d8:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d4dc:	88b2      	ldrh	r2, [r6, #4]
 801d4de:	4462      	add	r2, ip
 801d4e0:	b292      	uxth	r2, r2
 801d4e2:	b213      	sxth	r3, r2
 801d4e4:	9308      	str	r3, [sp, #32]
 801d4e6:	fa1f f389 	uxth.w	r3, r9
 801d4ea:	eb08 0103 	add.w	r1, r8, r3
 801d4ee:	9307      	str	r3, [sp, #28]
 801d4f0:	b289      	uxth	r1, r1
 801d4f2:	b208      	sxth	r0, r1
 801d4f4:	9006      	str	r0, [sp, #24]
 801d4f6:	9805      	ldr	r0, [sp, #20]
 801d4f8:	4603      	mov	r3, r0
 801d4fa:	9808      	ldr	r0, [sp, #32]
 801d4fc:	4283      	cmp	r3, r0
 801d4fe:	da5e      	bge.n	801d5be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d500:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d502:	4584      	cmp	ip, r0
 801d504:	da5b      	bge.n	801d5be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d506:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801d50a:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801d50e:	4486      	add	lr, r0
 801d510:	fa1f fe8e 	uxth.w	lr, lr
 801d514:	fa0f f38e 	sxth.w	r3, lr
 801d518:	4599      	cmp	r9, r3
 801d51a:	930a      	str	r3, [sp, #40]	; 0x28
 801d51c:	da4f      	bge.n	801d5be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d51e:	9b06      	ldr	r3, [sp, #24]
 801d520:	4298      	cmp	r0, r3
 801d522:	da4c      	bge.n	801d5be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d524:	9b05      	ldr	r3, [sp, #20]
 801d526:	459c      	cmp	ip, r3
 801d528:	bfb8      	it	lt
 801d52a:	469c      	movlt	ip, r3
 801d52c:	4548      	cmp	r0, r9
 801d52e:	9b08      	ldr	r3, [sp, #32]
 801d530:	bfb8      	it	lt
 801d532:	4648      	movlt	r0, r9
 801d534:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801d538:	4699      	mov	r9, r3
 801d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d53c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801d540:	4599      	cmp	r9, r3
 801d542:	bfc8      	it	gt
 801d544:	4652      	movgt	r2, sl
 801d546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d548:	eba2 020c 	sub.w	r2, r2, ip
 801d54c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801d550:	9a06      	ldr	r2, [sp, #24]
 801d552:	4293      	cmp	r3, r2
 801d554:	bfd8      	it	le
 801d556:	4671      	movle	r1, lr
 801d558:	1a09      	subs	r1, r1, r0
 801d55a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801d55e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d562:	9b07      	ldr	r3, [sp, #28]
 801d564:	1b12      	subs	r2, r2, r4
 801d566:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d56a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d56e:	1ad2      	subs	r2, r2, r3
 801d570:	4b16      	ldr	r3, [pc, #88]	; (801d5cc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801d572:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801d576:	681a      	ldr	r2, [r3, #0]
 801d578:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801d57c:	b109      	cbz	r1, 801d582 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801d57e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801d580:	b900      	cbnz	r0, 801d584 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801d582:	6890      	ldr	r0, [r2, #8]
 801d584:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d588:	f04f 0c01 	mov.w	ip, #1
 801d58c:	9b07      	ldr	r3, [sp, #28]
 801d58e:	6801      	ldr	r1, [r0, #0]
 801d590:	4413      	add	r3, r2
 801d592:	f8cd c008 	str.w	ip, [sp, #8]
 801d596:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801d59a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801d59e:	b21b      	sxth	r3, r3
 801d5a0:	4422      	add	r2, r4
 801d5a2:	f8cd c004 	str.w	ip, [sp, #4]
 801d5a6:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801d5aa:	b212      	sxth	r2, r2
 801d5ac:	f8cd c000 	str.w	ip, [sp]
 801d5b0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801d5b4:	4659      	mov	r1, fp
 801d5b6:	47c8      	blx	r9
 801d5b8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d5bc:	e784      	b.n	801d4c8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801d5be:	2300      	movs	r3, #0
 801d5c0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801d5c4:	e7cb      	b.n	801d55e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801d5c6:	b013      	add	sp, #76	; 0x4c
 801d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5cc:	2000bff0 	.word	0x2000bff0

0801d5d0 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801d5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d5d8:	4606      	mov	r6, r0
 801d5da:	4689      	mov	r9, r1
 801d5dc:	2bff      	cmp	r3, #255	; 0xff
 801d5de:	d008      	beq.n	801d5f2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801d5e0:	2300      	movs	r3, #0
 801d5e2:	8003      	strh	r3, [r0, #0]
 801d5e4:	8043      	strh	r3, [r0, #2]
 801d5e6:	8083      	strh	r3, [r0, #4]
 801d5e8:	4630      	mov	r0, r6
 801d5ea:	80f3      	strh	r3, [r6, #6]
 801d5ec:	b003      	add	sp, #12
 801d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5f2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801d5f6:	4668      	mov	r0, sp
 801d5f8:	4659      	mov	r1, fp
 801d5fa:	f003 fe15 	bl	8021228 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d5fe:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801d602:	4658      	mov	r0, fp
 801d604:	f9bd 7000 	ldrsh.w	r7, [sp]
 801d608:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801d60c:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801d610:	f003 fd96 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d614:	4284      	cmp	r4, r0
 801d616:	d10d      	bne.n	801d634 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801d618:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801d61c:	4658      	mov	r0, fp
 801d61e:	f003 fdc9 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d622:	4580      	cmp	r8, r0
 801d624:	d12a      	bne.n	801d67c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801d626:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801d62a:	8037      	strh	r7, [r6, #0]
 801d62c:	f8a6 a002 	strh.w	sl, [r6, #2]
 801d630:	80b5      	strh	r5, [r6, #4]
 801d632:	e7d9      	b.n	801d5e8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801d634:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801d638:	4658      	mov	r0, fp
 801d63a:	f003 fd81 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d63e:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801d642:	1b7f      	subs	r7, r7, r5
 801d644:	b2a3      	uxth	r3, r4
 801d646:	b2bd      	uxth	r5, r7
 801d648:	b22f      	sxth	r7, r5
 801d64a:	4428      	add	r0, r5
 801d64c:	2f00      	cmp	r7, #0
 801d64e:	b280      	uxth	r0, r0
 801d650:	bfb8      	it	lt
 801d652:	18ed      	addlt	r5, r5, r3
 801d654:	4403      	add	r3, r0
 801d656:	bfac      	ite	ge
 801d658:	4625      	movge	r5, r4
 801d65a:	2700      	movlt	r7, #0
 801d65c:	b29b      	uxth	r3, r3
 801d65e:	bfb8      	it	lt
 801d660:	b22d      	sxthlt	r5, r5
 801d662:	b219      	sxth	r1, r3
 801d664:	bfb8      	it	lt
 801d666:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801d66a:	4291      	cmp	r1, r2
 801d66c:	bfc4      	itt	gt
 801d66e:	1a9c      	subgt	r4, r3, r2
 801d670:	b224      	sxthgt	r4, r4
 801d672:	42ac      	cmp	r4, r5
 801d674:	bfc4      	itt	gt
 801d676:	b207      	sxthgt	r7, r0
 801d678:	4625      	movgt	r5, r4
 801d67a:	e7cf      	b.n	801d61c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801d67c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801d680:	4658      	mov	r0, fp
 801d682:	f003 fd97 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d686:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801d68a:	ebaa 0404 	sub.w	r4, sl, r4
 801d68e:	fa1f f288 	uxth.w	r2, r8
 801d692:	b2a4      	uxth	r4, r4
 801d694:	fa0f fa84 	sxth.w	sl, r4
 801d698:	4420      	add	r0, r4
 801d69a:	f1ba 0f00 	cmp.w	sl, #0
 801d69e:	b280      	uxth	r0, r0
 801d6a0:	bfb8      	it	lt
 801d6a2:	18a3      	addlt	r3, r4, r2
 801d6a4:	4402      	add	r2, r0
 801d6a6:	bfac      	ite	ge
 801d6a8:	4643      	movge	r3, r8
 801d6aa:	f04f 0a00 	movlt.w	sl, #0
 801d6ae:	b292      	uxth	r2, r2
 801d6b0:	bfb8      	it	lt
 801d6b2:	b21b      	sxthlt	r3, r3
 801d6b4:	b214      	sxth	r4, r2
 801d6b6:	bfb8      	it	lt
 801d6b8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d6bc:	428c      	cmp	r4, r1
 801d6be:	bfc4      	itt	gt
 801d6c0:	eba2 0801 	subgt.w	r8, r2, r1
 801d6c4:	fa0f f888 	sxthgt.w	r8, r8
 801d6c8:	4543      	cmp	r3, r8
 801d6ca:	bfbc      	itt	lt
 801d6cc:	fa0f fa80 	sxthlt.w	sl, r0
 801d6d0:	4643      	movlt	r3, r8
 801d6d2:	e7aa      	b.n	801d62a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801d6d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801d6d4:	b538      	push	{r3, r4, r5, lr}
 801d6d6:	880b      	ldrh	r3, [r1, #0]
 801d6d8:	4605      	mov	r5, r0
 801d6da:	4604      	mov	r4, r0
 801d6dc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d6de:	8813      	ldrh	r3, [r2, #0]
 801d6e0:	f825 3f30 	strh.w	r3, [r5, #48]!
 801d6e4:	4628      	mov	r0, r5
 801d6e6:	f003 fd2b 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d6ea:	8120      	strh	r0, [r4, #8]
 801d6ec:	4628      	mov	r0, r5
 801d6ee:	f003 fd61 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d6f2:	8160      	strh	r0, [r4, #10]
 801d6f4:	bd38      	pop	{r3, r4, r5, pc}

0801d6f6 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801d6f6:	b510      	push	{r4, lr}
 801d6f8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801d6fc:	4604      	mov	r4, r0
 801d6fe:	2bff      	cmp	r3, #255	; 0xff
 801d700:	d006      	beq.n	801d710 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801d702:	2300      	movs	r3, #0
 801d704:	8003      	strh	r3, [r0, #0]
 801d706:	8043      	strh	r3, [r0, #2]
 801d708:	8083      	strh	r3, [r0, #4]
 801d70a:	80c3      	strh	r3, [r0, #6]
 801d70c:	4620      	mov	r0, r4
 801d70e:	bd10      	pop	{r4, pc}
 801d710:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d714:	b11b      	cbz	r3, 801d71e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801d716:	3130      	adds	r1, #48	; 0x30
 801d718:	f003 fd86 	bl	8021228 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d71c:	e7f6      	b.n	801d70c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801d71e:	312e      	adds	r1, #46	; 0x2e
 801d720:	e7fa      	b.n	801d718 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801d724 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801d724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d728:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d72c:	b08b      	sub	sp, #44	; 0x2c
 801d72e:	4604      	mov	r4, r0
 801d730:	4689      	mov	r9, r1
 801d732:	2b00      	cmp	r3, #0
 801d734:	d043      	beq.n	801d7be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801d736:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801d738:	a805      	add	r0, sp, #20
 801d73a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d73e:	f003 fcff 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d742:	4607      	mov	r7, r0
 801d744:	fa0f f880 	sxth.w	r8, r0
 801d748:	a805      	add	r0, sp, #20
 801d74a:	f003 fd33 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d74e:	f9b9 6000 	ldrsh.w	r6, [r9]
 801d752:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801d756:	2300      	movs	r3, #0
 801d758:	fa0f fc80 	sxth.w	ip, r0
 801d75c:	4432      	add	r2, r6
 801d75e:	9306      	str	r3, [sp, #24]
 801d760:	b292      	uxth	r2, r2
 801d762:	fa0f fe82 	sxth.w	lr, r2
 801d766:	459e      	cmp	lr, r3
 801d768:	dd2b      	ble.n	801d7c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d76a:	45b0      	cmp	r8, r6
 801d76c:	dd29      	ble.n	801d7c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d76e:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801d772:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801d776:	442b      	add	r3, r5
 801d778:	b29b      	uxth	r3, r3
 801d77a:	b219      	sxth	r1, r3
 801d77c:	2900      	cmp	r1, #0
 801d77e:	dd20      	ble.n	801d7c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d780:	45ac      	cmp	ip, r5
 801d782:	dd1e      	ble.n	801d7c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d784:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801d788:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801d78c:	45f0      	cmp	r8, lr
 801d78e:	bfb8      	it	lt
 801d790:	463a      	movlt	r2, r7
 801d792:	458c      	cmp	ip, r1
 801d794:	bfb8      	it	lt
 801d796:	4603      	movlt	r3, r0
 801d798:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d79c:	1b92      	subs	r2, r2, r6
 801d79e:	1b5b      	subs	r3, r3, r5
 801d7a0:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d7a4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d7a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d7ac:	4b1d      	ldr	r3, [pc, #116]	; (801d824 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	b953      	cbnz	r3, 801d7c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801d7b2:	4b1d      	ldr	r3, [pc, #116]	; (801d828 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801d7b4:	21b8      	movs	r1, #184	; 0xb8
 801d7b6:	4a1d      	ldr	r2, [pc, #116]	; (801d82c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801d7b8:	481d      	ldr	r0, [pc, #116]	; (801d830 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801d7ba:	f00d fa13 	bl	802abe4 <__assert_func>
 801d7be:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d7c0:	e7ba      	b.n	801d738 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	9307      	str	r3, [sp, #28]
 801d7c6:	e7f1      	b.n	801d7ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 801d7c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d7cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d7d0:	429a      	cmp	r2, r3
 801d7d2:	d024      	beq.n	801d81e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d7d4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d7d8:	b30b      	cbz	r3, 801d81e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d7da:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801d7de:	b1f3      	cbz	r3, 801d81e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	a908      	add	r1, sp, #32
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d7ea:	6823      	ldr	r3, [r4, #0]
 801d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7ee:	4798      	blx	r3
 801d7f0:	4b10      	ldr	r3, [pc, #64]	; (801d834 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d7f8:	b10a      	cbz	r2, 801d7fe <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801d7fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d7fc:	b900      	cbnz	r0, 801d800 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801d7fe:	6898      	ldr	r0, [r3, #8]
 801d800:	2501      	movs	r5, #1
 801d802:	6801      	ldr	r1, [r0, #0]
 801d804:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d808:	9502      	str	r5, [sp, #8]
 801d80a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801d80e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d812:	9401      	str	r4, [sp, #4]
 801d814:	ac06      	add	r4, sp, #24
 801d816:	9400      	str	r4, [sp, #0]
 801d818:	68cc      	ldr	r4, [r1, #12]
 801d81a:	a905      	add	r1, sp, #20
 801d81c:	47a0      	blx	r4
 801d81e:	b00b      	add	sp, #44	; 0x2c
 801d820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d824:	2000c0b8 	.word	0x2000c0b8
 801d828:	0802dac8 	.word	0x0802dac8
 801d82c:	0802ee18 	.word	0x0802ee18
 801d830:	0802db04 	.word	0x0802db04
 801d834:	2000bff0 	.word	0x2000bff0

0801d838 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801d838:	b570      	push	{r4, r5, r6, lr}
 801d83a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d83e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d840:	4604      	mov	r4, r0
 801d842:	429a      	cmp	r2, r3
 801d844:	d00c      	beq.n	801d860 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801d846:	f850 3b26 	ldr.w	r3, [r0], #38
 801d84a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801d84c:	f7f5 fa8a 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801d850:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d852:	4601      	mov	r1, r0
 801d854:	46ac      	mov	ip, r5
 801d856:	4620      	mov	r0, r4
 801d858:	2300      	movs	r3, #0
 801d85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d85e:	4760      	bx	ip
 801d860:	2000      	movs	r0, #0
 801d862:	bd70      	pop	{r4, r5, r6, pc}

0801d864 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d86c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801d86e:	b08d      	sub	sp, #52	; 0x34
 801d870:	4604      	mov	r4, r0
 801d872:	429e      	cmp	r6, r3
 801d874:	460f      	mov	r7, r1
 801d876:	d048      	beq.n	801d90a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801d878:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801d87c:	4628      	mov	r0, r5
 801d87e:	f7f2 fe9f 	bl	80105c0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d882:	4680      	mov	r8, r0
 801d884:	2800      	cmp	r0, #0
 801d886:	d040      	beq.n	801d90a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801d888:	4628      	mov	r0, r5
 801d88a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801d88e:	f7f2 fecb 	bl	8010628 <_ZNK8touchgfx9TypedText11assertValidEv>
 801d892:	4b1f      	ldr	r3, [pc, #124]	; (801d910 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801d894:	4628      	mov	r0, r5
 801d896:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801d8a0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801d8a4:	785e      	ldrb	r6, [r3, #1]
 801d8a6:	f7f2 fea7 	bl	80105f8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d8aa:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801d8ae:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801d8b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d8b4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801d8b8:	f88d 6020 	strb.w	r6, [sp, #32]
 801d8bc:	ae05      	add	r6, sp, #20
 801d8be:	9309      	str	r3, [sp, #36]	; 0x24
 801d8c0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801d8c4:	f8cd 801c 	str.w	r8, [sp, #28]
 801d8c8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801d8cc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801d8d0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801d8d4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801d8d8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d8dc:	f7f3 fa98 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801d8e0:	4621      	mov	r1, r4
 801d8e2:	4680      	mov	r8, r0
 801d8e4:	4630      	mov	r0, r6
 801d8e6:	f001 fe24 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	f7f5 fa3a 	bl	8012d64 <_ZNK8touchgfx9TypedText7getTextEv>
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	9303      	str	r3, [sp, #12]
 801d8f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d8f6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801d8fa:	ab07      	add	r3, sp, #28
 801d8fc:	4640      	mov	r0, r8
 801d8fe:	9300      	str	r3, [sp, #0]
 801d900:	463b      	mov	r3, r7
 801d902:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d906:	f000 fb35 	bl	801df74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d90a:	b00d      	add	sp, #52	; 0x34
 801d90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d910:	2000c080 	.word	0x2000c080

0801d914 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801d914:	2300      	movs	r3, #0
 801d916:	8083      	strh	r3, [r0, #4]
 801d918:	80c3      	strh	r3, [r0, #6]
 801d91a:	8003      	strh	r3, [r0, #0]
 801d91c:	8043      	strh	r3, [r0, #2]
 801d91e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801d922:	2bff      	cmp	r3, #255	; 0xff
 801d924:	bf01      	itttt	eq
 801d926:	890b      	ldrheq	r3, [r1, #8]
 801d928:	8083      	strheq	r3, [r0, #4]
 801d92a:	894b      	ldrheq	r3, [r1, #10]
 801d92c:	80c3      	strheq	r3, [r0, #6]
 801d92e:	4770      	bx	lr

0801d930 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801d930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d934:	4604      	mov	r4, r0
 801d936:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801d93a:	460e      	mov	r6, r1
 801d93c:	b08c      	sub	sp, #48	; 0x30
 801d93e:	8962      	ldrh	r2, [r4, #10]
 801d940:	b218      	sxth	r0, r3
 801d942:	8921      	ldrh	r1, [r4, #8]
 801d944:	005b      	lsls	r3, r3, #1
 801d946:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d94a:	1ac9      	subs	r1, r1, r3
 801d94c:	1ad3      	subs	r3, r2, r3
 801d94e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d952:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d956:	6830      	ldr	r0, [r6, #0]
 801d958:	6871      	ldr	r1, [r6, #4]
 801d95a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d95e:	466b      	mov	r3, sp
 801d960:	c303      	stmia	r3!, {r0, r1}
 801d962:	a904      	add	r1, sp, #16
 801d964:	4668      	mov	r0, sp
 801d966:	f7fd fdbf 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801d96a:	6823      	ldr	r3, [r4, #0]
 801d96c:	4669      	mov	r1, sp
 801d96e:	4620      	mov	r0, r4
 801d970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d972:	4798      	blx	r3
 801d974:	f7f3 fa4c 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801d978:	6803      	ldr	r3, [r0, #0]
 801d97a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d97c:	4669      	mov	r1, sp
 801d97e:	69dd      	ldr	r5, [r3, #28]
 801d980:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801d984:	47a8      	blx	r5
 801d986:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801d98a:	2a00      	cmp	r2, #0
 801d98c:	d04b      	beq.n	801da26 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801d98e:	b211      	sxth	r1, r2
 801d990:	8963      	ldrh	r3, [r4, #10]
 801d992:	b292      	uxth	r2, r2
 801d994:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801d998:	2500      	movs	r5, #0
 801d99a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d99e:	1a9f      	subs	r7, r3, r2
 801d9a0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801d9a4:	1a82      	subs	r2, r0, r2
 801d9a6:	9504      	str	r5, [sp, #16]
 801d9a8:	b21b      	sxth	r3, r3
 801d9aa:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d9ae:	af02      	add	r7, sp, #8
 801d9b0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d9b4:	f8ad 5018 	strh.w	r5, [sp, #24]
 801d9b8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d9bc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d9c0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801d9c4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801d9c8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801d9cc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d9d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d9d4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801d9d8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801d9dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d9e0:	ab04      	add	r3, sp, #16
 801d9e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d9e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d9ea:	e887 0003 	stmia.w	r7, {r0, r1}
 801d9ee:	4631      	mov	r1, r6
 801d9f0:	4638      	mov	r0, r7
 801d9f2:	f7fd fd79 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801d9f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d9fa:	b18b      	cbz	r3, 801da20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801d9fc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801da00:	b173      	cbz	r3, 801da20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801da02:	6823      	ldr	r3, [r4, #0]
 801da04:	4639      	mov	r1, r7
 801da06:	4620      	mov	r0, r4
 801da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da0a:	4798      	blx	r3
 801da0c:	f7f3 fa00 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 801da10:	6803      	ldr	r3, [r0, #0]
 801da12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801da14:	4639      	mov	r1, r7
 801da16:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801da1a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801da1e:	47c0      	blx	r8
 801da20:	3501      	adds	r5, #1
 801da22:	2d04      	cmp	r5, #4
 801da24:	d1dc      	bne.n	801d9e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801da26:	b00c      	add	sp, #48	; 0x30
 801da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801da2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801da2c:	b570      	push	{r4, r5, r6, lr}
 801da2e:	4605      	mov	r5, r0
 801da30:	880b      	ldrh	r3, [r1, #0]
 801da32:	4604      	mov	r4, r0
 801da34:	84c3      	strh	r3, [r0, #38]	; 0x26
 801da36:	f855 3b26 	ldr.w	r3, [r5], #38
 801da3a:	4628      	mov	r0, r5
 801da3c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801da3e:	f003 fb7f 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801da42:	b201      	sxth	r1, r0
 801da44:	4620      	mov	r0, r4
 801da46:	47b0      	blx	r6
 801da48:	6823      	ldr	r3, [r4, #0]
 801da4a:	4628      	mov	r0, r5
 801da4c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801da4e:	f003 fbb1 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801da52:	b201      	sxth	r1, r0
 801da54:	4620      	mov	r0, r4
 801da56:	47b0      	blx	r6
 801da58:	4628      	mov	r0, r5
 801da5a:	f003 fc3f 	bl	80212dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801da5e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801da62:	bd70      	pop	{r4, r5, r6, pc}

0801da64 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801da64:	b510      	push	{r4, lr}
 801da66:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801da6a:	4604      	mov	r4, r0
 801da6c:	2bff      	cmp	r3, #255	; 0xff
 801da6e:	d006      	beq.n	801da7e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801da70:	2300      	movs	r3, #0
 801da72:	8003      	strh	r3, [r0, #0]
 801da74:	8043      	strh	r3, [r0, #2]
 801da76:	8083      	strh	r3, [r0, #4]
 801da78:	80c3      	strh	r3, [r0, #6]
 801da7a:	4620      	mov	r0, r4
 801da7c:	bd10      	pop	{r4, pc}
 801da7e:	3126      	adds	r1, #38	; 0x26
 801da80:	f003 fbd2 	bl	8021228 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801da84:	e7f9      	b.n	801da7a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801da88 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da8c:	4604      	mov	r4, r0
 801da8e:	b088      	sub	sp, #32
 801da90:	2500      	movs	r5, #0
 801da92:	460f      	mov	r7, r1
 801da94:	f854 3b26 	ldr.w	r3, [r4], #38
 801da98:	a904      	add	r1, sp, #16
 801da9a:	4606      	mov	r6, r0
 801da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801daa2:	4798      	blx	r3
 801daa4:	4620      	mov	r0, r4
 801daa6:	f003 fb4b 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801daaa:	4680      	mov	r8, r0
 801daac:	4620      	mov	r0, r4
 801daae:	f003 fb81 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dab2:	9506      	str	r5, [sp, #24]
 801dab4:	ad06      	add	r5, sp, #24
 801dab6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801daba:	4639      	mov	r1, r7
 801dabc:	f8ad 801c 	strh.w	r8, [sp, #28]
 801dac0:	4628      	mov	r0, r5
 801dac2:	f7fd fd11 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801dac6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801daca:	b1c3      	cbz	r3, 801dafe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801dacc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801dad0:	b1ab      	cbz	r3, 801dafe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801dad2:	4b0c      	ldr	r3, [pc, #48]	; (801db04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dada:	b10a      	cbz	r2, 801dae0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801dadc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dade:	b900      	cbnz	r0, 801dae2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801dae0:	6898      	ldr	r0, [r3, #8]
 801dae2:	2701      	movs	r7, #1
 801dae4:	6801      	ldr	r1, [r0, #0]
 801dae6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801daea:	9702      	str	r7, [sp, #8]
 801daec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801daf0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801daf4:	e9cd 5600 	strd	r5, r6, [sp]
 801daf8:	68cd      	ldr	r5, [r1, #12]
 801dafa:	4621      	mov	r1, r4
 801dafc:	47a8      	blx	r5
 801dafe:	b008      	add	sp, #32
 801db00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db04:	2000bff0 	.word	0x2000bff0

0801db08 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801db08:	4b02      	ldr	r3, [pc, #8]	; (801db14 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801db0a:	6018      	str	r0, [r3, #0]
 801db0c:	4b02      	ldr	r3, [pc, #8]	; (801db18 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801db0e:	6019      	str	r1, [r3, #0]
 801db10:	4770      	bx	lr
 801db12:	bf00      	nop
 801db14:	2000bff8 	.word	0x2000bff8
 801db18:	2000c00c 	.word	0x2000c00c

0801db1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801db1c:	b538      	push	{r3, r4, r5, lr}
 801db1e:	4c2b      	ldr	r4, [pc, #172]	; (801dbcc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801db20:	4b2b      	ldr	r3, [pc, #172]	; (801dbd0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801db22:	6821      	ldr	r1, [r4, #0]
 801db24:	681a      	ldr	r2, [r3, #0]
 801db26:	4281      	cmp	r1, r0
 801db28:	4d2a      	ldr	r5, [pc, #168]	; (801dbd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801db2a:	492b      	ldr	r1, [pc, #172]	; (801dbd8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801db2c:	d108      	bne.n	801db40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801db2e:	682b      	ldr	r3, [r5, #0]
 801db30:	4293      	cmp	r3, r2
 801db32:	d105      	bne.n	801db40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801db34:	6808      	ldr	r0, [r1, #0]
 801db36:	280f      	cmp	r0, #15
 801db38:	bf94      	ite	ls
 801db3a:	2000      	movls	r0, #0
 801db3c:	2001      	movhi	r0, #1
 801db3e:	bd38      	pop	{r3, r4, r5, pc}
 801db40:	4b26      	ldr	r3, [pc, #152]	; (801dbdc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801db42:	6020      	str	r0, [r4, #0]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	602a      	str	r2, [r5, #0]
 801db48:	4298      	cmp	r0, r3
 801db4a:	d905      	bls.n	801db58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801db4c:	4b24      	ldr	r3, [pc, #144]	; (801dbe0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801db4e:	2137      	movs	r1, #55	; 0x37
 801db50:	4a24      	ldr	r2, [pc, #144]	; (801dbe4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801db52:	4825      	ldr	r0, [pc, #148]	; (801dbe8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801db54:	f00d f846 	bl	802abe4 <__assert_func>
 801db58:	f010 0403 	ands.w	r4, r0, #3
 801db5c:	bf1f      	itttt	ne
 801db5e:	f1c4 0504 	rsbne	r5, r4, #4
 801db62:	3b04      	subne	r3, #4
 801db64:	1952      	addne	r2, r2, r5
 801db66:	191b      	addne	r3, r3, r4
 801db68:	4d20      	ldr	r5, [pc, #128]	; (801dbec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801db6a:	4402      	add	r2, r0
 801db6c:	1a1b      	subs	r3, r3, r0
 801db6e:	3001      	adds	r0, #1
 801db70:	602a      	str	r2, [r5, #0]
 801db72:	f020 0401 	bic.w	r4, r0, #1
 801db76:	42a3      	cmp	r3, r4
 801db78:	d203      	bcs.n	801db82 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801db7a:	4b19      	ldr	r3, [pc, #100]	; (801dbe0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801db7c:	214a      	movs	r1, #74	; 0x4a
 801db7e:	4a19      	ldr	r2, [pc, #100]	; (801dbe4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801db80:	e7e7      	b.n	801db52 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801db82:	f010 0002 	ands.w	r0, r0, #2
 801db86:	bf1f      	itttt	ne
 801db88:	f1c0 0504 	rsbne	r5, r0, #4
 801db8c:	1952      	addne	r2, r2, r5
 801db8e:	1f05      	subne	r5, r0, #4
 801db90:	195b      	addne	r3, r3, r5
 801db92:	4422      	add	r2, r4
 801db94:	4d16      	ldr	r5, [pc, #88]	; (801dbf0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801db96:	1b1b      	subs	r3, r3, r4
 801db98:	602a      	str	r2, [r5, #0]
 801db9a:	429c      	cmp	r4, r3
 801db9c:	d903      	bls.n	801dba6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801db9e:	4b10      	ldr	r3, [pc, #64]	; (801dbe0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801dba0:	215d      	movs	r1, #93	; 0x5d
 801dba2:	4a10      	ldr	r2, [pc, #64]	; (801dbe4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801dba4:	e7d5      	b.n	801db52 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801dba6:	b120      	cbz	r0, 801dbb2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801dba8:	f1c0 0504 	rsb	r5, r0, #4
 801dbac:	3804      	subs	r0, #4
 801dbae:	442a      	add	r2, r5
 801dbb0:	4403      	add	r3, r0
 801dbb2:	1b1b      	subs	r3, r3, r4
 801dbb4:	4422      	add	r2, r4
 801dbb6:	480f      	ldr	r0, [pc, #60]	; (801dbf4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801dbb8:	2b0f      	cmp	r3, #15
 801dbba:	600b      	str	r3, [r1, #0]
 801dbbc:	6002      	str	r2, [r0, #0]
 801dbbe:	d803      	bhi.n	801dbc8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801dbc0:	4b0d      	ldr	r3, [pc, #52]	; (801dbf8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801dbc2:	2170      	movs	r1, #112	; 0x70
 801dbc4:	4a07      	ldr	r2, [pc, #28]	; (801dbe4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801dbc6:	e7c4      	b.n	801db52 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801dbc8:	2001      	movs	r0, #1
 801dbca:	e7b8      	b.n	801db3e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801dbcc:	2000c000 	.word	0x2000c000
 801dbd0:	2000bff8 	.word	0x2000bff8
 801dbd4:	2000c008 	.word	0x2000c008
 801dbd8:	2000c010 	.word	0x2000c010
 801dbdc:	2000c00c 	.word	0x2000c00c
 801dbe0:	0802ef9c 	.word	0x0802ef9c
 801dbe4:	0802f064 	.word	0x0802f064
 801dbe8:	0802efd5 	.word	0x0802efd5
 801dbec:	2000c014 	.word	0x2000c014
 801dbf0:	2000c004 	.word	0x2000c004
 801dbf4:	2000bffc 	.word	0x2000bffc
 801dbf8:	0802f01f 	.word	0x0802f01f

0801dbfc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801dbfc:	4b04      	ldr	r3, [pc, #16]	; (801dc10 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801dbfe:	6818      	ldr	r0, [r3, #0]
 801dc00:	b120      	cbz	r0, 801dc0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801dc02:	4b04      	ldr	r3, [pc, #16]	; (801dc14 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801dc04:	6818      	ldr	r0, [r3, #0]
 801dc06:	3000      	adds	r0, #0
 801dc08:	bf18      	it	ne
 801dc0a:	2001      	movne	r0, #1
 801dc0c:	4770      	bx	lr
 801dc0e:	bf00      	nop
 801dc10:	2000bff8 	.word	0x2000bff8
 801dc14:	2000c00c 	.word	0x2000c00c

0801dc18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801dc18:	4b01      	ldr	r3, [pc, #4]	; (801dc20 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801dc1a:	6818      	ldr	r0, [r3, #0]
 801dc1c:	4770      	bx	lr
 801dc1e:	bf00      	nop
 801dc20:	2000c000 	.word	0x2000c000

0801dc24 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801dc24:	4b01      	ldr	r3, [pc, #4]	; (801dc2c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801dc26:	6818      	ldr	r0, [r3, #0]
 801dc28:	4770      	bx	lr
 801dc2a:	bf00      	nop
 801dc2c:	2000c008 	.word	0x2000c008

0801dc30 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801dc30:	4b01      	ldr	r3, [pc, #4]	; (801dc38 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801dc32:	6818      	ldr	r0, [r3, #0]
 801dc34:	4770      	bx	lr
 801dc36:	bf00      	nop
 801dc38:	2000c014 	.word	0x2000c014

0801dc3c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801dc3c:	4b01      	ldr	r3, [pc, #4]	; (801dc44 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801dc3e:	6818      	ldr	r0, [r3, #0]
 801dc40:	4770      	bx	lr
 801dc42:	bf00      	nop
 801dc44:	2000c004 	.word	0x2000c004

0801dc48 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801dc48:	4b01      	ldr	r3, [pc, #4]	; (801dc50 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801dc4a:	6818      	ldr	r0, [r3, #0]
 801dc4c:	4770      	bx	lr
 801dc4e:	bf00      	nop
 801dc50:	2000bffc 	.word	0x2000bffc

0801dc54 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801dc54:	4b01      	ldr	r3, [pc, #4]	; (801dc5c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801dc56:	6818      	ldr	r0, [r3, #0]
 801dc58:	4770      	bx	lr
 801dc5a:	bf00      	nop
 801dc5c:	2000c010 	.word	0x2000c010

0801dc60 <_ZN8touchgfx3LCD4initEv>:
 801dc60:	4770      	bx	lr

0801dc62 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801dc62:	2000      	movs	r0, #0
 801dc64:	4770      	bx	lr

0801dc66 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801dc66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc6a:	b091      	sub	sp, #68	; 0x44
 801dc6c:	4699      	mov	r9, r3
 801dc6e:	4617      	mov	r7, r2
 801dc70:	2500      	movs	r5, #0
 801dc72:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801dc76:	4680      	mov	r8, r0
 801dc78:	a80e      	add	r0, sp, #56	; 0x38
 801dc7a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801dc7c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801dc80:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801dc84:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801dc88:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801dc8c:	910d      	str	r1, [sp, #52]	; 0x34
 801dc8e:	950e      	str	r5, [sp, #56]	; 0x38
 801dc90:	f000 fe3a 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dc96:	f8d9 6000 	ldr.w	r6, [r9]
 801dc9a:	6818      	ldr	r0, [r3, #0]
 801dc9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dc9e:	f9b4 b000 	ldrsh.w	fp, [r4]
 801dca2:	1b80      	subs	r0, r0, r6
 801dca4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dca8:	eb02 0c06 	add.w	ip, r2, r6
 801dcac:	ebab 0e0c 	sub.w	lr, fp, ip
 801dcb0:	4570      	cmp	r0, lr
 801dcb2:	f340 80bc 	ble.w	801de2e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801dcb6:	88a1      	ldrh	r1, [r4, #4]
 801dcb8:	4459      	add	r1, fp
 801dcba:	b209      	sxth	r1, r1
 801dcbc:	458c      	cmp	ip, r1
 801dcbe:	f300 80b6 	bgt.w	801de2e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801dcc2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801dcc6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801dcca:	4283      	cmp	r3, r0
 801dccc:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801dcd0:	edd9 6a07 	vldr	s13, [r9, #28]
 801dcd4:	bfa8      	it	ge
 801dcd6:	4603      	movge	r3, r0
 801dcd8:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801dcdc:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801dce0:	45e3      	cmp	fp, ip
 801dce2:	ee07 3a90 	vmov	s15, r3
 801dce6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801dcea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801dcee:	ee25 4a04 	vmul.f32	s8, s10, s8
 801dcf2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801dcf6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801dcfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dcfe:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801dd02:	ee32 1a05 	vadd.f32	s2, s4, s10
 801dd06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801dd0a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801dd0e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801dd12:	ee22 2a07 	vmul.f32	s4, s4, s14
 801dd16:	f340 808d 	ble.w	801de34 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801dd1a:	fb9e f5f3 	sdiv	r5, lr, r3
 801dd1e:	ee07 5a10 	vmov	s14, r5
 801dd22:	2d00      	cmp	r5, #0
 801dd24:	fb03 e415 	mls	r4, r3, r5, lr
 801dd28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd2c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801dd30:	eee7 0a24 	vfma.f32	s1, s14, s9
 801dd34:	eea7 1a05 	vfma.f32	s2, s14, s10
 801dd38:	dd12      	ble.n	801dd60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801dd3a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801dd3e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801dd42:	ee31 2a45 	vsub.f32	s4, s2, s10
 801dd46:	eef5 6a40 	vcmp.f32	s13, #0.0
 801dd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd4e:	bf14      	ite	ne
 801dd50:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801dd54:	eeb0 7a67 	vmoveq.f32	s14, s15
 801dd58:	ee61 1a87 	vmul.f32	s3, s3, s14
 801dd5c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801dd60:	fb05 f703 	mul.w	r7, r5, r3
 801dd64:	1bc0      	subs	r0, r0, r7
 801dd66:	443e      	add	r6, r7
 801dd68:	1997      	adds	r7, r2, r6
 801dd6a:	4407      	add	r7, r0
 801dd6c:	42b9      	cmp	r1, r7
 801dd6e:	bfbc      	itt	lt
 801dd70:	1a88      	sublt	r0, r1, r2
 801dd72:	1b80      	sublt	r0, r0, r6
 801dd74:	2800      	cmp	r0, #0
 801dd76:	dd5a      	ble.n	801de2e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801dd78:	fb90 f1f3 	sdiv	r1, r0, r3
 801dd7c:	fb03 0211 	mls	r2, r3, r1, r0
 801dd80:	b90a      	cbnz	r2, 801dd86 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801dd82:	3901      	subs	r1, #1
 801dd84:	461a      	mov	r2, r3
 801dd86:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801dd8a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801dd8e:	44a4      	add	ip, r4
 801dd90:	2900      	cmp	r1, #0
 801dd92:	bfcc      	ite	gt
 801dd94:	469e      	movgt	lr, r3
 801dd96:	4696      	movle	lr, r2
 801dd98:	fb03 c505 	mla	r5, r3, r5, ip
 801dd9c:	eef0 6a42 	vmov.f32	s13, s4
 801dda0:	eeb0 7a61 	vmov.f32	s14, s3
 801dda4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dda8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ddac:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801ddb0:	ee21 3a23 	vmul.f32	s6, s2, s7
 801ddb4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801ddb8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ddbc:	ee17 0a90 	vmov	r0, s15
 801ddc0:	ee73 7a42 	vsub.f32	s15, s6, s4
 801ddc4:	fb90 f6f3 	sdiv	r6, r0, r3
 801ddc8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ddcc:	ee17 0a90 	vmov	r0, s15
 801ddd0:	fb90 f7f3 	sdiv	r7, r0, r3
 801ddd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ddd8:	f8d0 8000 	ldr.w	r8, [r0]
 801dddc:	900c      	str	r0, [sp, #48]	; 0x30
 801ddde:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dde0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801dde4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801dde8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ddec:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ddf0:	f8cd a020 	str.w	sl, [sp, #32]
 801ddf4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801ddf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ddfa:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801ddfe:	9603      	str	r6, [sp, #12]
 801de00:	44ca      	add	sl, r9
 801de02:	9506      	str	r5, [sp, #24]
 801de04:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801de08:	ee16 0a90 	vmov	r0, s13
 801de0c:	f8cd a01c 	str.w	sl, [sp, #28]
 801de10:	fb07 0704 	mla	r7, r7, r4, r0
 801de14:	ee17 0a10 	vmov	r0, s14
 801de18:	fb06 0604 	mla	r6, r6, r4, r0
 801de1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801de1e:	9702      	str	r7, [sp, #8]
 801de20:	e9cd 3600 	strd	r3, r6, [sp]
 801de24:	ebae 0304 	sub.w	r3, lr, r4
 801de28:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801de2c:	47a8      	blx	r5
 801de2e:	b011      	add	sp, #68	; 0x44
 801de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de34:	462c      	mov	r4, r5
 801de36:	e797      	b.n	801dd68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801de38 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801de38:	b570      	push	{r4, r5, r6, lr}
 801de3a:	4604      	mov	r4, r0
 801de3c:	2500      	movs	r5, #0
 801de3e:	9804      	ldr	r0, [sp, #16]
 801de40:	7223      	strb	r3, [r4, #8]
 801de42:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801de46:	8025      	strh	r5, [r4, #0]
 801de48:	6061      	str	r1, [r4, #4]
 801de4a:	7263      	strb	r3, [r4, #9]
 801de4c:	60e0      	str	r0, [r4, #12]
 801de4e:	8222      	strh	r2, [r4, #16]
 801de50:	8265      	strh	r5, [r4, #18]
 801de52:	82a5      	strh	r5, [r4, #20]
 801de54:	82e5      	strh	r5, [r4, #22]
 801de56:	8325      	strh	r5, [r4, #24]
 801de58:	8365      	strh	r5, [r4, #26]
 801de5a:	83a5      	strh	r5, [r4, #28]
 801de5c:	77a5      	strb	r5, [r4, #30]
 801de5e:	6803      	ldr	r3, [r0, #0]
 801de60:	695b      	ldr	r3, [r3, #20]
 801de62:	4798      	blx	r3
 801de64:	4606      	mov	r6, r0
 801de66:	b1f8      	cbz	r0, 801dea8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801de68:	68e0      	ldr	r0, [r4, #12]
 801de6a:	4631      	mov	r1, r6
 801de6c:	6803      	ldr	r3, [r0, #0]
 801de6e:	68db      	ldr	r3, [r3, #12]
 801de70:	4798      	blx	r3
 801de72:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801de76:	4605      	mov	r5, r0
 801de78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801de7c:	7a83      	ldrb	r3, [r0, #10]
 801de7e:	4313      	orrs	r3, r2
 801de80:	83a3      	strh	r3, [r4, #28]
 801de82:	7a63      	ldrb	r3, [r4, #9]
 801de84:	2b04      	cmp	r3, #4
 801de86:	d10f      	bne.n	801dea8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801de88:	68e0      	ldr	r0, [r4, #12]
 801de8a:	462a      	mov	r2, r5
 801de8c:	4631      	mov	r1, r6
 801de8e:	6803      	ldr	r3, [r0, #0]
 801de90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de92:	4798      	blx	r3
 801de94:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801de98:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801de9c:	7aab      	ldrb	r3, [r5, #10]
 801de9e:	4313      	orrs	r3, r2
 801dea0:	4418      	add	r0, r3
 801dea2:	8ba3      	ldrh	r3, [r4, #28]
 801dea4:	4418      	add	r0, r3
 801dea6:	83a0      	strh	r0, [r4, #28]
 801dea8:	4620      	mov	r0, r4
 801deaa:	bd70      	pop	{r4, r5, r6, pc}

0801deac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deb0:	2400      	movs	r4, #0
 801deb2:	b085      	sub	sp, #20
 801deb4:	4681      	mov	r9, r0
 801deb6:	460f      	mov	r7, r1
 801deb8:	4692      	mov	sl, r2
 801deba:	469b      	mov	fp, r3
 801debc:	46a0      	mov	r8, r4
 801debe:	4626      	mov	r6, r4
 801dec0:	4554      	cmp	r4, sl
 801dec2:	da21      	bge.n	801df08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801dec4:	2300      	movs	r3, #0
 801dec6:	463a      	mov	r2, r7
 801dec8:	4659      	mov	r1, fp
 801deca:	4648      	mov	r0, r9
 801decc:	9303      	str	r3, [sp, #12]
 801dece:	ab03      	add	r3, sp, #12
 801ded0:	f002 fb8c 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ded4:	4605      	mov	r5, r0
 801ded6:	b1b8      	cbz	r0, 801df08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801ded8:	280a      	cmp	r0, #10
 801deda:	d015      	beq.n	801df08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801dedc:	9a03      	ldr	r2, [sp, #12]
 801dede:	b182      	cbz	r2, 801df02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801dee0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801dee4:	4641      	mov	r1, r8
 801dee6:	7a93      	ldrb	r3, [r2, #10]
 801dee8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801deec:	8895      	ldrh	r5, [r2, #4]
 801deee:	4303      	orrs	r3, r0
 801def0:	4638      	mov	r0, r7
 801def2:	9301      	str	r3, [sp, #4]
 801def4:	683b      	ldr	r3, [r7, #0]
 801def6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801def8:	4798      	blx	r3
 801defa:	9b01      	ldr	r3, [sp, #4]
 801defc:	4418      	add	r0, r3
 801defe:	4406      	add	r6, r0
 801df00:	b2b6      	uxth	r6, r6
 801df02:	3401      	adds	r4, #1
 801df04:	46a8      	mov	r8, r5
 801df06:	e7db      	b.n	801dec0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801df08:	4630      	mov	r0, r6
 801df0a:	b005      	add	sp, #20
 801df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df10 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801df10:	2a02      	cmp	r2, #2
 801df12:	b530      	push	{r4, r5, lr}
 801df14:	d011      	beq.n	801df3a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801df16:	2a03      	cmp	r2, #3
 801df18:	d01c      	beq.n	801df54 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801df1a:	2a01      	cmp	r2, #1
 801df1c:	d10c      	bne.n	801df38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801df1e:	888b      	ldrh	r3, [r1, #4]
 801df20:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801df24:	8801      	ldrh	r1, [r0, #0]
 801df26:	1a9b      	subs	r3, r3, r2
 801df28:	8844      	ldrh	r4, [r0, #2]
 801df2a:	1a5b      	subs	r3, r3, r1
 801df2c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801df30:	8004      	strh	r4, [r0, #0]
 801df32:	8043      	strh	r3, [r0, #2]
 801df34:	8081      	strh	r1, [r0, #4]
 801df36:	80c2      	strh	r2, [r0, #6]
 801df38:	bd30      	pop	{r4, r5, pc}
 801df3a:	88cb      	ldrh	r3, [r1, #6]
 801df3c:	88c2      	ldrh	r2, [r0, #6]
 801df3e:	1a9b      	subs	r3, r3, r2
 801df40:	8842      	ldrh	r2, [r0, #2]
 801df42:	1a9b      	subs	r3, r3, r2
 801df44:	888a      	ldrh	r2, [r1, #4]
 801df46:	8881      	ldrh	r1, [r0, #4]
 801df48:	8043      	strh	r3, [r0, #2]
 801df4a:	1a52      	subs	r2, r2, r1
 801df4c:	8801      	ldrh	r1, [r0, #0]
 801df4e:	1a52      	subs	r2, r2, r1
 801df50:	8002      	strh	r2, [r0, #0]
 801df52:	e7f1      	b.n	801df38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801df54:	88cb      	ldrh	r3, [r1, #6]
 801df56:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801df5a:	8841      	ldrh	r1, [r0, #2]
 801df5c:	1a9b      	subs	r3, r3, r2
 801df5e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801df62:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801df66:	1a5b      	subs	r3, r3, r1
 801df68:	8045      	strh	r5, [r0, #2]
 801df6a:	8082      	strh	r2, [r0, #4]
 801df6c:	8003      	strh	r3, [r0, #0]
 801df6e:	80c4      	strh	r4, [r0, #6]
 801df70:	e7e2      	b.n	801df38 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801df74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801df74:	b570      	push	{r4, r5, r6, lr}
 801df76:	b086      	sub	sp, #24
 801df78:	ac02      	add	r4, sp, #8
 801df7a:	e884 0006 	stmia.w	r4, {r1, r2}
 801df7e:	461a      	mov	r2, r3
 801df80:	ab0c      	add	r3, sp, #48	; 0x30
 801df82:	9305      	str	r3, [sp, #20]
 801df84:	4b0a      	ldr	r3, [pc, #40]	; (801dfb0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801df86:	685d      	ldr	r5, [r3, #4]
 801df88:	1069      	asrs	r1, r5, #1
 801df8a:	07ed      	lsls	r5, r5, #31
 801df8c:	eb00 0601 	add.w	r6, r0, r1
 801df90:	bf46      	itte	mi
 801df92:	681b      	ldrmi	r3, [r3, #0]
 801df94:	5841      	ldrmi	r1, [r0, r1]
 801df96:	681d      	ldrpl	r5, [r3, #0]
 801df98:	4630      	mov	r0, r6
 801df9a:	bf48      	it	mi
 801df9c:	58cd      	ldrmi	r5, [r1, r3]
 801df9e:	4621      	mov	r1, r4
 801dfa0:	9b05      	ldr	r3, [sp, #20]
 801dfa2:	9301      	str	r3, [sp, #4]
 801dfa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfa6:	9300      	str	r3, [sp, #0]
 801dfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfaa:	47a8      	blx	r5
 801dfac:	b006      	add	sp, #24
 801dfae:	bd70      	pop	{r4, r5, r6, pc}
 801dfb0:	20000030 	.word	0x20000030

0801dfb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfb8:	b09d      	sub	sp, #116	; 0x74
 801dfba:	9114      	str	r1, [sp, #80]	; 0x50
 801dfbc:	9315      	str	r3, [sp, #84]	; 0x54
 801dfbe:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801dfc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dfc2:	8809      	ldrh	r1, [r1, #0]
 801dfc4:	889b      	ldrh	r3, [r3, #4]
 801dfc6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801dfc8:	440b      	add	r3, r1
 801dfca:	9210      	str	r2, [sp, #64]	; 0x40
 801dfcc:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801dfd0:	b21b      	sxth	r3, r3
 801dfd2:	900f      	str	r0, [sp, #60]	; 0x3c
 801dfd4:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801dfd8:	930e      	str	r3, [sp, #56]	; 0x38
 801dfda:	6833      	ldr	r3, [r6, #0]
 801dfdc:	7a59      	ldrb	r1, [r3, #9]
 801dfde:	7a1b      	ldrb	r3, [r3, #8]
 801dfe0:	9113      	str	r1, [sp, #76]	; 0x4c
 801dfe2:	9312      	str	r3, [sp, #72]	; 0x48
 801dfe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dfe6:	f9b3 4000 	ldrsh.w	r4, [r3]
 801dfea:	2a00      	cmp	r2, #0
 801dfec:	d059      	beq.n	801e0a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801dfee:	7c33      	ldrb	r3, [r6, #16]
 801dff0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801dff2:	2b04      	cmp	r3, #4
 801dff4:	bf14      	ite	ne
 801dff6:	2301      	movne	r3, #1
 801dff8:	2302      	moveq	r3, #2
 801dffa:	4413      	add	r3, r2
 801dffc:	f04f 0800 	mov.w	r8, #0
 801e000:	930d      	str	r3, [sp, #52]	; 0x34
 801e002:	4645      	mov	r5, r8
 801e004:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801e008:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801e00c:	4293      	cmp	r3, r2
 801e00e:	da75      	bge.n	801e0fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801e010:	2300      	movs	r3, #0
 801e012:	992b      	ldr	r1, [sp, #172]	; 0xac
 801e014:	6832      	ldr	r2, [r6, #0]
 801e016:	931a      	str	r3, [sp, #104]	; 0x68
 801e018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e01a:	428b      	cmp	r3, r1
 801e01c:	db43      	blt.n	801e0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801e01e:	6813      	ldr	r3, [r2, #0]
 801e020:	4610      	mov	r0, r2
 801e022:	695b      	ldr	r3, [r3, #20]
 801e024:	4798      	blx	r3
 801e026:	4681      	mov	r9, r0
 801e028:	6830      	ldr	r0, [r6, #0]
 801e02a:	aa1b      	add	r2, sp, #108	; 0x6c
 801e02c:	4649      	mov	r1, r9
 801e02e:	6803      	ldr	r3, [r0, #0]
 801e030:	689f      	ldr	r7, [r3, #8]
 801e032:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801e036:	47b8      	blx	r7
 801e038:	901a      	str	r0, [sp, #104]	; 0x68
 801e03a:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801e03e:	45d1      	cmp	r9, sl
 801e040:	d045      	beq.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e042:	f242 070b 	movw	r7, #8203	; 0x200b
 801e046:	45b9      	cmp	r9, r7
 801e048:	d041      	beq.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e04a:	f1b9 0f00 	cmp.w	r9, #0
 801e04e:	f000 80ee 	beq.w	801e22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e052:	f1b9 0f0a 	cmp.w	r9, #10
 801e056:	d057      	beq.n	801e108 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801e058:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e05a:	b383      	cbz	r3, 801e0be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801e05c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801e060:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e062:	2a00      	cmp	r2, #0
 801e064:	f000 80d2 	beq.w	801e20c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801e068:	f1bb 0f00 	cmp.w	fp, #0
 801e06c:	d100      	bne.n	801e070 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801e06e:	4444      	add	r4, r8
 801e070:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801e074:	f1bb 0f01 	cmp.w	fp, #1
 801e078:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801e07c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801e080:	ea48 0803 	orr.w	r8, r8, r3
 801e084:	d128      	bne.n	801e0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801e086:	eba4 0408 	sub.w	r4, r4, r8
 801e08a:	2d00      	cmp	r5, #0
 801e08c:	d143      	bne.n	801e116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801e08e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e090:	eb08 0304 	add.w	r3, r8, r4
 801e094:	4413      	add	r3, r2
 801e096:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e098:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e09c:	4293      	cmp	r3, r2
 801e09e:	da44      	bge.n	801e12a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e0a0:	e02b      	b.n	801e0fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801e0a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e0a4:	e7aa      	b.n	801dffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801e0a6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801e0aa:	4659      	mov	r1, fp
 801e0ac:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801e0ae:	9301      	str	r3, [sp, #4]
 801e0b0:	ab1b      	add	r3, sp, #108	; 0x6c
 801e0b2:	9300      	str	r3, [sp, #0]
 801e0b4:	ab1a      	add	r3, sp, #104	; 0x68
 801e0b6:	f002 facd 	bl	8020654 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801e0ba:	4681      	mov	r9, r0
 801e0bc:	e7bd      	b.n	801e03a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801e0be:	6830      	ldr	r0, [r6, #0]
 801e0c0:	6803      	ldr	r3, [r0, #0]
 801e0c2:	691b      	ldr	r3, [r3, #16]
 801e0c4:	4798      	blx	r3
 801e0c6:	4550      	cmp	r0, sl
 801e0c8:	d001      	beq.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e0ca:	42b8      	cmp	r0, r7
 801e0cc:	d1c8      	bne.n	801e060 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801e0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0d0:	464d      	mov	r5, r9
 801e0d2:	3301      	adds	r3, #1
 801e0d4:	930c      	str	r3, [sp, #48]	; 0x30
 801e0d6:	e797      	b.n	801e008 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801e0d8:	2d00      	cmp	r5, #0
 801e0da:	f000 80aa 	beq.w	801e232 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801e0de:	f1bb 0f00 	cmp.w	fp, #0
 801e0e2:	d118      	bne.n	801e116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801e0e4:	6830      	ldr	r0, [r6, #0]
 801e0e6:	4629      	mov	r1, r5
 801e0e8:	6803      	ldr	r3, [r0, #0]
 801e0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e0ec:	4798      	blx	r3
 801e0ee:	4404      	add	r4, r0
 801e0f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e0f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e0f4:	1ae3      	subs	r3, r4, r3
 801e0f6:	4293      	cmp	r3, r2
 801e0f8:	dd17      	ble.n	801e12a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e0fa:	464d      	mov	r5, r9
 801e0fc:	2d00      	cmp	r5, #0
 801e0fe:	f000 8096 	beq.w	801e22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e102:	2d0a      	cmp	r5, #10
 801e104:	f040 8084 	bne.w	801e210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801e108:	250a      	movs	r5, #10
 801e10a:	fab5 f085 	clz	r0, r5
 801e10e:	0940      	lsrs	r0, r0, #5
 801e110:	b01d      	add	sp, #116	; 0x74
 801e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e116:	6830      	ldr	r0, [r6, #0]
 801e118:	4629      	mov	r1, r5
 801e11a:	6803      	ldr	r3, [r0, #0]
 801e11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e11e:	4798      	blx	r3
 801e120:	f1bb 0f01 	cmp.w	fp, #1
 801e124:	eba4 0400 	sub.w	r4, r4, r0
 801e128:	d0b1      	beq.n	801e08e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801e12a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e12c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e12e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801e132:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e136:	7b43      	ldrb	r3, [r0, #13]
 801e138:	4421      	add	r1, r4
 801e13a:	015b      	lsls	r3, r3, #5
 801e13c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e140:	7983      	ldrb	r3, [r0, #6]
 801e142:	4313      	orrs	r3, r2
 801e144:	440b      	add	r3, r1
 801e146:	42ab      	cmp	r3, r5
 801e148:	dbc1      	blt.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e14c:	4299      	cmp	r1, r3
 801e14e:	dabe      	bge.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e150:	6830      	ldr	r0, [r6, #0]
 801e152:	42a5      	cmp	r5, r4
 801e154:	6803      	ldr	r3, [r0, #0]
 801e156:	bfcc      	ite	gt
 801e158:	1b2d      	subgt	r5, r5, r4
 801e15a:	2500      	movle	r5, #0
 801e15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e15e:	bfc8      	it	gt
 801e160:	b2ad      	uxthgt	r5, r5
 801e162:	4798      	blx	r3
 801e164:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e166:	4935      	ldr	r1, [pc, #212]	; (801e23c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801e168:	7b5a      	ldrb	r2, [r3, #13]
 801e16a:	f893 e008 	ldrb.w	lr, [r3, #8]
 801e16e:	f012 0f40 	tst.w	r2, #64	; 0x40
 801e172:	bf18      	it	ne
 801e174:	468c      	movne	ip, r1
 801e176:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e178:	bf08      	it	eq
 801e17a:	f04f 0c00 	moveq.w	ip, #0
 801e17e:	4408      	add	r0, r1
 801e180:	00d1      	lsls	r1, r2, #3
 801e182:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e186:	ea41 070e 	orr.w	r7, r1, lr
 801e18a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e18c:	ea4c 0707 	orr.w	r7, ip, r7
 801e190:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801e194:	1bc7      	subs	r7, r0, r7
 801e196:	b2bf      	uxth	r7, r7
 801e198:	fa0f fa87 	sxth.w	sl, r7
 801e19c:	4551      	cmp	r1, sl
 801e19e:	dd33      	ble.n	801e208 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801e1a0:	0112      	lsls	r2, r2, #4
 801e1a2:	79d8      	ldrb	r0, [r3, #7]
 801e1a4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e1a8:	4302      	orrs	r2, r0
 801e1aa:	4492      	add	sl, r2
 801e1ac:	4551      	cmp	r1, sl
 801e1ae:	dc8e      	bgt.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e1b0:	1bcf      	subs	r7, r1, r7
 801e1b2:	468a      	mov	sl, r1
 801e1b4:	b2bf      	uxth	r7, r7
 801e1b6:	9317      	str	r3, [sp, #92]	; 0x5c
 801e1b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e1ba:	6830      	ldr	r0, [r6, #0]
 801e1bc:	681a      	ldr	r2, [r3, #0]
 801e1be:	6801      	ldr	r1, [r0, #0]
 801e1c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801e1c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e1c4:	9311      	str	r3, [sp, #68]	; 0x44
 801e1c6:	9216      	str	r2, [sp, #88]	; 0x58
 801e1c8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801e1ca:	4788      	blx	r1
 801e1cc:	79b1      	ldrb	r1, [r6, #6]
 801e1ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e1d0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e1d2:	7bb1      	ldrb	r1, [r6, #14]
 801e1d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e1d6:	910a      	str	r1, [sp, #40]	; 0x28
 801e1d8:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801e1dc:	9109      	str	r1, [sp, #36]	; 0x24
 801e1de:	68b1      	ldr	r1, [r6, #8]
 801e1e0:	9305      	str	r3, [sp, #20]
 801e1e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e1e4:	9206      	str	r2, [sp, #24]
 801e1e6:	e9cd a501 	strd	sl, r5, [sp, #4]
 801e1ea:	4425      	add	r5, r4
 801e1ec:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e1f0:	b22d      	sxth	r5, r5
 801e1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e1f4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e1f8:	9500      	str	r5, [sp, #0]
 801e1fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e1fc:	681a      	ldr	r2, [r3, #0]
 801e1fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e200:	685b      	ldr	r3, [r3, #4]
 801e202:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e204:	47a8      	blx	r5
 801e206:	e762      	b.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e208:	2700      	movs	r7, #0
 801e20a:	e7d4      	b.n	801e1b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801e20c:	4690      	mov	r8, r2
 801e20e:	e75e      	b.n	801e0ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e212:	3401      	adds	r4, #1
 801e214:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e216:	429c      	cmp	r4, r3
 801e218:	f6bf af77 	bge.w	801e10a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801e21c:	4659      	mov	r1, fp
 801e21e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801e220:	f002 f9a4 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e224:	4605      	mov	r5, r0
 801e226:	b110      	cbz	r0, 801e22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e228:	280a      	cmp	r0, #10
 801e22a:	d1f2      	bne.n	801e212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801e22c:	e76c      	b.n	801e108 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801e22e:	2500      	movs	r5, #0
 801e230:	e76b      	b.n	801e10a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801e232:	f1bb 0f00 	cmp.w	fp, #0
 801e236:	f43f af5b 	beq.w	801e0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801e23a:	e776      	b.n	801e12a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e23c:	fffffe00 	.word	0xfffffe00

0801e240 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e240:	b530      	push	{r4, r5, lr}
 801e242:	8a44      	ldrh	r4, [r0, #18]
 801e244:	8ac5      	ldrh	r5, [r0, #22]
 801e246:	82c3      	strh	r3, [r0, #22]
 801e248:	442c      	add	r4, r5
 801e24a:	1ae4      	subs	r4, r4, r3
 801e24c:	8b03      	ldrh	r3, [r0, #24]
 801e24e:	8244      	strh	r4, [r0, #18]
 801e250:	8a84      	ldrh	r4, [r0, #20]
 801e252:	4422      	add	r2, r4
 801e254:	440c      	add	r4, r1
 801e256:	1a59      	subs	r1, r3, r1
 801e258:	8342      	strh	r2, [r0, #26]
 801e25a:	8284      	strh	r4, [r0, #20]
 801e25c:	8301      	strh	r1, [r0, #24]
 801e25e:	bd30      	pop	{r4, r5, pc}

0801e260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e264:	7a45      	ldrb	r5, [r0, #9]
 801e266:	b085      	sub	sp, #20
 801e268:	4604      	mov	r4, r0
 801e26a:	4689      	mov	r9, r1
 801e26c:	1eeb      	subs	r3, r5, #3
 801e26e:	b2db      	uxtb	r3, r3
 801e270:	b329      	cbz	r1, 801e2be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801e272:	2b01      	cmp	r3, #1
 801e274:	d921      	bls.n	801e2ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801e276:	1e69      	subs	r1, r5, #1
 801e278:	f1d1 0b00 	rsbs	fp, r1, #0
 801e27c:	eb4b 0b01 	adc.w	fp, fp, r1
 801e280:	1eaa      	subs	r2, r5, #2
 801e282:	2500      	movs	r5, #0
 801e284:	4253      	negs	r3, r2
 801e286:	9500      	str	r5, [sp, #0]
 801e288:	4153      	adcs	r3, r2
 801e28a:	9301      	str	r3, [sp, #4]
 801e28c:	2600      	movs	r6, #0
 801e28e:	f242 080b 	movw	r8, #8203	; 0x200b
 801e292:	8266      	strh	r6, [r4, #18]
 801e294:	82a6      	strh	r6, [r4, #20]
 801e296:	2300      	movs	r3, #0
 801e298:	68e2      	ldr	r2, [r4, #12]
 801e29a:	7a21      	ldrb	r1, [r4, #8]
 801e29c:	9303      	str	r3, [sp, #12]
 801e29e:	ab03      	add	r3, sp, #12
 801e2a0:	6860      	ldr	r0, [r4, #4]
 801e2a2:	8827      	ldrh	r7, [r4, #0]
 801e2a4:	f002 f9a2 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e2a8:	8020      	strh	r0, [r4, #0]
 801e2aa:	b9b0      	cbnz	r0, 801e2da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801e2ac:	8b22      	ldrh	r2, [r4, #24]
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	4611      	mov	r1, r2
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	f7ff ffc4 	bl	801e240 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e2b8:	e062      	b.n	801e380 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801e2ba:	468b      	mov	fp, r1
 801e2bc:	e7e0      	b.n	801e280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801e2be:	2b01      	cmp	r3, #1
 801e2c0:	f105 35ff 	add.w	r5, r5, #4294967295
 801e2c4:	9101      	str	r1, [sp, #4]
 801e2c6:	468b      	mov	fp, r1
 801e2c8:	bf8c      	ite	hi
 801e2ca:	2300      	movhi	r3, #0
 801e2cc:	2301      	movls	r3, #1
 801e2ce:	2d01      	cmp	r5, #1
 801e2d0:	9300      	str	r3, [sp, #0]
 801e2d2:	bf8c      	ite	hi
 801e2d4:	2500      	movhi	r5, #0
 801e2d6:	2501      	movls	r5, #1
 801e2d8:	e7d8      	b.n	801e28c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801e2da:	8ae3      	ldrh	r3, [r4, #22]
 801e2dc:	280a      	cmp	r0, #10
 801e2de:	f103 0301 	add.w	r3, r3, #1
 801e2e2:	82e3      	strh	r3, [r4, #22]
 801e2e4:	d0e2      	beq.n	801e2ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801e2e6:	9a03      	ldr	r2, [sp, #12]
 801e2e8:	b972      	cbnz	r2, 801e308 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801e2ea:	4540      	cmp	r0, r8
 801e2ec:	d1d3      	bne.n	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e2ee:	8823      	ldrh	r3, [r4, #0]
 801e2f0:	8b21      	ldrh	r1, [r4, #24]
 801e2f2:	2b20      	cmp	r3, #32
 801e2f4:	d001      	beq.n	801e2fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801e2f6:	4543      	cmp	r3, r8
 801e2f8:	d11d      	bne.n	801e336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801e2fa:	2f20      	cmp	r7, #32
 801e2fc:	d002      	beq.n	801e304 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801e2fe:	4547      	cmp	r7, r8
 801e300:	bf18      	it	ne
 801e302:	460e      	movne	r6, r1
 801e304:	2001      	movs	r0, #1
 801e306:	e017      	b.n	801e338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801e308:	4540      	cmp	r0, r8
 801e30a:	d012      	beq.n	801e332 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801e30c:	8893      	ldrh	r3, [r2, #4]
 801e30e:	4639      	mov	r1, r7
 801e310:	8023      	strh	r3, [r4, #0]
 801e312:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801e316:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801e31a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801e31e:	ea4a 0a00 	orr.w	sl, sl, r0
 801e322:	68e0      	ldr	r0, [r4, #12]
 801e324:	6803      	ldr	r3, [r0, #0]
 801e326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e328:	4798      	blx	r3
 801e32a:	eb0a 0200 	add.w	r2, sl, r0
 801e32e:	b292      	uxth	r2, r2
 801e330:	e7dd      	b.n	801e2ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801e332:	2200      	movs	r2, #0
 801e334:	e7db      	b.n	801e2ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801e336:	2000      	movs	r0, #0
 801e338:	440a      	add	r2, r1
 801e33a:	8aa3      	ldrh	r3, [r4, #20]
 801e33c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801e340:	b292      	uxth	r2, r2
 801e342:	8322      	strh	r2, [r4, #24]
 801e344:	4413      	add	r3, r2
 801e346:	f1b9 0f00 	cmp.w	r9, #0
 801e34a:	d022      	beq.n	801e392 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801e34c:	f1bb 0f00 	cmp.w	fp, #0
 801e350:	d102      	bne.n	801e358 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801e352:	9901      	ldr	r1, [sp, #4]
 801e354:	b149      	cbz	r1, 801e36a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801e356:	b140      	cbz	r0, 801e36a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801e358:	8ba1      	ldrh	r1, [r4, #28]
 801e35a:	4419      	add	r1, r3
 801e35c:	458c      	cmp	ip, r1
 801e35e:	da12      	bge.n	801e386 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801e360:	8a61      	ldrh	r1, [r4, #18]
 801e362:	b181      	cbz	r1, 801e386 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801e364:	4563      	cmp	r3, ip
 801e366:	dd96      	ble.n	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e368:	e004      	b.n	801e374 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801e36a:	4563      	cmp	r3, ip
 801e36c:	dd93      	ble.n	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e36e:	8a63      	ldrh	r3, [r4, #18]
 801e370:	2b00      	cmp	r3, #0
 801e372:	d090      	beq.n	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e374:	2301      	movs	r3, #1
 801e376:	8ba2      	ldrh	r2, [r4, #28]
 801e378:	77a3      	strb	r3, [r4, #30]
 801e37a:	8b63      	ldrh	r3, [r4, #26]
 801e37c:	4413      	add	r3, r2
 801e37e:	8363      	strh	r3, [r4, #26]
 801e380:	b005      	add	sp, #20
 801e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e386:	2300      	movs	r3, #0
 801e388:	4611      	mov	r1, r2
 801e38a:	4620      	mov	r0, r4
 801e38c:	f7ff ff58 	bl	801e240 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e390:	e781      	b.n	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e392:	4563      	cmp	r3, ip
 801e394:	dd16      	ble.n	801e3c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801e396:	9b00      	ldr	r3, [sp, #0]
 801e398:	b113      	cbz	r3, 801e3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801e39a:	2301      	movs	r3, #1
 801e39c:	460a      	mov	r2, r1
 801e39e:	e787      	b.n	801e2b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801e3a0:	2d00      	cmp	r5, #0
 801e3a2:	f43f af78 	beq.w	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	f47f af75 	bne.w	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e3ac:	2f20      	cmp	r7, #32
 801e3ae:	d001      	beq.n	801e3b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801e3b0:	4547      	cmp	r7, r8
 801e3b2:	d102      	bne.n	801e3ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	4632      	mov	r2, r6
 801e3b8:	e77b      	b.n	801e2b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801e3ba:	8a63      	ldrh	r3, [r4, #18]
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	f43f af6a 	beq.w	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e3c2:	e7dd      	b.n	801e380 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801e3c4:	2800      	cmp	r0, #0
 801e3c6:	f47f af66 	bne.w	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e3ca:	2f20      	cmp	r7, #32
 801e3cc:	d002      	beq.n	801e3d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801e3ce:	4547      	cmp	r7, r8
 801e3d0:	f47f af61 	bne.w	801e296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	4632      	mov	r2, r6
 801e3d8:	e7d7      	b.n	801e38a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801e3da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e3da:	b570      	push	{r4, r5, r6, lr}
 801e3dc:	4606      	mov	r6, r0
 801e3de:	b08a      	sub	sp, #40	; 0x28
 801e3e0:	4615      	mov	r5, r2
 801e3e2:	b191      	cbz	r1, 801e40a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801e3e4:	2401      	movs	r4, #1
 801e3e6:	e9cd 3100 	strd	r3, r1, [sp]
 801e3ea:	4613      	mov	r3, r2
 801e3ec:	4601      	mov	r1, r0
 801e3ee:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e3f2:	a802      	add	r0, sp, #8
 801e3f4:	f7ff fd20 	bl	801de38 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e3f8:	2100      	movs	r1, #0
 801e3fa:	a802      	add	r0, sp, #8
 801e3fc:	f7ff ff30 	bl	801e260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e400:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e404:	b173      	cbz	r3, 801e424 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801e406:	3401      	adds	r4, #1
 801e408:	e7f6      	b.n	801e3f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801e40a:	2401      	movs	r4, #1
 801e40c:	4611      	mov	r1, r2
 801e40e:	f002 f8ad 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e412:	280a      	cmp	r0, #10
 801e414:	4629      	mov	r1, r5
 801e416:	4630      	mov	r0, r6
 801e418:	bf08      	it	eq
 801e41a:	3401      	addeq	r4, #1
 801e41c:	f002 f8a6 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e420:	2800      	cmp	r0, #0
 801e422:	d1f6      	bne.n	801e412 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801e424:	b2a0      	uxth	r0, r4
 801e426:	b00a      	add	sp, #40	; 0x28
 801e428:	bd70      	pop	{r4, r5, r6, pc}

0801e42a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e42e:	b0db      	sub	sp, #364	; 0x16c
 801e430:	468a      	mov	sl, r1
 801e432:	461c      	mov	r4, r3
 801e434:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801e438:	9009      	str	r0, [sp, #36]	; 0x24
 801e43a:	f1bb 0f00 	cmp.w	fp, #0
 801e43e:	f000 80c7 	beq.w	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	2b00      	cmp	r3, #0
 801e446:	f000 80c3 	beq.w	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e44a:	7ba3      	ldrb	r3, [r4, #14]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	f000 80bf 	beq.w	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e452:	af0c      	add	r7, sp, #48	; 0x30
 801e454:	6810      	ldr	r0, [r2, #0]
 801e456:	6851      	ldr	r1, [r2, #4]
 801e458:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801e45c:	463b      	mov	r3, r7
 801e45e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801e462:	c303      	stmia	r3!, {r0, r1}
 801e464:	2100      	movs	r1, #0
 801e466:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801e46a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e46e:	4638      	mov	r0, r7
 801e470:	910e      	str	r1, [sp, #56]	; 0x38
 801e472:	a90e      	add	r1, sp, #56	; 0x38
 801e474:	79a2      	ldrb	r2, [r4, #6]
 801e476:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e47a:	f7ff fd49 	bl	801df10 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e47e:	a90e      	add	r1, sp, #56	; 0x38
 801e480:	79a2      	ldrb	r2, [r4, #6]
 801e482:	4608      	mov	r0, r1
 801e484:	f7ff fd44 	bl	801df10 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e488:	4648      	mov	r0, r9
 801e48a:	f001 ff2d 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801e48e:	6820      	ldr	r0, [r4, #0]
 801e490:	6803      	ldr	r3, [r0, #0]
 801e492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e494:	4798      	blx	r3
 801e496:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e498:	4603      	mov	r3, r0
 801e49a:	4659      	mov	r1, fp
 801e49c:	4648      	mov	r0, r9
 801e49e:	f001 ff40 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e4a2:	a82e      	add	r0, sp, #184	; 0xb8
 801e4a4:	f001 ff20 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801e4a8:	f894 8004 	ldrb.w	r8, [r4, #4]
 801e4ac:	f1b8 0f00 	cmp.w	r8, #0
 801e4b0:	d009      	beq.n	801e4c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801e4b2:	6820      	ldr	r0, [r4, #0]
 801e4b4:	6803      	ldr	r3, [r0, #0]
 801e4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e4b8:	4798      	blx	r3
 801e4ba:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e4bc:	4603      	mov	r3, r0
 801e4be:	4659      	mov	r1, fp
 801e4c0:	a82e      	add	r0, sp, #184	; 0xb8
 801e4c2:	f001 ff2e 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e4c6:	6820      	ldr	r0, [r4, #0]
 801e4c8:	6803      	ldr	r3, [r0, #0]
 801e4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e4cc:	4798      	blx	r3
 801e4ce:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e4d2:	182e      	adds	r6, r5, r0
 801e4d4:	2e00      	cmp	r6, #0
 801e4d6:	dd45      	ble.n	801e564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801e4d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e4dc:	4283      	cmp	r3, r0
 801e4de:	db41      	blt.n	801e564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801e4e0:	441d      	add	r5, r3
 801e4e2:	fb95 f5f6 	sdiv	r5, r5, r6
 801e4e6:	a844      	add	r0, sp, #272	; 0x110
 801e4e8:	f001 fefe 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801e4ec:	7c23      	ldrb	r3, [r4, #16]
 801e4ee:	b14b      	cbz	r3, 801e504 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801e4f0:	6820      	ldr	r0, [r4, #0]
 801e4f2:	6803      	ldr	r3, [r0, #0]
 801e4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e4f6:	4798      	blx	r3
 801e4f8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	4659      	mov	r1, fp
 801e4fe:	a844      	add	r0, sp, #272	; 0x110
 801e500:	f001 ff0f 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e504:	7c21      	ldrb	r1, [r4, #16]
 801e506:	a810      	add	r0, sp, #64	; 0x40
 801e508:	7963      	ldrb	r3, [r4, #5]
 801e50a:	9101      	str	r1, [sp, #4]
 801e50c:	6821      	ldr	r1, [r4, #0]
 801e50e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e512:	9100      	str	r1, [sp, #0]
 801e514:	a944      	add	r1, sp, #272	; 0x110
 801e516:	f7ff fc8f 	bl	801de38 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e51a:	7c23      	ldrb	r3, [r4, #16]
 801e51c:	bb23      	cbnz	r3, 801e568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801e51e:	fa1f fb86 	uxth.w	fp, r6
 801e522:	2d00      	cmp	r5, #0
 801e524:	dd57      	ble.n	801e5d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801e526:	7961      	ldrb	r1, [r4, #5]
 801e528:	4648      	mov	r0, r9
 801e52a:	f002 f81f 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e52e:	4603      	mov	r3, r0
 801e530:	f1b8 0f00 	cmp.w	r8, #0
 801e534:	d005      	beq.n	801e542 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801e536:	9008      	str	r0, [sp, #32]
 801e538:	a82e      	add	r0, sp, #184	; 0xb8
 801e53a:	7961      	ldrb	r1, [r4, #5]
 801e53c:	f002 f816 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e540:	9b08      	ldr	r3, [sp, #32]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d044      	beq.n	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e546:	2b0a      	cmp	r3, #10
 801e548:	d1eb      	bne.n	801e522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801e54a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e54e:	3d01      	subs	r5, #1
 801e550:	445b      	add	r3, fp
 801e552:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e556:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e55a:	eba3 030b 	sub.w	r3, r3, fp
 801e55e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e562:	e7de      	b.n	801e522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801e564:	2500      	movs	r5, #0
 801e566:	e7be      	b.n	801e4e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801e568:	0073      	lsls	r3, r6, #1
 801e56a:	9308      	str	r3, [sp, #32]
 801e56c:	2d00      	cmp	r5, #0
 801e56e:	dd32      	ble.n	801e5d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801e570:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801e574:	a810      	add	r0, sp, #64	; 0x40
 801e576:	9b08      	ldr	r3, [sp, #32]
 801e578:	428b      	cmp	r3, r1
 801e57a:	bfd4      	ite	le
 801e57c:	2100      	movle	r1, #0
 801e57e:	2101      	movgt	r1, #1
 801e580:	f7ff fe6e 	bl	801e260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e584:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801e588:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e58c:	fa1f fb83 	uxth.w	fp, r3
 801e590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e594:	459b      	cmp	fp, r3
 801e596:	d00b      	beq.n	801e5b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e598:	7961      	ldrb	r1, [r4, #5]
 801e59a:	4648      	mov	r0, r9
 801e59c:	f001 ffe6 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e5a0:	f1b8 0f00 	cmp.w	r8, #0
 801e5a4:	d0f0      	beq.n	801e588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801e5a6:	7961      	ldrb	r1, [r4, #5]
 801e5a8:	a82e      	add	r0, sp, #184	; 0xb8
 801e5aa:	f001 ffdf 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e5ae:	e7eb      	b.n	801e588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801e5b0:	b2b3      	uxth	r3, r6
 801e5b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e5b6:	3d01      	subs	r5, #1
 801e5b8:	441a      	add	r2, r3
 801e5ba:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e5be:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801e5c2:	1ad3      	subs	r3, r2, r3
 801e5c4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e5c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d1cd      	bne.n	801e56c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801e5d0:	b05b      	add	sp, #364	; 0x16c
 801e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d6:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801e5da:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801e5de:	7c23      	ldrb	r3, [r4, #16]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d05f      	beq.n	801e6a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801e5e4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801e5e8:	a810      	add	r0, sp, #64	; 0x40
 801e5ea:	458b      	cmp	fp, r1
 801e5ec:	bfd4      	ite	le
 801e5ee:	2100      	movle	r1, #0
 801e5f0:	2101      	movgt	r1, #1
 801e5f2:	f7ff fe35 	bl	801e260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e5f6:	f1b8 0f00 	cmp.w	r8, #0
 801e5fa:	d04c      	beq.n	801e696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801e5fc:	7c23      	ldrb	r3, [r4, #16]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d053      	beq.n	801e6aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801e602:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801e606:	7922      	ldrb	r2, [r4, #4]
 801e608:	2a01      	cmp	r2, #1
 801e60a:	d13c      	bne.n	801e686 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e60c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801e610:	1ac0      	subs	r0, r0, r3
 801e612:	2302      	movs	r3, #2
 801e614:	fb90 f0f3 	sdiv	r0, r0, r3
 801e618:	b200      	sxth	r0, r0
 801e61a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e61e:	4418      	add	r0, r3
 801e620:	7c23      	ldrb	r3, [r4, #16]
 801e622:	8028      	strh	r0, [r5, #0]
 801e624:	2b00      	cmp	r3, #0
 801e626:	d03a      	beq.n	801e69e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801e628:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801e62c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801e630:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e634:	f8cd 9010 	str.w	r9, [sp, #16]
 801e638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e63a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801e63e:	2200      	movs	r2, #0
 801e640:	2100      	movs	r1, #0
 801e642:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e646:	e9cd 5700 	strd	r5, r7, [sp]
 801e64a:	4652      	mov	r2, sl
 801e64c:	f7ff fcb2 	bl	801dfb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e650:	2800      	cmp	r0, #0
 801e652:	d1bd      	bne.n	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e654:	b2b2      	uxth	r2, r6
 801e656:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e65a:	4611      	mov	r1, r2
 801e65c:	4413      	add	r3, r2
 801e65e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801e662:	b21b      	sxth	r3, r3
 801e664:	1a52      	subs	r2, r2, r1
 801e666:	7c21      	ldrb	r1, [r4, #16]
 801e668:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e66c:	b212      	sxth	r2, r2
 801e66e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801e672:	b109      	cbz	r1, 801e678 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801e674:	42b2      	cmp	r2, r6
 801e676:	dbab      	blt.n	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e678:	887a      	ldrh	r2, [r7, #2]
 801e67a:	88f9      	ldrh	r1, [r7, #6]
 801e67c:	440a      	add	r2, r1
 801e67e:	b212      	sxth	r2, r2
 801e680:	4293      	cmp	r3, r2
 801e682:	ddac      	ble.n	801e5de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801e684:	e7a4      	b.n	801e5d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e686:	2a02      	cmp	r2, #2
 801e688:	d107      	bne.n	801e69a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801e68a:	7be2      	ldrb	r2, [r4, #15]
 801e68c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801e690:	1a80      	subs	r0, r0, r2
 801e692:	1ac0      	subs	r0, r0, r3
 801e694:	e7c0      	b.n	801e618 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801e696:	7be0      	ldrb	r0, [r4, #15]
 801e698:	e7bf      	b.n	801e61a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801e69a:	2000      	movs	r0, #0
 801e69c:	e7bd      	b.n	801e61a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801e69e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e6a2:	e7c3      	b.n	801e62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801e6a4:	f1b8 0f00 	cmp.w	r8, #0
 801e6a8:	d0f5      	beq.n	801e696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e6b0:	6821      	ldr	r1, [r4, #0]
 801e6b2:	a82e      	add	r0, sp, #184	; 0xb8
 801e6b4:	f7ff fbfa 	bl	801deac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e6b8:	b203      	sxth	r3, r0
 801e6ba:	e7a4      	b.n	801e606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801e6bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e6bc:	2b02      	cmp	r3, #2
 801e6be:	b510      	push	{r4, lr}
 801e6c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e6c4:	d00b      	beq.n	801e6de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e6c6:	2b03      	cmp	r3, #3
 801e6c8:	d00e      	beq.n	801e6e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801e6ca:	2b01      	cmp	r3, #1
 801e6cc:	d001      	beq.n	801e6d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801e6ce:	1860      	adds	r0, r4, r1
 801e6d0:	bd10      	pop	{r4, pc}
 801e6d2:	8880      	ldrh	r0, [r0, #4]
 801e6d4:	4420      	add	r0, r4
 801e6d6:	b200      	sxth	r0, r0
 801e6d8:	1a80      	subs	r0, r0, r2
 801e6da:	3801      	subs	r0, #1
 801e6dc:	e7f8      	b.n	801e6d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e6de:	8880      	ldrh	r0, [r0, #4]
 801e6e0:	4420      	add	r0, r4
 801e6e2:	b200      	sxth	r0, r0
 801e6e4:	1a40      	subs	r0, r0, r1
 801e6e6:	e7f8      	b.n	801e6da <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e6e8:	18a0      	adds	r0, r4, r2
 801e6ea:	e7f1      	b.n	801e6d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801e6ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e6ec:	2b02      	cmp	r3, #2
 801e6ee:	b510      	push	{r4, lr}
 801e6f0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e6f4:	d006      	beq.n	801e704 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801e6f6:	2b03      	cmp	r3, #3
 801e6f8:	d00a      	beq.n	801e710 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e6fa:	2b01      	cmp	r3, #1
 801e6fc:	bf14      	ite	ne
 801e6fe:	18a0      	addne	r0, r4, r2
 801e700:	1860      	addeq	r0, r4, r1
 801e702:	bd10      	pop	{r4, pc}
 801e704:	88c0      	ldrh	r0, [r0, #6]
 801e706:	4420      	add	r0, r4
 801e708:	b200      	sxth	r0, r0
 801e70a:	1a80      	subs	r0, r0, r2
 801e70c:	3801      	subs	r0, #1
 801e70e:	e7f8      	b.n	801e702 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e710:	88c0      	ldrh	r0, [r0, #6]
 801e712:	4420      	add	r0, r4
 801e714:	b200      	sxth	r0, r0
 801e716:	1a40      	subs	r0, r0, r1
 801e718:	e7f8      	b.n	801e70c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801e71c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801e71c:	4b01      	ldr	r3, [pc, #4]	; (801e724 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801e71e:	2200      	movs	r2, #0
 801e720:	601a      	str	r2, [r3, #0]
 801e722:	4770      	bx	lr
 801e724:	2000c018 	.word	0x2000c018

0801e728 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e72a:	1e05      	subs	r5, r0, #0
 801e72c:	f04f 0601 	mov.w	r6, #1
 801e730:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e734:	bfba      	itte	lt
 801e736:	f04f 37ff 	movlt.w	r7, #4294967295
 801e73a:	426d      	neglt	r5, r5
 801e73c:	2701      	movge	r7, #1
 801e73e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801e742:	f1be 0f00 	cmp.w	lr, #0
 801e746:	bfbc      	itt	lt
 801e748:	f1ce 0e00 	rsblt	lr, lr, #0
 801e74c:	427f      	neglt	r7, r7
 801e74e:	2c00      	cmp	r4, #0
 801e750:	fa4e f001 	asr.w	r0, lr, r1
 801e754:	fa06 f101 	lsl.w	r1, r6, r1
 801e758:	bfbc      	itt	lt
 801e75a:	4264      	neglt	r4, r4
 801e75c:	427f      	neglt	r7, r7
 801e75e:	3901      	subs	r1, #1
 801e760:	ea01 010e 	and.w	r1, r1, lr
 801e764:	434d      	muls	r5, r1
 801e766:	f8dc 1000 	ldr.w	r1, [ip]
 801e76a:	fb03 1300 	mla	r3, r3, r0, r1
 801e76e:	fb95 f1f4 	sdiv	r1, r5, r4
 801e772:	fb04 5511 	mls	r5, r4, r1, r5
 801e776:	441d      	add	r5, r3
 801e778:	fb95 f3f4 	sdiv	r3, r5, r4
 801e77c:	4419      	add	r1, r3
 801e77e:	fb04 5413 	mls	r4, r4, r3, r5
 801e782:	fb02 1000 	mla	r0, r2, r0, r1
 801e786:	f8cc 4000 	str.w	r4, [ip]
 801e78a:	4378      	muls	r0, r7
 801e78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e790 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e794:	4c24      	ldr	r4, [pc, #144]	; (801e828 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e796:	b086      	sub	sp, #24
 801e798:	4605      	mov	r5, r0
 801e79a:	6807      	ldr	r7, [r0, #0]
 801e79c:	69a3      	ldr	r3, [r4, #24]
 801e79e:	b92b      	cbnz	r3, 801e7ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801e7a0:	6840      	ldr	r0, [r0, #4]
 801e7a2:	e9c5 7000 	strd	r7, r0, [r5]
 801e7a6:	b006      	add	sp, #24
 801e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7ac:	f04f 0802 	mov.w	r8, #2
 801e7b0:	68a2      	ldr	r2, [r4, #8]
 801e7b2:	ae06      	add	r6, sp, #24
 801e7b4:	6820      	ldr	r0, [r4, #0]
 801e7b6:	fb93 f1f8 	sdiv	r1, r3, r8
 801e7ba:	440a      	add	r2, r1
 801e7bc:	69e1      	ldr	r1, [r4, #28]
 801e7be:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e7c2:	9700      	str	r7, [sp, #0]
 801e7c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801e7c6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801e7ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e7cc:	f7ff ffac 	bl	801e728 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e7d0:	69a3      	ldr	r3, [r4, #24]
 801e7d2:	4607      	mov	r7, r0
 801e7d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801e7d6:	9301      	str	r3, [sp, #4]
 801e7d8:	686b      	ldr	r3, [r5, #4]
 801e7da:	6a21      	ldr	r1, [r4, #32]
 801e7dc:	9300      	str	r3, [sp, #0]
 801e7de:	9602      	str	r6, [sp, #8]
 801e7e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e7e2:	6860      	ldr	r0, [r4, #4]
 801e7e4:	f7ff ffa0 	bl	801e728 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e7e8:	69a2      	ldr	r2, [r4, #24]
 801e7ea:	6963      	ldr	r3, [r4, #20]
 801e7ec:	4407      	add	r7, r0
 801e7ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e7f0:	68e0      	ldr	r0, [r4, #12]
 801e7f2:	fb92 f8f8 	sdiv	r8, r2, r8
 801e7f6:	4443      	add	r3, r8
 801e7f8:	9305      	str	r3, [sp, #20]
 801e7fa:	682b      	ldr	r3, [r5, #0]
 801e7fc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e806:	f7ff ff8f 	bl	801e728 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e80a:	69a3      	ldr	r3, [r4, #24]
 801e80c:	4680      	mov	r8, r0
 801e80e:	9602      	str	r6, [sp, #8]
 801e810:	9301      	str	r3, [sp, #4]
 801e812:	686b      	ldr	r3, [r5, #4]
 801e814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e816:	9300      	str	r3, [sp, #0]
 801e818:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e81a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e81c:	6920      	ldr	r0, [r4, #16]
 801e81e:	f7ff ff83 	bl	801e728 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e822:	4440      	add	r0, r8
 801e824:	e7bd      	b.n	801e7a2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801e826:	bf00      	nop
 801e828:	2000c01c 	.word	0x2000c01c

0801e82c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e82c:	4b07      	ldr	r3, [pc, #28]	; (801e84c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e82e:	b510      	push	{r4, lr}
 801e830:	781b      	ldrb	r3, [r3, #0]
 801e832:	2b01      	cmp	r3, #1
 801e834:	d108      	bne.n	801e848 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e836:	4b06      	ldr	r3, [pc, #24]	; (801e850 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e838:	880c      	ldrh	r4, [r1, #0]
 801e83a:	881b      	ldrh	r3, [r3, #0]
 801e83c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e840:	3b01      	subs	r3, #1
 801e842:	1b1b      	subs	r3, r3, r4
 801e844:	8003      	strh	r3, [r0, #0]
 801e846:	800a      	strh	r2, [r1, #0]
 801e848:	bd10      	pop	{r4, pc}
 801e84a:	bf00      	nop
 801e84c:	2000bfe6 	.word	0x2000bfe6
 801e850:	2000bfea 	.word	0x2000bfea

0801e854 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801e854:	4b0a      	ldr	r3, [pc, #40]	; (801e880 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801e856:	b510      	push	{r4, lr}
 801e858:	781b      	ldrb	r3, [r3, #0]
 801e85a:	2b01      	cmp	r3, #1
 801e85c:	d10e      	bne.n	801e87c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801e85e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e862:	8843      	ldrh	r3, [r0, #2]
 801e864:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e868:	18ca      	adds	r2, r1, r3
 801e86a:	4b06      	ldr	r3, [pc, #24]	; (801e884 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801e86c:	8044      	strh	r4, [r0, #2]
 801e86e:	881b      	ldrh	r3, [r3, #0]
 801e870:	1a9b      	subs	r3, r3, r2
 801e872:	8003      	strh	r3, [r0, #0]
 801e874:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e878:	8081      	strh	r1, [r0, #4]
 801e87a:	80c3      	strh	r3, [r0, #6]
 801e87c:	bd10      	pop	{r4, pc}
 801e87e:	bf00      	nop
 801e880:	2000bfe6 	.word	0x2000bfe6
 801e884:	2000bfe2 	.word	0x2000bfe2

0801e888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e888:	4b07      	ldr	r3, [pc, #28]	; (801e8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e88a:	b510      	push	{r4, lr}
 801e88c:	781b      	ldrb	r3, [r3, #0]
 801e88e:	2b01      	cmp	r3, #1
 801e890:	d108      	bne.n	801e8a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e892:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e896:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e89a:	8003      	strh	r3, [r0, #0]
 801e89c:	8893      	ldrh	r3, [r2, #4]
 801e89e:	3b01      	subs	r3, #1
 801e8a0:	1b1b      	subs	r3, r3, r4
 801e8a2:	800b      	strh	r3, [r1, #0]
 801e8a4:	bd10      	pop	{r4, pc}
 801e8a6:	bf00      	nop
 801e8a8:	2000bfe6 	.word	0x2000bfe6

0801e8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e8ac:	4b08      	ldr	r3, [pc, #32]	; (801e8d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801e8ae:	b513      	push	{r0, r1, r4, lr}
 801e8b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e8b4:	2400      	movs	r4, #0
 801e8b6:	4b07      	ldr	r3, [pc, #28]	; (801e8d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801e8b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e8bc:	466a      	mov	r2, sp
 801e8be:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8c2:	9400      	str	r4, [sp, #0]
 801e8c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e8c8:	f7ff ffde 	bl	801e888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e8cc:	b002      	add	sp, #8
 801e8ce:	bd10      	pop	{r4, pc}
 801e8d0:	2000bfe2 	.word	0x2000bfe2
 801e8d4:	2000bfe4 	.word	0x2000bfe4

0801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e8d8:	4b0a      	ldr	r3, [pc, #40]	; (801e904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e8da:	460a      	mov	r2, r1
 801e8dc:	b510      	push	{r4, lr}
 801e8de:	781b      	ldrb	r3, [r3, #0]
 801e8e0:	2b01      	cmp	r3, #1
 801e8e2:	d10d      	bne.n	801e900 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e8e4:	8881      	ldrh	r1, [r0, #4]
 801e8e6:	8803      	ldrh	r3, [r0, #0]
 801e8e8:	440b      	add	r3, r1
 801e8ea:	4601      	mov	r1, r0
 801e8ec:	3b01      	subs	r3, #1
 801e8ee:	f821 3b02 	strh.w	r3, [r1], #2
 801e8f2:	f7ff ffc9 	bl	801e888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e8f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e8fa:	88c2      	ldrh	r2, [r0, #6]
 801e8fc:	80c3      	strh	r3, [r0, #6]
 801e8fe:	8082      	strh	r2, [r0, #4]
 801e900:	bd10      	pop	{r4, pc}
 801e902:	bf00      	nop
 801e904:	2000bfe6 	.word	0x2000bfe6

0801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e908:	4b09      	ldr	r3, [pc, #36]	; (801e930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801e90a:	b507      	push	{r0, r1, r2, lr}
 801e90c:	2100      	movs	r1, #0
 801e90e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e912:	4b08      	ldr	r3, [pc, #32]	; (801e934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801e914:	9100      	str	r1, [sp, #0]
 801e916:	4669      	mov	r1, sp
 801e918:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e91c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e920:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e924:	f7ff ffd8 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e928:	b003      	add	sp, #12
 801e92a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e92e:	bf00      	nop
 801e930:	2000bfe2 	.word	0x2000bfe2
 801e934:	2000bfe4 	.word	0x2000bfe4

0801e938 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e938:	4b03      	ldr	r3, [pc, #12]	; (801e948 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e93a:	6818      	ldr	r0, [r3, #0]
 801e93c:	b110      	cbz	r0, 801e944 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e93e:	6803      	ldr	r3, [r0, #0]
 801e940:	699b      	ldr	r3, [r3, #24]
 801e942:	4718      	bx	r3
 801e944:	4770      	bx	lr
 801e946:	bf00      	nop
 801e948:	2000c06c 	.word	0x2000c06c

0801e94c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e94c:	4770      	bx	lr
	...

0801e950 <_ZN8touchgfx11Application4drawEv>:
 801e950:	4b09      	ldr	r3, [pc, #36]	; (801e978 <_ZN8touchgfx11Application4drawEv+0x28>)
 801e952:	b507      	push	{r0, r1, r2, lr}
 801e954:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e958:	2100      	movs	r1, #0
 801e95a:	4b08      	ldr	r3, [pc, #32]	; (801e97c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801e95c:	9100      	str	r1, [sp, #0]
 801e95e:	4669      	mov	r1, sp
 801e960:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e964:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e968:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e96c:	6803      	ldr	r3, [r0, #0]
 801e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e970:	4798      	blx	r3
 801e972:	b003      	add	sp, #12
 801e974:	f85d fb04 	ldr.w	pc, [sp], #4
 801e978:	2000bfe2 	.word	0x2000bfe2
 801e97c:	2000bfe4 	.word	0x2000bfe4

0801e980 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e980:	4b03      	ldr	r3, [pc, #12]	; (801e990 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e982:	6818      	ldr	r0, [r3, #0]
 801e984:	b110      	cbz	r0, 801e98c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e986:	6803      	ldr	r3, [r0, #0]
 801e988:	69db      	ldr	r3, [r3, #28]
 801e98a:	4718      	bx	r3
 801e98c:	4770      	bx	lr
 801e98e:	bf00      	nop
 801e990:	2000c06c 	.word	0x2000c06c

0801e994 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e994:	4b03      	ldr	r3, [pc, #12]	; (801e9a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e996:	6818      	ldr	r0, [r3, #0]
 801e998:	b110      	cbz	r0, 801e9a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e99a:	6803      	ldr	r3, [r0, #0]
 801e99c:	6a1b      	ldr	r3, [r3, #32]
 801e99e:	4718      	bx	r3
 801e9a0:	4770      	bx	lr
 801e9a2:	bf00      	nop
 801e9a4:	2000c06c 	.word	0x2000c06c

0801e9a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e9a8:	4b03      	ldr	r3, [pc, #12]	; (801e9b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e9aa:	6818      	ldr	r0, [r3, #0]
 801e9ac:	b110      	cbz	r0, 801e9b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e9ae:	6803      	ldr	r3, [r0, #0]
 801e9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9b2:	4718      	bx	r3
 801e9b4:	4770      	bx	lr
 801e9b6:	bf00      	nop
 801e9b8:	2000c06c 	.word	0x2000c06c

0801e9bc <_ZN8touchgfx11Application15handleTickEventEv>:
 801e9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9c0:	4d3a      	ldr	r5, [pc, #232]	; (801eaac <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801e9c2:	4604      	mov	r4, r0
 801e9c4:	6828      	ldr	r0, [r5, #0]
 801e9c6:	b140      	cbz	r0, 801e9da <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e9c8:	7a03      	ldrb	r3, [r0, #8]
 801e9ca:	b933      	cbnz	r3, 801e9da <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e9cc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e9d0:	6803      	ldr	r3, [r0, #0]
 801e9d2:	689b      	ldr	r3, [r3, #8]
 801e9d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9d8:	4718      	bx	r3
 801e9da:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801e9de:	b97b      	cbnz	r3, 801ea00 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e9e0:	b170      	cbz	r0, 801ea00 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e9e2:	7a03      	ldrb	r3, [r0, #8]
 801e9e4:	b163      	cbz	r3, 801ea00 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e9e6:	4b32      	ldr	r3, [pc, #200]	; (801eab0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801e9e8:	6818      	ldr	r0, [r3, #0]
 801e9ea:	b110      	cbz	r0, 801e9f2 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801e9ec:	6803      	ldr	r3, [r0, #0]
 801e9ee:	691b      	ldr	r3, [r3, #16]
 801e9f0:	4798      	blx	r3
 801e9f2:	6828      	ldr	r0, [r5, #0]
 801e9f4:	6803      	ldr	r3, [r0, #0]
 801e9f6:	68db      	ldr	r3, [r3, #12]
 801e9f8:	4798      	blx	r3
 801e9fa:	2301      	movs	r3, #1
 801e9fc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ea00:	2500      	movs	r5, #0
 801ea02:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ea06:	42a8      	cmp	r0, r5
 801ea08:	dd0c      	ble.n	801ea24 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801ea0a:	1963      	adds	r3, r4, r5
 801ea0c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ea10:	b132      	cbz	r2, 801ea20 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801ea12:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ea16:	4413      	add	r3, r2
 801ea18:	6858      	ldr	r0, [r3, #4]
 801ea1a:	6803      	ldr	r3, [r0, #0]
 801ea1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea1e:	4798      	blx	r3
 801ea20:	3501      	adds	r5, #1
 801ea22:	e7ee      	b.n	801ea02 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801ea24:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801ea28:	3801      	subs	r0, #1
 801ea2a:	f04f 0c00 	mov.w	ip, #0
 801ea2e:	3678      	adds	r6, #120	; 0x78
 801ea30:	1c43      	adds	r3, r0, #1
 801ea32:	d033      	beq.n	801ea9c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801ea34:	1823      	adds	r3, r4, r0
 801ea36:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ea3a:	bb6a      	cbnz	r2, 801ea98 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801ea3c:	b281      	uxth	r1, r0
 801ea3e:	1d25      	adds	r5, r4, #4
 801ea40:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801ea44:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801ea48:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801ea4c:	4293      	cmp	r3, r2
 801ea4e:	dc0a      	bgt.n	801ea66 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ea50:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801ea54:	4422      	add	r2, r4
 801ea56:	18b1      	adds	r1, r6, r2
 801ea58:	b289      	uxth	r1, r1
 801ea5a:	428b      	cmp	r3, r1
 801ea5c:	d919      	bls.n	801ea92 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801ea5e:	7851      	ldrb	r1, [r2, #1]
 801ea60:	f802 1b01 	strb.w	r1, [r2], #1
 801ea64:	e7f7      	b.n	801ea56 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801ea66:	682f      	ldr	r7, [r5, #0]
 801ea68:	f105 0804 	add.w	r8, r5, #4
 801ea6c:	45b9      	cmp	r9, r7
 801ea6e:	d10d      	bne.n	801ea8c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801ea70:	4696      	mov	lr, r2
 801ea72:	f1be 0f1e 	cmp.w	lr, #30
 801ea76:	dc06      	bgt.n	801ea86 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801ea78:	f10e 0e01 	add.w	lr, lr, #1
 801ea7c:	686f      	ldr	r7, [r5, #4]
 801ea7e:	4573      	cmp	r3, lr
 801ea80:	f845 7b04 	str.w	r7, [r5], #4
 801ea84:	dcf5      	bgt.n	801ea72 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ea86:	3b01      	subs	r3, #1
 801ea88:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801ea8c:	3201      	adds	r2, #1
 801ea8e:	4645      	mov	r5, r8
 801ea90:	e7da      	b.n	801ea48 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801ea92:	4423      	add	r3, r4
 801ea94:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801ea98:	3801      	subs	r0, #1
 801ea9a:	e7c9      	b.n	801ea30 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801ea9c:	4b04      	ldr	r3, [pc, #16]	; (801eab0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801ea9e:	6818      	ldr	r0, [r3, #0]
 801eaa0:	b110      	cbz	r0, 801eaa8 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801eaa2:	6803      	ldr	r3, [r0, #0]
 801eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaa6:	e795      	b.n	801e9d4 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801eaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eaac:	2000c070 	.word	0x2000c070
 801eab0:	2000c06c 	.word	0x2000c06c

0801eab4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801eab4:	b570      	push	{r4, r5, r6, lr}
 801eab6:	4606      	mov	r6, r0
 801eab8:	460c      	mov	r4, r1
 801eaba:	b929      	cbnz	r1, 801eac8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801eabc:	4b0c      	ldr	r3, [pc, #48]	; (801eaf0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801eabe:	2164      	movs	r1, #100	; 0x64
 801eac0:	4a0c      	ldr	r2, [pc, #48]	; (801eaf4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801eac2:	480d      	ldr	r0, [pc, #52]	; (801eaf8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801eac4:	f00c f88e 	bl	802abe4 <__assert_func>
 801eac8:	2300      	movs	r3, #0
 801eaca:	4d0c      	ldr	r5, [pc, #48]	; (801eafc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801eacc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ead0:	6828      	ldr	r0, [r5, #0]
 801ead2:	b110      	cbz	r0, 801eada <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ead4:	6803      	ldr	r3, [r0, #0]
 801ead6:	695b      	ldr	r3, [r3, #20]
 801ead8:	4798      	blx	r3
 801eada:	602c      	str	r4, [r5, #0]
 801eadc:	4620      	mov	r0, r4
 801eade:	6823      	ldr	r3, [r4, #0]
 801eae0:	68db      	ldr	r3, [r3, #12]
 801eae2:	4798      	blx	r3
 801eae4:	6833      	ldr	r3, [r6, #0]
 801eae6:	4630      	mov	r0, r6
 801eae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eaee:	4718      	bx	r3
 801eaf0:	0802f100 	.word	0x0802f100
 801eaf4:	0802f1c8 	.word	0x0802f1c8
 801eaf8:	0802f10a 	.word	0x0802f10a
 801eafc:	2000c06c 	.word	0x2000c06c

0801eb00 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801eb00:	b510      	push	{r4, lr}
 801eb02:	f9b1 4000 	ldrsh.w	r4, [r1]
 801eb06:	888a      	ldrh	r2, [r1, #4]
 801eb08:	f9b0 3000 	ldrsh.w	r3, [r0]
 801eb0c:	4422      	add	r2, r4
 801eb0e:	b212      	sxth	r2, r2
 801eb10:	4293      	cmp	r3, r2
 801eb12:	da15      	bge.n	801eb40 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801eb14:	8882      	ldrh	r2, [r0, #4]
 801eb16:	4413      	add	r3, r2
 801eb18:	b21b      	sxth	r3, r3
 801eb1a:	429c      	cmp	r4, r3
 801eb1c:	da10      	bge.n	801eb40 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801eb1e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801eb22:	88c9      	ldrh	r1, [r1, #6]
 801eb24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801eb28:	4419      	add	r1, r3
 801eb2a:	b209      	sxth	r1, r1
 801eb2c:	428a      	cmp	r2, r1
 801eb2e:	da07      	bge.n	801eb40 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801eb30:	88c0      	ldrh	r0, [r0, #6]
 801eb32:	4410      	add	r0, r2
 801eb34:	b200      	sxth	r0, r0
 801eb36:	4283      	cmp	r3, r0
 801eb38:	bfac      	ite	ge
 801eb3a:	2000      	movge	r0, #0
 801eb3c:	2001      	movlt	r0, #1
 801eb3e:	bd10      	pop	{r4, pc}
 801eb40:	2000      	movs	r0, #0
 801eb42:	e7fc      	b.n	801eb3e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801eb44 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801eb44:	b570      	push	{r4, r5, r6, lr}
 801eb46:	f9b1 4000 	ldrsh.w	r4, [r1]
 801eb4a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801eb4e:	42ac      	cmp	r4, r5
 801eb50:	db18      	blt.n	801eb84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801eb52:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801eb56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801eb5a:	429a      	cmp	r2, r3
 801eb5c:	db12      	blt.n	801eb84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801eb5e:	8886      	ldrh	r6, [r0, #4]
 801eb60:	4435      	add	r5, r6
 801eb62:	888e      	ldrh	r6, [r1, #4]
 801eb64:	4434      	add	r4, r6
 801eb66:	b22d      	sxth	r5, r5
 801eb68:	b224      	sxth	r4, r4
 801eb6a:	42a5      	cmp	r5, r4
 801eb6c:	db0a      	blt.n	801eb84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801eb6e:	88c0      	ldrh	r0, [r0, #6]
 801eb70:	4418      	add	r0, r3
 801eb72:	88cb      	ldrh	r3, [r1, #6]
 801eb74:	441a      	add	r2, r3
 801eb76:	b200      	sxth	r0, r0
 801eb78:	b212      	sxth	r2, r2
 801eb7a:	4290      	cmp	r0, r2
 801eb7c:	bfb4      	ite	lt
 801eb7e:	2000      	movlt	r0, #0
 801eb80:	2001      	movge	r0, #1
 801eb82:	bd70      	pop	{r4, r5, r6, pc}
 801eb84:	2000      	movs	r0, #0
 801eb86:	e7fc      	b.n	801eb82 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801eb88 <_ZN8touchgfx11Application11getInstanceEv>:
 801eb88:	4b01      	ldr	r3, [pc, #4]	; (801eb90 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801eb8a:	6818      	ldr	r0, [r3, #0]
 801eb8c:	4770      	bx	lr
 801eb8e:	bf00      	nop
 801eb90:	2000c07c 	.word	0x2000c07c

0801eb94 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801eb94:	2300      	movs	r3, #0
 801eb96:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801eb9a:	30a8      	adds	r0, #168	; 0xa8
 801eb9c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801eba0:	f802 3b01 	strb.w	r3, [r2], #1
 801eba4:	4282      	cmp	r2, r0
 801eba6:	d1fb      	bne.n	801eba0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801eba8:	4770      	bx	lr

0801ebaa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ebaa:	4603      	mov	r3, r0
 801ebac:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	801a      	strh	r2, [r3, #0]
 801ebb4:	3308      	adds	r3, #8
 801ebb6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ebba:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ebbe:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ebc2:	428b      	cmp	r3, r1
 801ebc4:	d1f5      	bne.n	801ebb2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ebc6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ebca:	4770      	bx	lr

0801ebcc <_ZN8touchgfx11ApplicationC1Ev>:
 801ebcc:	b570      	push	{r4, r5, r6, lr}
 801ebce:	4b16      	ldr	r3, [pc, #88]	; (801ec28 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801ebd0:	2500      	movs	r5, #0
 801ebd2:	4604      	mov	r4, r0
 801ebd4:	30a8      	adds	r0, #168	; 0xa8
 801ebd6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801ebda:	f820 5c24 	strh.w	r5, [r0, #-36]
 801ebde:	f7ff ffe4 	bl	801ebaa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ebe2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ebe6:	f7ff ffe0 	bl	801ebaa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ebea:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801ebee:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801ebf2:	490e      	ldr	r1, [pc, #56]	; (801ec2c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801ebf4:	480e      	ldr	r0, [pc, #56]	; (801ec30 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801ebf6:	f00a fadb 	bl	80291b0 <CRC_Lock>
 801ebfa:	4e0e      	ldr	r6, [pc, #56]	; (801ec34 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801ebfc:	4b0e      	ldr	r3, [pc, #56]	; (801ec38 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ebfe:	b158      	cbz	r0, 801ec18 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801ec00:	801d      	strh	r5, [r3, #0]
 801ec02:	2300      	movs	r3, #0
 801ec04:	4a0d      	ldr	r2, [pc, #52]	; (801ec3c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ec06:	4620      	mov	r0, r4
 801ec08:	6013      	str	r3, [r2, #0]
 801ec0a:	4a0d      	ldr	r2, [pc, #52]	; (801ec40 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ec0c:	6033      	str	r3, [r6, #0]
 801ec0e:	6013      	str	r3, [r2, #0]
 801ec10:	f7ff ffc0 	bl	801eb94 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ec14:	4620      	mov	r0, r4
 801ec16:	bd70      	pop	{r4, r5, r6, pc}
 801ec18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ec1c:	2002      	movs	r0, #2
 801ec1e:	801a      	strh	r2, [r3, #0]
 801ec20:	6030      	str	r0, [r6, #0]
 801ec22:	f000 ff81 	bl	801fb28 <_ZN8touchgfx6Screen4drawEv>
 801ec26:	e7ec      	b.n	801ec02 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801ec28:	0802f194 	.word	0x0802f194
 801ec2c:	b5e8b5cd 	.word	0xb5e8b5cd
 801ec30:	f407a5c2 	.word	0xf407a5c2
 801ec34:	2000c06c 	.word	0x2000c06c
 801ec38:	20000088 	.word	0x20000088
 801ec3c:	2000c07c 	.word	0x2000c07c
 801ec40:	2000c070 	.word	0x2000c070

0801ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ec44:	2300      	movs	r3, #0
 801ec46:	8003      	strh	r3, [r0, #0]
 801ec48:	8043      	strh	r3, [r0, #2]
 801ec4a:	8083      	strh	r3, [r0, #4]
 801ec4c:	80c3      	strh	r3, [r0, #6]
 801ec4e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801ec52:	4293      	cmp	r3, r2
 801ec54:	b530      	push	{r4, r5, lr}
 801ec56:	d912      	bls.n	801ec7e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ec58:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801ec5c:	3b01      	subs	r3, #1
 801ec5e:	6825      	ldr	r5, [r4, #0]
 801ec60:	b29b      	uxth	r3, r3
 801ec62:	6005      	str	r5, [r0, #0]
 801ec64:	4293      	cmp	r3, r2
 801ec66:	6865      	ldr	r5, [r4, #4]
 801ec68:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801ec6c:	6045      	str	r5, [r0, #4]
 801ec6e:	d906      	bls.n	801ec7e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ec70:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801ec74:	681d      	ldr	r5, [r3, #0]
 801ec76:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801ec7a:	685d      	ldr	r5, [r3, #4]
 801ec7c:	6065      	str	r5, [r4, #4]
 801ec7e:	bd30      	pop	{r4, r5, pc}

0801ec80 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ec80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ec82:	466b      	mov	r3, sp
 801ec84:	4604      	mov	r4, r0
 801ec86:	e883 0006 	stmia.w	r3, {r1, r2}
 801ec8a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ec8e:	2a07      	cmp	r2, #7
 801ec90:	d906      	bls.n	801eca0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ec92:	4b09      	ldr	r3, [pc, #36]	; (801ecb8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ec94:	f44f 7102 	mov.w	r1, #520	; 0x208
 801ec98:	4a08      	ldr	r2, [pc, #32]	; (801ecbc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ec9a:	4809      	ldr	r0, [pc, #36]	; (801ecc0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ec9c:	f00b ffa2 	bl	802abe4 <__assert_func>
 801eca0:	1c51      	adds	r1, r2, #1
 801eca2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801eca6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ecaa:	cb03      	ldmia	r3!, {r0, r1}
 801ecac:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ecb0:	6069      	str	r1, [r5, #4]
 801ecb2:	b003      	add	sp, #12
 801ecb4:	bd30      	pop	{r4, r5, pc}
 801ecb6:	bf00      	nop
 801ecb8:	0802f134 	.word	0x0802f134
 801ecbc:	0802f20c 	.word	0x0802f20c
 801ecc0:	0802f163 	.word	0x0802f163

0801ecc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ecc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ecc8:	b089      	sub	sp, #36	; 0x24
 801ecca:	4606      	mov	r6, r0
 801eccc:	466c      	mov	r4, sp
 801ecce:	4620      	mov	r0, r4
 801ecd0:	e884 0006 	stmia.w	r4, {r1, r2}
 801ecd4:	f7fc fc4c 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecd8:	bbb0      	cbnz	r0, 801ed48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801ecda:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801ecde:	b1fd      	cbz	r5, 801ed20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801ece0:	3d01      	subs	r5, #1
 801ece2:	af04      	add	r7, sp, #16
 801ece4:	f04f 090a 	mov.w	r9, #10
 801ece8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801ecec:	ab02      	add	r3, sp, #8
 801ecee:	fa1f f885 	uxth.w	r8, r5
 801ecf2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ecf6:	6851      	ldr	r1, [r2, #4]
 801ecf8:	c303      	stmia	r3!, {r0, r1}
 801ecfa:	4621      	mov	r1, r4
 801ecfc:	a802      	add	r0, sp, #8
 801ecfe:	f7ff ff21 	bl	801eb44 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ed02:	bb08      	cbnz	r0, 801ed48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801ed04:	a902      	add	r1, sp, #8
 801ed06:	4620      	mov	r0, r4
 801ed08:	f7ff ff1c 	bl	801eb44 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ed0c:	b1f8      	cbz	r0, 801ed4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801ed0e:	4642      	mov	r2, r8
 801ed10:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ed14:	a806      	add	r0, sp, #24
 801ed16:	f7ff ff95 	bl	801ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ed1a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801ed1e:	d2e3      	bcs.n	801ece8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801ed20:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801ed24:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801ed28:	2b08      	cmp	r3, #8
 801ed2a:	d108      	bne.n	801ed3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ed2c:	4629      	mov	r1, r5
 801ed2e:	a806      	add	r0, sp, #24
 801ed30:	2207      	movs	r2, #7
 801ed32:	f7ff ff87 	bl	801ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ed36:	a906      	add	r1, sp, #24
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f7fd fe14 	bl	801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ed3e:	4628      	mov	r0, r5
 801ed40:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ed44:	f7ff ff9c 	bl	801ec80 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ed48:	b009      	add	sp, #36	; 0x24
 801ed4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed4e:	4621      	mov	r1, r4
 801ed50:	a802      	add	r0, sp, #8
 801ed52:	f7ff fed5 	bl	801eb00 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ed56:	b150      	cbz	r0, 801ed6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801ed58:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ed5c:	a806      	add	r0, sp, #24
 801ed5e:	4642      	mov	r2, r8
 801ed60:	f7ff ff70 	bl	801ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ed64:	a902      	add	r1, sp, #8
 801ed66:	4620      	mov	r0, r4
 801ed68:	f7fd fdfd 	bl	801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ed6c:	e7d5      	b.n	801ed1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ed6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ed72:	e887 0003 	stmia.w	r7, {r0, r1}
 801ed76:	a902      	add	r1, sp, #8
 801ed78:	4638      	mov	r0, r7
 801ed7a:	f7fd fdf4 	bl	801c966 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ed7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ed82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ed86:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ed8a:	fb13 f302 	smulbb	r3, r3, r2
 801ed8e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ed92:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ed96:	fb11 f102 	smulbb	r1, r1, r2
 801ed9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ed9e:	fb09 f303 	mul.w	r3, r9, r3
 801eda2:	fb12 1100 	smlabb	r1, r2, r0, r1
 801eda6:	220b      	movs	r2, #11
 801eda8:	434a      	muls	r2, r1
 801edaa:	4293      	cmp	r3, r2
 801edac:	dab5      	bge.n	801ed1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801edae:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801edb2:	a806      	add	r0, sp, #24
 801edb4:	4642      	mov	r2, r8
 801edb6:	f7ff ff45 	bl	801ec44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801edba:	e897 0003 	ldmia.w	r7, {r0, r1}
 801edbe:	e884 0003 	stmia.w	r4, {r0, r1}
 801edc2:	e7aa      	b.n	801ed1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801edc4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801edc4:	4b1d      	ldr	r3, [pc, #116]	; (801ee3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801edc6:	b530      	push	{r4, r5, lr}
 801edc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801edcc:	b085      	sub	sp, #20
 801edce:	4b1c      	ldr	r3, [pc, #112]	; (801ee40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801edd0:	460c      	mov	r4, r1
 801edd2:	2100      	movs	r1, #0
 801edd4:	4605      	mov	r5, r0
 801edd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801edda:	6820      	ldr	r0, [r4, #0]
 801eddc:	9100      	str	r1, [sp, #0]
 801edde:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ede2:	ab02      	add	r3, sp, #8
 801ede4:	6861      	ldr	r1, [r4, #4]
 801ede6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801edea:	c303      	stmia	r3!, {r0, r1}
 801edec:	4669      	mov	r1, sp
 801edee:	a802      	add	r0, sp, #8
 801edf0:	f7fc fb7a 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801edf4:	ab02      	add	r3, sp, #8
 801edf6:	cb03      	ldmia	r3!, {r0, r1}
 801edf8:	4b12      	ldr	r3, [pc, #72]	; (801ee44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801edfa:	6020      	str	r0, [r4, #0]
 801edfc:	6818      	ldr	r0, [r3, #0]
 801edfe:	6061      	str	r1, [r4, #4]
 801ee00:	b138      	cbz	r0, 801ee12 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801ee02:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ee06:	b133      	cbz	r3, 801ee16 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801ee08:	6821      	ldr	r1, [r4, #0]
 801ee0a:	4628      	mov	r0, r5
 801ee0c:	6862      	ldr	r2, [r4, #4]
 801ee0e:	f7ff ff59 	bl	801ecc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ee12:	b005      	add	sp, #20
 801ee14:	bd30      	pop	{r4, r5, pc}
 801ee16:	6803      	ldr	r3, [r0, #0]
 801ee18:	4621      	mov	r1, r4
 801ee1a:	689b      	ldr	r3, [r3, #8]
 801ee1c:	4798      	blx	r3
 801ee1e:	4b0a      	ldr	r3, [pc, #40]	; (801ee48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801ee20:	6818      	ldr	r0, [r3, #0]
 801ee22:	b118      	cbz	r0, 801ee2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801ee24:	6803      	ldr	r3, [r0, #0]
 801ee26:	4621      	mov	r1, r4
 801ee28:	689b      	ldr	r3, [r3, #8]
 801ee2a:	4798      	blx	r3
 801ee2c:	4b07      	ldr	r3, [pc, #28]	; (801ee4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801ee2e:	4621      	mov	r1, r4
 801ee30:	6818      	ldr	r0, [r3, #0]
 801ee32:	6803      	ldr	r3, [r0, #0]
 801ee34:	695b      	ldr	r3, [r3, #20]
 801ee36:	4798      	blx	r3
 801ee38:	e7eb      	b.n	801ee12 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801ee3a:	bf00      	nop
 801ee3c:	2000bfe2 	.word	0x2000bfe2
 801ee40:	2000bfe4 	.word	0x2000bfe4
 801ee44:	2000c06c 	.word	0x2000c06c
 801ee48:	2000c068 	.word	0x2000c068
 801ee4c:	2000bff0 	.word	0x2000bff0

0801ee50 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee54:	4604      	mov	r4, r0
 801ee56:	b09b      	sub	sp, #108	; 0x6c
 801ee58:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801ee5c:	b129      	cbz	r1, 801ee6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801ee5e:	2300      	movs	r3, #0
 801ee60:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ee64:	b01b      	add	sp, #108	; 0x6c
 801ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee6a:	4baf      	ldr	r3, [pc, #700]	; (801f128 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	b33b      	cbz	r3, 801eec0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ee70:	4dae      	ldr	r5, [pc, #696]	; (801f12c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801ee72:	4628      	mov	r0, r5
 801ee74:	f7fc fb7c 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ee78:	4606      	mov	r6, r0
 801ee7a:	bb08      	cbnz	r0, 801eec0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ee7c:	4628      	mov	r0, r5
 801ee7e:	f7ff fce9 	bl	801e854 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ee82:	6829      	ldr	r1, [r5, #0]
 801ee84:	686a      	ldr	r2, [r5, #4]
 801ee86:	4620      	mov	r0, r4
 801ee88:	f7ff ff1c 	bl	801ecc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ee8c:	802e      	strh	r6, [r5, #0]
 801ee8e:	806e      	strh	r6, [r5, #2]
 801ee90:	80ae      	strh	r6, [r5, #4]
 801ee92:	80ee      	strh	r6, [r5, #6]
 801ee94:	4fa6      	ldr	r7, [pc, #664]	; (801f130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ee96:	a809      	add	r0, sp, #36	; 0x24
 801ee98:	f7ff fe87 	bl	801ebaa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ee9c:	883d      	ldrh	r5, [r7, #0]
 801ee9e:	462e      	mov	r6, r5
 801eea0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801eea4:	42b3      	cmp	r3, r6
 801eea6:	d910      	bls.n	801eeca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801eea8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801eeac:	3601      	adds	r6, #1
 801eeae:	a809      	add	r0, sp, #36	; 0x24
 801eeb0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801eeb4:	b2b6      	uxth	r6, r6
 801eeb6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801eeba:	f7ff fee1 	bl	801ec80 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801eebe:	e7ef      	b.n	801eea0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801eec0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d1e5      	bne.n	801ee94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801eec8:	e7cc      	b.n	801ee64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eeca:	462e      	mov	r6, r5
 801eecc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801eed0:	42b3      	cmp	r3, r6
 801eed2:	d90b      	bls.n	801eeec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801eed4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801eed8:	3601      	adds	r6, #1
 801eeda:	4620      	mov	r0, r4
 801eedc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801eee0:	b2b6      	uxth	r6, r6
 801eee2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801eee6:	f7ff feed 	bl	801ecc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801eeea:	e7ef      	b.n	801eecc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801eeec:	4e91      	ldr	r6, [pc, #580]	; (801f134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801eeee:	6833      	ldr	r3, [r6, #0]
 801eef0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801eef4:	2b01      	cmp	r3, #1
 801eef6:	f040 8092 	bne.w	801f01e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801eefa:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801eefe:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ef02:	f04f 0900 	mov.w	r9, #0
 801ef06:	33aa      	adds	r3, #170	; 0xaa
 801ef08:	42a8      	cmp	r0, r5
 801ef0a:	f103 0308 	add.w	r3, r3, #8
 801ef0e:	dd0a      	ble.n	801ef26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801ef10:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ef14:	3501      	adds	r5, #1
 801ef16:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ef1a:	440a      	add	r2, r1
 801ef1c:	b212      	sxth	r2, r2
 801ef1e:	4591      	cmp	r9, r2
 801ef20:	bfb8      	it	lt
 801ef22:	4691      	movlt	r9, r2
 801ef24:	e7f0      	b.n	801ef08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801ef26:	4b84      	ldr	r3, [pc, #528]	; (801f138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801ef28:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801f140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801ef2c:	881d      	ldrh	r5, [r3, #0]
 801ef2e:	2300      	movs	r3, #0
 801ef30:	2d0f      	cmp	r5, #15
 801ef32:	bf8c      	ite	hi
 801ef34:	08ed      	lsrhi	r5, r5, #3
 801ef36:	2501      	movls	r5, #1
 801ef38:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ef3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ef40:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801ef44:	6830      	ldr	r0, [r6, #0]
 801ef46:	440b      	add	r3, r1
 801ef48:	6802      	ldr	r2, [r0, #0]
 801ef4a:	b21b      	sxth	r3, r3
 801ef4c:	4599      	cmp	r9, r3
 801ef4e:	dd49      	ble.n	801efe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801ef50:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801ef54:	4798      	blx	r3
 801ef56:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ef5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ef5e:	4413      	add	r3, r2
 801ef60:	b21b      	sxth	r3, r3
 801ef62:	195a      	adds	r2, r3, r5
 801ef64:	4290      	cmp	r0, r2
 801ef66:	da07      	bge.n	801ef78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801ef68:	4581      	cmp	r9, r0
 801ef6a:	dd05      	ble.n	801ef78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801ef6c:	4298      	cmp	r0, r3
 801ef6e:	da33      	bge.n	801efd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	dd31      	ble.n	801efd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801ef74:	4648      	mov	r0, r9
 801ef76:	e004      	b.n	801ef82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801ef78:	4298      	cmp	r0, r3
 801ef7a:	dbfb      	blt.n	801ef74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801ef7c:	4548      	cmp	r0, r9
 801ef7e:	bfa8      	it	ge
 801ef80:	4648      	movge	r0, r9
 801ef82:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ef86:	2100      	movs	r1, #0
 801ef88:	1ac0      	subs	r0, r0, r3
 801ef8a:	f8b7 a000 	ldrh.w	sl, [r7]
 801ef8e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ef92:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ef96:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ef9a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ef9e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801efa2:	4553      	cmp	r3, sl
 801efa4:	d9ca      	bls.n	801ef3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801efa6:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801efaa:	ab07      	add	r3, sp, #28
 801efac:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801efb0:	6851      	ldr	r1, [r2, #4]
 801efb2:	c303      	stmia	r3!, {r0, r1}
 801efb4:	a807      	add	r0, sp, #28
 801efb6:	a905      	add	r1, sp, #20
 801efb8:	f7fc fa96 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801efbc:	a807      	add	r0, sp, #28
 801efbe:	f7fc fad7 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801efc2:	b920      	cbnz	r0, 801efce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801efc4:	6823      	ldr	r3, [r4, #0]
 801efc6:	a907      	add	r1, sp, #28
 801efc8:	4620      	mov	r0, r4
 801efca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801efcc:	4798      	blx	r3
 801efce:	f10a 0a01 	add.w	sl, sl, #1
 801efd2:	fa1f fa8a 	uxth.w	sl, sl
 801efd6:	e7e2      	b.n	801ef9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801efd8:	6830      	ldr	r0, [r6, #0]
 801efda:	2101      	movs	r1, #1
 801efdc:	6803      	ldr	r3, [r0, #0]
 801efde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801efe0:	4798      	blx	r3
 801efe2:	e7ab      	b.n	801ef3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801efe4:	69d3      	ldr	r3, [r2, #28]
 801efe6:	4798      	blx	r3
 801efe8:	4b54      	ldr	r3, [pc, #336]	; (801f13c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801efea:	781b      	ldrb	r3, [r3, #0]
 801efec:	2b00      	cmp	r3, #0
 801efee:	f43f af39 	beq.w	801ee64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eff2:	2300      	movs	r3, #0
 801eff4:	883d      	ldrh	r5, [r7, #0]
 801eff6:	34ea      	adds	r4, #234	; 0xea
 801eff8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801effc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f000:	42ab      	cmp	r3, r5
 801f002:	f67f af2f 	bls.w	801ee64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f006:	ab1a      	add	r3, sp, #104	; 0x68
 801f008:	4620      	mov	r0, r4
 801f00a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f00e:	3501      	adds	r5, #1
 801f010:	3b44      	subs	r3, #68	; 0x44
 801f012:	b2ad      	uxth	r5, r5
 801f014:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f018:	f7ff fe32 	bl	801ec80 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f01c:	e7ee      	b.n	801effc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801f01e:	2b02      	cmp	r3, #2
 801f020:	d16a      	bne.n	801f0f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801f022:	f8df a120 	ldr.w	sl, [pc, #288]	; 801f144 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801f026:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f02a:	42ab      	cmp	r3, r5
 801f02c:	d9dc      	bls.n	801efe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801f02e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f032:	ab03      	add	r3, sp, #12
 801f034:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f038:	6851      	ldr	r1, [r2, #4]
 801f03a:	c303      	stmia	r3!, {r0, r1}
 801f03c:	f89a 3000 	ldrb.w	r3, [sl]
 801f040:	2b01      	cmp	r3, #1
 801f042:	d102      	bne.n	801f04a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801f044:	a803      	add	r0, sp, #12
 801f046:	f7ff fc5f 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f04a:	a803      	add	r0, sp, #12
 801f04c:	f7fc fa90 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f050:	2800      	cmp	r0, #0
 801f052:	d14a      	bne.n	801f0ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801f054:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f058:	f10d 0914 	add.w	r9, sp, #20
 801f05c:	f10d 081c 	add.w	r8, sp, #28
 801f060:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f064:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f068:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801f06c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f070:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f074:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f078:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801f07c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801f080:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f084:	44dc      	add	ip, fp
 801f086:	6830      	ldr	r0, [r6, #0]
 801f088:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f08c:	ebac 0c02 	sub.w	ip, ip, r2
 801f090:	f8d0 e000 	ldr.w	lr, [r0]
 801f094:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f098:	fa1f fc8c 	uxth.w	ip, ip
 801f09c:	f8cd c000 	str.w	ip, [sp]
 801f0a0:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801f0a4:	47d8      	blx	fp
 801f0a6:	f89a 3000 	ldrb.w	r3, [sl]
 801f0aa:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f0ae:	2b01      	cmp	r3, #1
 801f0b0:	d11e      	bne.n	801f0f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801f0b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801f0b6:	e888 0003 	stmia.w	r8, {r0, r1}
 801f0ba:	4640      	mov	r0, r8
 801f0bc:	f7ff fbca 	bl	801e854 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f0c0:	6823      	ldr	r3, [r4, #0]
 801f0c2:	4641      	mov	r1, r8
 801f0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	4798      	blx	r3
 801f0ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f0ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f0d2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801f0d6:	4413      	add	r3, r2
 801f0d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801f0dc:	440a      	add	r2, r1
 801f0de:	b21b      	sxth	r3, r3
 801f0e0:	b212      	sxth	r2, r2
 801f0e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	dbc6      	blt.n	801f078 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801f0ea:	3501      	adds	r5, #1
 801f0ec:	b2ad      	uxth	r5, r5
 801f0ee:	e79a      	b.n	801f026 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801f0f0:	6823      	ldr	r3, [r4, #0]
 801f0f2:	4649      	mov	r1, r9
 801f0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0f6:	e7e6      	b.n	801f0c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801f0f8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f0fc:	42ab      	cmp	r3, r5
 801f0fe:	f67f af73 	bls.w	801efe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801f102:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f106:	ab07      	add	r3, sp, #28
 801f108:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f10c:	6851      	ldr	r1, [r2, #4]
 801f10e:	c303      	stmia	r3!, {r0, r1}
 801f110:	a807      	add	r0, sp, #28
 801f112:	f7fc fa2d 	bl	801b570 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f116:	b920      	cbnz	r0, 801f122 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801f118:	6823      	ldr	r3, [r4, #0]
 801f11a:	a907      	add	r1, sp, #28
 801f11c:	4620      	mov	r0, r4
 801f11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f120:	4798      	blx	r3
 801f122:	3501      	adds	r5, #1
 801f124:	b2ad      	uxth	r5, r5
 801f126:	e7e7      	b.n	801f0f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801f128:	2000c068 	.word	0x2000c068
 801f12c:	2000c074 	.word	0x2000c074
 801f130:	20000088 	.word	0x20000088
 801f134:	2000bff0 	.word	0x2000bff0
 801f138:	2000bfe4 	.word	0x2000bfe4
 801f13c:	2000bfec 	.word	0x2000bfec
 801f140:	2000bfe2 	.word	0x2000bfe2
 801f144:	2000bfe6 	.word	0x2000bfe6

0801f148 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f148:	4b03      	ldr	r3, [pc, #12]	; (801f158 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f14a:	2200      	movs	r2, #0
 801f14c:	801a      	strh	r2, [r3, #0]
 801f14e:	805a      	strh	r2, [r3, #2]
 801f150:	809a      	strh	r2, [r3, #4]
 801f152:	80da      	strh	r2, [r3, #6]
 801f154:	4770      	bx	lr
 801f156:	bf00      	nop
 801f158:	2000c074 	.word	0x2000c074

0801f15c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801f15c:	2000      	movs	r0, #0
 801f15e:	4770      	bx	lr

0801f160 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801f160:	2000      	movs	r0, #0
 801f162:	4770      	bx	lr

0801f164 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f164:	b508      	push	{r3, lr}
 801f166:	6803      	ldr	r3, [r0, #0]
 801f168:	68db      	ldr	r3, [r3, #12]
 801f16a:	4798      	blx	r3
 801f16c:	b128      	cbz	r0, 801f17a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f16e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801f172:	7a80      	ldrb	r0, [r0, #10]
 801f174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f178:	4318      	orrs	r0, r3
 801f17a:	bd08      	pop	{r3, pc}

0801f17c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801f17c:	b40e      	push	{r1, r2, r3}
 801f17e:	b533      	push	{r0, r1, r4, r5, lr}
 801f180:	ab05      	add	r3, sp, #20
 801f182:	f853 2b04 	ldr.w	r2, [r3], #4
 801f186:	9301      	str	r3, [sp, #4]
 801f188:	4b0a      	ldr	r3, [pc, #40]	; (801f1b4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801f18a:	685c      	ldr	r4, [r3, #4]
 801f18c:	1061      	asrs	r1, r4, #1
 801f18e:	07e4      	lsls	r4, r4, #31
 801f190:	eb00 0501 	add.w	r5, r0, r1
 801f194:	bf46      	itte	mi
 801f196:	681b      	ldrmi	r3, [r3, #0]
 801f198:	5841      	ldrmi	r1, [r0, r1]
 801f19a:	681c      	ldrpl	r4, [r3, #0]
 801f19c:	4628      	mov	r0, r5
 801f19e:	bf48      	it	mi
 801f1a0:	58cc      	ldrmi	r4, [r1, r3]
 801f1a2:	2100      	movs	r1, #0
 801f1a4:	9b01      	ldr	r3, [sp, #4]
 801f1a6:	47a0      	blx	r4
 801f1a8:	b002      	add	sp, #8
 801f1aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f1ae:	b003      	add	sp, #12
 801f1b0:	4770      	bx	lr
 801f1b2:	bf00      	nop
 801f1b4:	20000028 	.word	0x20000028

0801f1b8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801f1b8:	b40c      	push	{r2, r3}
 801f1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f1bc:	ab06      	add	r3, sp, #24
 801f1be:	f853 2b04 	ldr.w	r2, [r3], #4
 801f1c2:	9301      	str	r3, [sp, #4]
 801f1c4:	4b09      	ldr	r3, [pc, #36]	; (801f1ec <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801f1c6:	685d      	ldr	r5, [r3, #4]
 801f1c8:	106c      	asrs	r4, r5, #1
 801f1ca:	07ed      	lsls	r5, r5, #31
 801f1cc:	eb00 0604 	add.w	r6, r0, r4
 801f1d0:	bf45      	ittet	mi
 801f1d2:	681b      	ldrmi	r3, [r3, #0]
 801f1d4:	5900      	ldrmi	r0, [r0, r4]
 801f1d6:	681c      	ldrpl	r4, [r3, #0]
 801f1d8:	58c4      	ldrmi	r4, [r0, r3]
 801f1da:	4630      	mov	r0, r6
 801f1dc:	9b01      	ldr	r3, [sp, #4]
 801f1de:	47a0      	blx	r4
 801f1e0:	b002      	add	sp, #8
 801f1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1e6:	b002      	add	sp, #8
 801f1e8:	4770      	bx	lr
 801f1ea:	bf00      	nop
 801f1ec:	20000028 	.word	0x20000028

0801f1f0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f1f0:	b40e      	push	{r1, r2, r3}
 801f1f2:	b530      	push	{r4, r5, lr}
 801f1f4:	b098      	sub	sp, #96	; 0x60
 801f1f6:	4604      	mov	r4, r0
 801f1f8:	ab1b      	add	r3, sp, #108	; 0x6c
 801f1fa:	a802      	add	r0, sp, #8
 801f1fc:	f853 5b04 	ldr.w	r5, [r3], #4
 801f200:	9301      	str	r3, [sp, #4]
 801f202:	f001 f871 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801f206:	6823      	ldr	r3, [r4, #0]
 801f208:	4620      	mov	r0, r4
 801f20a:	2401      	movs	r4, #1
 801f20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f20e:	4798      	blx	r3
 801f210:	9a01      	ldr	r2, [sp, #4]
 801f212:	4603      	mov	r3, r0
 801f214:	4629      	mov	r1, r5
 801f216:	a802      	add	r0, sp, #8
 801f218:	f001 f883 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f21c:	a802      	add	r0, sp, #8
 801f21e:	f001 f8b9 	bl	8020394 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f222:	b2a3      	uxth	r3, r4
 801f224:	b138      	cbz	r0, 801f236 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801f226:	280a      	cmp	r0, #10
 801f228:	a802      	add	r0, sp, #8
 801f22a:	bf04      	itt	eq
 801f22c:	3301      	addeq	r3, #1
 801f22e:	b21c      	sxtheq	r4, r3
 801f230:	f001 f8b0 	bl	8020394 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f234:	e7f5      	b.n	801f222 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801f236:	4618      	mov	r0, r3
 801f238:	b018      	add	sp, #96	; 0x60
 801f23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f23e:	b003      	add	sp, #12
 801f240:	4770      	bx	lr
	...

0801f244 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f244:	b40e      	push	{r1, r2, r3}
 801f246:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f248:	b098      	sub	sp, #96	; 0x60
 801f24a:	4605      	mov	r5, r0
 801f24c:	4f25      	ldr	r7, [pc, #148]	; (801f2e4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801f24e:	ab1d      	add	r3, sp, #116	; 0x74
 801f250:	a802      	add	r0, sp, #8
 801f252:	ae18      	add	r6, sp, #96	; 0x60
 801f254:	f853 4b04 	ldr.w	r4, [r3], #4
 801f258:	9300      	str	r3, [sp, #0]
 801f25a:	f001 f845 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801f25e:	682b      	ldr	r3, [r5, #0]
 801f260:	4628      	mov	r0, r5
 801f262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f264:	4798      	blx	r3
 801f266:	4621      	mov	r1, r4
 801f268:	2400      	movs	r4, #0
 801f26a:	4603      	mov	r3, r0
 801f26c:	9a00      	ldr	r2, [sp, #0]
 801f26e:	a802      	add	r0, sp, #8
 801f270:	f001 f857 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f274:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801f278:	462a      	mov	r2, r5
 801f27a:	4633      	mov	r3, r6
 801f27c:	4621      	mov	r1, r4
 801f27e:	a802      	add	r0, sp, #8
 801f280:	f001 f9b4 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f284:	b340      	cbz	r0, 801f2d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801f286:	280a      	cmp	r0, #10
 801f288:	d01f      	beq.n	801f2ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f28a:	9901      	ldr	r1, [sp, #4]
 801f28c:	b1e9      	cbz	r1, 801f2ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f28e:	7b4b      	ldrb	r3, [r1, #13]
 801f290:	f891 c008 	ldrb.w	ip, [r1, #8]
 801f294:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f298:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801f29c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801f2a0:	79c9      	ldrb	r1, [r1, #7]
 801f2a2:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801f2a6:	bf18      	it	ne
 801f2a8:	4638      	movne	r0, r7
 801f2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f2ae:	bf08      	it	eq
 801f2b0:	2000      	moveq	r0, #0
 801f2b2:	88aa      	ldrh	r2, [r5, #4]
 801f2b4:	ea41 010e 	orr.w	r1, r1, lr
 801f2b8:	ea43 030c 	orr.w	r3, r3, ip
 801f2bc:	440a      	add	r2, r1
 801f2be:	4303      	orrs	r3, r0
 801f2c0:	1ad3      	subs	r3, r2, r3
 801f2c2:	b29b      	uxth	r3, r3
 801f2c4:	42a3      	cmp	r3, r4
 801f2c6:	bfc8      	it	gt
 801f2c8:	b21c      	sxthgt	r4, r3
 801f2ca:	4633      	mov	r3, r6
 801f2cc:	462a      	mov	r2, r5
 801f2ce:	2100      	movs	r1, #0
 801f2d0:	a802      	add	r0, sp, #8
 801f2d2:	f001 f98b 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f2d6:	e7d5      	b.n	801f284 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801f2d8:	b2a0      	uxth	r0, r4
 801f2da:	b018      	add	sp, #96	; 0x60
 801f2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f2e0:	b003      	add	sp, #12
 801f2e2:	4770      	bx	lr
 801f2e4:	fffffe00 	.word	0xfffffe00

0801f2e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f2e8:	b40e      	push	{r1, r2, r3}
 801f2ea:	b570      	push	{r4, r5, r6, lr}
 801f2ec:	b099      	sub	sp, #100	; 0x64
 801f2ee:	4604      	mov	r4, r0
 801f2f0:	26ff      	movs	r6, #255	; 0xff
 801f2f2:	ab1d      	add	r3, sp, #116	; 0x74
 801f2f4:	a802      	add	r0, sp, #8
 801f2f6:	f853 5b04 	ldr.w	r5, [r3], #4
 801f2fa:	9300      	str	r3, [sp, #0]
 801f2fc:	f000 fff4 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801f300:	6823      	ldr	r3, [r4, #0]
 801f302:	4620      	mov	r0, r4
 801f304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f306:	4798      	blx	r3
 801f308:	4629      	mov	r1, r5
 801f30a:	4603      	mov	r3, r0
 801f30c:	9a00      	ldr	r2, [sp, #0]
 801f30e:	a802      	add	r0, sp, #8
 801f310:	ad18      	add	r5, sp, #96	; 0x60
 801f312:	f001 f806 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f316:	2100      	movs	r1, #0
 801f318:	4622      	mov	r2, r4
 801f31a:	a802      	add	r0, sp, #8
 801f31c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801f320:	462b      	mov	r3, r5
 801f322:	f001 f963 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f326:	b190      	cbz	r0, 801f34e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801f328:	280a      	cmp	r0, #10
 801f32a:	d009      	beq.n	801f340 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801f32c:	9a01      	ldr	r2, [sp, #4]
 801f32e:	b13a      	cbz	r2, 801f340 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801f330:	7923      	ldrb	r3, [r4, #4]
 801f332:	7a12      	ldrb	r2, [r2, #8]
 801f334:	1a9b      	subs	r3, r3, r2
 801f336:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801f33a:	429e      	cmp	r6, r3
 801f33c:	bf28      	it	cs
 801f33e:	461e      	movcs	r6, r3
 801f340:	462b      	mov	r3, r5
 801f342:	4622      	mov	r2, r4
 801f344:	2100      	movs	r1, #0
 801f346:	a802      	add	r0, sp, #8
 801f348:	f001 f950 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f34c:	e7eb      	b.n	801f326 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801f34e:	4630      	mov	r0, r6
 801f350:	b019      	add	sp, #100	; 0x64
 801f352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f356:	b003      	add	sp, #12
 801f358:	4770      	bx	lr

0801f35a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f35a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f35e:	b099      	sub	sp, #100	; 0x64
 801f360:	4606      	mov	r6, r0
 801f362:	4614      	mov	r4, r2
 801f364:	4688      	mov	r8, r1
 801f366:	a802      	add	r0, sp, #8
 801f368:	461d      	mov	r5, r3
 801f36a:	f04f 0b00 	mov.w	fp, #0
 801f36e:	f000 ffbb 	bl	80202e8 <_ZN8touchgfx12TextProviderC1Ev>
 801f372:	6833      	ldr	r3, [r6, #0]
 801f374:	4630      	mov	r0, r6
 801f376:	465f      	mov	r7, fp
 801f378:	46da      	mov	sl, fp
 801f37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f37c:	46d9      	mov	r9, fp
 801f37e:	4798      	blx	r3
 801f380:	462a      	mov	r2, r5
 801f382:	4603      	mov	r3, r0
 801f384:	4621      	mov	r1, r4
 801f386:	a802      	add	r0, sp, #8
 801f388:	f000 ffcb 	bl	8020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f38c:	ab01      	add	r3, sp, #4
 801f38e:	4632      	mov	r2, r6
 801f390:	4641      	mov	r1, r8
 801f392:	a802      	add	r0, sp, #8
 801f394:	f8cd 9004 	str.w	r9, [sp, #4]
 801f398:	f001 f928 	bl	80205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f39c:	4605      	mov	r5, r0
 801f39e:	b108      	cbz	r0, 801f3a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801f3a0:	280a      	cmp	r0, #10
 801f3a2:	d10b      	bne.n	801f3bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801f3a4:	4557      	cmp	r7, sl
 801f3a6:	bf38      	it	cc
 801f3a8:	4657      	movcc	r7, sl
 801f3aa:	f04f 0a00 	mov.w	sl, #0
 801f3ae:	b91d      	cbnz	r5, 801f3b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801f3b0:	4638      	mov	r0, r7
 801f3b2:	b019      	add	sp, #100	; 0x64
 801f3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b8:	46ab      	mov	fp, r5
 801f3ba:	e7e7      	b.n	801f38c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801f3bc:	9a01      	ldr	r2, [sp, #4]
 801f3be:	2a00      	cmp	r2, #0
 801f3c0:	d0fa      	beq.n	801f3b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801f3c2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801f3c6:	4659      	mov	r1, fp
 801f3c8:	6833      	ldr	r3, [r6, #0]
 801f3ca:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801f3ce:	7a94      	ldrb	r4, [r2, #10]
 801f3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f3d2:	4304      	orrs	r4, r0
 801f3d4:	4630      	mov	r0, r6
 801f3d6:	8895      	ldrh	r5, [r2, #4]
 801f3d8:	4798      	blx	r3
 801f3da:	4420      	add	r0, r4
 801f3dc:	4450      	add	r0, sl
 801f3de:	fa1f fa80 	uxth.w	sl, r0
 801f3e2:	e7e4      	b.n	801f3ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801f3e4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f3e4:	b513      	push	{r0, r1, r4, lr}
 801f3e6:	1d01      	adds	r1, r0, #4
 801f3e8:	4603      	mov	r3, r0
 801f3ea:	466a      	mov	r2, sp
 801f3ec:	c903      	ldmia	r1, {r0, r1}
 801f3ee:	e882 0003 	stmia.w	r2, {r0, r1}
 801f3f2:	2100      	movs	r1, #0
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	9100      	str	r1, [sp, #0]
 801f3f8:	6819      	ldr	r1, [r3, #0]
 801f3fa:	690c      	ldr	r4, [r1, #16]
 801f3fc:	4611      	mov	r1, r2
 801f3fe:	47a0      	blx	r4
 801f400:	b002      	add	sp, #8
 801f402:	bd10      	pop	{r4, pc}

0801f404 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f404:	b538      	push	{r3, r4, r5, lr}
 801f406:	680b      	ldr	r3, [r1, #0]
 801f408:	460c      	mov	r4, r1
 801f40a:	4605      	mov	r5, r0
 801f40c:	68db      	ldr	r3, [r3, #12]
 801f40e:	4798      	blx	r3
 801f410:	6823      	ldr	r3, [r4, #0]
 801f412:	4620      	mov	r0, r4
 801f414:	4629      	mov	r1, r5
 801f416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f418:	4798      	blx	r3
 801f41a:	4628      	mov	r0, r5
 801f41c:	bd38      	pop	{r3, r4, r5, pc}

0801f41e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f41e:	b410      	push	{r4}
 801f420:	880a      	ldrh	r2, [r1, #0]
 801f422:	8884      	ldrh	r4, [r0, #4]
 801f424:	4422      	add	r2, r4
 801f426:	800a      	strh	r2, [r1, #0]
 801f428:	884a      	ldrh	r2, [r1, #2]
 801f42a:	88c4      	ldrh	r4, [r0, #6]
 801f42c:	4422      	add	r2, r4
 801f42e:	804a      	strh	r2, [r1, #2]
 801f430:	6940      	ldr	r0, [r0, #20]
 801f432:	b120      	cbz	r0, 801f43e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f434:	6803      	ldr	r3, [r0, #0]
 801f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f43c:	4718      	bx	r3
 801f43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f442:	4770      	bx	lr

0801f444 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f444:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f446:	460b      	mov	r3, r1
 801f448:	b085      	sub	sp, #20
 801f44a:	4604      	mov	r4, r0
 801f44c:	b901      	cbnz	r1, 801f450 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f44e:	b1fa      	cbz	r2, 801f490 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801f450:	1d27      	adds	r7, r4, #4
 801f452:	466e      	mov	r6, sp
 801f454:	ad02      	add	r5, sp, #8
 801f456:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f45a:	e886 0003 	stmia.w	r6, {r0, r1}
 801f45e:	88e1      	ldrh	r1, [r4, #6]
 801f460:	4620      	mov	r0, r4
 801f462:	440a      	add	r2, r1
 801f464:	88a1      	ldrh	r1, [r4, #4]
 801f466:	4419      	add	r1, r3
 801f468:	6823      	ldr	r3, [r4, #0]
 801f46a:	b212      	sxth	r2, r2
 801f46c:	b209      	sxth	r1, r1
 801f46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f470:	4798      	blx	r3
 801f472:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f476:	e885 0003 	stmia.w	r5, {r0, r1}
 801f47a:	6960      	ldr	r0, [r4, #20]
 801f47c:	b150      	cbz	r0, 801f494 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801f47e:	6803      	ldr	r3, [r0, #0]
 801f480:	4631      	mov	r1, r6
 801f482:	691b      	ldr	r3, [r3, #16]
 801f484:	4798      	blx	r3
 801f486:	6960      	ldr	r0, [r4, #20]
 801f488:	6803      	ldr	r3, [r0, #0]
 801f48a:	691b      	ldr	r3, [r3, #16]
 801f48c:	4629      	mov	r1, r5
 801f48e:	4798      	blx	r3
 801f490:	b005      	add	sp, #20
 801f492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f494:	f7ff fb78 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801f498:	6803      	ldr	r3, [r0, #0]
 801f49a:	4631      	mov	r1, r6
 801f49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f49e:	4798      	blx	r3
 801f4a0:	f7ff fb72 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801f4a4:	6803      	ldr	r3, [r0, #0]
 801f4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4a8:	e7f0      	b.n	801f48c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801f4aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f4aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f4ac:	8882      	ldrh	r2, [r0, #4]
 801f4ae:	4605      	mov	r5, r0
 801f4b0:	880b      	ldrh	r3, [r1, #0]
 801f4b2:	460c      	mov	r4, r1
 801f4b4:	4413      	add	r3, r2
 801f4b6:	800b      	strh	r3, [r1, #0]
 801f4b8:	884b      	ldrh	r3, [r1, #2]
 801f4ba:	88c2      	ldrh	r2, [r0, #6]
 801f4bc:	4413      	add	r3, r2
 801f4be:	4602      	mov	r2, r0
 801f4c0:	804b      	strh	r3, [r1, #2]
 801f4c2:	466b      	mov	r3, sp
 801f4c4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f4c8:	6851      	ldr	r1, [r2, #4]
 801f4ca:	c303      	stmia	r3!, {r0, r1}
 801f4cc:	4621      	mov	r1, r4
 801f4ce:	4668      	mov	r0, sp
 801f4d0:	f7fc f80a 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801f4d4:	466b      	mov	r3, sp
 801f4d6:	cb03      	ldmia	r3!, {r0, r1}
 801f4d8:	6020      	str	r0, [r4, #0]
 801f4da:	6061      	str	r1, [r4, #4]
 801f4dc:	6968      	ldr	r0, [r5, #20]
 801f4de:	b128      	cbz	r0, 801f4ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f4e0:	6803      	ldr	r3, [r0, #0]
 801f4e2:	691b      	ldr	r3, [r3, #16]
 801f4e4:	4621      	mov	r1, r4
 801f4e6:	4798      	blx	r3
 801f4e8:	b003      	add	sp, #12
 801f4ea:	bd30      	pop	{r4, r5, pc}
 801f4ec:	f7ff fb4c 	bl	801eb88 <_ZN8touchgfx11Application11getInstanceEv>
 801f4f0:	6803      	ldr	r3, [r0, #0]
 801f4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4f4:	e7f6      	b.n	801f4e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f4f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f4f6:	b570      	push	{r4, r5, r6, lr}
 801f4f8:	8882      	ldrh	r2, [r0, #4]
 801f4fa:	460c      	mov	r4, r1
 801f4fc:	880b      	ldrh	r3, [r1, #0]
 801f4fe:	4605      	mov	r5, r0
 801f500:	4413      	add	r3, r2
 801f502:	800b      	strh	r3, [r1, #0]
 801f504:	884b      	ldrh	r3, [r1, #2]
 801f506:	88c2      	ldrh	r2, [r0, #6]
 801f508:	4413      	add	r3, r2
 801f50a:	804b      	strh	r3, [r1, #2]
 801f50c:	1d01      	adds	r1, r0, #4
 801f50e:	4620      	mov	r0, r4
 801f510:	f7fb ffea 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801f514:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f518:	b153      	cbz	r3, 801f530 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f51a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f51e:	b13b      	cbz	r3, 801f530 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f520:	6968      	ldr	r0, [r5, #20]
 801f522:	b128      	cbz	r0, 801f530 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f524:	6803      	ldr	r3, [r0, #0]
 801f526:	4621      	mov	r1, r4
 801f528:	6a1b      	ldr	r3, [r3, #32]
 801f52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f52e:	4718      	bx	r3
 801f530:	bd70      	pop	{r4, r5, r6, pc}

0801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f532:	b510      	push	{r4, lr}
 801f534:	2300      	movs	r3, #0
 801f536:	4604      	mov	r4, r0
 801f538:	4608      	mov	r0, r1
 801f53a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f53e:	8023      	strh	r3, [r4, #0]
 801f540:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f544:	8063      	strh	r3, [r4, #2]
 801f546:	6803      	ldr	r3, [r0, #0]
 801f548:	80a1      	strh	r1, [r4, #4]
 801f54a:	4621      	mov	r1, r4
 801f54c:	80e2      	strh	r2, [r4, #6]
 801f54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f550:	4798      	blx	r3
 801f552:	4620      	mov	r0, r4
 801f554:	bd10      	pop	{r4, pc}
	...

0801f558 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f558:	b530      	push	{r4, r5, lr}
 801f55a:	8083      	strh	r3, [r0, #4]
 801f55c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f560:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f564:	7183      	strb	r3, [r0, #6]
 801f566:	79c3      	ldrb	r3, [r0, #7]
 801f568:	6101      	str	r1, [r0, #16]
 801f56a:	f365 0306 	bfi	r3, r5, #0, #7
 801f56e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f572:	8282      	strh	r2, [r0, #20]
 801f574:	f365 13c7 	bfi	r3, r5, #7, #1
 801f578:	71c3      	strb	r3, [r0, #7]
 801f57a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f57e:	7203      	strb	r3, [r0, #8]
 801f580:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f584:	7243      	strb	r3, [r0, #9]
 801f586:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f58a:	8143      	strh	r3, [r0, #10]
 801f58c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f590:	8183      	strh	r3, [r0, #12]
 801f592:	4b01      	ldr	r3, [pc, #4]	; (801f598 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f594:	6003      	str	r3, [r0, #0]
 801f596:	bd30      	pop	{r4, r5, pc}
 801f598:	0802f334 	.word	0x0802f334

0801f59c <_ZNK8touchgfx9ConstFont4findEt>:
 801f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f59e:	8a84      	ldrh	r4, [r0, #20]
 801f5a0:	2500      	movs	r5, #0
 801f5a2:	260e      	movs	r6, #14
 801f5a4:	3c01      	subs	r4, #1
 801f5a6:	42a5      	cmp	r5, r4
 801f5a8:	dc0c      	bgt.n	801f5c4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801f5aa:	192a      	adds	r2, r5, r4
 801f5ac:	6903      	ldr	r3, [r0, #16]
 801f5ae:	1052      	asrs	r2, r2, #1
 801f5b0:	fb06 3302 	mla	r3, r6, r2, r3
 801f5b4:	889f      	ldrh	r7, [r3, #4]
 801f5b6:	428f      	cmp	r7, r1
 801f5b8:	d901      	bls.n	801f5be <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801f5ba:	1e54      	subs	r4, r2, #1
 801f5bc:	e7f3      	b.n	801f5a6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f5be:	d202      	bcs.n	801f5c6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801f5c0:	1c55      	adds	r5, r2, #1
 801f5c2:	e7f0      	b.n	801f5a6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f5ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5cc:	4605      	mov	r5, r0
 801f5ce:	4617      	mov	r7, r2
 801f5d0:	461e      	mov	r6, r3
 801f5d2:	f7ff ffe3 	bl	801f59c <_ZNK8touchgfx9ConstFont4findEt>
 801f5d6:	b9e0      	cbnz	r0, 801f612 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801f5d8:	b911      	cbnz	r1, 801f5e0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801f5da:	2400      	movs	r4, #0
 801f5dc:	4620      	mov	r0, r4
 801f5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5e0:	290a      	cmp	r1, #10
 801f5e2:	d0fa      	beq.n	801f5da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f5e4:	682b      	ldr	r3, [r5, #0]
 801f5e6:	4628      	mov	r0, r5
 801f5e8:	691b      	ldr	r3, [r3, #16]
 801f5ea:	4798      	blx	r3
 801f5ec:	4601      	mov	r1, r0
 801f5ee:	4628      	mov	r0, r5
 801f5f0:	f7ff ffd4 	bl	801f59c <_ZNK8touchgfx9ConstFont4findEt>
 801f5f4:	4604      	mov	r4, r0
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	d0ef      	beq.n	801f5da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f5fa:	682b      	ldr	r3, [r5, #0]
 801f5fc:	4621      	mov	r1, r4
 801f5fe:	4628      	mov	r0, r5
 801f600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f602:	4798      	blx	r3
 801f604:	6038      	str	r0, [r7, #0]
 801f606:	682b      	ldr	r3, [r5, #0]
 801f608:	4628      	mov	r0, r5
 801f60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f60c:	4798      	blx	r3
 801f60e:	7030      	strb	r0, [r6, #0]
 801f610:	e7e4      	b.n	801f5dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801f612:	4604      	mov	r4, r0
 801f614:	e7f1      	b.n	801f5fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801f616 <_ZN8touchgfx6memsetEPvhm>:
 801f616:	4402      	add	r2, r0
 801f618:	4290      	cmp	r0, r2
 801f61a:	d002      	beq.n	801f622 <_ZN8touchgfx6memsetEPvhm+0xc>
 801f61c:	f800 1b01 	strb.w	r1, [r0], #1
 801f620:	e7fa      	b.n	801f618 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f622:	4770      	bx	lr

0801f624 <_ZN8touchgfx3clzEl>:
 801f624:	b1e8      	cbz	r0, 801f662 <_ZN8touchgfx3clzEl+0x3e>
 801f626:	2800      	cmp	r0, #0
 801f628:	bfb8      	it	lt
 801f62a:	4240      	neglt	r0, r0
 801f62c:	0c03      	lsrs	r3, r0, #16
 801f62e:	041b      	lsls	r3, r3, #16
 801f630:	b9ab      	cbnz	r3, 801f65e <_ZN8touchgfx3clzEl+0x3a>
 801f632:	0400      	lsls	r0, r0, #16
 801f634:	2310      	movs	r3, #16
 801f636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f63a:	bf04      	itt	eq
 801f63c:	0200      	lsleq	r0, r0, #8
 801f63e:	3308      	addeq	r3, #8
 801f640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f644:	bf04      	itt	eq
 801f646:	0100      	lsleq	r0, r0, #4
 801f648:	3304      	addeq	r3, #4
 801f64a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f64e:	bf04      	itt	eq
 801f650:	0080      	lsleq	r0, r0, #2
 801f652:	3302      	addeq	r3, #2
 801f654:	2800      	cmp	r0, #0
 801f656:	bfa8      	it	ge
 801f658:	3301      	addge	r3, #1
 801f65a:	1e58      	subs	r0, r3, #1
 801f65c:	4770      	bx	lr
 801f65e:	2300      	movs	r3, #0
 801f660:	e7e9      	b.n	801f636 <_ZN8touchgfx3clzEl+0x12>
 801f662:	201f      	movs	r0, #31
 801f664:	4770      	bx	lr

0801f666 <_ZN8touchgfx6muldivElllRl>:
 801f666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f66a:	4604      	mov	r4, r0
 801f66c:	4698      	mov	r8, r3
 801f66e:	2601      	movs	r6, #1
 801f670:	f7ff ffd8 	bl	801f624 <_ZN8touchgfx3clzEl>
 801f674:	2c00      	cmp	r4, #0
 801f676:	fa04 f500 	lsl.w	r5, r4, r0
 801f67a:	fa06 f600 	lsl.w	r6, r6, r0
 801f67e:	bfba      	itte	lt
 801f680:	f04f 37ff 	movlt.w	r7, #4294967295
 801f684:	4264      	neglt	r4, r4
 801f686:	2701      	movge	r7, #1
 801f688:	2900      	cmp	r1, #0
 801f68a:	f106 36ff 	add.w	r6, r6, #4294967295
 801f68e:	bfbc      	itt	lt
 801f690:	4249      	neglt	r1, r1
 801f692:	427f      	neglt	r7, r7
 801f694:	2a00      	cmp	r2, #0
 801f696:	fa41 fc00 	asr.w	ip, r1, r0
 801f69a:	ea01 0106 	and.w	r1, r1, r6
 801f69e:	bfb8      	it	lt
 801f6a0:	427f      	neglt	r7, r7
 801f6a2:	fb04 f401 	mul.w	r4, r4, r1
 801f6a6:	fb95 f3f2 	sdiv	r3, r5, r2
 801f6aa:	fb02 5513 	mls	r5, r2, r3, r5
 801f6ae:	bfb8      	it	lt
 801f6b0:	4252      	neglt	r2, r2
 801f6b2:	fb94 f0f2 	sdiv	r0, r4, r2
 801f6b6:	fb02 4410 	mls	r4, r2, r0, r4
 801f6ba:	fb0c 4405 	mla	r4, ip, r5, r4
 801f6be:	fb94 f1f2 	sdiv	r1, r4, r2
 801f6c2:	4408      	add	r0, r1
 801f6c4:	fb02 4211 	mls	r2, r2, r1, r4
 801f6c8:	fb0c 0003 	mla	r0, ip, r3, r0
 801f6cc:	f8c8 2000 	str.w	r2, [r8]
 801f6d0:	4378      	muls	r0, r7
 801f6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f6d6 <_ZN8touchgfx10ClickEventD1Ev>:
 801f6d6:	4770      	bx	lr

0801f6d8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801f6d8:	2000      	movs	r0, #0
 801f6da:	4770      	bx	lr

0801f6dc <_ZN8touchgfx9DragEventD1Ev>:
 801f6dc:	4770      	bx	lr

0801f6de <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801f6de:	2001      	movs	r0, #1
 801f6e0:	4770      	bx	lr

0801f6e2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f6e2:	2002      	movs	r0, #2
 801f6e4:	4770      	bx	lr

0801f6e6 <_ZN8touchgfx12GestureEventD1Ev>:
 801f6e6:	4770      	bx	lr

0801f6e8 <_ZN8touchgfx10ClickEventD0Ev>:
 801f6e8:	b510      	push	{r4, lr}
 801f6ea:	4604      	mov	r4, r0
 801f6ec:	210c      	movs	r1, #12
 801f6ee:	f00b fa4e 	bl	802ab8e <_ZdlPvj>
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	bd10      	pop	{r4, pc}

0801f6f6 <_ZN8touchgfx9DragEventD0Ev>:
 801f6f6:	b510      	push	{r4, lr}
 801f6f8:	4604      	mov	r4, r0
 801f6fa:	2110      	movs	r1, #16
 801f6fc:	f00b fa47 	bl	802ab8e <_ZdlPvj>
 801f700:	4620      	mov	r0, r4
 801f702:	bd10      	pop	{r4, pc}

0801f704 <_ZN8touchgfx12GestureEventD0Ev>:
 801f704:	b510      	push	{r4, lr}
 801f706:	4604      	mov	r4, r0
 801f708:	210c      	movs	r1, #12
 801f70a:	f00b fa40 	bl	802ab8e <_ZdlPvj>
 801f70e:	4620      	mov	r0, r4
 801f710:	bd10      	pop	{r4, pc}
	...

0801f714 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f714:	b530      	push	{r4, r5, lr}
 801f716:	460d      	mov	r5, r1
 801f718:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f71a:	b087      	sub	sp, #28
 801f71c:	4604      	mov	r4, r0
 801f71e:	b301      	cbz	r1, 801f762 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f720:	a801      	add	r0, sp, #4
 801f722:	f7ff ff06 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f726:	892a      	ldrh	r2, [r5, #8]
 801f728:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f72c:	7928      	ldrb	r0, [r5, #4]
 801f72e:	1ad2      	subs	r2, r2, r3
 801f730:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f732:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f736:	441a      	add	r2, r3
 801f738:	896b      	ldrh	r3, [r5, #10]
 801f73a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f73e:	f88d 0010 	strb.w	r0, [sp, #16]
 801f742:	1b5b      	subs	r3, r3, r5
 801f744:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f746:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f748:	442b      	add	r3, r5
 801f74a:	4d07      	ldr	r5, [pc, #28]	; (801f768 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f74c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f750:	a903      	add	r1, sp, #12
 801f752:	9503      	str	r5, [sp, #12]
 801f754:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f758:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f75c:	6803      	ldr	r3, [r0, #0]
 801f75e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f760:	4798      	blx	r3
 801f762:	b007      	add	sp, #28
 801f764:	bd30      	pop	{r4, r5, pc}
 801f766:	bf00      	nop
 801f768:	0802f3b0 	.word	0x0802f3b0

0801f76c <_ZNK8touchgfx4Rect9intersectEss>:
 801f76c:	b510      	push	{r4, lr}
 801f76e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f772:	428b      	cmp	r3, r1
 801f774:	dc10      	bgt.n	801f798 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f776:	8884      	ldrh	r4, [r0, #4]
 801f778:	4423      	add	r3, r4
 801f77a:	b21b      	sxth	r3, r3
 801f77c:	4299      	cmp	r1, r3
 801f77e:	da0b      	bge.n	801f798 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f780:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f784:	4293      	cmp	r3, r2
 801f786:	dc07      	bgt.n	801f798 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f788:	88c0      	ldrh	r0, [r0, #6]
 801f78a:	4418      	add	r0, r3
 801f78c:	b200      	sxth	r0, r0
 801f78e:	4282      	cmp	r2, r0
 801f790:	bfac      	ite	ge
 801f792:	2000      	movge	r0, #0
 801f794:	2001      	movlt	r0, #1
 801f796:	bd10      	pop	{r4, pc}
 801f798:	2000      	movs	r0, #0
 801f79a:	e7fc      	b.n	801f796 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801f79c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f79e:	460c      	mov	r4, r1
 801f7a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f7a2:	b089      	sub	sp, #36	; 0x24
 801f7a4:	4605      	mov	r5, r0
 801f7a6:	2900      	cmp	r1, #0
 801f7a8:	d054      	beq.n	801f854 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801f7aa:	4668      	mov	r0, sp
 801f7ac:	f7ff fec1 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f7b0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f7b2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f7b4:	4668      	mov	r0, sp
 801f7b6:	8922      	ldrh	r2, [r4, #8]
 801f7b8:	88e1      	ldrh	r1, [r4, #6]
 801f7ba:	443a      	add	r2, r7
 801f7bc:	4431      	add	r1, r6
 801f7be:	b212      	sxth	r2, r2
 801f7c0:	b209      	sxth	r1, r1
 801f7c2:	f7ff ffd3 	bl	801f76c <_ZNK8touchgfx4Rect9intersectEss>
 801f7c6:	b1d0      	cbz	r0, 801f7fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801f7c8:	89a2      	ldrh	r2, [r4, #12]
 801f7ca:	4668      	mov	r0, sp
 801f7cc:	8961      	ldrh	r1, [r4, #10]
 801f7ce:	443a      	add	r2, r7
 801f7d0:	4431      	add	r1, r6
 801f7d2:	b212      	sxth	r2, r2
 801f7d4:	b209      	sxth	r1, r1
 801f7d6:	f7ff ffc9 	bl	801f76c <_ZNK8touchgfx4Rect9intersectEss>
 801f7da:	4603      	mov	r3, r0
 801f7dc:	b978      	cbnz	r0, 801f7fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801f7de:	4a1e      	ldr	r2, [pc, #120]	; (801f858 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f7e0:	a904      	add	r1, sp, #16
 801f7e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f7e4:	9204      	str	r2, [sp, #16]
 801f7e6:	2202      	movs	r2, #2
 801f7e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f7ec:	f88d 2014 	strb.w	r2, [sp, #20]
 801f7f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f7f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f7f8:	6803      	ldr	r3, [r0, #0]
 801f7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7fc:	4798      	blx	r3
 801f7fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f800:	a802      	add	r0, sp, #8
 801f802:	f7ff fe96 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f806:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f80a:	88e0      	ldrh	r0, [r4, #6]
 801f80c:	8961      	ldrh	r1, [r4, #10]
 801f80e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801f812:	1a80      	subs	r0, r0, r2
 801f814:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801f818:	1a89      	subs	r1, r1, r2
 801f81a:	8923      	ldrh	r3, [r4, #8]
 801f81c:	4460      	add	r0, ip
 801f81e:	89a2      	ldrh	r2, [r4, #12]
 801f820:	4461      	add	r1, ip
 801f822:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f824:	eba3 030e 	sub.w	r3, r3, lr
 801f828:	eba2 020e 	sub.w	r2, r2, lr
 801f82c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f830:	7927      	ldrb	r7, [r4, #4]
 801f832:	4433      	add	r3, r6
 801f834:	4432      	add	r2, r6
 801f836:	4c09      	ldr	r4, [pc, #36]	; (801f85c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f838:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f83a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f83e:	a904      	add	r1, sp, #16
 801f840:	9404      	str	r4, [sp, #16]
 801f842:	f88d 7014 	strb.w	r7, [sp, #20]
 801f846:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f84a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f84e:	6803      	ldr	r3, [r0, #0]
 801f850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f852:	4798      	blx	r3
 801f854:	b009      	add	sp, #36	; 0x24
 801f856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f858:	0802f388 	.word	0x0802f388
 801f85c:	0802f39c 	.word	0x0802f39c

0801f860 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f864:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801f868:	b0a1      	sub	sp, #132	; 0x84
 801f86a:	4604      	mov	r4, r0
 801f86c:	460d      	mov	r5, r1
 801f86e:	790b      	ldrb	r3, [r1, #4]
 801f870:	f1b9 0f00 	cmp.w	r9, #0
 801f874:	d00f      	beq.n	801f896 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801f876:	2b00      	cmp	r3, #0
 801f878:	f040 80a2 	bne.w	801f9c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801f87c:	b021      	add	sp, #132	; 0x84
 801f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f882:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f886:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f88a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f88e:	1d20      	adds	r0, r4, #4
 801f890:	f7fb fd78 	bl	801b384 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f894:	e094      	b.n	801f9c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801f896:	2b00      	cmp	r3, #0
 801f898:	d1f0      	bne.n	801f87c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f89a:	4b5f      	ldr	r3, [pc, #380]	; (801fa18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801f8a2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801f8a6:	f1ba 0f03 	cmp.w	sl, #3
 801f8aa:	ddea      	ble.n	801f882 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801f8ac:	f1ba 0f0c 	cmp.w	sl, #12
 801f8b0:	f04f 0303 	mov.w	r3, #3
 801f8b4:	f04f 0600 	mov.w	r6, #0
 801f8b8:	4958      	ldr	r1, [pc, #352]	; (801fa1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801f8ba:	bfd8      	it	le
 801f8bc:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801f8c0:	960a      	str	r6, [sp, #40]	; 0x28
 801f8c2:	bfd8      	it	le
 801f8c4:	fb92 f3f3 	sdivle	r3, r2, r3
 801f8c8:	9301      	str	r3, [sp, #4]
 801f8ca:	4b55      	ldr	r3, [pc, #340]	; (801fa20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801f8cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f8d0:	4b54      	ldr	r3, [pc, #336]	; (801fa24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801f8d2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f8d6:	2248      	movs	r2, #72	; 0x48
 801f8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f8dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f8e0:	ab0e      	add	r3, sp, #56	; 0x38
 801f8e2:	4618      	mov	r0, r3
 801f8e4:	f00b f9fc 	bl	802ace0 <memcpy>
 801f8e8:	f04f 32ff 	mov.w	r2, #4294967295
 801f8ec:	f8cd a008 	str.w	sl, [sp, #8]
 801f8f0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801f8f4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801f8f8:	46b3      	mov	fp, r6
 801f8fa:	fb93 f3f2 	sdiv	r3, r3, r2
 801f8fe:	b29b      	uxth	r3, r3
 801f900:	9303      	str	r3, [sp, #12]
 801f902:	2300      	movs	r3, #0
 801f904:	9a03      	ldr	r2, [sp, #12]
 801f906:	88ef      	ldrh	r7, [r5, #6]
 801f908:	a80a      	add	r0, sp, #40	; 0x28
 801f90a:	9309      	str	r3, [sp, #36]	; 0x24
 801f90c:	9b07      	ldr	r3, [sp, #28]
 801f90e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801f912:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801f916:	fb13 f302 	smulbb	r3, r3, r2
 801f91a:	b29b      	uxth	r3, r3
 801f91c:	9304      	str	r3, [sp, #16]
 801f91e:	9b07      	ldr	r3, [sp, #28]
 801f920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f924:	685b      	ldr	r3, [r3, #4]
 801f926:	fb13 f302 	smulbb	r3, r3, r2
 801f92a:	b29b      	uxth	r3, r3
 801f92c:	9305      	str	r3, [sp, #20]
 801f92e:	9b04      	ldr	r3, [sp, #16]
 801f930:	441f      	add	r7, r3
 801f932:	9b05      	ldr	r3, [sp, #20]
 801f934:	4498      	add	r8, r3
 801f936:	b23f      	sxth	r7, r7
 801f938:	fa0f f888 	sxth.w	r8, r8
 801f93c:	4639      	mov	r1, r7
 801f93e:	4642      	mov	r2, r8
 801f940:	f7ff ff14 	bl	801f76c <_ZNK8touchgfx4Rect9intersectEss>
 801f944:	b380      	cbz	r0, 801f9a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f946:	4639      	mov	r1, r7
 801f948:	ab09      	add	r3, sp, #36	; 0x24
 801f94a:	4642      	mov	r2, r8
 801f94c:	1d20      	adds	r0, r4, #4
 801f94e:	f7fb fd19 	bl	801b384 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f952:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f954:	b341      	cbz	r1, 801f9a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f956:	4549      	cmp	r1, r9
 801f958:	d026      	beq.n	801f9a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f95a:	a80c      	add	r0, sp, #48	; 0x30
 801f95c:	f7ff fde9 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f960:	2002      	movs	r0, #2
 801f962:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f966:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f96a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f96e:	fb92 f2f0 	sdiv	r2, r2, r0
 801f972:	440a      	add	r2, r1
 801f974:	1a99      	subs	r1, r3, r2
 801f976:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f97a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f97e:	fb93 f3f0 	sdiv	r3, r3, r0
 801f982:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f986:	4403      	add	r3, r0
 801f988:	1ad3      	subs	r3, r2, r3
 801f98a:	9a06      	ldr	r2, [sp, #24]
 801f98c:	435b      	muls	r3, r3
 801f98e:	fb01 3301 	mla	r3, r1, r1, r3
 801f992:	4293      	cmp	r3, r2
 801f994:	d208      	bcs.n	801f9a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f996:	9a04      	ldr	r2, [sp, #16]
 801f998:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f99c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f99e:	9a05      	ldr	r2, [sp, #20]
 801f9a0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801f9a4:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f9a6:	9306      	str	r3, [sp, #24]
 801f9a8:	f10b 0b02 	add.w	fp, fp, #2
 801f9ac:	f1bb 0f08 	cmp.w	fp, #8
 801f9b0:	dda7      	ble.n	801f902 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801f9b2:	9b02      	ldr	r3, [sp, #8]
 801f9b4:	3601      	adds	r6, #1
 801f9b6:	4453      	add	r3, sl
 801f9b8:	9302      	str	r3, [sp, #8]
 801f9ba:	9b01      	ldr	r3, [sp, #4]
 801f9bc:	42b3      	cmp	r3, r6
 801f9be:	d199      	bne.n	801f8f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801f9c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f9c2:	2900      	cmp	r1, #0
 801f9c4:	f43f af5a 	beq.w	801f87c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f9c8:	a80c      	add	r0, sp, #48	; 0x30
 801f9ca:	2600      	movs	r6, #0
 801f9cc:	f7ff fdb1 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f9d0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f9d4:	88ea      	ldrh	r2, [r5, #6]
 801f9d6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f9da:	1ad2      	subs	r2, r2, r3
 801f9dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f9de:	7929      	ldrb	r1, [r5, #4]
 801f9e0:	441a      	add	r2, r3
 801f9e2:	892b      	ldrh	r3, [r5, #8]
 801f9e4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f9e8:	a90e      	add	r1, sp, #56	; 0x38
 801f9ea:	1a1b      	subs	r3, r3, r0
 801f9ec:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f9ee:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f9f2:	4403      	add	r3, r0
 801f9f4:	480c      	ldr	r0, [pc, #48]	; (801fa28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801f9f6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f9fa:	900e      	str	r0, [sp, #56]	; 0x38
 801f9fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f9fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801fa02:	6803      	ldr	r3, [r0, #0]
 801fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa06:	4798      	blx	r3
 801fa08:	792b      	ldrb	r3, [r5, #4]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	f43f af36 	beq.w	801f87c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801fa10:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801fa14:	e732      	b.n	801f87c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801fa16:	bf00      	nop
 801fa18:	2000bff0 	.word	0x2000bff0
 801fa1c:	0802c624 	.word	0x0802c624
 801fa20:	2000bfe2 	.word	0x2000bfe2
 801fa24:	2000bfe4 	.word	0x2000bfe4
 801fa28:	0802f388 	.word	0x0802f388

0801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801fa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fa2e:	4604      	mov	r4, r0
 801fa30:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801fa34:	3201      	adds	r2, #1
 801fa36:	d112      	bne.n	801fa5e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801fa38:	2500      	movs	r5, #0
 801fa3a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801fa3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fa42:	6803      	ldr	r3, [r0, #0]
 801fa44:	9500      	str	r5, [sp, #0]
 801fa46:	466d      	mov	r5, sp
 801fa48:	f8ad 1004 	strh.w	r1, [sp, #4]
 801fa4c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801fa50:	4629      	mov	r1, r5
 801fa52:	6a1b      	ldr	r3, [r3, #32]
 801fa54:	4798      	blx	r3
 801fa56:	e895 0003 	ldmia.w	r5, {r0, r1}
 801fa5a:	e884 0003 	stmia.w	r4, {r0, r1}
 801fa5e:	4620      	mov	r0, r4
 801fa60:	b003      	add	sp, #12
 801fa62:	bd30      	pop	{r4, r5, pc}

0801fa64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801fa64:	b513      	push	{r0, r1, r4, lr}
 801fa66:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801fa6a:	4604      	mov	r4, r0
 801fa6c:	3301      	adds	r3, #1
 801fa6e:	d109      	bne.n	801fa84 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801fa70:	4601      	mov	r1, r0
 801fa72:	4668      	mov	r0, sp
 801fa74:	f7ff fd5d 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fa78:	f8bd 3000 	ldrh.w	r3, [sp]
 801fa7c:	8423      	strh	r3, [r4, #32]
 801fa7e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fa82:	8463      	strh	r3, [r4, #34]	; 0x22
 801fa84:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801fa88:	b002      	add	sp, #8
 801fa8a:	bd10      	pop	{r4, pc}

0801fa8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801fa8c:	b513      	push	{r0, r1, r4, lr}
 801fa8e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801fa92:	4604      	mov	r4, r0
 801fa94:	3301      	adds	r3, #1
 801fa96:	d109      	bne.n	801faac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801fa98:	4601      	mov	r1, r0
 801fa9a:	4668      	mov	r0, sp
 801fa9c:	f7ff fd49 	bl	801f532 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801faa0:	f8bd 3000 	ldrh.w	r3, [sp]
 801faa4:	8423      	strh	r3, [r4, #32]
 801faa6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801faaa:	8463      	strh	r3, [r4, #34]	; 0x22
 801faac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801fab0:	b002      	add	sp, #8
 801fab2:	bd10      	pop	{r4, pc}

0801fab4 <_ZN8touchgfx6ScreenC1Ev>:
 801fab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fab6:	4605      	mov	r5, r0
 801fab8:	4b17      	ldr	r3, [pc, #92]	; (801fb18 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801faba:	2200      	movs	r2, #0
 801fabc:	4917      	ldr	r1, [pc, #92]	; (801fb1c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801fabe:	f845 3b04 	str.w	r3, [r5], #4
 801fac2:	2301      	movs	r3, #1
 801fac4:	8102      	strh	r2, [r0, #8]
 801fac6:	4604      	mov	r4, r0
 801fac8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801facc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801fad0:	4b13      	ldr	r3, [pc, #76]	; (801fb20 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801fad2:	8142      	strh	r2, [r0, #10]
 801fad4:	f9b3 7000 	ldrsh.w	r7, [r3]
 801fad8:	4b12      	ldr	r3, [pc, #72]	; (801fb24 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801fada:	8182      	strh	r2, [r0, #12]
 801fadc:	81c2      	strh	r2, [r0, #14]
 801fade:	8202      	strh	r2, [r0, #16]
 801fae0:	8242      	strh	r2, [r0, #18]
 801fae2:	8282      	strh	r2, [r0, #20]
 801fae4:	82c2      	strh	r2, [r0, #22]
 801fae6:	6202      	str	r2, [r0, #32]
 801fae8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801faec:	6342      	str	r2, [r0, #52]	; 0x34
 801faee:	f9b3 6000 	ldrsh.w	r6, [r3]
 801faf2:	6041      	str	r1, [r0, #4]
 801faf4:	4611      	mov	r1, r2
 801faf6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fafa:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801fafe:	4628      	mov	r0, r5
 801fb00:	f7f2 fee0 	bl	80128c4 <_ZN8touchgfx8Drawable5setXYEss>
 801fb04:	4639      	mov	r1, r7
 801fb06:	4628      	mov	r0, r5
 801fb08:	f7f2 fefa 	bl	8012900 <_ZN8touchgfx8Drawable8setWidthEs>
 801fb0c:	4628      	mov	r0, r5
 801fb0e:	4631      	mov	r1, r6
 801fb10:	f7f2 ff05 	bl	801291e <_ZN8touchgfx8Drawable9setHeightEs>
 801fb14:	4620      	mov	r0, r4
 801fb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb18:	0802f3c4 	.word	0x0802f3c4
 801fb1c:	0802deb0 	.word	0x0802deb0
 801fb20:	2000bfe2 	.word	0x2000bfe2
 801fb24:	2000bfe4 	.word	0x2000bfe4

0801fb28 <_ZN8touchgfx6Screen4drawEv>:
 801fb28:	4b09      	ldr	r3, [pc, #36]	; (801fb50 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801fb2a:	b507      	push	{r0, r1, r2, lr}
 801fb2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fb30:	2100      	movs	r1, #0
 801fb32:	4b08      	ldr	r3, [pc, #32]	; (801fb54 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801fb34:	9100      	str	r1, [sp, #0]
 801fb36:	4669      	mov	r1, sp
 801fb38:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fb3c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801fb40:	f8ad 3006 	strh.w	r3, [sp, #6]
 801fb44:	6803      	ldr	r3, [r0, #0]
 801fb46:	689b      	ldr	r3, [r3, #8]
 801fb48:	4798      	blx	r3
 801fb4a:	b003      	add	sp, #12
 801fb4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb50:	2000bfe2 	.word	0x2000bfe2
 801fb54:	2000bfe4 	.word	0x2000bfe4

0801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb5c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fb60:	b089      	sub	sp, #36	; 0x24
 801fb62:	4680      	mov	r8, r0
 801fb64:	460c      	mov	r4, r1
 801fb66:	4615      	mov	r5, r2
 801fb68:	b16b      	cbz	r3, 801fb86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fb6a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fb6e:	b153      	cbz	r3, 801fb86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fb70:	4628      	mov	r0, r5
 801fb72:	f7ff ff5b 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fb76:	4621      	mov	r1, r4
 801fb78:	f7fe ffc2 	bl	801eb00 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fb7c:	69eb      	ldr	r3, [r5, #28]
 801fb7e:	b928      	cbnz	r0, 801fb8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801fb80:	461d      	mov	r5, r3
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d1f4      	bne.n	801fb70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801fb86:	b009      	add	sp, #36	; 0x24
 801fb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb8c:	ae04      	add	r6, sp, #16
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d051      	beq.n	801fc36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801fb92:	682b      	ldr	r3, [r5, #0]
 801fb94:	4629      	mov	r1, r5
 801fb96:	a802      	add	r0, sp, #8
 801fb98:	68db      	ldr	r3, [r3, #12]
 801fb9a:	4798      	blx	r3
 801fb9c:	4628      	mov	r0, r5
 801fb9e:	f7ff ff61 	bl	801fa64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fba2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801fba6:	4407      	add	r7, r0
 801fba8:	4628      	mov	r0, r5
 801fbaa:	f7ff ff6f 	bl	801fa8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fbae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fbb2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801fbb6:	b23f      	sxth	r7, r7
 801fbb8:	4418      	add	r0, r3
 801fbba:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801fbbe:	4621      	mov	r1, r4
 801fbc0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fbc4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fbc8:	4630      	mov	r0, r6
 801fbca:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fbce:	f8ad 7010 	strh.w	r7, [sp, #16]
 801fbd2:	f7fb fc89 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801fbd6:	4628      	mov	r0, r5
 801fbd8:	f7ff ff28 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fbdc:	ab06      	add	r3, sp, #24
 801fbde:	4602      	mov	r2, r0
 801fbe0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801fbe4:	e883 0003 	stmia.w	r3, {r0, r1}
 801fbe8:	4611      	mov	r1, r2
 801fbea:	4618      	mov	r0, r3
 801fbec:	f7fb fc7c 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801fbf0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801fbf4:	f9b4 1000 	ldrsh.w	r1, [r4]
 801fbf8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801fbfc:	4299      	cmp	r1, r3
 801fbfe:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801fc02:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801fc06:	d10b      	bne.n	801fc20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801fc08:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fc0c:	4552      	cmp	r2, sl
 801fc0e:	d107      	bne.n	801fc20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801fc10:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801fc14:	455a      	cmp	r2, fp
 801fc16:	d103      	bne.n	801fc20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801fc18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801fc1c:	454a      	cmp	r2, r9
 801fc1e:	d00a      	beq.n	801fc36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801fc20:	f1bb 0f00 	cmp.w	fp, #0
 801fc24:	d002      	beq.n	801fc2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801fc26:	f1b9 0f00 	cmp.w	r9, #0
 801fc2a:	d12e      	bne.n	801fc8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801fc2c:	69ea      	ldr	r2, [r5, #28]
 801fc2e:	4621      	mov	r1, r4
 801fc30:	4640      	mov	r0, r8
 801fc32:	f7ff ff91 	bl	801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fc36:	4628      	mov	r0, r5
 801fc38:	f7ff fef8 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fc3c:	6861      	ldr	r1, [r4, #4]
 801fc3e:	4602      	mov	r2, r0
 801fc40:	4633      	mov	r3, r6
 801fc42:	6820      	ldr	r0, [r4, #0]
 801fc44:	c303      	stmia	r3!, {r0, r1}
 801fc46:	4611      	mov	r1, r2
 801fc48:	4630      	mov	r0, r6
 801fc4a:	f7fb fc4d 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801fc4e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d097      	beq.n	801fb86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc56:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d093      	beq.n	801fb86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc5e:	4628      	mov	r0, r5
 801fc60:	f7ff ff00 	bl	801fa64 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fc64:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801fc68:	1a18      	subs	r0, r3, r0
 801fc6a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fc6e:	4628      	mov	r0, r5
 801fc70:	f7ff ff0c 	bl	801fa8c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fc74:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fc78:	4631      	mov	r1, r6
 801fc7a:	1a18      	subs	r0, r3, r0
 801fc7c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fc80:	4628      	mov	r0, r5
 801fc82:	682b      	ldr	r3, [r5, #0]
 801fc84:	689b      	ldr	r3, [r3, #8]
 801fc86:	4798      	blx	r3
 801fc88:	e77d      	b.n	801fb86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc8a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fc8e:	fa1f f08a 	uxth.w	r0, sl
 801fc92:	4552      	cmp	r2, sl
 801fc94:	9000      	str	r0, [sp, #0]
 801fc96:	da12      	bge.n	801fcbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801fc98:	9301      	str	r3, [sp, #4]
 801fc9a:	9b00      	ldr	r3, [sp, #0]
 801fc9c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fca0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fca4:	1a9a      	subs	r2, r3, r2
 801fca6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801fcaa:	4631      	mov	r1, r6
 801fcac:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fcb0:	4640      	mov	r0, r8
 801fcb2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801fcb6:	69ea      	ldr	r2, [r5, #28]
 801fcb8:	f7ff ff4e 	bl	801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcbc:	9b01      	ldr	r3, [sp, #4]
 801fcbe:	f9b4 2000 	ldrsh.w	r2, [r4]
 801fcc2:	b29f      	uxth	r7, r3
 801fcc4:	429a      	cmp	r2, r3
 801fcc6:	da0d      	bge.n	801fce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801fcc8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fccc:	1aba      	subs	r2, r7, r2
 801fcce:	f8ad a012 	strh.w	sl, [sp, #18]
 801fcd2:	4631      	mov	r1, r6
 801fcd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fcd8:	4640      	mov	r0, r8
 801fcda:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fcde:	69ea      	ldr	r2, [r5, #28]
 801fce0:	f7ff ff3a 	bl	801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fce4:	8822      	ldrh	r2, [r4, #0]
 801fce6:	445f      	add	r7, fp
 801fce8:	88a3      	ldrh	r3, [r4, #4]
 801fcea:	b2bf      	uxth	r7, r7
 801fcec:	4413      	add	r3, r2
 801fcee:	b23a      	sxth	r2, r7
 801fcf0:	b29b      	uxth	r3, r3
 801fcf2:	b219      	sxth	r1, r3
 801fcf4:	4291      	cmp	r1, r2
 801fcf6:	dd0d      	ble.n	801fd14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801fcf8:	1bdb      	subs	r3, r3, r7
 801fcfa:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fcfe:	f8ad a012 	strh.w	sl, [sp, #18]
 801fd02:	4631      	mov	r1, r6
 801fd04:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fd08:	4640      	mov	r0, r8
 801fd0a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fd0e:	69ea      	ldr	r2, [r5, #28]
 801fd10:	f7ff ff22 	bl	801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fd14:	88e2      	ldrh	r2, [r4, #6]
 801fd16:	8863      	ldrh	r3, [r4, #2]
 801fd18:	4413      	add	r3, r2
 801fd1a:	9a00      	ldr	r2, [sp, #0]
 801fd1c:	444a      	add	r2, r9
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	fa1f f982 	uxth.w	r9, r2
 801fd24:	b219      	sxth	r1, r3
 801fd26:	fa0f f289 	sxth.w	r2, r9
 801fd2a:	428a      	cmp	r2, r1
 801fd2c:	da83      	bge.n	801fc36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801fd2e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fd32:	eba3 0309 	sub.w	r3, r3, r9
 801fd36:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fd3a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801fd3e:	4631      	mov	r1, r6
 801fd40:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fd44:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fd48:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fd4c:	69ea      	ldr	r2, [r5, #28]
 801fd4e:	e76f      	b.n	801fc30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801fd50 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801fd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd52:	2300      	movs	r3, #0
 801fd54:	aa02      	add	r2, sp, #8
 801fd56:	4604      	mov	r4, r0
 801fd58:	3004      	adds	r0, #4
 801fd5a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801fd5e:	460d      	mov	r5, r1
 801fd60:	f7fb fc99 	bl	801b696 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fd64:	9a01      	ldr	r2, [sp, #4]
 801fd66:	b11a      	cbz	r2, 801fd70 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801fd68:	4629      	mov	r1, r5
 801fd6a:	4620      	mov	r0, r4
 801fd6c:	f7ff fef4 	bl	801fb58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fd70:	b003      	add	sp, #12
 801fd72:	bd30      	pop	{r4, r5, pc}

0801fd74 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd76:	4602      	mov	r2, r0
 801fd78:	4604      	mov	r4, r0
 801fd7a:	460d      	mov	r5, r1
 801fd7c:	466b      	mov	r3, sp
 801fd7e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fd82:	6851      	ldr	r1, [r2, #4]
 801fd84:	c303      	stmia	r3!, {r0, r1}
 801fd86:	4629      	mov	r1, r5
 801fd88:	4668      	mov	r0, sp
 801fd8a:	f7fb fbad 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 801fd8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801fd92:	4669      	mov	r1, sp
 801fd94:	b123      	cbz	r3, 801fda0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801fd96:	4620      	mov	r0, r4
 801fd98:	f7ff ffda 	bl	801fd50 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801fd9c:	b003      	add	sp, #12
 801fd9e:	bd30      	pop	{r4, r5, pc}
 801fda0:	1d20      	adds	r0, r4, #4
 801fda2:	f7fb fc3f 	bl	801b624 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fda6:	e7f9      	b.n	801fd9c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801fda8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fda8:	460b      	mov	r3, r1
 801fdaa:	680a      	ldr	r2, [r1, #0]
 801fdac:	1d01      	adds	r1, r0, #4
 801fdae:	6952      	ldr	r2, [r2, #20]
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	4710      	bx	r2

0801fdb4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801fdb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fdb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdc0:	bfcc      	ite	gt
 801fdc2:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801fdc6:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801fdca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fdce:	ee10 3a10 	vmov	r3, s0
 801fdd2:	b218      	sxth	r0, r3
 801fdd4:	4770      	bx	lr

0801fdd6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801fdd6:	b510      	push	{r4, lr}
 801fdd8:	4298      	cmp	r0, r3
 801fdda:	eb01 0402 	add.w	r4, r1, r2
 801fdde:	b224      	sxth	r4, r4
 801fde0:	d21f      	bcs.n	801fe22 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801fde2:	b1f3      	cbz	r3, 801fe22 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801fde4:	ee07 0a90 	vmov	s15, r0
 801fde8:	ee06 1a10 	vmov	s12, r1
 801fdec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801fdf0:	ee07 3a90 	vmov	s15, r3
 801fdf4:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801fdf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fdfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fe00:	ee06 2a90 	vmov	s13, r2
 801fe04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801fe0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fe10:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801fe14:	eea6 7a27 	vfma.f32	s14, s12, s15
 801fe18:	eea6 0a87 	vfma.f32	s0, s13, s14
 801fe1c:	f7ff ffca 	bl	801fdb4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801fe20:	4604      	mov	r4, r0
 801fe22:	4620      	mov	r0, r4
 801fe24:	bd10      	pop	{r4, pc}
	...

0801fe28 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801fe28:	f011 0f40 	tst.w	r1, #64	; 0x40
 801fe2c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801fe30:	4b03      	ldr	r3, [pc, #12]	; (801fe40 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801fe32:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801fe36:	bf08      	it	eq
 801fe38:	2300      	moveq	r3, #0
 801fe3a:	4308      	orrs	r0, r1
 801fe3c:	4318      	orrs	r0, r3
 801fe3e:	4770      	bx	lr
 801fe40:	fffffe00 	.word	0xfffffe00

0801fe44 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801fe44:	7b43      	ldrb	r3, [r0, #13]
 801fe46:	7201      	strb	r1, [r0, #8]
 801fe48:	b289      	uxth	r1, r1
 801fe4a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801fe4e:	05ca      	lsls	r2, r1, #23
 801fe50:	bf48      	it	mi
 801fe52:	f043 0320 	orrmi.w	r3, r3, #32
 801fe56:	7343      	strb	r3, [r0, #13]
 801fe58:	058b      	lsls	r3, r1, #22
 801fe5a:	bf42      	ittt	mi
 801fe5c:	7b43      	ldrbmi	r3, [r0, #13]
 801fe5e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801fe62:	7343      	strbmi	r3, [r0, #13]
 801fe64:	4770      	bx	lr

0801fe66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fe66:	b530      	push	{r4, r5, lr}
 801fe68:	2500      	movs	r5, #0
 801fe6a:	2401      	movs	r4, #1
 801fe6c:	6843      	ldr	r3, [r0, #4]
 801fe6e:	b913      	cbnz	r3, 801fe76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801fe70:	6803      	ldr	r3, [r0, #0]
 801fe72:	b1f3      	cbz	r3, 801feb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801fe74:	6043      	str	r3, [r0, #4]
 801fe76:	7c03      	ldrb	r3, [r0, #16]
 801fe78:	b143      	cbz	r3, 801fe8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801fe7a:	68c3      	ldr	r3, [r0, #12]
 801fe7c:	b12b      	cbz	r3, 801fe8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe7e:	881a      	ldrh	r2, [r3, #0]
 801fe80:	b11a      	cbz	r2, 801fe8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe82:	1c9a      	adds	r2, r3, #2
 801fe84:	60c2      	str	r2, [r0, #12]
 801fe86:	8818      	ldrh	r0, [r3, #0]
 801fe88:	bd30      	pop	{r4, r5, pc}
 801fe8a:	7405      	strb	r5, [r0, #16]
 801fe8c:	6843      	ldr	r3, [r0, #4]
 801fe8e:	8819      	ldrh	r1, [r3, #0]
 801fe90:	b179      	cbz	r1, 801feb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801fe92:	1c9a      	adds	r2, r3, #2
 801fe94:	2902      	cmp	r1, #2
 801fe96:	6042      	str	r2, [r0, #4]
 801fe98:	d1f5      	bne.n	801fe86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801fe9a:	6883      	ldr	r3, [r0, #8]
 801fe9c:	1d1a      	adds	r2, r3, #4
 801fe9e:	6082      	str	r2, [r0, #8]
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	60c3      	str	r3, [r0, #12]
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d0e1      	beq.n	801fe6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fea8:	881b      	ldrh	r3, [r3, #0]
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d0de      	beq.n	801fe6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801feae:	7404      	strb	r4, [r0, #16]
 801feb0:	e7dc      	b.n	801fe6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801feb2:	2000      	movs	r0, #0
 801feb4:	e7e8      	b.n	801fe88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801feb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801feb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801feb8:	4605      	mov	r5, r0
 801feba:	4608      	mov	r0, r1
 801febc:	b1f1      	cbz	r1, 801fefc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801febe:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801fec2:	460b      	mov	r3, r1
 801fec4:	f101 0708 	add.w	r7, r1, #8
 801fec8:	4622      	mov	r2, r4
 801feca:	6818      	ldr	r0, [r3, #0]
 801fecc:	3308      	adds	r3, #8
 801fece:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fed2:	4626      	mov	r6, r4
 801fed4:	42bb      	cmp	r3, r7
 801fed6:	c603      	stmia	r6!, {r0, r1}
 801fed8:	4634      	mov	r4, r6
 801feda:	d1f6      	bne.n	801feca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801fedc:	6818      	ldr	r0, [r3, #0]
 801fede:	6030      	str	r0, [r6, #0]
 801fee0:	4610      	mov	r0, r2
 801fee2:	889b      	ldrh	r3, [r3, #4]
 801fee4:	80b3      	strh	r3, [r6, #4]
 801fee6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801feea:	015b      	lsls	r3, r3, #5
 801feec:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801fef0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801fef4:	430b      	orrs	r3, r1
 801fef6:	425b      	negs	r3, r3
 801fef8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801fefc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fefe <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801fefe:	b538      	push	{r3, r4, r5, lr}
 801ff00:	460c      	mov	r4, r1
 801ff02:	6811      	ldr	r1, [r2, #0]
 801ff04:	4610      	mov	r0, r2
 801ff06:	68cd      	ldr	r5, [r1, #12]
 801ff08:	4619      	mov	r1, r3
 801ff0a:	47a8      	blx	r5
 801ff0c:	2800      	cmp	r0, #0
 801ff0e:	bf08      	it	eq
 801ff10:	4620      	moveq	r0, r4
 801ff12:	bd38      	pop	{r3, r4, r5, pc}

0801ff14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ff14:	b570      	push	{r4, r5, r6, lr}
 801ff16:	8810      	ldrh	r0, [r2, #0]
 801ff18:	4298      	cmp	r0, r3
 801ff1a:	d817      	bhi.n	801ff4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ff1c:	1e48      	subs	r0, r1, #1
 801ff1e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ff22:	4298      	cmp	r0, r3
 801ff24:	d312      	bcc.n	801ff4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ff26:	2400      	movs	r4, #0
 801ff28:	428c      	cmp	r4, r1
 801ff2a:	d20f      	bcs.n	801ff4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ff2c:	1860      	adds	r0, r4, r1
 801ff2e:	1040      	asrs	r0, r0, #1
 801ff30:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ff34:	0085      	lsls	r5, r0, #2
 801ff36:	42b3      	cmp	r3, r6
 801ff38:	d902      	bls.n	801ff40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ff3a:	3001      	adds	r0, #1
 801ff3c:	b284      	uxth	r4, r0
 801ff3e:	e7f3      	b.n	801ff28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ff40:	d102      	bne.n	801ff48 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801ff42:	442a      	add	r2, r5
 801ff44:	8850      	ldrh	r0, [r2, #2]
 801ff46:	bd70      	pop	{r4, r5, r6, pc}
 801ff48:	b281      	uxth	r1, r0
 801ff4a:	e7ed      	b.n	801ff28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ff4c:	2000      	movs	r0, #0
 801ff4e:	e7fa      	b.n	801ff46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801ff50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801ff50:	b510      	push	{r4, lr}
 801ff52:	8ac3      	ldrh	r3, [r0, #22]
 801ff54:	428b      	cmp	r3, r1
 801ff56:	d805      	bhi.n	801ff64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801ff58:	4b07      	ldr	r3, [pc, #28]	; (801ff78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801ff5a:	21fd      	movs	r1, #253	; 0xfd
 801ff5c:	4a07      	ldr	r2, [pc, #28]	; (801ff7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801ff5e:	4808      	ldr	r0, [pc, #32]	; (801ff80 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801ff60:	f00a fe40 	bl	802abe4 <__assert_func>
 801ff64:	8a83      	ldrh	r3, [r0, #20]
 801ff66:	240a      	movs	r4, #10
 801ff68:	4419      	add	r1, r3
 801ff6a:	fbb1 f3f4 	udiv	r3, r1, r4
 801ff6e:	fb04 1113 	mls	r1, r4, r3, r1
 801ff72:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ff76:	bd10      	pop	{r4, pc}
 801ff78:	0802f411 	.word	0x0802f411
 801ff7c:	0802f840 	.word	0x0802f840
 801ff80:	0802f41f 	.word	0x0802f41f

0801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801ff84:	b508      	push	{r3, lr}
 801ff86:	8ac3      	ldrh	r3, [r0, #22]
 801ff88:	428b      	cmp	r3, r1
 801ff8a:	d805      	bhi.n	801ff98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801ff8c:	4b07      	ldr	r3, [pc, #28]	; (801ffac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801ff8e:	21d3      	movs	r1, #211	; 0xd3
 801ff90:	4a07      	ldr	r2, [pc, #28]	; (801ffb0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801ff92:	4808      	ldr	r0, [pc, #32]	; (801ffb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801ff94:	f00a fe26 	bl	802abe4 <__assert_func>
 801ff98:	8a83      	ldrh	r3, [r0, #20]
 801ff9a:	220a      	movs	r2, #10
 801ff9c:	4419      	add	r1, r3
 801ff9e:	fbb1 f3f2 	udiv	r3, r1, r2
 801ffa2:	fb02 1113 	mls	r1, r2, r3, r1
 801ffa6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801ffaa:	bd08      	pop	{r3, pc}
 801ffac:	0802f411 	.word	0x0802f411
 801ffb0:	0802f590 	.word	0x0802f590
 801ffb4:	0802f41f 	.word	0x0802f41f

0801ffb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ffb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffbc:	4604      	mov	r4, r0
 801ffbe:	4688      	mov	r8, r1
 801ffc0:	4615      	mov	r5, r2
 801ffc2:	b94a      	cbnz	r2, 801ffd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801ffc4:	4691      	mov	r9, r2
 801ffc6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801ffca:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801ffce:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801ffd2:	4648      	mov	r0, r9
 801ffd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffd8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801ffdc:	8892      	ldrh	r2, [r2, #4]
 801ffde:	462b      	mov	r3, r5
 801ffe0:	f105 0c08 	add.w	ip, r5, #8
 801ffe4:	46b3      	mov	fp, r6
 801ffe6:	6818      	ldr	r0, [r3, #0]
 801ffe8:	3308      	adds	r3, #8
 801ffea:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ffee:	4637      	mov	r7, r6
 801fff0:	4563      	cmp	r3, ip
 801fff2:	c703      	stmia	r7!, {r0, r1}
 801fff4:	463e      	mov	r6, r7
 801fff6:	d1f6      	bne.n	801ffe6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801fff8:	6818      	ldr	r0, [r3, #0]
 801fffa:	46d9      	mov	r9, fp
 801fffc:	6038      	str	r0, [r7, #0]
 801fffe:	889b      	ldrh	r3, [r3, #4]
 8020000:	80bb      	strh	r3, [r7, #4]
 8020002:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8020006:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 802000a:	18d3      	adds	r3, r2, r3
 802000c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8020010:	b298      	uxth	r0, r3
 8020012:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8020016:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 802001a:	281d      	cmp	r0, #29
 802001c:	ea4a 0a01 	orr.w	sl, sl, r1
 8020020:	fa1f f68a 	uxth.w	r6, sl
 8020024:	d842      	bhi.n	80200ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8020026:	2301      	movs	r3, #1
 8020028:	4950      	ldr	r1, [pc, #320]	; (802016c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 802002a:	ea4f 0aea 	mov.w	sl, sl, asr #3
 802002e:	4083      	lsls	r3, r0
 8020030:	420b      	tst	r3, r1
 8020032:	d114      	bne.n	802005e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8020034:	f413 7f60 	tst.w	r3, #896	; 0x380
 8020038:	d03c      	beq.n	80200b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 802003a:	fa1f fa8a 	uxth.w	sl, sl
 802003e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8020042:	4658      	mov	r0, fp
 8020044:	eba1 010a 	sub.w	r1, r1, sl
 8020048:	b209      	sxth	r1, r1
 802004a:	f7ff fefb 	bl	801fe44 <_ZN8touchgfx9GlyphNode6setTopEs>
 802004e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8020052:	1b86      	subs	r6, r0, r6
 8020054:	eba6 0a0a 	sub.w	sl, r6, sl
 8020058:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 802005c:	e7b9      	b.n	801ffd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802005e:	2100      	movs	r1, #0
 8020060:	f104 001a 	add.w	r0, r4, #26
 8020064:	f7ff ff8e 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020068:	f640 6333 	movw	r3, #3635	; 0xe33
 802006c:	4601      	mov	r1, r0
 802006e:	4298      	cmp	r0, r3
 8020070:	d10a      	bne.n	8020088 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8020072:	f8d8 3000 	ldr.w	r3, [r8]
 8020076:	4640      	mov	r0, r8
 8020078:	68db      	ldr	r3, [r3, #12]
 802007a:	4798      	blx	r3
 802007c:	7b41      	ldrb	r1, [r0, #13]
 802007e:	7a00      	ldrb	r0, [r0, #8]
 8020080:	f7ff fed2 	bl	801fe28 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8020084:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8020088:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 802008c:	4658      	mov	r0, fp
 802008e:	4431      	add	r1, r6
 8020090:	4451      	add	r1, sl
 8020092:	b209      	sxth	r1, r1
 8020094:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8020098:	f7ff fed4 	bl	801fe44 <_ZN8touchgfx9GlyphNode6setTopEs>
 802009c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80200a0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80200a4:	1a9b      	subs	r3, r3, r2
 80200a6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80200aa:	e792      	b.n	801ffd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80200ac:	f640 631b 	movw	r3, #3611	; 0xe1b
 80200b0:	429a      	cmp	r2, r3
 80200b2:	d005      	beq.n	80200c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 80200b4:	f022 0302 	bic.w	r3, r2, #2
 80200b8:	f640 611d 	movw	r1, #3613	; 0xe1d
 80200bc:	428b      	cmp	r3, r1
 80200be:	d119      	bne.n	80200f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 80200c0:	1e53      	subs	r3, r2, #1
 80200c2:	4629      	mov	r1, r5
 80200c4:	4642      	mov	r2, r8
 80200c6:	4620      	mov	r0, r4
 80200c8:	b29b      	uxth	r3, r3
 80200ca:	f7ff ff18 	bl	801fefe <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80200ce:	7b41      	ldrb	r1, [r0, #13]
 80200d0:	7a00      	ldrb	r0, [r0, #8]
 80200d2:	f7ff fea9 	bl	801fe28 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80200d6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80200da:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80200de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80200e2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80200e6:	4313      	orrs	r3, r2
 80200e8:	115a      	asrs	r2, r3, #5
 80200ea:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80200ee:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80200f2:	e02e      	b.n	8020152 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80200f4:	4639      	mov	r1, r7
 80200f6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80200fa:	f7ff fe95 	bl	801fe28 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80200fe:	f640 6109 	movw	r1, #3593	; 0xe09
 8020102:	f022 0310 	bic.w	r3, r2, #16
 8020106:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 802010a:	428b      	cmp	r3, r1
 802010c:	d003      	beq.n	8020116 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 802010e:	f640 6313 	movw	r3, #3603	; 0xe13
 8020112:	429a      	cmp	r2, r3
 8020114:	d127      	bne.n	8020166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 8020116:	b27f      	sxtb	r7, r7
 8020118:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 802011c:	4629      	mov	r1, r5
 802011e:	4620      	mov	r0, r4
 8020120:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8020124:	431f      	orrs	r7, r3
 8020126:	f640 6313 	movw	r3, #3603	; 0xe13
 802012a:	429a      	cmp	r2, r3
 802012c:	bf14      	ite	ne
 802012e:	f102 33ff 	addne.w	r3, r2, #4294967295
 8020132:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8020136:	4642      	mov	r2, r8
 8020138:	bf18      	it	ne
 802013a:	b29b      	uxthne	r3, r3
 802013c:	f7ff fedf 	bl	801fefe <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020140:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8020144:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020148:	7a83      	ldrb	r3, [r0, #10]
 802014a:	4313      	orrs	r3, r2
 802014c:	1aff      	subs	r7, r7, r3
 802014e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8020152:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020156:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 802015a:	f7ff fe65 	bl	801fe28 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 802015e:	1b80      	subs	r0, r0, r6
 8020160:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8020164:	e735      	b.n	801ffd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8020166:	2300      	movs	r3, #0
 8020168:	e7c1      	b.n	80200ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 802016a:	bf00      	nop
 802016c:	3fc00079 	.word	0x3fc00079

08020170 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020170:	3a01      	subs	r2, #1
 8020172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020176:	b292      	uxth	r2, r2
 8020178:	460c      	mov	r4, r1
 802017a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 802017e:	42b2      	cmp	r2, r6
 8020180:	d018      	beq.n	80201b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8020182:	8b01      	ldrh	r1, [r0, #24]
 8020184:	f834 5b02 	ldrh.w	r5, [r4], #2
 8020188:	4291      	cmp	r1, r2
 802018a:	d805      	bhi.n	8020198 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 802018c:	4b13      	ldr	r3, [pc, #76]	; (80201dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 802018e:	21d3      	movs	r1, #211	; 0xd3
 8020190:	4a13      	ldr	r2, [pc, #76]	; (80201e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8020192:	4814      	ldr	r0, [pc, #80]	; (80201e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8020194:	f00a fd26 	bl	802abe4 <__assert_func>
 8020198:	8ac1      	ldrh	r1, [r0, #22]
 802019a:	4411      	add	r1, r2
 802019c:	3a01      	subs	r2, #1
 802019e:	f001 0101 	and.w	r1, r1, #1
 80201a2:	b292      	uxth	r2, r2
 80201a4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80201a8:	8a49      	ldrh	r1, [r1, #18]
 80201aa:	428d      	cmp	r5, r1
 80201ac:	d0e7      	beq.n	802017e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 80201ae:	2000      	movs	r0, #0
 80201b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201b4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80201b8:	2600      	movs	r6, #0
 80201ba:	f100 051a 	add.w	r5, r0, #26
 80201be:	441f      	add	r7, r3
 80201c0:	b2b1      	uxth	r1, r6
 80201c2:	42b9      	cmp	r1, r7
 80201c4:	da08      	bge.n	80201d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 80201c6:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 80201ca:	4628      	mov	r0, r5
 80201cc:	f7ff feda 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80201d0:	3601      	adds	r6, #1
 80201d2:	4540      	cmp	r0, r8
 80201d4:	d0f4      	beq.n	80201c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80201d6:	e7ea      	b.n	80201ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80201d8:	2001      	movs	r0, #1
 80201da:	e7e9      	b.n	80201b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80201dc:	0802f411 	.word	0x0802f411
 80201e0:	0802f9a0 	.word	0x0802f9a0
 80201e4:	0802f41f 	.word	0x0802f41f

080201e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 80201e8:	b538      	push	{r3, r4, r5, lr}
 80201ea:	8ac3      	ldrh	r3, [r0, #22]
 80201ec:	428b      	cmp	r3, r1
 80201ee:	d205      	bcs.n	80201fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80201f0:	4b08      	ldr	r3, [pc, #32]	; (8020214 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80201f2:	21d8      	movs	r1, #216	; 0xd8
 80201f4:	4a08      	ldr	r2, [pc, #32]	; (8020218 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80201f6:	4809      	ldr	r0, [pc, #36]	; (802021c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80201f8:	f00a fcf4 	bl	802abe4 <__assert_func>
 80201fc:	8a82      	ldrh	r2, [r0, #20]
 80201fe:	250a      	movs	r5, #10
 8020200:	1a5b      	subs	r3, r3, r1
 8020202:	440a      	add	r2, r1
 8020204:	82c3      	strh	r3, [r0, #22]
 8020206:	fbb2 f4f5 	udiv	r4, r2, r5
 802020a:	fb05 2214 	mls	r2, r5, r4, r2
 802020e:	8282      	strh	r2, [r0, #20]
 8020210:	bd38      	pop	{r3, r4, r5, pc}
 8020212:	bf00      	nop
 8020214:	0802f405 	.word	0x0802f405
 8020218:	0802f7bc 	.word	0x0802f7bc
 802021c:	0802f41f 	.word	0x0802f41f

08020220 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8020220:	b538      	push	{r3, r4, r5, lr}
 8020222:	8ac3      	ldrh	r3, [r0, #22]
 8020224:	2b09      	cmp	r3, #9
 8020226:	d905      	bls.n	8020234 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8020228:	4b08      	ldr	r3, [pc, #32]	; (802024c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 802022a:	21f7      	movs	r1, #247	; 0xf7
 802022c:	4a08      	ldr	r2, [pc, #32]	; (8020250 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 802022e:	4809      	ldr	r0, [pc, #36]	; (8020254 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8020230:	f00a fcd8 	bl	802abe4 <__assert_func>
 8020234:	8a82      	ldrh	r2, [r0, #20]
 8020236:	250a      	movs	r5, #10
 8020238:	441a      	add	r2, r3
 802023a:	3301      	adds	r3, #1
 802023c:	fbb2 f4f5 	udiv	r4, r2, r5
 8020240:	fb05 2214 	mls	r2, r5, r4, r2
 8020244:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8020248:	82c3      	strh	r3, [r0, #22]
 802024a:	bd38      	pop	{r3, r4, r5, pc}
 802024c:	0802f3f9 	.word	0x0802f3f9
 8020250:	0802f70d 	.word	0x0802f70d
 8020254:	0802f41f 	.word	0x0802f41f

08020258 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020258:	b538      	push	{r3, r4, r5, lr}
 802025a:	4604      	mov	r4, r0
 802025c:	f100 051a 	add.w	r5, r0, #26
 8020260:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020262:	2b0a      	cmp	r3, #10
 8020264:	d01c      	beq.n	80202a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8020266:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8020268:	b962      	cbnz	r2, 8020284 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 802026a:	f104 051a 	add.w	r5, r4, #26
 802026e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020270:	2b0a      	cmp	r3, #10
 8020272:	d015      	beq.n	80202a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8020274:	4620      	mov	r0, r4
 8020276:	f7ff fdf6 	bl	801fe66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 802027a:	4601      	mov	r1, r0
 802027c:	4628      	mov	r0, r5
 802027e:	f7ff ffcf 	bl	8020220 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8020282:	e7f4      	b.n	802026e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8020284:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020286:	3a01      	subs	r2, #1
 8020288:	4628      	mov	r0, r5
 802028a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 802028e:	3301      	adds	r3, #1
 8020290:	f003 0301 	and.w	r3, r3, #1
 8020294:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8020296:	8722      	strh	r2, [r4, #56]	; 0x38
 8020298:	86e3      	strh	r3, [r4, #54]	; 0x36
 802029a:	f7ff ffc1 	bl	8020220 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 802029e:	e7df      	b.n	8020260 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 80202a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080202a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 80202a4:	2300      	movs	r3, #0
 80202a6:	b510      	push	{r4, lr}
 80202a8:	6043      	str	r3, [r0, #4]
 80202aa:	4604      	mov	r4, r0
 80202ac:	60c3      	str	r3, [r0, #12]
 80202ae:	7403      	strb	r3, [r0, #16]
 80202b0:	8603      	strh	r3, [r0, #48]	; 0x30
 80202b2:	8303      	strh	r3, [r0, #24]
 80202b4:	8703      	strh	r3, [r0, #56]	; 0x38
 80202b6:	f7ff ffcf 	bl	8020258 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80202ba:	4a0a      	ldr	r2, [pc, #40]	; (80202e4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 80202bc:	6813      	ldr	r3, [r2, #0]
 80202be:	4611      	mov	r1, r2
 80202c0:	b913      	cbnz	r3, 80202c8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 80202c2:	6852      	ldr	r2, [r2, #4]
 80202c4:	07d0      	lsls	r0, r2, #31
 80202c6:	d50b      	bpl.n	80202e0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 80202c8:	6849      	ldr	r1, [r1, #4]
 80202ca:	104a      	asrs	r2, r1, #1
 80202cc:	07c9      	lsls	r1, r1, #31
 80202ce:	eb04 0002 	add.w	r0, r4, r2
 80202d2:	bf48      	it	mi
 80202d4:	58a2      	ldrmi	r2, [r4, r2]
 80202d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202da:	bf48      	it	mi
 80202dc:	58d3      	ldrmi	r3, [r2, r3]
 80202de:	4718      	bx	r3
 80202e0:	bd10      	pop	{r4, pc}
 80202e2:	bf00      	nop
 80202e4:	20008710 	.word	0x20008710

080202e8 <_ZN8touchgfx12TextProviderC1Ev>:
 80202e8:	2300      	movs	r3, #0
 80202ea:	2201      	movs	r2, #1
 80202ec:	b510      	push	{r4, lr}
 80202ee:	4604      	mov	r4, r0
 80202f0:	60c3      	str	r3, [r0, #12]
 80202f2:	7403      	strb	r3, [r0, #16]
 80202f4:	82c3      	strh	r3, [r0, #22]
 80202f6:	8303      	strh	r3, [r0, #24]
 80202f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80202fa:	8603      	strh	r3, [r0, #48]	; 0x30
 80202fc:	86c3      	strh	r3, [r0, #54]	; 0x36
 80202fe:	8703      	strh	r3, [r0, #56]	; 0x38
 8020300:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020302:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8020306:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 802030a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 802030e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8020312:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8020316:	e9c0 3300 	strd	r3, r3, [r0]
 802031a:	f7ff ffc3 	bl	80202a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 802031e:	4620      	mov	r0, r4
 8020320:	bd10      	pop	{r4, pc}

08020322 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8020322:	b410      	push	{r4}
 8020324:	6082      	str	r2, [r0, #8]
 8020326:	6001      	str	r1, [r0, #0]
 8020328:	63c3      	str	r3, [r0, #60]	; 0x3c
 802032a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802032e:	f7ff bfb9 	b.w	80202a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08020334 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8020334:	b508      	push	{r3, lr}
 8020336:	88c2      	ldrh	r2, [r0, #6]
 8020338:	440a      	add	r2, r1
 802033a:	2a02      	cmp	r2, #2
 802033c:	dd05      	ble.n	802034a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 802033e:	4b06      	ldr	r3, [pc, #24]	; (8020358 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8020340:	21ec      	movs	r1, #236	; 0xec
 8020342:	4a06      	ldr	r2, [pc, #24]	; (802035c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8020344:	4806      	ldr	r0, [pc, #24]	; (8020360 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8020346:	f00a fc4d 	bl	802abe4 <__assert_func>
 802034a:	8883      	ldrh	r3, [r0, #4]
 802034c:	80c2      	strh	r2, [r0, #6]
 802034e:	1a59      	subs	r1, r3, r1
 8020350:	f001 0101 	and.w	r1, r1, #1
 8020354:	8081      	strh	r1, [r0, #4]
 8020356:	bd08      	pop	{r3, pc}
 8020358:	0802f44b 	.word	0x0802f44b
 802035c:	0802f919 	.word	0x0802f919
 8020360:	0802f41f 	.word	0x0802f41f

08020364 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8020364:	b508      	push	{r3, lr}
 8020366:	88c3      	ldrh	r3, [r0, #6]
 8020368:	428b      	cmp	r3, r1
 802036a:	d805      	bhi.n	8020378 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 802036c:	4b06      	ldr	r3, [pc, #24]	; (8020388 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 802036e:	21fd      	movs	r1, #253	; 0xfd
 8020370:	4a06      	ldr	r2, [pc, #24]	; (802038c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8020372:	4807      	ldr	r0, [pc, #28]	; (8020390 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8020374:	f00a fc36 	bl	802abe4 <__assert_func>
 8020378:	8883      	ldrh	r3, [r0, #4]
 802037a:	4419      	add	r1, r3
 802037c:	f001 0101 	and.w	r1, r1, #1
 8020380:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8020384:	bd08      	pop	{r3, pc}
 8020386:	bf00      	nop
 8020388:	0802f411 	.word	0x0802f411
 802038c:	0802fa71 	.word	0x0802fa71
 8020390:	0802f41f 	.word	0x0802f41f

08020394 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020394:	b570      	push	{r4, r5, r6, lr}
 8020396:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8020398:	4604      	mov	r4, r0
 802039a:	b92a      	cbnz	r2, 80203a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 802039c:	4b12      	ldr	r3, [pc, #72]	; (80203e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 802039e:	21de      	movs	r1, #222	; 0xde
 80203a0:	4a12      	ldr	r2, [pc, #72]	; (80203ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80203a2:	4813      	ldr	r0, [pc, #76]	; (80203f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80203a4:	f00a fc1e 	bl	802abe4 <__assert_func>
 80203a8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80203aa:	260a      	movs	r6, #10
 80203ac:	3a01      	subs	r2, #1
 80203ae:	3412      	adds	r4, #18
 80203b0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80203b4:	3301      	adds	r3, #1
 80203b6:	8b4d      	ldrh	r5, [r1, #26]
 80203b8:	8602      	strh	r2, [r0, #48]	; 0x30
 80203ba:	fbb3 f1f6 	udiv	r1, r3, r6
 80203be:	fb06 3311 	mls	r3, r6, r1, r3
 80203c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80203c4:	f7ff ff48 	bl	8020258 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80203c8:	88e3      	ldrh	r3, [r4, #6]
 80203ca:	2101      	movs	r1, #1
 80203cc:	2b02      	cmp	r3, #2
 80203ce:	bf04      	itt	eq
 80203d0:	2301      	moveq	r3, #1
 80203d2:	80e3      	strheq	r3, [r4, #6]
 80203d4:	4620      	mov	r0, r4
 80203d6:	f7ff ffad 	bl	8020334 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80203da:	4620      	mov	r0, r4
 80203dc:	462a      	mov	r2, r5
 80203de:	2100      	movs	r1, #0
 80203e0:	f7ff ffc0 	bl	8020364 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80203e4:	4628      	mov	r0, r5
 80203e6:	bd70      	pop	{r4, r5, r6, pc}
 80203e8:	0802f3f0 	.word	0x0802f3f0
 80203ec:	0802f662 	.word	0x0802f662
 80203f0:	0802f41f 	.word	0x0802f41f

080203f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80203f4:	428a      	cmp	r2, r1
 80203f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203fa:	4604      	mov	r4, r0
 80203fc:	460e      	mov	r6, r1
 80203fe:	4615      	mov	r5, r2
 8020400:	469a      	mov	sl, r3
 8020402:	d92b      	bls.n	802045c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8020404:	1a57      	subs	r7, r2, r1
 8020406:	f04f 0800 	mov.w	r8, #0
 802040a:	f100 0932 	add.w	r9, r0, #50	; 0x32
 802040e:	f04f 0b0a 	mov.w	fp, #10
 8020412:	b2bf      	uxth	r7, r7
 8020414:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020416:	b92b      	cbnz	r3, 8020424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8020418:	4b24      	ldr	r3, [pc, #144]	; (80204ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 802041a:	21e6      	movs	r1, #230	; 0xe6
 802041c:	4a24      	ldr	r2, [pc, #144]	; (80204b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 802041e:	4825      	ldr	r0, [pc, #148]	; (80204b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8020420:	f00a fbe0 	bl	802abe4 <__assert_func>
 8020424:	3b01      	subs	r3, #1
 8020426:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020428:	2101      	movs	r1, #1
 802042a:	4648      	mov	r0, r9
 802042c:	b29b      	uxth	r3, r3
 802042e:	f108 0801 	add.w	r8, r8, #1
 8020432:	441a      	add	r2, r3
 8020434:	8623      	strh	r3, [r4, #48]	; 0x30
 8020436:	fbb2 f3fb 	udiv	r3, r2, fp
 802043a:	fb0b 2313 	mls	r3, fp, r3, r2
 802043e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020442:	8b5a      	ldrh	r2, [r3, #26]
 8020444:	9201      	str	r2, [sp, #4]
 8020446:	f7ff ff75 	bl	8020334 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 802044a:	9a01      	ldr	r2, [sp, #4]
 802044c:	2100      	movs	r1, #0
 802044e:	4648      	mov	r0, r9
 8020450:	f7ff ff88 	bl	8020364 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8020454:	fa1f f388 	uxth.w	r3, r8
 8020458:	429f      	cmp	r7, r3
 802045a:	d8db      	bhi.n	8020414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 802045c:	f104 071a 	add.w	r7, r4, #26
 8020460:	4631      	mov	r1, r6
 8020462:	260a      	movs	r6, #10
 8020464:	4638      	mov	r0, r7
 8020466:	f7ff febf 	bl	80201e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 802046a:	b1c5      	cbz	r5, 802049e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 802046c:	3d01      	subs	r5, #1
 802046e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020470:	b2ad      	uxth	r5, r5
 8020472:	2b09      	cmp	r3, #9
 8020474:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8020478:	d903      	bls.n	8020482 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 802047a:	4b0f      	ldr	r3, [pc, #60]	; (80204b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 802047c:	21ec      	movs	r1, #236	; 0xec
 802047e:	4a0f      	ldr	r2, [pc, #60]	; (80204bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8020480:	e7cd      	b.n	802041e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8020482:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8020484:	3301      	adds	r3, #1
 8020486:	3109      	adds	r1, #9
 8020488:	8623      	strh	r3, [r4, #48]	; 0x30
 802048a:	fbb1 f0f6 	udiv	r0, r1, r6
 802048e:	fb06 1110 	mls	r1, r6, r0, r1
 8020492:	4638      	mov	r0, r7
 8020494:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8020496:	2100      	movs	r1, #0
 8020498:	f7ff fd5a 	bl	801ff50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 802049c:	e7e5      	b.n	802046a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 802049e:	4620      	mov	r0, r4
 80204a0:	b003      	add	sp, #12
 80204a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204a6:	f7ff bed7 	b.w	8020258 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80204aa:	bf00      	nop
 80204ac:	0802f3f0 	.word	0x0802f3f0
 80204b0:	0802f4e6 	.word	0x0802f4e6
 80204b4:	0802f41f 	.word	0x0802f41f
 80204b8:	0802f44b 	.word	0x0802f44b
 80204bc:	0802f45e 	.word	0x0802f45e

080204c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80204c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c4:	4605      	mov	r5, r0
 80204c6:	4616      	mov	r6, r2
 80204c8:	1c8c      	adds	r4, r1, #2
 80204ca:	8809      	ldrh	r1, [r1, #0]
 80204cc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80204d0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80204d4:	42b3      	cmp	r3, r6
 80204d6:	d124      	bne.n	8020522 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80204d8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80204dc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80204e0:	f001 070f 	and.w	r7, r1, #15
 80204e4:	4652      	mov	r2, sl
 80204e6:	f8cd 8000 	str.w	r8, [sp]
 80204ea:	464b      	mov	r3, r9
 80204ec:	4621      	mov	r1, r4
 80204ee:	4628      	mov	r0, r5
 80204f0:	f7ff fe3e 	bl	8020170 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80204f4:	4683      	mov	fp, r0
 80204f6:	b168      	cbz	r0, 8020514 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80204f8:	eb0a 0109 	add.w	r1, sl, r9
 80204fc:	463a      	mov	r2, r7
 80204fe:	4628      	mov	r0, r5
 8020500:	4441      	add	r1, r8
 8020502:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020506:	4649      	mov	r1, r9
 8020508:	f7ff ff74 	bl	80203f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 802050c:	4658      	mov	r0, fp
 802050e:	b003      	add	sp, #12
 8020510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020514:	eb07 010a 	add.w	r1, r7, sl
 8020518:	4449      	add	r1, r9
 802051a:	4441      	add	r1, r8
 802051c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020520:	e7d2      	b.n	80204c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020522:	f04f 0b00 	mov.w	fp, #0
 8020526:	e7f1      	b.n	802050c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020528 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802052c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 802052e:	4604      	mov	r4, r0
 8020530:	260b      	movs	r6, #11
 8020532:	f100 091a 	add.w	r9, r0, #26
 8020536:	886f      	ldrh	r7, [r5, #2]
 8020538:	087f      	lsrs	r7, r7, #1
 802053a:	3e01      	subs	r6, #1
 802053c:	d013      	beq.n	8020566 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 802053e:	2100      	movs	r1, #0
 8020540:	4648      	mov	r0, r9
 8020542:	f7ff fd1f 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020546:	462a      	mov	r2, r5
 8020548:	4680      	mov	r8, r0
 802054a:	4603      	mov	r3, r0
 802054c:	4639      	mov	r1, r7
 802054e:	4620      	mov	r0, r4
 8020550:	f7ff fce0 	bl	801ff14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020554:	b138      	cbz	r0, 8020566 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8020556:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 802055a:	4642      	mov	r2, r8
 802055c:	4620      	mov	r0, r4
 802055e:	f7ff ffaf 	bl	80204c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020562:	2800      	cmp	r0, #0
 8020564:	d1e9      	bne.n	802053a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8020566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 802056c:	4b1e      	ldr	r3, [pc, #120]	; (80205e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 802056e:	b570      	push	{r4, r5, r6, lr}
 8020570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020574:	4604      	mov	r4, r0
 8020576:	f003 0501 	and.w	r5, r3, #1
 802057a:	b902      	cbnz	r2, 802057e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 802057c:	b165      	cbz	r5, 8020598 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 802057e:	105b      	asrs	r3, r3, #1
 8020580:	f104 061a 	add.w	r6, r4, #26
 8020584:	18e0      	adds	r0, r4, r3
 8020586:	b10d      	cbz	r5, 802058c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8020588:	58e3      	ldr	r3, [r4, r3]
 802058a:	589a      	ldr	r2, [r3, r2]
 802058c:	4790      	blx	r2
 802058e:	2100      	movs	r1, #0
 8020590:	4602      	mov	r2, r0
 8020592:	4630      	mov	r0, r6
 8020594:	f7ff fcdc 	bl	801ff50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802059a:	b303      	cbz	r3, 80205de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 802059c:	f104 051a 	add.w	r5, r4, #26
 80205a0:	2100      	movs	r1, #0
 80205a2:	4628      	mov	r0, r5
 80205a4:	f7ff fcee 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80205a8:	b1c8      	cbz	r0, 80205de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80205aa:	4620      	mov	r0, r4
 80205ac:	f7ff ffbc 	bl	8020528 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 80205b0:	2101      	movs	r1, #1
 80205b2:	4628      	mov	r0, r5
 80205b4:	f7ff fce6 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80205b8:	f640 133f 	movw	r3, #2367	; 0x93f
 80205bc:	4606      	mov	r6, r0
 80205be:	4298      	cmp	r0, r3
 80205c0:	d10d      	bne.n	80205de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80205c2:	2100      	movs	r1, #0
 80205c4:	4628      	mov	r0, r5
 80205c6:	f7ff fcdd 	bl	801ff84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80205ca:	2101      	movs	r1, #1
 80205cc:	4602      	mov	r2, r0
 80205ce:	4628      	mov	r0, r5
 80205d0:	f7ff fcbe 	bl	801ff50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80205d4:	4632      	mov	r2, r6
 80205d6:	2100      	movs	r1, #0
 80205d8:	4628      	mov	r0, r5
 80205da:	f7ff fcb9 	bl	801ff50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80205de:	4620      	mov	r0, r4
 80205e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80205e4:	f7ff bed6 	b.w	8020394 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80205e8:	20008718 	.word	0x20008718

080205ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80205ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205ee:	4617      	mov	r7, r2
 80205f0:	461e      	mov	r6, r3
 80205f2:	4605      	mov	r5, r0
 80205f4:	f7ff ffba 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	4604      	mov	r4, r0
 80205fc:	4601      	mov	r1, r0
 80205fe:	4638      	mov	r0, r7
 8020600:	68db      	ldr	r3, [r3, #12]
 8020602:	4798      	blx	r3
 8020604:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8020608:	4602      	mov	r2, r0
 802060a:	6030      	str	r0, [r6, #0]
 802060c:	b29b      	uxth	r3, r3
 802060e:	2b7f      	cmp	r3, #127	; 0x7f
 8020610:	d813      	bhi.n	802063a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8020612:	4639      	mov	r1, r7
 8020614:	4628      	mov	r0, r5
 8020616:	f7ff fccf 	bl	801ffb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 802061a:	6030      	str	r0, [r6, #0]
 802061c:	6833      	ldr	r3, [r6, #0]
 802061e:	b143      	cbz	r3, 8020632 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8020620:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8020624:	7a9b      	ldrb	r3, [r3, #10]
 8020626:	f402 7280 	and.w	r2, r2, #256	; 0x100
 802062a:	4313      	orrs	r3, r2
 802062c:	bf0c      	ite	eq
 802062e:	2301      	moveq	r3, #1
 8020630:	2300      	movne	r3, #0
 8020632:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020636:	4620      	mov	r0, r4
 8020638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802063a:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 802063e:	2b00      	cmp	r3, #0
 8020640:	d0ec      	beq.n	802061c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8020642:	f640 1302 	movw	r3, #2306	; 0x902
 8020646:	429c      	cmp	r4, r3
 8020648:	d1e8      	bne.n	802061c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 802064a:	4601      	mov	r1, r0
 802064c:	4628      	mov	r0, r5
 802064e:	f7ff fc32 	bl	801feb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020652:	e7e2      	b.n	802061a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08020654 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020658:	4617      	mov	r7, r2
 802065a:	461e      	mov	r6, r3
 802065c:	4605      	mov	r5, r0
 802065e:	f7ff ff85 	bl	802056c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020662:	683b      	ldr	r3, [r7, #0]
 8020664:	4604      	mov	r4, r0
 8020666:	4601      	mov	r1, r0
 8020668:	4638      	mov	r0, r7
 802066a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 802066e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020672:	47c0      	blx	r8
 8020674:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8020678:	4602      	mov	r2, r0
 802067a:	6030      	str	r0, [r6, #0]
 802067c:	b29b      	uxth	r3, r3
 802067e:	2b7f      	cmp	r3, #127	; 0x7f
 8020680:	d814      	bhi.n	80206ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8020682:	4639      	mov	r1, r7
 8020684:	4628      	mov	r0, r5
 8020686:	f7ff fc97 	bl	801ffb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 802068a:	6030      	str	r0, [r6, #0]
 802068c:	6833      	ldr	r3, [r6, #0]
 802068e:	b143      	cbz	r3, 80206a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8020690:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8020694:	7a9b      	ldrb	r3, [r3, #10]
 8020696:	f402 7280 	and.w	r2, r2, #256	; 0x100
 802069a:	4313      	orrs	r3, r2
 802069c:	bf0c      	ite	eq
 802069e:	2301      	moveq	r3, #1
 80206a0:	2300      	movne	r3, #0
 80206a2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80206a6:	4620      	mov	r0, r4
 80206a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206ac:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d0eb      	beq.n	802068c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80206b4:	f640 1302 	movw	r3, #2306	; 0x902
 80206b8:	429c      	cmp	r4, r3
 80206ba:	d1e7      	bne.n	802068c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80206bc:	4601      	mov	r1, r0
 80206be:	4628      	mov	r0, r5
 80206c0:	f7ff fbf9 	bl	801feb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80206c4:	e7e1      	b.n	802068a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

080206c6 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80206c6:	4602      	mov	r2, r0
 80206c8:	b148      	cbz	r0, 80206de <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80206ca:	2300      	movs	r3, #0
 80206cc:	b298      	uxth	r0, r3
 80206ce:	3301      	adds	r3, #1
 80206d0:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80206d4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80206d8:	2900      	cmp	r1, #0
 80206da:	d1f7      	bne.n	80206cc <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80206dc:	4770      	bx	lr
 80206de:	4770      	bx	lr

080206e0 <_ZN8touchgfx7Unicode6strlenEPKc>:
 80206e0:	b140      	cbz	r0, 80206f4 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 80206e2:	4602      	mov	r2, r0
 80206e4:	1a13      	subs	r3, r2, r0
 80206e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80206ea:	b29b      	uxth	r3, r3
 80206ec:	2900      	cmp	r1, #0
 80206ee:	d1f9      	bne.n	80206e4 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 80206f0:	4618      	mov	r0, r3
 80206f2:	4770      	bx	lr
 80206f4:	4603      	mov	r3, r0
 80206f6:	e7fb      	b.n	80206f0 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

080206f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80206f8:	b530      	push	{r4, r5, lr}
 80206fa:	4604      	mov	r4, r0
 80206fc:	b159      	cbz	r1, 8020716 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80206fe:	b148      	cbz	r0, 8020714 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020700:	2300      	movs	r3, #0
 8020702:	b298      	uxth	r0, r3
 8020704:	4282      	cmp	r2, r0
 8020706:	d905      	bls.n	8020714 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020708:	5ccd      	ldrb	r5, [r1, r3]
 802070a:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 802070e:	3301      	adds	r3, #1
 8020710:	2d00      	cmp	r5, #0
 8020712:	d1f6      	bne.n	8020702 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8020714:	bd30      	pop	{r4, r5, pc}
 8020716:	4608      	mov	r0, r1
 8020718:	e7fc      	b.n	8020714 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0802071a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 802071a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802071c:	468c      	mov	ip, r1
 802071e:	b08b      	sub	sp, #44	; 0x2c
 8020720:	2100      	movs	r1, #0
 8020722:	ae01      	add	r6, sp, #4
 8020724:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020728:	211f      	movs	r1, #31
 802072a:	fbb0 f7f3 	udiv	r7, r0, r3
 802072e:	fb03 0517 	mls	r5, r3, r7, r0
 8020732:	4638      	mov	r0, r7
 8020734:	b2ec      	uxtb	r4, r5
 8020736:	2d09      	cmp	r5, #9
 8020738:	bfd4      	ite	le
 802073a:	3430      	addle	r4, #48	; 0x30
 802073c:	3457      	addgt	r4, #87	; 0x57
 802073e:	b2e4      	uxtb	r4, r4
 8020740:	558c      	strb	r4, [r1, r6]
 8020742:	1e4c      	subs	r4, r1, #1
 8020744:	b92f      	cbnz	r7, 8020752 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8020746:	4431      	add	r1, r6
 8020748:	4660      	mov	r0, ip
 802074a:	f7ff ffd5 	bl	80206f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802074e:	b00b      	add	sp, #44	; 0x2c
 8020750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020752:	4621      	mov	r1, r4
 8020754:	e7e9      	b.n	802072a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08020756 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8020756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020758:	4607      	mov	r7, r0
 802075a:	b08b      	sub	sp, #44	; 0x2c
 802075c:	4608      	mov	r0, r1
 802075e:	b341      	cbz	r1, 80207b2 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020760:	1e99      	subs	r1, r3, #2
 8020762:	290e      	cmp	r1, #14
 8020764:	d825      	bhi.n	80207b2 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020766:	2100      	movs	r1, #0
 8020768:	463c      	mov	r4, r7
 802076a:	261f      	movs	r6, #31
 802076c:	f10d 0c04 	add.w	ip, sp, #4
 8020770:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020774:	1e71      	subs	r1, r6, #1
 8020776:	fb94 fef3 	sdiv	lr, r4, r3
 802077a:	fb03 441e 	mls	r4, r3, lr, r4
 802077e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8020782:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020786:	b2ec      	uxtb	r4, r5
 8020788:	2d09      	cmp	r5, #9
 802078a:	bfd4      	ite	le
 802078c:	3430      	addle	r4, #48	; 0x30
 802078e:	3457      	addgt	r4, #87	; 0x57
 8020790:	b2e4      	uxtb	r4, r4
 8020792:	f80c 4006 	strb.w	r4, [ip, r6]
 8020796:	4674      	mov	r4, lr
 8020798:	b96c      	cbnz	r4, 80207b6 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 802079a:	2f00      	cmp	r7, #0
 802079c:	da05      	bge.n	80207aa <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 802079e:	ab0a      	add	r3, sp, #40	; 0x28
 80207a0:	4419      	add	r1, r3
 80207a2:	232d      	movs	r3, #45	; 0x2d
 80207a4:	f801 3c24 	strb.w	r3, [r1, #-36]
 80207a8:	1eb1      	subs	r1, r6, #2
 80207aa:	3101      	adds	r1, #1
 80207ac:	4461      	add	r1, ip
 80207ae:	f7ff ffa3 	bl	80206f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80207b2:	b00b      	add	sp, #44	; 0x2c
 80207b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207b6:	460e      	mov	r6, r1
 80207b8:	e7dc      	b.n	8020774 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080207ba <_ZN8touchgfx7Unicode4atoiEPKt>:
 80207ba:	b510      	push	{r4, lr}
 80207bc:	b158      	cbz	r0, 80207d6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80207be:	1e82      	subs	r2, r0, #2
 80207c0:	210a      	movs	r1, #10
 80207c2:	2000      	movs	r0, #0
 80207c4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80207c8:	3b30      	subs	r3, #48	; 0x30
 80207ca:	b29c      	uxth	r4, r3
 80207cc:	2c09      	cmp	r4, #9
 80207ce:	d802      	bhi.n	80207d6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80207d0:	fb01 3000 	mla	r0, r1, r0, r3
 80207d4:	e7f6      	b.n	80207c4 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 80207d6:	bd10      	pop	{r4, pc}

080207d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 80207d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207dc:	b085      	sub	sp, #20
 80207de:	f8d0 8000 	ldr.w	r8, [r0]
 80207e2:	468a      	mov	sl, r1
 80207e4:	461c      	mov	r4, r3
 80207e6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80207ea:	4681      	mov	r9, r0
 80207ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80207f0:	4640      	mov	r0, r8
 80207f2:	9203      	str	r2, [sp, #12]
 80207f4:	9102      	str	r1, [sp, #8]
 80207f6:	9301      	str	r3, [sp, #4]
 80207f8:	f7ff ff65 	bl	80206c6 <_ZN8touchgfx7Unicode6strlenEPKt>
 80207fc:	9a03      	ldr	r2, [sp, #12]
 80207fe:	f1ba 0f00 	cmp.w	sl, #0
 8020802:	bf0c      	ite	eq
 8020804:	4684      	moveq	ip, r0
 8020806:	f100 0c01 	addne.w	ip, r0, #1
 802080a:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 802080e:	8812      	ldrh	r2, [r2, #0]
 8020810:	fa1f fc8c 	uxth.w	ip, ip
 8020814:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020816:	2a69      	cmp	r2, #105	; 0x69
 8020818:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802081a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802081c:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8020820:	d004      	beq.n	802082c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020822:	d844      	bhi.n	80208ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8020824:	2a58      	cmp	r2, #88	; 0x58
 8020826:	d001      	beq.n	802082c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020828:	2a64      	cmp	r2, #100	; 0x64
 802082a:	d14b      	bne.n	80208c4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 802082c:	b1a4      	cbz	r4, 8020858 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 802082e:	b956      	cbnz	r6, 8020846 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8020830:	2801      	cmp	r0, #1
 8020832:	d108      	bne.n	8020846 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8020834:	f8b8 2000 	ldrh.w	r2, [r8]
 8020838:	2a30      	cmp	r2, #48	; 0x30
 802083a:	bf02      	ittt	eq
 802083c:	f108 0202 	addeq.w	r2, r8, #2
 8020840:	4630      	moveq	r0, r6
 8020842:	f8c9 2000 	streq.w	r2, [r9]
 8020846:	45b4      	cmp	ip, r6
 8020848:	da3e      	bge.n	80208c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 802084a:	b2b6      	uxth	r6, r6
 802084c:	eba6 040c 	sub.w	r4, r6, ip
 8020850:	46b4      	mov	ip, r6
 8020852:	b2a4      	uxth	r4, r4
 8020854:	f04f 0b00 	mov.w	fp, #0
 8020858:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 802085c:	3a01      	subs	r2, #1
 802085e:	b169      	cbz	r1, 802087c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020860:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020862:	458c      	cmp	ip, r1
 8020864:	da09      	bge.n	802087a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8020866:	eba1 010c 	sub.w	r1, r1, ip
 802086a:	b289      	uxth	r1, r1
 802086c:	b933      	cbnz	r3, 802087c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 802086e:	f1bb 0f00 	cmp.w	fp, #0
 8020872:	d02b      	beq.n	80208cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020874:	b350      	cbz	r0, 80208cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020876:	440c      	add	r4, r1
 8020878:	b2a4      	uxth	r4, r4
 802087a:	2100      	movs	r1, #0
 802087c:	682b      	ldr	r3, [r5, #0]
 802087e:	4293      	cmp	r3, r2
 8020880:	da07      	bge.n	8020892 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8020882:	f1ba 0f00 	cmp.w	sl, #0
 8020886:	d004      	beq.n	8020892 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8020888:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 802088c:	682b      	ldr	r3, [r5, #0]
 802088e:	3301      	adds	r3, #1
 8020890:	602b      	str	r3, [r5, #0]
 8020892:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8020896:	b354      	cbz	r4, 80208ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020898:	682e      	ldr	r6, [r5, #0]
 802089a:	3c01      	subs	r4, #1
 802089c:	42b2      	cmp	r2, r6
 802089e:	b2a4      	uxth	r4, r4
 80208a0:	dd25      	ble.n	80208ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80208a2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80208a6:	682b      	ldr	r3, [r5, #0]
 80208a8:	3301      	adds	r3, #1
 80208aa:	602b      	str	r3, [r5, #0]
 80208ac:	e7f3      	b.n	8020896 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 80208ae:	2a73      	cmp	r2, #115	; 0x73
 80208b0:	d003      	beq.n	80208ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 80208b2:	2a78      	cmp	r2, #120	; 0x78
 80208b4:	d0ba      	beq.n	802082c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80208b6:	2a6f      	cmp	r2, #111	; 0x6f
 80208b8:	e7b7      	b.n	802082a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 80208ba:	2c00      	cmp	r4, #0
 80208bc:	d0cc      	beq.n	8020858 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80208be:	42b0      	cmp	r0, r6
 80208c0:	dd00      	ble.n	80208c4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80208c2:	b2b0      	uxth	r0, r6
 80208c4:	2400      	movs	r4, #0
 80208c6:	e7c7      	b.n	8020858 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80208c8:	2400      	movs	r4, #0
 80208ca:	e7c3      	b.n	8020854 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 80208cc:	2900      	cmp	r1, #0
 80208ce:	d0d5      	beq.n	802087c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80208d0:	f04f 0c20 	mov.w	ip, #32
 80208d4:	682e      	ldr	r6, [r5, #0]
 80208d6:	2900      	cmp	r1, #0
 80208d8:	d0d0      	beq.n	802087c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80208da:	3901      	subs	r1, #1
 80208dc:	4296      	cmp	r6, r2
 80208de:	b289      	uxth	r1, r1
 80208e0:	dacb      	bge.n	802087a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 80208e2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80208e6:	682b      	ldr	r3, [r5, #0]
 80208e8:	3301      	adds	r3, #1
 80208ea:	602b      	str	r3, [r5, #0]
 80208ec:	e7f2      	b.n	80208d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 80208ee:	b198      	cbz	r0, 8020918 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80208f0:	f8d9 3000 	ldr.w	r3, [r9]
 80208f4:	881c      	ldrh	r4, [r3, #0]
 80208f6:	b17c      	cbz	r4, 8020918 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80208f8:	682c      	ldr	r4, [r5, #0]
 80208fa:	3801      	subs	r0, #1
 80208fc:	42a2      	cmp	r2, r4
 80208fe:	b280      	uxth	r0, r0
 8020900:	dd0a      	ble.n	8020918 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8020902:	1c9c      	adds	r4, r3, #2
 8020904:	f8c9 4000 	str.w	r4, [r9]
 8020908:	881c      	ldrh	r4, [r3, #0]
 802090a:	682b      	ldr	r3, [r5, #0]
 802090c:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8020910:	682b      	ldr	r3, [r5, #0]
 8020912:	3301      	adds	r3, #1
 8020914:	602b      	str	r3, [r5, #0]
 8020916:	e7ea      	b.n	80208ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020918:	2620      	movs	r6, #32
 802091a:	b151      	cbz	r1, 8020932 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 802091c:	6828      	ldr	r0, [r5, #0]
 802091e:	3901      	subs	r1, #1
 8020920:	4282      	cmp	r2, r0
 8020922:	b289      	uxth	r1, r1
 8020924:	dd05      	ble.n	8020932 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8020926:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 802092a:	682b      	ldr	r3, [r5, #0]
 802092c:	3301      	adds	r3, #1
 802092e:	602b      	str	r3, [r5, #0]
 8020930:	e7f3      	b.n	802091a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8020932:	b005      	add	sp, #20
 8020934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8020938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802093c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802093e:	4604      	mov	r4, r0
 8020940:	f04f 0801 	mov.w	r8, #1
 8020944:	2000      	movs	r0, #0
 8020946:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 802094a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 802094e:	8008      	strh	r0, [r1, #0]
 8020950:	7010      	strb	r0, [r2, #0]
 8020952:	7018      	strb	r0, [r3, #0]
 8020954:	f88c 0000 	strb.w	r0, [ip]
 8020958:	f88e 0000 	strb.w	r0, [lr]
 802095c:	7030      	strb	r0, [r6, #0]
 802095e:	6820      	ldr	r0, [r4, #0]
 8020960:	8800      	ldrh	r0, [r0, #0]
 8020962:	b190      	cbz	r0, 802098a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8020964:	282b      	cmp	r0, #43	; 0x2b
 8020966:	d001      	beq.n	802096c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8020968:	2820      	cmp	r0, #32
 802096a:	d104      	bne.n	8020976 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 802096c:	8008      	strh	r0, [r1, #0]
 802096e:	6820      	ldr	r0, [r4, #0]
 8020970:	3002      	adds	r0, #2
 8020972:	6020      	str	r0, [r4, #0]
 8020974:	e7f3      	b.n	802095e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8020976:	282d      	cmp	r0, #45	; 0x2d
 8020978:	d102      	bne.n	8020980 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 802097a:	f882 8000 	strb.w	r8, [r2]
 802097e:	e7f6      	b.n	802096e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8020980:	2823      	cmp	r0, #35	; 0x23
 8020982:	d102      	bne.n	802098a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8020984:	f883 8000 	strb.w	r8, [r3]
 8020988:	e7f1      	b.n	802096e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 802098a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802098e:	2b09      	cmp	r3, #9
 8020990:	d901      	bls.n	8020996 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8020992:	282a      	cmp	r0, #42	; 0x2a
 8020994:	d114      	bne.n	80209c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8020996:	2201      	movs	r2, #1
 8020998:	f88e 2000 	strb.w	r2, [lr]
 802099c:	6823      	ldr	r3, [r4, #0]
 802099e:	8819      	ldrh	r1, [r3, #0]
 80209a0:	2930      	cmp	r1, #48	; 0x30
 80209a2:	bf02      	ittt	eq
 80209a4:	3302      	addeq	r3, #2
 80209a6:	6023      	streq	r3, [r4, #0]
 80209a8:	f88c 2000 	strbeq.w	r2, [ip]
 80209ac:	6820      	ldr	r0, [r4, #0]
 80209ae:	8803      	ldrh	r3, [r0, #0]
 80209b0:	2b2a      	cmp	r3, #42	; 0x2a
 80209b2:	d11e      	bne.n	80209f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 80209b4:	f04f 33ff 	mov.w	r3, #4294967295
 80209b8:	603b      	str	r3, [r7, #0]
 80209ba:	6823      	ldr	r3, [r4, #0]
 80209bc:	3302      	adds	r3, #2
 80209be:	6023      	str	r3, [r4, #0]
 80209c0:	6823      	ldr	r3, [r4, #0]
 80209c2:	881b      	ldrh	r3, [r3, #0]
 80209c4:	2b2e      	cmp	r3, #46	; 0x2e
 80209c6:	d112      	bne.n	80209ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 80209c8:	2301      	movs	r3, #1
 80209ca:	7033      	strb	r3, [r6, #0]
 80209cc:	6823      	ldr	r3, [r4, #0]
 80209ce:	1c98      	adds	r0, r3, #2
 80209d0:	6020      	str	r0, [r4, #0]
 80209d2:	885b      	ldrh	r3, [r3, #2]
 80209d4:	2b2a      	cmp	r3, #42	; 0x2a
 80209d6:	d117      	bne.n	8020a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 80209d8:	f04f 33ff 	mov.w	r3, #4294967295
 80209dc:	602b      	str	r3, [r5, #0]
 80209de:	6823      	ldr	r3, [r4, #0]
 80209e0:	3302      	adds	r3, #2
 80209e2:	6023      	str	r3, [r4, #0]
 80209e4:	682b      	ldr	r3, [r5, #0]
 80209e6:	2b06      	cmp	r3, #6
 80209e8:	bfa8      	it	ge
 80209ea:	2306      	movge	r3, #6
 80209ec:	602b      	str	r3, [r5, #0]
 80209ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209f2:	f7ff fee2 	bl	80207ba <_ZN8touchgfx7Unicode4atoiEPKt>
 80209f6:	6038      	str	r0, [r7, #0]
 80209f8:	6823      	ldr	r3, [r4, #0]
 80209fa:	881a      	ldrh	r2, [r3, #0]
 80209fc:	3a30      	subs	r2, #48	; 0x30
 80209fe:	2a09      	cmp	r2, #9
 8020a00:	d8de      	bhi.n	80209c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8020a02:	3302      	adds	r3, #2
 8020a04:	6023      	str	r3, [r4, #0]
 8020a06:	e7f7      	b.n	80209f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 8020a08:	f7ff fed7 	bl	80207ba <_ZN8touchgfx7Unicode4atoiEPKt>
 8020a0c:	6028      	str	r0, [r5, #0]
 8020a0e:	6823      	ldr	r3, [r4, #0]
 8020a10:	881a      	ldrh	r2, [r3, #0]
 8020a12:	3a30      	subs	r2, #48	; 0x30
 8020a14:	2a09      	cmp	r2, #9
 8020a16:	d8e5      	bhi.n	80209e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 8020a18:	3302      	adds	r3, #2
 8020a1a:	6023      	str	r3, [r4, #0]
 8020a1c:	e7f7      	b.n	8020a0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

08020a1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 8020a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a22:	b0a2      	sub	sp, #136	; 0x88
 8020a24:	2500      	movs	r5, #0
 8020a26:	4606      	mov	r6, r0
 8020a28:	460f      	mov	r7, r1
 8020a2a:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8020a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8020a30:	4629      	mov	r1, r5
 8020a32:	2242      	movs	r2, #66	; 0x42
 8020a34:	4640      	mov	r0, r8
 8020a36:	461c      	mov	r4, r3
 8020a38:	950d      	str	r5, [sp, #52]	; 0x34
 8020a3a:	f7fe fdec 	bl	801f616 <_ZN8touchgfx6memsetEPvhm>
 8020a3e:	b30e      	cbz	r6, 8020a84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8020a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a42:	b1f3      	cbz	r3, 8020a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8020a44:	f107 3aff 	add.w	sl, r7, #4294967295
 8020a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a4c:	8812      	ldrh	r2, [r2, #0]
 8020a4e:	2a00      	cmp	r2, #0
 8020a50:	f000 80b3 	beq.w	8020bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8020a54:	459a      	cmp	sl, r3
 8020a56:	f340 80b0 	ble.w	8020bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8020a5a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a60:	f8b9 2000 	ldrh.w	r2, [r9]
 8020a64:	2a00      	cmp	r2, #0
 8020a66:	d0ef      	beq.n	8020a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020a68:	2a25      	cmp	r2, #37	; 0x25
 8020a6a:	f000 80aa 	beq.w	8020bc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 8020a6e:	459a      	cmp	sl, r3
 8020a70:	ddea      	ble.n	8020a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020a72:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020a76:	f109 0202 	add.w	r2, r9, #2
 8020a7a:	3301      	adds	r3, #1
 8020a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8020a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8020a80:	e7eb      	b.n	8020a5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8020a82:	8033      	strh	r3, [r6, #0]
 8020a84:	4630      	mov	r0, r6
 8020a86:	b022      	add	sp, #136	; 0x88
 8020a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a8c:	3b63      	subs	r3, #99	; 0x63
 8020a8e:	2b01      	cmp	r3, #1
 8020a90:	f200 80df 	bhi.w	8020c52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8020a94:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020a98:	8813      	ldrh	r3, [r2, #0]
 8020a9a:	2b69      	cmp	r3, #105	; 0x69
 8020a9c:	d058      	beq.n	8020b50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8020a9e:	d81b      	bhi.n	8020ad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8020aa0:	2b63      	cmp	r3, #99	; 0x63
 8020aa2:	d02e      	beq.n	8020b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8020aa4:	2b64      	cmp	r3, #100	; 0x64
 8020aa6:	d053      	beq.n	8020b50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8020aa8:	2b58      	cmp	r3, #88	; 0x58
 8020aaa:	d06f      	beq.n	8020b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8020aac:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8020ab0:	46a1      	mov	r9, r4
 8020ab2:	e02d      	b.n	8020b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020ab4:	2b73      	cmp	r3, #115	; 0x73
 8020ab6:	d0ed      	beq.n	8020a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020ab8:	d803      	bhi.n	8020ac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 8020aba:	2b6f      	cmp	r3, #111	; 0x6f
 8020abc:	f040 80c9 	bne.w	8020c52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8020ac0:	e7e8      	b.n	8020a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020ac2:	2b75      	cmp	r3, #117	; 0x75
 8020ac4:	d0e6      	beq.n	8020a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020ac6:	2b78      	cmp	r3, #120	; 0x78
 8020ac8:	e7f8      	b.n	8020abc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8020aca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020acc:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8020ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ad2:	3302      	adds	r3, #2
 8020ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8020ad6:	e7b7      	b.n	8020a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020ad8:	2b73      	cmp	r3, #115	; 0x73
 8020ada:	d034      	beq.n	8020b46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8020adc:	d807      	bhi.n	8020aee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 8020ade:	2b6f      	cmp	r3, #111	; 0x6f
 8020ae0:	d1e4      	bne.n	8020aac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8020ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020ae4:	f104 0904 	add.w	r9, r4, #4
 8020ae8:	2308      	movs	r3, #8
 8020aea:	1aba      	subs	r2, r7, r2
 8020aec:	e048      	b.n	8020b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8020aee:	2b75      	cmp	r3, #117	; 0x75
 8020af0:	d041      	beq.n	8020b76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 8020af2:	2b78      	cmp	r3, #120	; 0x78
 8020af4:	d1da      	bne.n	8020aac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8020af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020af8:	f104 0904 	add.w	r9, r4, #4
 8020afc:	2310      	movs	r3, #16
 8020afe:	1aba      	subs	r2, r7, r2
 8020b00:	e03e      	b.n	8020b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8020b02:	7823      	ldrb	r3, [r4, #0]
 8020b04:	f104 0904 	add.w	r9, r4, #4
 8020b08:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8020b0c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8020b10:	aa0d      	add	r2, sp, #52	; 0x34
 8020b12:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8020b16:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8020b1a:	a810      	add	r0, sp, #64	; 0x40
 8020b1c:	9205      	str	r2, [sp, #20]
 8020b1e:	464c      	mov	r4, r9
 8020b20:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8020b24:	9204      	str	r2, [sp, #16]
 8020b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b28:	9203      	str	r2, [sp, #12]
 8020b2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8020b2e:	9202      	str	r2, [sp, #8]
 8020b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b32:	9201      	str	r2, [sp, #4]
 8020b34:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8020b38:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8020b3c:	9200      	str	r2, [sp, #0]
 8020b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b40:	f7ff fe4a 	bl	80207d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8020b44:	e7c4      	b.n	8020ad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8020b46:	f104 0904 	add.w	r9, r4, #4
 8020b4a:	6823      	ldr	r3, [r4, #0]
 8020b4c:	9310      	str	r3, [sp, #64]	; 0x40
 8020b4e:	e7df      	b.n	8020b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b52:	230a      	movs	r3, #10
 8020b54:	4641      	mov	r1, r8
 8020b56:	6820      	ldr	r0, [r4, #0]
 8020b58:	1aba      	subs	r2, r7, r2
 8020b5a:	f104 0904 	add.w	r9, r4, #4
 8020b5e:	b292      	uxth	r2, r2
 8020b60:	f7ff fdf9 	bl	8020756 <_ZN8touchgfx7Unicode4itoaElPtti>
 8020b64:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8020b68:	2b2d      	cmp	r3, #45	; 0x2d
 8020b6a:	d1d1      	bne.n	8020b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020b6c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b72:	3302      	adds	r3, #2
 8020b74:	e7ea      	b.n	8020b4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8020b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b78:	f104 0904 	add.w	r9, r4, #4
 8020b7c:	230a      	movs	r3, #10
 8020b7e:	1aba      	subs	r2, r7, r2
 8020b80:	b292      	uxth	r2, r2
 8020b82:	4641      	mov	r1, r8
 8020b84:	6820      	ldr	r0, [r4, #0]
 8020b86:	f7ff fdc8 	bl	802071a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8020b8a:	e7c1      	b.n	8020b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b8e:	2310      	movs	r3, #16
 8020b90:	4641      	mov	r1, r8
 8020b92:	6820      	ldr	r0, [r4, #0]
 8020b94:	1aba      	subs	r2, r7, r2
 8020b96:	f104 0904 	add.w	r9, r4, #4
 8020b9a:	b292      	uxth	r2, r2
 8020b9c:	f7ff fdbd 	bl	802071a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8020ba0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8020ba4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	d0b1      	beq.n	8020b10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020bac:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8020bb0:	2919      	cmp	r1, #25
 8020bb2:	d8f7      	bhi.n	8020ba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8020bb4:	3b20      	subs	r3, #32
 8020bb6:	8013      	strh	r3, [r2, #0]
 8020bb8:	e7f4      	b.n	8020ba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8020bba:	2200      	movs	r2, #0
 8020bbc:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020bc0:	e760      	b.n	8020a84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8020bc2:	459a      	cmp	sl, r3
 8020bc4:	f77f af40 	ble.w	8020a48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020bc8:	f109 0302 	add.w	r3, r9, #2
 8020bcc:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8020bd0:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8020bd4:	a809      	add	r0, sp, #36	; 0x24
 8020bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8020bd8:	ab0f      	add	r3, sp, #60	; 0x3c
 8020bda:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8020bde:	9304      	str	r3, [sp, #16]
 8020be0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8020be4:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8020be8:	9303      	str	r3, [sp, #12]
 8020bea:	ab0e      	add	r3, sp, #56	; 0x38
 8020bec:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8020bf0:	9302      	str	r3, [sp, #8]
 8020bf2:	ab0c      	add	r3, sp, #48	; 0x30
 8020bf4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8020bf8:	9301      	str	r3, [sp, #4]
 8020bfa:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8020bfe:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8020c02:	9300      	str	r3, [sp, #0]
 8020c04:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8020c08:	950e      	str	r5, [sp, #56]	; 0x38
 8020c0a:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8020c0e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020c10:	f7ff fe92 	bl	8020938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8020c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	bfbf      	itttt	lt
 8020c1c:	6823      	ldrlt	r3, [r4, #0]
 8020c1e:	3404      	addlt	r4, #4
 8020c20:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8020c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	bfbf      	itttt	lt
 8020c2c:	6823      	ldrlt	r3, [r4, #0]
 8020c2e:	3404      	addlt	r4, #4
 8020c30:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020c34:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8020c36:	8813      	ldrh	r3, [r2, #0]
 8020c38:	2b69      	cmp	r3, #105	; 0x69
 8020c3a:	f43f af2b 	beq.w	8020a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020c3e:	f63f af39 	bhi.w	8020ab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8020c42:	2b58      	cmp	r3, #88	; 0x58
 8020c44:	f43f af26 	beq.w	8020a94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020c48:	f63f af20 	bhi.w	8020a8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8020c4c:	2b25      	cmp	r3, #37	; 0x25
 8020c4e:	f43f af3c 	beq.w	8020aca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8020c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c54:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020c58:	f8b9 2000 	ldrh.w	r2, [r9]
 8020c5c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020c60:	3301      	adds	r3, #1
 8020c62:	930d      	str	r3, [sp, #52]	; 0x34
 8020c64:	e734      	b.n	8020ad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08020c68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c6a:	4605      	mov	r5, r0
 8020c6c:	b0a1      	sub	sp, #132	; 0x84
 8020c6e:	4610      	mov	r0, r2
 8020c70:	460e      	mov	r6, r1
 8020c72:	4614      	mov	r4, r2
 8020c74:	461f      	mov	r7, r3
 8020c76:	f7ff fd33 	bl	80206e0 <_ZN8touchgfx7Unicode6strlenEPKc>
 8020c7a:	283f      	cmp	r0, #63	; 0x3f
 8020c7c:	d906      	bls.n	8020c8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8020c7e:	4b0a      	ldr	r3, [pc, #40]	; (8020ca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8020c80:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8020c84:	4a09      	ldr	r2, [pc, #36]	; (8020cac <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8020c86:	480a      	ldr	r0, [pc, #40]	; (8020cb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8020c88:	f009 ffac 	bl	802abe4 <__assert_func>
 8020c8c:	4621      	mov	r1, r4
 8020c8e:	2240      	movs	r2, #64	; 0x40
 8020c90:	4668      	mov	r0, sp
 8020c92:	f7ff fd31 	bl	80206f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020c96:	463b      	mov	r3, r7
 8020c98:	466a      	mov	r2, sp
 8020c9a:	4631      	mov	r1, r6
 8020c9c:	4628      	mov	r0, r5
 8020c9e:	f7ff febe 	bl	8020a1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8020ca2:	b021      	add	sp, #132	; 0x84
 8020ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ca6:	bf00      	nop
 8020ca8:	0802fb49 	.word	0x0802fb49
 8020cac:	0802fc1b 	.word	0x0802fc1b
 8020cb0:	0802fb66 	.word	0x0802fb66

08020cb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020cb4:	b40c      	push	{r2, r3}
 8020cb6:	b507      	push	{r0, r1, r2, lr}
 8020cb8:	ab04      	add	r3, sp, #16
 8020cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8020cbe:	9301      	str	r3, [sp, #4]
 8020cc0:	f7ff ffd2 	bl	8020c68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8020cc4:	b003      	add	sp, #12
 8020cc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8020cca:	b002      	add	sp, #8
 8020ccc:	4770      	bx	lr
	...

08020cd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 8020cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cd4:	b0c3      	sub	sp, #268	; 0x10c
 8020cd6:	2400      	movs	r4, #0
 8020cd8:	4606      	mov	r6, r0
 8020cda:	4689      	mov	r9, r1
 8020cdc:	af10      	add	r7, sp, #64	; 0x40
 8020cde:	9209      	str	r2, [sp, #36]	; 0x24
 8020ce0:	4621      	mov	r1, r4
 8020ce2:	22c8      	movs	r2, #200	; 0xc8
 8020ce4:	4638      	mov	r0, r7
 8020ce6:	469a      	mov	sl, r3
 8020ce8:	940c      	str	r4, [sp, #48]	; 0x30
 8020cea:	f7fe fc94 	bl	801f616 <_ZN8touchgfx6memsetEPvhm>
 8020cee:	b116      	cbz	r6, 8020cf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8020cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cf2:	b923      	cbnz	r3, 8020cfe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 8020cf4:	8033      	strh	r3, [r6, #0]
 8020cf6:	4630      	mov	r0, r6
 8020cf8:	b043      	add	sp, #268	; 0x10c
 8020cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cfe:	f109 3bff 	add.w	fp, r9, #4294967295
 8020d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d06:	8812      	ldrh	r2, [r2, #0]
 8020d08:	2a00      	cmp	r2, #0
 8020d0a:	f000 80d1 	beq.w	8020eb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8020d0e:	459b      	cmp	fp, r3
 8020d10:	f340 80ce 	ble.w	8020eb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8020d14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d18:	882a      	ldrh	r2, [r5, #0]
 8020d1a:	2a00      	cmp	r2, #0
 8020d1c:	d0f1      	beq.n	8020d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020d1e:	2a25      	cmp	r2, #37	; 0x25
 8020d20:	f000 80ca 	beq.w	8020eb8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 8020d24:	459b      	cmp	fp, r3
 8020d26:	ddec      	ble.n	8020d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020d28:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020d2c:	3502      	adds	r5, #2
 8020d2e:	3301      	adds	r3, #1
 8020d30:	9509      	str	r5, [sp, #36]	; 0x24
 8020d32:	930c      	str	r3, [sp, #48]	; 0x30
 8020d34:	e7ee      	b.n	8020d14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 8020d36:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8020d3a:	3202      	adds	r2, #2
 8020d3c:	920c      	str	r2, [sp, #48]	; 0x30
 8020d3e:	e0ac      	b.n	8020e9a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 8020d40:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8020d44:	970f      	str	r7, [sp, #60]	; 0x3c
 8020d46:	3401      	adds	r4, #1
 8020d48:	edd3 7a00 	vldr	s15, [r3]
 8020d4c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8020d50:	b923      	cbnz	r3, 8020d5c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 8020d52:	2301      	movs	r3, #1
 8020d54:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8020d58:	2303      	movs	r3, #3
 8020d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8020d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020d60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020d62:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8020d66:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8020f64 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 8020d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d6e:	bf42      	ittt	mi
 8020d70:	232d      	movmi	r3, #45	; 0x2d
 8020d72:	eef1 7a67 	vnegmi.f32	s15, s15
 8020d76:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8020d7a:	2300      	movs	r3, #0
 8020d7c:	4298      	cmp	r0, r3
 8020d7e:	dd03      	ble.n	8020d88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 8020d80:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8020d84:	3301      	adds	r3, #1
 8020d86:	e7f9      	b.n	8020d7c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 8020d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d90:	eeb0 7a67 	vmov.f32	s14, s15
 8020d94:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8020d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d9c:	da26      	bge.n	8020dec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 8020d9e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8020da2:	eba9 0202 	sub.w	r2, r9, r2
 8020da6:	2100      	movs	r1, #0
 8020da8:	eef4 6ae5 	vcmpe.f32	s13, s11
 8020dac:	b28d      	uxth	r5, r1
 8020dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020db2:	db21      	blt.n	8020df8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8020db4:	1a53      	subs	r3, r2, r1
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	dd1e      	ble.n	8020df8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8020dba:	2963      	cmp	r1, #99	; 0x63
 8020dbc:	d01b      	beq.n	8020df6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 8020dbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8020dc2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020dc6:	ee17 3a10 	vmov	r3, s14
 8020dca:	2b09      	cmp	r3, #9
 8020dcc:	bfa8      	it	ge
 8020dce:	2309      	movge	r3, #9
 8020dd0:	ee07 3a10 	vmov	s14, r3
 8020dd4:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8020dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020ddc:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 8020de0:	3101      	adds	r1, #1
 8020de2:	eee7 7a66 	vfms.f32	s15, s14, s13
 8020de6:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8020dea:	e7dd      	b.n	8020da8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 8020dec:	ee66 6a86 	vmul.f32	s13, s13, s12
 8020df0:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8020df4:	e7ce      	b.n	8020d94 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 8020df6:	460d      	mov	r5, r1
 8020df8:	2a63      	cmp	r2, #99	; 0x63
 8020dfa:	bfd4      	ite	le
 8020dfc:	ebc5 0202 	rsble	r2, r5, r2
 8020e00:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 8020e04:	2a00      	cmp	r2, #0
 8020e06:	dd4e      	ble.n	8020ea6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	f04f 0801 	mov.w	r8, #1
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	dd0e      	ble.n	8020e30 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 8020e12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020e16:	210a      	movs	r1, #10
 8020e18:	3b01      	subs	r3, #1
 8020e1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8020e1e:	ee17 ca10 	vmov	ip, s14
 8020e22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020e26:	fb01 c808 	mla	r8, r1, r8, ip
 8020e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020e2e:	e7ee      	b.n	8020e0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 8020e30:	2800      	cmp	r0, #0
 8020e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e36:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8020e3a:	bfac      	ite	ge
 8020e3c:	1a18      	subge	r0, r3, r0
 8020e3e:	4618      	movlt	r0, r3
 8020e40:	b292      	uxth	r2, r2
 8020e42:	230a      	movs	r3, #10
 8020e44:	900e      	str	r0, [sp, #56]	; 0x38
 8020e46:	1979      	adds	r1, r7, r5
 8020e48:	4640      	mov	r0, r8
 8020e4a:	f7ff fc84 	bl	8020756 <_ZN8touchgfx7Unicode4itoaElPtti>
 8020e4e:	f1b8 0f01 	cmp.w	r8, #1
 8020e52:	dc26      	bgt.n	8020ea2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 8020e54:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	bf0c      	ite	eq
 8020e5c:	2300      	moveq	r3, #0
 8020e5e:	232e      	movne	r3, #46	; 0x2e
 8020e60:	aa42      	add	r2, sp, #264	; 0x108
 8020e62:	4415      	add	r5, r2
 8020e64:	aa0c      	add	r2, sp, #48	; 0x30
 8020e66:	f825 3cc8 	strh.w	r3, [r5, #-200]
 8020e6a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020e6e:	a80f      	add	r0, sp, #60	; 0x3c
 8020e70:	9205      	str	r2, [sp, #20]
 8020e72:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8020e76:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8020e7a:	9204      	str	r2, [sp, #16]
 8020e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020e7e:	9203      	str	r2, [sp, #12]
 8020e80:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8020e84:	9202      	str	r2, [sp, #8]
 8020e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e88:	9201      	str	r2, [sp, #4]
 8020e8a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8020e8e:	e9cd 9606 	strd	r9, r6, [sp, #24]
 8020e92:	9200      	str	r2, [sp, #0]
 8020e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e96:	f7ff fc9f 	bl	80207d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8020e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e9c:	3302      	adds	r3, #2
 8020e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8020ea0:	e72f      	b.n	8020d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020ea2:	232e      	movs	r3, #46	; 0x2e
 8020ea4:	e7dc      	b.n	8020e60 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 8020ea6:	ab42      	add	r3, sp, #264	; 0x108
 8020ea8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020eac:	2300      	movs	r3, #0
 8020eae:	e7d9      	b.n	8020e64 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 8020eb0:	2200      	movs	r2, #0
 8020eb2:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020eb6:	e71e      	b.n	8020cf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8020eb8:	459b      	cmp	fp, r3
 8020eba:	f77f af22 	ble.w	8020d02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020ebe:	2300      	movs	r3, #0
 8020ec0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8020ec4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8020ec8:	a809      	add	r0, sp, #36	; 0x24
 8020eca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ed6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8020eda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8020ede:	930d      	str	r3, [sp, #52]	; 0x34
 8020ee0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8020ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8020ee6:	1cab      	adds	r3, r5, #2
 8020ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8020eea:	ab0e      	add	r3, sp, #56	; 0x38
 8020eec:	9304      	str	r3, [sp, #16]
 8020eee:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8020ef2:	9303      	str	r3, [sp, #12]
 8020ef4:	ab0d      	add	r3, sp, #52	; 0x34
 8020ef6:	9302      	str	r3, [sp, #8]
 8020ef8:	ab0b      	add	r3, sp, #44	; 0x2c
 8020efa:	9301      	str	r3, [sp, #4]
 8020efc:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8020f00:	9300      	str	r3, [sp, #0]
 8020f02:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8020f06:	f7ff fd17 	bl	8020938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8020f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	da0b      	bge.n	8020f28 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 8020f10:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8020f14:	3401      	adds	r4, #1
 8020f16:	edd3 7a00 	vldr	s15, [r3]
 8020f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020f1e:	ee17 3a90 	vmov	r3, s15
 8020f22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f26:	930d      	str	r3, [sp, #52]	; 0x34
 8020f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	da0b      	bge.n	8020f46 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 8020f2e:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8020f32:	3401      	adds	r4, #1
 8020f34:	edd3 7a00 	vldr	s15, [r3]
 8020f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020f3c:	ee17 3a90 	vmov	r3, s15
 8020f40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f44:	930e      	str	r3, [sp, #56]	; 0x38
 8020f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f4a:	881b      	ldrh	r3, [r3, #0]
 8020f4c:	2b25      	cmp	r3, #37	; 0x25
 8020f4e:	f43f aef2 	beq.w	8020d36 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 8020f52:	2b66      	cmp	r3, #102	; 0x66
 8020f54:	f43f aef4 	beq.w	8020d40 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 8020f58:	9509      	str	r5, [sp, #36]	; 0x24
 8020f5a:	882b      	ldrh	r3, [r5, #0]
 8020f5c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8020f60:	3201      	adds	r2, #1
 8020f62:	e6eb      	b.n	8020d3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 8020f64:	3f000002 	.word	0x3f000002

08020f68 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8020f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f6a:	4605      	mov	r5, r0
 8020f6c:	b0a1      	sub	sp, #132	; 0x84
 8020f6e:	4610      	mov	r0, r2
 8020f70:	460e      	mov	r6, r1
 8020f72:	4614      	mov	r4, r2
 8020f74:	461f      	mov	r7, r3
 8020f76:	f7ff fbb3 	bl	80206e0 <_ZN8touchgfx7Unicode6strlenEPKc>
 8020f7a:	283f      	cmp	r0, #63	; 0x3f
 8020f7c:	d906      	bls.n	8020f8c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 8020f7e:	4b0a      	ldr	r3, [pc, #40]	; (8020fa8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 8020f80:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8020f84:	4a09      	ldr	r2, [pc, #36]	; (8020fac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 8020f86:	480a      	ldr	r0, [pc, #40]	; (8020fb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 8020f88:	f009 fe2c 	bl	802abe4 <__assert_func>
 8020f8c:	4621      	mov	r1, r4
 8020f8e:	2240      	movs	r2, #64	; 0x40
 8020f90:	4668      	mov	r0, sp
 8020f92:	f7ff fbb1 	bl	80206f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020f96:	463b      	mov	r3, r7
 8020f98:	466a      	mov	r2, sp
 8020f9a:	4631      	mov	r1, r6
 8020f9c:	4628      	mov	r0, r5
 8020f9e:	f7ff fe97 	bl	8020cd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 8020fa2:	b021      	add	sp, #132	; 0x84
 8020fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fa6:	bf00      	nop
 8020fa8:	0802fb49 	.word	0x0802fb49
 8020fac:	0802fb8c 	.word	0x0802fb8c
 8020fb0:	0802fb66 	.word	0x0802fb66

08020fb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020fb4:	4b01      	ldr	r3, [pc, #4]	; (8020fbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020fb6:	6018      	str	r0, [r3, #0]
 8020fb8:	4770      	bx	lr
 8020fba:	bf00      	nop
 8020fbc:	2000c090 	.word	0x2000c090

08020fc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020fc0:	4b07      	ldr	r3, [pc, #28]	; (8020fe0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8020fc2:	881a      	ldrh	r2, [r3, #0]
 8020fc4:	4282      	cmp	r2, r0
 8020fc6:	d809      	bhi.n	8020fdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8020fc8:	4b06      	ldr	r3, [pc, #24]	; (8020fe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8020fca:	881b      	ldrh	r3, [r3, #0]
 8020fcc:	4413      	add	r3, r2
 8020fce:	4298      	cmp	r0, r3
 8020fd0:	da04      	bge.n	8020fdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8020fd2:	4b05      	ldr	r3, [pc, #20]	; (8020fe8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020fda:	4770      	bx	lr
 8020fdc:	2000      	movs	r0, #0
 8020fde:	4770      	bx	lr
 8020fe0:	2000c0b0 	.word	0x2000c0b0
 8020fe4:	2000c0b4 	.word	0x2000c0b4
 8020fe8:	2000c094 	.word	0x2000c094

08020fec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ff0:	4d26      	ldr	r5, [pc, #152]	; (802108c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020ff2:	682b      	ldr	r3, [r5, #0]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d046      	beq.n	8021086 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8020ff8:	4a25      	ldr	r2, [pc, #148]	; (8021090 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020ffa:	4f26      	ldr	r7, [pc, #152]	; (8021094 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020ffc:	8810      	ldrh	r0, [r2, #0]
 8020ffe:	883c      	ldrh	r4, [r7, #0]
 8021000:	4e25      	ldr	r6, [pc, #148]	; (8021098 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8021002:	4420      	add	r0, r4
 8021004:	1c42      	adds	r2, r0, #1
 8021006:	ea4f 0880 	mov.w	r8, r0, lsl #2
 802100a:	f022 0201 	bic.w	r2, r2, #1
 802100e:	0412      	lsls	r2, r2, #16
 8021010:	0c12      	lsrs	r2, r2, #16
 8021012:	0051      	lsls	r1, r2, #1
 8021014:	220e      	movs	r2, #14
 8021016:	eb08 0e01 	add.w	lr, r8, r1
 802101a:	fb02 fc04 	mul.w	ip, r2, r4
 802101e:	eb03 0208 	add.w	r2, r3, r8
 8021022:	4c1e      	ldr	r4, [pc, #120]	; (802109c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8021024:	6022      	str	r2, [r4, #0]
 8021026:	eb03 020e 	add.w	r2, r3, lr
 802102a:	44e6      	add	lr, ip
 802102c:	6032      	str	r2, [r6, #0]
 802102e:	4473      	add	r3, lr
 8021030:	4a1b      	ldr	r2, [pc, #108]	; (80210a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8021032:	6013      	str	r3, [r2, #0]
 8021034:	2300      	movs	r3, #0
 8021036:	4a1b      	ldr	r2, [pc, #108]	; (80210a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8021038:	8013      	strh	r3, [r2, #0]
 802103a:	4a1b      	ldr	r2, [pc, #108]	; (80210a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 802103c:	6812      	ldr	r2, [r2, #0]
 802103e:	eba2 0208 	sub.w	r2, r2, r8
 8021042:	1a52      	subs	r2, r2, r1
 8021044:	4919      	ldr	r1, [pc, #100]	; (80210ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8021046:	eba2 020c 	sub.w	r2, r2, ip
 802104a:	469c      	mov	ip, r3
 802104c:	600a      	str	r2, [r1, #0]
 802104e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021052:	4a17      	ldr	r2, [pc, #92]	; (80210b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8021054:	8013      	strh	r3, [r2, #0]
 8021056:	4283      	cmp	r3, r0
 8021058:	d10d      	bne.n	8021076 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 802105a:	883d      	ldrh	r5, [r7, #0]
 802105c:	2300      	movs	r3, #0
 802105e:	6830      	ldr	r0, [r6, #0]
 8021060:	240e      	movs	r4, #14
 8021062:	429d      	cmp	r5, r3
 8021064:	d90f      	bls.n	8021086 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8021066:	fb04 0203 	mla	r2, r4, r3, r0
 802106a:	3301      	adds	r3, #1
 802106c:	7b11      	ldrb	r1, [r2, #12]
 802106e:	f36f 1145 	bfc	r1, #5, #1
 8021072:	7311      	strb	r1, [r2, #12]
 8021074:	e7f5      	b.n	8021062 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8021076:	682a      	ldr	r2, [r5, #0]
 8021078:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 802107c:	6822      	ldr	r2, [r4, #0]
 802107e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8021082:	3301      	adds	r3, #1
 8021084:	e7e7      	b.n	8021056 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8021086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802108a:	bf00      	nop
 802108c:	2000c094 	.word	0x2000c094
 8021090:	2000c0b0 	.word	0x2000c0b0
 8021094:	2000c0b4 	.word	0x2000c0b4
 8021098:	2000c098 	.word	0x2000c098
 802109c:	2000c0a8 	.word	0x2000c0a8
 80210a0:	2000c0a0 	.word	0x2000c0a0
 80210a4:	2000c0b2 	.word	0x2000c0b2
 80210a8:	2000c09c 	.word	0x2000c09c
 80210ac:	2000c0ac 	.word	0x2000c0ac
 80210b0:	2000c0a4 	.word	0x2000c0a4

080210b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80210b4:	4b10      	ldr	r3, [pc, #64]	; (80210f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80210b6:	b510      	push	{r4, lr}
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	b9db      	cbnz	r3, 80210f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80210bc:	b1d1      	cbz	r1, 80210f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80210be:	4b0f      	ldr	r3, [pc, #60]	; (80210fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80210c0:	240e      	movs	r4, #14
 80210c2:	801a      	strh	r2, [r3, #0]
 80210c4:	b292      	uxth	r2, r2
 80210c6:	4b0e      	ldr	r3, [pc, #56]	; (8021100 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80210c8:	881b      	ldrh	r3, [r3, #0]
 80210ca:	4413      	add	r3, r2
 80210cc:	4362      	muls	r2, r4
 80210ce:	2406      	movs	r4, #6
 80210d0:	fb04 2203 	mla	r2, r4, r3, r2
 80210d4:	428a      	cmp	r2, r1
 80210d6:	d305      	bcc.n	80210e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80210d8:	4b0a      	ldr	r3, [pc, #40]	; (8021104 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80210da:	2137      	movs	r1, #55	; 0x37
 80210dc:	4a0a      	ldr	r2, [pc, #40]	; (8021108 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80210de:	480b      	ldr	r0, [pc, #44]	; (802110c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80210e0:	f009 fd80 	bl	802abe4 <__assert_func>
 80210e4:	4b0a      	ldr	r3, [pc, #40]	; (8021110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80210e6:	6019      	str	r1, [r3, #0]
 80210e8:	4b0a      	ldr	r3, [pc, #40]	; (8021114 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80210ea:	6018      	str	r0, [r3, #0]
 80210ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210f0:	f7ff bf7c 	b.w	8020fec <_ZN8touchgfx6Bitmap10clearCacheEv>
 80210f4:	bd10      	pop	{r4, pc}
 80210f6:	bf00      	nop
 80210f8:	2000c0a0 	.word	0x2000c0a0
 80210fc:	2000c0b4 	.word	0x2000c0b4
 8021100:	2000c0b0 	.word	0x2000c0b0
 8021104:	0802fcfd 	.word	0x0802fcfd
 8021108:	0802fd56 	.word	0x0802fd56
 802110c:	0802fcd8 	.word	0x0802fcd8
 8021110:	2000c09c 	.word	0x2000c09c
 8021114:	2000c094 	.word	0x2000c094

08021118 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8021118:	b470      	push	{r4, r5, r6}
 802111a:	4c07      	ldr	r4, [pc, #28]	; (8021138 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 802111c:	4605      	mov	r5, r0
 802111e:	4610      	mov	r0, r2
 8021120:	9a03      	ldr	r2, [sp, #12]
 8021122:	6826      	ldr	r6, [r4, #0]
 8021124:	b936      	cbnz	r6, 8021134 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8021126:	6025      	str	r5, [r4, #0]
 8021128:	4c04      	ldr	r4, [pc, #16]	; (802113c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 802112a:	8021      	strh	r1, [r4, #0]
 802112c:	4619      	mov	r1, r3
 802112e:	bc70      	pop	{r4, r5, r6}
 8021130:	f7ff bfc0 	b.w	80210b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8021134:	bc70      	pop	{r4, r5, r6}
 8021136:	4770      	bx	lr
 8021138:	2000c0b8 	.word	0x2000c0b8
 802113c:	2000c0b0 	.word	0x2000c0b0

08021140 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8021140:	b508      	push	{r3, lr}
 8021142:	4b14      	ldr	r3, [pc, #80]	; (8021194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8021144:	6819      	ldr	r1, [r3, #0]
 8021146:	b931      	cbnz	r1, 8021156 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8021148:	4b13      	ldr	r3, [pc, #76]	; (8021198 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 802114a:	f240 21e6 	movw	r1, #742	; 0x2e6
 802114e:	4a13      	ldr	r2, [pc, #76]	; (802119c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8021150:	4813      	ldr	r0, [pc, #76]	; (80211a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8021152:	f009 fd47 	bl	802abe4 <__assert_func>
 8021156:	4a13      	ldr	r2, [pc, #76]	; (80211a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8021158:	8803      	ldrh	r3, [r0, #0]
 802115a:	8812      	ldrh	r2, [r2, #0]
 802115c:	4293      	cmp	r3, r2
 802115e:	d204      	bcs.n	802116a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8021160:	2214      	movs	r2, #20
 8021162:	fb02 1303 	mla	r3, r2, r3, r1
 8021166:	8918      	ldrh	r0, [r3, #8]
 8021168:	bd08      	pop	{r3, pc}
 802116a:	490f      	ldr	r1, [pc, #60]	; (80211a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 802116c:	8809      	ldrh	r1, [r1, #0]
 802116e:	4411      	add	r1, r2
 8021170:	428b      	cmp	r3, r1
 8021172:	da06      	bge.n	8021182 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8021174:	1a9b      	subs	r3, r3, r2
 8021176:	4a0d      	ldr	r2, [pc, #52]	; (80211ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021178:	210e      	movs	r1, #14
 802117a:	6812      	ldr	r2, [r2, #0]
 802117c:	fb01 2303 	mla	r3, r1, r3, r2
 8021180:	e7f1      	b.n	8021166 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8021182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021186:	4293      	cmp	r3, r2
 8021188:	bf0a      	itet	eq
 802118a:	4b09      	ldreq	r3, [pc, #36]	; (80211b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 802118c:	2000      	movne	r0, #0
 802118e:	8818      	ldrheq	r0, [r3, #0]
 8021190:	e7ea      	b.n	8021168 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8021192:	bf00      	nop
 8021194:	2000c0b8 	.word	0x2000c0b8
 8021198:	0802dac8 	.word	0x0802dac8
 802119c:	0802fe03 	.word	0x0802fe03
 80211a0:	0802fcd8 	.word	0x0802fcd8
 80211a4:	2000c0b0 	.word	0x2000c0b0
 80211a8:	2000c0b4 	.word	0x2000c0b4
 80211ac:	2000c098 	.word	0x2000c098
 80211b0:	2000bfe2 	.word	0x2000bfe2

080211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80211b4:	b508      	push	{r3, lr}
 80211b6:	4b14      	ldr	r3, [pc, #80]	; (8021208 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80211b8:	6819      	ldr	r1, [r3, #0]
 80211ba:	b931      	cbnz	r1, 80211ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80211bc:	4b13      	ldr	r3, [pc, #76]	; (802120c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80211be:	f240 21fa 	movw	r1, #762	; 0x2fa
 80211c2:	4a13      	ldr	r2, [pc, #76]	; (8021210 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80211c4:	4813      	ldr	r0, [pc, #76]	; (8021214 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80211c6:	f009 fd0d 	bl	802abe4 <__assert_func>
 80211ca:	4a13      	ldr	r2, [pc, #76]	; (8021218 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80211cc:	8803      	ldrh	r3, [r0, #0]
 80211ce:	8812      	ldrh	r2, [r2, #0]
 80211d0:	4293      	cmp	r3, r2
 80211d2:	d204      	bcs.n	80211de <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80211d4:	2214      	movs	r2, #20
 80211d6:	fb02 1303 	mla	r3, r2, r3, r1
 80211da:	8958      	ldrh	r0, [r3, #10]
 80211dc:	bd08      	pop	{r3, pc}
 80211de:	490f      	ldr	r1, [pc, #60]	; (802121c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80211e0:	8809      	ldrh	r1, [r1, #0]
 80211e2:	4411      	add	r1, r2
 80211e4:	428b      	cmp	r3, r1
 80211e6:	da06      	bge.n	80211f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80211e8:	1a9b      	subs	r3, r3, r2
 80211ea:	4a0d      	ldr	r2, [pc, #52]	; (8021220 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80211ec:	210e      	movs	r1, #14
 80211ee:	6812      	ldr	r2, [r2, #0]
 80211f0:	fb01 2303 	mla	r3, r1, r3, r2
 80211f4:	e7f1      	b.n	80211da <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80211f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80211fa:	4293      	cmp	r3, r2
 80211fc:	bf0a      	itet	eq
 80211fe:	4b09      	ldreq	r3, [pc, #36]	; (8021224 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8021200:	2000      	movne	r0, #0
 8021202:	8818      	ldrheq	r0, [r3, #0]
 8021204:	e7ea      	b.n	80211dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8021206:	bf00      	nop
 8021208:	2000c0b8 	.word	0x2000c0b8
 802120c:	0802dac8 	.word	0x0802dac8
 8021210:	0802fe2f 	.word	0x0802fe2f
 8021214:	0802fcd8 	.word	0x0802fcd8
 8021218:	2000c0b0 	.word	0x2000c0b0
 802121c:	2000c0b4 	.word	0x2000c0b4
 8021220:	2000c098 	.word	0x2000c098
 8021224:	2000bfe4 	.word	0x2000bfe4

08021228 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8021228:	4b23      	ldr	r3, [pc, #140]	; (80212b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802122a:	b510      	push	{r4, lr}
 802122c:	681c      	ldr	r4, [r3, #0]
 802122e:	b934      	cbnz	r4, 802123e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8021230:	4b22      	ldr	r3, [pc, #136]	; (80212bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8021232:	f240 310e 	movw	r1, #782	; 0x30e
 8021236:	4a22      	ldr	r2, [pc, #136]	; (80212c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8021238:	4822      	ldr	r0, [pc, #136]	; (80212c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802123a:	f009 fcd3 	bl	802abe4 <__assert_func>
 802123e:	4a22      	ldr	r2, [pc, #136]	; (80212c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8021240:	880b      	ldrh	r3, [r1, #0]
 8021242:	8812      	ldrh	r2, [r2, #0]
 8021244:	4293      	cmp	r3, r2
 8021246:	d211      	bcs.n	802126c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8021248:	2214      	movs	r2, #20
 802124a:	fb02 4303 	mla	r3, r2, r3, r4
 802124e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8021252:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021256:	8a1a      	ldrh	r2, [r3, #16]
 8021258:	8a5b      	ldrh	r3, [r3, #18]
 802125a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 802125e:	8004      	strh	r4, [r0, #0]
 8021260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021264:	8041      	strh	r1, [r0, #2]
 8021266:	8082      	strh	r2, [r0, #4]
 8021268:	80c3      	strh	r3, [r0, #6]
 802126a:	e00e      	b.n	802128a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 802126c:	4917      	ldr	r1, [pc, #92]	; (80212cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 802126e:	8809      	ldrh	r1, [r1, #0]
 8021270:	4411      	add	r1, r2
 8021272:	428b      	cmp	r3, r1
 8021274:	da0a      	bge.n	802128c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8021276:	1a9b      	subs	r3, r3, r2
 8021278:	4a15      	ldr	r2, [pc, #84]	; (80212d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 802127a:	210e      	movs	r1, #14
 802127c:	6812      	ldr	r2, [r2, #0]
 802127e:	fb01 2303 	mla	r3, r1, r3, r2
 8021282:	681a      	ldr	r2, [r3, #0]
 8021284:	6002      	str	r2, [r0, #0]
 8021286:	685a      	ldr	r2, [r3, #4]
 8021288:	6042      	str	r2, [r0, #4]
 802128a:	bd10      	pop	{r4, pc}
 802128c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021290:	4293      	cmp	r3, r2
 8021292:	d10b      	bne.n	80212ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8021294:	4b0f      	ldr	r3, [pc, #60]	; (80212d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8021296:	f9b3 1000 	ldrsh.w	r1, [r3]
 802129a:	4b0f      	ldr	r3, [pc, #60]	; (80212d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 802129c:	8081      	strh	r1, [r0, #4]
 802129e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80212a2:	2300      	movs	r3, #0
 80212a4:	80c2      	strh	r2, [r0, #6]
 80212a6:	8003      	strh	r3, [r0, #0]
 80212a8:	8043      	strh	r3, [r0, #2]
 80212aa:	e7ee      	b.n	802128a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80212ac:	2300      	movs	r3, #0
 80212ae:	8003      	strh	r3, [r0, #0]
 80212b0:	8043      	strh	r3, [r0, #2]
 80212b2:	8083      	strh	r3, [r0, #4]
 80212b4:	e7d8      	b.n	8021268 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80212b6:	bf00      	nop
 80212b8:	2000c0b8 	.word	0x2000c0b8
 80212bc:	0802dac8 	.word	0x0802dac8
 80212c0:	0802fd9c 	.word	0x0802fd9c
 80212c4:	0802fcd8 	.word	0x0802fcd8
 80212c8:	2000c0b0 	.word	0x2000c0b0
 80212cc:	2000c0b4 	.word	0x2000c0b4
 80212d0:	2000c098 	.word	0x2000c098
 80212d4:	2000bfe2 	.word	0x2000bfe2
 80212d8:	2000bfe4 	.word	0x2000bfe4

080212dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80212dc:	4b18      	ldr	r3, [pc, #96]	; (8021340 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	b34b      	cbz	r3, 8021336 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80212e2:	4a18      	ldr	r2, [pc, #96]	; (8021344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80212e4:	8800      	ldrh	r0, [r0, #0]
 80212e6:	8812      	ldrh	r2, [r2, #0]
 80212e8:	4290      	cmp	r0, r2
 80212ea:	d211      	bcs.n	8021310 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80212ec:	2214      	movs	r2, #20
 80212ee:	fb02 3300 	mla	r3, r2, r0, r3
 80212f2:	8a1a      	ldrh	r2, [r3, #16]
 80212f4:	8919      	ldrh	r1, [r3, #8]
 80212f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80212fa:	428a      	cmp	r2, r1
 80212fc:	db1d      	blt.n	802133a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80212fe:	8a58      	ldrh	r0, [r3, #18]
 8021300:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8021304:	895b      	ldrh	r3, [r3, #10]
 8021306:	4298      	cmp	r0, r3
 8021308:	bfac      	ite	ge
 802130a:	2000      	movge	r0, #0
 802130c:	2001      	movlt	r0, #1
 802130e:	4770      	bx	lr
 8021310:	4b0d      	ldr	r3, [pc, #52]	; (8021348 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8021312:	881b      	ldrh	r3, [r3, #0]
 8021314:	4413      	add	r3, r2
 8021316:	4298      	cmp	r0, r3
 8021318:	da0d      	bge.n	8021336 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 802131a:	4b0c      	ldr	r3, [pc, #48]	; (802134c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 802131c:	1a80      	subs	r0, r0, r2
 802131e:	220e      	movs	r2, #14
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	fb02 3300 	mla	r3, r2, r0, r3
 8021326:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802132a:	891a      	ldrh	r2, [r3, #8]
 802132c:	4291      	cmp	r1, r2
 802132e:	db04      	blt.n	802133a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8021330:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8021334:	e7e6      	b.n	8021304 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8021336:	2000      	movs	r0, #0
 8021338:	4770      	bx	lr
 802133a:	2001      	movs	r0, #1
 802133c:	4770      	bx	lr
 802133e:	bf00      	nop
 8021340:	2000c0b8 	.word	0x2000c0b8
 8021344:	2000c0b0 	.word	0x2000c0b0
 8021348:	2000c0b4 	.word	0x2000c0b4
 802134c:	2000c098 	.word	0x2000c098

08021350 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021350:	b508      	push	{r3, lr}
 8021352:	4b12      	ldr	r3, [pc, #72]	; (802139c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8021354:	6819      	ldr	r1, [r3, #0]
 8021356:	b931      	cbnz	r1, 8021366 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021358:	4b11      	ldr	r3, [pc, #68]	; (80213a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 802135a:	f240 3132 	movw	r1, #818	; 0x332
 802135e:	4a11      	ldr	r2, [pc, #68]	; (80213a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021360:	4811      	ldr	r0, [pc, #68]	; (80213a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8021362:	f009 fc3f 	bl	802abe4 <__assert_func>
 8021366:	8803      	ldrh	r3, [r0, #0]
 8021368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802136c:	4293      	cmp	r3, r2
 802136e:	d012      	beq.n	8021396 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021374:	4293      	cmp	r3, r2
 8021376:	d103      	bne.n	8021380 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021378:	4b0c      	ldr	r3, [pc, #48]	; (80213ac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 802137e:	bd08      	pop	{r3, pc}
 8021380:	4a0b      	ldr	r2, [pc, #44]	; (80213b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8021382:	6812      	ldr	r2, [r2, #0]
 8021384:	b11a      	cbz	r2, 802138e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8021386:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802138a:	2800      	cmp	r0, #0
 802138c:	d1f7      	bne.n	802137e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802138e:	2214      	movs	r2, #20
 8021390:	4353      	muls	r3, r2
 8021392:	58c8      	ldr	r0, [r1, r3]
 8021394:	e7f3      	b.n	802137e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021396:	2000      	movs	r0, #0
 8021398:	e7f1      	b.n	802137e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802139a:	bf00      	nop
 802139c:	2000c0b8 	.word	0x2000c0b8
 80213a0:	0802dac8 	.word	0x0802dac8
 80213a4:	0802fdd2 	.word	0x0802fdd2
 80213a8:	0802fcd8 	.word	0x0802fcd8
 80213ac:	2000bff0 	.word	0x2000bff0
 80213b0:	2000c094 	.word	0x2000c094

080213b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80213b4:	8802      	ldrh	r2, [r0, #0]
 80213b6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80213ba:	429a      	cmp	r2, r3
 80213bc:	d840      	bhi.n	8021440 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80213be:	4b21      	ldr	r3, [pc, #132]	; (8021444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 80213c0:	881b      	ldrh	r3, [r3, #0]
 80213c2:	429a      	cmp	r2, r3
 80213c4:	d220      	bcs.n	8021408 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 80213c6:	4b20      	ldr	r3, [pc, #128]	; (8021448 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80213c8:	6819      	ldr	r1, [r3, #0]
 80213ca:	2314      	movs	r3, #20
 80213cc:	fb03 1302 	mla	r3, r3, r2, r1
 80213d0:	6858      	ldr	r0, [r3, #4]
 80213d2:	2800      	cmp	r0, #0
 80213d4:	d035      	beq.n	8021442 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80213d6:	491d      	ldr	r1, [pc, #116]	; (802144c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80213d8:	6809      	ldr	r1, [r1, #0]
 80213da:	2900      	cmp	r1, #0
 80213dc:	d031      	beq.n	8021442 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80213de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80213e2:	b371      	cbz	r1, 8021442 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80213e4:	895a      	ldrh	r2, [r3, #10]
 80213e6:	8918      	ldrh	r0, [r3, #8]
 80213e8:	4350      	muls	r0, r2
 80213ea:	7c5a      	ldrb	r2, [r3, #17]
 80213ec:	7cdb      	ldrb	r3, [r3, #19]
 80213ee:	0952      	lsrs	r2, r2, #5
 80213f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80213f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80213f8:	2b0b      	cmp	r3, #11
 80213fa:	bf18      	it	ne
 80213fc:	0040      	lslne	r0, r0, #1
 80213fe:	3003      	adds	r0, #3
 8021400:	f020 0003 	bic.w	r0, r0, #3
 8021404:	4408      	add	r0, r1
 8021406:	4770      	bx	lr
 8021408:	4911      	ldr	r1, [pc, #68]	; (8021450 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 802140a:	8809      	ldrh	r1, [r1, #0]
 802140c:	4419      	add	r1, r3
 802140e:	428a      	cmp	r2, r1
 8021410:	da16      	bge.n	8021440 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021412:	4910      	ldr	r1, [pc, #64]	; (8021454 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021414:	1ad3      	subs	r3, r2, r3
 8021416:	200e      	movs	r0, #14
 8021418:	6809      	ldr	r1, [r1, #0]
 802141a:	fb00 1303 	mla	r3, r0, r3, r1
 802141e:	7b19      	ldrb	r1, [r3, #12]
 8021420:	f001 011f 	and.w	r1, r1, #31
 8021424:	290b      	cmp	r1, #11
 8021426:	d10b      	bne.n	8021440 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021428:	8919      	ldrh	r1, [r3, #8]
 802142a:	8958      	ldrh	r0, [r3, #10]
 802142c:	4b07      	ldr	r3, [pc, #28]	; (802144c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 802142e:	4348      	muls	r0, r1
 8021430:	6819      	ldr	r1, [r3, #0]
 8021432:	3003      	adds	r0, #3
 8021434:	f020 0303 	bic.w	r3, r0, #3
 8021438:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 802143c:	4418      	add	r0, r3
 802143e:	4770      	bx	lr
 8021440:	2000      	movs	r0, #0
 8021442:	4770      	bx	lr
 8021444:	2000c0b0 	.word	0x2000c0b0
 8021448:	2000c0b8 	.word	0x2000c0b8
 802144c:	2000c094 	.word	0x2000c094
 8021450:	2000c0b4 	.word	0x2000c0b4
 8021454:	2000c098 	.word	0x2000c098

08021458 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021458:	4b19      	ldr	r3, [pc, #100]	; (80214c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 802145a:	6819      	ldr	r1, [r3, #0]
 802145c:	8803      	ldrh	r3, [r0, #0]
 802145e:	b1e9      	cbz	r1, 802149c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021460:	4a18      	ldr	r2, [pc, #96]	; (80214c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021462:	8812      	ldrh	r2, [r2, #0]
 8021464:	429a      	cmp	r2, r3
 8021466:	d90a      	bls.n	802147e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021468:	2214      	movs	r2, #20
 802146a:	fb02 1303 	mla	r3, r2, r3, r1
 802146e:	7c58      	ldrb	r0, [r3, #17]
 8021470:	0942      	lsrs	r2, r0, #5
 8021472:	7cd8      	ldrb	r0, [r3, #19]
 8021474:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021478:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 802147c:	4770      	bx	lr
 802147e:	4912      	ldr	r1, [pc, #72]	; (80214c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8021480:	8809      	ldrh	r1, [r1, #0]
 8021482:	4411      	add	r1, r2
 8021484:	428b      	cmp	r3, r1
 8021486:	da09      	bge.n	802149c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021488:	1a9b      	subs	r3, r3, r2
 802148a:	4a10      	ldr	r2, [pc, #64]	; (80214cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 802148c:	210e      	movs	r1, #14
 802148e:	6812      	ldr	r2, [r2, #0]
 8021490:	fb01 2303 	mla	r3, r1, r3, r2
 8021494:	7b18      	ldrb	r0, [r3, #12]
 8021496:	f000 001f 	and.w	r0, r0, #31
 802149a:	4770      	bx	lr
 802149c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80214a0:	4293      	cmp	r3, r2
 80214a2:	d10a      	bne.n	80214ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 80214a4:	4b0a      	ldr	r3, [pc, #40]	; (80214d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80214ac:	b10a      	cbz	r2, 80214b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80214ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80214b0:	b900      	cbnz	r0, 80214b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80214b2:	6898      	ldr	r0, [r3, #8]
 80214b4:	6803      	ldr	r3, [r0, #0]
 80214b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214b8:	4718      	bx	r3
 80214ba:	2000      	movs	r0, #0
 80214bc:	4770      	bx	lr
 80214be:	bf00      	nop
 80214c0:	2000c0b8 	.word	0x2000c0b8
 80214c4:	2000c0b0 	.word	0x2000c0b0
 80214c8:	2000c0b4 	.word	0x2000c0b4
 80214cc:	2000c098 	.word	0x2000c098
 80214d0:	2000bff0 	.word	0x2000bff0

080214d4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80214d4:	2018      	movs	r0, #24
 80214d6:	4770      	bx	lr

080214d8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80214d8:	2001      	movs	r0, #1
 80214da:	4770      	bx	lr

080214dc <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 80214dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80214e0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80214e4:	4770      	bx	lr

080214e6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80214e6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80214ea:	4770      	bx	lr

080214ec <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80214ec:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80214f0:	4770      	bx	lr

080214f2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80214f2:	b2c8      	uxtb	r0, r1
 80214f4:	4770      	bx	lr

080214f6 <_ZN8touchgfx8LCD24bpp4initEv>:
 80214f6:	4770      	bx	lr

080214f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80214f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214fc:	b085      	sub	sp, #20
 80214fe:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021500:	9203      	str	r2, [sp, #12]
 8021502:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8021506:	6878      	ldr	r0, [r7, #4]
 8021508:	9201      	str	r2, [sp, #4]
 802150a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 802150c:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8021510:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8021514:	fa1f fc84 	uxth.w	ip, r4
 8021518:	43e4      	mvns	r4, r4
 802151a:	9100      	str	r1, [sp, #0]
 802151c:	b2e4      	uxtb	r4, r4
 802151e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021522:	fb00 2505 	mla	r5, r0, r5, r2
 8021526:	683a      	ldr	r2, [r7, #0]
 8021528:	6877      	ldr	r7, [r6, #4]
 802152a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802152e:	3704      	adds	r7, #4
 8021530:	4415      	add	r5, r2
 8021532:	6832      	ldr	r2, [r6, #0]
 8021534:	9202      	str	r2, [sp, #8]
 8021536:	9a00      	ldr	r2, [sp, #0]
 8021538:	2a00      	cmp	r2, #0
 802153a:	dc03      	bgt.n	8021544 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 802153c:	9a03      	ldr	r2, [sp, #12]
 802153e:	2a00      	cmp	r2, #0
 8021540:	f340 8116 	ble.w	8021770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021546:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802154a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802154c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021550:	2b00      	cmp	r3, #0
 8021552:	dd0f      	ble.n	8021574 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8021554:	1406      	asrs	r6, r0, #16
 8021556:	d406      	bmi.n	8021566 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021558:	4546      	cmp	r6, r8
 802155a:	da04      	bge.n	8021566 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802155c:	1416      	asrs	r6, r2, #16
 802155e:	d402      	bmi.n	8021566 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021560:	9901      	ldr	r1, [sp, #4]
 8021562:	428e      	cmp	r6, r1
 8021564:	db07      	blt.n	8021576 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021566:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021568:	3b01      	subs	r3, #1
 802156a:	3503      	adds	r5, #3
 802156c:	4408      	add	r0, r1
 802156e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021570:	440a      	add	r2, r1
 8021572:	e7ed      	b.n	8021550 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8021574:	d011      	beq.n	802159a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021576:	1e5e      	subs	r6, r3, #1
 8021578:	9911      	ldr	r1, [sp, #68]	; 0x44
 802157a:	fb01 0e06 	mla	lr, r1, r6, r0
 802157e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8021582:	d548      	bpl.n	8021616 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8021584:	4699      	mov	r9, r3
 8021586:	462e      	mov	r6, r5
 8021588:	f1b9 0f00 	cmp.w	r9, #0
 802158c:	f300 809e 	bgt.w	80216cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8021590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021598:	441d      	add	r5, r3
 802159a:	9b00      	ldr	r3, [sp, #0]
 802159c:	2b00      	cmp	r3, #0
 802159e:	f340 80e7 	ble.w	8021770 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80215a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215b0:	eef0 6a62 	vmov.f32	s13, s5
 80215b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215c0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80215c4:	eef0 6a43 	vmov.f32	s13, s6
 80215c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215cc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80215d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215e8:	ee12 2a90 	vmov	r2, s5
 80215ec:	eef0 2a47 	vmov.f32	s5, s14
 80215f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80215f4:	ee13 2a10 	vmov	r2, s6
 80215f8:	9311      	str	r3, [sp, #68]	; 0x44
 80215fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215fc:	eeb0 3a67 	vmov.f32	s6, s15
 8021600:	fb92 f3f3 	sdiv	r3, r2, r3
 8021604:	9312      	str	r3, [sp, #72]	; 0x48
 8021606:	9b00      	ldr	r3, [sp, #0]
 8021608:	9a03      	ldr	r2, [sp, #12]
 802160a:	3b01      	subs	r3, #1
 802160c:	9300      	str	r3, [sp, #0]
 802160e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021610:	bf08      	it	eq
 8021612:	4613      	moveq	r3, r2
 8021614:	e78f      	b.n	8021536 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8021616:	45c6      	cmp	lr, r8
 8021618:	dab4      	bge.n	8021584 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 802161a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802161c:	fb01 2606 	mla	r6, r1, r6, r2
 8021620:	1436      	asrs	r6, r6, #16
 8021622:	d4af      	bmi.n	8021584 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8021624:	9901      	ldr	r1, [sp, #4]
 8021626:	428e      	cmp	r6, r1
 8021628:	daac      	bge.n	8021584 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 802162a:	1cee      	adds	r6, r5, #3
 802162c:	4699      	mov	r9, r3
 802162e:	f1b9 0f00 	cmp.w	r9, #0
 8021632:	f106 0603 	add.w	r6, r6, #3
 8021636:	ddab      	ble.n	8021590 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021638:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802163c:	9902      	ldr	r1, [sp, #8]
 802163e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021642:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021646:	fb08 1e0e 	mla	lr, r8, lr, r1
 802164a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802164c:	fb1b fb04 	smulbb	fp, fp, r4
 8021650:	f109 39ff 	add.w	r9, r9, #4294967295
 8021654:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8021658:	4408      	add	r0, r1
 802165a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802165c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021660:	440a      	add	r2, r1
 8021662:	eb07 0a0e 	add.w	sl, r7, lr
 8021666:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802166a:	fb0e be0c 	mla	lr, lr, ip, fp
 802166e:	fa1f fe8e 	uxth.w	lr, lr
 8021672:	f10e 0b01 	add.w	fp, lr, #1
 8021676:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802167a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 802167e:	fb1b fb04 	smulbb	fp, fp, r4
 8021682:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021686:	f806 ec06 	strb.w	lr, [r6, #-6]
 802168a:	f89a e001 	ldrb.w	lr, [sl, #1]
 802168e:	fb0e be0c 	mla	lr, lr, ip, fp
 8021692:	fa1f fe8e 	uxth.w	lr, lr
 8021696:	f10e 0b01 	add.w	fp, lr, #1
 802169a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802169e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80216a2:	f806 ec05 	strb.w	lr, [r6, #-5]
 80216a6:	f89a e002 	ldrb.w	lr, [sl, #2]
 80216aa:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80216ae:	fb1a fa04 	smulbb	sl, sl, r4
 80216b2:	fb0e ae0c 	mla	lr, lr, ip, sl
 80216b6:	fa1f fe8e 	uxth.w	lr, lr
 80216ba:	f10e 0a01 	add.w	sl, lr, #1
 80216be:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80216c2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80216c6:	f806 ec04 	strb.w	lr, [r6, #-4]
 80216ca:	e7b0      	b.n	802162e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80216cc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80216d0:	d446      	bmi.n	8021760 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80216d2:	45c2      	cmp	sl, r8
 80216d4:	da44      	bge.n	8021760 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80216d6:	ea5f 4e22 	movs.w	lr, r2, asr #16
 80216da:	d441      	bmi.n	8021760 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80216dc:	9901      	ldr	r1, [sp, #4]
 80216de:	458e      	cmp	lr, r1
 80216e0:	da3e      	bge.n	8021760 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80216e2:	9902      	ldr	r1, [sp, #8]
 80216e4:	f896 b000 	ldrb.w	fp, [r6]
 80216e8:	fb08 1e0e 	mla	lr, r8, lr, r1
 80216ec:	fb1b fb04 	smulbb	fp, fp, r4
 80216f0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80216f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80216f8:	eb07 0a0e 	add.w	sl, r7, lr
 80216fc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021700:	fb0e be0c 	mla	lr, lr, ip, fp
 8021704:	fa1f fe8e 	uxth.w	lr, lr
 8021708:	f10e 0b01 	add.w	fp, lr, #1
 802170c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021710:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021714:	fb1b fb04 	smulbb	fp, fp, r4
 8021718:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802171c:	f886 e000 	strb.w	lr, [r6]
 8021720:	f89a e001 	ldrb.w	lr, [sl, #1]
 8021724:	fb0e be0c 	mla	lr, lr, ip, fp
 8021728:	fa1f fe8e 	uxth.w	lr, lr
 802172c:	f10e 0b01 	add.w	fp, lr, #1
 8021730:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021734:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021738:	f886 e001 	strb.w	lr, [r6, #1]
 802173c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8021740:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021744:	fb1a fa04 	smulbb	sl, sl, r4
 8021748:	fb0e ae0c 	mla	lr, lr, ip, sl
 802174c:	fa1f fe8e 	uxth.w	lr, lr
 8021750:	f10e 0a01 	add.w	sl, lr, #1
 8021754:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8021758:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802175c:	f886 e002 	strb.w	lr, [r6, #2]
 8021760:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021762:	3603      	adds	r6, #3
 8021764:	f109 39ff 	add.w	r9, r9, #4294967295
 8021768:	4408      	add	r0, r1
 802176a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802176c:	440a      	add	r2, r1
 802176e:	e70b      	b.n	8021588 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8021770:	b005      	add	sp, #20
 8021772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021776 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802177a:	b085      	sub	sp, #20
 802177c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021780:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021782:	9203      	str	r2, [sp, #12]
 8021784:	6870      	ldr	r0, [r6, #4]
 8021786:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8021788:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802178c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021790:	9101      	str	r1, [sp, #4]
 8021792:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021796:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 802179a:	fb00 2404 	mla	r4, r0, r4, r2
 802179e:	6832      	ldr	r2, [r6, #0]
 80217a0:	686e      	ldr	r6, [r5, #4]
 80217a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217a6:	3604      	adds	r6, #4
 80217a8:	4414      	add	r4, r2
 80217aa:	682a      	ldr	r2, [r5, #0]
 80217ac:	9202      	str	r2, [sp, #8]
 80217ae:	9a01      	ldr	r2, [sp, #4]
 80217b0:	2a00      	cmp	r2, #0
 80217b2:	dc03      	bgt.n	80217bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80217b4:	9a03      	ldr	r2, [sp, #12]
 80217b6:	2a00      	cmp	r2, #0
 80217b8:	f340 80b2 	ble.w	8021920 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 80217bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217be:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80217c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	dd0c      	ble.n	80217e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80217cc:	1405      	asrs	r5, r0, #16
 80217ce:	d405      	bmi.n	80217dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80217d0:	4575      	cmp	r5, lr
 80217d2:	da03      	bge.n	80217dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80217d4:	1415      	asrs	r5, r2, #16
 80217d6:	d401      	bmi.n	80217dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80217d8:	4545      	cmp	r5, r8
 80217da:	db05      	blt.n	80217e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80217dc:	4460      	add	r0, ip
 80217de:	443a      	add	r2, r7
 80217e0:	3b01      	subs	r3, #1
 80217e2:	3403      	adds	r4, #3
 80217e4:	e7f0      	b.n	80217c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80217e6:	d03d      	beq.n	8021864 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80217e8:	1e5d      	subs	r5, r3, #1
 80217ea:	fb0c 0905 	mla	r9, ip, r5, r0
 80217ee:	ea5f 4929 	movs.w	r9, r9, asr #16
 80217f2:	d42c      	bmi.n	802184e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80217f4:	45f1      	cmp	r9, lr
 80217f6:	da2a      	bge.n	802184e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80217f8:	fb07 2505 	mla	r5, r7, r5, r2
 80217fc:	142d      	asrs	r5, r5, #16
 80217fe:	d426      	bmi.n	802184e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021800:	4545      	cmp	r5, r8
 8021802:	da24      	bge.n	802184e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021804:	1ce5      	adds	r5, r4, #3
 8021806:	469a      	mov	sl, r3
 8021808:	f1ba 0f00 	cmp.w	sl, #0
 802180c:	f105 0503 	add.w	r5, r5, #3
 8021810:	dd23      	ble.n	802185a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021812:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021816:	9902      	ldr	r1, [sp, #8]
 8021818:	ea4f 4b20 	mov.w	fp, r0, asr #16
 802181c:	443a      	add	r2, r7
 802181e:	fb0e 1909 	mla	r9, lr, r9, r1
 8021822:	4460      	add	r0, ip
 8021824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021828:	f819 900b 	ldrb.w	r9, [r9, fp]
 802182c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021830:	eb06 0b09 	add.w	fp, r6, r9
 8021834:	f816 9009 	ldrb.w	r9, [r6, r9]
 8021838:	f805 9c06 	strb.w	r9, [r5, #-6]
 802183c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8021840:	f805 9c05 	strb.w	r9, [r5, #-5]
 8021844:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8021848:	f805 9c04 	strb.w	r9, [r5, #-4]
 802184c:	e7dc      	b.n	8021808 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802184e:	2500      	movs	r5, #0
 8021850:	eba3 0905 	sub.w	r9, r3, r5
 8021854:	f1b9 0f00 	cmp.w	r9, #0
 8021858:	dc3c      	bgt.n	80218d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 802185a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802185e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021862:	441c      	add	r4, r3
 8021864:	9b01      	ldr	r3, [sp, #4]
 8021866:	2b00      	cmp	r3, #0
 8021868:	dd5a      	ble.n	8021920 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 802186a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802186e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021870:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021874:	eeb0 6a62 	vmov.f32	s12, s5
 8021878:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802187c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021880:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021884:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021888:	eeb0 6a43 	vmov.f32	s12, s6
 802188c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021890:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021894:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021898:	ee61 7a27 	vmul.f32	s15, s2, s15
 802189c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80218a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80218a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80218a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218ac:	ee12 2a90 	vmov	r2, s5
 80218b0:	eef0 2a47 	vmov.f32	s5, s14
 80218b4:	fb92 fcf3 	sdiv	ip, r2, r3
 80218b8:	ee13 2a10 	vmov	r2, s6
 80218bc:	eeb0 3a67 	vmov.f32	s6, s15
 80218c0:	fb92 f7f3 	sdiv	r7, r2, r3
 80218c4:	9b01      	ldr	r3, [sp, #4]
 80218c6:	9a03      	ldr	r2, [sp, #12]
 80218c8:	3b01      	subs	r3, #1
 80218ca:	9301      	str	r3, [sp, #4]
 80218cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218ce:	bf08      	it	eq
 80218d0:	4613      	moveq	r3, r2
 80218d2:	e76c      	b.n	80217ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80218d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80218d8:	d41e      	bmi.n	8021918 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80218da:	45f2      	cmp	sl, lr
 80218dc:	da1c      	bge.n	8021918 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80218de:	ea5f 4922 	movs.w	r9, r2, asr #16
 80218e2:	d419      	bmi.n	8021918 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80218e4:	45c1      	cmp	r9, r8
 80218e6:	da17      	bge.n	8021918 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80218e8:	9902      	ldr	r1, [sp, #8]
 80218ea:	fb0e 1909 	mla	r9, lr, r9, r1
 80218ee:	f819 900a 	ldrb.w	r9, [r9, sl]
 80218f2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80218f6:	f816 b009 	ldrb.w	fp, [r6, r9]
 80218fa:	eb06 0a09 	add.w	sl, r6, r9
 80218fe:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 8021902:	f804 b009 	strb.w	fp, [r4, r9]
 8021906:	44a1      	add	r9, r4
 8021908:	f89a b001 	ldrb.w	fp, [sl, #1]
 802190c:	f889 b001 	strb.w	fp, [r9, #1]
 8021910:	f89a a002 	ldrb.w	sl, [sl, #2]
 8021914:	f889 a002 	strb.w	sl, [r9, #2]
 8021918:	4460      	add	r0, ip
 802191a:	443a      	add	r2, r7
 802191c:	3501      	adds	r5, #1
 802191e:	e797      	b.n	8021850 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021920:	b005      	add	sp, #20
 8021922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021926 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192a:	b087      	sub	sp, #28
 802192c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021930:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8021932:	9204      	str	r2, [sp, #16]
 8021934:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8021938:	6870      	ldr	r0, [r6, #4]
 802193a:	9205      	str	r2, [sp, #20]
 802193c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802193e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8021942:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8021946:	9101      	str	r1, [sp, #4]
 8021948:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 802194c:	fb00 2505 	mla	r5, r0, r5, r2
 8021950:	6832      	ldr	r2, [r6, #0]
 8021952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021956:	4415      	add	r5, r2
 8021958:	6822      	ldr	r2, [r4, #0]
 802195a:	9202      	str	r2, [sp, #8]
 802195c:	6862      	ldr	r2, [r4, #4]
 802195e:	3204      	adds	r2, #4
 8021960:	9203      	str	r2, [sp, #12]
 8021962:	9a01      	ldr	r2, [sp, #4]
 8021964:	2a00      	cmp	r2, #0
 8021966:	dc03      	bgt.n	8021970 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8021968:	9a04      	ldr	r2, [sp, #16]
 802196a:	2a00      	cmp	r2, #0
 802196c:	f340 8124 	ble.w	8021bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8021970:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021972:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021978:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802197c:	2b00      	cmp	r3, #0
 802197e:	dd0e      	ble.n	802199e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8021980:	1422      	asrs	r2, r4, #16
 8021982:	d405      	bmi.n	8021990 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021984:	4572      	cmp	r2, lr
 8021986:	da03      	bge.n	8021990 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021988:	1402      	asrs	r2, r0, #16
 802198a:	d401      	bmi.n	8021990 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802198c:	4542      	cmp	r2, r8
 802198e:	db07      	blt.n	80219a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021992:	3b01      	subs	r3, #1
 8021994:	3503      	adds	r5, #3
 8021996:	4414      	add	r4, r2
 8021998:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802199a:	4410      	add	r0, r2
 802199c:	e7ee      	b.n	802197c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 802199e:	d010      	beq.n	80219c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80219a0:	1e5a      	subs	r2, r3, #1
 80219a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80219a4:	fb06 4602 	mla	r6, r6, r2, r4
 80219a8:	1436      	asrs	r6, r6, #16
 80219aa:	d546      	bpl.n	8021a3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80219ac:	4699      	mov	r9, r3
 80219ae:	462f      	mov	r7, r5
 80219b0:	f1b9 0f00 	cmp.w	r9, #0
 80219b4:	f300 80a5 	bgt.w	8021b02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 80219b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80219bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219c0:	441d      	add	r5, r3
 80219c2:	9b01      	ldr	r3, [sp, #4]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	f340 80f7 	ble.w	8021bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80219ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80219ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80219d4:	eeb0 6a62 	vmov.f32	s12, s5
 80219d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80219dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80219e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80219e8:	eeb0 6a43 	vmov.f32	s12, s6
 80219ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219f0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80219f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80219f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80219fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a0c:	ee12 2a90 	vmov	r2, s5
 8021a10:	eef0 2a47 	vmov.f32	s5, s14
 8021a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a18:	ee13 2a10 	vmov	r2, s6
 8021a1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a20:	eeb0 3a67 	vmov.f32	s6, s15
 8021a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a28:	9314      	str	r3, [sp, #80]	; 0x50
 8021a2a:	9b01      	ldr	r3, [sp, #4]
 8021a2c:	9a04      	ldr	r2, [sp, #16]
 8021a2e:	3b01      	subs	r3, #1
 8021a30:	9301      	str	r3, [sp, #4]
 8021a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a34:	bf08      	it	eq
 8021a36:	4613      	moveq	r3, r2
 8021a38:	e793      	b.n	8021962 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8021a3a:	4576      	cmp	r6, lr
 8021a3c:	dab6      	bge.n	80219ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8021a3e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021a40:	fb06 0202 	mla	r2, r6, r2, r0
 8021a44:	1412      	asrs	r2, r2, #16
 8021a46:	d4b1      	bmi.n	80219ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8021a48:	4542      	cmp	r2, r8
 8021a4a:	daaf      	bge.n	80219ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8021a4c:	1cef      	adds	r7, r5, #3
 8021a4e:	4699      	mov	r9, r3
 8021a50:	f1b9 0f00 	cmp.w	r9, #0
 8021a54:	ddb0      	ble.n	80219b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021a56:	9902      	ldr	r1, [sp, #8]
 8021a58:	1402      	asrs	r2, r0, #16
 8021a5a:	1426      	asrs	r6, r4, #16
 8021a5c:	fb0e 1202 	mla	r2, lr, r2, r1
 8021a60:	9903      	ldr	r1, [sp, #12]
 8021a62:	5d92      	ldrb	r2, [r2, r6]
 8021a64:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8021a68:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8021a6c:	d041      	beq.n	8021af2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8021a6e:	9a05      	ldr	r2, [sp, #20]
 8021a70:	fa5f fb86 	uxtb.w	fp, r6
 8021a74:	fb02 fc0c 	mul.w	ip, r2, ip
 8021a78:	f10c 0201 	add.w	r2, ip, #1
 8021a7c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8021a80:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8021a84:	1212      	asrs	r2, r2, #8
 8021a86:	fa1f fa82 	uxth.w	sl, r2
 8021a8a:	43d2      	mvns	r2, r2
 8021a8c:	fb1b fb0a 	smulbb	fp, fp, sl
 8021a90:	b2d2      	uxtb	r2, r2
 8021a92:	fb0c bc02 	mla	ip, ip, r2, fp
 8021a96:	fa1f fc8c 	uxth.w	ip, ip
 8021a9a:	f10c 0b01 	add.w	fp, ip, #1
 8021a9e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021aa2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021aa6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021aaa:	fb1b fb0a 	smulbb	fp, fp, sl
 8021aae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021ab2:	fb16 fa0a 	smulbb	sl, r6, sl
 8021ab6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021aba:	f807 cc03 	strb.w	ip, [r7, #-3]
 8021abe:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8021ac2:	fb06 aa02 	mla	sl, r6, r2, sl
 8021ac6:	fb0c bc02 	mla	ip, ip, r2, fp
 8021aca:	fa1f fa8a 	uxth.w	sl, sl
 8021ace:	fa1f fc8c 	uxth.w	ip, ip
 8021ad2:	f10a 0601 	add.w	r6, sl, #1
 8021ad6:	f10c 0b01 	add.w	fp, ip, #1
 8021ada:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021ade:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021ae2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021ae6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021aea:	f807 ac01 	strb.w	sl, [r7, #-1]
 8021aee:	f807 cc02 	strb.w	ip, [r7, #-2]
 8021af2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021af4:	3703      	adds	r7, #3
 8021af6:	f109 39ff 	add.w	r9, r9, #4294967295
 8021afa:	4414      	add	r4, r2
 8021afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021afe:	4410      	add	r0, r2
 8021b00:	e7a6      	b.n	8021a50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8021b02:	1426      	asrs	r6, r4, #16
 8021b04:	d450      	bmi.n	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021b06:	4576      	cmp	r6, lr
 8021b08:	da4e      	bge.n	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021b0a:	1402      	asrs	r2, r0, #16
 8021b0c:	d44c      	bmi.n	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021b0e:	4542      	cmp	r2, r8
 8021b10:	da4a      	bge.n	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021b12:	9902      	ldr	r1, [sp, #8]
 8021b14:	fb0e 1202 	mla	r2, lr, r2, r1
 8021b18:	9903      	ldr	r1, [sp, #12]
 8021b1a:	5d92      	ldrb	r2, [r2, r6]
 8021b1c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8021b20:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8021b24:	d040      	beq.n	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021b26:	9a05      	ldr	r2, [sp, #20]
 8021b28:	fa5f fb86 	uxtb.w	fp, r6
 8021b2c:	fb02 fc0c 	mul.w	ip, r2, ip
 8021b30:	f10c 0201 	add.w	r2, ip, #1
 8021b34:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8021b38:	f897 c000 	ldrb.w	ip, [r7]
 8021b3c:	1212      	asrs	r2, r2, #8
 8021b3e:	fa1f fa82 	uxth.w	sl, r2
 8021b42:	43d2      	mvns	r2, r2
 8021b44:	fb1b fb0a 	smulbb	fp, fp, sl
 8021b48:	b2d2      	uxtb	r2, r2
 8021b4a:	fb0c bc02 	mla	ip, ip, r2, fp
 8021b4e:	fa1f fc8c 	uxth.w	ip, ip
 8021b52:	f10c 0b01 	add.w	fp, ip, #1
 8021b56:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021b5a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021b5e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021b62:	fb1b fb0a 	smulbb	fp, fp, sl
 8021b66:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021b6a:	fb16 fa0a 	smulbb	sl, r6, sl
 8021b6e:	78be      	ldrb	r6, [r7, #2]
 8021b70:	f887 c000 	strb.w	ip, [r7]
 8021b74:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021b78:	fb06 aa02 	mla	sl, r6, r2, sl
 8021b7c:	fb0c bc02 	mla	ip, ip, r2, fp
 8021b80:	fa1f fa8a 	uxth.w	sl, sl
 8021b84:	fa1f fc8c 	uxth.w	ip, ip
 8021b88:	f10a 0601 	add.w	r6, sl, #1
 8021b8c:	f10c 0b01 	add.w	fp, ip, #1
 8021b90:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021b94:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021b98:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021b9c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021ba0:	f887 a002 	strb.w	sl, [r7, #2]
 8021ba4:	f887 c001 	strb.w	ip, [r7, #1]
 8021ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021baa:	3703      	adds	r7, #3
 8021bac:	f109 39ff 	add.w	r9, r9, #4294967295
 8021bb0:	4414      	add	r4, r2
 8021bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021bb4:	4410      	add	r0, r2
 8021bb6:	e6fb      	b.n	80219b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021bb8:	b007      	add	sp, #28
 8021bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021bbe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc2:	b085      	sub	sp, #20
 8021bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021bc8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021bca:	9203      	str	r2, [sp, #12]
 8021bcc:	6870      	ldr	r0, [r6, #4]
 8021bce:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8021bd0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021bd4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021bd8:	9100      	str	r1, [sp, #0]
 8021bda:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021bde:	fb00 2404 	mla	r4, r0, r4, r2
 8021be2:	6832      	ldr	r2, [r6, #0]
 8021be4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021be8:	4414      	add	r4, r2
 8021bea:	682a      	ldr	r2, [r5, #0]
 8021bec:	9201      	str	r2, [sp, #4]
 8021bee:	686a      	ldr	r2, [r5, #4]
 8021bf0:	3204      	adds	r2, #4
 8021bf2:	9202      	str	r2, [sp, #8]
 8021bf4:	9a00      	ldr	r2, [sp, #0]
 8021bf6:	2a00      	cmp	r2, #0
 8021bf8:	dc03      	bgt.n	8021c02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8021bfa:	9a03      	ldr	r2, [sp, #12]
 8021bfc:	2a00      	cmp	r2, #0
 8021bfe:	f340 8131 	ble.w	8021e64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8021c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021c04:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021c08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021c0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	dd0e      	ble.n	8021c30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021c12:	1405      	asrs	r5, r0, #16
 8021c14:	d405      	bmi.n	8021c22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021c16:	4575      	cmp	r5, lr
 8021c18:	da03      	bge.n	8021c22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021c1a:	1415      	asrs	r5, r2, #16
 8021c1c:	d401      	bmi.n	8021c22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021c1e:	4545      	cmp	r5, r8
 8021c20:	db07      	blt.n	8021c32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8021c22:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021c24:	3b01      	subs	r3, #1
 8021c26:	3403      	adds	r4, #3
 8021c28:	4428      	add	r0, r5
 8021c2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021c2c:	442a      	add	r2, r5
 8021c2e:	e7ee      	b.n	8021c0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8021c30:	d06f      	beq.n	8021d12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8021c32:	1e5d      	subs	r5, r3, #1
 8021c34:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021c36:	fb06 0605 	mla	r6, r6, r5, r0
 8021c3a:	1436      	asrs	r6, r6, #16
 8021c3c:	d460      	bmi.n	8021d00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021c3e:	4576      	cmp	r6, lr
 8021c40:	da5e      	bge.n	8021d00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021c42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021c44:	fb06 2505 	mla	r5, r6, r5, r2
 8021c48:	142d      	asrs	r5, r5, #16
 8021c4a:	d459      	bmi.n	8021d00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021c4c:	4545      	cmp	r5, r8
 8021c4e:	da57      	bge.n	8021d00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021c50:	1ce5      	adds	r5, r4, #3
 8021c52:	469a      	mov	sl, r3
 8021c54:	f1ba 0f00 	cmp.w	sl, #0
 8021c58:	dd56      	ble.n	8021d08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8021c5a:	9901      	ldr	r1, [sp, #4]
 8021c5c:	1416      	asrs	r6, r2, #16
 8021c5e:	1407      	asrs	r7, r0, #16
 8021c60:	fb0e 1606 	mla	r6, lr, r6, r1
 8021c64:	9902      	ldr	r1, [sp, #8]
 8021c66:	5df6      	ldrb	r6, [r6, r7]
 8021c68:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8021c6c:	0e37      	lsrs	r7, r6, #24
 8021c6e:	2fff      	cmp	r7, #255	; 0xff
 8021c70:	f000 80ef 	beq.w	8021e52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8021c74:	fa5f fc87 	uxtb.w	ip, r7
 8021c78:	b3d7      	cbz	r7, 8021cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021c7a:	fa1f f78c 	uxth.w	r7, ip
 8021c7e:	ea6f 0c0c 	mvn.w	ip, ip
 8021c82:	fa5f fb86 	uxtb.w	fp, r6
 8021c86:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8021c8a:	fa5f fc8c 	uxtb.w	ip, ip
 8021c8e:	fb1b fb07 	smulbb	fp, fp, r7
 8021c92:	fb09 b90c 	mla	r9, r9, ip, fp
 8021c96:	fa1f f989 	uxth.w	r9, r9
 8021c9a:	f109 0b01 	add.w	fp, r9, #1
 8021c9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021ca2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8021ca6:	fb1b fb0c 	smulbb	fp, fp, ip
 8021caa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cae:	f805 9c03 	strb.w	r9, [r5, #-3]
 8021cb2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8021cb6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021cba:	fb09 b907 	mla	r9, r9, r7, fp
 8021cbe:	fa1f f989 	uxth.w	r9, r9
 8021cc2:	f109 0b01 	add.w	fp, r9, #1
 8021cc6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021cca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cce:	f805 9c02 	strb.w	r9, [r5, #-2]
 8021cd2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8021cd6:	fb19 fc0c 	smulbb	ip, r9, ip
 8021cda:	fb06 c607 	mla	r6, r6, r7, ip
 8021cde:	b2b6      	uxth	r6, r6
 8021ce0:	f106 0c01 	add.w	ip, r6, #1
 8021ce4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8021ce8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021cec:	f805 cc01 	strb.w	ip, [r5, #-1]
 8021cf0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021cf2:	3503      	adds	r5, #3
 8021cf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021cf8:	4408      	add	r0, r1
 8021cfa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021cfc:	440a      	add	r2, r1
 8021cfe:	e7a9      	b.n	8021c54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8021d00:	2600      	movs	r6, #0
 8021d02:	1b9d      	subs	r5, r3, r6
 8021d04:	2d00      	cmp	r5, #0
 8021d06:	dc40      	bgt.n	8021d8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8021d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d10:	441c      	add	r4, r3
 8021d12:	9b00      	ldr	r3, [sp, #0]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	f340 80a5 	ble.w	8021e64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8021d1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d24:	eeb0 6a62 	vmov.f32	s12, s5
 8021d28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021d2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d34:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021d38:	eeb0 6a43 	vmov.f32	s12, s6
 8021d3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d40:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021d44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d5c:	ee12 2a90 	vmov	r2, s5
 8021d60:	eef0 2a47 	vmov.f32	s5, s14
 8021d64:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d68:	ee13 2a10 	vmov	r2, s6
 8021d6c:	9311      	str	r3, [sp, #68]	; 0x44
 8021d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d70:	eeb0 3a67 	vmov.f32	s6, s15
 8021d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d78:	9312      	str	r3, [sp, #72]	; 0x48
 8021d7a:	9b00      	ldr	r3, [sp, #0]
 8021d7c:	9a03      	ldr	r2, [sp, #12]
 8021d7e:	3b01      	subs	r3, #1
 8021d80:	9300      	str	r3, [sp, #0]
 8021d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d84:	bf08      	it	eq
 8021d86:	4613      	moveq	r3, r2
 8021d88:	e734      	b.n	8021bf4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8021d8a:	1407      	asrs	r7, r0, #16
 8021d8c:	d450      	bmi.n	8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021d8e:	4577      	cmp	r7, lr
 8021d90:	da4e      	bge.n	8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021d92:	1415      	asrs	r5, r2, #16
 8021d94:	d44c      	bmi.n	8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021d96:	4545      	cmp	r5, r8
 8021d98:	da4a      	bge.n	8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021d9a:	9901      	ldr	r1, [sp, #4]
 8021d9c:	fb0e 1505 	mla	r5, lr, r5, r1
 8021da0:	9902      	ldr	r1, [sp, #8]
 8021da2:	5ded      	ldrb	r5, [r5, r7]
 8021da4:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8021da8:	0e2f      	lsrs	r7, r5, #24
 8021daa:	2fff      	cmp	r7, #255	; 0xff
 8021dac:	d046      	beq.n	8021e3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8021dae:	fa5f f987 	uxtb.w	r9, r7
 8021db2:	b3ef      	cbz	r7, 8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021db4:	fa1f fc89 	uxth.w	ip, r9
 8021db8:	ea6f 0909 	mvn.w	r9, r9
 8021dbc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8021dc0:	fa5f fb85 	uxtb.w	fp, r5
 8021dc4:	f814 a007 	ldrb.w	sl, [r4, r7]
 8021dc8:	fa5f f989 	uxtb.w	r9, r9
 8021dcc:	fb1b fb0c 	smulbb	fp, fp, ip
 8021dd0:	fb0a ba09 	mla	sl, sl, r9, fp
 8021dd4:	fa1f fa8a 	uxth.w	sl, sl
 8021dd8:	f10a 0b01 	add.w	fp, sl, #1
 8021ddc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021de0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021de4:	f804 a007 	strb.w	sl, [r4, r7]
 8021de8:	4427      	add	r7, r4
 8021dea:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021dee:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8021df2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021df6:	fb1b fb09 	smulbb	fp, fp, r9
 8021dfa:	fb0a ba0c 	mla	sl, sl, ip, fp
 8021dfe:	fa1f fa8a 	uxth.w	sl, sl
 8021e02:	f10a 0b01 	add.w	fp, sl, #1
 8021e06:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021e0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021e0e:	f887 a001 	strb.w	sl, [r7, #1]
 8021e12:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021e16:	fb1a f909 	smulbb	r9, sl, r9
 8021e1a:	fb05 950c 	mla	r5, r5, ip, r9
 8021e1e:	b2ad      	uxth	r5, r5
 8021e20:	f105 0901 	add.w	r9, r5, #1
 8021e24:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8021e28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021e2c:	f887 9002 	strb.w	r9, [r7, #2]
 8021e30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021e32:	3601      	adds	r6, #1
 8021e34:	4408      	add	r0, r1
 8021e36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021e38:	440a      	add	r2, r1
 8021e3a:	e762      	b.n	8021d02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8021e3c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8021e40:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8021e44:	55e5      	strb	r5, [r4, r7]
 8021e46:	4427      	add	r7, r4
 8021e48:	0c2d      	lsrs	r5, r5, #16
 8021e4a:	f887 c001 	strb.w	ip, [r7, #1]
 8021e4e:	70bd      	strb	r5, [r7, #2]
 8021e50:	e7ee      	b.n	8021e30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021e52:	0a37      	lsrs	r7, r6, #8
 8021e54:	f805 6c03 	strb.w	r6, [r5, #-3]
 8021e58:	0c36      	lsrs	r6, r6, #16
 8021e5a:	f805 7c02 	strb.w	r7, [r5, #-2]
 8021e5e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021e62:	e745      	b.n	8021cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021e64:	b005      	add	sp, #20
 8021e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021e6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e6e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021e70:	9201      	str	r2, [sp, #4]
 8021e72:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8021e76:	6870      	ldr	r0, [r6, #4]
 8021e78:	9200      	str	r2, [sp, #0]
 8021e7a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8021e7e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8021e82:	fa1f fc85 	uxth.w	ip, r5
 8021e86:	43ed      	mvns	r5, r5
 8021e88:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021e8c:	b2ed      	uxtb	r5, r5
 8021e8e:	fb00 2404 	mla	r4, r0, r4, r2
 8021e92:	6832      	ldr	r2, [r6, #0]
 8021e94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e98:	4414      	add	r4, r2
 8021e9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021e9c:	f8d2 8000 	ldr.w	r8, [r2]
 8021ea0:	2900      	cmp	r1, #0
 8021ea2:	dc03      	bgt.n	8021eac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8021ea4:	9a01      	ldr	r2, [sp, #4]
 8021ea6:	2a00      	cmp	r2, #0
 8021ea8:	f340 8104 	ble.w	80220b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021eae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021eb4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	dd0f      	ble.n	8021edc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021ebc:	1406      	asrs	r6, r0, #16
 8021ebe:	d406      	bmi.n	8021ece <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021ec0:	4576      	cmp	r6, lr
 8021ec2:	da04      	bge.n	8021ece <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021ec4:	1416      	asrs	r6, r2, #16
 8021ec6:	d402      	bmi.n	8021ece <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021ec8:	9f00      	ldr	r7, [sp, #0]
 8021eca:	42be      	cmp	r6, r7
 8021ecc:	db07      	blt.n	8021ede <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8021ece:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021ed0:	3b01      	subs	r3, #1
 8021ed2:	3403      	adds	r4, #3
 8021ed4:	4430      	add	r0, r6
 8021ed6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021ed8:	4432      	add	r2, r6
 8021eda:	e7ed      	b.n	8021eb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8021edc:	d05f      	beq.n	8021f9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8021ede:	1e5e      	subs	r6, r3, #1
 8021ee0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021ee2:	fb07 0706 	mla	r7, r7, r6, r0
 8021ee6:	143f      	asrs	r7, r7, #16
 8021ee8:	d450      	bmi.n	8021f8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021eea:	4577      	cmp	r7, lr
 8021eec:	da4e      	bge.n	8021f8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021eee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021ef0:	fb07 2606 	mla	r6, r7, r6, r2
 8021ef4:	1436      	asrs	r6, r6, #16
 8021ef6:	d449      	bmi.n	8021f8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021ef8:	9f00      	ldr	r7, [sp, #0]
 8021efa:	42be      	cmp	r6, r7
 8021efc:	da46      	bge.n	8021f8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021efe:	1ce6      	adds	r6, r4, #3
 8021f00:	4699      	mov	r9, r3
 8021f02:	f1b9 0f00 	cmp.w	r9, #0
 8021f06:	f106 0603 	add.w	r6, r6, #3
 8021f0a:	dd43      	ble.n	8021f94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8021f0c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021f10:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021f14:	1417      	asrs	r7, r2, #16
 8021f16:	f109 39ff 	add.w	r9, r9, #4294967295
 8021f1a:	fb1b fb05 	smulbb	fp, fp, r5
 8021f1e:	fb0e a707 	mla	r7, lr, r7, sl
 8021f22:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021f26:	eb08 0a07 	add.w	sl, r8, r7
 8021f2a:	f818 7007 	ldrb.w	r7, [r8, r7]
 8021f2e:	fb07 b70c 	mla	r7, r7, ip, fp
 8021f32:	b2bf      	uxth	r7, r7
 8021f34:	f107 0b01 	add.w	fp, r7, #1
 8021f38:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021f3c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021f40:	fb1b fb05 	smulbb	fp, fp, r5
 8021f44:	123f      	asrs	r7, r7, #8
 8021f46:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021f4a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021f4e:	fb07 b70c 	mla	r7, r7, ip, fp
 8021f52:	b2bf      	uxth	r7, r7
 8021f54:	f107 0b01 	add.w	fp, r7, #1
 8021f58:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021f5c:	123f      	asrs	r7, r7, #8
 8021f5e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8021f62:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021f66:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021f6a:	fb1a fa05 	smulbb	sl, sl, r5
 8021f6e:	fb07 a70c 	mla	r7, r7, ip, sl
 8021f72:	b2bf      	uxth	r7, r7
 8021f74:	f107 0a01 	add.w	sl, r7, #1
 8021f78:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021f7c:	123f      	asrs	r7, r7, #8
 8021f7e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8021f82:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021f84:	4438      	add	r0, r7
 8021f86:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021f88:	443a      	add	r2, r7
 8021f8a:	e7ba      	b.n	8021f02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021f8c:	2700      	movs	r7, #0
 8021f8e:	1bde      	subs	r6, r3, r7
 8021f90:	2e00      	cmp	r6, #0
 8021f92:	dc3f      	bgt.n	8022014 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021f94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f9c:	441c      	add	r4, r3
 8021f9e:	2900      	cmp	r1, #0
 8021fa0:	f340 8088 	ble.w	80220b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021faa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fae:	3901      	subs	r1, #1
 8021fb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021fb4:	eef0 6a62 	vmov.f32	s13, s5
 8021fb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021fbc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fc4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8021fc8:	eef0 6a43 	vmov.f32	s13, s6
 8021fcc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fd0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8021fd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021fd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021fdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021fe0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021fe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021fe8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021fec:	ee12 2a90 	vmov	r2, s5
 8021ff0:	eef0 2a47 	vmov.f32	s5, s14
 8021ff4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ff8:	ee13 2a10 	vmov	r2, s6
 8021ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022000:	eeb0 3a67 	vmov.f32	s6, s15
 8022004:	fb92 f3f3 	sdiv	r3, r2, r3
 8022008:	9a01      	ldr	r2, [sp, #4]
 802200a:	9310      	str	r3, [sp, #64]	; 0x40
 802200c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802200e:	bf08      	it	eq
 8022010:	4613      	moveq	r3, r2
 8022012:	e745      	b.n	8021ea0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8022014:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8022018:	d446      	bmi.n	80220a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802201a:	45f2      	cmp	sl, lr
 802201c:	da44      	bge.n	80220a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802201e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8022022:	d441      	bmi.n	80220a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8022024:	9e00      	ldr	r6, [sp, #0]
 8022026:	45b1      	cmp	r9, r6
 8022028:	da3e      	bge.n	80220a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802202a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802202e:	fb0e a909 	mla	r9, lr, r9, sl
 8022032:	f814 b006 	ldrb.w	fp, [r4, r6]
 8022036:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802203a:	fb1b fb05 	smulbb	fp, fp, r5
 802203e:	eb08 0a09 	add.w	sl, r8, r9
 8022042:	f818 9009 	ldrb.w	r9, [r8, r9]
 8022046:	fb09 b90c 	mla	r9, r9, ip, fp
 802204a:	fa1f f989 	uxth.w	r9, r9
 802204e:	f109 0b01 	add.w	fp, r9, #1
 8022052:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022056:	ea4f 2929 	mov.w	r9, r9, asr #8
 802205a:	f804 9006 	strb.w	r9, [r4, r6]
 802205e:	4426      	add	r6, r4
 8022060:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8022064:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022068:	fb1b fb05 	smulbb	fp, fp, r5
 802206c:	fb09 b90c 	mla	r9, r9, ip, fp
 8022070:	fa1f f989 	uxth.w	r9, r9
 8022074:	f109 0b01 	add.w	fp, r9, #1
 8022078:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802207c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022080:	f886 9001 	strb.w	r9, [r6, #1]
 8022084:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022088:	f896 a002 	ldrb.w	sl, [r6, #2]
 802208c:	fb1a fa05 	smulbb	sl, sl, r5
 8022090:	fb09 a90c 	mla	r9, r9, ip, sl
 8022094:	fa1f f989 	uxth.w	r9, r9
 8022098:	f109 0a01 	add.w	sl, r9, #1
 802209c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80220a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80220a4:	f886 9002 	strb.w	r9, [r6, #2]
 80220a8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80220aa:	3701      	adds	r7, #1
 80220ac:	4430      	add	r0, r6
 80220ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80220b0:	4432      	add	r2, r6
 80220b2:	e76c      	b.n	8021f8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 80220b4:	b003      	add	sp, #12
 80220b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80220ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220be:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80220c4:	9201      	str	r2, [sp, #4]
 80220c6:	6868      	ldr	r0, [r5, #4]
 80220c8:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 80220cc:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80220d0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80220d4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80220d8:	fb00 2404 	mla	r4, r0, r4, r2
 80220dc:	682a      	ldr	r2, [r5, #0]
 80220de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220e2:	4414      	add	r4, r2
 80220e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80220e6:	f8d2 9000 	ldr.w	r9, [r2]
 80220ea:	2900      	cmp	r1, #0
 80220ec:	dc03      	bgt.n	80220f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80220ee:	9a01      	ldr	r2, [sp, #4]
 80220f0:	2a00      	cmp	r2, #0
 80220f2:	f340 80a8 	ble.w	8022246 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80220f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80220fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022102:	2b00      	cmp	r3, #0
 8022104:	dd0c      	ble.n	8022120 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8022106:	1405      	asrs	r5, r0, #16
 8022108:	d405      	bmi.n	8022116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 802210a:	4565      	cmp	r5, ip
 802210c:	da03      	bge.n	8022116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 802210e:	1415      	asrs	r5, r2, #16
 8022110:	d401      	bmi.n	8022116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8022112:	4575      	cmp	r5, lr
 8022114:	db05      	blt.n	8022122 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022116:	4438      	add	r0, r7
 8022118:	4432      	add	r2, r6
 802211a:	3b01      	subs	r3, #1
 802211c:	3403      	adds	r4, #3
 802211e:	e7f0      	b.n	8022102 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022120:	d03a      	beq.n	8022198 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022122:	1e5d      	subs	r5, r3, #1
 8022124:	fb07 0805 	mla	r8, r7, r5, r0
 8022128:	ea5f 4828 	movs.w	r8, r8, asr #16
 802212c:	d429      	bmi.n	8022182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802212e:	45e0      	cmp	r8, ip
 8022130:	da27      	bge.n	8022182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022132:	fb06 2505 	mla	r5, r6, r5, r2
 8022136:	142d      	asrs	r5, r5, #16
 8022138:	d423      	bmi.n	8022182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802213a:	4575      	cmp	r5, lr
 802213c:	da21      	bge.n	8022182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802213e:	f104 0803 	add.w	r8, r4, #3
 8022142:	469a      	mov	sl, r3
 8022144:	f1ba 0f00 	cmp.w	sl, #0
 8022148:	f108 0803 	add.w	r8, r8, #3
 802214c:	dd1f      	ble.n	802218e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802214e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8022152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022156:	1415      	asrs	r5, r2, #16
 8022158:	4438      	add	r0, r7
 802215a:	4432      	add	r2, r6
 802215c:	fb0c b505 	mla	r5, ip, r5, fp
 8022160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022164:	eb09 0b05 	add.w	fp, r9, r5
 8022168:	f819 5005 	ldrb.w	r5, [r9, r5]
 802216c:	f808 5c06 	strb.w	r5, [r8, #-6]
 8022170:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8022174:	f808 5c05 	strb.w	r5, [r8, #-5]
 8022178:	f89b 5002 	ldrb.w	r5, [fp, #2]
 802217c:	f808 5c04 	strb.w	r5, [r8, #-4]
 8022180:	e7e0      	b.n	8022144 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022182:	2500      	movs	r5, #0
 8022184:	eba3 0805 	sub.w	r8, r3, r5
 8022188:	f1b8 0f00 	cmp.w	r8, #0
 802218c:	dc38      	bgt.n	8022200 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 802218e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022192:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022196:	441c      	add	r4, r3
 8022198:	2900      	cmp	r1, #0
 802219a:	dd54      	ble.n	8022246 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 802219c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80221a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80221a6:	3901      	subs	r1, #1
 80221a8:	eeb0 6a62 	vmov.f32	s12, s5
 80221ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80221b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80221b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80221b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80221bc:	eeb0 6a43 	vmov.f32	s12, s6
 80221c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80221c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80221c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80221cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80221d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80221d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80221d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221e0:	ee12 2a90 	vmov	r2, s5
 80221e4:	eef0 2a47 	vmov.f32	s5, s14
 80221e8:	fb92 f7f3 	sdiv	r7, r2, r3
 80221ec:	ee13 2a10 	vmov	r2, s6
 80221f0:	eeb0 3a67 	vmov.f32	s6, s15
 80221f4:	fb92 f6f3 	sdiv	r6, r2, r3
 80221f8:	9a01      	ldr	r2, [sp, #4]
 80221fa:	bf08      	it	eq
 80221fc:	4613      	moveq	r3, r2
 80221fe:	e774      	b.n	80220ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8022200:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8022204:	d41b      	bmi.n	802223e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8022206:	45e2      	cmp	sl, ip
 8022208:	da19      	bge.n	802223e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 802220a:	ea5f 4822 	movs.w	r8, r2, asr #16
 802220e:	d416      	bmi.n	802223e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8022210:	45f0      	cmp	r8, lr
 8022212:	da14      	bge.n	802223e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8022214:	fb0c a808 	mla	r8, ip, r8, sl
 8022218:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802221c:	f819 b008 	ldrb.w	fp, [r9, r8]
 8022220:	eb09 0a08 	add.w	sl, r9, r8
 8022224:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8022228:	f804 b008 	strb.w	fp, [r4, r8]
 802222c:	44a0      	add	r8, r4
 802222e:	f89a b001 	ldrb.w	fp, [sl, #1]
 8022232:	f888 b001 	strb.w	fp, [r8, #1]
 8022236:	f89a a002 	ldrb.w	sl, [sl, #2]
 802223a:	f888 a002 	strb.w	sl, [r8, #2]
 802223e:	4438      	add	r0, r7
 8022240:	4432      	add	r2, r6
 8022242:	3501      	adds	r5, #1
 8022244:	e79e      	b.n	8022184 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022246:	b003      	add	sp, #12
 8022248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802224c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022250:	b085      	sub	sp, #20
 8022252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022256:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022258:	9202      	str	r2, [sp, #8]
 802225a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802225e:	6860      	ldr	r0, [r4, #4]
 8022260:	9203      	str	r2, [sp, #12]
 8022262:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8022266:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 802226a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 802226e:	fb00 2505 	mla	r5, r0, r5, r2
 8022272:	6822      	ldr	r2, [r4, #0]
 8022274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022278:	4415      	add	r5, r2
 802227a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802227c:	6812      	ldr	r2, [r2, #0]
 802227e:	9201      	str	r2, [sp, #4]
 8022280:	2900      	cmp	r1, #0
 8022282:	dc03      	bgt.n	802228c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8022284:	9a02      	ldr	r2, [sp, #8]
 8022286:	2a00      	cmp	r2, #0
 8022288:	f340 811c 	ble.w	80224c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802228c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802228e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022294:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022298:	2b00      	cmp	r3, #0
 802229a:	dd0e      	ble.n	80222ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802229c:	1422      	asrs	r2, r4, #16
 802229e:	d405      	bmi.n	80222ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80222a0:	4572      	cmp	r2, lr
 80222a2:	da03      	bge.n	80222ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80222a4:	1402      	asrs	r2, r0, #16
 80222a6:	d401      	bmi.n	80222ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80222a8:	4542      	cmp	r2, r8
 80222aa:	db07      	blt.n	80222bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80222ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80222ae:	3b01      	subs	r3, #1
 80222b0:	3503      	adds	r5, #3
 80222b2:	4414      	add	r4, r2
 80222b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80222b6:	4410      	add	r0, r2
 80222b8:	e7ee      	b.n	8022298 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80222ba:	d072      	beq.n	80223a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 80222bc:	1e5a      	subs	r2, r3, #1
 80222be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80222c0:	fb06 4602 	mla	r6, r6, r2, r4
 80222c4:	1436      	asrs	r6, r6, #16
 80222c6:	d461      	bmi.n	802238c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80222c8:	4576      	cmp	r6, lr
 80222ca:	da5f      	bge.n	802238c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80222cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80222ce:	fb06 0202 	mla	r2, r6, r2, r0
 80222d2:	1412      	asrs	r2, r2, #16
 80222d4:	d45a      	bmi.n	802238c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80222d6:	4542      	cmp	r2, r8
 80222d8:	da58      	bge.n	802238c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80222da:	1cef      	adds	r7, r5, #3
 80222dc:	4699      	mov	r9, r3
 80222de:	f1b9 0f00 	cmp.w	r9, #0
 80222e2:	dd59      	ble.n	8022398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80222e4:	1426      	asrs	r6, r4, #16
 80222e6:	1402      	asrs	r2, r0, #16
 80222e8:	fb0e 6202 	mla	r2, lr, r2, r6
 80222ec:	9e01      	ldr	r6, [sp, #4]
 80222ee:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80222f2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80222f6:	d041      	beq.n	802237c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80222f8:	9a03      	ldr	r2, [sp, #12]
 80222fa:	fa5f fb86 	uxtb.w	fp, r6
 80222fe:	fb02 fc0c 	mul.w	ip, r2, ip
 8022302:	f10c 0201 	add.w	r2, ip, #1
 8022306:	eb02 222c 	add.w	r2, r2, ip, asr #8
 802230a:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 802230e:	1212      	asrs	r2, r2, #8
 8022310:	fa1f fa82 	uxth.w	sl, r2
 8022314:	43d2      	mvns	r2, r2
 8022316:	fb1b fb0a 	smulbb	fp, fp, sl
 802231a:	b2d2      	uxtb	r2, r2
 802231c:	fb0c bc02 	mla	ip, ip, r2, fp
 8022320:	fa1f fc8c 	uxth.w	ip, ip
 8022324:	f10c 0b01 	add.w	fp, ip, #1
 8022328:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802232c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8022330:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8022334:	fb1b fb0a 	smulbb	fp, fp, sl
 8022338:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802233c:	fb16 fa0a 	smulbb	sl, r6, sl
 8022340:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8022344:	f807 cc03 	strb.w	ip, [r7, #-3]
 8022348:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 802234c:	fb06 aa02 	mla	sl, r6, r2, sl
 8022350:	fb0c bc02 	mla	ip, ip, r2, fp
 8022354:	fa1f fa8a 	uxth.w	sl, sl
 8022358:	fa1f fc8c 	uxth.w	ip, ip
 802235c:	f10a 0601 	add.w	r6, sl, #1
 8022360:	f10c 0b01 	add.w	fp, ip, #1
 8022364:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022368:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802236c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022370:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022374:	f807 ac01 	strb.w	sl, [r7, #-1]
 8022378:	f807 cc02 	strb.w	ip, [r7, #-2]
 802237c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802237e:	3703      	adds	r7, #3
 8022380:	f109 39ff 	add.w	r9, r9, #4294967295
 8022384:	4414      	add	r4, r2
 8022386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022388:	4410      	add	r0, r2
 802238a:	e7a8      	b.n	80222de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802238c:	f04f 0c00 	mov.w	ip, #0
 8022390:	eba3 020c 	sub.w	r2, r3, ip
 8022394:	2a00      	cmp	r2, #0
 8022396:	dc3d      	bgt.n	8022414 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8022398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802239c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80223a0:	441d      	add	r5, r3
 80223a2:	2900      	cmp	r1, #0
 80223a4:	f340 808e 	ble.w	80224c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80223a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80223ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80223b2:	3901      	subs	r1, #1
 80223b4:	eeb0 6a62 	vmov.f32	s12, s5
 80223b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80223bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80223c8:	eeb0 6a43 	vmov.f32	s12, s6
 80223cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223d0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80223d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80223dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80223e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80223e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80223e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80223ec:	ee12 2a90 	vmov	r2, s5
 80223f0:	eef0 2a47 	vmov.f32	s5, s14
 80223f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80223f8:	ee13 2a10 	vmov	r2, s6
 80223fc:	9311      	str	r3, [sp, #68]	; 0x44
 80223fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022400:	eeb0 3a67 	vmov.f32	s6, s15
 8022404:	fb92 f3f3 	sdiv	r3, r2, r3
 8022408:	9a02      	ldr	r2, [sp, #8]
 802240a:	9312      	str	r3, [sp, #72]	; 0x48
 802240c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802240e:	bf08      	it	eq
 8022410:	4613      	moveq	r3, r2
 8022412:	e735      	b.n	8022280 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8022414:	1426      	asrs	r6, r4, #16
 8022416:	d44e      	bmi.n	80224b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022418:	4576      	cmp	r6, lr
 802241a:	da4c      	bge.n	80224b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 802241c:	1402      	asrs	r2, r0, #16
 802241e:	d44a      	bmi.n	80224b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022420:	4542      	cmp	r2, r8
 8022422:	da48      	bge.n	80224b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022424:	fb0e 6202 	mla	r2, lr, r2, r6
 8022428:	9e01      	ldr	r6, [sp, #4]
 802242a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 802242e:	0e3a      	lsrs	r2, r7, #24
 8022430:	d041      	beq.n	80224b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022432:	9e03      	ldr	r6, [sp, #12]
 8022434:	fa5f fb87 	uxtb.w	fp, r7
 8022438:	4372      	muls	r2, r6
 802243a:	1c56      	adds	r6, r2, #1
 802243c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022440:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8022444:	1212      	asrs	r2, r2, #8
 8022446:	f815 9006 	ldrb.w	r9, [r5, r6]
 802244a:	fa1f fa82 	uxth.w	sl, r2
 802244e:	43d2      	mvns	r2, r2
 8022450:	fb1b fb0a 	smulbb	fp, fp, sl
 8022454:	b2d2      	uxtb	r2, r2
 8022456:	fb09 b902 	mla	r9, r9, r2, fp
 802245a:	fa1f f989 	uxth.w	r9, r9
 802245e:	f109 0b01 	add.w	fp, r9, #1
 8022462:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022466:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802246a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802246e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022472:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022476:	fb17 fa0a 	smulbb	sl, r7, sl
 802247a:	f805 9006 	strb.w	r9, [r5, r6]
 802247e:	442e      	add	r6, r5
 8022480:	78b7      	ldrb	r7, [r6, #2]
 8022482:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022486:	fb07 aa02 	mla	sl, r7, r2, sl
 802248a:	fb09 b902 	mla	r9, r9, r2, fp
 802248e:	fa1f fa8a 	uxth.w	sl, sl
 8022492:	fa1f f989 	uxth.w	r9, r9
 8022496:	f10a 0701 	add.w	r7, sl, #1
 802249a:	f109 0b01 	add.w	fp, r9, #1
 802249e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80224a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80224a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80224aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80224ae:	f886 a002 	strb.w	sl, [r6, #2]
 80224b2:	f886 9001 	strb.w	r9, [r6, #1]
 80224b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80224b8:	f10c 0c01 	add.w	ip, ip, #1
 80224bc:	4414      	add	r4, r2
 80224be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80224c0:	4410      	add	r0, r2
 80224c2:	e765      	b.n	8022390 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 80224c4:	b005      	add	sp, #20
 80224c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080224ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80224ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224ce:	b085      	sub	sp, #20
 80224d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80224d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80224d6:	9203      	str	r2, [sp, #12]
 80224d8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80224dc:	6860      	ldr	r0, [r4, #4]
 80224de:	9201      	str	r2, [sp, #4]
 80224e0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80224e4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80224e8:	fb00 2505 	mla	r5, r0, r5, r2
 80224ec:	6822      	ldr	r2, [r4, #0]
 80224ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224f2:	4415      	add	r5, r2
 80224f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80224f6:	6812      	ldr	r2, [r2, #0]
 80224f8:	9202      	str	r2, [sp, #8]
 80224fa:	2900      	cmp	r1, #0
 80224fc:	dc03      	bgt.n	8022506 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80224fe:	9a03      	ldr	r2, [sp, #12]
 8022500:	2a00      	cmp	r2, #0
 8022502:	f340 8122 	ble.w	802274a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8022506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022508:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802250c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802250e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022512:	2b00      	cmp	r3, #0
 8022514:	dd0f      	ble.n	8022536 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022516:	1422      	asrs	r2, r4, #16
 8022518:	d406      	bmi.n	8022528 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802251a:	4572      	cmp	r2, lr
 802251c:	da04      	bge.n	8022528 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802251e:	1402      	asrs	r2, r0, #16
 8022520:	d402      	bmi.n	8022528 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8022522:	9e01      	ldr	r6, [sp, #4]
 8022524:	42b2      	cmp	r2, r6
 8022526:	db07      	blt.n	8022538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802252a:	3b01      	subs	r3, #1
 802252c:	3503      	adds	r5, #3
 802252e:	4414      	add	r4, r2
 8022530:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022532:	4410      	add	r0, r2
 8022534:	e7ed      	b.n	8022512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022536:	d06e      	beq.n	8022616 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8022538:	1e5a      	subs	r2, r3, #1
 802253a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802253c:	fb06 4602 	mla	r6, r6, r2, r4
 8022540:	1436      	asrs	r6, r6, #16
 8022542:	d45d      	bmi.n	8022600 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022544:	4576      	cmp	r6, lr
 8022546:	da5b      	bge.n	8022600 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022548:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802254a:	fb06 0202 	mla	r2, r6, r2, r0
 802254e:	1412      	asrs	r2, r2, #16
 8022550:	d456      	bmi.n	8022600 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022552:	9e01      	ldr	r6, [sp, #4]
 8022554:	42b2      	cmp	r2, r6
 8022556:	da53      	bge.n	8022600 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022558:	1cee      	adds	r6, r5, #3
 802255a:	469a      	mov	sl, r3
 802255c:	f1ba 0f00 	cmp.w	sl, #0
 8022560:	dd54      	ble.n	802260c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022562:	1427      	asrs	r7, r4, #16
 8022564:	1402      	asrs	r2, r0, #16
 8022566:	fb0e 7202 	mla	r2, lr, r2, r7
 802256a:	9f02      	ldr	r7, [sp, #8]
 802256c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8022570:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8022574:	d03c      	beq.n	80225f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8022576:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802257a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802257e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022582:	fa5f f28c 	uxtb.w	r2, ip
 8022586:	b2ff      	uxtb	r7, r7
 8022588:	f000 80d8 	beq.w	802273c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802258c:	fa1f f882 	uxth.w	r8, r2
 8022590:	43d2      	mvns	r2, r2
 8022592:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8022596:	fb17 f708 	smulbb	r7, r7, r8
 802259a:	b2d2      	uxtb	r2, r2
 802259c:	fb19 f908 	smulbb	r9, r9, r8
 80225a0:	fb0c 7702 	mla	r7, ip, r2, r7
 80225a4:	fb1b f808 	smulbb	r8, fp, r8
 80225a8:	b2bf      	uxth	r7, r7
 80225aa:	f107 0c01 	add.w	ip, r7, #1
 80225ae:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80225b2:	123f      	asrs	r7, r7, #8
 80225b4:	f806 7c03 	strb.w	r7, [r6, #-3]
 80225b8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80225bc:	fb07 9902 	mla	r9, r7, r2, r9
 80225c0:	fa1f f989 	uxth.w	r9, r9
 80225c4:	f109 0701 	add.w	r7, r9, #1
 80225c8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80225cc:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80225d0:	fb07 8802 	mla	r8, r7, r2, r8
 80225d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80225d8:	fa1f f888 	uxth.w	r8, r8
 80225dc:	f806 9c02 	strb.w	r9, [r6, #-2]
 80225e0:	f108 0201 	add.w	r2, r8, #1
 80225e4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80225e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80225ec:	f806 8c01 	strb.w	r8, [r6, #-1]
 80225f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225f2:	3603      	adds	r6, #3
 80225f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80225f8:	4414      	add	r4, r2
 80225fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80225fc:	4410      	add	r0, r2
 80225fe:	e7ad      	b.n	802255c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022600:	f04f 0c00 	mov.w	ip, #0
 8022604:	eba3 020c 	sub.w	r2, r3, ip
 8022608:	2a00      	cmp	r2, #0
 802260a:	dc3d      	bgt.n	8022688 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802260c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022614:	441d      	add	r5, r3
 8022616:	2900      	cmp	r1, #0
 8022618:	f340 8097 	ble.w	802274a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 802261c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022622:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022626:	3901      	subs	r1, #1
 8022628:	eeb0 6a62 	vmov.f32	s12, s5
 802262c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022630:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022634:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022638:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802263c:	eeb0 6a43 	vmov.f32	s12, s6
 8022640:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022644:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022648:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802264c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022650:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022654:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022658:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802265c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022660:	ee12 2a90 	vmov	r2, s5
 8022664:	eef0 2a47 	vmov.f32	s5, s14
 8022668:	fb92 f3f3 	sdiv	r3, r2, r3
 802266c:	ee13 2a10 	vmov	r2, s6
 8022670:	9311      	str	r3, [sp, #68]	; 0x44
 8022672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022674:	eeb0 3a67 	vmov.f32	s6, s15
 8022678:	fb92 f3f3 	sdiv	r3, r2, r3
 802267c:	9a03      	ldr	r2, [sp, #12]
 802267e:	9312      	str	r3, [sp, #72]	; 0x48
 8022680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022682:	bf08      	it	eq
 8022684:	4613      	moveq	r3, r2
 8022686:	e738      	b.n	80224fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8022688:	1426      	asrs	r6, r4, #16
 802268a:	d448      	bmi.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802268c:	4576      	cmp	r6, lr
 802268e:	da46      	bge.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022690:	1402      	asrs	r2, r0, #16
 8022692:	d444      	bmi.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022694:	9f01      	ldr	r7, [sp, #4]
 8022696:	42ba      	cmp	r2, r7
 8022698:	da41      	bge.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802269a:	fb0e 6202 	mla	r2, lr, r2, r6
 802269e:	9e02      	ldr	r6, [sp, #8]
 80226a0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80226a4:	0e3a      	lsrs	r2, r7, #24
 80226a6:	d03a      	beq.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80226a8:	2aff      	cmp	r2, #255	; 0xff
 80226aa:	b2d6      	uxtb	r6, r2
 80226ac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80226b0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80226b4:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80226b8:	b2ff      	uxtb	r7, r7
 80226ba:	d037      	beq.n	802272c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 80226bc:	fa1f f986 	uxth.w	r9, r6
 80226c0:	4462      	add	r2, ip
 80226c2:	43f6      	mvns	r6, r6
 80226c4:	f815 8002 	ldrb.w	r8, [r5, r2]
 80226c8:	fb17 f709 	smulbb	r7, r7, r9
 80226cc:	fb1a fa09 	smulbb	sl, sl, r9
 80226d0:	b2f6      	uxtb	r6, r6
 80226d2:	fb1b f909 	smulbb	r9, fp, r9
 80226d6:	fb08 7706 	mla	r7, r8, r6, r7
 80226da:	b2bf      	uxth	r7, r7
 80226dc:	f107 0801 	add.w	r8, r7, #1
 80226e0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80226e4:	123f      	asrs	r7, r7, #8
 80226e6:	54af      	strb	r7, [r5, r2]
 80226e8:	442a      	add	r2, r5
 80226ea:	7857      	ldrb	r7, [r2, #1]
 80226ec:	fb07 aa06 	mla	sl, r7, r6, sl
 80226f0:	fa1f fa8a 	uxth.w	sl, sl
 80226f4:	f10a 0701 	add.w	r7, sl, #1
 80226f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80226fc:	7897      	ldrb	r7, [r2, #2]
 80226fe:	fb07 9906 	mla	r9, r7, r6, r9
 8022702:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022706:	fa1f f989 	uxth.w	r9, r9
 802270a:	f882 a001 	strb.w	sl, [r2, #1]
 802270e:	f109 0601 	add.w	r6, r9, #1
 8022712:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022716:	ea4f 2929 	mov.w	r9, r9, asr #8
 802271a:	f882 9002 	strb.w	r9, [r2, #2]
 802271e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022720:	f10c 0c01 	add.w	ip, ip, #1
 8022724:	4414      	add	r4, r2
 8022726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022728:	4410      	add	r0, r2
 802272a:	e76b      	b.n	8022604 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 802272c:	4462      	add	r2, ip
 802272e:	54af      	strb	r7, [r5, r2]
 8022730:	442a      	add	r2, r5
 8022732:	f882 a001 	strb.w	sl, [r2, #1]
 8022736:	f882 b002 	strb.w	fp, [r2, #2]
 802273a:	e7f0      	b.n	802271e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802273c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022740:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022744:	f806 bc01 	strb.w	fp, [r6, #-1]
 8022748:	e752      	b.n	80225f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 802274a:	b005      	add	sp, #20
 802274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022750 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022754:	b087      	sub	sp, #28
 8022756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802275a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802275c:	9204      	str	r2, [sp, #16]
 802275e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022762:	6860      	ldr	r0, [r4, #4]
 8022764:	9205      	str	r2, [sp, #20]
 8022766:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802276a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 802276e:	9101      	str	r1, [sp, #4]
 8022770:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8022774:	fb00 2505 	mla	r5, r0, r5, r2
 8022778:	6822      	ldr	r2, [r4, #0]
 802277a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802277e:	4415      	add	r5, r2
 8022780:	f10e 0201 	add.w	r2, lr, #1
 8022784:	f022 0201 	bic.w	r2, r2, #1
 8022788:	9202      	str	r2, [sp, #8]
 802278a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802278c:	6812      	ldr	r2, [r2, #0]
 802278e:	9203      	str	r2, [sp, #12]
 8022790:	9a01      	ldr	r2, [sp, #4]
 8022792:	2a00      	cmp	r2, #0
 8022794:	dc03      	bgt.n	802279e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8022796:	9a04      	ldr	r2, [sp, #16]
 8022798:	2a00      	cmp	r2, #0
 802279a:	f340 8132 	ble.w	8022a02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802279e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227a0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80227a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80227a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	dd0e      	ble.n	80227cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80227ae:	1422      	asrs	r2, r4, #16
 80227b0:	d405      	bmi.n	80227be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80227b2:	4596      	cmp	lr, r2
 80227b4:	dd03      	ble.n	80227be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80227b6:	1402      	asrs	r2, r0, #16
 80227b8:	d401      	bmi.n	80227be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80227ba:	4542      	cmp	r2, r8
 80227bc:	db07      	blt.n	80227ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80227be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80227c0:	3b01      	subs	r3, #1
 80227c2:	3503      	adds	r5, #3
 80227c4:	4414      	add	r4, r2
 80227c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80227c8:	4410      	add	r0, r2
 80227ca:	e7ee      	b.n	80227aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 80227cc:	d010      	beq.n	80227f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80227ce:	1e5a      	subs	r2, r3, #1
 80227d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80227d2:	fb06 4602 	mla	r6, r6, r2, r4
 80227d6:	1436      	asrs	r6, r6, #16
 80227d8:	d546      	bpl.n	8022868 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80227da:	4699      	mov	r9, r3
 80227dc:	462e      	mov	r6, r5
 80227de:	f1b9 0f00 	cmp.w	r9, #0
 80227e2:	f300 80ac 	bgt.w	802293e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 80227e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80227ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227ee:	441d      	add	r5, r3
 80227f0:	9b01      	ldr	r3, [sp, #4]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	f340 8105 	ble.w	8022a02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80227f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80227fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80227fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022802:	eeb0 6a62 	vmov.f32	s12, s5
 8022806:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802280a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802280e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022812:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022816:	eeb0 6a43 	vmov.f32	s12, s6
 802281a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802281e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022822:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022826:	ee61 7a27 	vmul.f32	s15, s2, s15
 802282a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802282e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022832:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022836:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802283a:	ee12 2a90 	vmov	r2, s5
 802283e:	eef0 2a47 	vmov.f32	s5, s14
 8022842:	fb92 f3f3 	sdiv	r3, r2, r3
 8022846:	ee13 2a10 	vmov	r2, s6
 802284a:	9313      	str	r3, [sp, #76]	; 0x4c
 802284c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802284e:	eeb0 3a67 	vmov.f32	s6, s15
 8022852:	fb92 f3f3 	sdiv	r3, r2, r3
 8022856:	9314      	str	r3, [sp, #80]	; 0x50
 8022858:	9b01      	ldr	r3, [sp, #4]
 802285a:	9a04      	ldr	r2, [sp, #16]
 802285c:	3b01      	subs	r3, #1
 802285e:	9301      	str	r3, [sp, #4]
 8022860:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022862:	bf08      	it	eq
 8022864:	4613      	moveq	r3, r2
 8022866:	e793      	b.n	8022790 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8022868:	45b6      	cmp	lr, r6
 802286a:	ddb6      	ble.n	80227da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802286c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802286e:	fb06 0202 	mla	r2, r6, r2, r0
 8022872:	1412      	asrs	r2, r2, #16
 8022874:	d4b1      	bmi.n	80227da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022876:	4542      	cmp	r2, r8
 8022878:	daaf      	bge.n	80227da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802287a:	1cee      	adds	r6, r5, #3
 802287c:	4699      	mov	r9, r3
 802287e:	f1b9 0f00 	cmp.w	r9, #0
 8022882:	ddb0      	ble.n	80227e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022884:	1422      	asrs	r2, r4, #16
 8022886:	9902      	ldr	r1, [sp, #8]
 8022888:	1407      	asrs	r7, r0, #16
 802288a:	fb01 2707 	mla	r7, r1, r7, r2
 802288e:	9903      	ldr	r1, [sp, #12]
 8022890:	087a      	lsrs	r2, r7, #1
 8022892:	5c8a      	ldrb	r2, [r1, r2]
 8022894:	07f9      	lsls	r1, r7, #31
 8022896:	bf54      	ite	pl
 8022898:	f002 020f 	andpl.w	r2, r2, #15
 802289c:	1112      	asrmi	r2, r2, #4
 802289e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80228a2:	b2d2      	uxtb	r2, r2
 80228a4:	2a00      	cmp	r2, #0
 80228a6:	d042      	beq.n	802292e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 80228a8:	4957      	ldr	r1, [pc, #348]	; (8022a08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 80228aa:	680f      	ldr	r7, [r1, #0]
 80228ac:	9905      	ldr	r1, [sp, #20]
 80228ae:	fa5f fb87 	uxtb.w	fp, r7
 80228b2:	434a      	muls	r2, r1
 80228b4:	f102 0c01 	add.w	ip, r2, #1
 80228b8:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 80228bc:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 80228c0:	1212      	asrs	r2, r2, #8
 80228c2:	fa1f fa82 	uxth.w	sl, r2
 80228c6:	43d2      	mvns	r2, r2
 80228c8:	fb1b fb0a 	smulbb	fp, fp, sl
 80228cc:	b2d2      	uxtb	r2, r2
 80228ce:	fb0c bc02 	mla	ip, ip, r2, fp
 80228d2:	fa1f fc8c 	uxth.w	ip, ip
 80228d6:	f10c 0b01 	add.w	fp, ip, #1
 80228da:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80228de:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80228e2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80228e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80228ea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80228ee:	fb17 fa0a 	smulbb	sl, r7, sl
 80228f2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80228f6:	f806 cc03 	strb.w	ip, [r6, #-3]
 80228fa:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80228fe:	fb07 aa02 	mla	sl, r7, r2, sl
 8022902:	fb0c bc02 	mla	ip, ip, r2, fp
 8022906:	fa1f fa8a 	uxth.w	sl, sl
 802290a:	fa1f fc8c 	uxth.w	ip, ip
 802290e:	f10a 0701 	add.w	r7, sl, #1
 8022912:	f10c 0b01 	add.w	fp, ip, #1
 8022916:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802291a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802291e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022922:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022926:	f806 ac01 	strb.w	sl, [r6, #-1]
 802292a:	f806 cc02 	strb.w	ip, [r6, #-2]
 802292e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022930:	3603      	adds	r6, #3
 8022932:	f109 39ff 	add.w	r9, r9, #4294967295
 8022936:	4414      	add	r4, r2
 8022938:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802293a:	4410      	add	r0, r2
 802293c:	e79f      	b.n	802287e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 802293e:	1422      	asrs	r2, r4, #16
 8022940:	d457      	bmi.n	80229f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022942:	4596      	cmp	lr, r2
 8022944:	dd55      	ble.n	80229f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8022946:	1407      	asrs	r7, r0, #16
 8022948:	d453      	bmi.n	80229f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802294a:	4547      	cmp	r7, r8
 802294c:	da51      	bge.n	80229f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802294e:	9902      	ldr	r1, [sp, #8]
 8022950:	fb07 2701 	mla	r7, r7, r1, r2
 8022954:	9903      	ldr	r1, [sp, #12]
 8022956:	087a      	lsrs	r2, r7, #1
 8022958:	07ff      	lsls	r7, r7, #31
 802295a:	5c8a      	ldrb	r2, [r1, r2]
 802295c:	bf54      	ite	pl
 802295e:	f002 020f 	andpl.w	r2, r2, #15
 8022962:	1112      	asrmi	r2, r2, #4
 8022964:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022968:	b2d2      	uxtb	r2, r2
 802296a:	2a00      	cmp	r2, #0
 802296c:	d041      	beq.n	80229f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802296e:	4926      	ldr	r1, [pc, #152]	; (8022a08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8022970:	680f      	ldr	r7, [r1, #0]
 8022972:	9905      	ldr	r1, [sp, #20]
 8022974:	fa5f fb87 	uxtb.w	fp, r7
 8022978:	434a      	muls	r2, r1
 802297a:	f102 0c01 	add.w	ip, r2, #1
 802297e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8022982:	f896 c000 	ldrb.w	ip, [r6]
 8022986:	1212      	asrs	r2, r2, #8
 8022988:	fa1f fa82 	uxth.w	sl, r2
 802298c:	43d2      	mvns	r2, r2
 802298e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022992:	b2d2      	uxtb	r2, r2
 8022994:	fb0c bc02 	mla	ip, ip, r2, fp
 8022998:	fa1f fc8c 	uxth.w	ip, ip
 802299c:	f10c 0b01 	add.w	fp, ip, #1
 80229a0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80229a4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80229a8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80229ac:	fb1b fb0a 	smulbb	fp, fp, sl
 80229b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80229b4:	fb17 fa0a 	smulbb	sl, r7, sl
 80229b8:	78b7      	ldrb	r7, [r6, #2]
 80229ba:	f886 c000 	strb.w	ip, [r6]
 80229be:	f896 c001 	ldrb.w	ip, [r6, #1]
 80229c2:	fb07 aa02 	mla	sl, r7, r2, sl
 80229c6:	fb0c bc02 	mla	ip, ip, r2, fp
 80229ca:	fa1f fa8a 	uxth.w	sl, sl
 80229ce:	fa1f fc8c 	uxth.w	ip, ip
 80229d2:	f10a 0701 	add.w	r7, sl, #1
 80229d6:	f10c 0b01 	add.w	fp, ip, #1
 80229da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80229de:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80229e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80229e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80229ea:	f886 a002 	strb.w	sl, [r6, #2]
 80229ee:	f886 c001 	strb.w	ip, [r6, #1]
 80229f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80229f4:	3603      	adds	r6, #3
 80229f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80229fa:	4414      	add	r4, r2
 80229fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80229fe:	4410      	add	r0, r2
 8022a00:	e6ed      	b.n	80227de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8022a02:	b007      	add	sp, #28
 8022a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a08:	2000c018 	.word	0x2000c018

08022a0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a10:	b087      	sub	sp, #28
 8022a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022a16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a18:	9205      	str	r2, [sp, #20]
 8022a1a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8022a1e:	6860      	ldr	r0, [r4, #4]
 8022a20:	9202      	str	r2, [sp, #8]
 8022a22:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8022a26:	9101      	str	r1, [sp, #4]
 8022a28:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8022a2c:	fb00 2606 	mla	r6, r0, r6, r2
 8022a30:	6822      	ldr	r2, [r4, #0]
 8022a32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022a36:	4416      	add	r6, r2
 8022a38:	f108 0201 	add.w	r2, r8, #1
 8022a3c:	f022 0201 	bic.w	r2, r2, #1
 8022a40:	9203      	str	r2, [sp, #12]
 8022a42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022a44:	6812      	ldr	r2, [r2, #0]
 8022a46:	9204      	str	r2, [sp, #16]
 8022a48:	9a01      	ldr	r2, [sp, #4]
 8022a4a:	2a00      	cmp	r2, #0
 8022a4c:	dc03      	bgt.n	8022a56 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8022a4e:	9a05      	ldr	r2, [sp, #20]
 8022a50:	2a00      	cmp	r2, #0
 8022a52:	f340 813a 	ble.w	8022cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022a56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a58:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8022a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a5e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	dd0f      	ble.n	8022a86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022a66:	142a      	asrs	r2, r5, #16
 8022a68:	d406      	bmi.n	8022a78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022a6a:	4590      	cmp	r8, r2
 8022a6c:	dd04      	ble.n	8022a78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022a6e:	1422      	asrs	r2, r4, #16
 8022a70:	d402      	bmi.n	8022a78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022a72:	9802      	ldr	r0, [sp, #8]
 8022a74:	4282      	cmp	r2, r0
 8022a76:	db07      	blt.n	8022a88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8022a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022a7a:	3b01      	subs	r3, #1
 8022a7c:	3603      	adds	r6, #3
 8022a7e:	4415      	add	r5, r2
 8022a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022a82:	4414      	add	r4, r2
 8022a84:	e7ed      	b.n	8022a62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8022a86:	d073      	beq.n	8022b70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8022a88:	1e5a      	subs	r2, r3, #1
 8022a8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022a8c:	fb00 5002 	mla	r0, r0, r2, r5
 8022a90:	1400      	asrs	r0, r0, #16
 8022a92:	d464      	bmi.n	8022b5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022a94:	4580      	cmp	r8, r0
 8022a96:	dd62      	ble.n	8022b5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022a98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022a9a:	fb00 4202 	mla	r2, r0, r2, r4
 8022a9e:	1412      	asrs	r2, r2, #16
 8022aa0:	d45d      	bmi.n	8022b5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022aa2:	9802      	ldr	r0, [sp, #8]
 8022aa4:	4282      	cmp	r2, r0
 8022aa6:	da5a      	bge.n	8022b5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022aa8:	1cf0      	adds	r0, r6, #3
 8022aaa:	469a      	mov	sl, r3
 8022aac:	f1ba 0f00 	cmp.w	sl, #0
 8022ab0:	dd59      	ble.n	8022b66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8022ab2:	142a      	asrs	r2, r5, #16
 8022ab4:	9903      	ldr	r1, [sp, #12]
 8022ab6:	1427      	asrs	r7, r4, #16
 8022ab8:	fb01 2707 	mla	r7, r1, r7, r2
 8022abc:	9904      	ldr	r1, [sp, #16]
 8022abe:	087a      	lsrs	r2, r7, #1
 8022ac0:	5c8a      	ldrb	r2, [r1, r2]
 8022ac2:	07f9      	lsls	r1, r7, #31
 8022ac4:	bf54      	ite	pl
 8022ac6:	f002 020f 	andpl.w	r2, r2, #15
 8022aca:	1112      	asrmi	r2, r2, #4
 8022acc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022ad0:	b2d2      	uxtb	r2, r2
 8022ad2:	2a00      	cmp	r2, #0
 8022ad4:	d03b      	beq.n	8022b4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022ad6:	497e      	ldr	r1, [pc, #504]	; (8022cd0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8022ad8:	2aff      	cmp	r2, #255	; 0xff
 8022ada:	680f      	ldr	r7, [r1, #0]
 8022adc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022ae0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022ae4:	b2ff      	uxtb	r7, r7
 8022ae6:	f000 80e9 	beq.w	8022cbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022aea:	fa1f fe82 	uxth.w	lr, r2
 8022aee:	43d2      	mvns	r2, r2
 8022af0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8022af4:	fb17 f70e 	smulbb	r7, r7, lr
 8022af8:	b2d2      	uxtb	r2, r2
 8022afa:	fb19 f90e 	smulbb	r9, r9, lr
 8022afe:	fb0c 7702 	mla	r7, ip, r2, r7
 8022b02:	fb1b fe0e 	smulbb	lr, fp, lr
 8022b06:	b2bf      	uxth	r7, r7
 8022b08:	f107 0c01 	add.w	ip, r7, #1
 8022b0c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022b10:	123f      	asrs	r7, r7, #8
 8022b12:	f800 7c03 	strb.w	r7, [r0, #-3]
 8022b16:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8022b1a:	fb07 9902 	mla	r9, r7, r2, r9
 8022b1e:	fa1f f989 	uxth.w	r9, r9
 8022b22:	f109 0701 	add.w	r7, r9, #1
 8022b26:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022b2a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8022b2e:	fb07 ee02 	mla	lr, r7, r2, lr
 8022b32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b36:	fa1f fe8e 	uxth.w	lr, lr
 8022b3a:	f800 9c02 	strb.w	r9, [r0, #-2]
 8022b3e:	f10e 0201 	add.w	r2, lr, #1
 8022b42:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022b46:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b4a:	f800 ec01 	strb.w	lr, [r0, #-1]
 8022b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022b50:	3003      	adds	r0, #3
 8022b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022b56:	4415      	add	r5, r2
 8022b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022b5a:	4414      	add	r4, r2
 8022b5c:	e7a6      	b.n	8022aac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022b5e:	2700      	movs	r7, #0
 8022b60:	1bda      	subs	r2, r3, r7
 8022b62:	2a00      	cmp	r2, #0
 8022b64:	dc40      	bgt.n	8022be8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8022b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b6e:	441e      	add	r6, r3
 8022b70:	9b01      	ldr	r3, [sp, #4]
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	f340 80a9 	ble.w	8022cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022b78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b82:	eeb0 6a62 	vmov.f32	s12, s5
 8022b86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022b8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022b92:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022b96:	eeb0 6a43 	vmov.f32	s12, s6
 8022b9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022b9e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022ba2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ba6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022baa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022bb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022bb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022bba:	ee12 2a90 	vmov	r2, s5
 8022bbe:	eef0 2a47 	vmov.f32	s5, s14
 8022bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bc6:	ee13 2a10 	vmov	r2, s6
 8022bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022bce:	eeb0 3a67 	vmov.f32	s6, s15
 8022bd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bd6:	9314      	str	r3, [sp, #80]	; 0x50
 8022bd8:	9b01      	ldr	r3, [sp, #4]
 8022bda:	9a05      	ldr	r2, [sp, #20]
 8022bdc:	3b01      	subs	r3, #1
 8022bde:	9301      	str	r3, [sp, #4]
 8022be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022be2:	bf08      	it	eq
 8022be4:	4613      	moveq	r3, r2
 8022be6:	e72f      	b.n	8022a48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8022be8:	142a      	asrs	r2, r5, #16
 8022bea:	d458      	bmi.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022bec:	4590      	cmp	r8, r2
 8022bee:	dd56      	ble.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022bf0:	1420      	asrs	r0, r4, #16
 8022bf2:	d454      	bmi.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022bf4:	9902      	ldr	r1, [sp, #8]
 8022bf6:	4288      	cmp	r0, r1
 8022bf8:	da51      	bge.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022bfa:	9903      	ldr	r1, [sp, #12]
 8022bfc:	fb00 2001 	mla	r0, r0, r1, r2
 8022c00:	9904      	ldr	r1, [sp, #16]
 8022c02:	0842      	lsrs	r2, r0, #1
 8022c04:	07c0      	lsls	r0, r0, #31
 8022c06:	5c8a      	ldrb	r2, [r1, r2]
 8022c08:	bf54      	ite	pl
 8022c0a:	f002 020f 	andpl.w	r2, r2, #15
 8022c0e:	1112      	asrmi	r2, r2, #4
 8022c10:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022c14:	b2d2      	uxtb	r2, r2
 8022c16:	2a00      	cmp	r2, #0
 8022c18:	d041      	beq.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022c1a:	492d      	ldr	r1, [pc, #180]	; (8022cd0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8022c1c:	2aff      	cmp	r2, #255	; 0xff
 8022c1e:	6808      	ldr	r0, [r1, #0]
 8022c20:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8022c24:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022c28:	fa5f fc80 	uxtb.w	ip, r0
 8022c2c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8022c30:	d03b      	beq.n	8022caa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8022c32:	fa1f f982 	uxth.w	r9, r2
 8022c36:	4438      	add	r0, r7
 8022c38:	43d2      	mvns	r2, r2
 8022c3a:	f816 e000 	ldrb.w	lr, [r6, r0]
 8022c3e:	fb1c fc09 	smulbb	ip, ip, r9
 8022c42:	fb1a fa09 	smulbb	sl, sl, r9
 8022c46:	b2d2      	uxtb	r2, r2
 8022c48:	fb1b f909 	smulbb	r9, fp, r9
 8022c4c:	fb0e cc02 	mla	ip, lr, r2, ip
 8022c50:	fa1f fc8c 	uxth.w	ip, ip
 8022c54:	f10c 0e01 	add.w	lr, ip, #1
 8022c58:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8022c5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022c60:	f806 c000 	strb.w	ip, [r6, r0]
 8022c64:	4430      	add	r0, r6
 8022c66:	f890 c001 	ldrb.w	ip, [r0, #1]
 8022c6a:	fb0c aa02 	mla	sl, ip, r2, sl
 8022c6e:	fa1f fa8a 	uxth.w	sl, sl
 8022c72:	f10a 0c01 	add.w	ip, sl, #1
 8022c76:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c7a:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022c7e:	fb0c 9902 	mla	r9, ip, r2, r9
 8022c82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022c86:	fa1f f989 	uxth.w	r9, r9
 8022c8a:	f880 a001 	strb.w	sl, [r0, #1]
 8022c8e:	f109 0201 	add.w	r2, r9, #1
 8022c92:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022c96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c9a:	f880 9002 	strb.w	r9, [r0, #2]
 8022c9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022ca0:	3701      	adds	r7, #1
 8022ca2:	4415      	add	r5, r2
 8022ca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022ca6:	4414      	add	r4, r2
 8022ca8:	e75a      	b.n	8022b60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8022caa:	4438      	add	r0, r7
 8022cac:	f806 c000 	strb.w	ip, [r6, r0]
 8022cb0:	4430      	add	r0, r6
 8022cb2:	f880 a001 	strb.w	sl, [r0, #1]
 8022cb6:	f880 b002 	strb.w	fp, [r0, #2]
 8022cba:	e7f0      	b.n	8022c9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022cbc:	f800 7c03 	strb.w	r7, [r0, #-3]
 8022cc0:	f800 9c02 	strb.w	r9, [r0, #-2]
 8022cc4:	f800 bc01 	strb.w	fp, [r0, #-1]
 8022cc8:	e741      	b.n	8022b4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022cca:	b007      	add	sp, #28
 8022ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cd0:	2000c018 	.word	0x2000c018

08022cd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8022cd4:	4770      	bx	lr

08022cd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8022cd6:	4770      	bx	lr

08022cd8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8022cd8:	4770      	bx	lr

08022cda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8022cda:	4770      	bx	lr

08022cdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022cdc:	4770      	bx	lr

08022cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022cde:	4770      	bx	lr

08022ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022ce0:	4770      	bx	lr

08022ce2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022ce2:	4770      	bx	lr

08022ce4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022ce4:	4770      	bx	lr

08022ce6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022ce6:	4770      	bx	lr

08022ce8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022ce8:	4770      	bx	lr

08022cea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022cea:	4770      	bx	lr

08022cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022cec:	4770      	bx	lr

08022cee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022cee:	4770      	bx	lr

08022cf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022cf0:	4770      	bx	lr

08022cf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022cf2:	4770      	bx	lr

08022cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022cf4:	4770      	bx	lr

08022cf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022cf6:	4770      	bx	lr

08022cf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022cf8:	4770      	bx	lr

08022cfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022cfa:	4770      	bx	lr

08022cfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8022cfc:	2bff      	cmp	r3, #255	; 0xff
 8022cfe:	b508      	push	{r3, lr}
 8022d00:	d04f      	beq.n	8022da2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8022d02:	2a2c      	cmp	r2, #44	; 0x2c
 8022d04:	d032      	beq.n	8022d6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8022d06:	d80f      	bhi.n	8022d28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8022d08:	2a08      	cmp	r2, #8
 8022d0a:	d046      	beq.n	8022d9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8022d0c:	d805      	bhi.n	8022d1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8022d0e:	2a04      	cmp	r2, #4
 8022d10:	d041      	beq.n	8022d96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8022d12:	2a05      	cmp	r2, #5
 8022d14:	d03d      	beq.n	8022d92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8022d16:	2000      	movs	r0, #0
 8022d18:	e027      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d1a:	2a0a      	cmp	r2, #10
 8022d1c:	d03d      	beq.n	8022d9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8022d1e:	d301      	bcc.n	8022d24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8022d20:	2a0b      	cmp	r2, #11
 8022d22:	d1f8      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d24:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8022d26:	e020      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d28:	2a30      	cmp	r2, #48	; 0x30
 8022d2a:	d038      	beq.n	8022d9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8022d2c:	d808      	bhi.n	8022d40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8022d2e:	2a2e      	cmp	r2, #46	; 0x2e
 8022d30:	684b      	ldr	r3, [r1, #4]
 8022d32:	d029      	beq.n	8022d88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8022d34:	d90b      	bls.n	8022d4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8022d36:	781b      	ldrb	r3, [r3, #0]
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d1ec      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d3c:	6a00      	ldr	r0, [r0, #32]
 8022d3e:	e014      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d40:	2a32      	cmp	r2, #50	; 0x32
 8022d42:	d02c      	beq.n	8022d9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8022d44:	d301      	bcc.n	8022d4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8022d46:	2a33      	cmp	r2, #51	; 0x33
 8022d48:	d1e5      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d4a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8022d4c:	e00d      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d4e:	781b      	ldrb	r3, [r3, #0]
 8022d50:	2b01      	cmp	r3, #1
 8022d52:	d009      	beq.n	8022d68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8022d54:	d3f2      	bcc.n	8022d3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8022d56:	2b02      	cmp	r3, #2
 8022d58:	d1dd      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d5a:	4b39      	ldr	r3, [pc, #228]	; (8022e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022d5c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8022d60:	4a38      	ldr	r2, [pc, #224]	; (8022e44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8022d62:	4839      	ldr	r0, [pc, #228]	; (8022e48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8022d64:	f007 ff3e 	bl	802abe4 <__assert_func>
 8022d68:	6900      	ldr	r0, [r0, #16]
 8022d6a:	bd08      	pop	{r3, pc}
 8022d6c:	684b      	ldr	r3, [r1, #4]
 8022d6e:	781b      	ldrb	r3, [r3, #0]
 8022d70:	2b01      	cmp	r3, #1
 8022d72:	d007      	beq.n	8022d84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8022d74:	d30b      	bcc.n	8022d8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8022d76:	2b02      	cmp	r3, #2
 8022d78:	d1cd      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d7a:	4b31      	ldr	r3, [pc, #196]	; (8022e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022d7c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8022d80:	4a30      	ldr	r2, [pc, #192]	; (8022e44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8022d82:	e7ee      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8022d84:	6880      	ldr	r0, [r0, #8]
 8022d86:	e7f0      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d88:	781b      	ldrb	r3, [r3, #0]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d1c3      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022d8e:	6980      	ldr	r0, [r0, #24]
 8022d90:	e7eb      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d92:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8022d94:	e7e9      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d96:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8022d98:	e7e7      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8022d9c:	e7e5      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022d9e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8022da0:	e7e3      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022da2:	2a2c      	cmp	r2, #44	; 0x2c
 8022da4:	d030      	beq.n	8022e08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8022da6:	d80f      	bhi.n	8022dc8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8022da8:	2a08      	cmp	r2, #8
 8022daa:	d044      	beq.n	8022e36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8022dac:	d805      	bhi.n	8022dba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8022dae:	2a04      	cmp	r2, #4
 8022db0:	d03f      	beq.n	8022e32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8022db2:	2a05      	cmp	r2, #5
 8022db4:	d1af      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022db6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8022db8:	e7d7      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022dba:	2a0a      	cmp	r2, #10
 8022dbc:	d03b      	beq.n	8022e36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8022dbe:	d301      	bcc.n	8022dc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8022dc0:	2a0b      	cmp	r2, #11
 8022dc2:	d1a8      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022dc4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8022dc6:	e7d0      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022dc8:	2a30      	cmp	r2, #48	; 0x30
 8022dca:	d036      	beq.n	8022e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8022dcc:	d808      	bhi.n	8022de0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8022dce:	2a2e      	cmp	r2, #46	; 0x2e
 8022dd0:	684b      	ldr	r3, [r1, #4]
 8022dd2:	d028      	beq.n	8022e26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8022dd4:	d90b      	bls.n	8022dee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8022dd6:	781b      	ldrb	r3, [r3, #0]
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	d19c      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022ddc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8022dde:	e7c4      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022de0:	2a32      	cmp	r2, #50	; 0x32
 8022de2:	d02a      	beq.n	8022e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8022de4:	d301      	bcc.n	8022dea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8022de6:	2a33      	cmp	r2, #51	; 0x33
 8022de8:	d195      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022dea:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8022dec:	e7bd      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022dee:	781b      	ldrb	r3, [r3, #0]
 8022df0:	2b01      	cmp	r3, #1
 8022df2:	d007      	beq.n	8022e04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8022df4:	d3f2      	bcc.n	8022ddc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8022df6:	2b02      	cmp	r3, #2
 8022df8:	d18d      	bne.n	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022dfa:	4b11      	ldr	r3, [pc, #68]	; (8022e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022dfc:	f240 31e1 	movw	r1, #993	; 0x3e1
 8022e00:	4a10      	ldr	r2, [pc, #64]	; (8022e44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8022e02:	e7ae      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8022e04:	6940      	ldr	r0, [r0, #20]
 8022e06:	e7b0      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e08:	684b      	ldr	r3, [r1, #4]
 8022e0a:	781b      	ldrb	r3, [r3, #0]
 8022e0c:	2b01      	cmp	r3, #1
 8022e0e:	d008      	beq.n	8022e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8022e10:	d30d      	bcc.n	8022e2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8022e12:	2b02      	cmp	r3, #2
 8022e14:	f47f af7f 	bne.w	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022e18:	4b09      	ldr	r3, [pc, #36]	; (8022e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022e1a:	f240 31ed 	movw	r1, #1005	; 0x3ed
 8022e1e:	4a09      	ldr	r2, [pc, #36]	; (8022e44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8022e20:	e79f      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8022e22:	68c0      	ldr	r0, [r0, #12]
 8022e24:	e7a1      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e26:	781b      	ldrb	r3, [r3, #0]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	f47f af74 	bne.w	8022d16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022e2e:	69c0      	ldr	r0, [r0, #28]
 8022e30:	e79b      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8022e34:	e799      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e36:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8022e38:	e797      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8022e3c:	e795      	b.n	8022d6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022e3e:	bf00      	nop
 8022e40:	0802ffeb 	.word	0x0802ffeb
 8022e44:	0803079f 	.word	0x0803079f
 8022e48:	08030037 	.word	0x08030037

08022e4c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8022e4c:	b508      	push	{r3, lr}
 8022e4e:	4b06      	ldr	r3, [pc, #24]	; (8022e68 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8022e50:	8818      	ldrh	r0, [r3, #0]
 8022e52:	b928      	cbnz	r0, 8022e60 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8022e54:	4b05      	ldr	r3, [pc, #20]	; (8022e6c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8022e56:	21d7      	movs	r1, #215	; 0xd7
 8022e58:	4a05      	ldr	r2, [pc, #20]	; (8022e70 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8022e5a:	4806      	ldr	r0, [pc, #24]	; (8022e74 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8022e5c:	f007 fec2 	bl	802abe4 <__assert_func>
 8022e60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e64:	b280      	uxth	r0, r0
 8022e66:	bd08      	pop	{r3, pc}
 8022e68:	2000bfe8 	.word	0x2000bfe8
 8022e6c:	08030286 	.word	0x08030286
 8022e70:	08030764 	.word	0x08030764
 8022e74:	080302c8 	.word	0x080302c8

08022e78 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e7c:	4616      	mov	r6, r2
 8022e7e:	b087      	sub	sp, #28
 8022e80:	461f      	mov	r7, r3
 8022e82:	b33b      	cbz	r3, 8022ed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022e84:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8022e88:	b323      	cbz	r3, 8022ed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022e8a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8022e8e:	b30b      	cbz	r3, 8022ed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022e90:	6808      	ldr	r0, [r1, #0]
 8022e92:	ab04      	add	r3, sp, #16
 8022e94:	6849      	ldr	r1, [r1, #4]
 8022e96:	4c5a      	ldr	r4, [pc, #360]	; (8023000 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8022e98:	c303      	stmia	r3!, {r0, r1}
 8022e9a:	a804      	add	r0, sp, #16
 8022e9c:	f7fb fd34 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ea0:	6820      	ldr	r0, [r4, #0]
 8022ea2:	6803      	ldr	r3, [r0, #0]
 8022ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ea6:	4798      	blx	r3
 8022ea8:	2fff      	cmp	r7, #255	; 0xff
 8022eaa:	4623      	mov	r3, r4
 8022eac:	d015      	beq.n	8022eda <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022eae:	f010 0f08 	tst.w	r0, #8
 8022eb2:	d015      	beq.n	8022ee0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8022eb4:	6818      	ldr	r0, [r3, #0]
 8022eb6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022eba:	6801      	ldr	r1, [r0, #0]
 8022ebc:	9401      	str	r4, [sp, #4]
 8022ebe:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022ec2:	9702      	str	r7, [sp, #8]
 8022ec4:	9400      	str	r4, [sp, #0]
 8022ec6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022eca:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8022ecc:	4631      	mov	r1, r6
 8022ece:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022ed2:	47a0      	blx	r4
 8022ed4:	b007      	add	sp, #28
 8022ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eda:	f010 0f02 	tst.w	r0, #2
 8022ede:	e7e8      	b.n	8022eb2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8022ee0:	6818      	ldr	r0, [r3, #0]
 8022ee2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8022ee6:	6803      	ldr	r3, [r0, #0]
 8022ee8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022eec:	6a1b      	ldr	r3, [r3, #32]
 8022eee:	4798      	blx	r3
 8022ef0:	4944      	ldr	r1, [pc, #272]	; (8023004 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8022ef2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022ef6:	2fff      	cmp	r7, #255	; 0xff
 8022ef8:	f8b1 c000 	ldrh.w	ip, [r1]
 8022efc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8022f00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022f04:	4688      	mov	r8, r1
 8022f06:	fb0c 2303 	mla	r3, ip, r3, r2
 8022f0a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8022f0e:	b2f2      	uxtb	r2, r6
 8022f10:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8022f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f18:	4418      	add	r0, r3
 8022f1a:	d112      	bne.n	8022f42 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 8022f1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022f20:	2100      	movs	r1, #0
 8022f22:	42a9      	cmp	r1, r5
 8022f24:	da66      	bge.n	8022ff4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8022f26:	4603      	mov	r3, r0
 8022f28:	2700      	movs	r7, #0
 8022f2a:	42a7      	cmp	r7, r4
 8022f2c:	f103 0303 	add.w	r3, r3, #3
 8022f30:	da57      	bge.n	8022fe2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8022f32:	f803 2c03 	strb.w	r2, [r3, #-3]
 8022f36:	3701      	adds	r7, #1
 8022f38:	f803 ec02 	strb.w	lr, [r3, #-2]
 8022f3c:	f803 cc01 	strb.w	ip, [r3, #-1]
 8022f40:	e7f3      	b.n	8022f2a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8022f42:	b2bb      	uxth	r3, r7
 8022f44:	f04f 0800 	mov.w	r8, #0
 8022f48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022f4c:	fb0c fc03 	mul.w	ip, ip, r3
 8022f50:	fb0e fe03 	mul.w	lr, lr, r3
 8022f54:	435a      	muls	r2, r3
 8022f56:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8022f5a:	460f      	mov	r7, r1
 8022f5c:	b29b      	uxth	r3, r3
 8022f5e:	45a8      	cmp	r8, r5
 8022f60:	da48      	bge.n	8022ff4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8022f62:	4601      	mov	r1, r0
 8022f64:	f04f 0a00 	mov.w	sl, #0
 8022f68:	45a2      	cmp	sl, r4
 8022f6a:	f101 0103 	add.w	r1, r1, #3
 8022f6e:	da2f      	bge.n	8022fd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8022f70:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8022f74:	f10a 0a01 	add.w	sl, sl, #1
 8022f78:	fb19 f903 	smulbb	r9, r9, r3
 8022f7c:	4491      	add	r9, r2
 8022f7e:	fa1f f989 	uxth.w	r9, r9
 8022f82:	f109 0b01 	add.w	fp, r9, #1
 8022f86:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022f8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022f8e:	f801 9c03 	strb.w	r9, [r1, #-3]
 8022f92:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8022f96:	fb19 f903 	smulbb	r9, r9, r3
 8022f9a:	44f1      	add	r9, lr
 8022f9c:	fa1f f989 	uxth.w	r9, r9
 8022fa0:	f109 0b01 	add.w	fp, r9, #1
 8022fa4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022fa8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022fac:	f801 9c02 	strb.w	r9, [r1, #-2]
 8022fb0:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8022fb4:	fb19 f903 	smulbb	r9, r9, r3
 8022fb8:	44e1      	add	r9, ip
 8022fba:	fa1f f989 	uxth.w	r9, r9
 8022fbe:	f109 0b01 	add.w	fp, r9, #1
 8022fc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022fc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022fca:	f801 9c01 	strb.w	r9, [r1, #-1]
 8022fce:	e7cb      	b.n	8022f68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8022fd0:	8839      	ldrh	r1, [r7, #0]
 8022fd2:	f108 0801 	add.w	r8, r8, #1
 8022fd6:	1b09      	subs	r1, r1, r4
 8022fd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022fdc:	4431      	add	r1, r6
 8022fde:	4408      	add	r0, r1
 8022fe0:	e7bd      	b.n	8022f5e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8022fe2:	f8b8 3000 	ldrh.w	r3, [r8]
 8022fe6:	3101      	adds	r1, #1
 8022fe8:	1b1b      	subs	r3, r3, r4
 8022fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022fee:	4433      	add	r3, r6
 8022ff0:	4418      	add	r0, r3
 8022ff2:	e796      	b.n	8022f22 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8022ff4:	4b02      	ldr	r3, [pc, #8]	; (8023000 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8022ff6:	6818      	ldr	r0, [r3, #0]
 8022ff8:	6803      	ldr	r3, [r0, #0]
 8022ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ffc:	4798      	blx	r3
 8022ffe:	e769      	b.n	8022ed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8023000:	2000bff0 	.word	0x2000bff0
 8023004:	2000bfe8 	.word	0x2000bfe8

08023008 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8023008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802300c:	b08d      	sub	sp, #52	; 0x34
 802300e:	460c      	mov	r4, r1
 8023010:	4617      	mov	r7, r2
 8023012:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8023016:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802301a:	2e00      	cmp	r6, #0
 802301c:	d04a      	beq.n	80230b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802301e:	6810      	ldr	r0, [r2, #0]
 8023020:	ad08      	add	r5, sp, #32
 8023022:	6851      	ldr	r1, [r2, #4]
 8023024:	c503      	stmia	r5!, {r0, r1}
 8023026:	6818      	ldr	r0, [r3, #0]
 8023028:	ad0a      	add	r5, sp, #40	; 0x28
 802302a:	6859      	ldr	r1, [r3, #4]
 802302c:	c503      	stmia	r5!, {r0, r1}
 802302e:	a808      	add	r0, sp, #32
 8023030:	f7fb fc6a 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023034:	4639      	mov	r1, r7
 8023036:	a80a      	add	r0, sp, #40	; 0x28
 8023038:	4f59      	ldr	r7, [pc, #356]	; (80231a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 802303a:	f7fb fc4d 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802303e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023042:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8023046:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802304a:	6838      	ldr	r0, [r7, #0]
 802304c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023050:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8023054:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8023058:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802305c:	440c      	add	r4, r1
 802305e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8023062:	440a      	add	r2, r1
 8023064:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8023068:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802306c:	4413      	add	r3, r2
 802306e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8023072:	6803      	ldr	r3, [r0, #0]
 8023074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023076:	4798      	blx	r3
 8023078:	2eff      	cmp	r6, #255	; 0xff
 802307a:	f000 8089 	beq.w	8023190 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 802307e:	0743      	lsls	r3, r0, #29
 8023080:	d405      	bmi.n	802308e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8023082:	f1b9 0f00 	cmp.w	r9, #0
 8023086:	d018      	beq.n	80230ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8023088:	f010 0f10 	tst.w	r0, #16
 802308c:	d015      	beq.n	80230ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802308e:	6838      	ldr	r0, [r7, #0]
 8023090:	b2ad      	uxth	r5, r5
 8023092:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8023096:	6801      	ldr	r1, [r0, #0]
 8023098:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802309c:	9500      	str	r5, [sp, #0]
 802309e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 80230a2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80230a6:	9602      	str	r6, [sp, #8]
 80230a8:	fa1f f688 	uxth.w	r6, r8
 80230ac:	9601      	str	r6, [sp, #4]
 80230ae:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80230b0:	4621      	mov	r1, r4
 80230b2:	47a8      	blx	r5
 80230b4:	b00d      	add	sp, #52	; 0x34
 80230b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ba:	6838      	ldr	r0, [r7, #0]
 80230bc:	6803      	ldr	r3, [r0, #0]
 80230be:	6a1b      	ldr	r3, [r3, #32]
 80230c0:	4798      	blx	r3
 80230c2:	4a38      	ldr	r2, [pc, #224]	; (80231a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 80230c4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80230c8:	2eff      	cmp	r6, #255	; 0xff
 80230ca:	8813      	ldrh	r3, [r2, #0]
 80230cc:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 80230d0:	fb0c 1303 	mla	r3, ip, r3, r1
 80230d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80230d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80230dc:	4418      	add	r0, r3
 80230de:	d032      	beq.n	8023146 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80230e0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 80230e4:	f04f 0c00 	mov.w	ip, #0
 80230e8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80230ec:	9306      	str	r3, [sp, #24]
 80230ee:	45c4      	cmp	ip, r8
 80230f0:	da49      	bge.n	8023186 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80230f2:	4686      	mov	lr, r0
 80230f4:	46a1      	mov	r9, r4
 80230f6:	eba9 0304 	sub.w	r3, r9, r4
 80230fa:	428b      	cmp	r3, r1
 80230fc:	da13      	bge.n	8023126 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 80230fe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8023102:	f89e b000 	ldrb.w	fp, [lr]
 8023106:	9307      	str	r3, [sp, #28]
 8023108:	9b06      	ldr	r3, [sp, #24]
 802310a:	fb1b fb03 	smulbb	fp, fp, r3
 802310e:	9b07      	ldr	r3, [sp, #28]
 8023110:	fb03 b306 	mla	r3, r3, r6, fp
 8023114:	b29b      	uxth	r3, r3
 8023116:	f103 0b01 	add.w	fp, r3, #1
 802311a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802311e:	121b      	asrs	r3, r3, #8
 8023120:	f80e 3b01 	strb.w	r3, [lr], #1
 8023124:	e7e7      	b.n	80230f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8023126:	8813      	ldrh	r3, [r2, #0]
 8023128:	f10c 0c01 	add.w	ip, ip, #1
 802312c:	1b5b      	subs	r3, r3, r5
 802312e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023132:	4453      	add	r3, sl
 8023134:	4418      	add	r0, r3
 8023136:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802313a:	1b5b      	subs	r3, r3, r5
 802313c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023140:	4453      	add	r3, sl
 8023142:	441c      	add	r4, r3
 8023144:	e7d3      	b.n	80230ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8023146:	2600      	movs	r6, #0
 8023148:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 802314c:	4546      	cmp	r6, r8
 802314e:	da1a      	bge.n	8023186 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8023150:	f100 3eff 	add.w	lr, r0, #4294967295
 8023154:	4623      	mov	r3, r4
 8023156:	eba3 0904 	sub.w	r9, r3, r4
 802315a:	4589      	cmp	r9, r1
 802315c:	da04      	bge.n	8023168 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 802315e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8023162:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8023166:	e7f6      	b.n	8023156 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8023168:	8813      	ldrh	r3, [r2, #0]
 802316a:	3601      	adds	r6, #1
 802316c:	1b5b      	subs	r3, r3, r5
 802316e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023172:	4463      	add	r3, ip
 8023174:	4418      	add	r0, r3
 8023176:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802317a:	1b5b      	subs	r3, r3, r5
 802317c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023180:	4463      	add	r3, ip
 8023182:	441c      	add	r4, r3
 8023184:	e7e2      	b.n	802314c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8023186:	6838      	ldr	r0, [r7, #0]
 8023188:	6803      	ldr	r3, [r0, #0]
 802318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802318c:	4798      	blx	r3
 802318e:	e791      	b.n	80230b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8023190:	f1b9 0f00 	cmp.w	r9, #0
 8023194:	f47f af78 	bne.w	8023088 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8023198:	f010 0f01 	tst.w	r0, #1
 802319c:	e776      	b.n	802308c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 802319e:	bf00      	nop
 80231a0:	2000bff0 	.word	0x2000bff0
 80231a4:	2000bfe8 	.word	0x2000bfe8

080231a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80231a8:	b510      	push	{r4, lr}
 80231aa:	4604      	mov	r4, r0
 80231ac:	2104      	movs	r1, #4
 80231ae:	f007 fcee 	bl	802ab8e <_ZdlPvj>
 80231b2:	4620      	mov	r0, r4
 80231b4:	bd10      	pop	{r4, pc}

080231b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80231b6:	b510      	push	{r4, lr}
 80231b8:	4604      	mov	r4, r0
 80231ba:	2104      	movs	r1, #4
 80231bc:	f007 fce7 	bl	802ab8e <_ZdlPvj>
 80231c0:	4620      	mov	r0, r4
 80231c2:	bd10      	pop	{r4, pc}

080231c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80231c4:	b510      	push	{r4, lr}
 80231c6:	4604      	mov	r4, r0
 80231c8:	2104      	movs	r1, #4
 80231ca:	f007 fce0 	bl	802ab8e <_ZdlPvj>
 80231ce:	4620      	mov	r0, r4
 80231d0:	bd10      	pop	{r4, pc}

080231d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80231d2:	b510      	push	{r4, lr}
 80231d4:	4604      	mov	r4, r0
 80231d6:	2104      	movs	r1, #4
 80231d8:	f007 fcd9 	bl	802ab8e <_ZdlPvj>
 80231dc:	4620      	mov	r0, r4
 80231de:	bd10      	pop	{r4, pc}

080231e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80231e0:	b510      	push	{r4, lr}
 80231e2:	4604      	mov	r4, r0
 80231e4:	2104      	movs	r1, #4
 80231e6:	f007 fcd2 	bl	802ab8e <_ZdlPvj>
 80231ea:	4620      	mov	r0, r4
 80231ec:	bd10      	pop	{r4, pc}

080231ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80231ee:	b510      	push	{r4, lr}
 80231f0:	4604      	mov	r4, r0
 80231f2:	2104      	movs	r1, #4
 80231f4:	f007 fccb 	bl	802ab8e <_ZdlPvj>
 80231f8:	4620      	mov	r0, r4
 80231fa:	bd10      	pop	{r4, pc}

080231fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80231fc:	b510      	push	{r4, lr}
 80231fe:	4604      	mov	r4, r0
 8023200:	2104      	movs	r1, #4
 8023202:	f007 fcc4 	bl	802ab8e <_ZdlPvj>
 8023206:	4620      	mov	r0, r4
 8023208:	bd10      	pop	{r4, pc}

0802320a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802320a:	b510      	push	{r4, lr}
 802320c:	4604      	mov	r4, r0
 802320e:	2104      	movs	r1, #4
 8023210:	f007 fcbd 	bl	802ab8e <_ZdlPvj>
 8023214:	4620      	mov	r0, r4
 8023216:	bd10      	pop	{r4, pc}

08023218 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023218:	b510      	push	{r4, lr}
 802321a:	4604      	mov	r4, r0
 802321c:	2104      	movs	r1, #4
 802321e:	f007 fcb6 	bl	802ab8e <_ZdlPvj>
 8023222:	4620      	mov	r0, r4
 8023224:	bd10      	pop	{r4, pc}

08023226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023226:	b510      	push	{r4, lr}
 8023228:	4604      	mov	r4, r0
 802322a:	2104      	movs	r1, #4
 802322c:	f007 fcaf 	bl	802ab8e <_ZdlPvj>
 8023230:	4620      	mov	r0, r4
 8023232:	bd10      	pop	{r4, pc}

08023234 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023234:	b510      	push	{r4, lr}
 8023236:	4604      	mov	r4, r0
 8023238:	2104      	movs	r1, #4
 802323a:	f007 fca8 	bl	802ab8e <_ZdlPvj>
 802323e:	4620      	mov	r0, r4
 8023240:	bd10      	pop	{r4, pc}

08023242 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023242:	b510      	push	{r4, lr}
 8023244:	4604      	mov	r4, r0
 8023246:	2104      	movs	r1, #4
 8023248:	f007 fca1 	bl	802ab8e <_ZdlPvj>
 802324c:	4620      	mov	r0, r4
 802324e:	bd10      	pop	{r4, pc}

08023250 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023250:	b510      	push	{r4, lr}
 8023252:	4604      	mov	r4, r0
 8023254:	2104      	movs	r1, #4
 8023256:	f007 fc9a 	bl	802ab8e <_ZdlPvj>
 802325a:	4620      	mov	r0, r4
 802325c:	bd10      	pop	{r4, pc}

0802325e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802325e:	b510      	push	{r4, lr}
 8023260:	4604      	mov	r4, r0
 8023262:	2104      	movs	r1, #4
 8023264:	f007 fc93 	bl	802ab8e <_ZdlPvj>
 8023268:	4620      	mov	r0, r4
 802326a:	bd10      	pop	{r4, pc}

0802326c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802326c:	b510      	push	{r4, lr}
 802326e:	4604      	mov	r4, r0
 8023270:	2104      	movs	r1, #4
 8023272:	f007 fc8c 	bl	802ab8e <_ZdlPvj>
 8023276:	4620      	mov	r0, r4
 8023278:	bd10      	pop	{r4, pc}

0802327a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802327a:	b510      	push	{r4, lr}
 802327c:	4604      	mov	r4, r0
 802327e:	2104      	movs	r1, #4
 8023280:	f007 fc85 	bl	802ab8e <_ZdlPvj>
 8023284:	4620      	mov	r0, r4
 8023286:	bd10      	pop	{r4, pc}

08023288 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8023288:	b510      	push	{r4, lr}
 802328a:	4604      	mov	r4, r0
 802328c:	2104      	movs	r1, #4
 802328e:	f007 fc7e 	bl	802ab8e <_ZdlPvj>
 8023292:	4620      	mov	r0, r4
 8023294:	bd10      	pop	{r4, pc}

08023296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8023296:	b510      	push	{r4, lr}
 8023298:	4604      	mov	r4, r0
 802329a:	2104      	movs	r1, #4
 802329c:	f007 fc77 	bl	802ab8e <_ZdlPvj>
 80232a0:	4620      	mov	r0, r4
 80232a2:	bd10      	pop	{r4, pc}

080232a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80232a4:	b510      	push	{r4, lr}
 80232a6:	4604      	mov	r4, r0
 80232a8:	2104      	movs	r1, #4
 80232aa:	f007 fc70 	bl	802ab8e <_ZdlPvj>
 80232ae:	4620      	mov	r0, r4
 80232b0:	bd10      	pop	{r4, pc}

080232b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80232b2:	b510      	push	{r4, lr}
 80232b4:	4604      	mov	r4, r0
 80232b6:	2104      	movs	r1, #4
 80232b8:	f007 fc69 	bl	802ab8e <_ZdlPvj>
 80232bc:	4620      	mov	r0, r4
 80232be:	bd10      	pop	{r4, pc}

080232c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80232c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c4:	4d9e      	ldr	r5, [pc, #632]	; (8023540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80232c6:	4690      	mov	r8, r2
 80232c8:	b08f      	sub	sp, #60	; 0x3c
 80232ca:	4604      	mov	r4, r0
 80232cc:	682a      	ldr	r2, [r5, #0]
 80232ce:	4689      	mov	r9, r1
 80232d0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80232d4:	2a02      	cmp	r2, #2
 80232d6:	d106      	bne.n	80232e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80232d8:	4b9a      	ldr	r3, [pc, #616]	; (8023544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80232da:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80232de:	4a9a      	ldr	r2, [pc, #616]	; (8023548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80232e0:	489a      	ldr	r0, [pc, #616]	; (802354c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 80232e2:	f007 fc7f 	bl	802abe4 <__assert_func>
 80232e6:	ae0e      	add	r6, sp, #56	; 0x38
 80232e8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80232ec:	4630      	mov	r0, r6
 80232ee:	f7fe f8b3 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80232f2:	6823      	ldr	r3, [r4, #0]
 80232f4:	4607      	mov	r7, r0
 80232f6:	4620      	mov	r0, r4
 80232f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232fa:	4798      	blx	r3
 80232fc:	4287      	cmp	r7, r0
 80232fe:	d004      	beq.n	802330a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8023300:	4b93      	ldr	r3, [pc, #588]	; (8023550 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8023302:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8023306:	4a90      	ldr	r2, [pc, #576]	; (8023548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8023308:	e7ea      	b.n	80232e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802330a:	4630      	mov	r0, r6
 802330c:	f7fe f820 	bl	8021350 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023310:	4607      	mov	r7, r0
 8023312:	b920      	cbnz	r0, 802331e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8023314:	4b8f      	ldr	r3, [pc, #572]	; (8023554 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8023316:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 802331a:	4a8b      	ldr	r2, [pc, #556]	; (8023548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 802331c:	e7e0      	b.n	80232e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802331e:	f8d8 0000 	ldr.w	r0, [r8]
 8023322:	ab06      	add	r3, sp, #24
 8023324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023328:	f9b8 a000 	ldrsh.w	sl, [r8]
 802332c:	c303      	stmia	r3!, {r0, r1}
 802332e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023332:	ab08      	add	r3, sp, #32
 8023334:	f8d9 0000 	ldr.w	r0, [r9]
 8023338:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 802333c:	c303      	stmia	r3!, {r0, r1}
 802333e:	4630      	mov	r0, r6
 8023340:	f7fd fefe 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023344:	4680      	mov	r8, r0
 8023346:	4630      	mov	r0, r6
 8023348:	4e83      	ldr	r6, [pc, #524]	; (8023558 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 802334a:	f7fd ff33 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802334e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8023352:	f10d 0920 	add.w	r9, sp, #32
 8023356:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802335a:	a806      	add	r0, sp, #24
 802335c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8023360:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8023364:	f7fb fad0 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023368:	4648      	mov	r0, r9
 802336a:	f7fb facd 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802336e:	a80a      	add	r0, sp, #40	; 0x28
 8023370:	f7fb faca 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023374:	4b79      	ldr	r3, [pc, #484]	; (802355c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8023376:	2100      	movs	r1, #0
 8023378:	f9b6 2000 	ldrsh.w	r2, [r6]
 802337c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023380:	4648      	mov	r0, r9
 8023382:	910c      	str	r1, [sp, #48]	; 0x30
 8023384:	a90c      	add	r1, sp, #48	; 0x30
 8023386:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802338a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802338e:	f7f8 f8ab 	bl	801b4e8 <_ZN8touchgfx4RectaNERKS0_>
 8023392:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8023396:	9602      	str	r6, [sp, #8]
 8023398:	f1bc 0f00 	cmp.w	ip, #0
 802339c:	f000 80a4 	beq.w	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80233a0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80233a4:	2e00      	cmp	r6, #0
 80233a6:	f000 809f 	beq.w	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80233aa:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80233ae:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80233b2:	4288      	cmp	r0, r1
 80233b4:	db36      	blt.n	8023424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80233b6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80233ba:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80233be:	429a      	cmp	r2, r3
 80233c0:	db30      	blt.n	8023424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80233c2:	4460      	add	r0, ip
 80233c4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80233c8:	4461      	add	r1, ip
 80233ca:	b200      	sxth	r0, r0
 80233cc:	b209      	sxth	r1, r1
 80233ce:	4288      	cmp	r0, r1
 80233d0:	dc28      	bgt.n	8023424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80233d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80233d6:	4432      	add	r2, r6
 80233d8:	440b      	add	r3, r1
 80233da:	b212      	sxth	r2, r2
 80233dc:	b21b      	sxth	r3, r3
 80233de:	429a      	cmp	r2, r3
 80233e0:	dc20      	bgt.n	8023424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80233e2:	6823      	ldr	r3, [r4, #0]
 80233e4:	4620      	mov	r0, r4
 80233e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233e8:	4798      	blx	r3
 80233ea:	4682      	mov	sl, r0
 80233ec:	6828      	ldr	r0, [r5, #0]
 80233ee:	6803      	ldr	r3, [r0, #0]
 80233f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233f2:	4798      	blx	r3
 80233f4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80233f8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80233fc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8023400:	9303      	str	r3, [sp, #12]
 8023402:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8023406:	1a9b      	subs	r3, r3, r2
 8023408:	b29b      	uxth	r3, r3
 802340a:	b21c      	sxth	r4, r3
 802340c:	2c00      	cmp	r4, #0
 802340e:	dc0e      	bgt.n	802342e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8023410:	b134      	cbz	r4, 8023420 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8023412:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023416:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802341a:	4413      	add	r3, r2
 802341c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8023420:	463c      	mov	r4, r7
 8023422:	e00b      	b.n	802343c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8023424:	4b4e      	ldr	r3, [pc, #312]	; (8023560 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8023426:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802342a:	4a47      	ldr	r2, [pc, #284]	; (8023548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 802342c:	e758      	b.n	80232e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802342e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023432:	ebab 0303 	sub.w	r3, fp, r3
 8023436:	443c      	add	r4, r7
 8023438:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 802343c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8023440:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8023444:	1a9b      	subs	r3, r3, r2
 8023446:	b29b      	uxth	r3, r3
 8023448:	b219      	sxth	r1, r3
 802344a:	2900      	cmp	r1, #0
 802344c:	dd50      	ble.n	80234f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 802344e:	9a03      	ldr	r2, [sp, #12]
 8023450:	fb02 4401 	mla	r4, r2, r1, r4
 8023454:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8023458:	1ad3      	subs	r3, r2, r3
 802345a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 802345e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8023462:	f1bc 0f00 	cmp.w	ip, #0
 8023466:	dd3f      	ble.n	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023468:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802346c:	2e00      	cmp	r6, #0
 802346e:	dd3b      	ble.n	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023470:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8023474:	2203      	movs	r2, #3
 8023476:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 802347a:	fb0a f801 	mul.w	r8, sl, r1
 802347e:	fb13 8802 	smlabb	r8, r3, r2, r8
 8023482:	9a02      	ldr	r2, [sp, #8]
 8023484:	4480      	add	r8, r0
 8023486:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 802348a:	8812      	ldrh	r2, [r2, #0]
 802348c:	4584      	cmp	ip, r0
 802348e:	eba2 0303 	sub.w	r3, r2, r3
 8023492:	bfa8      	it	ge
 8023494:	4684      	movge	ip, r0
 8023496:	459c      	cmp	ip, r3
 8023498:	bfa8      	it	ge
 802349a:	469c      	movge	ip, r3
 802349c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80234a0:	429e      	cmp	r6, r3
 80234a2:	bfa8      	it	ge
 80234a4:	461e      	movge	r6, r3
 80234a6:	4b2d      	ldr	r3, [pc, #180]	; (802355c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80234a8:	881b      	ldrh	r3, [r3, #0]
 80234aa:	1a59      	subs	r1, r3, r1
 80234ac:	4633      	mov	r3, r6
 80234ae:	428e      	cmp	r6, r1
 80234b0:	bfa8      	it	ge
 80234b2:	460b      	movge	r3, r1
 80234b4:	4562      	cmp	r2, ip
 80234b6:	9302      	str	r3, [sp, #8]
 80234b8:	d12d      	bne.n	8023516 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 80234ba:	455a      	cmp	r2, fp
 80234bc:	d12b      	bne.n	8023516 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 80234be:	6828      	ldr	r0, [r5, #0]
 80234c0:	6803      	ldr	r3, [r0, #0]
 80234c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234c4:	4798      	blx	r3
 80234c6:	07c3      	lsls	r3, r0, #31
 80234c8:	d51b      	bpl.n	8023502 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 80234ca:	6828      	ldr	r0, [r5, #0]
 80234cc:	9b02      	ldr	r3, [sp, #8]
 80234ce:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80234d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80234d6:	6803      	ldr	r3, [r0, #0]
 80234d8:	f8cd b000 	str.w	fp, [sp]
 80234dc:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80234de:	4623      	mov	r3, r4
 80234e0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80234e4:	47a8      	blx	r5
 80234e6:	4607      	mov	r7, r0
 80234e8:	4638      	mov	r0, r7
 80234ea:	b00f      	add	sp, #60	; 0x3c
 80234ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234f0:	bf1f      	itttt	ne
 80234f2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 80234f6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80234fa:	189b      	addne	r3, r3, r2
 80234fc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8023500:	e7ad      	b.n	802345e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8023502:	6828      	ldr	r0, [r5, #0]
 8023504:	4642      	mov	r2, r8
 8023506:	4621      	mov	r1, r4
 8023508:	6803      	ldr	r3, [r0, #0]
 802350a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 802350c:	9b02      	ldr	r3, [sp, #8]
 802350e:	fb03 f30a 	mul.w	r3, r3, sl
 8023512:	47a8      	blx	r5
 8023514:	e7e8      	b.n	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023516:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 802351a:	f04f 0900 	mov.w	r9, #0
 802351e:	9b02      	ldr	r3, [sp, #8]
 8023520:	454b      	cmp	r3, r9
 8023522:	dde1      	ble.n	80234e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023524:	6828      	ldr	r0, [r5, #0]
 8023526:	4642      	mov	r2, r8
 8023528:	4621      	mov	r1, r4
 802352a:	44d0      	add	r8, sl
 802352c:	6803      	ldr	r3, [r0, #0]
 802352e:	f109 0901 	add.w	r9, r9, #1
 8023532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023534:	461e      	mov	r6, r3
 8023536:	465b      	mov	r3, fp
 8023538:	47b0      	blx	r6
 802353a:	9b03      	ldr	r3, [sp, #12]
 802353c:	441c      	add	r4, r3
 802353e:	e7ee      	b.n	802351e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8023540:	2000bff0 	.word	0x2000bff0
 8023544:	08030069 	.word	0x08030069
 8023548:	08030849 	.word	0x08030849
 802354c:	08030037 	.word	0x08030037
 8023550:	0803011d 	.word	0x0803011d
 8023554:	08030172 	.word	0x08030172
 8023558:	2000bfe8 	.word	0x2000bfe8
 802355c:	2000bfea 	.word	0x2000bfea
 8023560:	080301b0 	.word	0x080301b0

08023564 <_ZN8touchgfx8LCD24bppC1Ev>:
 8023564:	4a0b      	ldr	r2, [pc, #44]	; (8023594 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8023566:	6002      	str	r2, [r0, #0]
 8023568:	2200      	movs	r2, #0
 802356a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802356e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8023572:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023576:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802357a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802357e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8023582:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023586:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802358a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802358e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8023592:	4770      	bx	lr
 8023594:	08030494 	.word	0x08030494

08023598 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802359c:	b093      	sub	sp, #76	; 0x4c
 802359e:	880c      	ldrh	r4, [r1, #0]
 80235a0:	4605      	mov	r5, r0
 80235a2:	460f      	mov	r7, r1
 80235a4:	4691      	mov	r9, r2
 80235a6:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80235aa:	b12c      	cbz	r4, 80235b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80235ac:	4b71      	ldr	r3, [pc, #452]	; (8023774 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80235ae:	2167      	movs	r1, #103	; 0x67
 80235b0:	4a71      	ldr	r2, [pc, #452]	; (8023778 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80235b2:	4872      	ldr	r0, [pc, #456]	; (802377c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80235b4:	f007 fb16 	bl	802abe4 <__assert_func>
 80235b8:	6810      	ldr	r0, [r2, #0]
 80235ba:	ae0e      	add	r6, sp, #56	; 0x38
 80235bc:	6851      	ldr	r1, [r2, #4]
 80235be:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8023784 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 80235c2:	c603      	stmia	r6!, {r0, r1}
 80235c4:	6818      	ldr	r0, [r3, #0]
 80235c6:	ae10      	add	r6, sp, #64	; 0x40
 80235c8:	6859      	ldr	r1, [r3, #4]
 80235ca:	c603      	stmia	r6!, {r0, r1}
 80235cc:	a80e      	add	r0, sp, #56	; 0x38
 80235ce:	f7fb f99b 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235d2:	4649      	mov	r1, r9
 80235d4:	a810      	add	r0, sp, #64	; 0x40
 80235d6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8023780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80235da:	f7fb f97d 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235de:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80235e2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80235e6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80235ea:	f8d9 0000 	ldr.w	r0, [r9]
 80235ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80235f2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 80235f6:	440d      	add	r5, r1
 80235f8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80235fc:	440a      	add	r2, r1
 80235fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023602:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023606:	4413      	add	r3, r2
 8023608:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802360c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8023610:	930b      	str	r3, [sp, #44]	; 0x2c
 8023612:	6803      	ldr	r3, [r0, #0]
 8023614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023618:	4798      	blx	r3
 802361a:	2801      	cmp	r0, #1
 802361c:	d11e      	bne.n	802365c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 802361e:	220b      	movs	r2, #11
 8023620:	9008      	str	r0, [sp, #32]
 8023622:	b2b6      	uxth	r6, r6
 8023624:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023628:	9207      	str	r2, [sp, #28]
 802362a:	4629      	mov	r1, r5
 802362c:	f8ba 2000 	ldrh.w	r2, [sl]
 8023630:	f8cd 8010 	str.w	r8, [sp, #16]
 8023634:	9601      	str	r6, [sp, #4]
 8023636:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802363a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802363e:	9203      	str	r2, [sp, #12]
 8023640:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023644:	9202      	str	r2, [sp, #8]
 8023646:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802364a:	9200      	str	r2, [sp, #0]
 802364c:	463a      	mov	r2, r7
 802364e:	f8d9 0000 	ldr.w	r0, [r9]
 8023652:	f7f8 fb97 	bl	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023656:	b013      	add	sp, #76	; 0x4c
 8023658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802365c:	f8d9 0000 	ldr.w	r0, [r9]
 8023660:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8023664:	6803      	ldr	r3, [r0, #0]
 8023666:	6a1b      	ldr	r3, [r3, #32]
 8023668:	4798      	blx	r3
 802366a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802366e:	f8ba 3000 	ldrh.w	r3, [sl]
 8023672:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023676:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802367a:	fb01 2303 	mla	r3, r1, r3, r2
 802367e:	4621      	mov	r1, r4
 8023680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023684:	4418      	add	r0, r3
 8023686:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 802368a:	930c      	str	r3, [sp, #48]	; 0x30
 802368c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802368e:	4299      	cmp	r1, r3
 8023690:	da6a      	bge.n	8023768 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023692:	1cc2      	adds	r2, r0, #3
 8023694:	46aa      	mov	sl, r5
 8023696:	ebaa 0305 	sub.w	r3, sl, r5
 802369a:	429e      	cmp	r6, r3
 802369c:	dd55      	ble.n	802374a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 802369e:	2404      	movs	r4, #4
 80236a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80236a4:	fb14 4303 	smlabb	r3, r4, r3, r4
 80236a8:	eb07 0e03 	add.w	lr, r7, r3
 80236ac:	f89e 4003 	ldrb.w	r4, [lr, #3]
 80236b0:	b184      	cbz	r4, 80236d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80236b2:	2cff      	cmp	r4, #255	; 0xff
 80236b4:	f817 b003 	ldrb.w	fp, [r7, r3]
 80236b8:	d10e      	bne.n	80236d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80236ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80236be:	d10b      	bne.n	80236d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80236c0:	f802 bc03 	strb.w	fp, [r2, #-3]
 80236c4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80236c8:	f802 3c02 	strb.w	r3, [r2, #-2]
 80236cc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80236d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80236d4:	3203      	adds	r2, #3
 80236d6:	e7de      	b.n	8023696 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 80236d8:	fb08 f404 	mul.w	r4, r8, r4
 80236dc:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80236e0:	1c63      	adds	r3, r4, #1
 80236e2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80236e6:	121b      	asrs	r3, r3, #8
 80236e8:	b29c      	uxth	r4, r3
 80236ea:	43db      	mvns	r3, r3
 80236ec:	fb1b fb04 	smulbb	fp, fp, r4
 80236f0:	b2db      	uxtb	r3, r3
 80236f2:	fb0c bc03 	mla	ip, ip, r3, fp
 80236f6:	fa1f fc8c 	uxth.w	ip, ip
 80236fa:	f10c 0b01 	add.w	fp, ip, #1
 80236fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023702:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8023706:	fb1b fb03 	smulbb	fp, fp, r3
 802370a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802370e:	f802 cc03 	strb.w	ip, [r2, #-3]
 8023712:	f89e c001 	ldrb.w	ip, [lr, #1]
 8023716:	fb0c bc04 	mla	ip, ip, r4, fp
 802371a:	fa1f fc8c 	uxth.w	ip, ip
 802371e:	f10c 0b01 	add.w	fp, ip, #1
 8023722:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023726:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802372a:	f802 cc02 	strb.w	ip, [r2, #-2]
 802372e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8023732:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023736:	fb1c f303 	smulbb	r3, ip, r3
 802373a:	fb0e 3304 	mla	r3, lr, r4, r3
 802373e:	b29b      	uxth	r3, r3
 8023740:	1c5c      	adds	r4, r3, #1
 8023742:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023746:	121b      	asrs	r3, r3, #8
 8023748:	e7c2      	b.n	80236d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 802374a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802374c:	3101      	adds	r1, #1
 802374e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023750:	881b      	ldrh	r3, [r3, #0]
 8023752:	1b9b      	subs	r3, r3, r6
 8023754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023758:	4413      	add	r3, r2
 802375a:	4418      	add	r0, r3
 802375c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8023760:	1b9b      	subs	r3, r3, r6
 8023762:	444b      	add	r3, r9
 8023764:	441d      	add	r5, r3
 8023766:	e791      	b.n	802368c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8023768:	4b05      	ldr	r3, [pc, #20]	; (8023780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 802376a:	6818      	ldr	r0, [r3, #0]
 802376c:	6803      	ldr	r3, [r0, #0]
 802376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023770:	4798      	blx	r3
 8023772:	e770      	b.n	8023656 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8023774:	0802ff9b 	.word	0x0802ff9b
 8023778:	0803066b 	.word	0x0803066b
 802377c:	08030037 	.word	0x08030037
 8023780:	2000bff0 	.word	0x2000bff0
 8023784:	2000bfe8 	.word	0x2000bfe8

08023788 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802378c:	4614      	mov	r4, r2
 802378e:	880a      	ldrh	r2, [r1, #0]
 8023790:	b091      	sub	sp, #68	; 0x44
 8023792:	4680      	mov	r8, r0
 8023794:	2a01      	cmp	r2, #1
 8023796:	460e      	mov	r6, r1
 8023798:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 802379c:	d005      	beq.n	80237aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 802379e:	4b6d      	ldr	r3, [pc, #436]	; (8023954 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80237a0:	21b5      	movs	r1, #181	; 0xb5
 80237a2:	4a6d      	ldr	r2, [pc, #436]	; (8023958 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 80237a4:	486d      	ldr	r0, [pc, #436]	; (802395c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80237a6:	f007 fa1d 	bl	802abe4 <__assert_func>
 80237aa:	6820      	ldr	r0, [r4, #0]
 80237ac:	ad0c      	add	r5, sp, #48	; 0x30
 80237ae:	6861      	ldr	r1, [r4, #4]
 80237b0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8023960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 80237b4:	c503      	stmia	r5!, {r0, r1}
 80237b6:	6818      	ldr	r0, [r3, #0]
 80237b8:	ad0e      	add	r5, sp, #56	; 0x38
 80237ba:	6859      	ldr	r1, [r3, #4]
 80237bc:	c503      	stmia	r5!, {r0, r1}
 80237be:	a80c      	add	r0, sp, #48	; 0x30
 80237c0:	f7fb f8a2 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80237c4:	4621      	mov	r1, r4
 80237c6:	a80e      	add	r0, sp, #56	; 0x38
 80237c8:	f7fb f886 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80237cc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80237d0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80237d4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80237d8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80237dc:	fb11 2103 	smlabb	r1, r1, r3, r2
 80237e0:	eb08 0401 	add.w	r4, r8, r1
 80237e4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80237e8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8023964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 80237ec:	440a      	add	r2, r1
 80237ee:	f8d8 0000 	ldr.w	r0, [r8]
 80237f2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80237f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80237fa:	4413      	add	r3, r2
 80237fc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023800:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8023804:	930a      	str	r3, [sp, #40]	; 0x28
 8023806:	6803      	ldr	r3, [r0, #0]
 8023808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802380c:	4798      	blx	r3
 802380e:	2801      	cmp	r0, #1
 8023810:	d11e      	bne.n	8023850 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8023812:	220b      	movs	r2, #11
 8023814:	9008      	str	r0, [sp, #32]
 8023816:	b2ad      	uxth	r5, r5
 8023818:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802381c:	9207      	str	r2, [sp, #28]
 802381e:	4621      	mov	r1, r4
 8023820:	f8b9 2000 	ldrh.w	r2, [r9]
 8023824:	9501      	str	r5, [sp, #4]
 8023826:	9206      	str	r2, [sp, #24]
 8023828:	2200      	movs	r2, #0
 802382a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 802382e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023832:	9203      	str	r2, [sp, #12]
 8023834:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023838:	9202      	str	r2, [sp, #8]
 802383a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802383e:	9200      	str	r2, [sp, #0]
 8023840:	4632      	mov	r2, r6
 8023842:	f8d8 0000 	ldr.w	r0, [r8]
 8023846:	f7f8 fa9d 	bl	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802384a:	b011      	add	sp, #68	; 0x44
 802384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023850:	f8d8 0000 	ldr.w	r0, [r8]
 8023854:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8023858:	6803      	ldr	r3, [r0, #0]
 802385a:	6a1b      	ldr	r3, [r3, #32]
 802385c:	4798      	blx	r3
 802385e:	f8b9 3000 	ldrh.w	r3, [r9]
 8023862:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8023866:	f04f 0e00 	mov.w	lr, #0
 802386a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802386e:	fa1f f987 	uxth.w	r9, r7
 8023872:	fb01 2303 	mla	r3, r1, r3, r2
 8023876:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 802387a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802387e:	b289      	uxth	r1, r1
 8023880:	4418      	add	r0, r3
 8023882:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023886:	930b      	str	r3, [sp, #44]	; 0x2c
 8023888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802388a:	459e      	cmp	lr, r3
 802388c:	da5c      	bge.n	8023948 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 802388e:	1cc3      	adds	r3, r0, #3
 8023890:	46a2      	mov	sl, r4
 8023892:	ebaa 0204 	sub.w	r2, sl, r4
 8023896:	4295      	cmp	r5, r2
 8023898:	dd46      	ble.n	8023928 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 802389a:	f04f 0c03 	mov.w	ip, #3
 802389e:	f04f 0b04 	mov.w	fp, #4
 80238a2:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80238a6:	2fff      	cmp	r7, #255	; 0xff
 80238a8:	fb1c b202 	smlabb	r2, ip, r2, fp
 80238ac:	eb06 0c02 	add.w	ip, r6, r2
 80238b0:	f816 b002 	ldrb.w	fp, [r6, r2]
 80238b4:	d02f      	beq.n	8023916 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 80238b6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80238ba:	fb12 f201 	smulbb	r2, r2, r1
 80238be:	fb0b 2209 	mla	r2, fp, r9, r2
 80238c2:	b292      	uxth	r2, r2
 80238c4:	f102 0b01 	add.w	fp, r2, #1
 80238c8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80238cc:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80238d0:	fb1b fb01 	smulbb	fp, fp, r1
 80238d4:	1212      	asrs	r2, r2, #8
 80238d6:	f803 2c03 	strb.w	r2, [r3, #-3]
 80238da:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80238de:	fb02 b209 	mla	r2, r2, r9, fp
 80238e2:	b292      	uxth	r2, r2
 80238e4:	f102 0b01 	add.w	fp, r2, #1
 80238e8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80238ec:	1212      	asrs	r2, r2, #8
 80238ee:	f803 2c02 	strb.w	r2, [r3, #-2]
 80238f2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80238f6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80238fa:	fb1c fc01 	smulbb	ip, ip, r1
 80238fe:	fb02 c209 	mla	r2, r2, r9, ip
 8023902:	b292      	uxth	r2, r2
 8023904:	f102 0c01 	add.w	ip, r2, #1
 8023908:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802390c:	1212      	asrs	r2, r2, #8
 802390e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8023912:	3303      	adds	r3, #3
 8023914:	e7bd      	b.n	8023892 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8023916:	f803 bc03 	strb.w	fp, [r3, #-3]
 802391a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802391e:	f803 2c02 	strb.w	r2, [r3, #-2]
 8023922:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8023926:	e7f2      	b.n	802390e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8023928:	4b0d      	ldr	r3, [pc, #52]	; (8023960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 802392a:	f10e 0e01 	add.w	lr, lr, #1
 802392e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023930:	881b      	ldrh	r3, [r3, #0]
 8023932:	1b5b      	subs	r3, r3, r5
 8023934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023938:	4413      	add	r3, r2
 802393a:	4418      	add	r0, r3
 802393c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023940:	1b5b      	subs	r3, r3, r5
 8023942:	4443      	add	r3, r8
 8023944:	441c      	add	r4, r3
 8023946:	e79f      	b.n	8023888 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8023948:	4b06      	ldr	r3, [pc, #24]	; (8023964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802394a:	6818      	ldr	r0, [r3, #0]
 802394c:	6803      	ldr	r3, [r0, #0]
 802394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023950:	4798      	blx	r3
 8023952:	e77a      	b.n	802384a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8023954:	0802fea7 	.word	0x0802fea7
 8023958:	0803055e 	.word	0x0803055e
 802395c:	08030037 	.word	0x08030037
 8023960:	2000bfe8 	.word	0x2000bfe8
 8023964:	2000bff0 	.word	0x2000bff0

08023968 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023968:	b570      	push	{r4, r5, r6, lr}
 802396a:	780d      	ldrb	r5, [r1, #0]
 802396c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8023970:	2d01      	cmp	r5, #1
 8023972:	d00d      	beq.n	8023990 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8023974:	d307      	bcc.n	8023986 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8023976:	2d02      	cmp	r5, #2
 8023978:	d10f      	bne.n	802399a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802397a:	4b08      	ldr	r3, [pc, #32]	; (802399c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 802397c:	215a      	movs	r1, #90	; 0x5a
 802397e:	4a08      	ldr	r2, [pc, #32]	; (80239a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8023980:	4808      	ldr	r0, [pc, #32]	; (80239a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8023982:	f007 f92f 	bl	802abe4 <__assert_func>
 8023986:	9404      	str	r4, [sp, #16]
 8023988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802398c:	f7ff be04 	b.w	8023598 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023990:	9404      	str	r4, [sp, #16]
 8023992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023996:	f7ff bef7 	b.w	8023788 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802399a:	bd70      	pop	{r4, r5, r6, pc}
 802399c:	0802fe5c 	.word	0x0802fe5c
 80239a0:	080304dc 	.word	0x080304dc
 80239a4:	08030037 	.word	0x08030037

080239a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80239a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239ac:	b08b      	sub	sp, #44	; 0x2c
 80239ae:	460c      	mov	r4, r1
 80239b0:	4680      	mov	r8, r0
 80239b2:	469a      	mov	sl, r3
 80239b4:	6808      	ldr	r0, [r1, #0]
 80239b6:	ab06      	add	r3, sp, #24
 80239b8:	6849      	ldr	r1, [r1, #4]
 80239ba:	c303      	stmia	r3!, {r0, r1}
 80239bc:	6810      	ldr	r0, [r2, #0]
 80239be:	ab08      	add	r3, sp, #32
 80239c0:	6851      	ldr	r1, [r2, #4]
 80239c2:	c303      	stmia	r3!, {r0, r1}
 80239c4:	a806      	add	r0, sp, #24
 80239c6:	f7fa ff9f 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239ca:	4621      	mov	r1, r4
 80239cc:	a808      	add	r0, sp, #32
 80239ce:	4c61      	ldr	r4, [pc, #388]	; (8023b54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80239d0:	f7fa ff82 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239d4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80239d8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80239dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80239e0:	6820      	ldr	r0, [r4, #0]
 80239e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80239e6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80239ea:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80239ee:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80239f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80239f6:	440a      	add	r2, r1
 80239f8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80239fc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8023a00:	4413      	add	r3, r2
 8023a02:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8023a06:	6803      	ldr	r3, [r0, #0]
 8023a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a0a:	4798      	blx	r3
 8023a0c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a10:	d118      	bne.n	8023a44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8023a12:	f010 0f20 	tst.w	r0, #32
 8023a16:	6820      	ldr	r0, [r4, #0]
 8023a18:	d017      	beq.n	8023a4a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8023a1a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8023a1e:	b2bf      	uxth	r7, r7
 8023a20:	6801      	ldr	r1, [r0, #0]
 8023a22:	9402      	str	r4, [sp, #8]
 8023a24:	fa1f f489 	uxth.w	r4, r9
 8023a28:	f8cd a00c 	str.w	sl, [sp, #12]
 8023a2c:	9401      	str	r4, [sp, #4]
 8023a2e:	9700      	str	r7, [sp, #0]
 8023a30:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8023a34:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8023a36:	4641      	mov	r1, r8
 8023a38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023a3c:	47a0      	blx	r4
 8023a3e:	b00b      	add	sp, #44	; 0x2c
 8023a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023a48:	e7e5      	b.n	8023a16 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8023a4a:	6803      	ldr	r3, [r0, #0]
 8023a4c:	6a1b      	ldr	r3, [r3, #32]
 8023a4e:	4798      	blx	r3
 8023a50:	4b41      	ldr	r3, [pc, #260]	; (8023b58 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8023a52:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023a56:	f04f 0c00 	mov.w	ip, #0
 8023a5a:	881a      	ldrh	r2, [r3, #0]
 8023a5c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8023a60:	fb04 1202 	mla	r2, r4, r2, r1
 8023a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a68:	4410      	add	r0, r2
 8023a6a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8023a6e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8023a72:	0092      	lsls	r2, r2, #2
 8023a74:	9105      	str	r1, [sp, #20]
 8023a76:	9204      	str	r2, [sp, #16]
 8023a78:	45cc      	cmp	ip, r9
 8023a7a:	da65      	bge.n	8023b48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8023a7c:	1cc4      	adds	r4, r0, #3
 8023a7e:	f108 0504 	add.w	r5, r8, #4
 8023a82:	f04f 0e00 	mov.w	lr, #0
 8023a86:	45be      	cmp	lr, r7
 8023a88:	da4d      	bge.n	8023b26 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8023a8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023a8e:	b181      	cbz	r1, 8023ab2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8023a90:	29ff      	cmp	r1, #255	; 0xff
 8023a92:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8023a96:	d111      	bne.n	8023abc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8023a98:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a9c:	d10e      	bne.n	8023abc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8023a9e:	f804 bc03 	strb.w	fp, [r4, #-3]
 8023aa2:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8023aa6:	f804 2c02 	strb.w	r2, [r4, #-2]
 8023aaa:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8023aae:	f804 2c01 	strb.w	r2, [r4, #-1]
 8023ab2:	f10e 0e01 	add.w	lr, lr, #1
 8023ab6:	3403      	adds	r4, #3
 8023ab8:	3504      	adds	r5, #4
 8023aba:	e7e4      	b.n	8023a86 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8023abc:	fb0a f101 	mul.w	r1, sl, r1
 8023ac0:	1c4a      	adds	r2, r1, #1
 8023ac2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023ac6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023aca:	1212      	asrs	r2, r2, #8
 8023acc:	b296      	uxth	r6, r2
 8023ace:	43d2      	mvns	r2, r2
 8023ad0:	fb1b fb06 	smulbb	fp, fp, r6
 8023ad4:	b2d2      	uxtb	r2, r2
 8023ad6:	fb01 b102 	mla	r1, r1, r2, fp
 8023ada:	b289      	uxth	r1, r1
 8023adc:	f101 0b01 	add.w	fp, r1, #1
 8023ae0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023ae4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8023ae8:	fb1b fb02 	smulbb	fp, fp, r2
 8023aec:	1209      	asrs	r1, r1, #8
 8023aee:	f804 1c03 	strb.w	r1, [r4, #-3]
 8023af2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8023af6:	fb01 b106 	mla	r1, r1, r6, fp
 8023afa:	b289      	uxth	r1, r1
 8023afc:	f101 0b01 	add.w	fp, r1, #1
 8023b00:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023b04:	1209      	asrs	r1, r1, #8
 8023b06:	f804 1c02 	strb.w	r1, [r4, #-2]
 8023b0a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023b0e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8023b12:	fb11 f202 	smulbb	r2, r1, r2
 8023b16:	fb0b 2206 	mla	r2, fp, r6, r2
 8023b1a:	b292      	uxth	r2, r2
 8023b1c:	1c56      	adds	r6, r2, #1
 8023b1e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8023b22:	1212      	asrs	r2, r2, #8
 8023b24:	e7c3      	b.n	8023aae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8023b26:	881a      	ldrh	r2, [r3, #0]
 8023b28:	f10c 0c01 	add.w	ip, ip, #1
 8023b2c:	9905      	ldr	r1, [sp, #20]
 8023b2e:	1bd2      	subs	r2, r2, r7
 8023b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b34:	440a      	add	r2, r1
 8023b36:	9904      	ldr	r1, [sp, #16]
 8023b38:	4410      	add	r0, r2
 8023b3a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023b3e:	1bd2      	subs	r2, r2, r7
 8023b40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8023b44:	4490      	add	r8, r2
 8023b46:	e797      	b.n	8023a78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8023b48:	4b02      	ldr	r3, [pc, #8]	; (8023b54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8023b4a:	6818      	ldr	r0, [r3, #0]
 8023b4c:	6803      	ldr	r3, [r0, #0]
 8023b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b50:	4798      	blx	r3
 8023b52:	e774      	b.n	8023a3e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8023b54:	2000bff0 	.word	0x2000bff0
 8023b58:	2000bfe8 	.word	0x2000bfe8

08023b5c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023b60:	b085      	sub	sp, #20
 8023b62:	4606      	mov	r6, r0
 8023b64:	460c      	mov	r4, r1
 8023b66:	4691      	mov	r9, r2
 8023b68:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8023b6c:	4698      	mov	r8, r3
 8023b6e:	b385      	cbz	r5, 8023bd2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8023b70:	4608      	mov	r0, r1
 8023b72:	f7fd fae5 	bl	8021140 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023b76:	4607      	mov	r7, r0
 8023b78:	4620      	mov	r0, r4
 8023b7a:	f7fd fb1b 	bl	80211b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023b7e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023b82:	4620      	mov	r0, r4
 8023b84:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023b88:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023b8c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8023b90:	f7fd fc62 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023b94:	2801      	cmp	r0, #1
 8023b96:	d00f      	beq.n	8023bb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f7fd fc5d 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023b9e:	2802      	cmp	r0, #2
 8023ba0:	d00a      	beq.n	8023bb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023ba2:	4620      	mov	r0, r4
 8023ba4:	f7fd fc58 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023ba8:	280b      	cmp	r0, #11
 8023baa:	d005      	beq.n	8023bb8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023bac:	4b1b      	ldr	r3, [pc, #108]	; (8023c1c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8023bae:	2142      	movs	r1, #66	; 0x42
 8023bb0:	4a1b      	ldr	r2, [pc, #108]	; (8023c20 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8023bb2:	481c      	ldr	r0, [pc, #112]	; (8023c24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8023bb4:	f007 f816 	bl	802abe4 <__assert_func>
 8023bb8:	4620      	mov	r0, r4
 8023bba:	f7fd fc4d 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023bbe:	2802      	cmp	r0, #2
 8023bc0:	4620      	mov	r0, r4
 8023bc2:	d109      	bne.n	8023bd8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8023bc4:	f7fd fbc4 	bl	8021350 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023bc8:	462b      	mov	r3, r5
 8023bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023bcc:	a902      	add	r1, sp, #8
 8023bce:	f7ff feeb 	bl	80239a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023bd2:	b005      	add	sp, #20
 8023bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023bd8:	f7fd fc3e 	bl	8021458 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023bdc:	280b      	cmp	r0, #11
 8023bde:	d10e      	bne.n	8023bfe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8023be0:	4620      	mov	r0, r4
 8023be2:	f7fd fbb5 	bl	8021350 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023be6:	4606      	mov	r6, r0
 8023be8:	4620      	mov	r0, r4
 8023bea:	f7fd fbe3 	bl	80213b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023bee:	9500      	str	r5, [sp, #0]
 8023bf0:	4601      	mov	r1, r0
 8023bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bf4:	aa02      	add	r2, sp, #8
 8023bf6:	4630      	mov	r0, r6
 8023bf8:	f7ff feb6 	bl	8023968 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023bfc:	e7e9      	b.n	8023bd2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8023bfe:	6833      	ldr	r3, [r6, #0]
 8023c00:	4620      	mov	r0, r4
 8023c02:	691f      	ldr	r7, [r3, #16]
 8023c04:	f7fd fba4 	bl	8021350 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023c08:	2300      	movs	r3, #0
 8023c0a:	4601      	mov	r1, r0
 8023c0c:	aa02      	add	r2, sp, #8
 8023c0e:	4630      	mov	r0, r6
 8023c10:	e9cd 5300 	strd	r5, r3, [sp]
 8023c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c16:	47b8      	blx	r7
 8023c18:	e7db      	b.n	8023bd2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8023c1a:	bf00      	nop
 8023c1c:	0802fef5 	.word	0x0802fef5
 8023c20:	080305e7 	.word	0x080305e7
 8023c24:	08030037 	.word	0x08030037

08023c28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023c28:	b570      	push	{r4, r5, r6, lr}
 8023c2a:	9d04      	ldr	r5, [sp, #16]
 8023c2c:	460c      	mov	r4, r1
 8023c2e:	4619      	mov	r1, r3
 8023c30:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8023c34:	2a0c      	cmp	r2, #12
 8023c36:	d826      	bhi.n	8023c86 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8023c38:	e8df f002 	tbb	[pc, r2]
 8023c3c:	200e1407 	.word	0x200e1407
 8023c40:	20202020 	.word	0x20202020
 8023c44:	20202020 	.word	0x20202020
 8023c48:	20          	.byte	0x20
 8023c49:	00          	.byte	0x00
 8023c4a:	4b0f      	ldr	r3, [pc, #60]	; (8023c88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8023c4c:	f240 117f 	movw	r1, #383	; 0x17f
 8023c50:	4a0e      	ldr	r2, [pc, #56]	; (8023c8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8023c52:	480f      	ldr	r0, [pc, #60]	; (8023c90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8023c54:	f006 ffc6 	bl	802abe4 <__assert_func>
 8023c58:	462a      	mov	r2, r5
 8023c5a:	4620      	mov	r0, r4
 8023c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023c60:	f7ff bea2 	b.w	80239a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c64:	6802      	ldr	r2, [r0, #0]
 8023c66:	2600      	movs	r6, #0
 8023c68:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023c6c:	6916      	ldr	r6, [r2, #16]
 8023c6e:	462b      	mov	r3, r5
 8023c70:	460a      	mov	r2, r1
 8023c72:	4621      	mov	r1, r4
 8023c74:	46b4      	mov	ip, r6
 8023c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023c7a:	4760      	bx	ip
 8023c7c:	4b05      	ldr	r3, [pc, #20]	; (8023c94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8023c7e:	f240 1191 	movw	r1, #401	; 0x191
 8023c82:	4a02      	ldr	r2, [pc, #8]	; (8023c8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8023c84:	e7e5      	b.n	8023c52 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8023c86:	bd70      	pop	{r4, r5, r6, pc}
 8023c88:	08030210 	.word	0x08030210
 8023c8c:	080308cf 	.word	0x080308cf
 8023c90:	08030037 	.word	0x08030037
 8023c94:	08030251 	.word	0x08030251

08023c98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8023c98:	b158      	cbz	r0, 8023cb2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023c9a:	2902      	cmp	r1, #2
 8023c9c:	d00f      	beq.n	8023cbe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023c9e:	2903      	cmp	r1, #3
 8023ca0:	d010      	beq.n	8023cc4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8023ca2:	2901      	cmp	r1, #1
 8023ca4:	d101      	bne.n	8023caa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ca6:	2001      	movs	r0, #1
 8023ca8:	4770      	bx	lr
 8023caa:	4b08      	ldr	r3, [pc, #32]	; (8023ccc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8023cac:	8819      	ldrh	r1, [r3, #0]
 8023cae:	4248      	negs	r0, r1
 8023cb0:	4770      	bx	lr
 8023cb2:	2902      	cmp	r1, #2
 8023cb4:	d006      	beq.n	8023cc4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8023cb6:	2903      	cmp	r1, #3
 8023cb8:	d0f7      	beq.n	8023caa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023cba:	2901      	cmp	r1, #1
 8023cbc:	d1f3      	bne.n	8023ca6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8023cbe:	4b03      	ldr	r3, [pc, #12]	; (8023ccc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8023cc0:	8818      	ldrh	r0, [r3, #0]
 8023cc2:	4770      	bx	lr
 8023cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8023cc8:	4770      	bx	lr
 8023cca:	bf00      	nop
 8023ccc:	2000bfe8 	.word	0x2000bfe8

08023cd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8023cd0:	b170      	cbz	r0, 8023cf0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8023cd2:	2902      	cmp	r1, #2
 8023cd4:	d012      	beq.n	8023cfc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8023cd6:	2903      	cmp	r1, #3
 8023cd8:	d006      	beq.n	8023ce8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8023cda:	2901      	cmp	r1, #1
 8023cdc:	d001      	beq.n	8023ce2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8023cde:	2001      	movs	r0, #1
 8023ce0:	4770      	bx	lr
 8023ce2:	4b08      	ldr	r3, [pc, #32]	; (8023d04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8023ce4:	8818      	ldrh	r0, [r3, #0]
 8023ce6:	4770      	bx	lr
 8023ce8:	4b06      	ldr	r3, [pc, #24]	; (8023d04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8023cea:	8818      	ldrh	r0, [r3, #0]
 8023cec:	4240      	negs	r0, r0
 8023cee:	4770      	bx	lr
 8023cf0:	2902      	cmp	r1, #2
 8023cf2:	d0f9      	beq.n	8023ce8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8023cf4:	2903      	cmp	r1, #3
 8023cf6:	d0f2      	beq.n	8023cde <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8023cf8:	2901      	cmp	r1, #1
 8023cfa:	d1f2      	bne.n	8023ce2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8023cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8023d00:	4770      	bx	lr
 8023d02:	bf00      	nop
 8023d04:	2000bfe8 	.word	0x2000bfe8

08023d08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d0c:	b095      	sub	sp, #84	; 0x54
 8023d0e:	9109      	str	r1, [sp, #36]	; 0x24
 8023d10:	a910      	add	r1, sp, #64	; 0x40
 8023d12:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 8023d16:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 8023d1a:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8023d1e:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8023d22:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 8023d26:	e881 000c 	stmia.w	r1, {r2, r3}
 8023d2a:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8023d2e:	9306      	str	r3, [sp, #24]
 8023d30:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8023d34:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8023d38:	930e      	str	r3, [sp, #56]	; 0x38
 8023d3a:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8023d3e:	798f      	ldrb	r7, [r1, #6]
 8023d40:	930a      	str	r3, [sp, #40]	; 0x28
 8023d42:	7b4b      	ldrb	r3, [r1, #13]
 8023d44:	0158      	lsls	r0, r3, #5
 8023d46:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8023d4a:	4338      	orrs	r0, r7
 8023d4c:	9008      	str	r0, [sp, #32]
 8023d4e:	f000 8174 	beq.w	802403a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023d52:	011b      	lsls	r3, r3, #4
 8023d54:	79c8      	ldrb	r0, [r1, #7]
 8023d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023d5a:	4303      	orrs	r3, r0
 8023d5c:	9307      	str	r3, [sp, #28]
 8023d5e:	f000 816c 	beq.w	802403a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023d62:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023d66:	b29b      	uxth	r3, r3
 8023d68:	2e00      	cmp	r6, #0
 8023d6a:	f000 8112 	beq.w	8023f92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8023d6e:	1af6      	subs	r6, r6, r3
 8023d70:	b2b6      	uxth	r6, r6
 8023d72:	0433      	lsls	r3, r6, #16
 8023d74:	d502      	bpl.n	8023d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023d76:	1bad      	subs	r5, r5, r6
 8023d78:	2600      	movs	r6, #0
 8023d7a:	b22d      	sxth	r5, r5
 8023d7c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023d80:	a810      	add	r0, sp, #64	; 0x40
 8023d82:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023d86:	428d      	cmp	r5, r1
 8023d88:	b28b      	uxth	r3, r1
 8023d8a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8023d8e:	bfbf      	itttt	lt
 8023d90:	18f6      	addlt	r6, r6, r3
 8023d92:	1b75      	sublt	r5, r6, r5
 8023d94:	b2ae      	uxthlt	r6, r5
 8023d96:	460d      	movlt	r5, r1
 8023d98:	8891      	ldrh	r1, [r2, #4]
 8023d9a:	440b      	add	r3, r1
 8023d9c:	4629      	mov	r1, r5
 8023d9e:	b21b      	sxth	r3, r3
 8023da0:	930d      	str	r3, [sp, #52]	; 0x34
 8023da2:	88d3      	ldrh	r3, [r2, #6]
 8023da4:	9a06      	ldr	r2, [sp, #24]
 8023da6:	449a      	add	sl, r3
 8023da8:	fa0f f38a 	sxth.w	r3, sl
 8023dac:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8023db0:	930c      	str	r3, [sp, #48]	; 0x30
 8023db2:	4bb8      	ldr	r3, [pc, #736]	; (8024094 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8023db4:	f893 b000 	ldrb.w	fp, [r3]
 8023db8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023dbc:	f1dc 0300 	rsbs	r3, ip, #0
 8023dc0:	eb43 030c 	adc.w	r3, r3, ip
 8023dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8023dc6:	464b      	mov	r3, r9
 8023dc8:	f7fa fc78 	bl	801e6bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023dcc:	4629      	mov	r1, r5
 8023dce:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8023dd2:	464b      	mov	r3, r9
 8023dd4:	9a06      	ldr	r2, [sp, #24]
 8023dd6:	a810      	add	r0, sp, #64	; 0x40
 8023dd8:	f7fa fc88 	bl	801e6ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023ddc:	a914      	add	r1, sp, #80	; 0x50
 8023dde:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023de2:	a813      	add	r0, sp, #76	; 0x4c
 8023de4:	f7fa fd62 	bl	801e8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023de8:	f1b9 0f00 	cmp.w	r9, #0
 8023dec:	f040 80d4 	bne.w	8023f98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 8023df0:	f1bb 0f01 	cmp.w	fp, #1
 8023df4:	f040 80d8 	bne.w	8023fa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8023df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	f040 8122 	bne.w	8024044 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 8023e00:	4ba5      	ldr	r3, [pc, #660]	; (8024098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8023e02:	6818      	ldr	r0, [r3, #0]
 8023e04:	6803      	ldr	r3, [r0, #0]
 8023e06:	6a1b      	ldr	r3, [r3, #32]
 8023e08:	4798      	blx	r3
 8023e0a:	4aa4      	ldr	r2, [pc, #656]	; (802409c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8023e0c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8023e10:	8811      	ldrh	r1, [r2, #0]
 8023e12:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8023e16:	fb01 2303 	mla	r3, r1, r3, r2
 8023e1a:	2201      	movs	r2, #1
 8023e1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e20:	4590      	cmp	r8, r2
 8023e22:	4403      	add	r3, r0
 8023e24:	9307      	str	r3, [sp, #28]
 8023e26:	fa02 f308 	lsl.w	r3, r2, r8
 8023e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8023e2e:	b2db      	uxtb	r3, r3
 8023e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e32:	f000 8109 	beq.w	8024048 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 8023e36:	f1b8 0f02 	cmp.w	r8, #2
 8023e3a:	f000 813e 	beq.w	80240ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 8023e3e:	f1b8 0f04 	cmp.w	r8, #4
 8023e42:	f000 8132 	beq.w	80240aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8023e46:	b906      	cbnz	r6, 8023e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8023e48:	b174      	cbz	r4, 8023e68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 8023e4a:	fb17 6304 	smlabb	r3, r7, r4, r6
 8023e4e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023e50:	ebaa 0a04 	sub.w	sl, sl, r4
 8023e54:	fb13 f308 	smulbb	r3, r3, r8
 8023e58:	fa1f fa8a 	uxth.w	sl, sl
 8023e5c:	b29b      	uxth	r3, r3
 8023e5e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8023e62:	f003 0407 	and.w	r4, r3, #7
 8023e66:	9124      	str	r1, [sp, #144]	; 0x90
 8023e68:	4649      	mov	r1, r9
 8023e6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023e6c:	f7ff ff14 	bl	8023c98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8023e70:	4649      	mov	r1, r9
 8023e72:	4683      	mov	fp, r0
 8023e74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023e76:	f7ff ff2b 	bl	8023cd0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8023e7a:	9906      	ldr	r1, [sp, #24]
 8023e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e7e:	1bad      	subs	r5, r5, r6
 8023e80:	1a5b      	subs	r3, r3, r1
 8023e82:	459a      	cmp	sl, r3
 8023e84:	bfa8      	it	ge
 8023e86:	469a      	movge	sl, r3
 8023e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e8a:	1b5d      	subs	r5, r3, r5
 8023e8c:	9b08      	ldr	r3, [sp, #32]
 8023e8e:	429d      	cmp	r5, r3
 8023e90:	bfd4      	ite	le
 8023e92:	ebc6 0605 	rsble	r6, r6, r5
 8023e96:	ebc6 0603 	rsbgt	r6, r6, r3
 8023e9a:	1bbf      	subs	r7, r7, r6
 8023e9c:	fb0b 0016 	mls	r0, fp, r6, r0
 8023ea0:	fb08 f307 	mul.w	r3, r8, r7
 8023ea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ea8:	9308      	str	r3, [sp, #32]
 8023eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023eac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023eb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8023eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ebc:	b2db      	uxtb	r3, r3
 8023ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8023ec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ec2:	7819      	ldrb	r1, [r3, #0]
 8023ec4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8023ec8:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 8023ecc:	4121      	asrs	r1, r4
 8023ece:	9306      	str	r3, [sp, #24]
 8023ed0:	fb03 0b0b 	mla	fp, r3, fp, r0
 8023ed4:	b2c9      	uxtb	r1, r1
 8023ed6:	f1ba 0f00 	cmp.w	sl, #0
 8023eda:	f340 80d1 	ble.w	8024080 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8023ede:	46b6      	mov	lr, r6
 8023ee0:	9807      	ldr	r0, [sp, #28]
 8023ee2:	f1be 0f00 	cmp.w	lr, #0
 8023ee6:	f340 80b8 	ble.w	802405a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8023eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023eec:	400b      	ands	r3, r1
 8023eee:	d03e      	beq.n	8023f6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8023ef0:	fb13 f302 	smulbb	r3, r3, r2
 8023ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8023ef6:	dd03      	ble.n	8023f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8023ef8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023efa:	2dff      	cmp	r5, #255	; 0xff
 8023efc:	f000 80a6 	beq.w	802404c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8023f00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023f02:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023f04:	fb15 f303 	smulbb	r3, r5, r3
 8023f08:	b29b      	uxth	r3, r3
 8023f0a:	1c5d      	adds	r5, r3, #1
 8023f0c:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023f10:	7805      	ldrb	r5, [r0, #0]
 8023f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f16:	fa1f fc83 	uxth.w	ip, r3
 8023f1a:	43db      	mvns	r3, r3
 8023f1c:	fb17 f90c 	smulbb	r9, r7, ip
 8023f20:	b2db      	uxtb	r3, r3
 8023f22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023f24:	fb05 9503 	mla	r5, r5, r3, r9
 8023f28:	b2ad      	uxth	r5, r5
 8023f2a:	f105 0901 	add.w	r9, r5, #1
 8023f2e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023f32:	fb17 f90c 	smulbb	r9, r7, ip
 8023f36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023f38:	122d      	asrs	r5, r5, #8
 8023f3a:	fb17 fc0c 	smulbb	ip, r7, ip
 8023f3e:	7005      	strb	r5, [r0, #0]
 8023f40:	7845      	ldrb	r5, [r0, #1]
 8023f42:	fb05 9503 	mla	r5, r5, r3, r9
 8023f46:	b2ad      	uxth	r5, r5
 8023f48:	f105 0901 	add.w	r9, r5, #1
 8023f4c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023f50:	122d      	asrs	r5, r5, #8
 8023f52:	7045      	strb	r5, [r0, #1]
 8023f54:	7885      	ldrb	r5, [r0, #2]
 8023f56:	fb05 cc03 	mla	ip, r5, r3, ip
 8023f5a:	fa1f fc8c 	uxth.w	ip, ip
 8023f5e:	f10c 0301 	add.w	r3, ip, #1
 8023f62:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023f66:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023f6a:	f880 c002 	strb.w	ip, [r0, #2]
 8023f6e:	4444      	add	r4, r8
 8023f70:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023f74:	b2a4      	uxth	r4, r4
 8023f76:	2c07      	cmp	r4, #7
 8023f78:	bf89      	itett	hi
 8023f7a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 8023f7c:	fa41 f108 	asrls.w	r1, r1, r8
 8023f80:	2400      	movhi	r4, #0
 8023f82:	7859      	ldrbhi	r1, [r3, #1]
 8023f84:	bf8a      	itet	hi
 8023f86:	3301      	addhi	r3, #1
 8023f88:	b2c9      	uxtbls	r1, r1
 8023f8a:	9324      	strhi	r3, [sp, #144]	; 0x90
 8023f8c:	9b06      	ldr	r3, [sp, #24]
 8023f8e:	4418      	add	r0, r3
 8023f90:	e7a7      	b.n	8023ee2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8023f92:	441d      	add	r5, r3
 8023f94:	b22d      	sxth	r5, r5
 8023f96:	e6f1      	b.n	8023d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023f98:	f1b9 0f01 	cmp.w	r9, #1
 8023f9c:	f47f af2c 	bne.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023fa0:	f1bb 0f01 	cmp.w	fp, #1
 8023fa4:	f47f af28 	bne.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023fa8:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8024098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023fac:	f8db 0000 	ldr.w	r0, [fp]
 8023fb0:	6803      	ldr	r3, [r0, #0]
 8023fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023fb4:	4798      	blx	r3
 8023fb6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8023fba:	465a      	mov	r2, fp
 8023fbc:	d006      	beq.n	8023fcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8023fbe:	f1b8 0f04 	cmp.w	r8, #4
 8023fc2:	d13d      	bne.n	8024040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8023fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023fc6:	3300      	adds	r3, #0
 8023fc8:	bf18      	it	ne
 8023fca:	2301      	movne	r3, #1
 8023fcc:	05c0      	lsls	r0, r0, #23
 8023fce:	d567      	bpl.n	80240a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8023fd0:	f1b8 0f08 	cmp.w	r8, #8
 8023fd4:	d164      	bne.n	80240a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	bf0c      	ite	eq
 8023fda:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8023fde:	2180      	movne	r1, #128	; 0x80
 8023fe0:	2e00      	cmp	r6, #0
 8023fe2:	f47f af09 	bne.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023fe6:	2c00      	cmp	r4, #0
 8023fe8:	f47f af06 	bne.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023fec:	9b08      	ldr	r3, [sp, #32]
 8023fee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ff0:	442b      	add	r3, r5
 8023ff2:	4283      	cmp	r3, r0
 8023ff4:	f73f af00 	bgt.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023ff8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8023ffc:	4403      	add	r3, r0
 8023ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024000:	4283      	cmp	r3, r0
 8024002:	f73f aef9 	bgt.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024006:	f1b8 0f08 	cmp.w	r8, #8
 802400a:	6810      	ldr	r0, [r2, #0]
 802400c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8024010:	bf18      	it	ne
 8024012:	3701      	addne	r7, #1
 8024014:	6804      	ldr	r4, [r0, #0]
 8024016:	9105      	str	r1, [sp, #20]
 8024018:	bf18      	it	ne
 802401a:	f027 0701 	bicne.w	r7, r7, #1
 802401e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024020:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8024024:	bf18      	it	ne
 8024026:	b2bf      	uxthne	r7, r7
 8024028:	9104      	str	r1, [sp, #16]
 802402a:	9926      	ldr	r1, [sp, #152]	; 0x98
 802402c:	e9cd 7a00 	strd	r7, sl, [sp]
 8024030:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8024034:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024036:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8024038:	47a0      	blx	r4
 802403a:	b015      	add	sp, #84	; 0x54
 802403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024040:	2300      	movs	r3, #0
 8024042:	e7c3      	b.n	8023fcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8024044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024046:	e6e0      	b.n	8023e0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8024048:	22ff      	movs	r2, #255	; 0xff
 802404a:	e6fc      	b.n	8023e46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802404c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802404e:	7003      	strb	r3, [r0, #0]
 8024050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024052:	7043      	strb	r3, [r0, #1]
 8024054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024056:	7083      	strb	r3, [r0, #2]
 8024058:	e789      	b.n	8023f6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802405a:	9b08      	ldr	r3, [sp, #32]
 802405c:	b153      	cbz	r3, 8024074 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 802405e:	441c      	add	r4, r3
 8024060:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024062:	b2a4      	uxth	r4, r4
 8024064:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8024068:	f004 0407 	and.w	r4, r4, #7
 802406c:	7819      	ldrb	r1, [r3, #0]
 802406e:	9324      	str	r3, [sp, #144]	; 0x90
 8024070:	4121      	asrs	r1, r4
 8024072:	b2c9      	uxtb	r1, r1
 8024074:	9b07      	ldr	r3, [sp, #28]
 8024076:	f10a 3aff 	add.w	sl, sl, #4294967295
 802407a:	445b      	add	r3, fp
 802407c:	9307      	str	r3, [sp, #28]
 802407e:	e72a      	b.n	8023ed6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8024080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024082:	2b00      	cmp	r3, #0
 8024084:	d1d9      	bne.n	802403a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024086:	4b04      	ldr	r3, [pc, #16]	; (8024098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8024088:	6818      	ldr	r0, [r3, #0]
 802408a:	6803      	ldr	r3, [r0, #0]
 802408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802408e:	4798      	blx	r3
 8024090:	e7d3      	b.n	802403a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024092:	bf00      	nop
 8024094:	2000bfe6 	.word	0x2000bfe6
 8024098:	2000bff0 	.word	0x2000bff0
 802409c:	2000bfe8 	.word	0x2000bfe8
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	f43f aea9 	beq.w	8023df8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80240a6:	2180      	movs	r1, #128	; 0x80
 80240a8:	e79a      	b.n	8023fe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 80240aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80240ac:	b11b      	cbz	r3, 80240b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 80240ae:	07fb      	lsls	r3, r7, #31
 80240b0:	d501      	bpl.n	80240b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 80240b2:	3701      	adds	r7, #1
 80240b4:	b2bf      	uxth	r7, r7
 80240b6:	2211      	movs	r2, #17
 80240b8:	e6c5      	b.n	8023e46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 80240ba:	2255      	movs	r2, #85	; 0x55
 80240bc:	e6c3      	b.n	8023e46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 80240be:	bf00      	nop

080240c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80240c0:	b538      	push	{r3, r4, r5, lr}
 80240c2:	4c15      	ldr	r4, [pc, #84]	; (8024118 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80240c4:	4605      	mov	r5, r0
 80240c6:	7823      	ldrb	r3, [r4, #0]
 80240c8:	f3bf 8f5b 	dmb	ish
 80240cc:	07da      	lsls	r2, r3, #31
 80240ce:	d40b      	bmi.n	80240e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80240d0:	4620      	mov	r0, r4
 80240d2:	f006 fd5e 	bl	802ab92 <__cxa_guard_acquire>
 80240d6:	b138      	cbz	r0, 80240e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80240d8:	4620      	mov	r0, r4
 80240da:	f006 fd66 	bl	802abaa <__cxa_guard_release>
 80240de:	4a0f      	ldr	r2, [pc, #60]	; (802411c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80240e0:	490f      	ldr	r1, [pc, #60]	; (8024120 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80240e2:	4810      	ldr	r0, [pc, #64]	; (8024124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80240e4:	f006 fd4b 	bl	802ab7e <__aeabi_atexit>
 80240e8:	4c0f      	ldr	r4, [pc, #60]	; (8024128 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80240ea:	7823      	ldrb	r3, [r4, #0]
 80240ec:	f3bf 8f5b 	dmb	ish
 80240f0:	07db      	lsls	r3, r3, #31
 80240f2:	d40b      	bmi.n	802410c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80240f4:	4620      	mov	r0, r4
 80240f6:	f006 fd4c 	bl	802ab92 <__cxa_guard_acquire>
 80240fa:	b138      	cbz	r0, 802410c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80240fc:	4620      	mov	r0, r4
 80240fe:	f006 fd54 	bl	802abaa <__cxa_guard_release>
 8024102:	4a06      	ldr	r2, [pc, #24]	; (802411c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024104:	4909      	ldr	r1, [pc, #36]	; (802412c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024106:	480a      	ldr	r0, [pc, #40]	; (8024130 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024108:	f006 fd39 	bl	802ab7e <__aeabi_atexit>
 802410c:	4b05      	ldr	r3, [pc, #20]	; (8024124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802410e:	612b      	str	r3, [r5, #16]
 8024110:	4b07      	ldr	r3, [pc, #28]	; (8024130 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024112:	616b      	str	r3, [r5, #20]
 8024114:	bd38      	pop	{r3, r4, r5, pc}
 8024116:	bf00      	nop
 8024118:	2000c0fc 	.word	0x2000c0fc
 802411c:	20000000 	.word	0x20000000
 8024120:	08022cf7 	.word	0x08022cf7
 8024124:	200000cc 	.word	0x200000cc
 8024128:	2000c100 	.word	0x2000c100
 802412c:	08022cf5 	.word	0x08022cf5
 8024130:	200000d0 	.word	0x200000d0

08024134 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024134:	b538      	push	{r3, r4, r5, lr}
 8024136:	4c15      	ldr	r4, [pc, #84]	; (802418c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024138:	4605      	mov	r5, r0
 802413a:	7823      	ldrb	r3, [r4, #0]
 802413c:	f3bf 8f5b 	dmb	ish
 8024140:	07da      	lsls	r2, r3, #31
 8024142:	d40b      	bmi.n	802415c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024144:	4620      	mov	r0, r4
 8024146:	f006 fd24 	bl	802ab92 <__cxa_guard_acquire>
 802414a:	b138      	cbz	r0, 802415c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802414c:	4620      	mov	r0, r4
 802414e:	f006 fd2c 	bl	802abaa <__cxa_guard_release>
 8024152:	4a0f      	ldr	r2, [pc, #60]	; (8024190 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024154:	490f      	ldr	r1, [pc, #60]	; (8024194 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024156:	4810      	ldr	r0, [pc, #64]	; (8024198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024158:	f006 fd11 	bl	802ab7e <__aeabi_atexit>
 802415c:	4c0f      	ldr	r4, [pc, #60]	; (802419c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802415e:	7823      	ldrb	r3, [r4, #0]
 8024160:	f3bf 8f5b 	dmb	ish
 8024164:	07db      	lsls	r3, r3, #31
 8024166:	d40b      	bmi.n	8024180 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024168:	4620      	mov	r0, r4
 802416a:	f006 fd12 	bl	802ab92 <__cxa_guard_acquire>
 802416e:	b138      	cbz	r0, 8024180 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024170:	4620      	mov	r0, r4
 8024172:	f006 fd1a 	bl	802abaa <__cxa_guard_release>
 8024176:	4a06      	ldr	r2, [pc, #24]	; (8024190 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024178:	4909      	ldr	r1, [pc, #36]	; (80241a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802417a:	480a      	ldr	r0, [pc, #40]	; (80241a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802417c:	f006 fcff 	bl	802ab7e <__aeabi_atexit>
 8024180:	4b05      	ldr	r3, [pc, #20]	; (8024198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024182:	60ab      	str	r3, [r5, #8]
 8024184:	4b07      	ldr	r3, [pc, #28]	; (80241a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024186:	60eb      	str	r3, [r5, #12]
 8024188:	bd38      	pop	{r3, r4, r5, pc}
 802418a:	bf00      	nop
 802418c:	2000c0dc 	.word	0x2000c0dc
 8024190:	20000000 	.word	0x20000000
 8024194:	08022cfb 	.word	0x08022cfb
 8024198:	200000ac 	.word	0x200000ac
 802419c:	2000c0e0 	.word	0x2000c0e0
 80241a0:	08022cf9 	.word	0x08022cf9
 80241a4:	200000b0 	.word	0x200000b0

080241a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80241a8:	b510      	push	{r4, lr}
 80241aa:	4604      	mov	r4, r0
 80241ac:	f7ff ff88 	bl	80240c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80241b0:	4620      	mov	r0, r4
 80241b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80241b6:	f7ff bfbd 	b.w	8024134 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080241bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80241bc:	b538      	push	{r3, r4, r5, lr}
 80241be:	4c15      	ldr	r4, [pc, #84]	; (8024214 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80241c0:	4605      	mov	r5, r0
 80241c2:	7823      	ldrb	r3, [r4, #0]
 80241c4:	f3bf 8f5b 	dmb	ish
 80241c8:	07da      	lsls	r2, r3, #31
 80241ca:	d40b      	bmi.n	80241e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80241cc:	4620      	mov	r0, r4
 80241ce:	f006 fce0 	bl	802ab92 <__cxa_guard_acquire>
 80241d2:	b138      	cbz	r0, 80241e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80241d4:	4620      	mov	r0, r4
 80241d6:	f006 fce8 	bl	802abaa <__cxa_guard_release>
 80241da:	4a0f      	ldr	r2, [pc, #60]	; (8024218 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80241dc:	490f      	ldr	r1, [pc, #60]	; (802421c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80241de:	4810      	ldr	r0, [pc, #64]	; (8024220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80241e0:	f006 fccd 	bl	802ab7e <__aeabi_atexit>
 80241e4:	4c0f      	ldr	r4, [pc, #60]	; (8024224 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80241e6:	7823      	ldrb	r3, [r4, #0]
 80241e8:	f3bf 8f5b 	dmb	ish
 80241ec:	07db      	lsls	r3, r3, #31
 80241ee:	d40b      	bmi.n	8024208 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80241f0:	4620      	mov	r0, r4
 80241f2:	f006 fcce 	bl	802ab92 <__cxa_guard_acquire>
 80241f6:	b138      	cbz	r0, 8024208 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80241f8:	4620      	mov	r0, r4
 80241fa:	f006 fcd6 	bl	802abaa <__cxa_guard_release>
 80241fe:	4a06      	ldr	r2, [pc, #24]	; (8024218 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024200:	4909      	ldr	r1, [pc, #36]	; (8024228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024202:	480a      	ldr	r0, [pc, #40]	; (802422c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024204:	f006 fcbb 	bl	802ab7e <__aeabi_atexit>
 8024208:	4b05      	ldr	r3, [pc, #20]	; (8024220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802420a:	622b      	str	r3, [r5, #32]
 802420c:	4b07      	ldr	r3, [pc, #28]	; (802422c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802420e:	626b      	str	r3, [r5, #36]	; 0x24
 8024210:	bd38      	pop	{r3, r4, r5, pc}
 8024212:	bf00      	nop
 8024214:	2000c104 	.word	0x2000c104
 8024218:	20000000 	.word	0x20000000
 802421c:	08022cef 	.word	0x08022cef
 8024220:	200000d4 	.word	0x200000d4
 8024224:	2000c108 	.word	0x2000c108
 8024228:	08022ced 	.word	0x08022ced
 802422c:	200000d8 	.word	0x200000d8

08024230 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024230:	b538      	push	{r3, r4, r5, lr}
 8024232:	4c15      	ldr	r4, [pc, #84]	; (8024288 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024234:	4605      	mov	r5, r0
 8024236:	7823      	ldrb	r3, [r4, #0]
 8024238:	f3bf 8f5b 	dmb	ish
 802423c:	07da      	lsls	r2, r3, #31
 802423e:	d40b      	bmi.n	8024258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024240:	4620      	mov	r0, r4
 8024242:	f006 fca6 	bl	802ab92 <__cxa_guard_acquire>
 8024246:	b138      	cbz	r0, 8024258 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024248:	4620      	mov	r0, r4
 802424a:	f006 fcae 	bl	802abaa <__cxa_guard_release>
 802424e:	4a0f      	ldr	r2, [pc, #60]	; (802428c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024250:	490f      	ldr	r1, [pc, #60]	; (8024290 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024252:	4810      	ldr	r0, [pc, #64]	; (8024294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024254:	f006 fc93 	bl	802ab7e <__aeabi_atexit>
 8024258:	4c0f      	ldr	r4, [pc, #60]	; (8024298 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802425a:	7823      	ldrb	r3, [r4, #0]
 802425c:	f3bf 8f5b 	dmb	ish
 8024260:	07db      	lsls	r3, r3, #31
 8024262:	d40b      	bmi.n	802427c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024264:	4620      	mov	r0, r4
 8024266:	f006 fc94 	bl	802ab92 <__cxa_guard_acquire>
 802426a:	b138      	cbz	r0, 802427c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802426c:	4620      	mov	r0, r4
 802426e:	f006 fc9c 	bl	802abaa <__cxa_guard_release>
 8024272:	4a06      	ldr	r2, [pc, #24]	; (802428c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024274:	4909      	ldr	r1, [pc, #36]	; (802429c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024276:	480a      	ldr	r0, [pc, #40]	; (80242a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024278:	f006 fc81 	bl	802ab7e <__aeabi_atexit>
 802427c:	4b05      	ldr	r3, [pc, #20]	; (8024294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802427e:	61ab      	str	r3, [r5, #24]
 8024280:	4b07      	ldr	r3, [pc, #28]	; (80242a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024282:	61eb      	str	r3, [r5, #28]
 8024284:	bd38      	pop	{r3, r4, r5, pc}
 8024286:	bf00      	nop
 8024288:	2000c0e4 	.word	0x2000c0e4
 802428c:	20000000 	.word	0x20000000
 8024290:	08022cf3 	.word	0x08022cf3
 8024294:	200000b4 	.word	0x200000b4
 8024298:	2000c0e8 	.word	0x2000c0e8
 802429c:	08022cf1 	.word	0x08022cf1
 80242a0:	200000b8 	.word	0x200000b8

080242a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80242a4:	b510      	push	{r4, lr}
 80242a6:	4604      	mov	r4, r0
 80242a8:	f7ff ff88 	bl	80241bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80242ac:	4620      	mov	r0, r4
 80242ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242b2:	f7ff bfbd 	b.w	8024230 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080242b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80242b8:	b538      	push	{r3, r4, r5, lr}
 80242ba:	4c15      	ldr	r4, [pc, #84]	; (8024310 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80242bc:	4605      	mov	r5, r0
 80242be:	7823      	ldrb	r3, [r4, #0]
 80242c0:	f3bf 8f5b 	dmb	ish
 80242c4:	07da      	lsls	r2, r3, #31
 80242c6:	d40b      	bmi.n	80242e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80242c8:	4620      	mov	r0, r4
 80242ca:	f006 fc62 	bl	802ab92 <__cxa_guard_acquire>
 80242ce:	b138      	cbz	r0, 80242e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80242d0:	4620      	mov	r0, r4
 80242d2:	f006 fc6a 	bl	802abaa <__cxa_guard_release>
 80242d6:	4a0f      	ldr	r2, [pc, #60]	; (8024314 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80242d8:	490f      	ldr	r1, [pc, #60]	; (8024318 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80242da:	4810      	ldr	r0, [pc, #64]	; (802431c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80242dc:	f006 fc4f 	bl	802ab7e <__aeabi_atexit>
 80242e0:	4c0f      	ldr	r4, [pc, #60]	; (8024320 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80242e2:	7823      	ldrb	r3, [r4, #0]
 80242e4:	f3bf 8f5b 	dmb	ish
 80242e8:	07db      	lsls	r3, r3, #31
 80242ea:	d40b      	bmi.n	8024304 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80242ec:	4620      	mov	r0, r4
 80242ee:	f006 fc50 	bl	802ab92 <__cxa_guard_acquire>
 80242f2:	b138      	cbz	r0, 8024304 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80242f4:	4620      	mov	r0, r4
 80242f6:	f006 fc58 	bl	802abaa <__cxa_guard_release>
 80242fa:	4a06      	ldr	r2, [pc, #24]	; (8024314 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80242fc:	4909      	ldr	r1, [pc, #36]	; (8024324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80242fe:	480a      	ldr	r0, [pc, #40]	; (8024328 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024300:	f006 fc3d 	bl	802ab7e <__aeabi_atexit>
 8024304:	4b05      	ldr	r3, [pc, #20]	; (802431c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024306:	632b      	str	r3, [r5, #48]	; 0x30
 8024308:	4b07      	ldr	r3, [pc, #28]	; (8024328 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802430a:	636b      	str	r3, [r5, #52]	; 0x34
 802430c:	bd38      	pop	{r3, r4, r5, pc}
 802430e:	bf00      	nop
 8024310:	2000c0ec 	.word	0x2000c0ec
 8024314:	20000000 	.word	0x20000000
 8024318:	08022ce7 	.word	0x08022ce7
 802431c:	200000bc 	.word	0x200000bc
 8024320:	2000c0f0 	.word	0x2000c0f0
 8024324:	08022ce5 	.word	0x08022ce5
 8024328:	200000c0 	.word	0x200000c0

0802432c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802432c:	b538      	push	{r3, r4, r5, lr}
 802432e:	4c15      	ldr	r4, [pc, #84]	; (8024384 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8024330:	4605      	mov	r5, r0
 8024332:	7823      	ldrb	r3, [r4, #0]
 8024334:	f3bf 8f5b 	dmb	ish
 8024338:	07da      	lsls	r2, r3, #31
 802433a:	d40b      	bmi.n	8024354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802433c:	4620      	mov	r0, r4
 802433e:	f006 fc28 	bl	802ab92 <__cxa_guard_acquire>
 8024342:	b138      	cbz	r0, 8024354 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024344:	4620      	mov	r0, r4
 8024346:	f006 fc30 	bl	802abaa <__cxa_guard_release>
 802434a:	4a0f      	ldr	r2, [pc, #60]	; (8024388 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802434c:	490f      	ldr	r1, [pc, #60]	; (802438c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802434e:	4810      	ldr	r0, [pc, #64]	; (8024390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024350:	f006 fc15 	bl	802ab7e <__aeabi_atexit>
 8024354:	4c0f      	ldr	r4, [pc, #60]	; (8024394 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8024356:	7823      	ldrb	r3, [r4, #0]
 8024358:	f3bf 8f5b 	dmb	ish
 802435c:	07db      	lsls	r3, r3, #31
 802435e:	d40b      	bmi.n	8024378 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024360:	4620      	mov	r0, r4
 8024362:	f006 fc16 	bl	802ab92 <__cxa_guard_acquire>
 8024366:	b138      	cbz	r0, 8024378 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024368:	4620      	mov	r0, r4
 802436a:	f006 fc1e 	bl	802abaa <__cxa_guard_release>
 802436e:	4a06      	ldr	r2, [pc, #24]	; (8024388 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024370:	4909      	ldr	r1, [pc, #36]	; (8024398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8024372:	480a      	ldr	r0, [pc, #40]	; (802439c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024374:	f006 fc03 	bl	802ab7e <__aeabi_atexit>
 8024378:	4b05      	ldr	r3, [pc, #20]	; (8024390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802437a:	62ab      	str	r3, [r5, #40]	; 0x28
 802437c:	4b07      	ldr	r3, [pc, #28]	; (802439c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802437e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024380:	bd38      	pop	{r3, r4, r5, pc}
 8024382:	bf00      	nop
 8024384:	2000c0c4 	.word	0x2000c0c4
 8024388:	20000000 	.word	0x20000000
 802438c:	08022ceb 	.word	0x08022ceb
 8024390:	20000094 	.word	0x20000094
 8024394:	2000c0c8 	.word	0x2000c0c8
 8024398:	08022ce9 	.word	0x08022ce9
 802439c:	20000098 	.word	0x20000098

080243a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80243a0:	b510      	push	{r4, lr}
 80243a2:	4604      	mov	r4, r0
 80243a4:	f7ff ff88 	bl	80242b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80243a8:	4620      	mov	r0, r4
 80243aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243ae:	f7ff bfbd 	b.w	802432c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080243b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80243b4:	b538      	push	{r3, r4, r5, lr}
 80243b6:	4c15      	ldr	r4, [pc, #84]	; (802440c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80243b8:	4605      	mov	r5, r0
 80243ba:	7823      	ldrb	r3, [r4, #0]
 80243bc:	f3bf 8f5b 	dmb	ish
 80243c0:	07da      	lsls	r2, r3, #31
 80243c2:	d40b      	bmi.n	80243dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80243c4:	4620      	mov	r0, r4
 80243c6:	f006 fbe4 	bl	802ab92 <__cxa_guard_acquire>
 80243ca:	b138      	cbz	r0, 80243dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80243cc:	4620      	mov	r0, r4
 80243ce:	f006 fbec 	bl	802abaa <__cxa_guard_release>
 80243d2:	4a0f      	ldr	r2, [pc, #60]	; (8024410 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80243d4:	490f      	ldr	r1, [pc, #60]	; (8024414 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80243d6:	4810      	ldr	r0, [pc, #64]	; (8024418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80243d8:	f006 fbd1 	bl	802ab7e <__aeabi_atexit>
 80243dc:	4c0f      	ldr	r4, [pc, #60]	; (802441c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80243de:	7823      	ldrb	r3, [r4, #0]
 80243e0:	f3bf 8f5b 	dmb	ish
 80243e4:	07db      	lsls	r3, r3, #31
 80243e6:	d40b      	bmi.n	8024400 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80243e8:	4620      	mov	r0, r4
 80243ea:	f006 fbd2 	bl	802ab92 <__cxa_guard_acquire>
 80243ee:	b138      	cbz	r0, 8024400 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80243f0:	4620      	mov	r0, r4
 80243f2:	f006 fbda 	bl	802abaa <__cxa_guard_release>
 80243f6:	4a06      	ldr	r2, [pc, #24]	; (8024410 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80243f8:	4909      	ldr	r1, [pc, #36]	; (8024420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80243fa:	480a      	ldr	r0, [pc, #40]	; (8024424 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80243fc:	f006 fbbf 	bl	802ab7e <__aeabi_atexit>
 8024400:	4b05      	ldr	r3, [pc, #20]	; (8024418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024402:	642b      	str	r3, [r5, #64]	; 0x40
 8024404:	4b07      	ldr	r3, [pc, #28]	; (8024424 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024406:	646b      	str	r3, [r5, #68]	; 0x44
 8024408:	bd38      	pop	{r3, r4, r5, pc}
 802440a:	bf00      	nop
 802440c:	2000c0f4 	.word	0x2000c0f4
 8024410:	20000000 	.word	0x20000000
 8024414:	08022cdf 	.word	0x08022cdf
 8024418:	200000c4 	.word	0x200000c4
 802441c:	2000c0f8 	.word	0x2000c0f8
 8024420:	08022cdd 	.word	0x08022cdd
 8024424:	200000c8 	.word	0x200000c8

08024428 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024428:	b538      	push	{r3, r4, r5, lr}
 802442a:	4c15      	ldr	r4, [pc, #84]	; (8024480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802442c:	4605      	mov	r5, r0
 802442e:	7823      	ldrb	r3, [r4, #0]
 8024430:	f3bf 8f5b 	dmb	ish
 8024434:	07da      	lsls	r2, r3, #31
 8024436:	d40b      	bmi.n	8024450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024438:	4620      	mov	r0, r4
 802443a:	f006 fbaa 	bl	802ab92 <__cxa_guard_acquire>
 802443e:	b138      	cbz	r0, 8024450 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024440:	4620      	mov	r0, r4
 8024442:	f006 fbb2 	bl	802abaa <__cxa_guard_release>
 8024446:	4a0f      	ldr	r2, [pc, #60]	; (8024484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024448:	490f      	ldr	r1, [pc, #60]	; (8024488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802444a:	4810      	ldr	r0, [pc, #64]	; (802448c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802444c:	f006 fb97 	bl	802ab7e <__aeabi_atexit>
 8024450:	4c0f      	ldr	r4, [pc, #60]	; (8024490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024452:	7823      	ldrb	r3, [r4, #0]
 8024454:	f3bf 8f5b 	dmb	ish
 8024458:	07db      	lsls	r3, r3, #31
 802445a:	d40b      	bmi.n	8024474 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802445c:	4620      	mov	r0, r4
 802445e:	f006 fb98 	bl	802ab92 <__cxa_guard_acquire>
 8024462:	b138      	cbz	r0, 8024474 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024464:	4620      	mov	r0, r4
 8024466:	f006 fba0 	bl	802abaa <__cxa_guard_release>
 802446a:	4a06      	ldr	r2, [pc, #24]	; (8024484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802446c:	4909      	ldr	r1, [pc, #36]	; (8024494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802446e:	480a      	ldr	r0, [pc, #40]	; (8024498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024470:	f006 fb85 	bl	802ab7e <__aeabi_atexit>
 8024474:	4b05      	ldr	r3, [pc, #20]	; (802448c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024476:	63ab      	str	r3, [r5, #56]	; 0x38
 8024478:	4b07      	ldr	r3, [pc, #28]	; (8024498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802447a:	63eb      	str	r3, [r5, #60]	; 0x3c
 802447c:	bd38      	pop	{r3, r4, r5, pc}
 802447e:	bf00      	nop
 8024480:	2000c0d4 	.word	0x2000c0d4
 8024484:	20000000 	.word	0x20000000
 8024488:	08022ce3 	.word	0x08022ce3
 802448c:	200000a4 	.word	0x200000a4
 8024490:	2000c0d8 	.word	0x2000c0d8
 8024494:	08022ce1 	.word	0x08022ce1
 8024498:	200000a8 	.word	0x200000a8

0802449c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 802449c:	b510      	push	{r4, lr}
 802449e:	4604      	mov	r4, r0
 80244a0:	f7ff ff88 	bl	80243b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80244a4:	4620      	mov	r0, r4
 80244a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244aa:	f7ff bfbd 	b.w	8024428 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080244b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80244b0:	b538      	push	{r3, r4, r5, lr}
 80244b2:	4c15      	ldr	r4, [pc, #84]	; (8024508 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80244b4:	4605      	mov	r5, r0
 80244b6:	7823      	ldrb	r3, [r4, #0]
 80244b8:	f3bf 8f5b 	dmb	ish
 80244bc:	07da      	lsls	r2, r3, #31
 80244be:	d40b      	bmi.n	80244d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80244c0:	4620      	mov	r0, r4
 80244c2:	f006 fb66 	bl	802ab92 <__cxa_guard_acquire>
 80244c6:	b138      	cbz	r0, 80244d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80244c8:	4620      	mov	r0, r4
 80244ca:	f006 fb6e 	bl	802abaa <__cxa_guard_release>
 80244ce:	4a0f      	ldr	r2, [pc, #60]	; (802450c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80244d0:	490f      	ldr	r1, [pc, #60]	; (8024510 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80244d2:	4810      	ldr	r0, [pc, #64]	; (8024514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80244d4:	f006 fb53 	bl	802ab7e <__aeabi_atexit>
 80244d8:	4c0f      	ldr	r4, [pc, #60]	; (8024518 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80244da:	7823      	ldrb	r3, [r4, #0]
 80244dc:	f3bf 8f5b 	dmb	ish
 80244e0:	07db      	lsls	r3, r3, #31
 80244e2:	d40b      	bmi.n	80244fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80244e4:	4620      	mov	r0, r4
 80244e6:	f006 fb54 	bl	802ab92 <__cxa_guard_acquire>
 80244ea:	b138      	cbz	r0, 80244fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80244ec:	4620      	mov	r0, r4
 80244ee:	f006 fb5c 	bl	802abaa <__cxa_guard_release>
 80244f2:	4a06      	ldr	r2, [pc, #24]	; (802450c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80244f4:	4909      	ldr	r1, [pc, #36]	; (802451c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80244f6:	480a      	ldr	r0, [pc, #40]	; (8024520 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80244f8:	f006 fb41 	bl	802ab7e <__aeabi_atexit>
 80244fc:	4b05      	ldr	r3, [pc, #20]	; (8024514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80244fe:	652b      	str	r3, [r5, #80]	; 0x50
 8024500:	4b07      	ldr	r3, [pc, #28]	; (8024520 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024502:	656b      	str	r3, [r5, #84]	; 0x54
 8024504:	bd38      	pop	{r3, r4, r5, pc}
 8024506:	bf00      	nop
 8024508:	2000c0cc 	.word	0x2000c0cc
 802450c:	20000000 	.word	0x20000000
 8024510:	08022cd7 	.word	0x08022cd7
 8024514:	2000009c 	.word	0x2000009c
 8024518:	2000c0d0 	.word	0x2000c0d0
 802451c:	08022cd5 	.word	0x08022cd5
 8024520:	200000a0 	.word	0x200000a0

08024524 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024524:	b538      	push	{r3, r4, r5, lr}
 8024526:	4c15      	ldr	r4, [pc, #84]	; (802457c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024528:	4605      	mov	r5, r0
 802452a:	7823      	ldrb	r3, [r4, #0]
 802452c:	f3bf 8f5b 	dmb	ish
 8024530:	07da      	lsls	r2, r3, #31
 8024532:	d40b      	bmi.n	802454c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024534:	4620      	mov	r0, r4
 8024536:	f006 fb2c 	bl	802ab92 <__cxa_guard_acquire>
 802453a:	b138      	cbz	r0, 802454c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802453c:	4620      	mov	r0, r4
 802453e:	f006 fb34 	bl	802abaa <__cxa_guard_release>
 8024542:	4a0f      	ldr	r2, [pc, #60]	; (8024580 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024544:	490f      	ldr	r1, [pc, #60]	; (8024584 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024546:	4810      	ldr	r0, [pc, #64]	; (8024588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024548:	f006 fb19 	bl	802ab7e <__aeabi_atexit>
 802454c:	4c0f      	ldr	r4, [pc, #60]	; (802458c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802454e:	7823      	ldrb	r3, [r4, #0]
 8024550:	f3bf 8f5b 	dmb	ish
 8024554:	07db      	lsls	r3, r3, #31
 8024556:	d40b      	bmi.n	8024570 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024558:	4620      	mov	r0, r4
 802455a:	f006 fb1a 	bl	802ab92 <__cxa_guard_acquire>
 802455e:	b138      	cbz	r0, 8024570 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024560:	4620      	mov	r0, r4
 8024562:	f006 fb22 	bl	802abaa <__cxa_guard_release>
 8024566:	4a06      	ldr	r2, [pc, #24]	; (8024580 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024568:	4909      	ldr	r1, [pc, #36]	; (8024590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802456a:	480a      	ldr	r0, [pc, #40]	; (8024594 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802456c:	f006 fb07 	bl	802ab7e <__aeabi_atexit>
 8024570:	4b05      	ldr	r3, [pc, #20]	; (8024588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024572:	64ab      	str	r3, [r5, #72]	; 0x48
 8024574:	4b07      	ldr	r3, [pc, #28]	; (8024594 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024576:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024578:	bd38      	pop	{r3, r4, r5, pc}
 802457a:	bf00      	nop
 802457c:	2000c0bc 	.word	0x2000c0bc
 8024580:	20000000 	.word	0x20000000
 8024584:	08022cdb 	.word	0x08022cdb
 8024588:	2000008c 	.word	0x2000008c
 802458c:	2000c0c0 	.word	0x2000c0c0
 8024590:	08022cd9 	.word	0x08022cd9
 8024594:	20000090 	.word	0x20000090

08024598 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8024598:	b510      	push	{r4, lr}
 802459a:	4604      	mov	r4, r0
 802459c:	f7ff ff88 	bl	80244b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80245a0:	4620      	mov	r0, r4
 80245a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245a6:	f7ff bfbd 	b.w	8024524 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080245aa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80245aa:	b510      	push	{r4, lr}
 80245ac:	4604      	mov	r4, r0
 80245ae:	f7ff fff3 	bl	8024598 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80245b2:	4620      	mov	r0, r4
 80245b4:	f7ff ff72 	bl	802449c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80245b8:	4620      	mov	r0, r4
 80245ba:	f7ff fe73 	bl	80242a4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80245be:	4620      	mov	r0, r4
 80245c0:	f7ff fdf2 	bl	80241a8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80245c4:	4620      	mov	r0, r4
 80245c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245ca:	f7ff bee9 	b.w	80243a0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080245d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80245d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245d4:	b087      	sub	sp, #28
 80245d6:	7888      	ldrb	r0, [r1, #2]
 80245d8:	4616      	mov	r6, r2
 80245da:	9001      	str	r0, [sp, #4]
 80245dc:	7848      	ldrb	r0, [r1, #1]
 80245de:	9100      	str	r1, [sp, #0]
 80245e0:	9002      	str	r0, [sp, #8]
 80245e2:	7808      	ldrb	r0, [r1, #0]
 80245e4:	9901      	ldr	r1, [sp, #4]
 80245e6:	9003      	str	r0, [sp, #12]
 80245e8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80245ec:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 80245f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80245f4:	9902      	ldr	r1, [sp, #8]
 80245f6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80245fa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80245fe:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024602:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8024606:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802460a:	9005      	str	r0, [sp, #20]
 802460c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8024610:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024614:	2d00      	cmp	r5, #0
 8024616:	eb06 080a 	add.w	r8, r6, sl
 802461a:	db4a      	blt.n	80246b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 802461c:	45a9      	cmp	r9, r5
 802461e:	dd48      	ble.n	80246b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8024620:	f1bc 0f00 	cmp.w	ip, #0
 8024624:	db43      	blt.n	80246ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8024626:	45e6      	cmp	lr, ip
 8024628:	dd41      	ble.n	80246ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802462a:	f816 600a 	ldrb.w	r6, [r6, sl]
 802462e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024632:	441e      	add	r6, r3
 8024634:	f11c 0001 	adds.w	r0, ip, #1
 8024638:	d43e      	bmi.n	80246b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802463a:	4586      	cmp	lr, r0
 802463c:	dd3c      	ble.n	80246b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802463e:	2a00      	cmp	r2, #0
 8024640:	d03a      	beq.n	80246b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8024642:	f898 0001 	ldrb.w	r0, [r8, #1]
 8024646:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802464a:	4418      	add	r0, r3
 802464c:	3501      	adds	r5, #1
 802464e:	d437      	bmi.n	80246c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024650:	45a9      	cmp	r9, r5
 8024652:	dd35      	ble.n	80246c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024654:	b3a4      	cbz	r4, 80246c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024656:	f1bc 0f00 	cmp.w	ip, #0
 802465a:	db2f      	blt.n	80246bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 802465c:	45e6      	cmp	lr, ip
 802465e:	dd2d      	ble.n	80246bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8024660:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024668:	441d      	add	r5, r3
 802466a:	f11c 0c01 	adds.w	ip, ip, #1
 802466e:	d42a      	bmi.n	80246c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024670:	45e6      	cmp	lr, ip
 8024672:	dd28      	ble.n	80246c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024674:	b33a      	cbz	r2, 80246c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024676:	44c6      	add	lr, r8
 8024678:	f89e c001 	ldrb.w	ip, [lr, #1]
 802467c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024680:	4463      	add	r3, ip
 8024682:	ea6f 0c07 	mvn.w	ip, r7
 8024686:	2a0f      	cmp	r2, #15
 8024688:	f896 a000 	ldrb.w	sl, [r6]
 802468c:	fa5f fc8c 	uxtb.w	ip, ip
 8024690:	f890 b000 	ldrb.w	fp, [r0]
 8024694:	f895 9000 	ldrb.w	r9, [r5]
 8024698:	7819      	ldrb	r1, [r3, #0]
 802469a:	d801      	bhi.n	80246a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 802469c:	2c0f      	cmp	r4, #15
 802469e:	d914      	bls.n	80246ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80246a0:	4b40      	ldr	r3, [pc, #256]	; (80247a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80246a2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80246a6:	4a40      	ldr	r2, [pc, #256]	; (80247a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80246a8:	4840      	ldr	r0, [pc, #256]	; (80247ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80246aa:	f006 fa9b 	bl	802abe4 <__assert_func>
 80246ae:	ae05      	add	r6, sp, #20
 80246b0:	e7c0      	b.n	8024634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80246b2:	a805      	add	r0, sp, #20
 80246b4:	4606      	mov	r6, r0
 80246b6:	e7c9      	b.n	802464c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80246b8:	a805      	add	r0, sp, #20
 80246ba:	e7c7      	b.n	802464c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80246bc:	ad05      	add	r5, sp, #20
 80246be:	e7d4      	b.n	802466a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80246c0:	ab05      	add	r3, sp, #20
 80246c2:	461d      	mov	r5, r3
 80246c4:	e7dd      	b.n	8024682 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80246c6:	ab05      	add	r3, sp, #20
 80246c8:	e7db      	b.n	8024682 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80246ca:	b292      	uxth	r2, r2
 80246cc:	b2a4      	uxth	r4, r4
 80246ce:	fa1f fc8c 	uxth.w	ip, ip
 80246d2:	fb02 f804 	mul.w	r8, r2, r4
 80246d6:	0112      	lsls	r2, r2, #4
 80246d8:	b2bf      	uxth	r7, r7
 80246da:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80246de:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80246e2:	eba2 0208 	sub.w	r2, r2, r8
 80246e6:	b2a4      	uxth	r4, r4
 80246e8:	b292      	uxth	r2, r2
 80246ea:	ebae 0e04 	sub.w	lr, lr, r4
 80246ee:	fb02 fb0b 	mul.w	fp, r2, fp
 80246f2:	fa1f fe8e 	uxth.w	lr, lr
 80246f6:	fb0e ba0a 	mla	sl, lr, sl, fp
 80246fa:	fb04 aa09 	mla	sl, r4, r9, sl
 80246fe:	fb08 aa01 	mla	sl, r8, r1, sl
 8024702:	9903      	ldr	r1, [sp, #12]
 8024704:	fb11 f90c 	smulbb	r9, r1, ip
 8024708:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802470c:	9900      	ldr	r1, [sp, #0]
 802470e:	fb0a 9a07 	mla	sl, sl, r7, r9
 8024712:	fa1f fa8a 	uxth.w	sl, sl
 8024716:	f10a 0901 	add.w	r9, sl, #1
 802471a:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 802471e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024722:	f881 a000 	strb.w	sl, [r1]
 8024726:	f890 a001 	ldrb.w	sl, [r0, #1]
 802472a:	f896 9001 	ldrb.w	r9, [r6, #1]
 802472e:	fb02 fa0a 	mul.w	sl, r2, sl
 8024732:	9902      	ldr	r1, [sp, #8]
 8024734:	fb0e aa09 	mla	sl, lr, r9, sl
 8024738:	f895 9001 	ldrb.w	r9, [r5, #1]
 802473c:	fb04 aa09 	mla	sl, r4, r9, sl
 8024740:	f893 9001 	ldrb.w	r9, [r3, #1]
 8024744:	fb08 a909 	mla	r9, r8, r9, sl
 8024748:	fb11 fa0c 	smulbb	sl, r1, ip
 802474c:	9900      	ldr	r1, [sp, #0]
 802474e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024752:	fb09 a907 	mla	r9, r9, r7, sl
 8024756:	fa1f f989 	uxth.w	r9, r9
 802475a:	f109 0a01 	add.w	sl, r9, #1
 802475e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8024762:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024766:	f881 9001 	strb.w	r9, [r1, #1]
 802476a:	7880      	ldrb	r0, [r0, #2]
 802476c:	78b6      	ldrb	r6, [r6, #2]
 802476e:	4342      	muls	r2, r0
 8024770:	78a8      	ldrb	r0, [r5, #2]
 8024772:	789b      	ldrb	r3, [r3, #2]
 8024774:	fb0e 2206 	mla	r2, lr, r6, r2
 8024778:	fb04 2400 	mla	r4, r4, r0, r2
 802477c:	fb08 4803 	mla	r8, r8, r3, r4
 8024780:	9b01      	ldr	r3, [sp, #4]
 8024782:	fb13 fc0c 	smulbb	ip, r3, ip
 8024786:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802478a:	fb08 c707 	mla	r7, r8, r7, ip
 802478e:	b2bf      	uxth	r7, r7
 8024790:	f107 0c01 	add.w	ip, r7, #1
 8024794:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8024798:	123f      	asrs	r7, r7, #8
 802479a:	708f      	strb	r7, [r1, #2]
 802479c:	b007      	add	sp, #28
 802479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247a2:	bf00      	nop
 80247a4:	080301ff 	.word	0x080301ff
 80247a8:	080306f6 	.word	0x080306f6
 80247ac:	080302c8 	.word	0x080302c8

080247b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80247b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247b4:	ed2d 8b08 	vpush	{d8-d11}
 80247b8:	b095      	sub	sp, #84	; 0x54
 80247ba:	eeb0 aa40 	vmov.f32	s20, s0
 80247be:	eef0 9a60 	vmov.f32	s19, s1
 80247c2:	930a      	str	r3, [sp, #40]	; 0x28
 80247c4:	eeb0 9a41 	vmov.f32	s18, s2
 80247c8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80247cc:	eeb0 8a62 	vmov.f32	s16, s5
 80247d0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80247d2:	eef0 8a43 	vmov.f32	s17, s6
 80247d6:	930c      	str	r3, [sp, #48]	; 0x30
 80247d8:	eef0 ba44 	vmov.f32	s23, s8
 80247dc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80247e0:	eeb0 ba64 	vmov.f32	s22, s9
 80247e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80247e6:	eef0 aa45 	vmov.f32	s21, s10
 80247ea:	9310      	str	r3, [sp, #64]	; 0x40
 80247ec:	6860      	ldr	r0, [r4, #4]
 80247ee:	910f      	str	r1, [sp, #60]	; 0x3c
 80247f0:	9212      	str	r2, [sp, #72]	; 0x48
 80247f2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80247f4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 80247f8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80247fc:	fb00 1303 	mla	r3, r0, r3, r1
 8024800:	6821      	ldr	r1, [r4, #0]
 8024802:	6854      	ldr	r4, [r2, #4]
 8024804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024808:	18cb      	adds	r3, r1, r3
 802480a:	930b      	str	r3, [sp, #44]	; 0x2c
 802480c:	6813      	ldr	r3, [r2, #0]
 802480e:	930e      	str	r3, [sp, #56]	; 0x38
 8024810:	1d23      	adds	r3, r4, #4
 8024812:	9309      	str	r3, [sp, #36]	; 0x24
 8024814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024816:	43db      	mvns	r3, r3
 8024818:	b2db      	uxtb	r3, r3
 802481a:	930d      	str	r3, [sp, #52]	; 0x34
 802481c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802481e:	2b00      	cmp	r3, #0
 8024820:	dc03      	bgt.n	802482a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8024822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024824:	2b00      	cmp	r3, #0
 8024826:	f340 823c 	ble.w	8024ca2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802482a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802482c:	2b00      	cmp	r3, #0
 802482e:	f340 8115 	ble.w	8024a5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8024832:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024836:	1412      	asrs	r2, r2, #16
 8024838:	ea4f 4323 	mov.w	r3, r3, asr #16
 802483c:	d431      	bmi.n	80248a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802483e:	1c51      	adds	r1, r2, #1
 8024840:	428d      	cmp	r5, r1
 8024842:	dd31      	ble.n	80248a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024844:	2b00      	cmp	r3, #0
 8024846:	db2f      	blt.n	80248a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024848:	1c59      	adds	r1, r3, #1
 802484a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802484c:	4288      	cmp	r0, r1
 802484e:	dd2b      	ble.n	80248a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024852:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024854:	3b01      	subs	r3, #1
 8024856:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024858:	fb02 1203 	mla	r2, r2, r3, r1
 802485c:	1412      	asrs	r2, r2, #16
 802485e:	d42d      	bmi.n	80248bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024860:	3201      	adds	r2, #1
 8024862:	4295      	cmp	r5, r2
 8024864:	dd2a      	ble.n	80248bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024866:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024868:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802486a:	fb02 1303 	mla	r3, r2, r3, r1
 802486e:	141b      	asrs	r3, r3, #16
 8024870:	d424      	bmi.n	80248bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024872:	3301      	adds	r3, #1
 8024874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024876:	429a      	cmp	r2, r3
 8024878:	dd20      	ble.n	80248bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802487a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802487c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8024880:	f103 0c03 	add.w	ip, r3, #3
 8024884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024886:	9311      	str	r3, [sp, #68]	; 0x44
 8024888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802488a:	2b00      	cmp	r3, #0
 802488c:	f300 814f 	bgt.w	8024b2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8024890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802489c:	441a      	add	r2, r3
 802489e:	920b      	str	r2, [sp, #44]	; 0x2c
 80248a0:	e0de      	b.n	8024a60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80248a2:	1c51      	adds	r1, r2, #1
 80248a4:	f040 80cb 	bne.w	8024a3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80248a8:	42aa      	cmp	r2, r5
 80248aa:	f280 80c8 	bge.w	8024a3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80248ae:	1c5f      	adds	r7, r3, #1
 80248b0:	f2c0 80c5 	blt.w	8024a3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80248b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80248b6:	4293      	cmp	r3, r2
 80248b8:	f280 80c1 	bge.w	8024a3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80248bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80248c0:	9311      	str	r3, [sp, #68]	; 0x44
 80248c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	dde3      	ble.n	8024890 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80248c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80248cc:	141a      	asrs	r2, r3, #16
 80248ce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80248d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80248d2:	1400      	asrs	r0, r0, #16
 80248d4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80248d8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80248dc:	f100 810e 	bmi.w	8024afc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80248e0:	1c46      	adds	r6, r0, #1
 80248e2:	42b5      	cmp	r5, r6
 80248e4:	f340 810c 	ble.w	8024b00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80248e8:	2a00      	cmp	r2, #0
 80248ea:	f2c0 8109 	blt.w	8024b00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80248ee:	1c56      	adds	r6, r2, #1
 80248f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80248f2:	42b4      	cmp	r4, r6
 80248f4:	f340 8104 	ble.w	8024b00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80248f8:	fb02 0005 	mla	r0, r2, r5, r0
 80248fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80248fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024900:	f814 e000 	ldrb.w	lr, [r4, r0]
 8024904:	4402      	add	r2, r0
 8024906:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024908:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802490c:	eb00 080e 	add.w	r8, r0, lr
 8024910:	2b00      	cmp	r3, #0
 8024912:	f000 80e4 	beq.w	8024ade <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8024916:	f892 c001 	ldrb.w	ip, [r2, #1]
 802491a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802491e:	4484      	add	ip, r0
 8024920:	2900      	cmp	r1, #0
 8024922:	f000 80e5 	beq.w	8024af0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8024926:	1950      	adds	r0, r2, r5
 8024928:	5d52      	ldrb	r2, [r2, r5]
 802492a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802492c:	7840      	ldrb	r0, [r0, #1]
 802492e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024932:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024936:	4422      	add	r2, r4
 8024938:	4420      	add	r0, r4
 802493a:	b29b      	uxth	r3, r3
 802493c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802493e:	b289      	uxth	r1, r1
 8024940:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8024944:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8024948:	fb03 fa01 	mul.w	sl, r3, r1
 802494c:	011b      	lsls	r3, r3, #4
 802494e:	f89c e000 	ldrb.w	lr, [ip]
 8024952:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8024956:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802495a:	eba3 030a 	sub.w	r3, r3, sl
 802495e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024960:	b289      	uxth	r1, r1
 8024962:	b29b      	uxth	r3, r3
 8024964:	eba9 0901 	sub.w	r9, r9, r1
 8024968:	fb03 fe0e 	mul.w	lr, r3, lr
 802496c:	fa1f f989 	uxth.w	r9, r9
 8024970:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024974:	f892 b000 	ldrb.w	fp, [r2]
 8024978:	fb01 ee0b 	mla	lr, r1, fp, lr
 802497c:	f890 b000 	ldrb.w	fp, [r0]
 8024980:	fb0a ee0b 	mla	lr, sl, fp, lr
 8024984:	f897 b000 	ldrb.w	fp, [r7]
 8024988:	fb1b fb04 	smulbb	fp, fp, r4
 802498c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024990:	fb0e be06 	mla	lr, lr, r6, fp
 8024994:	fa1f fe8e 	uxth.w	lr, lr
 8024998:	f10e 0b01 	add.w	fp, lr, #1
 802499c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80249a0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80249a4:	f887 b000 	strb.w	fp, [r7]
 80249a8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80249ac:	f898 b001 	ldrb.w	fp, [r8, #1]
 80249b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80249b4:	fb09 ee0b 	mla	lr, r9, fp, lr
 80249b8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80249bc:	fb01 ee0b 	mla	lr, r1, fp, lr
 80249c0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80249c4:	fb0a ee0b 	mla	lr, sl, fp, lr
 80249c8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80249cc:	fb1b fb04 	smulbb	fp, fp, r4
 80249d0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80249d4:	fb0e be06 	mla	lr, lr, r6, fp
 80249d8:	fa1f fe8e 	uxth.w	lr, lr
 80249dc:	f10e 0b01 	add.w	fp, lr, #1
 80249e0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80249e4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80249e8:	f887 e001 	strb.w	lr, [r7, #1]
 80249ec:	f89c c002 	ldrb.w	ip, [ip, #2]
 80249f0:	f898 e002 	ldrb.w	lr, [r8, #2]
 80249f4:	fb03 f30c 	mul.w	r3, r3, ip
 80249f8:	fb09 330e 	mla	r3, r9, lr, r3
 80249fc:	f892 e002 	ldrb.w	lr, [r2, #2]
 8024a00:	7882      	ldrb	r2, [r0, #2]
 8024a02:	fb01 310e 	mla	r1, r1, lr, r3
 8024a06:	fb0a 1a02 	mla	sl, sl, r2, r1
 8024a0a:	78b9      	ldrb	r1, [r7, #2]
 8024a0c:	fb11 f104 	smulbb	r1, r1, r4
 8024a10:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024a14:	fb0a 1606 	mla	r6, sl, r6, r1
 8024a18:	b2b6      	uxth	r6, r6
 8024a1a:	1c73      	adds	r3, r6, #1
 8024a1c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024a20:	1236      	asrs	r6, r6, #8
 8024a22:	70be      	strb	r6, [r7, #2]
 8024a24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a26:	3703      	adds	r7, #3
 8024a28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024a2a:	4413      	add	r3, r2
 8024a2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024a2e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a32:	4413      	add	r3, r2
 8024a34:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024a38:	3b01      	subs	r3, #1
 8024a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8024a3c:	e741      	b.n	80248c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8024a3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024a42:	4413      	add	r3, r2
 8024a44:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024a46:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a4a:	4413      	add	r3, r2
 8024a4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a50:	3b01      	subs	r3, #1
 8024a52:	930a      	str	r3, [sp, #40]	; 0x28
 8024a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a56:	3303      	adds	r3, #3
 8024a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8024a5a:	e6e6      	b.n	802482a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8024a5c:	f47f aef8 	bne.w	8024850 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8024a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024a62:	2b00      	cmp	r3, #0
 8024a64:	f340 811d 	ble.w	8024ca2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8024a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a6e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024a72:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024a76:	eef0 6a48 	vmov.f32	s13, s16
 8024a7a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024a7e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024a82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a86:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8024a8a:	eef0 6a68 	vmov.f32	s13, s17
 8024a8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a92:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8024a96:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024a9a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024a9e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024aa2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024aa6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024aaa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024aae:	ee18 2a10 	vmov	r2, s16
 8024ab2:	eeb0 8a47 	vmov.f32	s16, s14
 8024ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aba:	ee18 2a90 	vmov	r2, s17
 8024abe:	9329      	str	r3, [sp, #164]	; 0xa4
 8024ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ac2:	eef0 8a67 	vmov.f32	s17, s15
 8024ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aca:	932a      	str	r3, [sp, #168]	; 0xa8
 8024acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024ace:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024ad0:	3b01      	subs	r3, #1
 8024ad2:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ad4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ad6:	bf08      	it	eq
 8024ad8:	4613      	moveq	r3, r2
 8024ada:	930a      	str	r3, [sp, #40]	; 0x28
 8024adc:	e69e      	b.n	802481c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8024ade:	b151      	cbz	r1, 8024af6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024ae0:	5d52      	ldrb	r2, [r2, r5]
 8024ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024ae4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024ae8:	4402      	add	r2, r0
 8024aea:	4640      	mov	r0, r8
 8024aec:	46c4      	mov	ip, r8
 8024aee:	e724      	b.n	802493a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8024af0:	4640      	mov	r0, r8
 8024af2:	4642      	mov	r2, r8
 8024af4:	e721      	b.n	802493a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8024af6:	4640      	mov	r0, r8
 8024af8:	4642      	mov	r2, r8
 8024afa:	e7f7      	b.n	8024aec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8024afc:	1c46      	adds	r6, r0, #1
 8024afe:	d191      	bne.n	8024a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024b00:	4285      	cmp	r5, r0
 8024b02:	dd8f      	ble.n	8024a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024b04:	1c54      	adds	r4, r2, #1
 8024b06:	db8d      	blt.n	8024a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024b08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024b0a:	4294      	cmp	r4, r2
 8024b0c:	dd8a      	ble.n	8024a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024b0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b10:	9002      	str	r0, [sp, #8]
 8024b12:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024b14:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8024b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024b1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024b20:	e9cd 5300 	strd	r5, r3, [sp]
 8024b24:	4639      	mov	r1, r7
 8024b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b28:	f7ff fd52 	bl	80245d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024b2c:	e77a      	b.n	8024a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024b2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024b30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024b32:	1410      	asrs	r0, r2, #16
 8024b34:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024b38:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024b3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024b3c:	1412      	asrs	r2, r2, #16
 8024b3e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024b42:	fb05 2000 	mla	r0, r5, r0, r2
 8024b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024b48:	f814 8000 	ldrb.w	r8, [r4, r0]
 8024b4c:	4402      	add	r2, r0
 8024b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b50:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024b54:	eb00 0708 	add.w	r7, r0, r8
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	f000 8093 	beq.w	8024c84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8024b5e:	7856      	ldrb	r6, [r2, #1]
 8024b60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024b64:	4406      	add	r6, r0
 8024b66:	2900      	cmp	r1, #0
 8024b68:	f000 8095 	beq.w	8024c96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8024b6c:	1950      	adds	r0, r2, r5
 8024b6e:	5d52      	ldrb	r2, [r2, r5]
 8024b70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024b72:	7840      	ldrb	r0, [r0, #1]
 8024b74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b7c:	4422      	add	r2, r4
 8024b7e:	4420      	add	r0, r4
 8024b80:	b29b      	uxth	r3, r3
 8024b82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024b84:	b289      	uxth	r1, r1
 8024b86:	f10c 0c03 	add.w	ip, ip, #3
 8024b8a:	f814 b008 	ldrb.w	fp, [r4, r8]
 8024b8e:	fb03 f901 	mul.w	r9, r3, r1
 8024b92:	011b      	lsls	r3, r3, #4
 8024b94:	f896 8000 	ldrb.w	r8, [r6]
 8024b98:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024b9c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024ba0:	eba3 0309 	sub.w	r3, r3, r9
 8024ba4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ba6:	b289      	uxth	r1, r1
 8024ba8:	b29b      	uxth	r3, r3
 8024baa:	ebae 0e01 	sub.w	lr, lr, r1
 8024bae:	fb03 f808 	mul.w	r8, r3, r8
 8024bb2:	fa1f fe8e 	uxth.w	lr, lr
 8024bb6:	fb0e 880b 	mla	r8, lr, fp, r8
 8024bba:	f892 b000 	ldrb.w	fp, [r2]
 8024bbe:	fb01 880b 	mla	r8, r1, fp, r8
 8024bc2:	f890 b000 	ldrb.w	fp, [r0]
 8024bc6:	fb09 880b 	mla	r8, r9, fp, r8
 8024bca:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 8024bce:	fb1b fb04 	smulbb	fp, fp, r4
 8024bd2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024bd6:	fb08 b80a 	mla	r8, r8, sl, fp
 8024bda:	fa1f f888 	uxth.w	r8, r8
 8024bde:	f108 0b01 	add.w	fp, r8, #1
 8024be2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8024be6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024bea:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8024bee:	f896 8001 	ldrb.w	r8, [r6, #1]
 8024bf2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024bf6:	fb03 f808 	mul.w	r8, r3, r8
 8024bfa:	fb0e 880b 	mla	r8, lr, fp, r8
 8024bfe:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024c02:	fb01 880b 	mla	r8, r1, fp, r8
 8024c06:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024c0a:	fb09 880b 	mla	r8, r9, fp, r8
 8024c0e:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8024c12:	fb1b fb04 	smulbb	fp, fp, r4
 8024c16:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024c1a:	fb08 b80a 	mla	r8, r8, sl, fp
 8024c1e:	fa1f f888 	uxth.w	r8, r8
 8024c22:	f108 0b01 	add.w	fp, r8, #1
 8024c26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8024c2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024c2e:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8024c32:	78b6      	ldrb	r6, [r6, #2]
 8024c34:	78bf      	ldrb	r7, [r7, #2]
 8024c36:	4373      	muls	r3, r6
 8024c38:	7896      	ldrb	r6, [r2, #2]
 8024c3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024c3c:	fb0e 3307 	mla	r3, lr, r7, r3
 8024c40:	fb01 3306 	mla	r3, r1, r6, r3
 8024c44:	7886      	ldrb	r6, [r0, #2]
 8024c46:	fb09 3906 	mla	r9, r9, r6, r3
 8024c4a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8024c4e:	fb13 f304 	smulbb	r3, r3, r4
 8024c52:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024c56:	fb09 390a 	mla	r9, r9, sl, r3
 8024c5a:	fa1f f989 	uxth.w	r9, r9
 8024c5e:	f109 0301 	add.w	r3, r9, #1
 8024c62:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024c66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024c68:	4413      	add	r3, r2
 8024c6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024c6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024c70:	9327      	str	r3, [sp, #156]	; 0x9c
 8024c72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c74:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8024c78:	4413      	add	r3, r2
 8024c7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024c7e:	3b01      	subs	r3, #1
 8024c80:	9311      	str	r3, [sp, #68]	; 0x44
 8024c82:	e601      	b.n	8024888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024c84:	b151      	cbz	r1, 8024c9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8024c86:	5d52      	ldrb	r2, [r2, r5]
 8024c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c8e:	4402      	add	r2, r0
 8024c90:	4638      	mov	r0, r7
 8024c92:	463e      	mov	r6, r7
 8024c94:	e774      	b.n	8024b80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8024c96:	4638      	mov	r0, r7
 8024c98:	463a      	mov	r2, r7
 8024c9a:	e771      	b.n	8024b80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8024c9c:	4638      	mov	r0, r7
 8024c9e:	463a      	mov	r2, r7
 8024ca0:	e7f7      	b.n	8024c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8024ca2:	b015      	add	sp, #84	; 0x54
 8024ca4:	ecbd 8b08 	vpop	{d8-d11}
 8024ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024cac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cb0:	780d      	ldrb	r5, [r1, #0]
 8024cb2:	f891 9002 	ldrb.w	r9, [r1, #2]
 8024cb6:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8024cba:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024cbe:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8024cc2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8024cc6:	f891 9001 	ldrb.w	r9, [r1, #1]
 8024cca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8024cce:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8024cd2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024cd6:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8024cda:	9501      	str	r5, [sp, #4]
 8024cdc:	fb06 470c 	mla	r7, r6, ip, r4
 8024ce0:	2e00      	cmp	r6, #0
 8024ce2:	eb02 0e07 	add.w	lr, r2, r7
 8024ce6:	db46      	blt.n	8024d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8024ce8:	45b0      	cmp	r8, r6
 8024cea:	dd44      	ble.n	8024d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8024cec:	2c00      	cmp	r4, #0
 8024cee:	db40      	blt.n	8024d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8024cf0:	45a4      	cmp	ip, r4
 8024cf2:	dd3e      	ble.n	8024d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8024cf4:	5dd7      	ldrb	r7, [r2, r7]
 8024cf6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024cfa:	441f      	add	r7, r3
 8024cfc:	1c62      	adds	r2, r4, #1
 8024cfe:	d43d      	bmi.n	8024d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8024d00:	4594      	cmp	ip, r2
 8024d02:	dd3b      	ble.n	8024d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8024d04:	f1ba 0f00 	cmp.w	sl, #0
 8024d08:	d038      	beq.n	8024d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8024d0a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8024d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024d12:	441d      	add	r5, r3
 8024d14:	3601      	adds	r6, #1
 8024d16:	d435      	bmi.n	8024d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8024d18:	45b0      	cmp	r8, r6
 8024d1a:	dd33      	ble.n	8024d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8024d1c:	b390      	cbz	r0, 8024d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8024d1e:	2c00      	cmp	r4, #0
 8024d20:	db2e      	blt.n	8024d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8024d22:	45a4      	cmp	ip, r4
 8024d24:	dd2c      	ble.n	8024d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8024d26:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8024d2a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024d2e:	441e      	add	r6, r3
 8024d30:	1c62      	adds	r2, r4, #1
 8024d32:	d42a      	bmi.n	8024d8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8024d34:	4594      	cmp	ip, r2
 8024d36:	dd28      	ble.n	8024d8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8024d38:	f1ba 0f00 	cmp.w	sl, #0
 8024d3c:	d025      	beq.n	8024d8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8024d3e:	44f4      	add	ip, lr
 8024d40:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024d44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d48:	4413      	add	r3, r2
 8024d4a:	f1ba 0f0f 	cmp.w	sl, #15
 8024d4e:	f897 8000 	ldrb.w	r8, [r7]
 8024d52:	f895 9000 	ldrb.w	r9, [r5]
 8024d56:	f896 e000 	ldrb.w	lr, [r6]
 8024d5a:	f893 c000 	ldrb.w	ip, [r3]
 8024d5e:	d801      	bhi.n	8024d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8024d60:	280f      	cmp	r0, #15
 8024d62:	d914      	bls.n	8024d8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8024d64:	4b29      	ldr	r3, [pc, #164]	; (8024e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8024d66:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024d6a:	4a29      	ldr	r2, [pc, #164]	; (8024e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8024d6c:	4829      	ldr	r0, [pc, #164]	; (8024e14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8024d6e:	f005 ff39 	bl	802abe4 <__assert_func>
 8024d72:	af01      	add	r7, sp, #4
 8024d74:	e7c2      	b.n	8024cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8024d76:	ad01      	add	r5, sp, #4
 8024d78:	462f      	mov	r7, r5
 8024d7a:	e7cb      	b.n	8024d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024d7c:	ad01      	add	r5, sp, #4
 8024d7e:	e7c9      	b.n	8024d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024d80:	ae01      	add	r6, sp, #4
 8024d82:	e7d5      	b.n	8024d30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8024d84:	ab01      	add	r3, sp, #4
 8024d86:	461e      	mov	r6, r3
 8024d88:	e7df      	b.n	8024d4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8024d8a:	ab01      	add	r3, sp, #4
 8024d8c:	e7dd      	b.n	8024d4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8024d8e:	fa1f f48a 	uxth.w	r4, sl
 8024d92:	b280      	uxth	r0, r0
 8024d94:	fb04 fa00 	mul.w	sl, r4, r0
 8024d98:	0124      	lsls	r4, r4, #4
 8024d9a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024d9e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8024da2:	b282      	uxth	r2, r0
 8024da4:	eba4 000a 	sub.w	r0, r4, sl
 8024da8:	ebab 0b02 	sub.w	fp, fp, r2
 8024dac:	b280      	uxth	r0, r0
 8024dae:	fa1f fb8b 	uxth.w	fp, fp
 8024db2:	fb00 f909 	mul.w	r9, r0, r9
 8024db6:	fb0b 9808 	mla	r8, fp, r8, r9
 8024dba:	fb02 8e0e 	mla	lr, r2, lr, r8
 8024dbe:	fb0a ec0c 	mla	ip, sl, ip, lr
 8024dc2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024dc6:	f881 c000 	strb.w	ip, [r1]
 8024dca:	786c      	ldrb	r4, [r5, #1]
 8024dcc:	f897 c001 	ldrb.w	ip, [r7, #1]
 8024dd0:	4344      	muls	r4, r0
 8024dd2:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024dd6:	7874      	ldrb	r4, [r6, #1]
 8024dd8:	fb02 cc04 	mla	ip, r2, r4, ip
 8024ddc:	785c      	ldrb	r4, [r3, #1]
 8024dde:	fb0a c404 	mla	r4, sl, r4, ip
 8024de2:	1224      	asrs	r4, r4, #8
 8024de4:	704c      	strb	r4, [r1, #1]
 8024de6:	78ad      	ldrb	r5, [r5, #2]
 8024de8:	78bc      	ldrb	r4, [r7, #2]
 8024dea:	4368      	muls	r0, r5
 8024dec:	fb0b 0b04 	mla	fp, fp, r4, r0
 8024df0:	78b0      	ldrb	r0, [r6, #2]
 8024df2:	fb02 b000 	mla	r0, r2, r0, fp
 8024df6:	789a      	ldrb	r2, [r3, #2]
 8024df8:	fb0a 0a02 	mla	sl, sl, r2, r0
 8024dfc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024e00:	f881 a002 	strb.w	sl, [r1, #2]
 8024e04:	b003      	add	sp, #12
 8024e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e0a:	bf00      	nop
 8024e0c:	080301ff 	.word	0x080301ff
 8024e10:	080306f6 	.word	0x080306f6
 8024e14:	080302c8 	.word	0x080302c8

08024e18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e1c:	ed2d 8b0a 	vpush	{d8-d12}
 8024e20:	b08f      	sub	sp, #60	; 0x3c
 8024e22:	eeb0 aa40 	vmov.f32	s20, s0
 8024e26:	eef0 9a60 	vmov.f32	s19, s1
 8024e2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024e2c:	eeb0 9a41 	vmov.f32	s18, s2
 8024e30:	9307      	str	r3, [sp, #28]
 8024e32:	eeb0 8a62 	vmov.f32	s16, s5
 8024e36:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8024e3a:	eef0 8a43 	vmov.f32	s17, s6
 8024e3e:	900d      	str	r0, [sp, #52]	; 0x34
 8024e40:	eeb0 ca44 	vmov.f32	s24, s8
 8024e44:	6860      	ldr	r0, [r4, #4]
 8024e46:	eef0 ba64 	vmov.f32	s23, s9
 8024e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8024e4c:	eeb0 ba45 	vmov.f32	s22, s10
 8024e50:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024e54:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8024e58:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8024e5c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8024e60:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024e62:	fb00 1303 	mla	r3, r0, r3, r1
 8024e66:	6821      	ldr	r1, [r4, #0]
 8024e68:	6854      	ldr	r4, [r2, #4]
 8024e6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024e6e:	3404      	adds	r4, #4
 8024e70:	18cb      	adds	r3, r1, r3
 8024e72:	9308      	str	r3, [sp, #32]
 8024e74:	6813      	ldr	r3, [r2, #0]
 8024e76:	930a      	str	r3, [sp, #40]	; 0x28
 8024e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e7a:	2b00      	cmp	r3, #0
 8024e7c:	dc03      	bgt.n	8024e86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8024e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	f340 81d2 	ble.w	802522a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8024e86:	9b07      	ldr	r3, [sp, #28]
 8024e88:	2b00      	cmp	r3, #0
 8024e8a:	f340 80e3 	ble.w	8025054 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8024e8e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024e90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e92:	1412      	asrs	r2, r2, #16
 8024e94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024e98:	d42f      	bmi.n	8024efa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8024e9a:	1c51      	adds	r1, r2, #1
 8024e9c:	428d      	cmp	r5, r1
 8024e9e:	dd2f      	ble.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	db2d      	blt.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024ea4:	1c59      	adds	r1, r3, #1
 8024ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024ea8:	4288      	cmp	r0, r1
 8024eaa:	dd29      	ble.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024eac:	9b07      	ldr	r3, [sp, #28]
 8024eae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024eb0:	3b01      	subs	r3, #1
 8024eb2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8024eb4:	fb02 1203 	mla	r2, r2, r3, r1
 8024eb8:	1412      	asrs	r2, r2, #16
 8024eba:	d42b      	bmi.n	8024f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024ebc:	3201      	adds	r2, #1
 8024ebe:	4295      	cmp	r5, r2
 8024ec0:	dd28      	ble.n	8024f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024ec2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024ec4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024ec6:	fb02 1303 	mla	r3, r2, r3, r1
 8024eca:	141b      	asrs	r3, r3, #16
 8024ecc:	d422      	bmi.n	8024f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024ece:	3301      	adds	r3, #1
 8024ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024ed2:	429a      	cmp	r2, r3
 8024ed4:	dd1e      	ble.n	8024f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024ed6:	9b08      	ldr	r3, [sp, #32]
 8024ed8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8024edc:	f103 0803 	add.w	r8, r3, #3
 8024ee0:	f1ba 0f00 	cmp.w	sl, #0
 8024ee4:	f300 8119 	bgt.w	802511a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8024ee8:	9b07      	ldr	r3, [sp, #28]
 8024eea:	9a08      	ldr	r2, [sp, #32]
 8024eec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024ef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024ef4:	441a      	add	r2, r3
 8024ef6:	9208      	str	r2, [sp, #32]
 8024ef8:	e0ae      	b.n	8025058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8024efa:	1c51      	adds	r1, r2, #1
 8024efc:	f040 809b 	bne.w	8025036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024f00:	42aa      	cmp	r2, r5
 8024f02:	f280 8098 	bge.w	8025036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024f06:	1c5a      	adds	r2, r3, #1
 8024f08:	f2c0 8095 	blt.w	8025036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024f0e:	4293      	cmp	r3, r2
 8024f10:	f280 8091 	bge.w	8025036 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024f14:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8024f18:	f1bb 0f00 	cmp.w	fp, #0
 8024f1c:	dde4      	ble.n	8024ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8024f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f20:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024f22:	141a      	asrs	r2, r3, #16
 8024f24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024f26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f28:	1400      	asrs	r0, r0, #16
 8024f2a:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8024f2e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024f32:	f100 80dc 	bmi.w	80250ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8024f36:	1c47      	adds	r7, r0, #1
 8024f38:	42bd      	cmp	r5, r7
 8024f3a:	f340 80da 	ble.w	80250f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024f3e:	2a00      	cmp	r2, #0
 8024f40:	f2c0 80d7 	blt.w	80250f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024f44:	f102 0c01 	add.w	ip, r2, #1
 8024f48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024f4a:	4567      	cmp	r7, ip
 8024f4c:	f340 80d1 	ble.w	80250f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024f50:	fb02 0005 	mla	r0, r2, r5, r0
 8024f54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f58:	f817 8000 	ldrb.w	r8, [r7, r0]
 8024f5c:	4402      	add	r2, r0
 8024f5e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024f62:	eb04 0c08 	add.w	ip, r4, r8
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	f000 80b3 	beq.w	80250d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8024f6c:	7857      	ldrb	r7, [r2, #1]
 8024f6e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024f72:	4427      	add	r7, r4
 8024f74:	2900      	cmp	r1, #0
 8024f76:	f000 80b4 	beq.w	80250e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8024f7a:	1950      	adds	r0, r2, r5
 8024f7c:	5d52      	ldrb	r2, [r2, r5]
 8024f7e:	7840      	ldrb	r0, [r0, #1]
 8024f80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f88:	4422      	add	r2, r4
 8024f8a:	4420      	add	r0, r4
 8024f8c:	b29b      	uxth	r3, r3
 8024f8e:	f814 a008 	ldrb.w	sl, [r4, r8]
 8024f92:	b289      	uxth	r1, r1
 8024f94:	f897 8000 	ldrb.w	r8, [r7]
 8024f98:	fb03 f901 	mul.w	r9, r3, r1
 8024f9c:	011b      	lsls	r3, r3, #4
 8024f9e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024fa2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024fa6:	eba3 0309 	sub.w	r3, r3, r9
 8024faa:	b289      	uxth	r1, r1
 8024fac:	b29b      	uxth	r3, r3
 8024fae:	ebae 0e01 	sub.w	lr, lr, r1
 8024fb2:	fb03 f808 	mul.w	r8, r3, r8
 8024fb6:	fa1f fe8e 	uxth.w	lr, lr
 8024fba:	fb0e 880a 	mla	r8, lr, sl, r8
 8024fbe:	f892 a000 	ldrb.w	sl, [r2]
 8024fc2:	fb01 880a 	mla	r8, r1, sl, r8
 8024fc6:	f890 a000 	ldrb.w	sl, [r0]
 8024fca:	fb09 880a 	mla	r8, r9, sl, r8
 8024fce:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024fd2:	f886 8000 	strb.w	r8, [r6]
 8024fd6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024fda:	f89c a001 	ldrb.w	sl, [ip, #1]
 8024fde:	fb03 f808 	mul.w	r8, r3, r8
 8024fe2:	fb0e 880a 	mla	r8, lr, sl, r8
 8024fe6:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024fea:	fb01 880a 	mla	r8, r1, sl, r8
 8024fee:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024ff2:	fb09 880a 	mla	r8, r9, sl, r8
 8024ff6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024ffa:	f886 8001 	strb.w	r8, [r6, #1]
 8024ffe:	78bf      	ldrb	r7, [r7, #2]
 8025000:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025004:	437b      	muls	r3, r7
 8025006:	7892      	ldrb	r2, [r2, #2]
 8025008:	fb0e 330c 	mla	r3, lr, ip, r3
 802500c:	fb01 3102 	mla	r1, r1, r2, r3
 8025010:	7882      	ldrb	r2, [r0, #2]
 8025012:	fb09 1902 	mla	r9, r9, r2, r1
 8025016:	ea4f 2929 	mov.w	r9, r9, asr #8
 802501a:	f886 9002 	strb.w	r9, [r6, #2]
 802501e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025020:	3603      	adds	r6, #3
 8025022:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025028:	4413      	add	r3, r2
 802502a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802502c:	9323      	str	r3, [sp, #140]	; 0x8c
 802502e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025030:	4413      	add	r3, r2
 8025032:	9324      	str	r3, [sp, #144]	; 0x90
 8025034:	e770      	b.n	8024f18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8025036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025038:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802503a:	4413      	add	r3, r2
 802503c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802503e:	9323      	str	r3, [sp, #140]	; 0x8c
 8025040:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025042:	4413      	add	r3, r2
 8025044:	9324      	str	r3, [sp, #144]	; 0x90
 8025046:	9b07      	ldr	r3, [sp, #28]
 8025048:	3b01      	subs	r3, #1
 802504a:	9307      	str	r3, [sp, #28]
 802504c:	9b08      	ldr	r3, [sp, #32]
 802504e:	3303      	adds	r3, #3
 8025050:	9308      	str	r3, [sp, #32]
 8025052:	e718      	b.n	8024e86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8025054:	f47f af2a 	bne.w	8024eac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802505a:	2b00      	cmp	r3, #0
 802505c:	f340 80e5 	ble.w	802522a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8025060:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025064:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025066:	ee79 9aab 	vadd.f32	s19, s19, s23
 802506a:	eef0 6a48 	vmov.f32	s13, s16
 802506e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025072:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025076:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802507a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 802507e:	eef0 6a68 	vmov.f32	s13, s17
 8025082:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025086:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 802508a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802508e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025092:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025096:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802509a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802509e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80250a2:	ee18 2a10 	vmov	r2, s16
 80250a6:	eeb0 8a47 	vmov.f32	s16, s14
 80250aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80250ae:	ee18 2a90 	vmov	r2, s17
 80250b2:	9325      	str	r3, [sp, #148]	; 0x94
 80250b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250b6:	eef0 8a67 	vmov.f32	s17, s15
 80250ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80250be:	9326      	str	r3, [sp, #152]	; 0x98
 80250c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80250c4:	3b01      	subs	r3, #1
 80250c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80250c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80250ca:	bf08      	it	eq
 80250cc:	4613      	moveq	r3, r2
 80250ce:	9307      	str	r3, [sp, #28]
 80250d0:	e6d2      	b.n	8024e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80250d2:	b149      	cbz	r1, 80250e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80250d4:	5d52      	ldrb	r2, [r2, r5]
 80250d6:	4660      	mov	r0, ip
 80250d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80250dc:	4422      	add	r2, r4
 80250de:	4667      	mov	r7, ip
 80250e0:	e754      	b.n	8024f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80250e2:	4660      	mov	r0, ip
 80250e4:	4662      	mov	r2, ip
 80250e6:	e751      	b.n	8024f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80250e8:	4660      	mov	r0, ip
 80250ea:	4662      	mov	r2, ip
 80250ec:	e7f7      	b.n	80250de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 80250ee:	1c47      	adds	r7, r0, #1
 80250f0:	d195      	bne.n	802501e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80250f2:	4285      	cmp	r5, r0
 80250f4:	dd93      	ble.n	802501e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80250f6:	1c57      	adds	r7, r2, #1
 80250f8:	db91      	blt.n	802501e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80250fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80250fc:	4297      	cmp	r7, r2
 80250fe:	dd8e      	ble.n	802501e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8025100:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025104:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025108:	e9cd 5700 	strd	r5, r7, [sp]
 802510c:	4623      	mov	r3, r4
 802510e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025110:	4631      	mov	r1, r6
 8025112:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025114:	f7ff fdca 	bl	8024cac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8025118:	e781      	b.n	802501e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802511a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802511c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802511e:	1410      	asrs	r0, r2, #16
 8025120:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025124:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025128:	1412      	asrs	r2, r2, #16
 802512a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802512e:	fb05 2000 	mla	r0, r5, r0, r2
 8025132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025134:	f816 e000 	ldrb.w	lr, [r6, r0]
 8025138:	4402      	add	r2, r0
 802513a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802513e:	eb04 070e 	add.w	r7, r4, lr
 8025142:	2b00      	cmp	r3, #0
 8025144:	d063      	beq.n	802520e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8025146:	7856      	ldrb	r6, [r2, #1]
 8025148:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802514c:	4426      	add	r6, r4
 802514e:	2900      	cmp	r1, #0
 8025150:	d065      	beq.n	802521e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8025152:	1950      	adds	r0, r2, r5
 8025154:	5d52      	ldrb	r2, [r2, r5]
 8025156:	7840      	ldrb	r0, [r0, #1]
 8025158:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802515c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025160:	4422      	add	r2, r4
 8025162:	4420      	add	r0, r4
 8025164:	b29b      	uxth	r3, r3
 8025166:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802516a:	b289      	uxth	r1, r1
 802516c:	f896 e000 	ldrb.w	lr, [r6]
 8025170:	f108 0803 	add.w	r8, r8, #3
 8025174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025178:	fb03 f901 	mul.w	r9, r3, r1
 802517c:	011b      	lsls	r3, r3, #4
 802517e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025182:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025186:	eba3 0309 	sub.w	r3, r3, r9
 802518a:	b289      	uxth	r1, r1
 802518c:	b29b      	uxth	r3, r3
 802518e:	ebac 0c01 	sub.w	ip, ip, r1
 8025192:	fb03 fe0e 	mul.w	lr, r3, lr
 8025196:	fa1f fc8c 	uxth.w	ip, ip
 802519a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802519e:	f892 b000 	ldrb.w	fp, [r2]
 80251a2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80251a6:	f890 b000 	ldrb.w	fp, [r0]
 80251aa:	fb09 ee0b 	mla	lr, r9, fp, lr
 80251ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80251b2:	f808 ec06 	strb.w	lr, [r8, #-6]
 80251b6:	f896 e001 	ldrb.w	lr, [r6, #1]
 80251ba:	f897 b001 	ldrb.w	fp, [r7, #1]
 80251be:	fb03 fe0e 	mul.w	lr, r3, lr
 80251c2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80251c6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80251ca:	fb01 ee0b 	mla	lr, r1, fp, lr
 80251ce:	f890 b001 	ldrb.w	fp, [r0, #1]
 80251d2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80251d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80251da:	f808 ec05 	strb.w	lr, [r8, #-5]
 80251de:	78b6      	ldrb	r6, [r6, #2]
 80251e0:	78bf      	ldrb	r7, [r7, #2]
 80251e2:	4373      	muls	r3, r6
 80251e4:	7896      	ldrb	r6, [r2, #2]
 80251e6:	7882      	ldrb	r2, [r0, #2]
 80251e8:	fb0c 3307 	mla	r3, ip, r7, r3
 80251ec:	fb01 3306 	mla	r3, r1, r6, r3
 80251f0:	fb09 3902 	mla	r9, r9, r2, r3
 80251f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80251f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80251f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80251fc:	4413      	add	r3, r2
 80251fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025200:	f808 9c04 	strb.w	r9, [r8, #-4]
 8025204:	9323      	str	r3, [sp, #140]	; 0x8c
 8025206:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025208:	4413      	add	r3, r2
 802520a:	9324      	str	r3, [sp, #144]	; 0x90
 802520c:	e668      	b.n	8024ee0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802520e:	b149      	cbz	r1, 8025224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8025210:	5d52      	ldrb	r2, [r2, r5]
 8025212:	4638      	mov	r0, r7
 8025214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025218:	4422      	add	r2, r4
 802521a:	463e      	mov	r6, r7
 802521c:	e7a2      	b.n	8025164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 802521e:	4638      	mov	r0, r7
 8025220:	463a      	mov	r2, r7
 8025222:	e79f      	b.n	8025164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8025224:	4638      	mov	r0, r7
 8025226:	463a      	mov	r2, r7
 8025228:	e7f7      	b.n	802521a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802522a:	b00f      	add	sp, #60	; 0x3c
 802522c:	ecbd 8b0a 	vpop	{d8-d12}
 8025230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8025234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025238:	b087      	sub	sp, #28
 802523a:	7888      	ldrb	r0, [r1, #2]
 802523c:	9002      	str	r0, [sp, #8]
 802523e:	7848      	ldrb	r0, [r1, #1]
 8025240:	9e02      	ldr	r6, [sp, #8]
 8025242:	9003      	str	r0, [sp, #12]
 8025244:	7808      	ldrb	r0, [r1, #0]
 8025246:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802524a:	9004      	str	r0, [sp, #16]
 802524c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025250:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8025254:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8025258:	9e03      	ldr	r6, [sp, #12]
 802525a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 802525e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8025262:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8025266:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 802526a:	fb04 7508 	mla	r5, r4, r8, r7
 802526e:	2c00      	cmp	r4, #0
 8025270:	eb02 0905 	add.w	r9, r2, r5
 8025274:	db45      	blt.n	8025302 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8025276:	45a2      	cmp	sl, r4
 8025278:	dd43      	ble.n	8025302 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802527a:	2f00      	cmp	r7, #0
 802527c:	db3f      	blt.n	80252fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 802527e:	45b8      	cmp	r8, r7
 8025280:	dd3d      	ble.n	80252fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8025282:	5d52      	ldrb	r2, [r2, r5]
 8025284:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025288:	1c7a      	adds	r2, r7, #1
 802528a:	d43d      	bmi.n	8025308 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 802528c:	4590      	cmp	r8, r2
 802528e:	dd3b      	ble.n	8025308 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8025290:	f1bc 0f00 	cmp.w	ip, #0
 8025294:	d038      	beq.n	8025308 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8025296:	f899 2001 	ldrb.w	r2, [r9, #1]
 802529a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802529e:	3401      	adds	r4, #1
 80252a0:	d436      	bmi.n	8025310 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80252a2:	45a2      	cmp	sl, r4
 80252a4:	dd34      	ble.n	8025310 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80252a6:	f1be 0f00 	cmp.w	lr, #0
 80252aa:	d031      	beq.n	8025310 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80252ac:	2f00      	cmp	r7, #0
 80252ae:	db2d      	blt.n	802530c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80252b0:	45b8      	cmp	r8, r7
 80252b2:	dd2b      	ble.n	802530c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80252b4:	f819 2008 	ldrb.w	r2, [r9, r8]
 80252b8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80252bc:	3701      	adds	r7, #1
 80252be:	d409      	bmi.n	80252d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80252c0:	45b8      	cmp	r8, r7
 80252c2:	dd07      	ble.n	80252d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80252c4:	f1bc 0f00 	cmp.w	ip, #0
 80252c8:	d004      	beq.n	80252d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80252ca:	44c8      	add	r8, r9
 80252cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80252d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80252d4:	f1bc 0f0f 	cmp.w	ip, #15
 80252d8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80252dc:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80252e0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80252e4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80252e8:	d802      	bhi.n	80252f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 80252ea:	f1be 0f0f 	cmp.w	lr, #15
 80252ee:	d911      	bls.n	8025314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 80252f0:	4b77      	ldr	r3, [pc, #476]	; (80254d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 80252f2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80252f6:	4a77      	ldr	r2, [pc, #476]	; (80254d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 80252f8:	4877      	ldr	r0, [pc, #476]	; (80254d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 80252fa:	f005 fc73 	bl	802abe4 <__assert_func>
 80252fe:	4606      	mov	r6, r0
 8025300:	e7c2      	b.n	8025288 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8025302:	4605      	mov	r5, r0
 8025304:	4606      	mov	r6, r0
 8025306:	e7ca      	b.n	802529e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8025308:	4605      	mov	r5, r0
 802530a:	e7c8      	b.n	802529e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 802530c:	4604      	mov	r4, r0
 802530e:	e7d5      	b.n	80252bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8025310:	4604      	mov	r4, r0
 8025312:	e7df      	b.n	80252d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8025314:	fa1f fc8c 	uxth.w	ip, ip
 8025318:	fa1f f28e 	uxth.w	r2, lr
 802531c:	fb02 fe0c 	mul.w	lr, r2, ip
 8025320:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025324:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8025328:	ebac 070e 	sub.w	r7, ip, lr
 802532c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8025330:	b292      	uxth	r2, r2
 8025332:	b2bf      	uxth	r7, r7
 8025334:	1a9b      	subs	r3, r3, r2
 8025336:	fb07 fc0a 	mul.w	ip, r7, sl
 802533a:	b29b      	uxth	r3, r3
 802533c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025340:	9301      	str	r3, [sp, #4]
 8025342:	fb02 cc09 	mla	ip, r2, r9, ip
 8025346:	fb0e cc08 	mla	ip, lr, r8, ip
 802534a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802534e:	9305      	str	r3, [sp, #20]
 8025350:	2b00      	cmp	r3, #0
 8025352:	f000 80b9 	beq.w	80254c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8025356:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802535a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802535e:	fb0b fc0c 	mul.w	ip, fp, ip
 8025362:	fb0b f606 	mul.w	r6, fp, r6
 8025366:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802536a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802536e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025372:	44dc      	add	ip, fp
 8025374:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025378:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802537c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025380:	fb0a fb0b 	mul.w	fp, sl, fp
 8025384:	fb0a fa05 	mul.w	sl, sl, r5
 8025388:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802538c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025390:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8025394:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025398:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802539c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80253a0:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 80253a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80253a8:	0a36      	lsrs	r6, r6, #8
 80253aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253ae:	44dc      	add	ip, fp
 80253b0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80253b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80253b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80253bc:	fb09 fb0b 	mul.w	fp, r9, fp
 80253c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253c4:	fb09 f904 	mul.w	r9, r9, r4
 80253c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253cc:	ea4f 251b 	mov.w	r5, fp, lsr #8
 80253d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80253d4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80253d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80253dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80253e0:	fb0c fc07 	mul.w	ip, ip, r7
 80253e4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80253e8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 80253ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80253f0:	445d      	add	r5, fp
 80253f2:	fb08 f404 	mul.w	r4, r8, r4
 80253f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253fa:	fb08 f800 	mul.w	r8, r8, r0
 80253fe:	0a2d      	lsrs	r5, r5, #8
 8025400:	0a20      	lsrs	r0, r4, #8
 8025402:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025406:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802540a:	fb07 f70a 	mul.w	r7, r7, sl
 802540e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025412:	4404      	add	r4, r0
 8025414:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025418:	0a24      	lsrs	r4, r4, #8
 802541a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802541e:	9801      	ldr	r0, [sp, #4]
 8025420:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025424:	fb03 cc00 	mla	ip, r3, r0, ip
 8025428:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802542c:	fb00 7606 	mla	r6, r0, r6, r7
 8025430:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8025434:	fb04 cc0e 	mla	ip, r4, lr, ip
 8025438:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802543c:	b280      	uxth	r0, r0
 802543e:	9c04      	ldr	r4, [sp, #16]
 8025440:	fb05 cc02 	mla	ip, r5, r2, ip
 8025444:	fb0e 6e08 	mla	lr, lr, r8, r6
 8025448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802544c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025450:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8025454:	fb02 ec0c 	mla	ip, r2, ip, lr
 8025458:	9a05      	ldr	r2, [sp, #20]
 802545a:	4342      	muls	r2, r0
 802545c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025460:	1c53      	adds	r3, r2, #1
 8025462:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025466:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802546a:	ea45 0c0c 	orr.w	ip, r5, ip
 802546e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025472:	fa5f f28c 	uxtb.w	r2, ip
 8025476:	b2db      	uxtb	r3, r3
 8025478:	fb14 f403 	smulbb	r4, r4, r3
 802547c:	fb02 4200 	mla	r2, r2, r0, r4
 8025480:	b292      	uxth	r2, r2
 8025482:	1c54      	adds	r4, r2, #1
 8025484:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025488:	9c03      	ldr	r4, [sp, #12]
 802548a:	fb14 f403 	smulbb	r4, r4, r3
 802548e:	1212      	asrs	r2, r2, #8
 8025490:	700a      	strb	r2, [r1, #0]
 8025492:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8025496:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802549a:	fb02 4200 	mla	r2, r2, r0, r4
 802549e:	b292      	uxth	r2, r2
 80254a0:	1c54      	adds	r4, r2, #1
 80254a2:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80254a6:	1212      	asrs	r2, r2, #8
 80254a8:	704a      	strb	r2, [r1, #1]
 80254aa:	9a02      	ldr	r2, [sp, #8]
 80254ac:	fb12 f303 	smulbb	r3, r2, r3
 80254b0:	fb0c 3c00 	mla	ip, ip, r0, r3
 80254b4:	fa1f fc8c 	uxth.w	ip, ip
 80254b8:	f10c 0301 	add.w	r3, ip, #1
 80254bc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80254c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80254c4:	f881 c002 	strb.w	ip, [r1, #2]
 80254c8:	b007      	add	sp, #28
 80254ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254ce:	bf00      	nop
 80254d0:	080301ff 	.word	0x080301ff
 80254d4:	080306f6 	.word	0x080306f6
 80254d8:	080302c8 	.word	0x080302c8

080254dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80254dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254e0:	ed2d 8b08 	vpush	{d8-d11}
 80254e4:	b09b      	sub	sp, #108	; 0x6c
 80254e6:	eeb0 aa40 	vmov.f32	s20, s0
 80254ea:	eef0 9a60 	vmov.f32	s19, s1
 80254ee:	930a      	str	r3, [sp, #40]	; 0x28
 80254f0:	eeb0 9a41 	vmov.f32	s18, s2
 80254f4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80254f8:	eeb0 8a62 	vmov.f32	s16, s5
 80254fc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 80254fe:	eef0 8a43 	vmov.f32	s17, s6
 8025502:	9312      	str	r3, [sp, #72]	; 0x48
 8025504:	eef0 ba44 	vmov.f32	s23, s8
 8025508:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 802550c:	eeb0 ba64 	vmov.f32	s22, s9
 8025510:	9019      	str	r0, [sp, #100]	; 0x64
 8025512:	eef0 aa45 	vmov.f32	s21, s10
 8025516:	9114      	str	r1, [sp, #80]	; 0x50
 8025518:	9317      	str	r3, [sp, #92]	; 0x5c
 802551a:	6868      	ldr	r0, [r5, #4]
 802551c:	9218      	str	r2, [sp, #96]	; 0x60
 802551e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8025520:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8025524:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025528:	fb00 1303 	mla	r3, r0, r3, r1
 802552c:	6829      	ldr	r1, [r5, #0]
 802552e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025532:	18cb      	adds	r3, r1, r3
 8025534:	930d      	str	r3, [sp, #52]	; 0x34
 8025536:	6813      	ldr	r3, [r2, #0]
 8025538:	9313      	str	r3, [sp, #76]	; 0x4c
 802553a:	6853      	ldr	r3, [r2, #4]
 802553c:	3304      	adds	r3, #4
 802553e:	9309      	str	r3, [sp, #36]	; 0x24
 8025540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025542:	2b00      	cmp	r3, #0
 8025544:	dc03      	bgt.n	802554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025546:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025548:	2b00      	cmp	r3, #0
 802554a:	f340 8352 	ble.w	8025bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025550:	2b00      	cmp	r3, #0
 8025552:	f340 81a2 	ble.w	802589a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8025556:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025558:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802555a:	1412      	asrs	r2, r2, #16
 802555c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025560:	d431      	bmi.n	80255c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8025562:	1c51      	adds	r1, r2, #1
 8025564:	428c      	cmp	r4, r1
 8025566:	dd31      	ble.n	80255cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025568:	2b00      	cmp	r3, #0
 802556a:	db2f      	blt.n	80255cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802556c:	1c59      	adds	r1, r3, #1
 802556e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025570:	4288      	cmp	r0, r1
 8025572:	dd2b      	ble.n	80255cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025576:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025578:	3b01      	subs	r3, #1
 802557a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 802557c:	fb02 1203 	mla	r2, r2, r3, r1
 8025580:	1412      	asrs	r2, r2, #16
 8025582:	d42d      	bmi.n	80255e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025584:	3201      	adds	r2, #1
 8025586:	4294      	cmp	r4, r2
 8025588:	dd2a      	ble.n	80255e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802558a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802558c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802558e:	fb02 1303 	mla	r3, r2, r3, r1
 8025592:	141b      	asrs	r3, r3, #16
 8025594:	d424      	bmi.n	80255e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025596:	3301      	adds	r3, #1
 8025598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802559a:	429a      	cmp	r2, r3
 802559c:	dd20      	ble.n	80255e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802559e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80255a0:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80255a4:	f103 0e03 	add.w	lr, r3, #3
 80255a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255aa:	9315      	str	r3, [sp, #84]	; 0x54
 80255ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80255ae:	2b00      	cmp	r3, #0
 80255b0:	f300 81de 	bgt.w	8025970 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80255b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80255b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80255bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255c0:	441a      	add	r2, r3
 80255c2:	920d      	str	r2, [sp, #52]	; 0x34
 80255c4:	e16b      	b.n	802589e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80255c6:	1c51      	adds	r1, r2, #1
 80255c8:	f040 8158 	bne.w	802587c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80255cc:	42a2      	cmp	r2, r4
 80255ce:	f280 8155 	bge.w	802587c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80255d2:	1c5a      	adds	r2, r3, #1
 80255d4:	f2c0 8152 	blt.w	802587c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80255d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80255da:	4293      	cmp	r3, r2
 80255dc:	f280 814e 	bge.w	802587c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80255e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255e2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80255e4:	9316      	str	r3, [sp, #88]	; 0x58
 80255e6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80255ea:	9315      	str	r3, [sp, #84]	; 0x54
 80255ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80255ee:	2b00      	cmp	r3, #0
 80255f0:	dde0      	ble.n	80255b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80255f2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80255f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80255f6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80255fa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80255fc:	141b      	asrs	r3, r3, #16
 80255fe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025602:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025604:	1412      	asrs	r2, r2, #16
 8025606:	f100 819a 	bmi.w	802593e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802560a:	1c55      	adds	r5, r2, #1
 802560c:	42ac      	cmp	r4, r5
 802560e:	f340 8198 	ble.w	8025942 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025612:	2b00      	cmp	r3, #0
 8025614:	f2c0 8195 	blt.w	8025942 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025618:	1c5d      	adds	r5, r3, #1
 802561a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802561c:	42af      	cmp	r7, r5
 802561e:	f340 8190 	ble.w	8025942 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025622:	fb03 2304 	mla	r3, r3, r4, r2
 8025626:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025628:	18d5      	adds	r5, r2, r3
 802562a:	5cd3      	ldrb	r3, [r2, r3]
 802562c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025632:	0e1f      	lsrs	r7, r3, #24
 8025634:	2800      	cmp	r0, #0
 8025636:	f000 8171 	beq.w	802591c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802563a:	f895 c001 	ldrb.w	ip, [r5, #1]
 802563e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8025642:	920e      	str	r2, [sp, #56]	; 0x38
 8025644:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025648:	2900      	cmp	r1, #0
 802564a:	f000 8172 	beq.w	8025932 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802564e:	eb05 0c04 	add.w	ip, r5, r4
 8025652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025654:	5d2d      	ldrb	r5, [r5, r4]
 8025656:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802565a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802565e:	950b      	str	r5, [sp, #44]	; 0x2c
 8025660:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025664:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025666:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802566a:	0e15      	lsrs	r5, r2, #24
 802566c:	920f      	str	r2, [sp, #60]	; 0x3c
 802566e:	b280      	uxth	r0, r0
 8025670:	b289      	uxth	r1, r1
 8025672:	fb00 fa01 	mul.w	sl, r0, r1
 8025676:	0100      	lsls	r0, r0, #4
 8025678:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802567c:	eba0 080a 	sub.w	r8, r0, sl
 8025680:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8025684:	b289      	uxth	r1, r1
 8025686:	fa1f f888 	uxth.w	r8, r8
 802568a:	1a52      	subs	r2, r2, r1
 802568c:	fb08 f00e 	mul.w	r0, r8, lr
 8025690:	b292      	uxth	r2, r2
 8025692:	fb02 0007 	mla	r0, r2, r7, r0
 8025696:	fb01 0009 	mla	r0, r1, r9, r0
 802569a:	fb0a 0005 	mla	r0, sl, r5, r0
 802569e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80256a2:	2800      	cmp	r0, #0
 80256a4:	f000 80dd 	beq.w	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80256a8:	2fff      	cmp	r7, #255	; 0xff
 80256aa:	d01a      	beq.n	80256e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80256ac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80256b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256b4:	fb07 fc0c 	mul.w	ip, r7, ip
 80256b8:	435f      	muls	r7, r3
 80256ba:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80256be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80256c2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80256c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256ca:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80256ce:	4463      	add	r3, ip
 80256d0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80256d4:	0a1b      	lsrs	r3, r3, #8
 80256d6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80256da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256de:	ea43 030b 	orr.w	r3, r3, fp
 80256e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80256e6:	d01e      	beq.n	8025726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80256e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80256ea:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80256ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80256f2:	fb0e fb0b 	mul.w	fp, lr, fp
 80256f6:	fb0e fe07 	mul.w	lr, lr, r7
 80256fa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80256fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025702:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025706:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802570a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802570e:	44dc      	add	ip, fp
 8025710:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025714:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025718:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802571c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025720:	ea4c 070e 	orr.w	r7, ip, lr
 8025724:	970e      	str	r7, [sp, #56]	; 0x38
 8025726:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802572a:	d01e      	beq.n	802576a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802572c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802572e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025732:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025736:	fb09 fe0e 	mul.w	lr, r9, lr
 802573a:	fb09 f907 	mul.w	r9, r9, r7
 802573e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025742:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025746:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802574a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802574e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025752:	44f4      	add	ip, lr
 8025754:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025758:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802575c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025760:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025764:	ea4c 0709 	orr.w	r7, ip, r9
 8025768:	970b      	str	r7, [sp, #44]	; 0x2c
 802576a:	2dff      	cmp	r5, #255	; 0xff
 802576c:	d01c      	beq.n	80257a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802576e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025770:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025774:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025778:	fb05 fe0e 	mul.w	lr, r5, lr
 802577c:	437d      	muls	r5, r7
 802577e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025782:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025786:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802578a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802578e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8025792:	44f4      	add	ip, lr
 8025794:	0a2d      	lsrs	r5, r5, #8
 8025796:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802579a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802579e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257a2:	ea4c 0505 	orr.w	r5, ip, r5
 80257a6:	950f      	str	r5, [sp, #60]	; 0x3c
 80257a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80257aa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80257ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80257b6:	fb08 f505 	mul.w	r5, r8, r5
 80257ba:	fb02 5507 	mla	r5, r2, r7, r5
 80257be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80257c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80257c4:	fb01 5507 	mla	r5, r1, r7, r5
 80257c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80257ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80257ce:	fb0a 5507 	mla	r5, sl, r7, r5
 80257d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80257d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257d8:	0a2d      	lsrs	r5, r5, #8
 80257da:	fb08 f807 	mul.w	r8, r8, r7
 80257de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80257e2:	fb02 8303 	mla	r3, r2, r3, r8
 80257e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80257e8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80257ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80257ee:	fb01 330c 	mla	r3, r1, ip, r3
 80257f2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80257f6:	fb0a 3a01 	mla	sl, sl, r1, r3
 80257fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80257fc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80257fe:	4343      	muls	r3, r0
 8025800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025804:	1c58      	adds	r0, r3, #1
 8025806:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802580a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802580e:	ea45 050a 	orr.w	r5, r5, sl
 8025812:	7833      	ldrb	r3, [r6, #0]
 8025814:	b2ea      	uxtb	r2, r5
 8025816:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802581a:	fb12 f201 	smulbb	r2, r2, r1
 802581e:	b2c0      	uxtb	r0, r0
 8025820:	fb03 2300 	mla	r3, r3, r0, r2
 8025824:	b29b      	uxth	r3, r3
 8025826:	1c5a      	adds	r2, r3, #1
 8025828:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802582c:	7872      	ldrb	r2, [r6, #1]
 802582e:	fb12 f200 	smulbb	r2, r2, r0
 8025832:	121b      	asrs	r3, r3, #8
 8025834:	7033      	strb	r3, [r6, #0]
 8025836:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802583a:	0c2d      	lsrs	r5, r5, #16
 802583c:	fb03 2301 	mla	r3, r3, r1, r2
 8025840:	b29b      	uxth	r3, r3
 8025842:	1c5a      	adds	r2, r3, #1
 8025844:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025848:	121b      	asrs	r3, r3, #8
 802584a:	7073      	strb	r3, [r6, #1]
 802584c:	78b3      	ldrb	r3, [r6, #2]
 802584e:	fb13 f000 	smulbb	r0, r3, r0
 8025852:	fb05 0501 	mla	r5, r5, r1, r0
 8025856:	b2ad      	uxth	r5, r5
 8025858:	1c6b      	adds	r3, r5, #1
 802585a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802585e:	122d      	asrs	r5, r5, #8
 8025860:	70b5      	strb	r5, [r6, #2]
 8025862:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025864:	3603      	adds	r6, #3
 8025866:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025868:	4413      	add	r3, r2
 802586a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802586c:	932d      	str	r3, [sp, #180]	; 0xb4
 802586e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025870:	4413      	add	r3, r2
 8025872:	932e      	str	r3, [sp, #184]	; 0xb8
 8025874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025876:	3b01      	subs	r3, #1
 8025878:	9316      	str	r3, [sp, #88]	; 0x58
 802587a:	e6b7      	b.n	80255ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802587c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802587e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025880:	4413      	add	r3, r2
 8025882:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025884:	932d      	str	r3, [sp, #180]	; 0xb4
 8025886:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025888:	4413      	add	r3, r2
 802588a:	932e      	str	r3, [sp, #184]	; 0xb8
 802588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802588e:	3b01      	subs	r3, #1
 8025890:	930a      	str	r3, [sp, #40]	; 0x28
 8025892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025894:	3303      	adds	r3, #3
 8025896:	930d      	str	r3, [sp, #52]	; 0x34
 8025898:	e659      	b.n	802554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802589a:	f47f ae6b 	bne.w	8025574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802589e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80258a0:	2b00      	cmp	r3, #0
 80258a2:	f340 81a6 	ble.w	8025bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80258a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80258aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258ac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80258b0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80258b4:	eef0 6a48 	vmov.f32	s13, s16
 80258b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80258bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80258c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258c4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80258c8:	eef0 6a68 	vmov.f32	s13, s17
 80258cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258d0:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80258d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80258d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80258dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80258e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80258e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80258e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80258ec:	ee18 2a10 	vmov	r2, s16
 80258f0:	eeb0 8a47 	vmov.f32	s16, s14
 80258f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80258f8:	ee18 2a90 	vmov	r2, s17
 80258fc:	932f      	str	r3, [sp, #188]	; 0xbc
 80258fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025900:	eef0 8a67 	vmov.f32	s17, s15
 8025904:	fb92 f3f3 	sdiv	r3, r2, r3
 8025908:	9330      	str	r3, [sp, #192]	; 0xc0
 802590a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802590c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802590e:	3b01      	subs	r3, #1
 8025910:	9314      	str	r3, [sp, #80]	; 0x50
 8025912:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025914:	bf08      	it	eq
 8025916:	4613      	moveq	r3, r2
 8025918:	930a      	str	r3, [sp, #40]	; 0x28
 802591a:	e611      	b.n	8025540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802591c:	b161      	cbz	r1, 8025938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802591e:	5d2a      	ldrb	r2, [r5, r4]
 8025920:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025922:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025926:	25ff      	movs	r5, #255	; 0xff
 8025928:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802592c:	920b      	str	r2, [sp, #44]	; 0x2c
 802592e:	46ae      	mov	lr, r5
 8025930:	e69d      	b.n	802566e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8025932:	25ff      	movs	r5, #255	; 0xff
 8025934:	46a9      	mov	r9, r5
 8025936:	e69a      	b.n	802566e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8025938:	25ff      	movs	r5, #255	; 0xff
 802593a:	46a9      	mov	r9, r5
 802593c:	e7f7      	b.n	802592e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 802593e:	1c57      	adds	r7, r2, #1
 8025940:	d18f      	bne.n	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025942:	4294      	cmp	r4, r2
 8025944:	dd8d      	ble.n	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025946:	1c5d      	adds	r5, r3, #1
 8025948:	db8b      	blt.n	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802594a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802594c:	429d      	cmp	r5, r3
 802594e:	dd88      	ble.n	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025950:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8025952:	9202      	str	r2, [sp, #8]
 8025954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025956:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802595a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802595c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802595e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025962:	e9cd 4300 	strd	r4, r3, [sp]
 8025966:	4631      	mov	r1, r6
 8025968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802596a:	f7ff fc63 	bl	8025234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802596e:	e778      	b.n	8025862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025970:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025972:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025974:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025978:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802597a:	1412      	asrs	r2, r2, #16
 802597c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8025980:	141b      	asrs	r3, r3, #16
 8025982:	fb04 2303 	mla	r3, r4, r3, r2
 8025986:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025988:	18d5      	adds	r5, r2, r3
 802598a:	5cd3      	ldrb	r3, [r2, r3]
 802598c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025992:	0e1e      	lsrs	r6, r3, #24
 8025994:	2900      	cmp	r1, #0
 8025996:	f000 811b 	beq.w	8025bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802599a:	786a      	ldrb	r2, [r5, #1]
 802599c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802599e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80259a2:	9210      	str	r2, [sp, #64]	; 0x40
 80259a4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80259a8:	2800      	cmp	r0, #0
 80259aa:	f000 811c 	beq.w	8025be6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80259ae:	192a      	adds	r2, r5, r4
 80259b0:	5d2d      	ldrb	r5, [r5, r4]
 80259b2:	7852      	ldrb	r2, [r2, #1]
 80259b4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80259b8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80259bc:	950c      	str	r5, [sp, #48]	; 0x30
 80259be:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80259c2:	0e15      	lsrs	r5, r2, #24
 80259c4:	9211      	str	r2, [sp, #68]	; 0x44
 80259c6:	b289      	uxth	r1, r1
 80259c8:	b280      	uxth	r0, r0
 80259ca:	fb01 fa00 	mul.w	sl, r1, r0
 80259ce:	0109      	lsls	r1, r1, #4
 80259d0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80259d4:	eba1 080a 	sub.w	r8, r1, sl
 80259d8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80259dc:	b280      	uxth	r0, r0
 80259de:	fa1f f888 	uxth.w	r8, r8
 80259e2:	1a12      	subs	r2, r2, r0
 80259e4:	fb08 f10c 	mul.w	r1, r8, ip
 80259e8:	b292      	uxth	r2, r2
 80259ea:	fb02 1106 	mla	r1, r2, r6, r1
 80259ee:	fb00 1109 	mla	r1, r0, r9, r1
 80259f2:	fb0a 1105 	mla	r1, sl, r5, r1
 80259f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80259fa:	2900      	cmp	r1, #0
 80259fc:	f000 80da 	beq.w	8025bb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8025a00:	2eff      	cmp	r6, #255	; 0xff
 8025a02:	d016      	beq.n	8025a32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8025a04:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025a08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a0c:	4377      	muls	r7, r6
 8025a0e:	435e      	muls	r6, r3
 8025a10:	0a3b      	lsrs	r3, r7, #8
 8025a12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a1a:	443b      	add	r3, r7
 8025a1c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025a20:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025a24:	0a1b      	lsrs	r3, r3, #8
 8025a26:	0a3f      	lsrs	r7, r7, #8
 8025a28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a2c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025a30:	433b      	orrs	r3, r7
 8025a32:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025a36:	d01d      	beq.n	8025a74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8025a38:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025a3a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025a3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025a44:	fb0c f606 	mul.w	r6, ip, r6
 8025a48:	fb0c fc07 	mul.w	ip, ip, r7
 8025a4c:	0a37      	lsrs	r7, r6, #8
 8025a4e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025a52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a56:	4437      	add	r7, r6
 8025a58:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8025a5c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8025a60:	0a3f      	lsrs	r7, r7, #8
 8025a62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025a6e:	ea47 060c 	orr.w	r6, r7, ip
 8025a72:	9610      	str	r6, [sp, #64]	; 0x40
 8025a74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025a78:	d01d      	beq.n	8025ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8025a7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025a7c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025a80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025a84:	fb09 fc0c 	mul.w	ip, r9, ip
 8025a88:	fb09 f906 	mul.w	r9, r9, r6
 8025a8c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8025a90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025a94:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8025a98:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a9c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8025aa0:	4467      	add	r7, ip
 8025aa2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025aa6:	0a3f      	lsrs	r7, r7, #8
 8025aa8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025aac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025ab0:	ea47 0609 	orr.w	r6, r7, r9
 8025ab4:	960c      	str	r6, [sp, #48]	; 0x30
 8025ab6:	2dff      	cmp	r5, #255	; 0xff
 8025ab8:	d01a      	beq.n	8025af0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8025aba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8025abc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025ac0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025ac4:	fb05 fc0c 	mul.w	ip, r5, ip
 8025ac8:	4375      	muls	r5, r6
 8025aca:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8025ace:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025ad2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025ad6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025ada:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025ade:	4467      	add	r7, ip
 8025ae0:	0a2d      	lsrs	r5, r5, #8
 8025ae2:	0a3f      	lsrs	r7, r7, #8
 8025ae4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025ae8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025aec:	433d      	orrs	r5, r7
 8025aee:	9511      	str	r5, [sp, #68]	; 0x44
 8025af0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025af2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025afa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025afe:	fb08 f505 	mul.w	r5, r8, r5
 8025b02:	fb02 5506 	mla	r5, r2, r6, r5
 8025b06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025b08:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025b0c:	fb00 5506 	mla	r5, r0, r6, r5
 8025b10:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8025b12:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025b16:	fb0a 5506 	mla	r5, sl, r6, r5
 8025b1a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025b1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b20:	0a2d      	lsrs	r5, r5, #8
 8025b22:	fb08 f806 	mul.w	r8, r8, r6
 8025b26:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025b2a:	fb02 8303 	mla	r3, r2, r3, r8
 8025b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025b30:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8025b34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025b36:	fb00 3307 	mla	r3, r0, r7, r3
 8025b3a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025b3e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8025b42:	fb01 f30b 	mul.w	r3, r1, fp
 8025b46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b4a:	1c59      	adds	r1, r3, #1
 8025b4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025b50:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025b54:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025b58:	ea45 050c 	orr.w	r5, r5, ip
 8025b5c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025b60:	b2ea      	uxtb	r2, r5
 8025b62:	b2c9      	uxtb	r1, r1
 8025b64:	fb12 f20b 	smulbb	r2, r2, fp
 8025b68:	fb03 2301 	mla	r3, r3, r1, r2
 8025b6c:	b29b      	uxth	r3, r3
 8025b6e:	1c5a      	adds	r2, r3, #1
 8025b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025b74:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025b78:	fb12 f201 	smulbb	r2, r2, r1
 8025b7c:	121b      	asrs	r3, r3, #8
 8025b7e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025b82:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025b86:	0c2d      	lsrs	r5, r5, #16
 8025b88:	fb03 230b 	mla	r3, r3, fp, r2
 8025b8c:	b29b      	uxth	r3, r3
 8025b8e:	1c5a      	adds	r2, r3, #1
 8025b90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025b94:	121b      	asrs	r3, r3, #8
 8025b96:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025b9a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025b9e:	fb13 f101 	smulbb	r1, r3, r1
 8025ba2:	fb05 150b 	mla	r5, r5, fp, r1
 8025ba6:	b2ad      	uxth	r5, r5
 8025ba8:	1c69      	adds	r1, r5, #1
 8025baa:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025bae:	122d      	asrs	r5, r5, #8
 8025bb0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025bb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025bb6:	f10e 0e03 	add.w	lr, lr, #3
 8025bba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025bbc:	4413      	add	r3, r2
 8025bbe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025bc0:	932d      	str	r3, [sp, #180]	; 0xb4
 8025bc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025bc4:	4413      	add	r3, r2
 8025bc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8025bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025bca:	3b01      	subs	r3, #1
 8025bcc:	9315      	str	r3, [sp, #84]	; 0x54
 8025bce:	e4ed      	b.n	80255ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8025bd0:	b160      	cbz	r0, 8025bec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8025bd2:	5d2a      	ldrb	r2, [r5, r4]
 8025bd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025bd6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025bda:	25ff      	movs	r5, #255	; 0xff
 8025bdc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8025be0:	920c      	str	r2, [sp, #48]	; 0x30
 8025be2:	46ac      	mov	ip, r5
 8025be4:	e6ef      	b.n	80259c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8025be6:	25ff      	movs	r5, #255	; 0xff
 8025be8:	46a9      	mov	r9, r5
 8025bea:	e6ec      	b.n	80259c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8025bec:	25ff      	movs	r5, #255	; 0xff
 8025bee:	46a9      	mov	r9, r5
 8025bf0:	e7f7      	b.n	8025be2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8025bf2:	b01b      	add	sp, #108	; 0x6c
 8025bf4:	ecbd 8b08 	vpop	{d8-d11}
 8025bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025bfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c00:	b085      	sub	sp, #20
 8025c02:	7888      	ldrb	r0, [r1, #2]
 8025c04:	4692      	mov	sl, r2
 8025c06:	4698      	mov	r8, r3
 8025c08:	9000      	str	r0, [sp, #0]
 8025c0a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025c0e:	7848      	ldrb	r0, [r1, #1]
 8025c10:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8025c14:	9001      	str	r0, [sp, #4]
 8025c16:	7808      	ldrb	r0, [r1, #0]
 8025c18:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8025c1c:	9002      	str	r0, [sp, #8]
 8025c1e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025c22:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8025c26:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8025c2a:	fb04 560c 	mla	r6, r4, ip, r5
 8025c2e:	2c00      	cmp	r4, #0
 8025c30:	eb02 0e06 	add.w	lr, r2, r6
 8025c34:	9a00      	ldr	r2, [sp, #0]
 8025c36:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025c3a:	9a01      	ldr	r2, [sp, #4]
 8025c3c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8025c40:	db3e      	blt.n	8025cc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8025c42:	45a1      	cmp	r9, r4
 8025c44:	dd3c      	ble.n	8025cc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8025c46:	2d00      	cmp	r5, #0
 8025c48:	db38      	blt.n	8025cbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8025c4a:	45ac      	cmp	ip, r5
 8025c4c:	dd36      	ble.n	8025cbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8025c4e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8025c52:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8025c56:	1c6e      	adds	r6, r5, #1
 8025c58:	d435      	bmi.n	8025cc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8025c5a:	45b4      	cmp	ip, r6
 8025c5c:	dd33      	ble.n	8025cc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8025c5e:	b393      	cbz	r3, 8025cc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8025c60:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8025c64:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8025c68:	3401      	adds	r4, #1
 8025c6a:	d430      	bmi.n	8025cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8025c6c:	45a1      	cmp	r9, r4
 8025c6e:	dd2e      	ble.n	8025cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8025c70:	b36f      	cbz	r7, 8025cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8025c72:	2d00      	cmp	r5, #0
 8025c74:	db29      	blt.n	8025cca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8025c76:	45ac      	cmp	ip, r5
 8025c78:	dd27      	ble.n	8025cca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8025c7a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8025c7e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8025c82:	3501      	adds	r5, #1
 8025c84:	d407      	bmi.n	8025c96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025c86:	45ac      	cmp	ip, r5
 8025c88:	dd05      	ble.n	8025c96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025c8a:	b123      	cbz	r3, 8025c96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025c8c:	44f4      	add	ip, lr
 8025c8e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025c92:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8025c96:	2b0f      	cmp	r3, #15
 8025c98:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025c9c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025ca0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025ca4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8025ca8:	d801      	bhi.n	8025cae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8025caa:	2f0f      	cmp	r7, #15
 8025cac:	d911      	bls.n	8025cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8025cae:	4b76      	ldr	r3, [pc, #472]	; (8025e88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8025cb0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025cb4:	4a75      	ldr	r2, [pc, #468]	; (8025e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8025cb6:	4876      	ldr	r0, [pc, #472]	; (8025e90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8025cb8:	f004 ff94 	bl	802abe4 <__assert_func>
 8025cbc:	4602      	mov	r2, r0
 8025cbe:	e7ca      	b.n	8025c56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8025cc0:	4606      	mov	r6, r0
 8025cc2:	4602      	mov	r2, r0
 8025cc4:	e7d0      	b.n	8025c68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8025cc6:	4606      	mov	r6, r0
 8025cc8:	e7ce      	b.n	8025c68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8025cca:	4604      	mov	r4, r0
 8025ccc:	e7d9      	b.n	8025c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8025cce:	4604      	mov	r4, r0
 8025cd0:	e7e1      	b.n	8025c96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025cd2:	b29b      	uxth	r3, r3
 8025cd4:	b2bf      	uxth	r7, r7
 8025cd6:	fb07 fe03 	mul.w	lr, r7, r3
 8025cda:	011b      	lsls	r3, r3, #4
 8025cdc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025ce0:	eba3 0c0e 	sub.w	ip, r3, lr
 8025ce4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025ce8:	b2bf      	uxth	r7, r7
 8025cea:	fa1f fc8c 	uxth.w	ip, ip
 8025cee:	1bed      	subs	r5, r5, r7
 8025cf0:	fb0c f30a 	mul.w	r3, ip, sl
 8025cf4:	b2ad      	uxth	r5, r5
 8025cf6:	fb05 330b 	mla	r3, r5, fp, r3
 8025cfa:	fb07 3309 	mla	r3, r7, r9, r3
 8025cfe:	fb0e 3308 	mla	r3, lr, r8, r3
 8025d02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d06:	9303      	str	r3, [sp, #12]
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	f000 80b9 	beq.w	8025e80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8025d0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025d12:	d018      	beq.n	8025d46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8025d14:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025d18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025d1c:	fb0b f303 	mul.w	r3, fp, r3
 8025d20:	fb0b fb02 	mul.w	fp, fp, r2
 8025d24:	0a1a      	lsrs	r2, r3, #8
 8025d26:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8025d2a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025d2e:	441a      	add	r2, r3
 8025d30:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8025d34:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8025d38:	0a12      	lsrs	r2, r2, #8
 8025d3a:	0a1b      	lsrs	r3, r3, #8
 8025d3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025d40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d44:	431a      	orrs	r2, r3
 8025d46:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025d4a:	d019      	beq.n	8025d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8025d4c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8025d50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025d54:	fb0a fb0b 	mul.w	fp, sl, fp
 8025d58:	fb0a fa06 	mul.w	sl, sl, r6
 8025d5c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025d60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d64:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8025d68:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d6c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025d70:	445e      	add	r6, fp
 8025d72:	0a1b      	lsrs	r3, r3, #8
 8025d74:	0a36      	lsrs	r6, r6, #8
 8025d76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d7e:	431e      	orrs	r6, r3
 8025d80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025d84:	d019      	beq.n	8025dba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8025d86:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025d8a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025d8e:	fb09 fa0a 	mul.w	sl, r9, sl
 8025d92:	fb09 f904 	mul.w	r9, r9, r4
 8025d96:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025d9a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025d9e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8025da2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025da6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8025daa:	4454      	add	r4, sl
 8025dac:	0a1b      	lsrs	r3, r3, #8
 8025dae:	0a24      	lsrs	r4, r4, #8
 8025db0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025db4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025db8:	431c      	orrs	r4, r3
 8025dba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025dbe:	d019      	beq.n	8025df4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8025dc0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025dc4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025dc8:	fb08 f909 	mul.w	r9, r8, r9
 8025dcc:	fb08 f800 	mul.w	r8, r8, r0
 8025dd0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8025dd4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025dd8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8025ddc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025de0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8025de4:	4448      	add	r0, r9
 8025de6:	0a1b      	lsrs	r3, r3, #8
 8025de8:	0a00      	lsrs	r0, r0, #8
 8025dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025dee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025df2:	4318      	orrs	r0, r3
 8025df4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025df8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025dfc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025e00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025e04:	fb0c f808 	mul.w	r8, ip, r8
 8025e08:	fb0c f606 	mul.w	r6, ip, r6
 8025e0c:	fb05 8803 	mla	r8, r5, r3, r8
 8025e10:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8025e14:	fb05 6202 	mla	r2, r5, r2, r6
 8025e18:	fb07 8803 	mla	r8, r7, r3, r8
 8025e1c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025e20:	fb0e 8303 	mla	r3, lr, r3, r8
 8025e24:	0a1b      	lsrs	r3, r3, #8
 8025e26:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8025e2a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8025e2e:	9c02      	ldr	r4, [sp, #8]
 8025e30:	fb07 2703 	mla	r7, r7, r3, r2
 8025e34:	9a03      	ldr	r2, [sp, #12]
 8025e36:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025e3a:	43d2      	mvns	r2, r2
 8025e3c:	fb0e 7303 	mla	r3, lr, r3, r7
 8025e40:	b2d2      	uxtb	r2, r2
 8025e42:	0a1b      	lsrs	r3, r3, #8
 8025e44:	4354      	muls	r4, r2
 8025e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e4a:	1c60      	adds	r0, r4, #1
 8025e4c:	ea48 0303 	orr.w	r3, r8, r3
 8025e50:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025e54:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025e58:	7008      	strb	r0, [r1, #0]
 8025e5a:	9801      	ldr	r0, [sp, #4]
 8025e5c:	4350      	muls	r0, r2
 8025e5e:	1c44      	adds	r4, r0, #1
 8025e60:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8025e64:	0a18      	lsrs	r0, r3, #8
 8025e66:	0c1b      	lsrs	r3, r3, #16
 8025e68:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025e6c:	7048      	strb	r0, [r1, #1]
 8025e6e:	9800      	ldr	r0, [sp, #0]
 8025e70:	4350      	muls	r0, r2
 8025e72:	4602      	mov	r2, r0
 8025e74:	3001      	adds	r0, #1
 8025e76:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025e7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025e7e:	708b      	strb	r3, [r1, #2]
 8025e80:	b005      	add	sp, #20
 8025e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e86:	bf00      	nop
 8025e88:	080301ff 	.word	0x080301ff
 8025e8c:	080306f6 	.word	0x080306f6
 8025e90:	080302c8 	.word	0x080302c8

08025e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e98:	ed2d 8b08 	vpush	{d8-d11}
 8025e9c:	b097      	sub	sp, #92	; 0x5c
 8025e9e:	eeb0 aa40 	vmov.f32	s20, s0
 8025ea2:	eef0 9a60 	vmov.f32	s19, s1
 8025ea6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8025ea8:	eeb0 9a41 	vmov.f32	s18, s2
 8025eac:	9308      	str	r3, [sp, #32]
 8025eae:	eeb0 8a62 	vmov.f32	s16, s5
 8025eb2:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025eb6:	eef0 8a43 	vmov.f32	s17, s6
 8025eba:	9015      	str	r0, [sp, #84]	; 0x54
 8025ebc:	eef0 ba44 	vmov.f32	s23, s8
 8025ec0:	6868      	ldr	r0, [r5, #4]
 8025ec2:	eeb0 ba64 	vmov.f32	s22, s9
 8025ec6:	9112      	str	r1, [sp, #72]	; 0x48
 8025ec8:	eef0 aa45 	vmov.f32	s21, s10
 8025ecc:	9310      	str	r3, [sp, #64]	; 0x40
 8025ece:	9214      	str	r2, [sp, #80]	; 0x50
 8025ed0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8025ed2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8025ed6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025eda:	fb00 1303 	mla	r3, r0, r3, r1
 8025ede:	6829      	ldr	r1, [r5, #0]
 8025ee0:	6855      	ldr	r5, [r2, #4]
 8025ee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ee6:	3504      	adds	r5, #4
 8025ee8:	18cb      	adds	r3, r1, r3
 8025eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8025eec:	6813      	ldr	r3, [r2, #0]
 8025eee:	9311      	str	r3, [sp, #68]	; 0x44
 8025ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025ef2:	2b00      	cmp	r3, #0
 8025ef4:	dc03      	bgt.n	8025efe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8025ef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025ef8:	2b00      	cmp	r3, #0
 8025efa:	f340 8333 	ble.w	8026564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8025efe:	9b08      	ldr	r3, [sp, #32]
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	f340 8190 	ble.w	8026226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8025f06:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025f08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f0a:	1412      	asrs	r2, r2, #16
 8025f0c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025f10:	d42f      	bmi.n	8025f72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025f12:	1c51      	adds	r1, r2, #1
 8025f14:	428c      	cmp	r4, r1
 8025f16:	dd2f      	ble.n	8025f78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	db2d      	blt.n	8025f78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025f1c:	1c59      	adds	r1, r3, #1
 8025f1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025f20:	4288      	cmp	r0, r1
 8025f22:	dd29      	ble.n	8025f78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025f24:	9b08      	ldr	r3, [sp, #32]
 8025f26:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025f28:	3b01      	subs	r3, #1
 8025f2a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025f2c:	fb02 1203 	mla	r2, r2, r3, r1
 8025f30:	1412      	asrs	r2, r2, #16
 8025f32:	d42b      	bmi.n	8025f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025f34:	3201      	adds	r2, #1
 8025f36:	4294      	cmp	r4, r2
 8025f38:	dd28      	ble.n	8025f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025f3a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025f3c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025f3e:	fb02 1303 	mla	r3, r2, r3, r1
 8025f42:	141b      	asrs	r3, r3, #16
 8025f44:	d422      	bmi.n	8025f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025f46:	3301      	adds	r3, #1
 8025f48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025f4a:	429a      	cmp	r2, r3
 8025f4c:	dd1e      	ble.n	8025f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f50:	f103 0803 	add.w	r8, r3, #3
 8025f54:	9b08      	ldr	r3, [sp, #32]
 8025f56:	9307      	str	r3, [sp, #28]
 8025f58:	9b07      	ldr	r3, [sp, #28]
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	f300 81ca 	bgt.w	80262f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8025f60:	9b08      	ldr	r3, [sp, #32]
 8025f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025f64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f6c:	441a      	add	r2, r3
 8025f6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8025f70:	e15b      	b.n	802622a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8025f72:	1c51      	adds	r1, r2, #1
 8025f74:	f040 8148 	bne.w	8026208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025f78:	42a2      	cmp	r2, r4
 8025f7a:	f280 8145 	bge.w	8026208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025f7e:	1c5a      	adds	r2, r3, #1
 8025f80:	f2c0 8142 	blt.w	8026208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025f84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025f86:	4293      	cmp	r3, r2
 8025f88:	f280 813e 	bge.w	8026208 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025f8c:	9b08      	ldr	r3, [sp, #32]
 8025f8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f92:	9307      	str	r3, [sp, #28]
 8025f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	dde2      	ble.n	8025f60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8025f9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025f9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f9e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025fa2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025fa4:	141b      	asrs	r3, r3, #16
 8025fa6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8025faa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025fac:	1412      	asrs	r2, r2, #16
 8025fae:	f100 818b 	bmi.w	80262c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8025fb2:	1c56      	adds	r6, r2, #1
 8025fb4:	42b4      	cmp	r4, r6
 8025fb6:	f340 8189 	ble.w	80262cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	f2c0 8186 	blt.w	80262cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025fc0:	1c5e      	adds	r6, r3, #1
 8025fc2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025fc4:	42b7      	cmp	r7, r6
 8025fc6:	f340 8181 	ble.w	80262cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025fca:	fb03 2304 	mla	r3, r3, r4, r2
 8025fce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025fd0:	18d6      	adds	r6, r2, r3
 8025fd2:	5cd3      	ldrb	r3, [r2, r3]
 8025fd4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025fd8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025fdc:	2900      	cmp	r1, #0
 8025fde:	f000 8163 	beq.w	80262a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025fe2:	7872      	ldrb	r2, [r6, #1]
 8025fe4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025fe8:	920c      	str	r2, [sp, #48]	; 0x30
 8025fea:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025fee:	2800      	cmp	r0, #0
 8025ff0:	f000 8164 	beq.w	80262bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8025ff4:	1932      	adds	r2, r6, r4
 8025ff6:	5d36      	ldrb	r6, [r6, r4]
 8025ff8:	7852      	ldrb	r2, [r2, #1]
 8025ffa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8025ffe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026002:	9609      	str	r6, [sp, #36]	; 0x24
 8026004:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026008:	0e16      	lsrs	r6, r2, #24
 802600a:	920d      	str	r2, [sp, #52]	; 0x34
 802600c:	b289      	uxth	r1, r1
 802600e:	b280      	uxth	r0, r0
 8026010:	fb01 fb00 	mul.w	fp, r1, r0
 8026014:	0109      	lsls	r1, r1, #4
 8026016:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802601a:	eba1 090b 	sub.w	r9, r1, fp
 802601e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8026022:	b280      	uxth	r0, r0
 8026024:	fa1f f989 	uxth.w	r9, r9
 8026028:	1a12      	subs	r2, r2, r0
 802602a:	fb09 f108 	mul.w	r1, r9, r8
 802602e:	b292      	uxth	r2, r2
 8026030:	fb02 110c 	mla	r1, r2, ip, r1
 8026034:	fb00 110a 	mla	r1, r0, sl, r1
 8026038:	fb0b 1106 	mla	r1, fp, r6, r1
 802603c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026040:	2900      	cmp	r1, #0
 8026042:	f000 80d2 	beq.w	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8026046:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802604a:	d01b      	beq.n	8026084 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 802604c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026050:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026054:	fb0c fe0e 	mul.w	lr, ip, lr
 8026058:	fb0c fc03 	mul.w	ip, ip, r3
 802605c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8026060:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026064:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026068:	4473      	add	r3, lr
 802606a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802606e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8026072:	0a1b      	lsrs	r3, r3, #8
 8026074:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026078:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802607c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026080:	ea43 030e 	orr.w	r3, r3, lr
 8026084:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026088:	d01e      	beq.n	80260c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 802608a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802608c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026090:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8026094:	fb08 fc0c 	mul.w	ip, r8, ip
 8026098:	fb08 f80e 	mul.w	r8, r8, lr
 802609c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80260a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80260a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260a8:	44e6      	add	lr, ip
 80260aa:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80260ae:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80260b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260b6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80260ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260be:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80260c2:	ea4e 0708 	orr.w	r7, lr, r8
 80260c6:	970c      	str	r7, [sp, #48]	; 0x30
 80260c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80260cc:	d01e      	beq.n	802610c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80260ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80260d0:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80260d4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80260d8:	fb0a f808 	mul.w	r8, sl, r8
 80260dc:	fb0a fa0c 	mul.w	sl, sl, ip
 80260e0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80260e4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80260e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80260ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80260f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80260f4:	44c6      	add	lr, r8
 80260f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80260fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80260fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026102:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026106:	ea4e 070a 	orr.w	r7, lr, sl
 802610a:	9709      	str	r7, [sp, #36]	; 0x24
 802610c:	2eff      	cmp	r6, #255	; 0xff
 802610e:	d01d      	beq.n	802614c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8026110:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8026112:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8026116:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802611a:	fb06 f808 	mul.w	r8, r6, r8
 802611e:	fb06 f60c 	mul.w	r6, r6, ip
 8026122:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8026126:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802612a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802612e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026132:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026136:	44c6      	add	lr, r8
 8026138:	0a36      	lsrs	r6, r6, #8
 802613a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802613e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026142:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026146:	ea4e 0606 	orr.w	r6, lr, r6
 802614a:	960d      	str	r6, [sp, #52]	; 0x34
 802614c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802614e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026152:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026158:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802615c:	43c9      	mvns	r1, r1
 802615e:	fb09 f606 	mul.w	r6, r9, r6
 8026162:	b2c9      	uxtb	r1, r1
 8026164:	fb02 660c 	mla	r6, r2, ip, r6
 8026168:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802616c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802616e:	fb00 660c 	mla	r6, r0, ip, r6
 8026172:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026176:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026178:	fb0b 660c 	mla	r6, fp, ip, r6
 802617c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8026180:	fb09 f90c 	mul.w	r9, r9, ip
 8026184:	0a36      	lsrs	r6, r6, #8
 8026186:	fb02 9303 	mla	r3, r2, r3, r9
 802618a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802618c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026190:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8026194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026196:	fb00 330e 	mla	r3, r0, lr, r3
 802619a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802619e:	fb0b 3b00 	mla	fp, fp, r0, r3
 80261a2:	9b07      	ldr	r3, [sp, #28]
 80261a4:	781b      	ldrb	r3, [r3, #0]
 80261a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80261aa:	fb03 f201 	mul.w	r2, r3, r1
 80261ae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80261b2:	1c53      	adds	r3, r2, #1
 80261b4:	ea46 060b 	orr.w	r6, r6, fp
 80261b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80261bc:	9a07      	ldr	r2, [sp, #28]
 80261be:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80261c2:	7013      	strb	r3, [r2, #0]
 80261c4:	7853      	ldrb	r3, [r2, #1]
 80261c6:	434b      	muls	r3, r1
 80261c8:	1c5a      	adds	r2, r3, #1
 80261ca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80261ce:	0a33      	lsrs	r3, r6, #8
 80261d0:	0c36      	lsrs	r6, r6, #16
 80261d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80261d6:	9a07      	ldr	r2, [sp, #28]
 80261d8:	7053      	strb	r3, [r2, #1]
 80261da:	7893      	ldrb	r3, [r2, #2]
 80261dc:	4359      	muls	r1, r3
 80261de:	1c4b      	adds	r3, r1, #1
 80261e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80261e4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80261e8:	7096      	strb	r6, [r2, #2]
 80261ea:	9b07      	ldr	r3, [sp, #28]
 80261ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80261ee:	3303      	adds	r3, #3
 80261f0:	9307      	str	r3, [sp, #28]
 80261f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80261f4:	4413      	add	r3, r2
 80261f6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80261f8:	9329      	str	r3, [sp, #164]	; 0xa4
 80261fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80261fc:	4413      	add	r3, r2
 80261fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8026200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026202:	3b01      	subs	r3, #1
 8026204:	9313      	str	r3, [sp, #76]	; 0x4c
 8026206:	e6c5      	b.n	8025f94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8026208:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802620a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802620c:	4413      	add	r3, r2
 802620e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026210:	9329      	str	r3, [sp, #164]	; 0xa4
 8026212:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026214:	4413      	add	r3, r2
 8026216:	932a      	str	r3, [sp, #168]	; 0xa8
 8026218:	9b08      	ldr	r3, [sp, #32]
 802621a:	3b01      	subs	r3, #1
 802621c:	9308      	str	r3, [sp, #32]
 802621e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026220:	3303      	adds	r3, #3
 8026222:	930b      	str	r3, [sp, #44]	; 0x2c
 8026224:	e66b      	b.n	8025efe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8026226:	f47f ae7d 	bne.w	8025f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802622a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802622c:	2b00      	cmp	r3, #0
 802622e:	f340 8199 	ble.w	8026564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8026232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026236:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026238:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802623c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026240:	eef0 6a48 	vmov.f32	s13, s16
 8026244:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026248:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802624c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026250:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026254:	eef0 6a68 	vmov.f32	s13, s17
 8026258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802625c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8026260:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026264:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026268:	ee37 8a48 	vsub.f32	s16, s14, s16
 802626c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026270:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026274:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026278:	ee18 2a10 	vmov	r2, s16
 802627c:	eeb0 8a47 	vmov.f32	s16, s14
 8026280:	fb92 f3f3 	sdiv	r3, r2, r3
 8026284:	ee18 2a90 	vmov	r2, s17
 8026288:	932b      	str	r3, [sp, #172]	; 0xac
 802628a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802628c:	eef0 8a67 	vmov.f32	s17, s15
 8026290:	fb92 f3f3 	sdiv	r3, r2, r3
 8026294:	932c      	str	r3, [sp, #176]	; 0xb0
 8026296:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026298:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802629a:	3b01      	subs	r3, #1
 802629c:	9312      	str	r3, [sp, #72]	; 0x48
 802629e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262a0:	bf08      	it	eq
 80262a2:	4613      	moveq	r3, r2
 80262a4:	9308      	str	r3, [sp, #32]
 80262a6:	e623      	b.n	8025ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80262a8:	b158      	cbz	r0, 80262c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80262aa:	5d32      	ldrb	r2, [r6, r4]
 80262ac:	26ff      	movs	r6, #255	; 0xff
 80262ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80262b2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80262b6:	9209      	str	r2, [sp, #36]	; 0x24
 80262b8:	46b0      	mov	r8, r6
 80262ba:	e6a7      	b.n	802600c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80262bc:	26ff      	movs	r6, #255	; 0xff
 80262be:	46b2      	mov	sl, r6
 80262c0:	e6a4      	b.n	802600c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80262c2:	26ff      	movs	r6, #255	; 0xff
 80262c4:	46b2      	mov	sl, r6
 80262c6:	e7f7      	b.n	80262b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80262c8:	1c57      	adds	r7, r2, #1
 80262ca:	d18e      	bne.n	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80262cc:	4294      	cmp	r4, r2
 80262ce:	dd8c      	ble.n	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80262d0:	1c5e      	adds	r6, r3, #1
 80262d2:	db8a      	blt.n	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80262d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80262d6:	429e      	cmp	r6, r3
 80262d8:	dd87      	ble.n	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80262da:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80262de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80262e2:	e9cd 4600 	strd	r4, r6, [sp]
 80262e6:	462b      	mov	r3, r5
 80262e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80262ea:	9907      	ldr	r1, [sp, #28]
 80262ec:	9815      	ldr	r0, [sp, #84]	; 0x54
 80262ee:	f7ff fc85 	bl	8025bfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80262f2:	e77a      	b.n	80261ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80262f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80262f6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80262f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80262fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80262fe:	1409      	asrs	r1, r1, #16
 8026300:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8026304:	141b      	asrs	r3, r3, #16
 8026306:	fb04 1303 	mla	r3, r4, r3, r1
 802630a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802630c:	18ce      	adds	r6, r1, r3
 802630e:	5ccb      	ldrb	r3, [r1, r3]
 8026310:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026314:	0e1f      	lsrs	r7, r3, #24
 8026316:	2a00      	cmp	r2, #0
 8026318:	f000 8114 	beq.w	8026544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 802631c:	7871      	ldrb	r1, [r6, #1]
 802631e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8026322:	910e      	str	r1, [sp, #56]	; 0x38
 8026324:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8026328:	2800      	cmp	r0, #0
 802632a:	f000 8115 	beq.w	8026558 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 802632e:	1931      	adds	r1, r6, r4
 8026330:	5d36      	ldrb	r6, [r6, r4]
 8026332:	7849      	ldrb	r1, [r1, #1]
 8026334:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8026338:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802633c:	960a      	str	r6, [sp, #40]	; 0x28
 802633e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026342:	0e0e      	lsrs	r6, r1, #24
 8026344:	910f      	str	r1, [sp, #60]	; 0x3c
 8026346:	b292      	uxth	r2, r2
 8026348:	b280      	uxth	r0, r0
 802634a:	fb02 fb00 	mul.w	fp, r2, r0
 802634e:	0112      	lsls	r2, r2, #4
 8026350:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8026354:	eba2 090b 	sub.w	r9, r2, fp
 8026358:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802635c:	b280      	uxth	r0, r0
 802635e:	fa1f f989 	uxth.w	r9, r9
 8026362:	1a09      	subs	r1, r1, r0
 8026364:	fb09 f20e 	mul.w	r2, r9, lr
 8026368:	b289      	uxth	r1, r1
 802636a:	fb01 2207 	mla	r2, r1, r7, r2
 802636e:	fb00 220a 	mla	r2, r0, sl, r2
 8026372:	fb0b 2206 	mla	r2, fp, r6, r2
 8026376:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802637a:	9213      	str	r2, [sp, #76]	; 0x4c
 802637c:	2a00      	cmp	r2, #0
 802637e:	f000 80d4 	beq.w	802652a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8026382:	2fff      	cmp	r7, #255	; 0xff
 8026384:	d01a      	beq.n	80263bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8026386:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802638a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802638e:	fb07 fc0c 	mul.w	ip, r7, ip
 8026392:	435f      	muls	r7, r3
 8026394:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026398:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802639c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263a0:	4463      	add	r3, ip
 80263a2:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80263a6:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80263aa:	0a1b      	lsrs	r3, r3, #8
 80263ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80263b8:	ea43 030c 	orr.w	r3, r3, ip
 80263bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80263c0:	d01f      	beq.n	8026402 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 80263c2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80263c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80263c6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80263ca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80263ce:	fb0e f707 	mul.w	r7, lr, r7
 80263d2:	fb0e fe0c 	mul.w	lr, lr, ip
 80263d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80263da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80263de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80263e2:	44bc      	add	ip, r7
 80263e4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80263e8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80263ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80263f8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80263fc:	ea4c 020e 	orr.w	r2, ip, lr
 8026400:	920e      	str	r2, [sp, #56]	; 0x38
 8026402:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026406:	d01e      	beq.n	8026446 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8026408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802640a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802640e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026412:	fb0a fe0e 	mul.w	lr, sl, lr
 8026416:	fb0a fa07 	mul.w	sl, sl, r7
 802641a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802641e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026422:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026426:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802642a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802642e:	44f4      	add	ip, lr
 8026430:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026438:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802643c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026440:	ea4c 020a 	orr.w	r2, ip, sl
 8026444:	920a      	str	r2, [sp, #40]	; 0x28
 8026446:	2eff      	cmp	r6, #255	; 0xff
 8026448:	d01c      	beq.n	8026484 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802644a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802644c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026450:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026454:	fb06 fe0e 	mul.w	lr, r6, lr
 8026458:	437e      	muls	r6, r7
 802645a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802645e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026462:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8026466:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802646a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802646e:	44f4      	add	ip, lr
 8026470:	0a36      	lsrs	r6, r6, #8
 8026472:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026476:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802647a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802647e:	ea4c 0206 	orr.w	r2, ip, r6
 8026482:	920f      	str	r2, [sp, #60]	; 0x3c
 8026484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026486:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802648a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802648e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8026492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026494:	fb09 f606 	mul.w	r6, r9, r6
 8026498:	fb01 6607 	mla	r6, r1, r7, r6
 802649c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80264a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80264a2:	fb00 6607 	mla	r6, r0, r7, r6
 80264a6:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80264aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80264ac:	fb0b 6607 	mla	r6, fp, r7, r6
 80264b0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80264b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80264b6:	fb09 f907 	mul.w	r9, r9, r7
 80264ba:	0a36      	lsrs	r6, r6, #8
 80264bc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80264c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80264c2:	fb01 9303 	mla	r3, r1, r3, r9
 80264c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80264ca:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80264ce:	fb00 330c 	mla	r3, r0, ip, r3
 80264d2:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80264d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80264d8:	43da      	mvns	r2, r3
 80264da:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80264de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264e2:	b2d2      	uxtb	r2, r2
 80264e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80264e8:	fb03 f102 	mul.w	r1, r3, r2
 80264ec:	ea46 060e 	orr.w	r6, r6, lr
 80264f0:	1c4b      	adds	r3, r1, #1
 80264f2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80264f6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80264fa:	f808 3c03 	strb.w	r3, [r8, #-3]
 80264fe:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8026502:	4353      	muls	r3, r2
 8026504:	1c59      	adds	r1, r3, #1
 8026506:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802650a:	0a33      	lsrs	r3, r6, #8
 802650c:	0c36      	lsrs	r6, r6, #16
 802650e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026512:	f808 3c02 	strb.w	r3, [r8, #-2]
 8026516:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802651a:	435a      	muls	r2, r3
 802651c:	1c53      	adds	r3, r2, #1
 802651e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026522:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8026526:	f808 6c01 	strb.w	r6, [r8, #-1]
 802652a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802652c:	f108 0803 	add.w	r8, r8, #3
 8026530:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026532:	4413      	add	r3, r2
 8026534:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026536:	9329      	str	r3, [sp, #164]	; 0xa4
 8026538:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802653a:	4413      	add	r3, r2
 802653c:	932a      	str	r3, [sp, #168]	; 0xa8
 802653e:	9b07      	ldr	r3, [sp, #28]
 8026540:	3b01      	subs	r3, #1
 8026542:	e508      	b.n	8025f56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8026544:	b158      	cbz	r0, 802655e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8026546:	5d31      	ldrb	r1, [r6, r4]
 8026548:	26ff      	movs	r6, #255	; 0xff
 802654a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802654e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026552:	910a      	str	r1, [sp, #40]	; 0x28
 8026554:	46b6      	mov	lr, r6
 8026556:	e6f6      	b.n	8026346 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8026558:	26ff      	movs	r6, #255	; 0xff
 802655a:	46b2      	mov	sl, r6
 802655c:	e6f3      	b.n	8026346 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802655e:	26ff      	movs	r6, #255	; 0xff
 8026560:	46b2      	mov	sl, r6
 8026562:	e7f7      	b.n	8026554 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8026564:	b017      	add	sp, #92	; 0x5c
 8026566:	ecbd 8b08 	vpop	{d8-d11}
 802656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8026570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026574:	b08d      	sub	sp, #52	; 0x34
 8026576:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802657a:	9103      	str	r1, [sp, #12]
 802657c:	fb07 5803 	mla	r8, r7, r3, r5
 8026580:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8026584:	9803      	ldr	r0, [sp, #12]
 8026586:	2f00      	cmp	r7, #0
 8026588:	910b      	str	r1, [sp, #44]	; 0x2c
 802658a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802658e:	9903      	ldr	r1, [sp, #12]
 8026590:	9c03      	ldr	r4, [sp, #12]
 8026592:	eb02 0608 	add.w	r6, r2, r8
 8026596:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802659a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802659e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80265a2:	7809      	ldrb	r1, [r1, #0]
 80265a4:	7840      	ldrb	r0, [r0, #1]
 80265a6:	78a4      	ldrb	r4, [r4, #2]
 80265a8:	db51      	blt.n	802664e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80265aa:	45be      	cmp	lr, r7
 80265ac:	dd4f      	ble.n	802664e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80265ae:	2d00      	cmp	r5, #0
 80265b0:	db49      	blt.n	8026646 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80265b2:	42ab      	cmp	r3, r5
 80265b4:	dd47      	ble.n	8026646 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80265b6:	f812 2008 	ldrb.w	r2, [r2, r8]
 80265ba:	9204      	str	r2, [sp, #16]
 80265bc:	7872      	ldrb	r2, [r6, #1]
 80265be:	9205      	str	r2, [sp, #20]
 80265c0:	78b2      	ldrb	r2, [r6, #2]
 80265c2:	9206      	str	r2, [sp, #24]
 80265c4:	1c6a      	adds	r2, r5, #1
 80265c6:	d449      	bmi.n	802665c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80265c8:	4293      	cmp	r3, r2
 80265ca:	dd47      	ble.n	802665c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80265cc:	f1bc 0f00 	cmp.w	ip, #0
 80265d0:	d044      	beq.n	802665c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80265d2:	7972      	ldrb	r2, [r6, #5]
 80265d4:	f896 b003 	ldrb.w	fp, [r6, #3]
 80265d8:	f896 a004 	ldrb.w	sl, [r6, #4]
 80265dc:	9201      	str	r2, [sp, #4]
 80265de:	3701      	adds	r7, #1
 80265e0:	d444      	bmi.n	802666c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80265e2:	45be      	cmp	lr, r7
 80265e4:	dd42      	ble.n	802666c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80265e6:	f1b9 0f00 	cmp.w	r9, #0
 80265ea:	f000 80c1 	beq.w	8026770 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80265ee:	2d00      	cmp	r5, #0
 80265f0:	db38      	blt.n	8026664 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80265f2:	42ab      	cmp	r3, r5
 80265f4:	dd36      	ble.n	8026664 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80265f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80265fa:	f816 8002 	ldrb.w	r8, [r6, r2]
 80265fe:	2203      	movs	r2, #3
 8026600:	fb03 6702 	mla	r7, r3, r2, r6
 8026604:	fb03 6202 	mla	r2, r3, r2, r6
 8026608:	787f      	ldrb	r7, [r7, #1]
 802660a:	f892 e002 	ldrb.w	lr, [r2, #2]
 802660e:	9702      	str	r7, [sp, #8]
 8026610:	3501      	adds	r5, #1
 8026612:	d432      	bmi.n	802667a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026614:	42ab      	cmp	r3, r5
 8026616:	dd30      	ble.n	802667a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026618:	f1bc 0f00 	cmp.w	ip, #0
 802661c:	d031      	beq.n	8026682 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802661e:	2703      	movs	r7, #3
 8026620:	fb13 7207 	smlabb	r2, r3, r7, r7
 8026624:	5cb5      	ldrb	r5, [r6, r2]
 8026626:	fb03 6207 	mla	r2, r3, r7, r6
 802662a:	fb03 6307 	mla	r3, r3, r7, r6
 802662e:	7912      	ldrb	r2, [r2, #4]
 8026630:	795e      	ldrb	r6, [r3, #5]
 8026632:	f1bc 0f0f 	cmp.w	ip, #15
 8026636:	d927      	bls.n	8026688 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8026638:	4b53      	ldr	r3, [pc, #332]	; (8026788 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802663a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802663e:	4a53      	ldr	r2, [pc, #332]	; (802678c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8026640:	4853      	ldr	r0, [pc, #332]	; (8026790 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8026642:	f004 facf 	bl	802abe4 <__assert_func>
 8026646:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802664a:	9104      	str	r1, [sp, #16]
 802664c:	e7ba      	b.n	80265c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802664e:	9401      	str	r4, [sp, #4]
 8026650:	4682      	mov	sl, r0
 8026652:	468b      	mov	fp, r1
 8026654:	9104      	str	r1, [sp, #16]
 8026656:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802665a:	e7c0      	b.n	80265de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802665c:	9401      	str	r4, [sp, #4]
 802665e:	4682      	mov	sl, r0
 8026660:	468b      	mov	fp, r1
 8026662:	e7bc      	b.n	80265de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026664:	46a6      	mov	lr, r4
 8026666:	9002      	str	r0, [sp, #8]
 8026668:	4688      	mov	r8, r1
 802666a:	e7d1      	b.n	8026610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802666c:	4626      	mov	r6, r4
 802666e:	4602      	mov	r2, r0
 8026670:	460d      	mov	r5, r1
 8026672:	46a6      	mov	lr, r4
 8026674:	9002      	str	r0, [sp, #8]
 8026676:	4688      	mov	r8, r1
 8026678:	e7db      	b.n	8026632 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802667a:	4626      	mov	r6, r4
 802667c:	4602      	mov	r2, r0
 802667e:	460d      	mov	r5, r1
 8026680:	e7d7      	b.n	8026632 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026682:	4626      	mov	r6, r4
 8026684:	4602      	mov	r2, r0
 8026686:	460d      	mov	r5, r1
 8026688:	f1b9 0f0f 	cmp.w	r9, #15
 802668c:	d8d4      	bhi.n	8026638 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802668e:	fa1f f38c 	uxth.w	r3, ip
 8026692:	fa1f fc89 	uxth.w	ip, r9
 8026696:	fb03 f70c 	mul.w	r7, r3, ip
 802669a:	011b      	lsls	r3, r3, #4
 802669c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80266a0:	9707      	str	r7, [sp, #28]
 80266a2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80266a6:	fa1f fc8c 	uxth.w	ip, ip
 80266aa:	eba7 070c 	sub.w	r7, r7, ip
 80266ae:	b2bf      	uxth	r7, r7
 80266b0:	9709      	str	r7, [sp, #36]	; 0x24
 80266b2:	9f07      	ldr	r7, [sp, #28]
 80266b4:	1bdb      	subs	r3, r3, r7
 80266b6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80266ba:	b29b      	uxth	r3, r3
 80266bc:	9708      	str	r7, [sp, #32]
 80266be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80266c0:	930a      	str	r3, [sp, #40]	; 0x28
 80266c2:	ea6f 0907 	mvn.w	r9, r7
 80266c6:	fb03 fb0b 	mul.w	fp, r3, fp
 80266ca:	9f04      	ldr	r7, [sp, #16]
 80266cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266ce:	fa5f f989 	uxtb.w	r9, r9
 80266d2:	fb03 bb07 	mla	fp, r3, r7, fp
 80266d6:	9f07      	ldr	r7, [sp, #28]
 80266d8:	fb11 f109 	smulbb	r1, r1, r9
 80266dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80266de:	fb0c b808 	mla	r8, ip, r8, fp
 80266e2:	fb10 f009 	smulbb	r0, r0, r9
 80266e6:	fb14 f409 	smulbb	r4, r4, r9
 80266ea:	fb07 8805 	mla	r8, r7, r5, r8
 80266ee:	9d08      	ldr	r5, [sp, #32]
 80266f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80266f2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80266f6:	fb08 1805 	mla	r8, r8, r5, r1
 80266fa:	9d05      	ldr	r5, [sp, #20]
 80266fc:	fa1f f888 	uxth.w	r8, r8
 8026700:	f108 0101 	add.w	r1, r8, #1
 8026704:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8026708:	9903      	ldr	r1, [sp, #12]
 802670a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802670e:	f881 8000 	strb.w	r8, [r1]
 8026712:	fb03 f10a 	mul.w	r1, r3, sl
 8026716:	fb07 1105 	mla	r1, r7, r5, r1
 802671a:	9d02      	ldr	r5, [sp, #8]
 802671c:	fb0c 1105 	mla	r1, ip, r5, r1
 8026720:	9d07      	ldr	r5, [sp, #28]
 8026722:	fb05 1102 	mla	r1, r5, r2, r1
 8026726:	9a08      	ldr	r2, [sp, #32]
 8026728:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802672c:	fb01 0102 	mla	r1, r1, r2, r0
 8026730:	9a03      	ldr	r2, [sp, #12]
 8026732:	b289      	uxth	r1, r1
 8026734:	1c48      	adds	r0, r1, #1
 8026736:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802673a:	1209      	asrs	r1, r1, #8
 802673c:	7051      	strb	r1, [r2, #1]
 802673e:	9a01      	ldr	r2, [sp, #4]
 8026740:	4353      	muls	r3, r2
 8026742:	9a06      	ldr	r2, [sp, #24]
 8026744:	fb07 3702 	mla	r7, r7, r2, r3
 8026748:	9b08      	ldr	r3, [sp, #32]
 802674a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802674e:	fb05 c606 	mla	r6, r5, r6, ip
 8026752:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026756:	fb06 4603 	mla	r6, r6, r3, r4
 802675a:	9b03      	ldr	r3, [sp, #12]
 802675c:	b2b6      	uxth	r6, r6
 802675e:	f106 0e01 	add.w	lr, r6, #1
 8026762:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026766:	1236      	asrs	r6, r6, #8
 8026768:	709e      	strb	r6, [r3, #2]
 802676a:	b00d      	add	sp, #52	; 0x34
 802676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026770:	f1bc 0f0f 	cmp.w	ip, #15
 8026774:	f63f af60 	bhi.w	8026638 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026778:	4626      	mov	r6, r4
 802677a:	4602      	mov	r2, r0
 802677c:	460d      	mov	r5, r1
 802677e:	46a6      	mov	lr, r4
 8026780:	9002      	str	r0, [sp, #8]
 8026782:	4688      	mov	r8, r1
 8026784:	e783      	b.n	802668e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8026786:	bf00      	nop
 8026788:	080301ff 	.word	0x080301ff
 802678c:	080306f6 	.word	0x080306f6
 8026790:	080302c8 	.word	0x080302c8

08026794 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026798:	ed2d 8b08 	vpush	{d8-d11}
 802679c:	b0a1      	sub	sp, #132	; 0x84
 802679e:	eeb0 aa40 	vmov.f32	s20, s0
 80267a2:	eef0 9a60 	vmov.f32	s19, s1
 80267a6:	9307      	str	r3, [sp, #28]
 80267a8:	eeb0 9a41 	vmov.f32	s18, s2
 80267ac:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80267b0:	eeb0 8a62 	vmov.f32	s16, s5
 80267b4:	9210      	str	r2, [sp, #64]	; 0x40
 80267b6:	eef0 8a43 	vmov.f32	s17, s6
 80267ba:	9308      	str	r3, [sp, #32]
 80267bc:	eef0 ba44 	vmov.f32	s23, s8
 80267c0:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80267c4:	eeb0 ba64 	vmov.f32	s22, s9
 80267c8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80267ca:	eef0 aa45 	vmov.f32	s21, s10
 80267ce:	930a      	str	r3, [sp, #40]	; 0x28
 80267d0:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80267d4:	901f      	str	r0, [sp, #124]	; 0x7c
 80267d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80267d8:	6850      	ldr	r0, [r2, #4]
 80267da:	910e      	str	r1, [sp, #56]	; 0x38
 80267dc:	6812      	ldr	r2, [r2, #0]
 80267de:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80267e2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80267e6:	fb00 1303 	mla	r3, r0, r3, r1
 80267ea:	9908      	ldr	r1, [sp, #32]
 80267ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80267f0:	18d3      	adds	r3, r2, r3
 80267f2:	2203      	movs	r2, #3
 80267f4:	9309      	str	r3, [sp, #36]	; 0x24
 80267f6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80267f8:	681b      	ldr	r3, [r3, #0]
 80267fa:	930c      	str	r3, [sp, #48]	; 0x30
 80267fc:	f06f 0304 	mvn.w	r3, #4
 8026800:	fb11 3302 	smlabb	r3, r1, r2, r3
 8026804:	930d      	str	r3, [sp, #52]	; 0x34
 8026806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026808:	43db      	mvns	r3, r3
 802680a:	b2db      	uxtb	r3, r3
 802680c:	930b      	str	r3, [sp, #44]	; 0x2c
 802680e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026810:	2b00      	cmp	r3, #0
 8026812:	dc03      	bgt.n	802681c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8026814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026816:	2b00      	cmp	r3, #0
 8026818:	f340 81df 	ble.w	8026bda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802681c:	9b07      	ldr	r3, [sp, #28]
 802681e:	2b00      	cmp	r3, #0
 8026820:	f340 80f2 	ble.w	8026a08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8026824:	ea5f 4228 	movs.w	r2, r8, asr #16
 8026828:	ea4f 432b 	mov.w	r3, fp, asr #16
 802682c:	d430      	bmi.n	8026890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802682e:	1c51      	adds	r1, r2, #1
 8026830:	9808      	ldr	r0, [sp, #32]
 8026832:	4281      	cmp	r1, r0
 8026834:	da2f      	bge.n	8026896 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026836:	2b00      	cmp	r3, #0
 8026838:	db2d      	blt.n	8026896 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802683a:	1c59      	adds	r1, r3, #1
 802683c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802683e:	4288      	cmp	r0, r1
 8026840:	dd29      	ble.n	8026896 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026842:	9b07      	ldr	r3, [sp, #28]
 8026844:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026846:	3b01      	subs	r3, #1
 8026848:	fb02 8203 	mla	r2, r2, r3, r8
 802684c:	1412      	asrs	r2, r2, #16
 802684e:	d42d      	bmi.n	80268ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026850:	3201      	adds	r2, #1
 8026852:	9908      	ldr	r1, [sp, #32]
 8026854:	4291      	cmp	r1, r2
 8026856:	dd29      	ble.n	80268ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026858:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802685a:	fb02 b303 	mla	r3, r2, r3, fp
 802685e:	141b      	asrs	r3, r3, #16
 8026860:	d424      	bmi.n	80268ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026862:	3301      	adds	r3, #1
 8026864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026866:	429a      	cmp	r2, r3
 8026868:	dd20      	ble.n	80268ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802686c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026870:	1cde      	adds	r6, r3, #3
 8026872:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8026876:	f1bc 0f00 	cmp.w	ip, #0
 802687a:	f300 811f 	bgt.w	8026abc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802687e:	9b07      	ldr	r3, [sp, #28]
 8026880:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026886:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802688a:	4423      	add	r3, r4
 802688c:	9309      	str	r3, [sp, #36]	; 0x24
 802688e:	e0bd      	b.n	8026a0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8026890:	1c57      	adds	r7, r2, #1
 8026892:	f040 80ae 	bne.w	80269f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026896:	9908      	ldr	r1, [sp, #32]
 8026898:	428a      	cmp	r2, r1
 802689a:	f280 80aa 	bge.w	80269f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802689e:	1c5e      	adds	r6, r3, #1
 80268a0:	f2c0 80a7 	blt.w	80269f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80268a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80268a6:	4293      	cmp	r3, r2
 80268a8:	f280 80a3 	bge.w	80269f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80268ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80268b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80268b2:	f1ba 0f00 	cmp.w	sl, #0
 80268b6:	dde2      	ble.n	802687e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80268b8:	ea5f 4028 	movs.w	r0, r8, asr #16
 80268bc:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80268c0:	ea4f 412b 	mov.w	r1, fp, asr #16
 80268c4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80268c8:	f100 80df 	bmi.w	8026a8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80268cc:	1c45      	adds	r5, r0, #1
 80268ce:	9f08      	ldr	r7, [sp, #32]
 80268d0:	42af      	cmp	r7, r5
 80268d2:	f340 80dc 	ble.w	8026a8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80268d6:	2900      	cmp	r1, #0
 80268d8:	f2c0 80d9 	blt.w	8026a8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80268dc:	1c4d      	adds	r5, r1, #1
 80268de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80268e0:	42af      	cmp	r7, r5
 80268e2:	f340 80d4 	ble.w	8026a8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80268e6:	9d08      	ldr	r5, [sp, #32]
 80268e8:	fb05 0101 	mla	r1, r5, r1, r0
 80268ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80268ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80268f2:	1845      	adds	r5, r0, r1
 80268f4:	5c40      	ldrb	r0, [r0, r1]
 80268f6:	792f      	ldrb	r7, [r5, #4]
 80268f8:	7869      	ldrb	r1, [r5, #1]
 80268fa:	9711      	str	r7, [sp, #68]	; 0x44
 80268fc:	796f      	ldrb	r7, [r5, #5]
 80268fe:	f895 e002 	ldrb.w	lr, [r5, #2]
 8026902:	f895 9003 	ldrb.w	r9, [r5, #3]
 8026906:	9712      	str	r7, [sp, #72]	; 0x48
 8026908:	b17a      	cbz	r2, 802692a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802690a:	3505      	adds	r5, #5
 802690c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802690e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026910:	19ef      	adds	r7, r5, r7
 8026912:	5d2d      	ldrb	r5, [r5, r4]
 8026914:	787c      	ldrb	r4, [r7, #1]
 8026916:	9513      	str	r5, [sp, #76]	; 0x4c
 8026918:	9415      	str	r4, [sp, #84]	; 0x54
 802691a:	78bc      	ldrb	r4, [r7, #2]
 802691c:	9417      	str	r4, [sp, #92]	; 0x5c
 802691e:	78fc      	ldrb	r4, [r7, #3]
 8026920:	9414      	str	r4, [sp, #80]	; 0x50
 8026922:	793c      	ldrb	r4, [r7, #4]
 8026924:	9416      	str	r4, [sp, #88]	; 0x58
 8026926:	797c      	ldrb	r4, [r7, #5]
 8026928:	9418      	str	r4, [sp, #96]	; 0x60
 802692a:	b29b      	uxth	r3, r3
 802692c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802692e:	b292      	uxth	r2, r2
 8026930:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8026934:	fb03 f702 	mul.w	r7, r3, r2
 8026938:	011b      	lsls	r3, r3, #4
 802693a:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802693e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8026942:	1bdb      	subs	r3, r3, r7
 8026944:	b292      	uxth	r2, r2
 8026946:	b29b      	uxth	r3, r3
 8026948:	ebac 0c02 	sub.w	ip, ip, r2
 802694c:	fb03 f909 	mul.w	r9, r3, r9
 8026950:	fa1f fc8c 	uxth.w	ip, ip
 8026954:	fb0c 9000 	mla	r0, ip, r0, r9
 8026958:	f896 9000 	ldrb.w	r9, [r6]
 802695c:	fb02 0004 	mla	r0, r2, r4, r0
 8026960:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026962:	fb07 0004 	mla	r0, r7, r4, r0
 8026966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026968:	fb19 f904 	smulbb	r9, r9, r4
 802696c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026970:	fb00 9005 	mla	r0, r0, r5, r9
 8026974:	b280      	uxth	r0, r0
 8026976:	f100 0901 	add.w	r9, r0, #1
 802697a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802697e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026980:	4358      	muls	r0, r3
 8026982:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026986:	fb0c 0101 	mla	r1, ip, r1, r0
 802698a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802698c:	f886 9000 	strb.w	r9, [r6]
 8026990:	fb02 1100 	mla	r1, r2, r0, r1
 8026994:	9816      	ldr	r0, [sp, #88]	; 0x58
 8026996:	fb07 1100 	mla	r1, r7, r0, r1
 802699a:	7870      	ldrb	r0, [r6, #1]
 802699c:	fb10 f004 	smulbb	r0, r0, r4
 80269a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269a4:	fb01 0105 	mla	r1, r1, r5, r0
 80269a8:	b289      	uxth	r1, r1
 80269aa:	1c48      	adds	r0, r1, #1
 80269ac:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80269b0:	1209      	asrs	r1, r1, #8
 80269b2:	7071      	strb	r1, [r6, #1]
 80269b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80269b6:	434b      	muls	r3, r1
 80269b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80269ba:	fb0c 330e 	mla	r3, ip, lr, r3
 80269be:	fb02 3201 	mla	r2, r2, r1, r3
 80269c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80269c4:	fb07 2703 	mla	r7, r7, r3, r2
 80269c8:	78b2      	ldrb	r2, [r6, #2]
 80269ca:	fb12 f204 	smulbb	r2, r2, r4
 80269ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80269d2:	fb07 2505 	mla	r5, r7, r5, r2
 80269d6:	b2ad      	uxth	r5, r5
 80269d8:	1c6f      	adds	r7, r5, #1
 80269da:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80269de:	122d      	asrs	r5, r5, #8
 80269e0:	70b5      	strb	r5, [r6, #2]
 80269e2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80269e4:	3603      	adds	r6, #3
 80269e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80269ea:	4498      	add	r8, r3
 80269ec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80269ee:	449b      	add	fp, r3
 80269f0:	e75f      	b.n	80268b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80269f2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80269f4:	4498      	add	r8, r3
 80269f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80269f8:	449b      	add	fp, r3
 80269fa:	9b07      	ldr	r3, [sp, #28]
 80269fc:	3b01      	subs	r3, #1
 80269fe:	9307      	str	r3, [sp, #28]
 8026a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a02:	3303      	adds	r3, #3
 8026a04:	9309      	str	r3, [sp, #36]	; 0x24
 8026a06:	e709      	b.n	802681c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8026a08:	f47f af1b 	bne.w	8026842 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8026a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	f340 80e3 	ble.w	8026bda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8026a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026a18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026a1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026a1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026a22:	eef0 6a48 	vmov.f32	s13, s16
 8026a26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026a2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026a2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a32:	ee16 8a90 	vmov	r8, s13
 8026a36:	eef0 6a68 	vmov.f32	s13, s17
 8026a3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a3e:	ee16 ba90 	vmov	fp, s13
 8026a42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a46:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a5a:	ee18 2a10 	vmov	r2, s16
 8026a5e:	eeb0 8a47 	vmov.f32	s16, s14
 8026a62:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a66:	ee18 2a90 	vmov	r2, s17
 8026a6a:	9335      	str	r3, [sp, #212]	; 0xd4
 8026a6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026a6e:	eef0 8a67 	vmov.f32	s17, s15
 8026a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a76:	9336      	str	r3, [sp, #216]	; 0xd8
 8026a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026a7c:	3b01      	subs	r3, #1
 8026a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8026a80:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026a82:	bf08      	it	eq
 8026a84:	4613      	moveq	r3, r2
 8026a86:	9307      	str	r3, [sp, #28]
 8026a88:	e6c1      	b.n	802680e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8026a8a:	1c45      	adds	r5, r0, #1
 8026a8c:	d1a9      	bne.n	80269e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026a8e:	9c08      	ldr	r4, [sp, #32]
 8026a90:	42a0      	cmp	r0, r4
 8026a92:	daa6      	bge.n	80269e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026a94:	1c4c      	adds	r4, r1, #1
 8026a96:	dba4      	blt.n	80269e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026a98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026a9a:	428c      	cmp	r4, r1
 8026a9c:	dda1      	ble.n	80269e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026a9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026aa0:	9001      	str	r0, [sp, #4]
 8026aa2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026aa4:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8026aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026aaa:	4631      	mov	r1, r6
 8026aac:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8026ab0:	9300      	str	r3, [sp, #0]
 8026ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026ab4:	9b08      	ldr	r3, [sp, #32]
 8026ab6:	f7ff fd5b 	bl	8026570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8026aba:	e792      	b.n	80269e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026abc:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026ac0:	9c08      	ldr	r4, [sp, #32]
 8026ac2:	ea4f 402b 	mov.w	r0, fp, asr #16
 8026ac6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8026aca:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8026ace:	fb04 2000 	mla	r0, r4, r0, r2
 8026ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026ad4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026ad6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026ada:	4402      	add	r2, r0
 8026adc:	5c25      	ldrb	r5, [r4, r0]
 8026ade:	7894      	ldrb	r4, [r2, #2]
 8026ae0:	7850      	ldrb	r0, [r2, #1]
 8026ae2:	9411      	str	r4, [sp, #68]	; 0x44
 8026ae4:	7954      	ldrb	r4, [r2, #5]
 8026ae6:	f892 a003 	ldrb.w	sl, [r2, #3]
 8026aea:	f892 9004 	ldrb.w	r9, [r2, #4]
 8026aee:	9412      	str	r4, [sp, #72]	; 0x48
 8026af0:	b171      	cbz	r1, 8026b10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8026af2:	3205      	adds	r2, #5
 8026af4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026af6:	1917      	adds	r7, r2, r4
 8026af8:	5d12      	ldrb	r2, [r2, r4]
 8026afa:	9219      	str	r2, [sp, #100]	; 0x64
 8026afc:	787a      	ldrb	r2, [r7, #1]
 8026afe:	921b      	str	r2, [sp, #108]	; 0x6c
 8026b00:	78ba      	ldrb	r2, [r7, #2]
 8026b02:	921d      	str	r2, [sp, #116]	; 0x74
 8026b04:	78fa      	ldrb	r2, [r7, #3]
 8026b06:	921a      	str	r2, [sp, #104]	; 0x68
 8026b08:	793a      	ldrb	r2, [r7, #4]
 8026b0a:	921c      	str	r2, [sp, #112]	; 0x70
 8026b0c:	797a      	ldrb	r2, [r7, #5]
 8026b0e:	921e      	str	r2, [sp, #120]	; 0x78
 8026b10:	b29b      	uxth	r3, r3
 8026b12:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8026b14:	b289      	uxth	r1, r1
 8026b16:	3603      	adds	r6, #3
 8026b18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026b1c:	fb03 f201 	mul.w	r2, r3, r1
 8026b20:	011b      	lsls	r3, r3, #4
 8026b22:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8026b26:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026b2a:	1a9b      	subs	r3, r3, r2
 8026b2c:	b289      	uxth	r1, r1
 8026b2e:	b29b      	uxth	r3, r3
 8026b30:	1a7f      	subs	r7, r7, r1
 8026b32:	fb03 fa0a 	mul.w	sl, r3, sl
 8026b36:	b2bf      	uxth	r7, r7
 8026b38:	fb03 f909 	mul.w	r9, r3, r9
 8026b3c:	fb07 a505 	mla	r5, r7, r5, sl
 8026b40:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8026b44:	fb07 9000 	mla	r0, r7, r0, r9
 8026b48:	fb01 5504 	mla	r5, r1, r4, r5
 8026b4c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8026b4e:	fb02 5504 	mla	r5, r2, r4, r5
 8026b52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b54:	fb1a fa04 	smulbb	sl, sl, r4
 8026b58:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026b5c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8026b5e:	fb05 a50e 	mla	r5, r5, lr, sl
 8026b62:	fb01 0004 	mla	r0, r1, r4, r0
 8026b66:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026b68:	b2ad      	uxth	r5, r5
 8026b6a:	fb02 0004 	mla	r0, r2, r4, r0
 8026b6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b70:	f105 0a01 	add.w	sl, r5, #1
 8026b74:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026b78:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026b7c:	122d      	asrs	r5, r5, #8
 8026b7e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8026b82:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8026b86:	fb15 f504 	smulbb	r5, r5, r4
 8026b8a:	fb00 500e 	mla	r0, r0, lr, r5
 8026b8e:	b280      	uxth	r0, r0
 8026b90:	1c45      	adds	r5, r0, #1
 8026b92:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026b96:	1200      	asrs	r0, r0, #8
 8026b98:	f806 0c05 	strb.w	r0, [r6, #-5]
 8026b9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026b9e:	4343      	muls	r3, r0
 8026ba0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026ba2:	fb07 3300 	mla	r3, r7, r0, r3
 8026ba6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026ba8:	fb01 3100 	mla	r1, r1, r0, r3
 8026bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026bae:	fb02 1203 	mla	r2, r2, r3, r1
 8026bb2:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8026bb6:	fb11 f104 	smulbb	r1, r1, r4
 8026bba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026bbe:	fb02 120e 	mla	r2, r2, lr, r1
 8026bc2:	b292      	uxth	r2, r2
 8026bc4:	1c53      	adds	r3, r2, #1
 8026bc6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026bca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8026bcc:	1212      	asrs	r2, r2, #8
 8026bce:	4498      	add	r8, r3
 8026bd0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026bd2:	f806 2c04 	strb.w	r2, [r6, #-4]
 8026bd6:	449b      	add	fp, r3
 8026bd8:	e64d      	b.n	8026876 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8026bda:	b021      	add	sp, #132	; 0x84
 8026bdc:	ecbd 8b08 	vpop	{d8-d11}
 8026be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026be4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8026be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026be8:	b085      	sub	sp, #20
 8026bea:	784d      	ldrb	r5, [r1, #1]
 8026bec:	788e      	ldrb	r6, [r1, #2]
 8026bee:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8026bf2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8026bf6:	9403      	str	r4, [sp, #12]
 8026bf8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026bfc:	780c      	ldrb	r4, [r1, #0]
 8026bfe:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8026c02:	fb07 ce03 	mla	lr, r7, r3, ip
 8026c06:	2f00      	cmp	r7, #0
 8026c08:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026c0c:	eb02 0b0e 	add.w	fp, r2, lr
 8026c10:	db56      	blt.n	8026cc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8026c12:	45b9      	cmp	r9, r7
 8026c14:	dd54      	ble.n	8026cc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8026c16:	f1bc 0f00 	cmp.w	ip, #0
 8026c1a:	db4d      	blt.n	8026cb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8026c1c:	4563      	cmp	r3, ip
 8026c1e:	dd4b      	ble.n	8026cb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8026c20:	f812 200e 	ldrb.w	r2, [r2, lr]
 8026c24:	9200      	str	r2, [sp, #0]
 8026c26:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026c2a:	9201      	str	r2, [sp, #4]
 8026c2c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8026c30:	9202      	str	r2, [sp, #8]
 8026c32:	f11c 0201 	adds.w	r2, ip, #1
 8026c36:	d44a      	bmi.n	8026cce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8026c38:	4293      	cmp	r3, r2
 8026c3a:	dd48      	ble.n	8026cce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8026c3c:	2800      	cmp	r0, #0
 8026c3e:	d046      	beq.n	8026cce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8026c40:	f89b e003 	ldrb.w	lr, [fp, #3]
 8026c44:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8026c48:	f89b a005 	ldrb.w	sl, [fp, #5]
 8026c4c:	3701      	adds	r7, #1
 8026c4e:	d446      	bmi.n	8026cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8026c50:	45b9      	cmp	r9, r7
 8026c52:	dd44      	ble.n	8026cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8026c54:	9a03      	ldr	r2, [sp, #12]
 8026c56:	2a00      	cmp	r2, #0
 8026c58:	d045      	beq.n	8026ce6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8026c5a:	f1bc 0f00 	cmp.w	ip, #0
 8026c5e:	db3a      	blt.n	8026cd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8026c60:	4563      	cmp	r3, ip
 8026c62:	dd38      	ble.n	8026cd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8026c64:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026c68:	f04f 0903 	mov.w	r9, #3
 8026c6c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8026c70:	fb03 b209 	mla	r2, r3, r9, fp
 8026c74:	fb03 b909 	mla	r9, r3, r9, fp
 8026c78:	7852      	ldrb	r2, [r2, #1]
 8026c7a:	f899 9002 	ldrb.w	r9, [r9, #2]
 8026c7e:	f11c 0c01 	adds.w	ip, ip, #1
 8026c82:	d40d      	bmi.n	8026ca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026c84:	4563      	cmp	r3, ip
 8026c86:	dd0b      	ble.n	8026ca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026c88:	b160      	cbz	r0, 8026ca4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8026c8a:	2603      	movs	r6, #3
 8026c8c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8026c90:	fb03 b506 	mla	r5, r3, r6, fp
 8026c94:	fb03 b306 	mla	r3, r3, r6, fp
 8026c98:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8026c9c:	792d      	ldrb	r5, [r5, #4]
 8026c9e:	795e      	ldrb	r6, [r3, #5]
 8026ca0:	280f      	cmp	r0, #15
 8026ca2:	d802      	bhi.n	8026caa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8026ca4:	9b03      	ldr	r3, [sp, #12]
 8026ca6:	2b0f      	cmp	r3, #15
 8026ca8:	d922      	bls.n	8026cf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8026caa:	4b2f      	ldr	r3, [pc, #188]	; (8026d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8026cac:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8026cb0:	4a2e      	ldr	r2, [pc, #184]	; (8026d6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8026cb2:	482f      	ldr	r0, [pc, #188]	; (8026d70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8026cb4:	f003 ff96 	bl	802abe4 <__assert_func>
 8026cb8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8026cbc:	9400      	str	r4, [sp, #0]
 8026cbe:	e7b8      	b.n	8026c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8026cc0:	46b2      	mov	sl, r6
 8026cc2:	46a8      	mov	r8, r5
 8026cc4:	46a6      	mov	lr, r4
 8026cc6:	9400      	str	r4, [sp, #0]
 8026cc8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8026ccc:	e7be      	b.n	8026c4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8026cce:	46b2      	mov	sl, r6
 8026cd0:	46a8      	mov	r8, r5
 8026cd2:	46a6      	mov	lr, r4
 8026cd4:	e7ba      	b.n	8026c4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8026cd6:	46b1      	mov	r9, r6
 8026cd8:	462a      	mov	r2, r5
 8026cda:	4627      	mov	r7, r4
 8026cdc:	e7cf      	b.n	8026c7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8026cde:	46b1      	mov	r9, r6
 8026ce0:	462a      	mov	r2, r5
 8026ce2:	4627      	mov	r7, r4
 8026ce4:	e7dc      	b.n	8026ca0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026ce6:	280f      	cmp	r0, #15
 8026ce8:	d8df      	bhi.n	8026caa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8026cea:	46b1      	mov	r9, r6
 8026cec:	462a      	mov	r2, r5
 8026cee:	4627      	mov	r7, r4
 8026cf0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8026cf4:	b280      	uxth	r0, r0
 8026cf6:	fb00 f30b 	mul.w	r3, r0, fp
 8026cfa:	0100      	lsls	r0, r0, #4
 8026cfc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8026d00:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8026d04:	1ac0      	subs	r0, r0, r3
 8026d06:	fa1f fb8b 	uxth.w	fp, fp
 8026d0a:	b280      	uxth	r0, r0
 8026d0c:	ebac 0c0b 	sub.w	ip, ip, fp
 8026d10:	9003      	str	r0, [sp, #12]
 8026d12:	fa1f fc8c 	uxth.w	ip, ip
 8026d16:	fb00 fe0e 	mul.w	lr, r0, lr
 8026d1a:	9800      	ldr	r0, [sp, #0]
 8026d1c:	fb0c ee00 	mla	lr, ip, r0, lr
 8026d20:	9803      	ldr	r0, [sp, #12]
 8026d22:	fb00 f808 	mul.w	r8, r0, r8
 8026d26:	9801      	ldr	r0, [sp, #4]
 8026d28:	fb0b ee07 	mla	lr, fp, r7, lr
 8026d2c:	fb0c 8800 	mla	r8, ip, r0, r8
 8026d30:	fb03 ee04 	mla	lr, r3, r4, lr
 8026d34:	fb0b 8202 	mla	r2, fp, r2, r8
 8026d38:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026d3c:	fb03 2505 	mla	r5, r3, r5, r2
 8026d40:	9a03      	ldr	r2, [sp, #12]
 8026d42:	f881 e000 	strb.w	lr, [r1]
 8026d46:	fb02 f00a 	mul.w	r0, r2, sl
 8026d4a:	9a02      	ldr	r2, [sp, #8]
 8026d4c:	122d      	asrs	r5, r5, #8
 8026d4e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8026d52:	704d      	strb	r5, [r1, #1]
 8026d54:	fb0b c909 	mla	r9, fp, r9, ip
 8026d58:	fb03 9606 	mla	r6, r3, r6, r9
 8026d5c:	1236      	asrs	r6, r6, #8
 8026d5e:	708e      	strb	r6, [r1, #2]
 8026d60:	b005      	add	sp, #20
 8026d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d66:	bf00      	nop
 8026d68:	080301ff 	.word	0x080301ff
 8026d6c:	080306f6 	.word	0x080306f6
 8026d70:	080302c8 	.word	0x080302c8

08026d74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d78:	ed2d 8b0a 	vpush	{d8-d12}
 8026d7c:	b09d      	sub	sp, #116	; 0x74
 8026d7e:	eeb0 aa40 	vmov.f32	s20, s0
 8026d82:	eef0 9a60 	vmov.f32	s19, s1
 8026d86:	9306      	str	r3, [sp, #24]
 8026d88:	eeb0 9a41 	vmov.f32	s18, s2
 8026d8c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8026d90:	eeb0 8a62 	vmov.f32	s16, s5
 8026d94:	901b      	str	r0, [sp, #108]	; 0x6c
 8026d96:	eef0 8a43 	vmov.f32	s17, s6
 8026d9a:	9307      	str	r3, [sp, #28]
 8026d9c:	eeb0 ca44 	vmov.f32	s24, s8
 8026da0:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8026da4:	eef0 ba64 	vmov.f32	s23, s9
 8026da8:	eeb0 ba45 	vmov.f32	s22, s10
 8026dac:	9309      	str	r3, [sp, #36]	; 0x24
 8026dae:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026db2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8026db6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026db8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026dbc:	6850      	ldr	r0, [r2, #4]
 8026dbe:	6812      	ldr	r2, [r2, #0]
 8026dc0:	fb00 1303 	mla	r3, r0, r3, r1
 8026dc4:	9907      	ldr	r1, [sp, #28]
 8026dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026dca:	18d3      	adds	r3, r2, r3
 8026dcc:	2203      	movs	r2, #3
 8026dce:	9308      	str	r3, [sp, #32]
 8026dd0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8026dd2:	681b      	ldr	r3, [r3, #0]
 8026dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8026dd6:	f06f 0304 	mvn.w	r3, #4
 8026dda:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8026dde:	fb11 3302 	smlabb	r3, r1, r2, r3
 8026de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8026de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026de6:	2b00      	cmp	r3, #0
 8026de8:	dc03      	bgt.n	8026df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8026dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026dec:	2b00      	cmp	r3, #0
 8026dee:	f340 8193 	ble.w	8027118 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8026df2:	9b06      	ldr	r3, [sp, #24]
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	f340 80d0 	ble.w	8026f9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8026dfa:	1432      	asrs	r2, r6, #16
 8026dfc:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026e00:	d42f      	bmi.n	8026e62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8026e02:	1c51      	adds	r1, r2, #1
 8026e04:	9807      	ldr	r0, [sp, #28]
 8026e06:	4281      	cmp	r1, r0
 8026e08:	da2e      	bge.n	8026e68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e0a:	2b00      	cmp	r3, #0
 8026e0c:	db2c      	blt.n	8026e68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e0e:	1c59      	adds	r1, r3, #1
 8026e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026e12:	4288      	cmp	r0, r1
 8026e14:	dd28      	ble.n	8026e68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026e16:	9b06      	ldr	r3, [sp, #24]
 8026e18:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8026e1a:	3b01      	subs	r3, #1
 8026e1c:	fb02 6203 	mla	r2, r2, r3, r6
 8026e20:	1412      	asrs	r2, r2, #16
 8026e22:	d42c      	bmi.n	8026e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8026e24:	3201      	adds	r2, #1
 8026e26:	9907      	ldr	r1, [sp, #28]
 8026e28:	4291      	cmp	r1, r2
 8026e2a:	dd28      	ble.n	8026e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8026e2c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8026e2e:	fb02 5303 	mla	r3, r2, r3, r5
 8026e32:	141b      	asrs	r3, r3, #16
 8026e34:	d423      	bmi.n	8026e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8026e36:	3301      	adds	r3, #1
 8026e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e3a:	429a      	cmp	r2, r3
 8026e3c:	dd1f      	ble.n	8026e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8026e3e:	9b08      	ldr	r3, [sp, #32]
 8026e40:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026e44:	f103 0c03 	add.w	ip, r3, #3
 8026e48:	f1be 0f00 	cmp.w	lr, #0
 8026e4c:	f300 80fa 	bgt.w	8027044 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8026e50:	9b06      	ldr	r3, [sp, #24]
 8026e52:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026e56:	9b08      	ldr	r3, [sp, #32]
 8026e58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026e5c:	4423      	add	r3, r4
 8026e5e:	9308      	str	r3, [sp, #32]
 8026e60:	e09d      	b.n	8026f9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8026e62:	1c51      	adds	r1, r2, #1
 8026e64:	f040 808e 	bne.w	8026f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026e68:	9907      	ldr	r1, [sp, #28]
 8026e6a:	428a      	cmp	r2, r1
 8026e6c:	f280 808a 	bge.w	8026f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026e70:	1c5f      	adds	r7, r3, #1
 8026e72:	f2c0 8087 	blt.w	8026f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e78:	4293      	cmp	r3, r2
 8026e7a:	f280 8083 	bge.w	8026f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026e7e:	9f06      	ldr	r7, [sp, #24]
 8026e80:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026e84:	2f00      	cmp	r7, #0
 8026e86:	dde3      	ble.n	8026e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8026e88:	1432      	asrs	r2, r6, #16
 8026e8a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026e8e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026e92:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8026e96:	f100 80bf 	bmi.w	8027018 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8026e9a:	1c50      	adds	r0, r2, #1
 8026e9c:	9c07      	ldr	r4, [sp, #28]
 8026e9e:	4284      	cmp	r4, r0
 8026ea0:	f340 80bc 	ble.w	802701c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	f2c0 80b9 	blt.w	802701c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026eaa:	1c58      	adds	r0, r3, #1
 8026eac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026eae:	4284      	cmp	r4, r0
 8026eb0:	f340 80b4 	ble.w	802701c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026eb4:	9807      	ldr	r0, [sp, #28]
 8026eb6:	fb00 2303 	mla	r3, r0, r3, r2
 8026eba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026ebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ec2:	441a      	add	r2, r3
 8026ec4:	f810 c003 	ldrb.w	ip, [r0, r3]
 8026ec8:	7953      	ldrb	r3, [r2, #5]
 8026eca:	7850      	ldrb	r0, [r2, #1]
 8026ecc:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026ed0:	f892 9003 	ldrb.w	r9, [r2, #3]
 8026ed4:	f892 8004 	ldrb.w	r8, [r2, #4]
 8026ed8:	930e      	str	r3, [sp, #56]	; 0x38
 8026eda:	f1bb 0f00 	cmp.w	fp, #0
 8026ede:	d00f      	beq.n	8026f00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8026ee0:	3205      	adds	r2, #5
 8026ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ee4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ee6:	18d3      	adds	r3, r2, r3
 8026ee8:	5d12      	ldrb	r2, [r2, r4]
 8026eea:	920f      	str	r2, [sp, #60]	; 0x3c
 8026eec:	785a      	ldrb	r2, [r3, #1]
 8026eee:	9211      	str	r2, [sp, #68]	; 0x44
 8026ef0:	789a      	ldrb	r2, [r3, #2]
 8026ef2:	9213      	str	r2, [sp, #76]	; 0x4c
 8026ef4:	78da      	ldrb	r2, [r3, #3]
 8026ef6:	9210      	str	r2, [sp, #64]	; 0x40
 8026ef8:	791a      	ldrb	r2, [r3, #4]
 8026efa:	795b      	ldrb	r3, [r3, #5]
 8026efc:	9212      	str	r2, [sp, #72]	; 0x48
 8026efe:	9314      	str	r3, [sp, #80]	; 0x50
 8026f00:	b28b      	uxth	r3, r1
 8026f02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026f04:	fa1f f28b 	uxth.w	r2, fp
 8026f08:	fb03 fb02 	mul.w	fp, r3, r2
 8026f0c:	011b      	lsls	r3, r3, #4
 8026f0e:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8026f12:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8026f16:	eba3 030b 	sub.w	r3, r3, fp
 8026f1a:	b292      	uxth	r2, r2
 8026f1c:	b29b      	uxth	r3, r3
 8026f1e:	1a89      	subs	r1, r1, r2
 8026f20:	fb03 f808 	mul.w	r8, r3, r8
 8026f24:	b289      	uxth	r1, r1
 8026f26:	fb03 f909 	mul.w	r9, r3, r9
 8026f2a:	fb01 8800 	mla	r8, r1, r0, r8
 8026f2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026f30:	fb01 990c 	mla	r9, r1, ip, r9
 8026f34:	fb02 8800 	mla	r8, r2, r0, r8
 8026f38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026f3a:	fb02 9904 	mla	r9, r2, r4, r9
 8026f3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f40:	fb0b 8800 	mla	r8, fp, r0, r8
 8026f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026f46:	fb0b 9904 	mla	r9, fp, r4, r9
 8026f4a:	4343      	muls	r3, r0
 8026f4c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026f50:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026f54:	fb01 330e 	mla	r3, r1, lr, r3
 8026f58:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8026f5a:	f88a 9000 	strb.w	r9, [sl]
 8026f5e:	fb02 3201 	mla	r2, r2, r1, r3
 8026f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026f64:	f88a 8001 	strb.w	r8, [sl, #1]
 8026f68:	fb0b 2b03 	mla	fp, fp, r3, r2
 8026f6c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026f70:	f88a b002 	strb.w	fp, [sl, #2]
 8026f74:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026f76:	f10a 0a03 	add.w	sl, sl, #3
 8026f7a:	3f01      	subs	r7, #1
 8026f7c:	441e      	add	r6, r3
 8026f7e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f80:	441d      	add	r5, r3
 8026f82:	e77f      	b.n	8026e84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8026f84:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026f86:	441e      	add	r6, r3
 8026f88:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f8a:	441d      	add	r5, r3
 8026f8c:	9b06      	ldr	r3, [sp, #24]
 8026f8e:	3b01      	subs	r3, #1
 8026f90:	9306      	str	r3, [sp, #24]
 8026f92:	9b08      	ldr	r3, [sp, #32]
 8026f94:	3303      	adds	r3, #3
 8026f96:	9308      	str	r3, [sp, #32]
 8026f98:	e72b      	b.n	8026df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8026f9a:	f47f af3c 	bne.w	8026e16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8026f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	f340 80b9 	ble.w	8027118 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8026fa6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026faa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026fac:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026fb0:	eef0 6a48 	vmov.f32	s13, s16
 8026fb4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026fb8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8026fbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fc0:	ee16 6a90 	vmov	r6, s13
 8026fc4:	eef0 6a68 	vmov.f32	s13, s17
 8026fc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fcc:	ee16 5a90 	vmov	r5, s13
 8026fd0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026fd4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026fd8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026fdc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026fe0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026fe4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026fe8:	ee18 2a10 	vmov	r2, s16
 8026fec:	eeb0 8a47 	vmov.f32	s16, s14
 8026ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ff4:	ee18 2a90 	vmov	r2, s17
 8026ff8:	9333      	str	r3, [sp, #204]	; 0xcc
 8026ffa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ffc:	eef0 8a67 	vmov.f32	s17, s15
 8027000:	fb92 f3f3 	sdiv	r3, r2, r3
 8027004:	9334      	str	r3, [sp, #208]	; 0xd0
 8027006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802700a:	3b01      	subs	r3, #1
 802700c:	930c      	str	r3, [sp, #48]	; 0x30
 802700e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027010:	bf08      	it	eq
 8027012:	4613      	moveq	r3, r2
 8027014:	9306      	str	r3, [sp, #24]
 8027016:	e6e5      	b.n	8026de4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027018:	1c54      	adds	r4, r2, #1
 802701a:	d1ab      	bne.n	8026f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802701c:	9807      	ldr	r0, [sp, #28]
 802701e:	4282      	cmp	r2, r0
 8027020:	daa8      	bge.n	8026f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027022:	1c58      	adds	r0, r3, #1
 8027024:	dba6      	blt.n	8026f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027028:	4298      	cmp	r0, r3
 802702a:	dda3      	ble.n	8026f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802702c:	9000      	str	r0, [sp, #0]
 802702e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027030:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8027034:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8027038:	9b07      	ldr	r3, [sp, #28]
 802703a:	4651      	mov	r1, sl
 802703c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802703e:	f7ff fdd1 	bl	8026be4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027042:	e797      	b.n	8026f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027044:	1431      	asrs	r1, r6, #16
 8027046:	9c07      	ldr	r4, [sp, #28]
 8027048:	1428      	asrs	r0, r5, #16
 802704a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802704e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8027052:	fb04 1000 	mla	r0, r4, r0, r1
 8027056:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027058:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802705a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802705e:	4401      	add	r1, r0
 8027060:	5c20      	ldrb	r0, [r4, r0]
 8027062:	f891 8002 	ldrb.w	r8, [r1, #2]
 8027066:	900e      	str	r0, [sp, #56]	; 0x38
 8027068:	f891 a003 	ldrb.w	sl, [r1, #3]
 802706c:	7848      	ldrb	r0, [r1, #1]
 802706e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8027072:	f891 b005 	ldrb.w	fp, [r1, #5]
 8027076:	b172      	cbz	r2, 8027096 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8027078:	3105      	adds	r1, #5
 802707a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802707c:	190f      	adds	r7, r1, r4
 802707e:	5d09      	ldrb	r1, [r1, r4]
 8027080:	9115      	str	r1, [sp, #84]	; 0x54
 8027082:	7879      	ldrb	r1, [r7, #1]
 8027084:	9117      	str	r1, [sp, #92]	; 0x5c
 8027086:	78b9      	ldrb	r1, [r7, #2]
 8027088:	9119      	str	r1, [sp, #100]	; 0x64
 802708a:	78f9      	ldrb	r1, [r7, #3]
 802708c:	9116      	str	r1, [sp, #88]	; 0x58
 802708e:	7939      	ldrb	r1, [r7, #4]
 8027090:	9118      	str	r1, [sp, #96]	; 0x60
 8027092:	7979      	ldrb	r1, [r7, #5]
 8027094:	911a      	str	r1, [sp, #104]	; 0x68
 8027096:	b29b      	uxth	r3, r3
 8027098:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802709a:	b292      	uxth	r2, r2
 802709c:	f10c 0c03 	add.w	ip, ip, #3
 80270a0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80270a4:	fb03 f102 	mul.w	r1, r3, r2
 80270a8:	011b      	lsls	r3, r3, #4
 80270aa:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80270ae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80270b2:	1a5b      	subs	r3, r3, r1
 80270b4:	b292      	uxth	r2, r2
 80270b6:	b29b      	uxth	r3, r3
 80270b8:	1abf      	subs	r7, r7, r2
 80270ba:	fb03 f909 	mul.w	r9, r3, r9
 80270be:	b2bf      	uxth	r7, r7
 80270c0:	fb03 fa0a 	mul.w	sl, r3, sl
 80270c4:	fb03 f30b 	mul.w	r3, r3, fp
 80270c8:	fb07 9900 	mla	r9, r7, r0, r9
 80270cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80270ce:	fb07 aa04 	mla	sl, r7, r4, sl
 80270d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80270d4:	fb02 9900 	mla	r9, r2, r0, r9
 80270d8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80270da:	fb07 3308 	mla	r3, r7, r8, r3
 80270de:	fb01 9900 	mla	r9, r1, r0, r9
 80270e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80270e4:	fb02 aa04 	mla	sl, r2, r4, sl
 80270e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80270ea:	fb02 3200 	mla	r2, r2, r0, r3
 80270ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80270f0:	fb01 aa04 	mla	sl, r1, r4, sl
 80270f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80270f8:	fb01 2103 	mla	r1, r1, r3, r2
 80270fc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80270fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8027102:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8027106:	1209      	asrs	r1, r1, #8
 8027108:	441e      	add	r6, r3
 802710a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802710c:	f80c ac06 	strb.w	sl, [ip, #-6]
 8027110:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8027114:	441d      	add	r5, r3
 8027116:	e697      	b.n	8026e48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8027118:	b01d      	add	sp, #116	; 0x74
 802711a:	ecbd 8b0a 	vpop	{d8-d12}
 802711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8027124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027128:	b085      	sub	sp, #20
 802712a:	7888      	ldrb	r0, [r1, #2]
 802712c:	4691      	mov	r9, r2
 802712e:	9000      	str	r0, [sp, #0]
 8027130:	7848      	ldrb	r0, [r1, #1]
 8027132:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8027136:	9001      	str	r0, [sp, #4]
 8027138:	7808      	ldrb	r0, [r1, #0]
 802713a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802713e:	9002      	str	r0, [sp, #8]
 8027140:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8027144:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027148:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802714c:	fb04 c603 	mla	r6, r4, r3, ip
 8027150:	2c00      	cmp	r4, #0
 8027152:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8027156:	9a00      	ldr	r2, [sp, #0]
 8027158:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802715c:	9a01      	ldr	r2, [sp, #4]
 802715e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8027162:	db3a      	blt.n	80271da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8027164:	45a0      	cmp	r8, r4
 8027166:	dd38      	ble.n	80271da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8027168:	f1bc 0f00 	cmp.w	ip, #0
 802716c:	db33      	blt.n	80271d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802716e:	4563      	cmp	r3, ip
 8027170:	dd31      	ble.n	80271d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8027172:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8027176:	f11c 0601 	adds.w	r6, ip, #1
 802717a:	d431      	bmi.n	80271e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802717c:	42b3      	cmp	r3, r6
 802717e:	dd2f      	ble.n	80271e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8027180:	b375      	cbz	r5, 80271e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8027182:	f8de 6004 	ldr.w	r6, [lr, #4]
 8027186:	3401      	adds	r4, #1
 8027188:	d42e      	bmi.n	80271e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802718a:	45a0      	cmp	r8, r4
 802718c:	dd2c      	ble.n	80271e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802718e:	b35f      	cbz	r7, 80271e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8027190:	f1bc 0f00 	cmp.w	ip, #0
 8027194:	db26      	blt.n	80271e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8027196:	4563      	cmp	r3, ip
 8027198:	dd24      	ble.n	80271e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802719a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802719e:	f11c 0c01 	adds.w	ip, ip, #1
 80271a2:	d405      	bmi.n	80271b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80271a4:	4563      	cmp	r3, ip
 80271a6:	dd03      	ble.n	80271b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80271a8:	b115      	cbz	r5, 80271b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80271aa:	3301      	adds	r3, #1
 80271ac:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80271b0:	2d0f      	cmp	r5, #15
 80271b2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80271b6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80271ba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80271be:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80271c2:	d801      	bhi.n	80271c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80271c4:	2f0f      	cmp	r7, #15
 80271c6:	d911      	bls.n	80271ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80271c8:	4b80      	ldr	r3, [pc, #512]	; (80273cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80271ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80271ce:	4a80      	ldr	r2, [pc, #512]	; (80273d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80271d0:	4880      	ldr	r0, [pc, #512]	; (80273d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80271d2:	f003 fd07 	bl	802abe4 <__assert_func>
 80271d6:	4602      	mov	r2, r0
 80271d8:	e7cd      	b.n	8027176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80271da:	4606      	mov	r6, r0
 80271dc:	4602      	mov	r2, r0
 80271de:	e7d2      	b.n	8027186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80271e0:	4606      	mov	r6, r0
 80271e2:	e7d0      	b.n	8027186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80271e4:	4604      	mov	r4, r0
 80271e6:	e7da      	b.n	802719e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80271e8:	4604      	mov	r4, r0
 80271ea:	e7e1      	b.n	80271b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80271ec:	b2ab      	uxth	r3, r5
 80271ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80271f2:	b2bf      	uxth	r7, r7
 80271f4:	fb03 fe07 	mul.w	lr, r3, r7
 80271f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80271fc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027200:	eba3 0c0e 	sub.w	ip, r3, lr
 8027204:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8027208:	b2bf      	uxth	r7, r7
 802720a:	fa1f fc8c 	uxth.w	ip, ip
 802720e:	eba5 0507 	sub.w	r5, r5, r7
 8027212:	fb0c f30a 	mul.w	r3, ip, sl
 8027216:	b2ad      	uxth	r5, r5
 8027218:	fb05 330b 	mla	r3, r5, fp, r3
 802721c:	fb07 3309 	mla	r3, r7, r9, r3
 8027220:	fb0e 3308 	mla	r3, lr, r8, r3
 8027224:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027228:	9303      	str	r3, [sp, #12]
 802722a:	d018      	beq.n	802725e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 802722c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027230:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027234:	fb0b f303 	mul.w	r3, fp, r3
 8027238:	fb0b fb02 	mul.w	fp, fp, r2
 802723c:	0a1a      	lsrs	r2, r3, #8
 802723e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027242:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027246:	441a      	add	r2, r3
 8027248:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802724c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8027250:	0a12      	lsrs	r2, r2, #8
 8027252:	0a1b      	lsrs	r3, r3, #8
 8027254:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027258:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802725c:	431a      	orrs	r2, r3
 802725e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027262:	d019      	beq.n	8027298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8027264:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027268:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802726c:	fb0a fb0b 	mul.w	fp, sl, fp
 8027270:	fb0a fa06 	mul.w	sl, sl, r6
 8027274:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027278:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802727c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8027280:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027284:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027288:	445e      	add	r6, fp
 802728a:	0a1b      	lsrs	r3, r3, #8
 802728c:	0a36      	lsrs	r6, r6, #8
 802728e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027292:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027296:	431e      	orrs	r6, r3
 8027298:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802729c:	d019      	beq.n	80272d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 802729e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80272a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80272a6:	fb09 fa0a 	mul.w	sl, r9, sl
 80272aa:	fb09 f904 	mul.w	r9, r9, r4
 80272ae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80272b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80272b6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80272ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80272be:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80272c2:	4454      	add	r4, sl
 80272c4:	0a1b      	lsrs	r3, r3, #8
 80272c6:	0a24      	lsrs	r4, r4, #8
 80272c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80272d0:	431c      	orrs	r4, r3
 80272d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80272d6:	d019      	beq.n	802730c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80272d8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80272dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80272e0:	fb08 f909 	mul.w	r9, r8, r9
 80272e4:	fb08 f800 	mul.w	r8, r8, r0
 80272e8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80272ec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80272f0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80272f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80272f8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80272fc:	4448      	add	r0, r9
 80272fe:	0a1b      	lsrs	r3, r3, #8
 8027300:	0a00      	lsrs	r0, r0, #8
 8027302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027306:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802730a:	4318      	orrs	r0, r3
 802730c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027310:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027314:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027318:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802731c:	fb0c f808 	mul.w	r8, ip, r8
 8027320:	fb0c f606 	mul.w	r6, ip, r6
 8027324:	fb05 8803 	mla	r8, r5, r3, r8
 8027328:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802732c:	fb05 6202 	mla	r2, r5, r2, r6
 8027330:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027334:	fb07 8803 	mla	r8, r7, r3, r8
 8027338:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802733c:	fb07 2704 	mla	r7, r7, r4, r2
 8027340:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027344:	fb0e 8303 	mla	r3, lr, r3, r8
 8027348:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 802734c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8027350:	9803      	ldr	r0, [sp, #12]
 8027352:	b292      	uxth	r2, r2
 8027354:	9c02      	ldr	r4, [sp, #8]
 8027356:	0a1b      	lsrs	r3, r3, #8
 8027358:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802735c:	4350      	muls	r0, r2
 802735e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027362:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027366:	ea43 0e0e 	orr.w	lr, r3, lr
 802736a:	1c43      	adds	r3, r0, #1
 802736c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027370:	fa5f f08e 	uxtb.w	r0, lr
 8027374:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027378:	b2db      	uxtb	r3, r3
 802737a:	fb14 f403 	smulbb	r4, r4, r3
 802737e:	fb00 4002 	mla	r0, r0, r2, r4
 8027382:	b280      	uxth	r0, r0
 8027384:	1c44      	adds	r4, r0, #1
 8027386:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802738a:	9c01      	ldr	r4, [sp, #4]
 802738c:	fb14 f403 	smulbb	r4, r4, r3
 8027390:	1200      	asrs	r0, r0, #8
 8027392:	7008      	strb	r0, [r1, #0]
 8027394:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8027398:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802739c:	fb00 4002 	mla	r0, r0, r2, r4
 80273a0:	b280      	uxth	r0, r0
 80273a2:	1c44      	adds	r4, r0, #1
 80273a4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80273a8:	1200      	asrs	r0, r0, #8
 80273aa:	7048      	strb	r0, [r1, #1]
 80273ac:	9800      	ldr	r0, [sp, #0]
 80273ae:	fb10 f303 	smulbb	r3, r0, r3
 80273b2:	fb0e 3202 	mla	r2, lr, r2, r3
 80273b6:	b292      	uxth	r2, r2
 80273b8:	f102 0e01 	add.w	lr, r2, #1
 80273bc:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80273c0:	1212      	asrs	r2, r2, #8
 80273c2:	708a      	strb	r2, [r1, #2]
 80273c4:	b005      	add	sp, #20
 80273c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273ca:	bf00      	nop
 80273cc:	080301ff 	.word	0x080301ff
 80273d0:	080306f6 	.word	0x080306f6
 80273d4:	080302c8 	.word	0x080302c8

080273d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80273d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273dc:	ed2d 8b08 	vpush	{d8-d11}
 80273e0:	b099      	sub	sp, #100	; 0x64
 80273e2:	eeb0 aa40 	vmov.f32	s20, s0
 80273e6:	eef0 9a60 	vmov.f32	s19, s1
 80273ea:	9306      	str	r3, [sp, #24]
 80273ec:	eeb0 9a41 	vmov.f32	s18, s2
 80273f0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80273f4:	eeb0 8a62 	vmov.f32	s16, s5
 80273f8:	9216      	str	r2, [sp, #88]	; 0x58
 80273fa:	eef0 8a43 	vmov.f32	s17, s6
 80273fe:	9307      	str	r3, [sp, #28]
 8027400:	eef0 ba44 	vmov.f32	s23, s8
 8027404:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8027408:	eeb0 ba64 	vmov.f32	s22, s9
 802740c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802740e:	eef0 aa45 	vmov.f32	s21, s10
 8027412:	9310      	str	r3, [sp, #64]	; 0x40
 8027414:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8027418:	9017      	str	r0, [sp, #92]	; 0x5c
 802741a:	9112      	str	r1, [sp, #72]	; 0x48
 802741c:	6850      	ldr	r0, [r2, #4]
 802741e:	9315      	str	r3, [sp, #84]	; 0x54
 8027420:	6812      	ldr	r2, [r2, #0]
 8027422:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8027424:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8027428:	fb00 1303 	mla	r3, r0, r3, r1
 802742c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027430:	18d3      	adds	r3, r2, r3
 8027432:	930a      	str	r3, [sp, #40]	; 0x28
 8027434:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027436:	681b      	ldr	r3, [r3, #0]
 8027438:	9311      	str	r3, [sp, #68]	; 0x44
 802743a:	9b07      	ldr	r3, [sp, #28]
 802743c:	009b      	lsls	r3, r3, #2
 802743e:	930e      	str	r3, [sp, #56]	; 0x38
 8027440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027442:	2b00      	cmp	r3, #0
 8027444:	dc03      	bgt.n	802744e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027446:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027448:	2b00      	cmp	r3, #0
 802744a:	f340 833b 	ble.w	8027ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802744e:	9b06      	ldr	r3, [sp, #24]
 8027450:	2b00      	cmp	r3, #0
 8027452:	f340 8197 	ble.w	8027784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8027456:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027458:	1423      	asrs	r3, r4, #16
 802745a:	1412      	asrs	r2, r2, #16
 802745c:	d432      	bmi.n	80274c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 802745e:	1c51      	adds	r1, r2, #1
 8027460:	9807      	ldr	r0, [sp, #28]
 8027462:	4288      	cmp	r0, r1
 8027464:	dd31      	ble.n	80274ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027466:	2b00      	cmp	r3, #0
 8027468:	db2f      	blt.n	80274ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802746a:	1c59      	adds	r1, r3, #1
 802746c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802746e:	4288      	cmp	r0, r1
 8027470:	dd2b      	ble.n	80274ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027472:	9b06      	ldr	r3, [sp, #24]
 8027474:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027476:	3b01      	subs	r3, #1
 8027478:	992b      	ldr	r1, [sp, #172]	; 0xac
 802747a:	fb02 1203 	mla	r2, r2, r3, r1
 802747e:	1412      	asrs	r2, r2, #16
 8027480:	d42e      	bmi.n	80274e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027482:	3201      	adds	r2, #1
 8027484:	9907      	ldr	r1, [sp, #28]
 8027486:	4291      	cmp	r1, r2
 8027488:	dd2a      	ble.n	80274e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802748a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802748c:	fb02 4303 	mla	r3, r2, r3, r4
 8027490:	141b      	asrs	r3, r3, #16
 8027492:	d425      	bmi.n	80274e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027494:	3301      	adds	r3, #1
 8027496:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027498:	429a      	cmp	r2, r3
 802749a:	dd21      	ble.n	80274e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802749c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802749e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80274a2:	f103 0e03 	add.w	lr, r3, #3
 80274a6:	9b06      	ldr	r3, [sp, #24]
 80274a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80274aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	f300 81d2 	bgt.w	8027856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80274b2:	9b06      	ldr	r3, [sp, #24]
 80274b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80274b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80274ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80274be:	4423      	add	r3, r4
 80274c0:	930a      	str	r3, [sp, #40]	; 0x28
 80274c2:	e161      	b.n	8027788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80274c4:	1c51      	adds	r1, r2, #1
 80274c6:	f040 8150 	bne.w	802776a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80274ca:	9907      	ldr	r1, [sp, #28]
 80274cc:	428a      	cmp	r2, r1
 80274ce:	f280 814c 	bge.w	802776a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80274d2:	1c5a      	adds	r2, r3, #1
 80274d4:	f2c0 8149 	blt.w	802776a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80274d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80274da:	4293      	cmp	r3, r2
 80274dc:	f280 8145 	bge.w	802776a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80274e0:	9b06      	ldr	r3, [sp, #24]
 80274e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80274e4:	9314      	str	r3, [sp, #80]	; 0x50
 80274e6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80274ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80274ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80274ee:	2b00      	cmp	r3, #0
 80274f0:	dddf      	ble.n	80274b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80274f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80274f4:	1423      	asrs	r3, r4, #16
 80274f6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80274fa:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80274fe:	1412      	asrs	r2, r2, #16
 8027500:	f100 8190 	bmi.w	8027824 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8027504:	1c55      	adds	r5, r2, #1
 8027506:	9f07      	ldr	r7, [sp, #28]
 8027508:	42af      	cmp	r7, r5
 802750a:	f340 818d 	ble.w	8027828 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802750e:	2b00      	cmp	r3, #0
 8027510:	f2c0 818a 	blt.w	8027828 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8027514:	1c5d      	adds	r5, r3, #1
 8027516:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027518:	42af      	cmp	r7, r5
 802751a:	f340 8185 	ble.w	8027828 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802751e:	9d07      	ldr	r5, [sp, #28]
 8027520:	fb03 2305 	mla	r3, r3, r5, r2
 8027524:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027526:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802752e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027532:	2800      	cmp	r0, #0
 8027534:	f000 8167 	beq.w	8027806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027538:	686a      	ldr	r2, [r5, #4]
 802753a:	920b      	str	r2, [sp, #44]	; 0x2c
 802753c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027540:	2900      	cmp	r1, #0
 8027542:	f000 8169 	beq.w	8027818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8027546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027548:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802754a:	18aa      	adds	r2, r5, r2
 802754c:	59ed      	ldr	r5, [r5, r7]
 802754e:	6852      	ldr	r2, [r2, #4]
 8027550:	9508      	str	r5, [sp, #32]
 8027552:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8027556:	0e15      	lsrs	r5, r2, #24
 8027558:	920c      	str	r2, [sp, #48]	; 0x30
 802755a:	b280      	uxth	r0, r0
 802755c:	b289      	uxth	r1, r1
 802755e:	fb00 fb01 	mul.w	fp, r0, r1
 8027562:	0100      	lsls	r0, r0, #4
 8027564:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8027568:	eba0 090b 	sub.w	r9, r0, fp
 802756c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8027570:	b289      	uxth	r1, r1
 8027572:	fa1f f989 	uxth.w	r9, r9
 8027576:	1a52      	subs	r2, r2, r1
 8027578:	fb09 f008 	mul.w	r0, r9, r8
 802757c:	b292      	uxth	r2, r2
 802757e:	fb02 000c 	mla	r0, r2, ip, r0
 8027582:	fb01 000a 	mla	r0, r1, sl, r0
 8027586:	fb0b 0005 	mla	r0, fp, r5, r0
 802758a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802758e:	2800      	cmp	r0, #0
 8027590:	f000 80e0 	beq.w	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027594:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027598:	d01b      	beq.n	80275d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802759a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802759e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275a2:	fb0c fe0e 	mul.w	lr, ip, lr
 80275a6:	fb0c fc03 	mul.w	ip, ip, r3
 80275aa:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80275ae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80275b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275b6:	4473      	add	r3, lr
 80275b8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80275bc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80275c0:	0a1b      	lsrs	r3, r3, #8
 80275c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275ca:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80275ce:	ea43 030e 	orr.w	r3, r3, lr
 80275d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80275d6:	d01e      	beq.n	8027616 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80275d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80275da:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80275de:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80275e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80275e6:	fb08 f80e 	mul.w	r8, r8, lr
 80275ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275f6:	44e6      	add	lr, ip
 80275f8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80275fc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8027600:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027604:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027608:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802760c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027610:	ea4e 0708 	orr.w	r7, lr, r8
 8027614:	970b      	str	r7, [sp, #44]	; 0x2c
 8027616:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802761a:	d01e      	beq.n	802765a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802761c:	9f08      	ldr	r7, [sp, #32]
 802761e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8027622:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027626:	fb0a f808 	mul.w	r8, sl, r8
 802762a:	fb0a fa0c 	mul.w	sl, sl, ip
 802762e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8027632:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027636:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802763a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802763e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027642:	44c6      	add	lr, r8
 8027644:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027648:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802764c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027650:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027654:	ea4e 070a 	orr.w	r7, lr, sl
 8027658:	9708      	str	r7, [sp, #32]
 802765a:	2dff      	cmp	r5, #255	; 0xff
 802765c:	d01d      	beq.n	802769a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802765e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027660:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8027664:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027668:	fb05 f808 	mul.w	r8, r5, r8
 802766c:	fb05 f50c 	mul.w	r5, r5, ip
 8027670:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8027674:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027678:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802767c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027680:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027684:	44c6      	add	lr, r8
 8027686:	0a2d      	lsrs	r5, r5, #8
 8027688:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802768c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027690:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027694:	ea4e 0505 	orr.w	r5, lr, r5
 8027698:	950c      	str	r5, [sp, #48]	; 0x30
 802769a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802769c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80276a0:	9f08      	ldr	r7, [sp, #32]
 80276a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276a6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80276aa:	fb09 f505 	mul.w	r5, r9, r5
 80276ae:	fb02 550c 	mla	r5, r2, ip, r5
 80276b2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80276b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80276b8:	fb01 550c 	mla	r5, r1, ip, r5
 80276bc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80276c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80276c2:	fb0b 550c 	mla	r5, fp, ip, r5
 80276c6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80276ca:	fb09 f90c 	mul.w	r9, r9, ip
 80276ce:	0a2d      	lsrs	r5, r5, #8
 80276d0:	fb02 9303 	mla	r3, r2, r3, r9
 80276d4:	9a08      	ldr	r2, [sp, #32]
 80276d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80276da:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80276de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80276e0:	fb01 330e 	mla	r3, r1, lr, r3
 80276e4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80276e8:	fb0b 3b01 	mla	fp, fp, r1, r3
 80276ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80276ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80276f0:	4343      	muls	r3, r0
 80276f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80276f6:	1c58      	adds	r0, r3, #1
 80276f8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80276fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027700:	ea45 050b 	orr.w	r5, r5, fp
 8027704:	7833      	ldrb	r3, [r6, #0]
 8027706:	b2ea      	uxtb	r2, r5
 8027708:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802770c:	fb12 f201 	smulbb	r2, r2, r1
 8027710:	b2c0      	uxtb	r0, r0
 8027712:	fb03 2300 	mla	r3, r3, r0, r2
 8027716:	b29b      	uxth	r3, r3
 8027718:	1c5a      	adds	r2, r3, #1
 802771a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802771e:	7872      	ldrb	r2, [r6, #1]
 8027720:	fb12 f200 	smulbb	r2, r2, r0
 8027724:	121b      	asrs	r3, r3, #8
 8027726:	7033      	strb	r3, [r6, #0]
 8027728:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802772c:	0c2d      	lsrs	r5, r5, #16
 802772e:	fb03 2301 	mla	r3, r3, r1, r2
 8027732:	b29b      	uxth	r3, r3
 8027734:	1c5a      	adds	r2, r3, #1
 8027736:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802773a:	121b      	asrs	r3, r3, #8
 802773c:	7073      	strb	r3, [r6, #1]
 802773e:	78b3      	ldrb	r3, [r6, #2]
 8027740:	fb13 f000 	smulbb	r0, r3, r0
 8027744:	fb05 0501 	mla	r5, r5, r1, r0
 8027748:	b2ad      	uxth	r5, r5
 802774a:	1c6b      	adds	r3, r5, #1
 802774c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027750:	122d      	asrs	r5, r5, #8
 8027752:	70b5      	strb	r5, [r6, #2]
 8027754:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027756:	3603      	adds	r6, #3
 8027758:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802775a:	4413      	add	r3, r2
 802775c:	932b      	str	r3, [sp, #172]	; 0xac
 802775e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027760:	441c      	add	r4, r3
 8027762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027764:	3b01      	subs	r3, #1
 8027766:	9314      	str	r3, [sp, #80]	; 0x50
 8027768:	e6c0      	b.n	80274ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802776a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802776c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802776e:	4413      	add	r3, r2
 8027770:	932b      	str	r3, [sp, #172]	; 0xac
 8027772:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027774:	441c      	add	r4, r3
 8027776:	9b06      	ldr	r3, [sp, #24]
 8027778:	3b01      	subs	r3, #1
 802777a:	9306      	str	r3, [sp, #24]
 802777c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802777e:	3303      	adds	r3, #3
 8027780:	930a      	str	r3, [sp, #40]	; 0x28
 8027782:	e664      	b.n	802744e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027784:	f47f ae75 	bne.w	8027472 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8027788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802778a:	2b00      	cmp	r3, #0
 802778c:	f340 819a 	ble.w	8027ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8027790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027794:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027796:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802779a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802779e:	eef0 6a48 	vmov.f32	s13, s16
 80277a2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80277a6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80277aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277ae:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80277b2:	eef0 6a68 	vmov.f32	s13, s17
 80277b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277ba:	ee16 4a90 	vmov	r4, s13
 80277be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80277c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80277c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80277ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80277ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80277d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80277d6:	ee18 2a10 	vmov	r2, s16
 80277da:	eeb0 8a47 	vmov.f32	s16, s14
 80277de:	fb92 f3f3 	sdiv	r3, r2, r3
 80277e2:	ee18 2a90 	vmov	r2, s17
 80277e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80277e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80277ea:	eef0 8a67 	vmov.f32	s17, s15
 80277ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80277f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80277f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80277f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80277f8:	3b01      	subs	r3, #1
 80277fa:	9312      	str	r3, [sp, #72]	; 0x48
 80277fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80277fe:	bf08      	it	eq
 8027800:	4613      	moveq	r3, r2
 8027802:	9306      	str	r3, [sp, #24]
 8027804:	e61c      	b.n	8027440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8027806:	b151      	cbz	r1, 802781e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8027808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802780a:	58aa      	ldr	r2, [r5, r2]
 802780c:	25ff      	movs	r5, #255	; 0xff
 802780e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8027812:	9208      	str	r2, [sp, #32]
 8027814:	46a8      	mov	r8, r5
 8027816:	e6a0      	b.n	802755a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8027818:	25ff      	movs	r5, #255	; 0xff
 802781a:	46aa      	mov	sl, r5
 802781c:	e69d      	b.n	802755a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802781e:	25ff      	movs	r5, #255	; 0xff
 8027820:	46aa      	mov	sl, r5
 8027822:	e7f7      	b.n	8027814 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8027824:	1c57      	adds	r7, r2, #1
 8027826:	d195      	bne.n	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027828:	9d07      	ldr	r5, [sp, #28]
 802782a:	4295      	cmp	r5, r2
 802782c:	dd92      	ble.n	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802782e:	1c5d      	adds	r5, r3, #1
 8027830:	db90      	blt.n	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027832:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027834:	429d      	cmp	r5, r3
 8027836:	dd8d      	ble.n	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027838:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802783a:	9201      	str	r2, [sp, #4]
 802783c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802783e:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8027842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027844:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027846:	9300      	str	r3, [sp, #0]
 8027848:	9b07      	ldr	r3, [sp, #28]
 802784a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802784e:	4631      	mov	r1, r6
 8027850:	f7ff fc68 	bl	8027124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8027854:	e77e      	b.n	8027754 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027856:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027858:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802785c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802785e:	9d07      	ldr	r5, [sp, #28]
 8027860:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027864:	1412      	asrs	r2, r2, #16
 8027866:	1423      	asrs	r3, r4, #16
 8027868:	fb05 2303 	mla	r3, r5, r3, r2
 802786c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802786e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027876:	0e1e      	lsrs	r6, r3, #24
 8027878:	2900      	cmp	r1, #0
 802787a:	f000 8114 	beq.w	8027aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802787e:	686a      	ldr	r2, [r5, #4]
 8027880:	920d      	str	r2, [sp, #52]	; 0x34
 8027882:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8027886:	2800      	cmp	r0, #0
 8027888:	f000 8116 	beq.w	8027ab8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 802788c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802788e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8027890:	18aa      	adds	r2, r5, r2
 8027892:	59ed      	ldr	r5, [r5, r7]
 8027894:	6852      	ldr	r2, [r2, #4]
 8027896:	9509      	str	r5, [sp, #36]	; 0x24
 8027898:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802789c:	0e15      	lsrs	r5, r2, #24
 802789e:	920f      	str	r2, [sp, #60]	; 0x3c
 80278a0:	b289      	uxth	r1, r1
 80278a2:	b280      	uxth	r0, r0
 80278a4:	fb01 fa00 	mul.w	sl, r1, r0
 80278a8:	0109      	lsls	r1, r1, #4
 80278aa:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80278ae:	eba1 080a 	sub.w	r8, r1, sl
 80278b2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80278b6:	b280      	uxth	r0, r0
 80278b8:	fa1f f888 	uxth.w	r8, r8
 80278bc:	1a12      	subs	r2, r2, r0
 80278be:	fb08 f10c 	mul.w	r1, r8, ip
 80278c2:	b292      	uxth	r2, r2
 80278c4:	fb02 1106 	mla	r1, r2, r6, r1
 80278c8:	fb00 1109 	mla	r1, r0, r9, r1
 80278cc:	fb0a 1105 	mla	r1, sl, r5, r1
 80278d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80278d4:	2900      	cmp	r1, #0
 80278d6:	f000 80da 	beq.w	8027a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80278da:	2eff      	cmp	r6, #255	; 0xff
 80278dc:	d016      	beq.n	802790c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80278de:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80278e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80278e6:	4377      	muls	r7, r6
 80278e8:	435e      	muls	r6, r3
 80278ea:	0a3b      	lsrs	r3, r7, #8
 80278ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80278f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80278f4:	443b      	add	r3, r7
 80278f6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80278fa:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80278fe:	0a1b      	lsrs	r3, r3, #8
 8027900:	0a3f      	lsrs	r7, r7, #8
 8027902:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027906:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802790a:	433b      	orrs	r3, r7
 802790c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027910:	d01d      	beq.n	802794e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8027912:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027914:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027916:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802791a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802791e:	fb0c f606 	mul.w	r6, ip, r6
 8027922:	fb0c fc07 	mul.w	ip, ip, r7
 8027926:	0a37      	lsrs	r7, r6, #8
 8027928:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802792c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027930:	4437      	add	r7, r6
 8027932:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8027936:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802793a:	0a3f      	lsrs	r7, r7, #8
 802793c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027940:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027944:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027948:	ea47 060c 	orr.w	r6, r7, ip
 802794c:	960d      	str	r6, [sp, #52]	; 0x34
 802794e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027952:	d01d      	beq.n	8027990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8027954:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027956:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802795a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802795e:	fb09 fc0c 	mul.w	ip, r9, ip
 8027962:	fb09 f906 	mul.w	r9, r9, r6
 8027966:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802796a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802796e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8027972:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027976:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802797a:	4467      	add	r7, ip
 802797c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027980:	0a3f      	lsrs	r7, r7, #8
 8027982:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027986:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802798a:	ea47 0609 	orr.w	r6, r7, r9
 802798e:	9609      	str	r6, [sp, #36]	; 0x24
 8027990:	2dff      	cmp	r5, #255	; 0xff
 8027992:	d01a      	beq.n	80279ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8027994:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8027996:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802799a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802799e:	fb05 fc0c 	mul.w	ip, r5, ip
 80279a2:	4375      	muls	r5, r6
 80279a4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80279a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80279ac:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80279b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80279b4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80279b8:	4467      	add	r7, ip
 80279ba:	0a2d      	lsrs	r5, r5, #8
 80279bc:	0a3f      	lsrs	r7, r7, #8
 80279be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80279c2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80279c6:	433d      	orrs	r5, r7
 80279c8:	950f      	str	r5, [sp, #60]	; 0x3c
 80279ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80279cc:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80279d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279d4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80279d8:	fb08 f505 	mul.w	r5, r8, r5
 80279dc:	fb02 5506 	mla	r5, r2, r6, r5
 80279e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80279e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80279e6:	fb00 5506 	mla	r5, r0, r6, r5
 80279ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80279ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80279f0:	fb0a 5506 	mla	r5, sl, r6, r5
 80279f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80279f6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80279fa:	0a2d      	lsrs	r5, r5, #8
 80279fc:	fb08 f806 	mul.w	r8, r8, r6
 8027a00:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027a04:	fb02 8303 	mla	r3, r2, r3, r8
 8027a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a0a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8027a0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027a10:	fb00 3307 	mla	r3, r0, r7, r3
 8027a14:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027a18:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8027a1c:	fb01 f30b 	mul.w	r3, r1, fp
 8027a20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a24:	1c59      	adds	r1, r3, #1
 8027a26:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027a2a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027a2e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8027a32:	ea45 050c 	orr.w	r5, r5, ip
 8027a36:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027a3a:	b2ea      	uxtb	r2, r5
 8027a3c:	b2c9      	uxtb	r1, r1
 8027a3e:	fb12 f20b 	smulbb	r2, r2, fp
 8027a42:	fb03 2301 	mla	r3, r3, r1, r2
 8027a46:	b29b      	uxth	r3, r3
 8027a48:	1c5a      	adds	r2, r3, #1
 8027a4a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a4e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027a52:	fb12 f201 	smulbb	r2, r2, r1
 8027a56:	121b      	asrs	r3, r3, #8
 8027a58:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027a5c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8027a60:	0c2d      	lsrs	r5, r5, #16
 8027a62:	fb03 230b 	mla	r3, r3, fp, r2
 8027a66:	b29b      	uxth	r3, r3
 8027a68:	1c5a      	adds	r2, r3, #1
 8027a6a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a6e:	121b      	asrs	r3, r3, #8
 8027a70:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8027a74:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8027a78:	fb13 f101 	smulbb	r1, r3, r1
 8027a7c:	fb05 150b 	mla	r5, r5, fp, r1
 8027a80:	b2ad      	uxth	r5, r5
 8027a82:	1c69      	adds	r1, r5, #1
 8027a84:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027a88:	122d      	asrs	r5, r5, #8
 8027a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8027a8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027a90:	f10e 0e03 	add.w	lr, lr, #3
 8027a94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027a96:	4413      	add	r3, r2
 8027a98:	932b      	str	r3, [sp, #172]	; 0xac
 8027a9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027a9c:	441c      	add	r4, r3
 8027a9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027aa0:	3b01      	subs	r3, #1
 8027aa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8027aa4:	e501      	b.n	80274aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8027aa6:	b150      	cbz	r0, 8027abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8027aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027aaa:	58aa      	ldr	r2, [r5, r2]
 8027aac:	25ff      	movs	r5, #255	; 0xff
 8027aae:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8027ab4:	46ac      	mov	ip, r5
 8027ab6:	e6f3      	b.n	80278a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8027ab8:	25ff      	movs	r5, #255	; 0xff
 8027aba:	46a9      	mov	r9, r5
 8027abc:	e6f0      	b.n	80278a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8027abe:	25ff      	movs	r5, #255	; 0xff
 8027ac0:	46a9      	mov	r9, r5
 8027ac2:	e7f7      	b.n	8027ab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8027ac4:	b019      	add	sp, #100	; 0x64
 8027ac6:	ecbd 8b08 	vpop	{d8-d11}
 8027aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8027ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ad4:	b085      	sub	sp, #20
 8027ad6:	7888      	ldrb	r0, [r1, #2]
 8027ad8:	4691      	mov	r9, r2
 8027ada:	9000      	str	r0, [sp, #0]
 8027adc:	7848      	ldrb	r0, [r1, #1]
 8027ade:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8027ae2:	9001      	str	r0, [sp, #4]
 8027ae4:	7808      	ldrb	r0, [r1, #0]
 8027ae6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8027aea:	9002      	str	r0, [sp, #8]
 8027aec:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8027af0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027af4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8027af8:	fb04 c603 	mla	r6, r4, r3, ip
 8027afc:	2c00      	cmp	r4, #0
 8027afe:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8027b02:	9a00      	ldr	r2, [sp, #0]
 8027b04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8027b08:	9a01      	ldr	r2, [sp, #4]
 8027b0a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8027b0e:	db3a      	blt.n	8027b86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8027b10:	45a0      	cmp	r8, r4
 8027b12:	dd38      	ble.n	8027b86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8027b14:	f1bc 0f00 	cmp.w	ip, #0
 8027b18:	db33      	blt.n	8027b82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8027b1a:	4563      	cmp	r3, ip
 8027b1c:	dd31      	ble.n	8027b82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8027b1e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8027b22:	f11c 0601 	adds.w	r6, ip, #1
 8027b26:	d431      	bmi.n	8027b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8027b28:	42b3      	cmp	r3, r6
 8027b2a:	dd2f      	ble.n	8027b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8027b2c:	b375      	cbz	r5, 8027b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8027b2e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8027b32:	3401      	adds	r4, #1
 8027b34:	d42e      	bmi.n	8027b94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8027b36:	45a0      	cmp	r8, r4
 8027b38:	dd2c      	ble.n	8027b94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8027b3a:	b35f      	cbz	r7, 8027b94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8027b3c:	f1bc 0f00 	cmp.w	ip, #0
 8027b40:	db26      	blt.n	8027b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8027b42:	4563      	cmp	r3, ip
 8027b44:	dd24      	ble.n	8027b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8027b46:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8027b4a:	f11c 0c01 	adds.w	ip, ip, #1
 8027b4e:	d405      	bmi.n	8027b5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027b50:	4563      	cmp	r3, ip
 8027b52:	dd03      	ble.n	8027b5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027b54:	b115      	cbz	r5, 8027b5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027b56:	3301      	adds	r3, #1
 8027b58:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8027b5c:	2d0f      	cmp	r5, #15
 8027b5e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027b62:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027b66:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027b6a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027b6e:	d801      	bhi.n	8027b74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8027b70:	2f0f      	cmp	r7, #15
 8027b72:	d911      	bls.n	8027b98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8027b74:	4b77      	ldr	r3, [pc, #476]	; (8027d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8027b76:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8027b7a:	4a77      	ldr	r2, [pc, #476]	; (8027d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8027b7c:	4877      	ldr	r0, [pc, #476]	; (8027d5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8027b7e:	f003 f831 	bl	802abe4 <__assert_func>
 8027b82:	4602      	mov	r2, r0
 8027b84:	e7cd      	b.n	8027b22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8027b86:	4606      	mov	r6, r0
 8027b88:	4602      	mov	r2, r0
 8027b8a:	e7d2      	b.n	8027b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8027b8c:	4606      	mov	r6, r0
 8027b8e:	e7d0      	b.n	8027b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8027b90:	4604      	mov	r4, r0
 8027b92:	e7da      	b.n	8027b4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8027b94:	4604      	mov	r4, r0
 8027b96:	e7e1      	b.n	8027b5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027b98:	b2ab      	uxth	r3, r5
 8027b9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027b9e:	b2bf      	uxth	r7, r7
 8027ba0:	fb03 fe07 	mul.w	lr, r3, r7
 8027ba4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8027ba8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027bac:	eba3 0c0e 	sub.w	ip, r3, lr
 8027bb0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8027bb4:	b2bf      	uxth	r7, r7
 8027bb6:	fa1f fc8c 	uxth.w	ip, ip
 8027bba:	eba5 0507 	sub.w	r5, r5, r7
 8027bbe:	fb0c f30a 	mul.w	r3, ip, sl
 8027bc2:	b2ad      	uxth	r5, r5
 8027bc4:	fb05 330b 	mla	r3, r5, fp, r3
 8027bc8:	fb07 3309 	mla	r3, r7, r9, r3
 8027bcc:	fb0e 3308 	mla	r3, lr, r8, r3
 8027bd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027bd4:	9303      	str	r3, [sp, #12]
 8027bd6:	d018      	beq.n	8027c0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8027bd8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027bdc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027be0:	fb0b f303 	mul.w	r3, fp, r3
 8027be4:	fb0b fb02 	mul.w	fp, fp, r2
 8027be8:	0a1a      	lsrs	r2, r3, #8
 8027bea:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027bee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027bf2:	441a      	add	r2, r3
 8027bf4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8027bf8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8027bfc:	0a12      	lsrs	r2, r2, #8
 8027bfe:	0a1b      	lsrs	r3, r3, #8
 8027c00:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c08:	431a      	orrs	r2, r3
 8027c0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027c0e:	d019      	beq.n	8027c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8027c10:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027c14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027c18:	fb0a fb0b 	mul.w	fp, sl, fp
 8027c1c:	fb0a fa06 	mul.w	sl, sl, r6
 8027c20:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027c24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027c28:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8027c2c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027c30:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027c34:	445e      	add	r6, fp
 8027c36:	0a1b      	lsrs	r3, r3, #8
 8027c38:	0a36      	lsrs	r6, r6, #8
 8027c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c3e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027c42:	431e      	orrs	r6, r3
 8027c44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027c48:	d019      	beq.n	8027c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8027c4a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027c4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027c52:	fb09 fa0a 	mul.w	sl, r9, sl
 8027c56:	fb09 f904 	mul.w	r9, r9, r4
 8027c5a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027c5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027c62:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8027c66:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027c6a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8027c6e:	4454      	add	r4, sl
 8027c70:	0a1b      	lsrs	r3, r3, #8
 8027c72:	0a24      	lsrs	r4, r4, #8
 8027c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c78:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027c7c:	431c      	orrs	r4, r3
 8027c7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027c82:	d019      	beq.n	8027cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8027c84:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8027c88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027c8c:	fb08 f909 	mul.w	r9, r8, r9
 8027c90:	fb08 f800 	mul.w	r8, r8, r0
 8027c94:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8027c98:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027c9c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8027ca0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027ca4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8027ca8:	4448      	add	r0, r9
 8027caa:	0a1b      	lsrs	r3, r3, #8
 8027cac:	0a00      	lsrs	r0, r0, #8
 8027cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027cb2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027cb6:	4318      	orrs	r0, r3
 8027cb8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027cbc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027cc0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027cc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027cc8:	fb0c f808 	mul.w	r8, ip, r8
 8027ccc:	fb0c f606 	mul.w	r6, ip, r6
 8027cd0:	fb05 8803 	mla	r8, r5, r3, r8
 8027cd4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027cd8:	fb05 6202 	mla	r2, r5, r2, r6
 8027cdc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027ce0:	fb07 8803 	mla	r8, r7, r3, r8
 8027ce4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027ce8:	fb07 2704 	mla	r7, r7, r4, r2
 8027cec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027cf0:	fb0e 8303 	mla	r3, lr, r3, r8
 8027cf4:	fb0e 7e00 	mla	lr, lr, r0, r7
 8027cf8:	9802      	ldr	r0, [sp, #8]
 8027cfa:	0a1b      	lsrs	r3, r3, #8
 8027cfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027d08:	ea43 0e0e 	orr.w	lr, r3, lr
 8027d0c:	9b03      	ldr	r3, [sp, #12]
 8027d0e:	43db      	mvns	r3, r3
 8027d10:	b2db      	uxtb	r3, r3
 8027d12:	4358      	muls	r0, r3
 8027d14:	1c42      	adds	r2, r0, #1
 8027d16:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027d1a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8027d1e:	700a      	strb	r2, [r1, #0]
 8027d20:	9a01      	ldr	r2, [sp, #4]
 8027d22:	435a      	muls	r2, r3
 8027d24:	1c50      	adds	r0, r2, #1
 8027d26:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027d2a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8027d2e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8027d32:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027d36:	704a      	strb	r2, [r1, #1]
 8027d38:	9a00      	ldr	r2, [sp, #0]
 8027d3a:	435a      	muls	r2, r3
 8027d3c:	4613      	mov	r3, r2
 8027d3e:	3201      	adds	r2, #1
 8027d40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027d44:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8027d48:	f881 e002 	strb.w	lr, [r1, #2]
 8027d4c:	b005      	add	sp, #20
 8027d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d52:	bf00      	nop
 8027d54:	080301ff 	.word	0x080301ff
 8027d58:	080306f6 	.word	0x080306f6
 8027d5c:	080302c8 	.word	0x080302c8

08027d60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d64:	ed2d 8b08 	vpush	{d8-d11}
 8027d68:	b097      	sub	sp, #92	; 0x5c
 8027d6a:	eeb0 aa40 	vmov.f32	s20, s0
 8027d6e:	eef0 9a60 	vmov.f32	s19, s1
 8027d72:	9306      	str	r3, [sp, #24]
 8027d74:	eeb0 9a41 	vmov.f32	s18, s2
 8027d78:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8027d7c:	eeb0 8a62 	vmov.f32	s16, s5
 8027d80:	9214      	str	r2, [sp, #80]	; 0x50
 8027d82:	eef0 8a43 	vmov.f32	s17, s6
 8027d86:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027d88:	eef0 ba44 	vmov.f32	s23, s8
 8027d8c:	9307      	str	r3, [sp, #28]
 8027d8e:	eeb0 ba64 	vmov.f32	s22, s9
 8027d92:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8027d96:	eef0 aa45 	vmov.f32	s21, s10
 8027d9a:	9015      	str	r0, [sp, #84]	; 0x54
 8027d9c:	9112      	str	r1, [sp, #72]	; 0x48
 8027d9e:	6850      	ldr	r0, [r2, #4]
 8027da0:	9310      	str	r3, [sp, #64]	; 0x40
 8027da2:	6812      	ldr	r2, [r2, #0]
 8027da4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027da6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027daa:	fb00 1303 	mla	r3, r0, r3, r1
 8027dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027db2:	18d3      	adds	r3, r2, r3
 8027db4:	930a      	str	r3, [sp, #40]	; 0x28
 8027db6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	9311      	str	r3, [sp, #68]	; 0x44
 8027dbc:	9b07      	ldr	r3, [sp, #28]
 8027dbe:	009b      	lsls	r3, r3, #2
 8027dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8027dc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027dc4:	2b00      	cmp	r3, #0
 8027dc6:	dc03      	bgt.n	8027dd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027dc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027dca:	2b00      	cmp	r3, #0
 8027dcc:	f340 832e 	ble.w	802842c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8027dd0:	9b06      	ldr	r3, [sp, #24]
 8027dd2:	2b00      	cmp	r3, #0
 8027dd4:	f340 8186 	ble.w	80280e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8027dd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027dda:	1423      	asrs	r3, r4, #16
 8027ddc:	1412      	asrs	r2, r2, #16
 8027dde:	d42f      	bmi.n	8027e40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8027de0:	1c51      	adds	r1, r2, #1
 8027de2:	9807      	ldr	r0, [sp, #28]
 8027de4:	4288      	cmp	r0, r1
 8027de6:	dd2e      	ble.n	8027e46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	db2c      	blt.n	8027e46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027dec:	1c59      	adds	r1, r3, #1
 8027dee:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027df0:	4288      	cmp	r0, r1
 8027df2:	dd28      	ble.n	8027e46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027df4:	9b06      	ldr	r3, [sp, #24]
 8027df6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027df8:	3b01      	subs	r3, #1
 8027dfa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027dfc:	fb02 1203 	mla	r2, r2, r3, r1
 8027e00:	1412      	asrs	r2, r2, #16
 8027e02:	d42b      	bmi.n	8027e5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8027e04:	3201      	adds	r2, #1
 8027e06:	9907      	ldr	r1, [sp, #28]
 8027e08:	4291      	cmp	r1, r2
 8027e0a:	dd27      	ble.n	8027e5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8027e0c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027e0e:	fb02 4303 	mla	r3, r2, r3, r4
 8027e12:	141b      	asrs	r3, r3, #16
 8027e14:	d422      	bmi.n	8027e5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8027e16:	3301      	adds	r3, #1
 8027e18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e1a:	429a      	cmp	r2, r3
 8027e1c:	dd1e      	ble.n	8027e5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8027e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e20:	f8dd b018 	ldr.w	fp, [sp, #24]
 8027e24:	1cdd      	adds	r5, r3, #3
 8027e26:	f1bb 0f00 	cmp.w	fp, #0
 8027e2a:	f300 81c4 	bgt.w	80281b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8027e2e:	9b06      	ldr	r3, [sp, #24]
 8027e30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e36:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027e3a:	4423      	add	r3, r4
 8027e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8027e3e:	e153      	b.n	80280e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8027e40:	1c51      	adds	r1, r2, #1
 8027e42:	f040 8142 	bne.w	80280ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8027e46:	9907      	ldr	r1, [sp, #28]
 8027e48:	428a      	cmp	r2, r1
 8027e4a:	f280 813e 	bge.w	80280ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8027e4e:	1c5a      	adds	r2, r3, #1
 8027e50:	f2c0 813b 	blt.w	80280ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8027e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e56:	4293      	cmp	r3, r2
 8027e58:	f280 8137 	bge.w	80280ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8027e5c:	9b06      	ldr	r3, [sp, #24]
 8027e5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027e60:	9313      	str	r3, [sp, #76]	; 0x4c
 8027e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027e64:	2b00      	cmp	r3, #0
 8027e66:	dde2      	ble.n	8027e2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8027e68:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027e6a:	1423      	asrs	r3, r4, #16
 8027e6c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027e6e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027e72:	1409      	asrs	r1, r1, #16
 8027e74:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8027e78:	f100 8187 	bmi.w	802818a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8027e7c:	1c4e      	adds	r6, r1, #1
 8027e7e:	9f07      	ldr	r7, [sp, #28]
 8027e80:	42b7      	cmp	r7, r6
 8027e82:	f340 8184 	ble.w	802818e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027e86:	2b00      	cmp	r3, #0
 8027e88:	f2c0 8181 	blt.w	802818e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027e8c:	1c5e      	adds	r6, r3, #1
 8027e8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027e90:	42b7      	cmp	r7, r6
 8027e92:	f340 817c 	ble.w	802818e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027e96:	9e07      	ldr	r6, [sp, #28]
 8027e98:	fb03 1306 	mla	r3, r3, r6, r1
 8027e9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027e9e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8027ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027ea6:	0e1f      	lsrs	r7, r3, #24
 8027ea8:	2a00      	cmp	r2, #0
 8027eaa:	f000 815c 	beq.w	8028166 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8027eae:	6871      	ldr	r1, [r6, #4]
 8027eb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8027eb2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8027eb6:	2800      	cmp	r0, #0
 8027eb8:	f000 815e 	beq.w	8028178 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8027ebc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027ebe:	eb06 0c01 	add.w	ip, r6, r1
 8027ec2:	5876      	ldr	r6, [r6, r1]
 8027ec4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027ec8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8027ecc:	9608      	str	r6, [sp, #32]
 8027ece:	0e0e      	lsrs	r6, r1, #24
 8027ed0:	910c      	str	r1, [sp, #48]	; 0x30
 8027ed2:	b292      	uxth	r2, r2
 8027ed4:	b280      	uxth	r0, r0
 8027ed6:	fb02 fa00 	mul.w	sl, r2, r0
 8027eda:	0112      	lsls	r2, r2, #4
 8027edc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027ee0:	eba2 080a 	sub.w	r8, r2, sl
 8027ee4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027ee8:	b280      	uxth	r0, r0
 8027eea:	fa1f f888 	uxth.w	r8, r8
 8027eee:	1a09      	subs	r1, r1, r0
 8027ef0:	fb08 f20e 	mul.w	r2, r8, lr
 8027ef4:	b289      	uxth	r1, r1
 8027ef6:	fb01 2207 	mla	r2, r1, r7, r2
 8027efa:	fb00 2209 	mla	r2, r0, r9, r2
 8027efe:	fb0a 2206 	mla	r2, sl, r6, r2
 8027f02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027f06:	2a00      	cmp	r2, #0
 8027f08:	f000 80d4 	beq.w	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027f0c:	2fff      	cmp	r7, #255	; 0xff
 8027f0e:	d01a      	beq.n	8027f46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8027f10:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027f18:	fb07 fc0c 	mul.w	ip, r7, ip
 8027f1c:	435f      	muls	r7, r3
 8027f1e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027f22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027f26:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8027f2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f2e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8027f32:	4463      	add	r3, ip
 8027f34:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027f38:	0a1b      	lsrs	r3, r3, #8
 8027f3a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027f3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027f42:	ea43 030b 	orr.w	r3, r3, fp
 8027f46:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027f4a:	d01e      	beq.n	8027f8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8027f4c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027f4e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8027f52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027f56:	fb0e fb0b 	mul.w	fp, lr, fp
 8027f5a:	fb0e fe07 	mul.w	lr, lr, r7
 8027f5e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8027f62:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027f66:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8027f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027f6e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8027f72:	44dc      	add	ip, fp
 8027f74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027f7c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027f80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027f84:	ea4c 070e 	orr.w	r7, ip, lr
 8027f88:	970b      	str	r7, [sp, #44]	; 0x2c
 8027f8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027f8e:	d01e      	beq.n	8027fce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8027f90:	9f08      	ldr	r7, [sp, #32]
 8027f92:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027f96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027f9a:	fb09 fe0e 	mul.w	lr, r9, lr
 8027f9e:	fb09 f907 	mul.w	r9, r9, r7
 8027fa2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027fa6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027faa:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8027fae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027fb2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8027fb6:	44f4      	add	ip, lr
 8027fb8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027fbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027fc0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027fc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027fc8:	ea4c 0709 	orr.w	r7, ip, r9
 8027fcc:	9708      	str	r7, [sp, #32]
 8027fce:	2eff      	cmp	r6, #255	; 0xff
 8027fd0:	d01c      	beq.n	802800c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8027fd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027fd4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027fd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027fdc:	fb06 fe0e 	mul.w	lr, r6, lr
 8027fe0:	437e      	muls	r6, r7
 8027fe2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027fe6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027fea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027fee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ff2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8027ff6:	44f4      	add	ip, lr
 8027ff8:	0a36      	lsrs	r6, r6, #8
 8027ffa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ffe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028002:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028006:	ea4c 0606 	orr.w	r6, ip, r6
 802800a:	960c      	str	r6, [sp, #48]	; 0x30
 802800c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802800e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028016:	2aff      	cmp	r2, #255	; 0xff
 8028018:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802801c:	fb08 f606 	mul.w	r6, r8, r6
 8028020:	fb01 6607 	mla	r6, r1, r7, r6
 8028024:	9f08      	ldr	r7, [sp, #32]
 8028026:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802802a:	fb00 6607 	mla	r6, r0, r7, r6
 802802e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8028030:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028034:	fb0a 6607 	mla	r6, sl, r7, r6
 8028038:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802803a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802803e:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8028042:	fb08 f807 	mul.w	r8, r8, r7
 8028046:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802804a:	fb01 8303 	mla	r3, r1, r3, r8
 802804e:	9908      	ldr	r1, [sp, #32]
 8028050:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028054:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028056:	fb00 330c 	mla	r3, r0, ip, r3
 802805a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802805e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8028062:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028066:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802806a:	ea46 060a 	orr.w	r6, r6, sl
 802806e:	b2f0      	uxtb	r0, r6
 8028070:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8028074:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8028078:	f000 8084 	beq.w	8028184 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802807c:	43d2      	mvns	r2, r2
 802807e:	782b      	ldrb	r3, [r5, #0]
 8028080:	b2d2      	uxtb	r2, r2
 8028082:	fb03 f702 	mul.w	r7, r3, r2
 8028086:	1c7b      	adds	r3, r7, #1
 8028088:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802808c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028090:	702b      	strb	r3, [r5, #0]
 8028092:	786b      	ldrb	r3, [r5, #1]
 8028094:	fb03 f002 	mul.w	r0, r3, r2
 8028098:	1c43      	adds	r3, r0, #1
 802809a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802809e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80280a2:	706b      	strb	r3, [r5, #1]
 80280a4:	78ab      	ldrb	r3, [r5, #2]
 80280a6:	4353      	muls	r3, r2
 80280a8:	1c5a      	adds	r2, r3, #1
 80280aa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80280ae:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80280b2:	70ae      	strb	r6, [r5, #2]
 80280b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80280b6:	3503      	adds	r5, #3
 80280b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80280ba:	4413      	add	r3, r2
 80280bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80280be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80280c0:	441c      	add	r4, r3
 80280c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80280c4:	3b01      	subs	r3, #1
 80280c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80280c8:	e6cb      	b.n	8027e62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80280ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80280cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80280ce:	4413      	add	r3, r2
 80280d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80280d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80280d4:	441c      	add	r4, r3
 80280d6:	9b06      	ldr	r3, [sp, #24]
 80280d8:	3b01      	subs	r3, #1
 80280da:	9306      	str	r3, [sp, #24]
 80280dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80280de:	3303      	adds	r3, #3
 80280e0:	930a      	str	r3, [sp, #40]	; 0x28
 80280e2:	e675      	b.n	8027dd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80280e4:	f47f ae86 	bne.w	8027df4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80280e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	f340 819e 	ble.w	802842c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80280f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80280f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80280f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80280fa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80280fe:	eef0 6a48 	vmov.f32	s13, s16
 8028102:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028106:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802810a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802810e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8028112:	eef0 6a68 	vmov.f32	s13, s17
 8028116:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802811a:	ee16 4a90 	vmov	r4, s13
 802811e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028122:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028126:	ee37 8a48 	vsub.f32	s16, s14, s16
 802812a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802812e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028132:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028136:	ee18 2a10 	vmov	r2, s16
 802813a:	eeb0 8a47 	vmov.f32	s16, s14
 802813e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028142:	ee18 2a90 	vmov	r2, s17
 8028146:	932b      	str	r3, [sp, #172]	; 0xac
 8028148:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802814a:	eef0 8a67 	vmov.f32	s17, s15
 802814e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028152:	932c      	str	r3, [sp, #176]	; 0xb0
 8028154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028156:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028158:	3b01      	subs	r3, #1
 802815a:	9312      	str	r3, [sp, #72]	; 0x48
 802815c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802815e:	bf08      	it	eq
 8028160:	4613      	moveq	r3, r2
 8028162:	9306      	str	r3, [sp, #24]
 8028164:	e62d      	b.n	8027dc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8028166:	b150      	cbz	r0, 802817e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8028168:	990e      	ldr	r1, [sp, #56]	; 0x38
 802816a:	5871      	ldr	r1, [r6, r1]
 802816c:	26ff      	movs	r6, #255	; 0xff
 802816e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028172:	9108      	str	r1, [sp, #32]
 8028174:	46b6      	mov	lr, r6
 8028176:	e6ac      	b.n	8027ed2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8028178:	26ff      	movs	r6, #255	; 0xff
 802817a:	46b1      	mov	r9, r6
 802817c:	e6a9      	b.n	8027ed2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802817e:	26ff      	movs	r6, #255	; 0xff
 8028180:	46b1      	mov	r9, r6
 8028182:	e7f7      	b.n	8028174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8028184:	7028      	strb	r0, [r5, #0]
 8028186:	7069      	strb	r1, [r5, #1]
 8028188:	e793      	b.n	80280b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802818a:	1c4f      	adds	r7, r1, #1
 802818c:	d192      	bne.n	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802818e:	9e07      	ldr	r6, [sp, #28]
 8028190:	428e      	cmp	r6, r1
 8028192:	dd8f      	ble.n	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8028194:	1c5e      	adds	r6, r3, #1
 8028196:	db8d      	blt.n	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8028198:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802819a:	429e      	cmp	r6, r3
 802819c:	dd8a      	ble.n	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802819e:	9600      	str	r6, [sp, #0]
 80281a0:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80281a4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80281a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80281aa:	4629      	mov	r1, r5
 80281ac:	9b07      	ldr	r3, [sp, #28]
 80281ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80281b0:	f7ff fc8e 	bl	8027ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80281b4:	e77e      	b.n	80280b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80281b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80281b8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80281bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80281be:	9e07      	ldr	r6, [sp, #28]
 80281c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80281c4:	1409      	asrs	r1, r1, #16
 80281c6:	1423      	asrs	r3, r4, #16
 80281c8:	fb06 1303 	mla	r3, r6, r3, r1
 80281cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80281ce:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80281d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80281d6:	0e1f      	lsrs	r7, r3, #24
 80281d8:	2a00      	cmp	r2, #0
 80281da:	f000 8113 	beq.w	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80281de:	6871      	ldr	r1, [r6, #4]
 80281e0:	910d      	str	r1, [sp, #52]	; 0x34
 80281e2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80281e6:	2800      	cmp	r0, #0
 80281e8:	f000 8115 	beq.w	8028416 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80281ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80281ee:	eb06 0c01 	add.w	ip, r6, r1
 80281f2:	5876      	ldr	r6, [r6, r1]
 80281f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80281f8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80281fc:	9609      	str	r6, [sp, #36]	; 0x24
 80281fe:	0e0e      	lsrs	r6, r1, #24
 8028200:	910f      	str	r1, [sp, #60]	; 0x3c
 8028202:	b292      	uxth	r2, r2
 8028204:	b280      	uxth	r0, r0
 8028206:	fb02 fa00 	mul.w	sl, r2, r0
 802820a:	0112      	lsls	r2, r2, #4
 802820c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028210:	eba2 080a 	sub.w	r8, r2, sl
 8028214:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028218:	b280      	uxth	r0, r0
 802821a:	fa1f f888 	uxth.w	r8, r8
 802821e:	1a09      	subs	r1, r1, r0
 8028220:	fb08 f20e 	mul.w	r2, r8, lr
 8028224:	b289      	uxth	r1, r1
 8028226:	fb01 2207 	mla	r2, r1, r7, r2
 802822a:	fb00 2209 	mla	r2, r0, r9, r2
 802822e:	fb0a 2206 	mla	r2, sl, r6, r2
 8028232:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028236:	2a00      	cmp	r2, #0
 8028238:	f000 80da 	beq.w	80283f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 802823c:	2fff      	cmp	r7, #255	; 0xff
 802823e:	d01a      	beq.n	8028276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8028240:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028248:	fb07 fc0c 	mul.w	ip, r7, ip
 802824c:	435f      	muls	r7, r3
 802824e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8028252:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028256:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802825a:	4463      	add	r3, ip
 802825c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8028260:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8028264:	0a1b      	lsrs	r3, r3, #8
 8028266:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802826a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802826e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028272:	ea43 030c 	orr.w	r3, r3, ip
 8028276:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802827a:	d021      	beq.n	80282c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 802827c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802827e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028282:	fb0e f707 	mul.w	r7, lr, r7
 8028286:	9713      	str	r7, [sp, #76]	; 0x4c
 8028288:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802828a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802828e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8028290:	fb0e fe0c 	mul.w	lr, lr, ip
 8028294:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028298:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802829c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80282a0:	44bc      	add	ip, r7
 80282a2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80282a6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80282aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80282b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80282b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80282ba:	ea4c 070e 	orr.w	r7, ip, lr
 80282be:	970d      	str	r7, [sp, #52]	; 0x34
 80282c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80282c4:	d01e      	beq.n	8028304 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80282c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80282c8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80282cc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80282d0:	fb09 fe0e 	mul.w	lr, r9, lr
 80282d4:	fb09 f907 	mul.w	r9, r9, r7
 80282d8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80282dc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80282e0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80282e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80282e8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80282ec:	44f4      	add	ip, lr
 80282ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80282f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282f6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80282fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80282fe:	ea4c 0709 	orr.w	r7, ip, r9
 8028302:	9709      	str	r7, [sp, #36]	; 0x24
 8028304:	2eff      	cmp	r6, #255	; 0xff
 8028306:	d01c      	beq.n	8028342 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8028308:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802830a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802830e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028312:	fb06 fe0e 	mul.w	lr, r6, lr
 8028316:	437e      	muls	r6, r7
 8028318:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802831c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028320:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028324:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028328:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802832c:	44f4      	add	ip, lr
 802832e:	0a36      	lsrs	r6, r6, #8
 8028330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028334:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028338:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802833c:	ea4c 0606 	orr.w	r6, ip, r6
 8028340:	960f      	str	r6, [sp, #60]	; 0x3c
 8028342:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8028344:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028348:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802834c:	2aff      	cmp	r2, #255	; 0xff
 802834e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028352:	fb08 f606 	mul.w	r6, r8, r6
 8028356:	fb01 6607 	mla	r6, r1, r7, r6
 802835a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802835c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028360:	fb00 6607 	mla	r6, r0, r7, r6
 8028364:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8028366:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802836a:	fb0a 6607 	mla	r6, sl, r7, r6
 802836e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8028370:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028374:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8028378:	fb08 f807 	mul.w	r8, r8, r7
 802837c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028380:	fb01 8303 	mla	r3, r1, r3, r8
 8028384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028386:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802838a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802838c:	fb00 330c 	mla	r3, r0, ip, r3
 8028390:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8028394:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8028398:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802839c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80283a0:	ea46 060e 	orr.w	r6, r6, lr
 80283a4:	b2f0      	uxtb	r0, r6
 80283a6:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80283aa:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80283ae:	d038      	beq.n	8028422 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80283b0:	43d2      	mvns	r2, r2
 80283b2:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80283b6:	b2d2      	uxtb	r2, r2
 80283b8:	4357      	muls	r7, r2
 80283ba:	1c7b      	adds	r3, r7, #1
 80283bc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80283c0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80283c4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80283c8:	4350      	muls	r0, r2
 80283ca:	f805 3c03 	strb.w	r3, [r5, #-3]
 80283ce:	1c43      	adds	r3, r0, #1
 80283d0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80283d4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80283d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80283dc:	4353      	muls	r3, r2
 80283de:	f805 1c02 	strb.w	r1, [r5, #-2]
 80283e2:	1c5a      	adds	r2, r3, #1
 80283e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80283e8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80283ec:	f805 6c01 	strb.w	r6, [r5, #-1]
 80283f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80283f2:	3503      	adds	r5, #3
 80283f4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80283f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80283fa:	4413      	add	r3, r2
 80283fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80283fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028400:	441c      	add	r4, r3
 8028402:	e510      	b.n	8027e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8028404:	b150      	cbz	r0, 802841c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8028406:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028408:	5871      	ldr	r1, [r6, r1]
 802840a:	26ff      	movs	r6, #255	; 0xff
 802840c:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028410:	9109      	str	r1, [sp, #36]	; 0x24
 8028412:	46b6      	mov	lr, r6
 8028414:	e6f5      	b.n	8028202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8028416:	26ff      	movs	r6, #255	; 0xff
 8028418:	46b1      	mov	r9, r6
 802841a:	e6f2      	b.n	8028202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802841c:	26ff      	movs	r6, #255	; 0xff
 802841e:	46b1      	mov	r9, r6
 8028420:	e7f7      	b.n	8028412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8028422:	f805 0c03 	strb.w	r0, [r5, #-3]
 8028426:	f805 1c02 	strb.w	r1, [r5, #-2]
 802842a:	e7df      	b.n	80283ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 802842c:	b017      	add	sp, #92	; 0x5c
 802842e:	ecbd 8b08 	vpop	{d8-d11}
 8028432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028438 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8028438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802843c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8028440:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028444:	2800      	cmp	r0, #0
 8028446:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802844a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802844e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028452:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8028456:	db6b      	blt.n	8028530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028458:	4580      	cmp	r8, r0
 802845a:	dd69      	ble.n	8028530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802845c:	f1bc 0f00 	cmp.w	ip, #0
 8028460:	db66      	blt.n	8028530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028462:	45e1      	cmp	r9, ip
 8028464:	dd64      	ble.n	8028530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028466:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802846a:	f01e 0f01 	tst.w	lr, #1
 802846e:	5d16      	ldrb	r6, [r2, r4]
 8028470:	bf0c      	ite	eq
 8028472:	f006 060f 	andeq.w	r6, r6, #15
 8028476:	1136      	asrne	r6, r6, #4
 8028478:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802847c:	b2f6      	uxtb	r6, r6
 802847e:	f110 0a01 	adds.w	sl, r0, #1
 8028482:	d457      	bmi.n	8028534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028484:	45d0      	cmp	r8, sl
 8028486:	dd55      	ble.n	8028534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028488:	f1bc 0f00 	cmp.w	ip, #0
 802848c:	db52      	blt.n	8028534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802848e:	45e1      	cmp	r9, ip
 8028490:	dd50      	ble.n	8028534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028492:	2f00      	cmp	r7, #0
 8028494:	f000 80ac 	beq.w	80285f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8028498:	f10e 0b01 	add.w	fp, lr, #1
 802849c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80284a0:	f01b 0f01 	tst.w	fp, #1
 80284a4:	5d14      	ldrb	r4, [r2, r4]
 80284a6:	bf0c      	ite	eq
 80284a8:	f004 040f 	andeq.w	r4, r4, #15
 80284ac:	1124      	asrne	r4, r4, #4
 80284ae:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80284b2:	b2e4      	uxtb	r4, r4
 80284b4:	2d00      	cmp	r5, #0
 80284b6:	f000 8096 	beq.w	80285e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80284ba:	2800      	cmp	r0, #0
 80284bc:	f10c 0c01 	add.w	ip, ip, #1
 80284c0:	db3c      	blt.n	802853c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80284c2:	4580      	cmp	r8, r0
 80284c4:	dd3a      	ble.n	802853c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80284c6:	f1bc 0f00 	cmp.w	ip, #0
 80284ca:	db37      	blt.n	802853c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80284cc:	45e1      	cmp	r9, ip
 80284ce:	dd35      	ble.n	802853c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80284d0:	eb03 0b0e 	add.w	fp, r3, lr
 80284d4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80284d8:	f01b 0f01 	tst.w	fp, #1
 80284dc:	5c10      	ldrb	r0, [r2, r0]
 80284de:	bf0c      	ite	eq
 80284e0:	f000 000f 	andeq.w	r0, r0, #15
 80284e4:	1100      	asrne	r0, r0, #4
 80284e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80284ea:	b2c0      	uxtb	r0, r0
 80284ec:	f1ba 0f00 	cmp.w	sl, #0
 80284f0:	db26      	blt.n	8028540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80284f2:	45d0      	cmp	r8, sl
 80284f4:	dd24      	ble.n	8028540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80284f6:	f1bc 0f00 	cmp.w	ip, #0
 80284fa:	db21      	blt.n	8028540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80284fc:	45e1      	cmp	r9, ip
 80284fe:	dd1f      	ble.n	8028540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028500:	b307      	cbz	r7, 8028544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8028502:	3301      	adds	r3, #1
 8028504:	449e      	add	lr, r3
 8028506:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802850a:	f01e 0f01 	tst.w	lr, #1
 802850e:	5cd3      	ldrb	r3, [r2, r3]
 8028510:	bf0c      	ite	eq
 8028512:	f003 030f 	andeq.w	r3, r3, #15
 8028516:	111b      	asrne	r3, r3, #4
 8028518:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802851c:	b2db      	uxtb	r3, r3
 802851e:	2f0f      	cmp	r7, #15
 8028520:	d911      	bls.n	8028546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8028522:	4b35      	ldr	r3, [pc, #212]	; (80285f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8028524:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8028528:	4a34      	ldr	r2, [pc, #208]	; (80285fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802852a:	4835      	ldr	r0, [pc, #212]	; (8028600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 802852c:	f002 fb5a 	bl	802abe4 <__assert_func>
 8028530:	2600      	movs	r6, #0
 8028532:	e7a4      	b.n	802847e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8028534:	2400      	movs	r4, #0
 8028536:	e7bd      	b.n	80284b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8028538:	463c      	mov	r4, r7
 802853a:	e7be      	b.n	80284ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 802853c:	2000      	movs	r0, #0
 802853e:	e7d5      	b.n	80284ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8028540:	2300      	movs	r3, #0
 8028542:	e7ec      	b.n	802851e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8028544:	463b      	mov	r3, r7
 8028546:	2d0f      	cmp	r5, #15
 8028548:	d8eb      	bhi.n	8028522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802854a:	b2bf      	uxth	r7, r7
 802854c:	b2ad      	uxth	r5, r5
 802854e:	fb07 f205 	mul.w	r2, r7, r5
 8028552:	013f      	lsls	r7, r7, #4
 8028554:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8028558:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802855c:	1abf      	subs	r7, r7, r2
 802855e:	b2ad      	uxth	r5, r5
 8028560:	b2bf      	uxth	r7, r7
 8028562:	ebac 0c05 	sub.w	ip, ip, r5
 8028566:	437c      	muls	r4, r7
 8028568:	fa1f fc8c 	uxth.w	ip, ip
 802856c:	fb06 440c 	mla	r4, r6, ip, r4
 8028570:	fb05 4400 	mla	r4, r5, r0, r4
 8028574:	fb02 4203 	mla	r2, r2, r3, r4
 8028578:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802857c:	b38a      	cbz	r2, 80285e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802857e:	4b21      	ldr	r3, [pc, #132]	; (8028604 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8028580:	681c      	ldr	r4, [r3, #0]
 8028582:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8028586:	b2e5      	uxtb	r5, r4
 8028588:	4353      	muls	r3, r2
 802858a:	1c5a      	adds	r2, r3, #1
 802858c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028590:	1212      	asrs	r2, r2, #8
 8028592:	b290      	uxth	r0, r2
 8028594:	43d2      	mvns	r2, r2
 8028596:	fb15 f500 	smulbb	r5, r5, r0
 802859a:	b2d3      	uxtb	r3, r2
 802859c:	780a      	ldrb	r2, [r1, #0]
 802859e:	fb02 5203 	mla	r2, r2, r3, r5
 80285a2:	b292      	uxth	r2, r2
 80285a4:	1c55      	adds	r5, r2, #1
 80285a6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80285aa:	784d      	ldrb	r5, [r1, #1]
 80285ac:	fb15 f503 	smulbb	r5, r5, r3
 80285b0:	1212      	asrs	r2, r2, #8
 80285b2:	700a      	strb	r2, [r1, #0]
 80285b4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80285b8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80285bc:	fb02 5200 	mla	r2, r2, r0, r5
 80285c0:	b292      	uxth	r2, r2
 80285c2:	1c55      	adds	r5, r2, #1
 80285c4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80285c8:	1212      	asrs	r2, r2, #8
 80285ca:	704a      	strb	r2, [r1, #1]
 80285cc:	788a      	ldrb	r2, [r1, #2]
 80285ce:	fb12 f303 	smulbb	r3, r2, r3
 80285d2:	fb04 3300 	mla	r3, r4, r0, r3
 80285d6:	b29b      	uxth	r3, r3
 80285d8:	1c5a      	adds	r2, r3, #1
 80285da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285de:	121b      	asrs	r3, r3, #8
 80285e0:	708b      	strb	r3, [r1, #2]
 80285e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285e6:	2f0f      	cmp	r7, #15
 80285e8:	d89b      	bhi.n	8028522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80285ea:	462b      	mov	r3, r5
 80285ec:	4628      	mov	r0, r5
 80285ee:	e7ac      	b.n	802854a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80285f0:	2d00      	cmp	r5, #0
 80285f2:	d1a1      	bne.n	8028538 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80285f4:	462c      	mov	r4, r5
 80285f6:	e7f8      	b.n	80285ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80285f8:	080301ff 	.word	0x080301ff
 80285fc:	080306f6 	.word	0x080306f6
 8028600:	080302c8 	.word	0x080302c8
 8028604:	2000c018 	.word	0x2000c018

08028608 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802860c:	ed2d 8b08 	vpush	{d8-d11}
 8028610:	b097      	sub	sp, #92	; 0x5c
 8028612:	eeb0 aa40 	vmov.f32	s20, s0
 8028616:	eef0 9a60 	vmov.f32	s19, s1
 802861a:	9308      	str	r3, [sp, #32]
 802861c:	eeb0 9a41 	vmov.f32	s18, s2
 8028620:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8028624:	eeb0 8a62 	vmov.f32	s16, s5
 8028628:	9214      	str	r2, [sp, #80]	; 0x50
 802862a:	eef0 8a43 	vmov.f32	s17, s6
 802862e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028630:	eef0 ba44 	vmov.f32	s23, s8
 8028634:	9309      	str	r3, [sp, #36]	; 0x24
 8028636:	eeb0 ba64 	vmov.f32	s22, s9
 802863a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802863e:	eef0 aa45 	vmov.f32	s21, s10
 8028642:	9015      	str	r0, [sp, #84]	; 0x54
 8028644:	910c      	str	r1, [sp, #48]	; 0x30
 8028646:	930e      	str	r3, [sp, #56]	; 0x38
 8028648:	6850      	ldr	r0, [r2, #4]
 802864a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802864e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028652:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8028656:	fb00 1803 	mla	r8, r0, r3, r1
 802865a:	6813      	ldr	r3, [r2, #0]
 802865c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028660:	4498      	add	r8, r3
 8028662:	f10b 0301 	add.w	r3, fp, #1
 8028666:	f023 0301 	bic.w	r3, r3, #1
 802866a:	930f      	str	r3, [sp, #60]	; 0x3c
 802866c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802866e:	681f      	ldr	r7, [r3, #0]
 8028670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028672:	2b00      	cmp	r3, #0
 8028674:	dc03      	bgt.n	802867e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8028676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028678:	2b00      	cmp	r3, #0
 802867a:	f340 8238 	ble.w	8028aee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802867e:	9b08      	ldr	r3, [sp, #32]
 8028680:	2b00      	cmp	r3, #0
 8028682:	f340 810c 	ble.w	802889e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8028686:	142a      	asrs	r2, r5, #16
 8028688:	ea4f 4326 	mov.w	r3, r6, asr #16
 802868c:	d42c      	bmi.n	80286e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802868e:	1c51      	adds	r1, r2, #1
 8028690:	458b      	cmp	fp, r1
 8028692:	dd2c      	ble.n	80286ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028694:	2b00      	cmp	r3, #0
 8028696:	db2a      	blt.n	80286ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028698:	1c59      	adds	r1, r3, #1
 802869a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802869c:	4288      	cmp	r0, r1
 802869e:	dd26      	ble.n	80286ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80286a0:	9b08      	ldr	r3, [sp, #32]
 80286a2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80286a4:	3b01      	subs	r3, #1
 80286a6:	fb02 5203 	mla	r2, r2, r3, r5
 80286aa:	1412      	asrs	r2, r2, #16
 80286ac:	d429      	bmi.n	8028702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80286ae:	3201      	adds	r2, #1
 80286b0:	4593      	cmp	fp, r2
 80286b2:	dd26      	ble.n	8028702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80286b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80286b6:	fb02 6303 	mla	r3, r2, r3, r6
 80286ba:	141b      	asrs	r3, r3, #16
 80286bc:	d421      	bmi.n	8028702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80286be:	3301      	adds	r3, #1
 80286c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80286c2:	429a      	cmp	r2, r3
 80286c4:	dd1d      	ble.n	8028702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80286c6:	f108 0e03 	add.w	lr, r8, #3
 80286ca:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80286ce:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80286d2:	f1b9 0f00 	cmp.w	r9, #0
 80286d6:	f300 814f 	bgt.w	8028978 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80286da:	9b08      	ldr	r3, [sp, #32]
 80286dc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80286e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80286e4:	44a0      	add	r8, r4
 80286e6:	e0dc      	b.n	80288a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80286e8:	1c51      	adds	r1, r2, #1
 80286ea:	f040 80ce 	bne.w	802888a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80286ee:	4593      	cmp	fp, r2
 80286f0:	f340 80cb 	ble.w	802888a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80286f4:	1c5a      	adds	r2, r3, #1
 80286f6:	f2c0 80c8 	blt.w	802888a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80286fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80286fc:	4293      	cmp	r3, r2
 80286fe:	f280 80c4 	bge.w	802888a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028702:	9b08      	ldr	r3, [sp, #32]
 8028704:	46c1      	mov	r9, r8
 8028706:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802870a:	930d      	str	r3, [sp, #52]	; 0x34
 802870c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802870e:	2b00      	cmp	r3, #0
 8028710:	dde3      	ble.n	80286da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8028712:	1428      	asrs	r0, r5, #16
 8028714:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028718:	ea4f 4326 	mov.w	r3, r6, asr #16
 802871c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028720:	f100 8111 	bmi.w	8028946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8028724:	f100 0c01 	add.w	ip, r0, #1
 8028728:	45e3      	cmp	fp, ip
 802872a:	f340 810e 	ble.w	802894a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802872e:	2b00      	cmp	r3, #0
 8028730:	f2c0 810b 	blt.w	802894a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028734:	f103 0c01 	add.w	ip, r3, #1
 8028738:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802873a:	4564      	cmp	r4, ip
 802873c:	f340 8105 	ble.w	802894a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028740:	fb03 030a 	mla	r3, r3, sl, r0
 8028744:	0858      	lsrs	r0, r3, #1
 8028746:	07dc      	lsls	r4, r3, #31
 8028748:	5c38      	ldrb	r0, [r7, r0]
 802874a:	bf54      	ite	pl
 802874c:	f000 000f 	andpl.w	r0, r0, #15
 8028750:	1100      	asrmi	r0, r0, #4
 8028752:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028756:	b2c0      	uxtb	r0, r0
 8028758:	2a00      	cmp	r2, #0
 802875a:	f000 80e1 	beq.w	8028920 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802875e:	f103 0e01 	add.w	lr, r3, #1
 8028762:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028766:	f01e 0f01 	tst.w	lr, #1
 802876a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802876e:	bf0c      	ite	eq
 8028770:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028774:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028778:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802877c:	fa5f f48c 	uxtb.w	r4, ip
 8028780:	9410      	str	r4, [sp, #64]	; 0x40
 8028782:	b1f9      	cbz	r1, 80287c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8028784:	4453      	add	r3, sl
 8028786:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802878a:	07dc      	lsls	r4, r3, #31
 802878c:	f103 0301 	add.w	r3, r3, #1
 8028790:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028794:	bf54      	ite	pl
 8028796:	f00c 0c0f 	andpl.w	ip, ip, #15
 802879a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802879e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80287a2:	fa5f f48c 	uxtb.w	r4, ip
 80287a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80287aa:	940a      	str	r4, [sp, #40]	; 0x28
 80287ac:	07dc      	lsls	r4, r3, #31
 80287ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80287b2:	bf54      	ite	pl
 80287b4:	f00c 030f 	andpl.w	r3, ip, #15
 80287b8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80287bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80287c0:	b2db      	uxtb	r3, r3
 80287c2:	9311      	str	r3, [sp, #68]	; 0x44
 80287c4:	b292      	uxth	r2, r2
 80287c6:	b289      	uxth	r1, r1
 80287c8:	0113      	lsls	r3, r2, #4
 80287ca:	fb02 fc01 	mul.w	ip, r2, r1
 80287ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80287d0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80287d4:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80287d8:	eba3 030c 	sub.w	r3, r3, ip
 80287dc:	b289      	uxth	r1, r1
 80287de:	b29b      	uxth	r3, r3
 80287e0:	ebae 0e01 	sub.w	lr, lr, r1
 80287e4:	4353      	muls	r3, r2
 80287e6:	fa1f fe8e 	uxth.w	lr, lr
 80287ea:	fb00 320e 	mla	r2, r0, lr, r3
 80287ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80287f0:	fb01 2203 	mla	r2, r1, r3, r2
 80287f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80287f6:	fb0c 2203 	mla	r2, ip, r3, r2
 80287fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80287fe:	2a00      	cmp	r2, #0
 8028800:	d039      	beq.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028802:	4bbd      	ldr	r3, [pc, #756]	; (8028af8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8028804:	6819      	ldr	r1, [r3, #0]
 8028806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028808:	fa5f fc81 	uxtb.w	ip, r1
 802880c:	435a      	muls	r2, r3
 802880e:	1c53      	adds	r3, r2, #1
 8028810:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028814:	1212      	asrs	r2, r2, #8
 8028816:	b290      	uxth	r0, r2
 8028818:	43d2      	mvns	r2, r2
 802881a:	fb1c fc00 	smulbb	ip, ip, r0
 802881e:	b2d3      	uxtb	r3, r2
 8028820:	f899 2000 	ldrb.w	r2, [r9]
 8028824:	fb02 c203 	mla	r2, r2, r3, ip
 8028828:	b292      	uxth	r2, r2
 802882a:	f102 0c01 	add.w	ip, r2, #1
 802882e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028832:	f899 c001 	ldrb.w	ip, [r9, #1]
 8028836:	fb1c fc03 	smulbb	ip, ip, r3
 802883a:	1212      	asrs	r2, r2, #8
 802883c:	f889 2000 	strb.w	r2, [r9]
 8028840:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8028844:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8028848:	fb02 c200 	mla	r2, r2, r0, ip
 802884c:	b292      	uxth	r2, r2
 802884e:	f102 0c01 	add.w	ip, r2, #1
 8028852:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028856:	1212      	asrs	r2, r2, #8
 8028858:	f889 2001 	strb.w	r2, [r9, #1]
 802885c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8028860:	fb12 f303 	smulbb	r3, r2, r3
 8028864:	fb01 3300 	mla	r3, r1, r0, r3
 8028868:	b29b      	uxth	r3, r3
 802886a:	1c5a      	adds	r2, r3, #1
 802886c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028870:	121b      	asrs	r3, r3, #8
 8028872:	f889 3002 	strb.w	r3, [r9, #2]
 8028876:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028878:	f109 0903 	add.w	r9, r9, #3
 802887c:	441d      	add	r5, r3
 802887e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028880:	441e      	add	r6, r3
 8028882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028884:	3b01      	subs	r3, #1
 8028886:	930d      	str	r3, [sp, #52]	; 0x34
 8028888:	e740      	b.n	802870c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802888a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802888c:	f108 0803 	add.w	r8, r8, #3
 8028890:	441d      	add	r5, r3
 8028892:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028894:	441e      	add	r6, r3
 8028896:	9b08      	ldr	r3, [sp, #32]
 8028898:	3b01      	subs	r3, #1
 802889a:	9308      	str	r3, [sp, #32]
 802889c:	e6ef      	b.n	802867e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802889e:	f47f aeff 	bne.w	80286a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80288a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	f340 8122 	ble.w	8028aee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80288aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80288ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80288b4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80288b8:	eef0 6a48 	vmov.f32	s13, s16
 80288bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80288c0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80288c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288c8:	ee16 5a90 	vmov	r5, s13
 80288cc:	eef0 6a68 	vmov.f32	s13, s17
 80288d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288d4:	ee16 6a90 	vmov	r6, s13
 80288d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80288dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80288e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80288e4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80288e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80288ec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80288f0:	ee18 2a10 	vmov	r2, s16
 80288f4:	eeb0 8a47 	vmov.f32	s16, s14
 80288f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80288fc:	ee18 2a90 	vmov	r2, s17
 8028900:	932b      	str	r3, [sp, #172]	; 0xac
 8028902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028904:	eef0 8a67 	vmov.f32	s17, s15
 8028908:	fb92 f3f3 	sdiv	r3, r2, r3
 802890c:	932c      	str	r3, [sp, #176]	; 0xb0
 802890e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028912:	3b01      	subs	r3, #1
 8028914:	930c      	str	r3, [sp, #48]	; 0x30
 8028916:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028918:	bf08      	it	eq
 802891a:	4613      	moveq	r3, r2
 802891c:	9308      	str	r3, [sp, #32]
 802891e:	e6a7      	b.n	8028670 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8028920:	2900      	cmp	r1, #0
 8028922:	f43f af4f 	beq.w	80287c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8028926:	4453      	add	r3, sl
 8028928:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802892c:	07db      	lsls	r3, r3, #31
 802892e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028932:	bf54      	ite	pl
 8028934:	f00c 030f 	andpl.w	r3, ip, #15
 8028938:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802893c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028940:	b2db      	uxtb	r3, r3
 8028942:	930a      	str	r3, [sp, #40]	; 0x28
 8028944:	e73e      	b.n	80287c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8028946:	1c44      	adds	r4, r0, #1
 8028948:	d195      	bne.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802894a:	4583      	cmp	fp, r0
 802894c:	dd93      	ble.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802894e:	1c5c      	adds	r4, r3, #1
 8028950:	db91      	blt.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028952:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028954:	429c      	cmp	r4, r3
 8028956:	dd8e      	ble.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028958:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802895a:	9002      	str	r0, [sp, #8]
 802895c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802895e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8028962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028964:	463a      	mov	r2, r7
 8028966:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802896a:	e9cd b300 	strd	fp, r3, [sp]
 802896e:	4649      	mov	r1, r9
 8028970:	4653      	mov	r3, sl
 8028972:	f7ff fd61 	bl	8028438 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8028976:	e77e      	b.n	8028876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028978:	142a      	asrs	r2, r5, #16
 802897a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802897e:	1433      	asrs	r3, r6, #16
 8028980:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028984:	fb0a 2303 	mla	r3, sl, r3, r2
 8028988:	085a      	lsrs	r2, r3, #1
 802898a:	07dc      	lsls	r4, r3, #31
 802898c:	5cba      	ldrb	r2, [r7, r2]
 802898e:	bf54      	ite	pl
 8028990:	f002 020f 	andpl.w	r2, r2, #15
 8028994:	1112      	asrmi	r2, r2, #4
 8028996:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802899a:	b2d2      	uxtb	r2, r2
 802899c:	2900      	cmp	r1, #0
 802899e:	f000 8093 	beq.w	8028ac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80289a2:	1c5c      	adds	r4, r3, #1
 80289a4:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80289a8:	07e4      	lsls	r4, r4, #31
 80289aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80289ae:	bf54      	ite	pl
 80289b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80289b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80289b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80289bc:	fa5f f48c 	uxtb.w	r4, ip
 80289c0:	9412      	str	r4, [sp, #72]	; 0x48
 80289c2:	b300      	cbz	r0, 8028a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80289c4:	4453      	add	r3, sl
 80289c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80289ca:	07dc      	lsls	r4, r3, #31
 80289cc:	f103 0301 	add.w	r3, r3, #1
 80289d0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80289d4:	bf54      	ite	pl
 80289d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80289da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80289de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80289e2:	fa5f f48c 	uxtb.w	r4, ip
 80289e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80289ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80289ec:	07dc      	lsls	r4, r3, #31
 80289ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80289f2:	bf54      	ite	pl
 80289f4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80289f8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80289fc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a00:	fa5f f38c 	uxtb.w	r3, ip
 8028a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8028a06:	b289      	uxth	r1, r1
 8028a08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028a0a:	b280      	uxth	r0, r0
 8028a0c:	fb01 f300 	mul.w	r3, r1, r0
 8028a10:	0109      	lsls	r1, r1, #4
 8028a12:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028a16:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028a1a:	1ac9      	subs	r1, r1, r3
 8028a1c:	b280      	uxth	r0, r0
 8028a1e:	b289      	uxth	r1, r1
 8028a20:	ebac 0c00 	sub.w	ip, ip, r0
 8028a24:	4361      	muls	r1, r4
 8028a26:	fa1f fc8c 	uxth.w	ip, ip
 8028a2a:	fb02 120c 	mla	r2, r2, ip, r1
 8028a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028a30:	fb00 2001 	mla	r0, r0, r1, r2
 8028a34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028a36:	fb03 0302 	mla	r3, r3, r2, r0
 8028a3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a3e:	2b00      	cmp	r3, #0
 8028a40:	d039      	beq.n	8028ab6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8028a42:	4a2d      	ldr	r2, [pc, #180]	; (8028af8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8028a44:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8028a48:	6810      	ldr	r0, [r2, #0]
 8028a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028a4c:	fa5f fc80 	uxtb.w	ip, r0
 8028a50:	4353      	muls	r3, r2
 8028a52:	1c5a      	adds	r2, r3, #1
 8028a54:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028a58:	121b      	asrs	r3, r3, #8
 8028a5a:	b29a      	uxth	r2, r3
 8028a5c:	43db      	mvns	r3, r3
 8028a5e:	fb1c fc02 	smulbb	ip, ip, r2
 8028a62:	b2db      	uxtb	r3, r3
 8028a64:	fb01 c103 	mla	r1, r1, r3, ip
 8028a68:	b289      	uxth	r1, r1
 8028a6a:	f101 0c01 	add.w	ip, r1, #1
 8028a6e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028a72:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8028a76:	fb1c fc03 	smulbb	ip, ip, r3
 8028a7a:	1209      	asrs	r1, r1, #8
 8028a7c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028a80:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8028a84:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028a88:	fb01 c102 	mla	r1, r1, r2, ip
 8028a8c:	b289      	uxth	r1, r1
 8028a8e:	f101 0c01 	add.w	ip, r1, #1
 8028a92:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028a96:	1209      	asrs	r1, r1, #8
 8028a98:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8028a9c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8028aa0:	fb11 f303 	smulbb	r3, r1, r3
 8028aa4:	fb00 3002 	mla	r0, r0, r2, r3
 8028aa8:	b280      	uxth	r0, r0
 8028aaa:	1c42      	adds	r2, r0, #1
 8028aac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028ab0:	1200      	asrs	r0, r0, #8
 8028ab2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8028ab6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028ab8:	f10e 0e03 	add.w	lr, lr, #3
 8028abc:	f109 39ff 	add.w	r9, r9, #4294967295
 8028ac0:	441d      	add	r5, r3
 8028ac2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ac4:	441e      	add	r6, r3
 8028ac6:	e604      	b.n	80286d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8028ac8:	2800      	cmp	r0, #0
 8028aca:	d09c      	beq.n	8028a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8028acc:	4453      	add	r3, sl
 8028ace:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028ad2:	07db      	lsls	r3, r3, #31
 8028ad4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ad8:	bf54      	ite	pl
 8028ada:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028ade:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028ae2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ae6:	fa5f f38c 	uxtb.w	r3, ip
 8028aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8028aec:	e78b      	b.n	8028a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8028aee:	b017      	add	sp, #92	; 0x5c
 8028af0:	ecbd 8b08 	vpop	{d8-d11}
 8028af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028af8:	2000c018 	.word	0x2000c018

08028afc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8028afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b00:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8028b04:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028b08:	2800      	cmp	r0, #0
 8028b0a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8028b0e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8028b12:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028b16:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8028b1a:	db6b      	blt.n	8028bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8028b1c:	4580      	cmp	r8, r0
 8028b1e:	dd69      	ble.n	8028bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8028b20:	f1bc 0f00 	cmp.w	ip, #0
 8028b24:	db66      	blt.n	8028bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8028b26:	45e1      	cmp	r9, ip
 8028b28:	dd64      	ble.n	8028bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8028b2a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028b2e:	f01e 0f01 	tst.w	lr, #1
 8028b32:	5d16      	ldrb	r6, [r2, r4]
 8028b34:	bf0c      	ite	eq
 8028b36:	f006 060f 	andeq.w	r6, r6, #15
 8028b3a:	1136      	asrne	r6, r6, #4
 8028b3c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028b40:	b2f6      	uxtb	r6, r6
 8028b42:	f110 0a01 	adds.w	sl, r0, #1
 8028b46:	d457      	bmi.n	8028bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8028b48:	45d0      	cmp	r8, sl
 8028b4a:	dd55      	ble.n	8028bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8028b4c:	f1bc 0f00 	cmp.w	ip, #0
 8028b50:	db52      	blt.n	8028bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8028b52:	45e1      	cmp	r9, ip
 8028b54:	dd50      	ble.n	8028bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8028b56:	2f00      	cmp	r7, #0
 8028b58:	f000 80a5 	beq.w	8028ca6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8028b5c:	f10e 0b01 	add.w	fp, lr, #1
 8028b60:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028b64:	f01b 0f01 	tst.w	fp, #1
 8028b68:	5d14      	ldrb	r4, [r2, r4]
 8028b6a:	bf0c      	ite	eq
 8028b6c:	f004 040f 	andeq.w	r4, r4, #15
 8028b70:	1124      	asrne	r4, r4, #4
 8028b72:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028b76:	b2e4      	uxtb	r4, r4
 8028b78:	2d00      	cmp	r5, #0
 8028b7a:	f000 808f 	beq.w	8028c9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8028b7e:	2800      	cmp	r0, #0
 8028b80:	f10c 0c01 	add.w	ip, ip, #1
 8028b84:	db3c      	blt.n	8028c00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028b86:	4580      	cmp	r8, r0
 8028b88:	dd3a      	ble.n	8028c00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028b8a:	f1bc 0f00 	cmp.w	ip, #0
 8028b8e:	db37      	blt.n	8028c00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028b90:	45e1      	cmp	r9, ip
 8028b92:	dd35      	ble.n	8028c00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028b94:	eb03 0b0e 	add.w	fp, r3, lr
 8028b98:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028b9c:	f01b 0f01 	tst.w	fp, #1
 8028ba0:	5c10      	ldrb	r0, [r2, r0]
 8028ba2:	bf0c      	ite	eq
 8028ba4:	f000 000f 	andeq.w	r0, r0, #15
 8028ba8:	1100      	asrne	r0, r0, #4
 8028baa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028bae:	b2c0      	uxtb	r0, r0
 8028bb0:	f1ba 0f00 	cmp.w	sl, #0
 8028bb4:	db26      	blt.n	8028c04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028bb6:	45d0      	cmp	r8, sl
 8028bb8:	dd24      	ble.n	8028c04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028bba:	f1bc 0f00 	cmp.w	ip, #0
 8028bbe:	db21      	blt.n	8028c04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028bc0:	45e1      	cmp	r9, ip
 8028bc2:	dd1f      	ble.n	8028c04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028bc4:	b307      	cbz	r7, 8028c08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8028bc6:	3301      	adds	r3, #1
 8028bc8:	449e      	add	lr, r3
 8028bca:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028bce:	f01e 0f01 	tst.w	lr, #1
 8028bd2:	5cd3      	ldrb	r3, [r2, r3]
 8028bd4:	bf0c      	ite	eq
 8028bd6:	f003 030f 	andeq.w	r3, r3, #15
 8028bda:	111b      	asrne	r3, r3, #4
 8028bdc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028be0:	b2db      	uxtb	r3, r3
 8028be2:	2f0f      	cmp	r7, #15
 8028be4:	d911      	bls.n	8028c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8028be6:	4b32      	ldr	r3, [pc, #200]	; (8028cb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8028be8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8028bec:	4a31      	ldr	r2, [pc, #196]	; (8028cb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8028bee:	4832      	ldr	r0, [pc, #200]	; (8028cb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8028bf0:	f001 fff8 	bl	802abe4 <__assert_func>
 8028bf4:	2600      	movs	r6, #0
 8028bf6:	e7a4      	b.n	8028b42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8028bf8:	2400      	movs	r4, #0
 8028bfa:	e7bd      	b.n	8028b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8028bfc:	463c      	mov	r4, r7
 8028bfe:	e7be      	b.n	8028b7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8028c00:	2000      	movs	r0, #0
 8028c02:	e7d5      	b.n	8028bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8028c04:	2300      	movs	r3, #0
 8028c06:	e7ec      	b.n	8028be2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8028c08:	463b      	mov	r3, r7
 8028c0a:	2d0f      	cmp	r5, #15
 8028c0c:	d8eb      	bhi.n	8028be6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8028c0e:	b2bf      	uxth	r7, r7
 8028c10:	b2ad      	uxth	r5, r5
 8028c12:	fb07 f205 	mul.w	r2, r7, r5
 8028c16:	013f      	lsls	r7, r7, #4
 8028c18:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8028c1c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8028c20:	1abf      	subs	r7, r7, r2
 8028c22:	b2ad      	uxth	r5, r5
 8028c24:	b2bf      	uxth	r7, r7
 8028c26:	ebac 0c05 	sub.w	ip, ip, r5
 8028c2a:	437c      	muls	r4, r7
 8028c2c:	fa1f fc8c 	uxth.w	ip, ip
 8028c30:	fb06 440c 	mla	r4, r6, ip, r4
 8028c34:	fb05 4400 	mla	r4, r5, r0, r4
 8028c38:	fb02 4303 	mla	r3, r2, r3, r4
 8028c3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c40:	b353      	cbz	r3, 8028c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8028c42:	4a1e      	ldr	r2, [pc, #120]	; (8028cbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8028c44:	7808      	ldrb	r0, [r1, #0]
 8028c46:	6814      	ldr	r4, [r2, #0]
 8028c48:	b29a      	uxth	r2, r3
 8028c4a:	43db      	mvns	r3, r3
 8028c4c:	b2e5      	uxtb	r5, r4
 8028c4e:	b2db      	uxtb	r3, r3
 8028c50:	fb15 f502 	smulbb	r5, r5, r2
 8028c54:	fb00 5003 	mla	r0, r0, r3, r5
 8028c58:	b280      	uxth	r0, r0
 8028c5a:	1c45      	adds	r5, r0, #1
 8028c5c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028c60:	784d      	ldrb	r5, [r1, #1]
 8028c62:	fb15 f503 	smulbb	r5, r5, r3
 8028c66:	1200      	asrs	r0, r0, #8
 8028c68:	7008      	strb	r0, [r1, #0]
 8028c6a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8028c6e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028c72:	fb00 5002 	mla	r0, r0, r2, r5
 8028c76:	b280      	uxth	r0, r0
 8028c78:	1c45      	adds	r5, r0, #1
 8028c7a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028c7e:	1200      	asrs	r0, r0, #8
 8028c80:	7048      	strb	r0, [r1, #1]
 8028c82:	7888      	ldrb	r0, [r1, #2]
 8028c84:	fb10 f303 	smulbb	r3, r0, r3
 8028c88:	fb04 3202 	mla	r2, r4, r2, r3
 8028c8c:	b292      	uxth	r2, r2
 8028c8e:	1c53      	adds	r3, r2, #1
 8028c90:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028c94:	1212      	asrs	r2, r2, #8
 8028c96:	708a      	strb	r2, [r1, #2]
 8028c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c9c:	2f0f      	cmp	r7, #15
 8028c9e:	d8a2      	bhi.n	8028be6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8028ca0:	462b      	mov	r3, r5
 8028ca2:	4628      	mov	r0, r5
 8028ca4:	e7b3      	b.n	8028c0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8028ca6:	2d00      	cmp	r5, #0
 8028ca8:	d1a8      	bne.n	8028bfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8028caa:	462c      	mov	r4, r5
 8028cac:	e7f8      	b.n	8028ca0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8028cae:	bf00      	nop
 8028cb0:	080301ff 	.word	0x080301ff
 8028cb4:	080306f6 	.word	0x080306f6
 8028cb8:	080302c8 	.word	0x080302c8
 8028cbc:	2000c018 	.word	0x2000c018

08028cc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cc4:	ed2d 8b08 	vpush	{d8-d11}
 8028cc8:	b095      	sub	sp, #84	; 0x54
 8028cca:	461c      	mov	r4, r3
 8028ccc:	eeb0 aa40 	vmov.f32	s20, s0
 8028cd0:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8028cd4:	eef0 9a60 	vmov.f32	s19, s1
 8028cd8:	920e      	str	r2, [sp, #56]	; 0x38
 8028cda:	eeb0 9a41 	vmov.f32	s18, s2
 8028cde:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028ce0:	eeb0 8a62 	vmov.f32	s16, s5
 8028ce4:	9307      	str	r3, [sp, #28]
 8028ce6:	eef0 8a43 	vmov.f32	s17, s6
 8028cea:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8028cee:	eef0 ba44 	vmov.f32	s23, s8
 8028cf2:	9013      	str	r0, [sp, #76]	; 0x4c
 8028cf4:	eeb0 ba64 	vmov.f32	s22, s9
 8028cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8028cfa:	eef0 aa45 	vmov.f32	s21, s10
 8028cfe:	9308      	str	r3, [sp, #32]
 8028d00:	6850      	ldr	r0, [r2, #4]
 8028d02:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8028d06:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8028d0a:	fb00 1803 	mla	r8, r0, r3, r1
 8028d0e:	6813      	ldr	r3, [r2, #0]
 8028d10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028d14:	4498      	add	r8, r3
 8028d16:	9b07      	ldr	r3, [sp, #28]
 8028d18:	3301      	adds	r3, #1
 8028d1a:	f023 0301 	bic.w	r3, r3, #1
 8028d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028d20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028d22:	681f      	ldr	r7, [r3, #0]
 8028d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	dc03      	bgt.n	8028d32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8028d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	f340 8238 	ble.w	80291a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8028d32:	2c00      	cmp	r4, #0
 8028d34:	f340 8109 	ble.w	8028f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8028d38:	142a      	asrs	r2, r5, #16
 8028d3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028d3e:	d42b      	bmi.n	8028d98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8028d40:	1c51      	adds	r1, r2, #1
 8028d42:	9807      	ldr	r0, [sp, #28]
 8028d44:	4288      	cmp	r0, r1
 8028d46:	dd2a      	ble.n	8028d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8028d48:	2b00      	cmp	r3, #0
 8028d4a:	db28      	blt.n	8028d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8028d4c:	1c59      	adds	r1, r3, #1
 8028d4e:	9808      	ldr	r0, [sp, #32]
 8028d50:	4288      	cmp	r0, r1
 8028d52:	dd24      	ble.n	8028d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8028d54:	1e63      	subs	r3, r4, #1
 8028d56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028d58:	fb02 5203 	mla	r2, r2, r3, r5
 8028d5c:	1412      	asrs	r2, r2, #16
 8028d5e:	d429      	bmi.n	8028db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028d60:	3201      	adds	r2, #1
 8028d62:	9907      	ldr	r1, [sp, #28]
 8028d64:	4291      	cmp	r1, r2
 8028d66:	dd25      	ble.n	8028db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028d68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8028d6a:	fb02 6303 	mla	r3, r2, r3, r6
 8028d6e:	141b      	asrs	r3, r3, #16
 8028d70:	d420      	bmi.n	8028db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028d72:	3301      	adds	r3, #1
 8028d74:	9a08      	ldr	r2, [sp, #32]
 8028d76:	429a      	cmp	r2, r3
 8028d78:	dd1c      	ble.n	8028db4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028d7a:	f108 0e03 	add.w	lr, r8, #3
 8028d7e:	46a1      	mov	r9, r4
 8028d80:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8028d84:	f1b9 0f00 	cmp.w	r9, #0
 8028d88:	f300 8155 	bgt.w	8029036 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8028d8c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8028d90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028d94:	44a0      	add	r8, r4
 8028d96:	e0da      	b.n	8028f4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8028d98:	1c50      	adds	r0, r2, #1
 8028d9a:	f040 80ce 	bne.w	8028f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028d9e:	9907      	ldr	r1, [sp, #28]
 8028da0:	4291      	cmp	r1, r2
 8028da2:	f340 80ca 	ble.w	8028f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028da6:	1c59      	adds	r1, r3, #1
 8028da8:	f2c0 80c7 	blt.w	8028f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028dac:	9a08      	ldr	r2, [sp, #32]
 8028dae:	4293      	cmp	r3, r2
 8028db0:	f280 80c3 	bge.w	8028f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028db4:	46a3      	mov	fp, r4
 8028db6:	46c1      	mov	r9, r8
 8028db8:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8028dbc:	f1bb 0f00 	cmp.w	fp, #0
 8028dc0:	dde4      	ble.n	8028d8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8028dc2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028dc6:	1428      	asrs	r0, r5, #16
 8028dc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028dcc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8028dd2:	f100 8116 	bmi.w	8029002 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028dd6:	f100 0c01 	add.w	ip, r0, #1
 8028dda:	9a07      	ldr	r2, [sp, #28]
 8028ddc:	4562      	cmp	r2, ip
 8028dde:	f340 8112 	ble.w	8029006 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8028de2:	2b00      	cmp	r3, #0
 8028de4:	f2c0 810f 	blt.w	8029006 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8028de8:	f103 0c01 	add.w	ip, r3, #1
 8028dec:	9a08      	ldr	r2, [sp, #32]
 8028dee:	4562      	cmp	r2, ip
 8028df0:	f340 8109 	ble.w	8029006 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8028df4:	fb03 030a 	mla	r3, r3, sl, r0
 8028df8:	0858      	lsrs	r0, r3, #1
 8028dfa:	07da      	lsls	r2, r3, #31
 8028dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028dfe:	5c38      	ldrb	r0, [r7, r0]
 8028e00:	bf54      	ite	pl
 8028e02:	f000 000f 	andpl.w	r0, r0, #15
 8028e06:	1100      	asrmi	r0, r0, #4
 8028e08:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028e0c:	b2c0      	uxtb	r0, r0
 8028e0e:	2a00      	cmp	r2, #0
 8028e10:	f000 80dd 	beq.w	8028fce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8028e14:	f103 0e01 	add.w	lr, r3, #1
 8028e18:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028e1c:	f01e 0f01 	tst.w	lr, #1
 8028e20:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e24:	bf0c      	ite	eq
 8028e26:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028e2a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028e2e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e32:	fa5f fc8c 	uxtb.w	ip, ip
 8028e36:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8028e3a:	b301      	cbz	r1, 8028e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8028e3c:	4453      	add	r3, sl
 8028e3e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e42:	07da      	lsls	r2, r3, #31
 8028e44:	f103 0301 	add.w	r3, r3, #1
 8028e48:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e4c:	bf54      	ite	pl
 8028e4e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028e52:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028e56:	07da      	lsls	r2, r3, #31
 8028e58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e5c:	fa5f fc8c 	uxtb.w	ip, ip
 8028e60:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8028e64:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e6c:	bf54      	ite	pl
 8028e6e:	f00c 030f 	andpl.w	r3, ip, #15
 8028e72:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028e76:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028e7a:	b2db      	uxtb	r3, r3
 8028e7c:	9310      	str	r3, [sp, #64]	; 0x40
 8028e7e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028e82:	b289      	uxth	r1, r1
 8028e84:	fb02 f301 	mul.w	r3, r2, r1
 8028e88:	0112      	lsls	r2, r2, #4
 8028e8a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028e8e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8028e92:	1ad2      	subs	r2, r2, r3
 8028e94:	fa1f fe81 	uxth.w	lr, r1
 8028e98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028e9a:	b292      	uxth	r2, r2
 8028e9c:	ebac 0c0e 	sub.w	ip, ip, lr
 8028ea0:	434a      	muls	r2, r1
 8028ea2:	fa1f fc8c 	uxth.w	ip, ip
 8028ea6:	fb00 200c 	mla	r0, r0, ip, r2
 8028eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028eac:	fb0e 0002 	mla	r0, lr, r2, r0
 8028eb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028eb2:	fb03 0002 	mla	r0, r3, r2, r0
 8028eb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028eba:	b3a8      	cbz	r0, 8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028ebc:	4bbb      	ldr	r3, [pc, #748]	; (80291ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8028ebe:	28ff      	cmp	r0, #255	; 0xff
 8028ec0:	681b      	ldr	r3, [r3, #0]
 8028ec2:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8028ec6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8028eca:	b2db      	uxtb	r3, r3
 8028ecc:	f000 8092 	beq.w	8028ff4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8028ed0:	b282      	uxth	r2, r0
 8028ed2:	43c0      	mvns	r0, r0
 8028ed4:	f899 e000 	ldrb.w	lr, [r9]
 8028ed8:	fb13 f302 	smulbb	r3, r3, r2
 8028edc:	b2c0      	uxtb	r0, r0
 8028ede:	fb11 f102 	smulbb	r1, r1, r2
 8028ee2:	fb0e 3300 	mla	r3, lr, r0, r3
 8028ee6:	fb1c f202 	smulbb	r2, ip, r2
 8028eea:	b29b      	uxth	r3, r3
 8028eec:	f103 0e01 	add.w	lr, r3, #1
 8028ef0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028ef4:	121b      	asrs	r3, r3, #8
 8028ef6:	f889 3000 	strb.w	r3, [r9]
 8028efa:	f899 3001 	ldrb.w	r3, [r9, #1]
 8028efe:	fb03 1100 	mla	r1, r3, r0, r1
 8028f02:	b289      	uxth	r1, r1
 8028f04:	1c4b      	adds	r3, r1, #1
 8028f06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028f0a:	f899 3002 	ldrb.w	r3, [r9, #2]
 8028f0e:	fb03 2000 	mla	r0, r3, r0, r2
 8028f12:	1209      	asrs	r1, r1, #8
 8028f14:	b280      	uxth	r0, r0
 8028f16:	f889 1001 	strb.w	r1, [r9, #1]
 8028f1a:	f100 0c01 	add.w	ip, r0, #1
 8028f1e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8028f22:	1200      	asrs	r0, r0, #8
 8028f24:	f889 0002 	strb.w	r0, [r9, #2]
 8028f28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028f2a:	f109 0903 	add.w	r9, r9, #3
 8028f2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028f32:	441d      	add	r5, r3
 8028f34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028f36:	441e      	add	r6, r3
 8028f38:	e740      	b.n	8028dbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8028f3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028f3c:	3c01      	subs	r4, #1
 8028f3e:	f108 0803 	add.w	r8, r8, #3
 8028f42:	441d      	add	r5, r3
 8028f44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028f46:	441e      	add	r6, r3
 8028f48:	e6f3      	b.n	8028d32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8028f4a:	f47f af03 	bne.w	8028d54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8028f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	f340 8126 	ble.w	80291a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028f60:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028f64:	eef0 6a48 	vmov.f32	s13, s16
 8028f68:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028f6c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028f70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f74:	ee16 5a90 	vmov	r5, s13
 8028f78:	eef0 6a68 	vmov.f32	s13, s17
 8028f7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f80:	ee16 6a90 	vmov	r6, s13
 8028f84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028f88:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028f8c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028f90:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028f94:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028f98:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028f9c:	ee18 2a10 	vmov	r2, s16
 8028fa0:	eeb0 8a47 	vmov.f32	s16, s14
 8028fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fa8:	ee18 2a90 	vmov	r2, s17
 8028fac:	9329      	str	r3, [sp, #164]	; 0xa4
 8028fae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028fb0:	eef0 8a67 	vmov.f32	s17, s15
 8028fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fb8:	932a      	str	r3, [sp, #168]	; 0xa8
 8028fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028fbe:	3b01      	subs	r3, #1
 8028fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8028fc2:	bf08      	it	eq
 8028fc4:	4614      	moveq	r4, r2
 8028fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028fc8:	bf18      	it	ne
 8028fca:	461c      	movne	r4, r3
 8028fcc:	e6aa      	b.n	8028d24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8028fce:	2900      	cmp	r1, #0
 8028fd0:	f43f af55 	beq.w	8028e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8028fd4:	4453      	add	r3, sl
 8028fd6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028fda:	07db      	lsls	r3, r3, #31
 8028fdc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028fe0:	bf54      	ite	pl
 8028fe2:	f00c 030f 	andpl.w	r3, ip, #15
 8028fe6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028fea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028fee:	b2db      	uxtb	r3, r3
 8028ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8028ff2:	e744      	b.n	8028e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8028ff4:	f889 3000 	strb.w	r3, [r9]
 8028ff8:	f889 1001 	strb.w	r1, [r9, #1]
 8028ffc:	f889 c002 	strb.w	ip, [r9, #2]
 8029000:	e792      	b.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029002:	1c42      	adds	r2, r0, #1
 8029004:	d190      	bne.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029006:	9a07      	ldr	r2, [sp, #28]
 8029008:	4282      	cmp	r2, r0
 802900a:	dd8d      	ble.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802900c:	1c5a      	adds	r2, r3, #1
 802900e:	db8b      	blt.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029010:	9a08      	ldr	r2, [sp, #32]
 8029012:	429a      	cmp	r2, r3
 8029014:	dd88      	ble.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029018:	9105      	str	r1, [sp, #20]
 802901a:	4649      	mov	r1, r9
 802901c:	9002      	str	r0, [sp, #8]
 802901e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029020:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8029024:	9b08      	ldr	r3, [sp, #32]
 8029026:	463a      	mov	r2, r7
 8029028:	9301      	str	r3, [sp, #4]
 802902a:	9b07      	ldr	r3, [sp, #28]
 802902c:	9300      	str	r3, [sp, #0]
 802902e:	4653      	mov	r3, sl
 8029030:	f7ff fd64 	bl	8028afc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8029034:	e778      	b.n	8028f28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029036:	142a      	asrs	r2, r5, #16
 8029038:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802903c:	1433      	asrs	r3, r6, #16
 802903e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029042:	fb0a 2303 	mla	r3, sl, r3, r2
 8029046:	085a      	lsrs	r2, r3, #1
 8029048:	07d9      	lsls	r1, r3, #31
 802904a:	5cba      	ldrb	r2, [r7, r2]
 802904c:	bf54      	ite	pl
 802904e:	f002 020f 	andpl.w	r2, r2, #15
 8029052:	1112      	asrmi	r2, r2, #4
 8029054:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029058:	b2d2      	uxtb	r2, r2
 802905a:	2800      	cmp	r0, #0
 802905c:	f000 808a 	beq.w	8029174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8029060:	f103 0b01 	add.w	fp, r3, #1
 8029064:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8029068:	f01b 0f01 	tst.w	fp, #1
 802906c:	5c79      	ldrb	r1, [r7, r1]
 802906e:	bf0c      	ite	eq
 8029070:	f001 010f 	andeq.w	r1, r1, #15
 8029074:	1109      	asrne	r1, r1, #4
 8029076:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802907a:	b2c9      	uxtb	r1, r1
 802907c:	9111      	str	r1, [sp, #68]	; 0x44
 802907e:	f1bc 0f00 	cmp.w	ip, #0
 8029082:	d019      	beq.n	80290b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029084:	4453      	add	r3, sl
 8029086:	0859      	lsrs	r1, r3, #1
 8029088:	f013 0f01 	tst.w	r3, #1
 802908c:	f103 0301 	add.w	r3, r3, #1
 8029090:	5c79      	ldrb	r1, [r7, r1]
 8029092:	bf0c      	ite	eq
 8029094:	f001 010f 	andeq.w	r1, r1, #15
 8029098:	1109      	asrne	r1, r1, #4
 802909a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802909e:	b2c9      	uxtb	r1, r1
 80290a0:	910d      	str	r1, [sp, #52]	; 0x34
 80290a2:	0859      	lsrs	r1, r3, #1
 80290a4:	07db      	lsls	r3, r3, #31
 80290a6:	5c79      	ldrb	r1, [r7, r1]
 80290a8:	bf54      	ite	pl
 80290aa:	f001 010f 	andpl.w	r1, r1, #15
 80290ae:	1109      	asrmi	r1, r1, #4
 80290b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80290b4:	b2c9      	uxtb	r1, r1
 80290b6:	9112      	str	r1, [sp, #72]	; 0x48
 80290b8:	b280      	uxth	r0, r0
 80290ba:	fa1f fc8c 	uxth.w	ip, ip
 80290be:	fb00 f30c 	mul.w	r3, r0, ip
 80290c2:	0100      	lsls	r0, r0, #4
 80290c4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80290c8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80290cc:	1ac0      	subs	r0, r0, r3
 80290ce:	fa1f fc8c 	uxth.w	ip, ip
 80290d2:	b280      	uxth	r0, r0
 80290d4:	eba1 010c 	sub.w	r1, r1, ip
 80290d8:	fa1f fb81 	uxth.w	fp, r1
 80290dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80290de:	4348      	muls	r0, r1
 80290e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80290e2:	fb02 020b 	mla	r2, r2, fp, r0
 80290e6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80290ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80290ec:	fb03 c302 	mla	r3, r3, r2, ip
 80290f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80290f4:	b3ab      	cbz	r3, 8029162 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80290f6:	4a2d      	ldr	r2, [pc, #180]	; (80291ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80290f8:	2bff      	cmp	r3, #255	; 0xff
 80290fa:	6811      	ldr	r1, [r2, #0]
 80290fc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8029100:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8029104:	b2c9      	uxtb	r1, r1
 8029106:	d045      	beq.n	8029194 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8029108:	b298      	uxth	r0, r3
 802910a:	43db      	mvns	r3, r3
 802910c:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8029110:	fb11 f100 	smulbb	r1, r1, r0
 8029114:	b2db      	uxtb	r3, r3
 8029116:	fb1c fc00 	smulbb	ip, ip, r0
 802911a:	fb02 1103 	mla	r1, r2, r3, r1
 802911e:	fb1b f000 	smulbb	r0, fp, r0
 8029122:	b289      	uxth	r1, r1
 8029124:	1c4a      	adds	r2, r1, #1
 8029126:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802912a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802912e:	fb02 cc03 	mla	ip, r2, r3, ip
 8029132:	1209      	asrs	r1, r1, #8
 8029134:	fa1f fc8c 	uxth.w	ip, ip
 8029138:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802913c:	f10c 0201 	add.w	r2, ip, #1
 8029140:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8029144:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8029148:	fb02 0303 	mla	r3, r2, r3, r0
 802914c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8029150:	b29b      	uxth	r3, r3
 8029152:	f80e cc02 	strb.w	ip, [lr, #-2]
 8029156:	1c5a      	adds	r2, r3, #1
 8029158:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802915c:	121b      	asrs	r3, r3, #8
 802915e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8029162:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029164:	f10e 0e03 	add.w	lr, lr, #3
 8029168:	f109 39ff 	add.w	r9, r9, #4294967295
 802916c:	441d      	add	r5, r3
 802916e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029170:	441e      	add	r6, r3
 8029172:	e607      	b.n	8028d84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8029174:	f1bc 0f00 	cmp.w	ip, #0
 8029178:	d09e      	beq.n	80290b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802917a:	4453      	add	r3, sl
 802917c:	0859      	lsrs	r1, r3, #1
 802917e:	07db      	lsls	r3, r3, #31
 8029180:	5c79      	ldrb	r1, [r7, r1]
 8029182:	bf54      	ite	pl
 8029184:	f001 010f 	andpl.w	r1, r1, #15
 8029188:	1109      	asrmi	r1, r1, #4
 802918a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802918e:	b2c9      	uxtb	r1, r1
 8029190:	910d      	str	r1, [sp, #52]	; 0x34
 8029192:	e791      	b.n	80290b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029194:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029198:	f80e cc02 	strb.w	ip, [lr, #-2]
 802919c:	f80e bc01 	strb.w	fp, [lr, #-1]
 80291a0:	e7df      	b.n	8029162 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80291a2:	b015      	add	sp, #84	; 0x54
 80291a4:	ecbd 8b08 	vpop	{d8-d11}
 80291a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291ac:	2000c018 	.word	0x2000c018

080291b0 <CRC_Lock>:
 80291b0:	4a1d      	ldr	r2, [pc, #116]	; (8029228 <CRC_Lock+0x78>)
 80291b2:	b530      	push	{r4, r5, lr}
 80291b4:	6813      	ldr	r3, [r2, #0]
 80291b6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80291ba:	f24c 2540 	movw	r5, #49728	; 0xc240
 80291be:	f023 0301 	bic.w	r3, r3, #1
 80291c2:	6013      	str	r3, [r2, #0]
 80291c4:	4b19      	ldr	r3, [pc, #100]	; (802922c <CRC_Lock+0x7c>)
 80291c6:	681a      	ldr	r2, [r3, #0]
 80291c8:	4022      	ands	r2, r4
 80291ca:	42aa      	cmp	r2, r5
 80291cc:	d005      	beq.n	80291da <CRC_Lock+0x2a>
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80291d4:	4023      	ands	r3, r4
 80291d6:	4293      	cmp	r3, r2
 80291d8:	d11d      	bne.n	8029216 <CRC_Lock+0x66>
 80291da:	4b15      	ldr	r3, [pc, #84]	; (8029230 <CRC_Lock+0x80>)
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	b9d3      	cbnz	r3, 8029216 <CRC_Lock+0x66>
 80291e0:	4a14      	ldr	r2, [pc, #80]	; (8029234 <CRC_Lock+0x84>)
 80291e2:	6813      	ldr	r3, [r2, #0]
 80291e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80291e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80291ec:	d006      	beq.n	80291fc <CRC_Lock+0x4c>
 80291ee:	6813      	ldr	r3, [r2, #0]
 80291f0:	f240 4283 	movw	r2, #1155	; 0x483
 80291f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80291f8:	4293      	cmp	r3, r2
 80291fa:	d10c      	bne.n	8029216 <CRC_Lock+0x66>
 80291fc:	4b0e      	ldr	r3, [pc, #56]	; (8029238 <CRC_Lock+0x88>)
 80291fe:	2201      	movs	r2, #1
 8029200:	601a      	str	r2, [r3, #0]
 8029202:	681a      	ldr	r2, [r3, #0]
 8029204:	2a00      	cmp	r2, #0
 8029206:	d1fc      	bne.n	8029202 <CRC_Lock+0x52>
 8029208:	4b0c      	ldr	r3, [pc, #48]	; (802923c <CRC_Lock+0x8c>)
 802920a:	6018      	str	r0, [r3, #0]
 802920c:	6818      	ldr	r0, [r3, #0]
 802920e:	1a43      	subs	r3, r0, r1
 8029210:	4258      	negs	r0, r3
 8029212:	4158      	adcs	r0, r3
 8029214:	bd30      	pop	{r4, r5, pc}
 8029216:	4b0a      	ldr	r3, [pc, #40]	; (8029240 <CRC_Lock+0x90>)
 8029218:	2201      	movs	r2, #1
 802921a:	601a      	str	r2, [r3, #0]
 802921c:	681a      	ldr	r2, [r3, #0]
 802921e:	2a00      	cmp	r2, #0
 8029220:	d1fc      	bne.n	802921c <CRC_Lock+0x6c>
 8029222:	4b08      	ldr	r3, [pc, #32]	; (8029244 <CRC_Lock+0x94>)
 8029224:	e7f1      	b.n	802920a <CRC_Lock+0x5a>
 8029226:	bf00      	nop
 8029228:	e0002000 	.word	0xe0002000
 802922c:	e000ed00 	.word	0xe000ed00
 8029230:	e0042000 	.word	0xe0042000
 8029234:	5c001000 	.word	0x5c001000
 8029238:	58024c08 	.word	0x58024c08
 802923c:	58024c00 	.word	0x58024c00
 8029240:	40023008 	.word	0x40023008
 8029244:	40023000 	.word	0x40023000

08029248 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029248:	6101      	str	r1, [r0, #16]
 802924a:	4770      	bx	lr

0802924c <_ZN8touchgfx8Gestures4tickEv>:
 802924c:	7b83      	ldrb	r3, [r0, #14]
 802924e:	b14b      	cbz	r3, 8029264 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029250:	8903      	ldrh	r3, [r0, #8]
 8029252:	3301      	adds	r3, #1
 8029254:	b29b      	uxth	r3, r3
 8029256:	2b07      	cmp	r3, #7
 8029258:	8103      	strh	r3, [r0, #8]
 802925a:	bf81      	itttt	hi
 802925c:	2300      	movhi	r3, #0
 802925e:	8143      	strhhi	r3, [r0, #10]
 8029260:	8183      	strhhi	r3, [r0, #12]
 8029262:	7383      	strbhi	r3, [r0, #14]
 8029264:	4770      	bx	lr
	...

08029268 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029268:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802926c:	4604      	mov	r4, r0
 802926e:	4698      	mov	r8, r3
 8029270:	8880      	ldrh	r0, [r0, #4]
 8029272:	4617      	mov	r7, r2
 8029274:	4b1d      	ldr	r3, [pc, #116]	; (80292ec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029276:	460e      	mov	r6, r1
 8029278:	f8ad 0006 	strh.w	r0, [sp, #6]
 802927c:	eba8 0000 	sub.w	r0, r8, r0
 8029280:	9300      	str	r3, [sp, #0]
 8029282:	2300      	movs	r3, #0
 8029284:	b280      	uxth	r0, r0
 8029286:	8aa2      	ldrh	r2, [r4, #20]
 8029288:	f88d 3004 	strb.w	r3, [sp, #4]
 802928c:	b203      	sxth	r3, r0
 802928e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029292:	88e1      	ldrh	r1, [r4, #6]
 8029294:	2b00      	cmp	r3, #0
 8029296:	f8ad 800a 	strh.w	r8, [sp, #10]
 802929a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802929e:	bfb8      	it	lt
 80292a0:	4240      	neglt	r0, r0
 80292a2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80292a6:	bfb8      	it	lt
 80292a8:	b203      	sxthlt	r3, r0
 80292aa:	4293      	cmp	r3, r2
 80292ac:	dc08      	bgt.n	80292c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80292ae:	1a69      	subs	r1, r5, r1
 80292b0:	b289      	uxth	r1, r1
 80292b2:	b20b      	sxth	r3, r1
 80292b4:	2b00      	cmp	r3, #0
 80292b6:	bfbc      	itt	lt
 80292b8:	4249      	neglt	r1, r1
 80292ba:	b20b      	sxthlt	r3, r1
 80292bc:	429a      	cmp	r2, r3
 80292be:	da13      	bge.n	80292e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80292c0:	6920      	ldr	r0, [r4, #16]
 80292c2:	4669      	mov	r1, sp
 80292c4:	eba8 0606 	sub.w	r6, r8, r6
 80292c8:	1bef      	subs	r7, r5, r7
 80292ca:	6803      	ldr	r3, [r0, #0]
 80292cc:	685b      	ldr	r3, [r3, #4]
 80292ce:	4798      	blx	r3
 80292d0:	2300      	movs	r3, #0
 80292d2:	2001      	movs	r0, #1
 80292d4:	8166      	strh	r6, [r4, #10]
 80292d6:	8123      	strh	r3, [r4, #8]
 80292d8:	81a7      	strh	r7, [r4, #12]
 80292da:	f8a4 8004 	strh.w	r8, [r4, #4]
 80292de:	80e5      	strh	r5, [r4, #6]
 80292e0:	73a0      	strb	r0, [r4, #14]
 80292e2:	b004      	add	sp, #16
 80292e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292e8:	2000      	movs	r0, #0
 80292ea:	e7fa      	b.n	80292e2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80292ec:	0802f39c 	.word	0x0802f39c

080292f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80292f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292f2:	461e      	mov	r6, r3
 80292f4:	1e4b      	subs	r3, r1, #1
 80292f6:	b085      	sub	sp, #20
 80292f8:	4604      	mov	r4, r0
 80292fa:	2b01      	cmp	r3, #1
 80292fc:	460d      	mov	r5, r1
 80292fe:	4617      	mov	r7, r2
 8029300:	d84b      	bhi.n	802939a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029302:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029306:	1cd3      	adds	r3, r2, #3
 8029308:	b29b      	uxth	r3, r3
 802930a:	2b06      	cmp	r3, #6
 802930c:	d916      	bls.n	802933c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802930e:	f8df c098 	ldr.w	ip, [pc, #152]	; 80293a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8029312:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029316:	f8cd c004 	str.w	ip, [sp, #4]
 802931a:	f04f 0c00 	mov.w	ip, #0
 802931e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029322:	6900      	ldr	r0, [r0, #16]
 8029324:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029328:	a901      	add	r1, sp, #4
 802932a:	f88d c008 	strb.w	ip, [sp, #8]
 802932e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029332:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029336:	6803      	ldr	r3, [r0, #0]
 8029338:	689b      	ldr	r3, [r3, #8]
 802933a:	4798      	blx	r3
 802933c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029340:	1cd3      	adds	r3, r2, #3
 8029342:	b29b      	uxth	r3, r3
 8029344:	2b06      	cmp	r3, #6
 8029346:	d916      	bls.n	8029376 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029348:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80293a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802934c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029350:	f8cd c004 	str.w	ip, [sp, #4]
 8029354:	f04f 0c01 	mov.w	ip, #1
 8029358:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802935c:	6920      	ldr	r0, [r4, #16]
 802935e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029362:	a901      	add	r1, sp, #4
 8029364:	f88d c008 	strb.w	ip, [sp, #8]
 8029368:	f8ad 200a 	strh.w	r2, [sp, #10]
 802936c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029370:	6803      	ldr	r3, [r0, #0]
 8029372:	689b      	ldr	r3, [r3, #8]
 8029374:	4798      	blx	r3
 8029376:	4b0b      	ldr	r3, [pc, #44]	; (80293a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8029378:	a901      	add	r1, sp, #4
 802937a:	6920      	ldr	r0, [r4, #16]
 802937c:	9301      	str	r3, [sp, #4]
 802937e:	2300      	movs	r3, #0
 8029380:	f88d 5008 	strb.w	r5, [sp, #8]
 8029384:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029388:	f8ad 600c 	strh.w	r6, [sp, #12]
 802938c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029390:	6803      	ldr	r3, [r0, #0]
 8029392:	681b      	ldr	r3, [r3, #0]
 8029394:	4798      	blx	r3
 8029396:	b005      	add	sp, #20
 8029398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802939a:	2900      	cmp	r1, #0
 802939c:	d1eb      	bne.n	8029376 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802939e:	80a2      	strh	r2, [r4, #4]
 80293a0:	80c6      	strh	r6, [r0, #6]
 80293a2:	e7e8      	b.n	8029376 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80293a4:	0802f388 	.word	0x0802f388
 80293a8:	0802f3b0 	.word	0x0802f3b0

080293ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80293ac:	10c9      	asrs	r1, r1, #3
 80293ae:	2900      	cmp	r1, #0
 80293b0:	bfb8      	it	lt
 80293b2:	4249      	neglt	r1, r1
 80293b4:	2801      	cmp	r0, #1
 80293b6:	d108      	bne.n	80293ca <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80293b8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80293bc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80293c0:	4601      	mov	r1, r0
 80293c2:	dd02      	ble.n	80293ca <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80293c4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80293c8:	4770      	bx	lr
 80293ca:	29ff      	cmp	r1, #255	; 0xff
 80293cc:	bfa8      	it	ge
 80293ce:	21ff      	movge	r1, #255	; 0xff
 80293d0:	4608      	mov	r0, r1
 80293d2:	4770      	bx	lr

080293d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80293d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293d8:	688c      	ldr	r4, [r1, #8]
 80293da:	b087      	sub	sp, #28
 80293dc:	4607      	mov	r7, r0
 80293de:	2c00      	cmp	r4, #0
 80293e0:	db2b      	blt.n	802943a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80293e2:	6803      	ldr	r3, [r0, #0]
 80293e4:	68da      	ldr	r2, [r3, #12]
 80293e6:	42a2      	cmp	r2, r4
 80293e8:	dd27      	ble.n	802943a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80293ea:	681a      	ldr	r2, [r3, #0]
 80293ec:	691e      	ldr	r6, [r3, #16]
 80293ee:	68cd      	ldr	r5, [r1, #12]
 80293f0:	fb06 2604 	mla	r6, r6, r4, r2
 80293f4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80293f8:	698a      	ldr	r2, [r1, #24]
 80293fa:	f893 a004 	ldrb.w	sl, [r3, #4]
 80293fe:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8029402:	9205      	str	r2, [sp, #20]
 8029404:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8029408:	9b05      	ldr	r3, [sp, #20]
 802940a:	6839      	ldr	r1, [r7, #0]
 802940c:	eb03 0c02 	add.w	ip, r3, r2
 8029410:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8029414:	6889      	ldr	r1, [r1, #8]
 8029416:	1898      	adds	r0, r3, r2
 8029418:	4288      	cmp	r0, r1
 802941a:	db02      	blt.n	8029422 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802941c:	1a8b      	subs	r3, r1, r2
 802941e:	2b00      	cmp	r3, #0
 8029420:	dd09      	ble.n	8029436 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8029422:	6878      	ldr	r0, [r7, #4]
 8029424:	6801      	ldr	r1, [r0, #0]
 8029426:	9400      	str	r4, [sp, #0]
 8029428:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802942c:	4653      	mov	r3, sl
 802942e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8029432:	4631      	mov	r1, r6
 8029434:	47d8      	blx	fp
 8029436:	3d01      	subs	r5, #1
 8029438:	d1e4      	bne.n	8029404 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802943a:	b007      	add	sp, #28
 802943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029440 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029440:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8029444:	b90b      	cbnz	r3, 802944a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8029446:	f001 b974 	b.w	802a732 <_ZN8touchgfx7Outline6lineToEii>
 802944a:	4770      	bx	lr

0802944c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802944c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029450:	4604      	mov	r4, r0
 8029452:	2600      	movs	r6, #0
 8029454:	4b8e      	ldr	r3, [pc, #568]	; (8029690 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8029456:	f100 0518 	add.w	r5, r0, #24
 802945a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802945e:	b086      	sub	sp, #24
 8029460:	4690      	mov	r8, r2
 8029462:	e9c0 3100 	strd	r3, r1, [r0]
 8029466:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802946a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802946e:	4628      	mov	r0, r5
 8029470:	f001 fb75 	bl	802ab5e <_ZN8touchgfx15RenderingBufferC1Ev>
 8029474:	4638      	mov	r0, r7
 8029476:	f000 fb45 	bl	8029b04 <_ZN8touchgfx7OutlineC1Ev>
 802947a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802947e:	f001 fb23 	bl	802aac8 <_ZN8touchgfx8ScanlineC1Ev>
 8029482:	2301      	movs	r3, #1
 8029484:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8029488:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 802948c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029490:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8029494:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8029498:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 802949c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80294a0:	f7f4 fbac 	bl	801dbfc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80294a4:	b928      	cbnz	r0, 80294b2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80294a6:	4b7b      	ldr	r3, [pc, #492]	; (8029694 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80294a8:	2118      	movs	r1, #24
 80294aa:	4a7b      	ldr	r2, [pc, #492]	; (8029698 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80294ac:	487b      	ldr	r0, [pc, #492]	; (802969c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80294ae:	f001 fb99 	bl	802abe4 <__assert_func>
 80294b2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80294b6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80294ba:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80294be:	4410      	add	r0, r2
 80294c0:	9602      	str	r6, [sp, #8]
 80294c2:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80294c6:	b280      	uxth	r0, r0
 80294c8:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80294cc:	fa0f fa80 	sxth.w	sl, r0
 80294d0:	f1ba 0f00 	cmp.w	sl, #0
 80294d4:	dd70      	ble.n	80295b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80294d6:	4591      	cmp	r9, r2
 80294d8:	dd6e      	ble.n	80295b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80294da:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80294de:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80294e2:	440b      	add	r3, r1
 80294e4:	b29b      	uxth	r3, r3
 80294e6:	b21e      	sxth	r6, r3
 80294e8:	2e00      	cmp	r6, #0
 80294ea:	dd65      	ble.n	80295b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80294ec:	458e      	cmp	lr, r1
 80294ee:	dd63      	ble.n	80295b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80294f0:	45d1      	cmp	r9, sl
 80294f2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80294f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80294fa:	bfb8      	it	lt
 80294fc:	fa1f f089 	uxthlt.w	r0, r9
 8029500:	45b6      	cmp	lr, r6
 8029502:	f8ad 2008 	strh.w	r2, [sp, #8]
 8029506:	bfb8      	it	lt
 8029508:	fa1f f38e 	uxthlt.w	r3, lr
 802950c:	1a80      	subs	r0, r0, r2
 802950e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8029512:	1a5b      	subs	r3, r3, r1
 8029514:	f8ad 000c 	strh.w	r0, [sp, #12]
 8029518:	f8ad 300e 	strh.w	r3, [sp, #14]
 802951c:	f10d 0808 	add.w	r8, sp, #8
 8029520:	ae04      	add	r6, sp, #16
 8029522:	e898 0003 	ldmia.w	r8, {r0, r1}
 8029526:	e886 0003 	stmia.w	r6, {r0, r1}
 802952a:	f8dc 3000 	ldr.w	r3, [ip]
 802952e:	4660      	mov	r0, ip
 8029530:	4631      	mov	r1, r6
 8029532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029534:	4798      	blx	r3
 8029536:	6861      	ldr	r1, [r4, #4]
 8029538:	4640      	mov	r0, r8
 802953a:	3104      	adds	r1, #4
 802953c:	f7f5 f9cc 	bl	801e8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029540:	4630      	mov	r0, r6
 8029542:	f7f5 f9e1 	bl	801e908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029546:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802954a:	f7f4 fae7 	bl	801db1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802954e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8029552:	4638      	mov	r0, r7
 8029554:	f000 fab2 	bl	8029abc <_ZN8touchgfx7Outline5resetEv>
 8029558:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802955c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8029560:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8029564:	015b      	lsls	r3, r3, #5
 8029566:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 802956a:	0152      	lsls	r2, r2, #5
 802956c:	60e3      	str	r3, [r4, #12]
 802956e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8029572:	60a2      	str	r2, [r4, #8]
 8029574:	015b      	lsls	r3, r3, #5
 8029576:	6123      	str	r3, [r4, #16]
 8029578:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802957c:	015b      	lsls	r3, r3, #5
 802957e:	6163      	str	r3, [r4, #20]
 8029580:	4b47      	ldr	r3, [pc, #284]	; (80296a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8029582:	6818      	ldr	r0, [r3, #0]
 8029584:	6803      	ldr	r3, [r0, #0]
 8029586:	6a1b      	ldr	r3, [r3, #32]
 8029588:	4798      	blx	r3
 802958a:	4606      	mov	r6, r0
 802958c:	f7e7 fc40 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 8029590:	6803      	ldr	r3, [r0, #0]
 8029592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029594:	4798      	blx	r3
 8029596:	4607      	mov	r7, r0
 8029598:	f7e7 fc3a 	bl	8010e10 <_ZN8touchgfx3HAL3lcdEv>
 802959c:	6803      	ldr	r3, [r0, #0]
 802959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80295a0:	4798      	blx	r3
 80295a2:	280c      	cmp	r0, #12
 80295a4:	d854      	bhi.n	8029650 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80295a6:	e8df f000 	tbb	[pc, r0]
 80295aa:	554b      	.short	0x554b
 80295ac:	2b6e0a66 	.word	0x2b6e0a66
 80295b0:	5f5f5f3b 	.word	0x5f5f5f3b
 80295b4:	5f5f      	.short	0x5f5f
 80295b6:	6e          	.byte	0x6e
 80295b7:	00          	.byte	0x00
 80295b8:	2300      	movs	r3, #0
 80295ba:	9303      	str	r3, [sp, #12]
 80295bc:	e7ae      	b.n	802951c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80295be:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80295c2:	2108      	movs	r1, #8
 80295c4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80295c8:	fb92 f1f1 	sdiv	r1, r2, r1
 80295cc:	fb07 1303 	mla	r3, r7, r3, r1
 80295d0:	441e      	add	r6, r3
 80295d2:	4253      	negs	r3, r2
 80295d4:	f002 0207 	and.w	r2, r2, #7
 80295d8:	f003 0307 	and.w	r3, r3, #7
 80295dc:	bf58      	it	pl
 80295de:	425a      	negpl	r2, r3
 80295e0:	b2d2      	uxtb	r2, r2
 80295e2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80295e6:	4628      	mov	r0, r5
 80295e8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80295ec:	66e1      	str	r1, [r4, #108]	; 0x6c
 80295ee:	e9cd 1700 	strd	r1, r7, [sp]
 80295f2:	4631      	mov	r1, r6
 80295f4:	f001 fabb 	bl	802ab6e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80295f8:	4620      	mov	r0, r4
 80295fa:	b006      	add	sp, #24
 80295fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029600:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029604:	2104      	movs	r1, #4
 8029606:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802960a:	fb92 f1f1 	sdiv	r1, r2, r1
 802960e:	fb07 1303 	mla	r3, r7, r3, r1
 8029612:	441e      	add	r6, r3
 8029614:	4253      	negs	r3, r2
 8029616:	f002 0203 	and.w	r2, r2, #3
 802961a:	f003 0303 	and.w	r3, r3, #3
 802961e:	e7dd      	b.n	80295dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8029620:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029624:	2102      	movs	r1, #2
 8029626:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802962a:	2a00      	cmp	r2, #0
 802962c:	fb92 f1f1 	sdiv	r1, r2, r1
 8029630:	f002 0201 	and.w	r2, r2, #1
 8029634:	fb07 1303 	mla	r3, r7, r3, r1
 8029638:	bfb8      	it	lt
 802963a:	4252      	neglt	r2, r2
 802963c:	441e      	add	r6, r3
 802963e:	e7cf      	b.n	80295e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8029640:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029644:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029648:	437b      	muls	r3, r7
 802964a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802964e:	441e      	add	r6, r3
 8029650:	2200      	movs	r2, #0
 8029652:	e7c6      	b.n	80295e2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8029654:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029658:	2103      	movs	r1, #3
 802965a:	fb07 f203 	mul.w	r2, r7, r3
 802965e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8029662:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029666:	e7f2      	b.n	802964e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029668:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802966c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029670:	fb07 2303 	mla	r3, r7, r3, r2
 8029674:	e7eb      	b.n	802964e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029676:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802967a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802967e:	437b      	muls	r3, r7
 8029680:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029684:	e7e3      	b.n	802964e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029686:	4b07      	ldr	r3, [pc, #28]	; (80296a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029688:	2156      	movs	r1, #86	; 0x56
 802968a:	4a03      	ldr	r2, [pc, #12]	; (8029698 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802968c:	e70e      	b.n	80294ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802968e:	bf00      	nop
 8029690:	08030a1c 	.word	0x08030a1c
 8029694:	08030966 	.word	0x08030966
 8029698:	08030a24 	.word	0x08030a24
 802969c:	080309c2 	.word	0x080309c2
 80296a0:	2000bff0 	.word	0x2000bff0
 80296a4:	080309f6 	.word	0x080309f6

080296a8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80296a8:	6812      	ldr	r2, [r2, #0]
 80296aa:	2a00      	cmp	r2, #0
 80296ac:	db0b      	blt.n	80296c6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80296ae:	9800      	ldr	r0, [sp, #0]
 80296b0:	6800      	ldr	r0, [r0, #0]
 80296b2:	4290      	cmp	r0, r2
 80296b4:	bfd4      	ite	le
 80296b6:	2002      	movle	r0, #2
 80296b8:	2000      	movgt	r0, #0
 80296ba:	680a      	ldr	r2, [r1, #0]
 80296bc:	2a00      	cmp	r2, #0
 80296be:	da04      	bge.n	80296ca <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80296c0:	f040 0004 	orr.w	r0, r0, #4
 80296c4:	4770      	bx	lr
 80296c6:	2001      	movs	r0, #1
 80296c8:	e7f7      	b.n	80296ba <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80296ca:	681b      	ldr	r3, [r3, #0]
 80296cc:	4293      	cmp	r3, r2
 80296ce:	bfd8      	it	le
 80296d0:	f040 0008 	orrle.w	r0, r0, #8
 80296d4:	4770      	bx	lr
	...

080296d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80296d8:	4b07      	ldr	r3, [pc, #28]	; (80296f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80296da:	b510      	push	{r4, lr}
 80296dc:	781b      	ldrb	r3, [r3, #0]
 80296de:	2b01      	cmp	r3, #1
 80296e0:	d108      	bne.n	80296f4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80296e2:	6843      	ldr	r3, [r0, #4]
 80296e4:	6814      	ldr	r4, [r2, #0]
 80296e6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80296ea:	680b      	ldr	r3, [r1, #0]
 80296ec:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80296f0:	6013      	str	r3, [r2, #0]
 80296f2:	600c      	str	r4, [r1, #0]
 80296f4:	bd10      	pop	{r4, pc}
 80296f6:	bf00      	nop
 80296f8:	2000bfe6 	.word	0x2000bfe6

080296fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80296fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80296fe:	b085      	sub	sp, #20
 8029700:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8029704:	4604      	mov	r4, r0
 8029706:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802970a:	b33b      	cbz	r3, 802975c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802970c:	aa02      	add	r2, sp, #8
 802970e:	a903      	add	r1, sp, #12
 8029710:	f7ff ffe2 	bl	80296d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029714:	68a3      	ldr	r3, [r4, #8]
 8029716:	9e03      	ldr	r6, [sp, #12]
 8029718:	aa02      	add	r2, sp, #8
 802971a:	9f02      	ldr	r7, [sp, #8]
 802971c:	a903      	add	r1, sp, #12
 802971e:	1af6      	subs	r6, r6, r3
 8029720:	68e3      	ldr	r3, [r4, #12]
 8029722:	4620      	mov	r0, r4
 8029724:	1aff      	subs	r7, r7, r3
 8029726:	f104 0314 	add.w	r3, r4, #20
 802972a:	9603      	str	r6, [sp, #12]
 802972c:	9300      	str	r3, [sp, #0]
 802972e:	f104 0310 	add.w	r3, r4, #16
 8029732:	9702      	str	r7, [sp, #8]
 8029734:	f7ff ffb8 	bl	80296a8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8029738:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 802973c:	4605      	mov	r5, r0
 802973e:	b97b      	cbnz	r3, 8029760 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8029740:	463a      	mov	r2, r7
 8029742:	4631      	mov	r1, r6
 8029744:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8029748:	f7ff fe7a 	bl	8029440 <_ZN8touchgfx10Rasterizer6lineToEii>
 802974c:	9b03      	ldr	r3, [sp, #12]
 802974e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8029752:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8029756:	9b02      	ldr	r3, [sp, #8]
 8029758:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802975c:	b005      	add	sp, #20
 802975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029760:	b110      	cbz	r0, 8029768 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8029762:	ea13 0200 	ands.w	r2, r3, r0
 8029766:	d11c      	bne.n	80297a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029768:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 802976c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8029770:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8029774:	b188      	cbz	r0, 802979a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8029776:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802977a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802977e:	b913      	cbnz	r3, 8029786 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8029780:	4630      	mov	r0, r6
 8029782:	f001 f806 	bl	802a792 <_ZN8touchgfx7Outline6moveToEii>
 8029786:	2300      	movs	r3, #0
 8029788:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802978c:	2301      	movs	r3, #1
 802978e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8029792:	4630      	mov	r0, r6
 8029794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8029798:	e7d6      	b.n	8029748 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802979a:	4630      	mov	r0, r6
 802979c:	f7ff fe50 	bl	8029440 <_ZN8touchgfx10Rasterizer6lineToEii>
 80297a0:	e7f7      	b.n	8029792 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80297a2:	4615      	mov	r5, r2
 80297a4:	e7d2      	b.n	802974c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080297a6 <_ZN8touchgfx6Canvas5closeEv>:
 80297a6:	b538      	push	{r3, r4, r5, lr}
 80297a8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80297ac:	4604      	mov	r4, r0
 80297ae:	b993      	cbnz	r3, 80297d6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80297b0:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80297b4:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80297b8:	4213      	tst	r3, r2
 80297ba:	d10c      	bne.n	80297d6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80297bc:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80297c0:	b123      	cbz	r3, 80297cc <_ZN8touchgfx6Canvas5closeEv+0x26>
 80297c2:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80297c6:	4628      	mov	r0, r5
 80297c8:	f7ff fe3a 	bl	8029440 <_ZN8touchgfx10Rasterizer6lineToEii>
 80297cc:	4628      	mov	r0, r5
 80297ce:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80297d2:	f7ff fe35 	bl	8029440 <_ZN8touchgfx10Rasterizer6lineToEii>
 80297d6:	2300      	movs	r3, #0
 80297d8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80297dc:	bd38      	pop	{r3, r4, r5, pc}

080297de <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80297de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297e0:	b085      	sub	sp, #20
 80297e2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80297e6:	4604      	mov	r4, r0
 80297e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80297ec:	b353      	cbz	r3, 8029844 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80297ee:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80297f2:	b90b      	cbnz	r3, 80297f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80297f4:	f7ff ffd7 	bl	80297a6 <_ZN8touchgfx6Canvas5closeEv>
 80297f8:	aa02      	add	r2, sp, #8
 80297fa:	a903      	add	r1, sp, #12
 80297fc:	4620      	mov	r0, r4
 80297fe:	f7ff ff6b 	bl	80296d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029802:	68a3      	ldr	r3, [r4, #8]
 8029804:	9d03      	ldr	r5, [sp, #12]
 8029806:	aa02      	add	r2, sp, #8
 8029808:	9e02      	ldr	r6, [sp, #8]
 802980a:	a903      	add	r1, sp, #12
 802980c:	1aed      	subs	r5, r5, r3
 802980e:	68e3      	ldr	r3, [r4, #12]
 8029810:	4620      	mov	r0, r4
 8029812:	1af6      	subs	r6, r6, r3
 8029814:	f104 0314 	add.w	r3, r4, #20
 8029818:	9503      	str	r5, [sp, #12]
 802981a:	9300      	str	r3, [sp, #0]
 802981c:	f104 0310 	add.w	r3, r4, #16
 8029820:	9602      	str	r6, [sp, #8]
 8029822:	f7ff ff41 	bl	80296a8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8029826:	4607      	mov	r7, r0
 8029828:	b170      	cbz	r0, 8029848 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802982a:	2301      	movs	r3, #1
 802982c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029830:	9a03      	ldr	r2, [sp, #12]
 8029832:	9b02      	ldr	r3, [sp, #8]
 8029834:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8029838:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 802983c:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8029840:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8029844:	b005      	add	sp, #20
 8029846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029848:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802984c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8029850:	b92b      	cbnz	r3, 802985e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8029852:	4632      	mov	r2, r6
 8029854:	4629      	mov	r1, r5
 8029856:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802985a:	f000 ff9a 	bl	802a792 <_ZN8touchgfx7Outline6moveToEii>
 802985e:	2300      	movs	r3, #0
 8029860:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029864:	2301      	movs	r3, #1
 8029866:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802986a:	e7e1      	b.n	8029830 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802986c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029870:	4604      	mov	r4, r0
 8029872:	b087      	sub	sp, #28
 8029874:	9105      	str	r1, [sp, #20]
 8029876:	f001 f8d0 	bl	802aa1a <_ZN8touchgfx7Outline8getCellsEv>
 802987a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802987e:	4605      	mov	r5, r0
 8029880:	f1b9 0f00 	cmp.w	r9, #0
 8029884:	d103      	bne.n	802988e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8029886:	2001      	movs	r0, #1
 8029888:	b007      	add	sp, #28
 802988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802988e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8029892:	2e00      	cmp	r6, #0
 8029894:	d139      	bne.n	802990a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8029896:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802989a:	f105 0708 	add.w	r7, r5, #8
 802989e:	4640      	mov	r0, r8
 80298a0:	f001 f8fd 	bl	802aa9e <_ZN8touchgfx8Scanline5resetEv>
 80298a4:	f109 33ff 	add.w	r3, r9, #4294967295
 80298a8:	9303      	str	r3, [sp, #12]
 80298aa:	f9b5 b000 	ldrsh.w	fp, [r5]
 80298ae:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80298b2:	46da      	mov	sl, fp
 80298b4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80298b8:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80298bc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80298c0:	9b03      	ldr	r3, [sp, #12]
 80298c2:	4416      	add	r6, r2
 80298c4:	9504      	str	r5, [sp, #16]
 80298c6:	463d      	mov	r5, r7
 80298c8:	3b01      	subs	r3, #1
 80298ca:	9303      	str	r3, [sp, #12]
 80298cc:	3301      	adds	r3, #1
 80298ce:	d01e      	beq.n	802990e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80298d0:	3708      	adds	r7, #8
 80298d2:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80298d6:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80298da:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80298de:	4290      	cmp	r0, r2
 80298e0:	d11e      	bne.n	8029920 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80298e2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80298e6:	4411      	add	r1, r2
 80298e8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80298ec:	e7e8      	b.n	80298c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80298ee:	1c91      	adds	r1, r2, #2
 80298f0:	f04f 0301 	mov.w	r3, #1
 80298f4:	65e1      	str	r1, [r4, #92]	; 0x5c
 80298f6:	8053      	strh	r3, [r2, #2]
 80298f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80298fa:	1c91      	adds	r1, r2, #2
 80298fc:	65a1      	str	r1, [r4, #88]	; 0x58
 80298fe:	f8a2 b002 	strh.w	fp, [r2, #2]
 8029902:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8029904:	3201      	adds	r2, #1
 8029906:	6562      	str	r2, [r4, #84]	; 0x54
 8029908:	e03a      	b.n	8029980 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802990a:	2000      	movs	r0, #0
 802990c:	e7bc      	b.n	8029888 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802990e:	b951      	cbnz	r1, 8029926 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8029910:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8029912:	2b00      	cmp	r3, #0
 8029914:	d0b7      	beq.n	8029886 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8029916:	4641      	mov	r1, r8
 8029918:	9805      	ldr	r0, [sp, #20]
 802991a:	f7ff fd5b 	bl	80293d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802991e:	e7b2      	b.n	8029886 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8029920:	2900      	cmp	r1, #0
 8029922:	d035      	beq.n	8029990 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8029924:	9504      	str	r5, [sp, #16]
 8029926:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802992a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802992e:	f7ff fd3d 	bl	80293ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8029932:	4605      	mov	r5, r0
 8029934:	b330      	cbz	r0, 8029984 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8029936:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8029938:	b182      	cbz	r2, 802995c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802993a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802993c:	454a      	cmp	r2, r9
 802993e:	d00d      	beq.n	802995c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8029940:	4641      	mov	r1, r8
 8029942:	9805      	ldr	r0, [sp, #20]
 8029944:	f7ff fd46 	bl	80293d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8029948:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802994c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802994e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8029952:	65e2      	str	r2, [r4, #92]	; 0x5c
 8029954:	2300      	movs	r3, #0
 8029956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029958:	6563      	str	r3, [r4, #84]	; 0x54
 802995a:	65a2      	str	r2, [r4, #88]	; 0x58
 802995c:	f1bb 0f00 	cmp.w	fp, #0
 8029960:	db10      	blt.n	8029984 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8029962:	f7f4 f959 	bl	801dc18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8029966:	4583      	cmp	fp, r0
 8029968:	d20c      	bcs.n	8029984 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802996a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802996c:	f802 500b 	strb.w	r5, [r2, fp]
 8029970:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8029972:	3201      	adds	r2, #1
 8029974:	455a      	cmp	r2, fp
 8029976:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8029978:	d1b9      	bne.n	80298ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802997a:	8811      	ldrh	r1, [r2, #0]
 802997c:	3101      	adds	r1, #1
 802997e:	8011      	strh	r1, [r2, #0]
 8029980:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8029984:	9b03      	ldr	r3, [sp, #12]
 8029986:	3301      	adds	r3, #1
 8029988:	d0c2      	beq.n	8029910 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802998a:	f10b 0a01 	add.w	sl, fp, #1
 802998e:	9d04      	ldr	r5, [sp, #16]
 8029990:	f9b5 3000 	ldrsh.w	r3, [r5]
 8029994:	4553      	cmp	r3, sl
 8029996:	dd88      	ble.n	80298aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8029998:	01b1      	lsls	r1, r6, #6
 802999a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802999e:	f7ff fd05 	bl	80293ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80299a2:	4683      	mov	fp, r0
 80299a4:	2800      	cmp	r0, #0
 80299a6:	d080      	beq.n	80298aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80299a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80299aa:	b183      	cbz	r3, 80299ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80299ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80299ae:	454b      	cmp	r3, r9
 80299b0:	d00d      	beq.n	80299ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80299b2:	4641      	mov	r1, r8
 80299b4:	9805      	ldr	r0, [sp, #20]
 80299b6:	f7ff fd0d 	bl	80293d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80299ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80299be:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80299c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80299c4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80299c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80299c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80299ca:	2300      	movs	r3, #0
 80299cc:	6563      	str	r3, [r4, #84]	; 0x54
 80299ce:	f9b5 3000 	ldrsh.w	r3, [r5]
 80299d2:	464a      	mov	r2, r9
 80299d4:	f8cd b000 	str.w	fp, [sp]
 80299d8:	4651      	mov	r1, sl
 80299da:	eba3 030a 	sub.w	r3, r3, sl
 80299de:	4640      	mov	r0, r8
 80299e0:	f001 f884 	bl	802aaec <_ZN8touchgfx8Scanline7addSpanEiijj>
 80299e4:	e761      	b.n	80298aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080299e6 <_ZN8touchgfx6Canvas6renderEv>:
 80299e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80299e8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80299ec:	4604      	mov	r4, r0
 80299ee:	b913      	cbnz	r3, 80299f6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80299f0:	2001      	movs	r0, #1
 80299f2:	b003      	add	sp, #12
 80299f4:	bd30      	pop	{r4, r5, pc}
 80299f6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80299fa:	2b00      	cmp	r3, #0
 80299fc:	d131      	bne.n	8029a62 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80299fe:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d0f4      	beq.n	80299f0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8029a06:	6840      	ldr	r0, [r0, #4]
 8029a08:	6803      	ldr	r3, [r0, #0]
 8029a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029a0c:	4798      	blx	r3
 8029a0e:	2800      	cmp	r0, #0
 8029a10:	d0ee      	beq.n	80299f0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8029a12:	4620      	mov	r0, r4
 8029a14:	f7ff fec7 	bl	80297a6 <_ZN8touchgfx6Canvas5closeEv>
 8029a18:	6860      	ldr	r0, [r4, #4]
 8029a1a:	6803      	ldr	r3, [r0, #0]
 8029a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a1e:	4798      	blx	r3
 8029a20:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8029a24:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8029a28:	f7f2 feab 	bl	801c782 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8029a2c:	6860      	ldr	r0, [r4, #4]
 8029a2e:	6803      	ldr	r3, [r0, #0]
 8029a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a32:	4798      	blx	r3
 8029a34:	4605      	mov	r5, r0
 8029a36:	6860      	ldr	r0, [r4, #4]
 8029a38:	6803      	ldr	r3, [r0, #0]
 8029a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029a3c:	4798      	blx	r3
 8029a3e:	4601      	mov	r1, r0
 8029a40:	4628      	mov	r0, r5
 8029a42:	f7f2 fea1 	bl	801c788 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8029a46:	6860      	ldr	r0, [r4, #4]
 8029a48:	6803      	ldr	r3, [r0, #0]
 8029a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a4c:	4798      	blx	r3
 8029a4e:	f104 0318 	add.w	r3, r4, #24
 8029a52:	4669      	mov	r1, sp
 8029a54:	e9cd 3000 	strd	r3, r0, [sp]
 8029a58:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8029a5c:	f7ff ff06 	bl	802986c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8029a60:	e7c7      	b.n	80299f2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8029a62:	2000      	movs	r0, #0
 8029a64:	e7c5      	b.n	80299f2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08029a68 <_ZN8touchgfx6CanvasD1Ev>:
 8029a68:	b538      	push	{r3, r4, r5, lr}
 8029a6a:	4605      	mov	r5, r0
 8029a6c:	4b08      	ldr	r3, [pc, #32]	; (8029a90 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8029a6e:	4604      	mov	r4, r0
 8029a70:	f845 3b2c 	str.w	r3, [r5], #44
 8029a74:	4b07      	ldr	r3, [pc, #28]	; (8029a94 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8029a76:	6818      	ldr	r0, [r3, #0]
 8029a78:	6803      	ldr	r3, [r0, #0]
 8029a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029a7c:	4798      	blx	r3
 8029a7e:	4628      	mov	r0, r5
 8029a80:	f000 f814 	bl	8029aac <_ZN8touchgfx7OutlineD1Ev>
 8029a84:	f104 0018 	add.w	r0, r4, #24
 8029a88:	f001 f870 	bl	802ab6c <_ZN8touchgfx15RenderingBufferD1Ev>
 8029a8c:	4620      	mov	r0, r4
 8029a8e:	bd38      	pop	{r3, r4, r5, pc}
 8029a90:	08030a1c 	.word	0x08030a1c
 8029a94:	2000bff0 	.word	0x2000bff0

08029a98 <_ZN8touchgfx6CanvasD0Ev>:
 8029a98:	b510      	push	{r4, lr}
 8029a9a:	4604      	mov	r4, r0
 8029a9c:	f7ff ffe4 	bl	8029a68 <_ZN8touchgfx6CanvasD1Ev>
 8029aa0:	21b8      	movs	r1, #184	; 0xb8
 8029aa2:	4620      	mov	r0, r4
 8029aa4:	f001 f873 	bl	802ab8e <_ZdlPvj>
 8029aa8:	4620      	mov	r0, r4
 8029aaa:	bd10      	pop	{r4, pc}

08029aac <_ZN8touchgfx7OutlineD1Ev>:
 8029aac:	4770      	bx	lr

08029aae <_ZN8touchgfx7OutlineD0Ev>:
 8029aae:	b510      	push	{r4, lr}
 8029ab0:	4604      	mov	r4, r0
 8029ab2:	2148      	movs	r1, #72	; 0x48
 8029ab4:	f001 f86b 	bl	802ab8e <_ZdlPvj>
 8029ab8:	4620      	mov	r0, r4
 8029aba:	bd10      	pop	{r4, pc}

08029abc <_ZN8touchgfx7Outline5resetEv>:
 8029abc:	b510      	push	{r4, lr}
 8029abe:	4604      	mov	r4, r0
 8029ac0:	f7f4 f8c2 	bl	801dc48 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8029ac4:	60e0      	str	r0, [r4, #12]
 8029ac6:	f7f4 f8c5 	bl	801dc54 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8029aca:	68e3      	ldr	r3, [r4, #12]
 8029acc:	2200      	movs	r2, #0
 8029ace:	08c0      	lsrs	r0, r0, #3
 8029ad0:	6123      	str	r3, [r4, #16]
 8029ad2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8029ad6:	6060      	str	r0, [r4, #4]
 8029ad8:	82a3      	strh	r3, [r4, #20]
 8029ada:	82e3      	strh	r3, [r4, #22]
 8029adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029ade:	60a2      	str	r2, [r4, #8]
 8029ae0:	f023 0301 	bic.w	r3, r3, #1
 8029ae4:	8322      	strh	r2, [r4, #24]
 8029ae6:	8362      	strh	r2, [r4, #26]
 8029ae8:	f043 0302 	orr.w	r3, r3, #2
 8029aec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029af0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029af2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8029af6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8029afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8029afe:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8029b02:	bd10      	pop	{r4, pc}

08029b04 <_ZN8touchgfx7OutlineC1Ev>:
 8029b04:	4b0f      	ldr	r3, [pc, #60]	; (8029b44 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8029b06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8029b0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8029b0e:	b510      	push	{r4, lr}
 8029b10:	6003      	str	r3, [r0, #0]
 8029b12:	2300      	movs	r3, #0
 8029b14:	4604      	mov	r4, r0
 8029b16:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8029b1a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8029b1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029b22:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8029b26:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8029b2a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8029b2e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8029b32:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8029b36:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8029b3a:	f7ff ffbf 	bl	8029abc <_ZN8touchgfx7Outline5resetEv>
 8029b3e:	4620      	mov	r0, r4
 8029b40:	bd10      	pop	{r4, pc}
 8029b42:	bf00      	nop
 8029b44:	08030a7c 	.word	0x08030a7c

08029b48 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8029b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b4c:	b093      	sub	sp, #76	; 0x4c
 8029b4e:	4604      	mov	r4, r0
 8029b50:	1156      	asrs	r6, r2, #5
 8029b52:	f002 0e1f 	and.w	lr, r2, #31
 8029b56:	981c      	ldr	r0, [sp, #112]	; 0x70
 8029b58:	9305      	str	r3, [sp, #20]
 8029b5a:	1143      	asrs	r3, r0, #5
 8029b5c:	1145      	asrs	r5, r0, #5
 8029b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8029b60:	f000 031f 	and.w	r3, r0, #31
 8029b64:	9303      	str	r3, [sp, #12]
 8029b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029b68:	42b3      	cmp	r3, r6
 8029b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029b6c:	bfc8      	it	gt
 8029b6e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8029b70:	42b3      	cmp	r3, r6
 8029b72:	bfdc      	itt	le
 8029b74:	1c73      	addle	r3, r6, #1
 8029b76:	63a3      	strle	r3, [r4, #56]	; 0x38
 8029b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029b7a:	42ab      	cmp	r3, r5
 8029b7c:	bfc8      	it	gt
 8029b7e:	462b      	movgt	r3, r5
 8029b80:	ea4f 1560 	mov.w	r5, r0, asr #5
 8029b84:	bfc8      	it	gt
 8029b86:	6323      	strgt	r3, [r4, #48]	; 0x30
 8029b88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029b8a:	42ab      	cmp	r3, r5
 8029b8c:	bfd8      	it	le
 8029b8e:	462b      	movle	r3, r5
 8029b90:	ea4f 1561 	mov.w	r5, r1, asr #5
 8029b94:	bfdc      	itt	le
 8029b96:	3301      	addle	r3, #1
 8029b98:	63a3      	strle	r3, [r4, #56]	; 0x38
 8029b9a:	9b05      	ldr	r3, [sp, #20]
 8029b9c:	eba3 0a01 	sub.w	sl, r3, r1
 8029ba0:	1143      	asrs	r3, r0, #5
 8029ba2:	429e      	cmp	r6, r3
 8029ba4:	f040 8119 	bne.w	8029dda <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8029ba8:	9b05      	ldr	r3, [sp, #20]
 8029baa:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8029bae:	9b03      	ldr	r3, [sp, #12]
 8029bb0:	459e      	cmp	lr, r3
 8029bb2:	d12c      	bne.n	8029c0e <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8029bb4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029bb8:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8029bbc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8029bc0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8029bc4:	4291      	cmp	r1, r2
 8029bc6:	d037      	beq.n	8029c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029bc8:	8b61      	ldrh	r1, [r4, #26]
 8029bca:	8b22      	ldrh	r2, [r4, #24]
 8029bcc:	430a      	orrs	r2, r1
 8029bce:	d00b      	beq.n	8029be8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029bd0:	2b00      	cmp	r3, #0
 8029bd2:	db09      	blt.n	8029be8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029bd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8029bd6:	429a      	cmp	r2, r3
 8029bd8:	dd06      	ble.n	8029be8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029bda:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8029bde:	429a      	cmp	r2, r3
 8029be0:	d308      	bcc.n	8029bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8029be2:	2301      	movs	r3, #1
 8029be4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029be8:	f8a4 c014 	strh.w	ip, [r4, #20]
 8029bec:	82e6      	strh	r6, [r4, #22]
 8029bee:	2300      	movs	r3, #0
 8029bf0:	8323      	strh	r3, [r4, #24]
 8029bf2:	e0c6      	b.n	8029d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029bf4:	f104 0314 	add.w	r3, r4, #20
 8029bf8:	6922      	ldr	r2, [r4, #16]
 8029bfa:	cb03      	ldmia	r3!, {r0, r1}
 8029bfc:	6010      	str	r0, [r2, #0]
 8029bfe:	6051      	str	r1, [r2, #4]
 8029c00:	6923      	ldr	r3, [r4, #16]
 8029c02:	3308      	adds	r3, #8
 8029c04:	6123      	str	r3, [r4, #16]
 8029c06:	68a3      	ldr	r3, [r4, #8]
 8029c08:	3301      	adds	r3, #1
 8029c0a:	60a3      	str	r3, [r4, #8]
 8029c0c:	e7ec      	b.n	8029be8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029c0e:	9b05      	ldr	r3, [sp, #20]
 8029c10:	45ac      	cmp	ip, r5
 8029c12:	f001 011f 	and.w	r1, r1, #31
 8029c16:	8b20      	ldrh	r0, [r4, #24]
 8029c18:	f003 031f 	and.w	r3, r3, #31
 8029c1c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8029c20:	9304      	str	r3, [sp, #16]
 8029c22:	9b03      	ldr	r3, [sp, #12]
 8029c24:	eba3 020e 	sub.w	r2, r3, lr
 8029c28:	d109      	bne.n	8029c3e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8029c2a:	9b04      	ldr	r3, [sp, #16]
 8029c2c:	4410      	add	r0, r2
 8029c2e:	4419      	add	r1, r3
 8029c30:	8320      	strh	r0, [r4, #24]
 8029c32:	fb02 8201 	mla	r2, r2, r1, r8
 8029c36:	8362      	strh	r2, [r4, #26]
 8029c38:	b013      	add	sp, #76	; 0x4c
 8029c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c3e:	f1ba 0f00 	cmp.w	sl, #0
 8029c42:	f2c0 80a0 	blt.w	8029d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8029c46:	f1c1 0320 	rsb	r3, r1, #32
 8029c4a:	f04f 0b20 	mov.w	fp, #32
 8029c4e:	435a      	muls	r2, r3
 8029c50:	2301      	movs	r3, #1
 8029c52:	9302      	str	r3, [sp, #8]
 8029c54:	4459      	add	r1, fp
 8029c56:	fb92 f7fa 	sdiv	r7, r2, sl
 8029c5a:	fb0a 2217 	mls	r2, sl, r7, r2
 8029c5e:	2a00      	cmp	r2, #0
 8029c60:	bfbc      	itt	lt
 8029c62:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8029c66:	4452      	addlt	r2, sl
 8029c68:	fb07 8101 	mla	r1, r7, r1, r8
 8029c6c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8029c70:	4438      	add	r0, r7
 8029c72:	b20b      	sxth	r3, r1
 8029c74:	9902      	ldr	r1, [sp, #8]
 8029c76:	b200      	sxth	r0, r0
 8029c78:	9301      	str	r3, [sp, #4]
 8029c7a:	8363      	strh	r3, [r4, #26]
 8029c7c:	186b      	adds	r3, r5, r1
 8029c7e:	0435      	lsls	r5, r6, #16
 8029c80:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029c84:	8320      	strh	r0, [r4, #24]
 8029c86:	eb03 0905 	add.w	r9, r3, r5
 8029c8a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8029c8e:	9300      	str	r3, [sp, #0]
 8029c90:	45c1      	cmp	r9, r8
 8029c92:	9505      	str	r5, [sp, #20]
 8029c94:	d014      	beq.n	8029cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8029c96:	9b01      	ldr	r3, [sp, #4]
 8029c98:	4303      	orrs	r3, r0
 8029c9a:	d00b      	beq.n	8029cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029c9c:	2900      	cmp	r1, #0
 8029c9e:	db09      	blt.n	8029cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029ca2:	428b      	cmp	r3, r1
 8029ca4:	dd06      	ble.n	8029cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029ca6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029caa:	4299      	cmp	r1, r3
 8029cac:	d374      	bcc.n	8029d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8029cae:	2301      	movs	r3, #1
 8029cb0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029cb4:	9b00      	ldr	r3, [sp, #0]
 8029cb6:	82e6      	strh	r6, [r4, #22]
 8029cb8:	82a3      	strh	r3, [r4, #20]
 8029cba:	2300      	movs	r3, #0
 8029cbc:	8323      	strh	r3, [r4, #24]
 8029cbe:	8363      	strh	r3, [r4, #26]
 8029cc0:	9900      	ldr	r1, [sp, #0]
 8029cc2:	eb0e 0307 	add.w	r3, lr, r7
 8029cc6:	458c      	cmp	ip, r1
 8029cc8:	d04e      	beq.n	8029d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8029cca:	9903      	ldr	r1, [sp, #12]
 8029ccc:	eba2 020a 	sub.w	r2, r2, sl
 8029cd0:	1ac9      	subs	r1, r1, r3
 8029cd2:	9201      	str	r2, [sp, #4]
 8029cd4:	440f      	add	r7, r1
 8029cd6:	017f      	lsls	r7, r7, #5
 8029cd8:	fb97 fefa 	sdiv	lr, r7, sl
 8029cdc:	fb0a 771e 	mls	r7, sl, lr, r7
 8029ce0:	2f00      	cmp	r7, #0
 8029ce2:	bfbc      	itt	lt
 8029ce4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8029ce8:	4457      	addlt	r7, sl
 8029cea:	f10e 0101 	add.w	r1, lr, #1
 8029cee:	9106      	str	r1, [sp, #24]
 8029cf0:	9a01      	ldr	r2, [sp, #4]
 8029cf2:	8b20      	ldrh	r0, [r4, #24]
 8029cf4:	19d2      	adds	r2, r2, r7
 8029cf6:	8b61      	ldrh	r1, [r4, #26]
 8029cf8:	9d02      	ldr	r5, [sp, #8]
 8029cfa:	9201      	str	r2, [sp, #4]
 8029cfc:	bf5b      	ittet	pl
 8029cfe:	eba2 020a 	subpl.w	r2, r2, sl
 8029d02:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8029d06:	46f0      	movmi	r8, lr
 8029d08:	9201      	strpl	r2, [sp, #4]
 8029d0a:	9a00      	ldr	r2, [sp, #0]
 8029d0c:	4440      	add	r0, r8
 8029d0e:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8029d12:	4443      	add	r3, r8
 8029d14:	442a      	add	r2, r5
 8029d16:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029d1a:	9d05      	ldr	r5, [sp, #20]
 8029d1c:	b200      	sxth	r0, r0
 8029d1e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029d22:	b209      	sxth	r1, r1
 8029d24:	4415      	add	r5, r2
 8029d26:	8320      	strh	r0, [r4, #24]
 8029d28:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029d2c:	8361      	strh	r1, [r4, #26]
 8029d2e:	9200      	str	r2, [sp, #0]
 8029d30:	454d      	cmp	r5, r9
 8029d32:	d016      	beq.n	8029d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8029d34:	4301      	orrs	r1, r0
 8029d36:	d00d      	beq.n	8029d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8029d38:	f1b8 0f00 	cmp.w	r8, #0
 8029d3c:	db0a      	blt.n	8029d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8029d3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029d40:	4541      	cmp	r1, r8
 8029d42:	dd07      	ble.n	8029d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8029d44:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029d48:	4288      	cmp	r0, r1
 8029d4a:	d335      	bcc.n	8029db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8029d4c:	f04f 0101 	mov.w	r1, #1
 8029d50:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8029d54:	9900      	ldr	r1, [sp, #0]
 8029d56:	82e6      	strh	r6, [r4, #22]
 8029d58:	82a1      	strh	r1, [r4, #20]
 8029d5a:	f04f 0100 	mov.w	r1, #0
 8029d5e:	8321      	strh	r1, [r4, #24]
 8029d60:	8361      	strh	r1, [r4, #26]
 8029d62:	9a00      	ldr	r2, [sp, #0]
 8029d64:	4594      	cmp	ip, r2
 8029d66:	d1c3      	bne.n	8029cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8029d68:	9a03      	ldr	r2, [sp, #12]
 8029d6a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8029d6e:	1ad3      	subs	r3, r2, r3
 8029d70:	8b22      	ldrh	r2, [r4, #24]
 8029d72:	441a      	add	r2, r3
 8029d74:	8322      	strh	r2, [r4, #24]
 8029d76:	9a04      	ldr	r2, [sp, #16]
 8029d78:	3220      	adds	r2, #32
 8029d7a:	eba2 020b 	sub.w	r2, r2, fp
 8029d7e:	fb03 c302 	mla	r3, r3, r2, ip
 8029d82:	8363      	strh	r3, [r4, #26]
 8029d84:	e758      	b.n	8029c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029d86:	f04f 33ff 	mov.w	r3, #4294967295
 8029d8a:	434a      	muls	r2, r1
 8029d8c:	f1ca 0a00 	rsb	sl, sl, #0
 8029d90:	f04f 0b00 	mov.w	fp, #0
 8029d94:	9302      	str	r3, [sp, #8]
 8029d96:	e75d      	b.n	8029c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8029d98:	f104 0314 	add.w	r3, r4, #20
 8029d9c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8029da0:	cb03      	ldmia	r3!, {r0, r1}
 8029da2:	f8c8 0000 	str.w	r0, [r8]
 8029da6:	f8c8 1004 	str.w	r1, [r8, #4]
 8029daa:	6923      	ldr	r3, [r4, #16]
 8029dac:	3308      	adds	r3, #8
 8029dae:	6123      	str	r3, [r4, #16]
 8029db0:	68a3      	ldr	r3, [r4, #8]
 8029db2:	3301      	adds	r3, #1
 8029db4:	60a3      	str	r3, [r4, #8]
 8029db6:	e77d      	b.n	8029cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029db8:	f104 0814 	add.w	r8, r4, #20
 8029dbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029dc0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029dc4:	f8c9 0000 	str.w	r0, [r9]
 8029dc8:	f8c9 1004 	str.w	r1, [r9, #4]
 8029dcc:	6921      	ldr	r1, [r4, #16]
 8029dce:	3108      	adds	r1, #8
 8029dd0:	6121      	str	r1, [r4, #16]
 8029dd2:	68a1      	ldr	r1, [r4, #8]
 8029dd4:	3101      	adds	r1, #1
 8029dd6:	60a1      	str	r1, [r4, #8]
 8029dd8:	e7bc      	b.n	8029d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8029dda:	1a83      	subs	r3, r0, r2
 8029ddc:	9301      	str	r3, [sp, #4]
 8029dde:	f1ba 0f00 	cmp.w	sl, #0
 8029de2:	f040 8094 	bne.w	8029f0e <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8029de6:	9a01      	ldr	r2, [sp, #4]
 8029de8:	0049      	lsls	r1, r1, #1
 8029dea:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8029dee:	2a00      	cmp	r2, #0
 8029df0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8029df4:	8b62      	ldrh	r2, [r4, #26]
 8029df6:	bfaa      	itet	ge
 8029df8:	f04f 0a20 	movge.w	sl, #32
 8029dfc:	f04f 38ff 	movlt.w	r8, #4294967295
 8029e00:	f04f 0801 	movge.w	r8, #1
 8029e04:	8b21      	ldrh	r1, [r4, #24]
 8029e06:	ebaa 0e0e 	sub.w	lr, sl, lr
 8029e0a:	4471      	add	r1, lr
 8029e0c:	fb0e 2e03 	mla	lr, lr, r3, r2
 8029e10:	eb08 0206 	add.w	r2, r8, r6
 8029e14:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8029e18:	b209      	sxth	r1, r1
 8029e1a:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8029e1e:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8029e22:	8321      	strh	r1, [r4, #24]
 8029e24:	fa0f fe8e 	sxth.w	lr, lr
 8029e28:	42b7      	cmp	r7, r6
 8029e2a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8029e2e:	d013      	beq.n	8029e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8029e30:	ea51 010e 	orrs.w	r1, r1, lr
 8029e34:	d00b      	beq.n	8029e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029e36:	2800      	cmp	r0, #0
 8029e38:	db09      	blt.n	8029e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029e3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029e3c:	4281      	cmp	r1, r0
 8029e3e:	dd06      	ble.n	8029e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029e40:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029e44:	4288      	cmp	r0, r1
 8029e46:	d339      	bcc.n	8029ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8029e48:	2101      	movs	r1, #1
 8029e4a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8029e4e:	2100      	movs	r1, #0
 8029e50:	82a5      	strh	r5, [r4, #20]
 8029e52:	82e2      	strh	r2, [r4, #22]
 8029e54:	8321      	strh	r1, [r4, #24]
 8029e56:	8361      	strh	r1, [r4, #26]
 8029e58:	f1aa 0610 	sub.w	r6, sl, #16
 8029e5c:	f04f 0e00 	mov.w	lr, #0
 8029e60:	f04f 0b01 	mov.w	fp, #1
 8029e64:	0076      	lsls	r6, r6, #1
 8029e66:	fb06 f703 	mul.w	r7, r6, r3
 8029e6a:	b236      	sxth	r6, r6
 8029e6c:	b23f      	sxth	r7, r7
 8029e6e:	ea46 0107 	orr.w	r1, r6, r7
 8029e72:	9100      	str	r1, [sp, #0]
 8029e74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029e76:	428a      	cmp	r2, r1
 8029e78:	d03e      	beq.n	8029ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8029e7a:	4442      	add	r2, r8
 8029e7c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029e80:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8029e84:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8029e88:	8326      	strh	r6, [r4, #24]
 8029e8a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8029e8e:	8367      	strh	r7, [r4, #26]
 8029e90:	4584      	cmp	ip, r0
 8029e92:	d0ef      	beq.n	8029e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029e94:	9800      	ldr	r0, [sp, #0]
 8029e96:	b150      	cbz	r0, 8029eae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029e98:	2900      	cmp	r1, #0
 8029e9a:	db08      	blt.n	8029eae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029e9c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8029e9e:	4288      	cmp	r0, r1
 8029ea0:	dd05      	ble.n	8029eae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029ea2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029ea6:	4288      	cmp	r0, r1
 8029ea8:	d315      	bcc.n	8029ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8029eaa:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8029eae:	82a5      	strh	r5, [r4, #20]
 8029eb0:	82e2      	strh	r2, [r4, #22]
 8029eb2:	f8a4 e018 	strh.w	lr, [r4, #24]
 8029eb6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8029eba:	e7db      	b.n	8029e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029ebc:	f104 0614 	add.w	r6, r4, #20
 8029ec0:	6927      	ldr	r7, [r4, #16]
 8029ec2:	ce03      	ldmia	r6!, {r0, r1}
 8029ec4:	6038      	str	r0, [r7, #0]
 8029ec6:	6079      	str	r1, [r7, #4]
 8029ec8:	6921      	ldr	r1, [r4, #16]
 8029eca:	3108      	adds	r1, #8
 8029ecc:	6121      	str	r1, [r4, #16]
 8029ece:	68a1      	ldr	r1, [r4, #8]
 8029ed0:	3101      	adds	r1, #1
 8029ed2:	60a1      	str	r1, [r4, #8]
 8029ed4:	e7bb      	b.n	8029e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029ed6:	f104 0c14 	add.w	ip, r4, #20
 8029eda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029ede:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8029ee2:	f8c9 0000 	str.w	r0, [r9]
 8029ee6:	f8c9 1004 	str.w	r1, [r9, #4]
 8029eea:	6921      	ldr	r1, [r4, #16]
 8029eec:	3108      	adds	r1, #8
 8029eee:	6121      	str	r1, [r4, #16]
 8029ef0:	68a1      	ldr	r1, [r4, #8]
 8029ef2:	3101      	adds	r1, #1
 8029ef4:	60a1      	str	r1, [r4, #8]
 8029ef6:	e7da      	b.n	8029eae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029ef8:	9a03      	ldr	r2, [sp, #12]
 8029efa:	8b61      	ldrh	r1, [r4, #26]
 8029efc:	f1a2 0c20 	sub.w	ip, r2, #32
 8029f00:	8b22      	ldrh	r2, [r4, #24]
 8029f02:	44d4      	add	ip, sl
 8029f04:	4462      	add	r2, ip
 8029f06:	fb0c 1303 	mla	r3, ip, r3, r1
 8029f0a:	8322      	strh	r2, [r4, #24]
 8029f0c:	e739      	b.n	8029d82 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029f0e:	9b01      	ldr	r3, [sp, #4]
 8029f10:	2b00      	cmp	r3, #0
 8029f12:	db3f      	blt.n	8029f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8029f14:	2201      	movs	r2, #1
 8029f16:	f1ce 0320 	rsb	r3, lr, #32
 8029f1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8029f1c:	2220      	movs	r2, #32
 8029f1e:	fb0a f303 	mul.w	r3, sl, r3
 8029f22:	9202      	str	r2, [sp, #8]
 8029f24:	9a01      	ldr	r2, [sp, #4]
 8029f26:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029f2a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029f2e:	fb93 f7f2 	sdiv	r7, r3, r2
 8029f32:	fb02 3317 	mls	r3, r2, r7, r3
 8029f36:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029f3a:	2b00      	cmp	r3, #0
 8029f3c:	9308      	str	r3, [sp, #32]
 8029f3e:	bfbc      	itt	lt
 8029f40:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8029f44:	189b      	addlt	r3, r3, r2
 8029f46:	eb07 0b01 	add.w	fp, r7, r1
 8029f4a:	bfb8      	it	lt
 8029f4c:	9308      	strlt	r3, [sp, #32]
 8029f4e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8029f52:	9304      	str	r3, [sp, #16]
 8029f54:	9b02      	ldr	r3, [sp, #8]
 8029f56:	4573      	cmp	r3, lr
 8029f58:	d133      	bne.n	8029fc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8029f5a:	9b04      	ldr	r3, [sp, #16]
 8029f5c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8029f60:	454b      	cmp	r3, r9
 8029f62:	d045      	beq.n	8029ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029f64:	8b62      	ldrh	r2, [r4, #26]
 8029f66:	8b23      	ldrh	r3, [r4, #24]
 8029f68:	4313      	orrs	r3, r2
 8029f6a:	d00c      	beq.n	8029f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029f6c:	f1b8 0f00 	cmp.w	r8, #0
 8029f70:	db09      	blt.n	8029f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029f74:	4543      	cmp	r3, r8
 8029f76:	dd06      	ble.n	8029f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029f78:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8029f7c:	429a      	cmp	r2, r3
 8029f7e:	d313      	bcc.n	8029fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8029f80:	2301      	movs	r3, #1
 8029f82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029f86:	9b04      	ldr	r3, [sp, #16]
 8029f88:	82e6      	strh	r6, [r4, #22]
 8029f8a:	82a3      	strh	r3, [r4, #20]
 8029f8c:	2300      	movs	r3, #0
 8029f8e:	8323      	strh	r3, [r4, #24]
 8029f90:	8363      	strh	r3, [r4, #26]
 8029f92:	e02d      	b.n	8029ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029f94:	9a01      	ldr	r2, [sp, #4]
 8029f96:	fb0a f30e 	mul.w	r3, sl, lr
 8029f9a:	4252      	negs	r2, r2
 8029f9c:	9201      	str	r2, [sp, #4]
 8029f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8029fa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8029fa4:	2200      	movs	r2, #0
 8029fa6:	e7bc      	b.n	8029f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8029fa8:	f104 0314 	add.w	r3, r4, #20
 8029fac:	6922      	ldr	r2, [r4, #16]
 8029fae:	cb03      	ldmia	r3!, {r0, r1}
 8029fb0:	6010      	str	r0, [r2, #0]
 8029fb2:	6051      	str	r1, [r2, #4]
 8029fb4:	6923      	ldr	r3, [r4, #16]
 8029fb6:	3308      	adds	r3, #8
 8029fb8:	6123      	str	r3, [r4, #16]
 8029fba:	68a3      	ldr	r3, [r4, #8]
 8029fbc:	3301      	adds	r3, #1
 8029fbe:	60a3      	str	r3, [r4, #8]
 8029fc0:	e7e1      	b.n	8029f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029fc2:	f00b 031f 	and.w	r3, fp, #31
 8029fc6:	f001 011f 	and.w	r1, r1, #31
 8029fca:	8b20      	ldrh	r0, [r4, #24]
 8029fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8029fce:	9b02      	ldr	r3, [sp, #8]
 8029fd0:	eba3 020e 	sub.w	r2, r3, lr
 8029fd4:	8b63      	ldrh	r3, [r4, #26]
 8029fd6:	9300      	str	r3, [sp, #0]
 8029fd8:	9b04      	ldr	r3, [sp, #16]
 8029fda:	42ab      	cmp	r3, r5
 8029fdc:	f040 80ef 	bne.w	802a1be <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8029fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029fe2:	4410      	add	r0, r2
 8029fe4:	4419      	add	r1, r3
 8029fe6:	9b00      	ldr	r3, [sp, #0]
 8029fe8:	8320      	strh	r0, [r4, #24]
 8029fea:	fb02 3101 	mla	r1, r2, r1, r3
 8029fee:	8361      	strh	r1, [r4, #26]
 8029ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029ff2:	9904      	ldr	r1, [sp, #16]
 8029ff4:	4433      	add	r3, r6
 8029ff6:	9300      	str	r3, [sp, #0]
 8029ff8:	9a00      	ldr	r2, [sp, #0]
 8029ffa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029ffe:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802a002:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a006:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a00a:	4288      	cmp	r0, r1
 802a00c:	d018      	beq.n	802a040 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 802a00e:	8b60      	ldrh	r0, [r4, #26]
 802a010:	8b21      	ldrh	r1, [r4, #24]
 802a012:	ea50 0201 	orrs.w	r2, r0, r1
 802a016:	d00c      	beq.n	802a032 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a018:	2b00      	cmp	r3, #0
 802a01a:	db0a      	blt.n	802a032 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a01c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a01e:	4299      	cmp	r1, r3
 802a020:	dd07      	ble.n	802a032 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a022:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a026:	4299      	cmp	r1, r3
 802a028:	f0c0 818b 	bcc.w	802a342 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 802a02c:	2301      	movs	r3, #1
 802a02e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a032:	9b04      	ldr	r3, [sp, #16]
 802a034:	82a3      	strh	r3, [r4, #20]
 802a036:	9b00      	ldr	r3, [sp, #0]
 802a038:	82e3      	strh	r3, [r4, #22]
 802a03a:	2300      	movs	r3, #0
 802a03c:	8323      	strh	r3, [r4, #24]
 802a03e:	8363      	strh	r3, [r4, #26]
 802a040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a042:	9a00      	ldr	r2, [sp, #0]
 802a044:	4293      	cmp	r3, r2
 802a046:	f000 808d 	beq.w	802a164 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802a04a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802a04e:	9901      	ldr	r1, [sp, #4]
 802a050:	9801      	ldr	r0, [sp, #4]
 802a052:	fb93 f1f1 	sdiv	r1, r3, r1
 802a056:	fb00 3311 	mls	r3, r0, r1, r3
 802a05a:	9106      	str	r1, [sp, #24]
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	9307      	str	r3, [sp, #28]
 802a060:	da04      	bge.n	802a06c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 802a062:	1e4b      	subs	r3, r1, #1
 802a064:	9306      	str	r3, [sp, #24]
 802a066:	9b07      	ldr	r3, [sp, #28]
 802a068:	4403      	add	r3, r0
 802a06a:	9307      	str	r3, [sp, #28]
 802a06c:	9b08      	ldr	r3, [sp, #32]
 802a06e:	f04f 0c00 	mov.w	ip, #0
 802a072:	9901      	ldr	r1, [sp, #4]
 802a074:	1a5b      	subs	r3, r3, r1
 802a076:	4659      	mov	r1, fp
 802a078:	9308      	str	r3, [sp, #32]
 802a07a:	9b02      	ldr	r3, [sp, #8]
 802a07c:	f1c3 0320 	rsb	r3, r3, #32
 802a080:	930a      	str	r3, [sp, #40]	; 0x28
 802a082:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a084:	9b02      	ldr	r3, [sp, #8]
 802a086:	1a1b      	subs	r3, r3, r0
 802a088:	9309      	str	r3, [sp, #36]	; 0x24
 802a08a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 802a08e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802a092:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802a096:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802a09a:	181b      	adds	r3, r3, r0
 802a09c:	bf58      	it	pl
 802a09e:	9801      	ldrpl	r0, [sp, #4]
 802a0a0:	9308      	str	r3, [sp, #32]
 802a0a2:	bf54      	ite	pl
 802a0a4:	1a1b      	subpl	r3, r3, r0
 802a0a6:	9d06      	ldrmi	r5, [sp, #24]
 802a0a8:	9802      	ldr	r0, [sp, #8]
 802a0aa:	bf5e      	ittt	pl
 802a0ac:	9308      	strpl	r3, [sp, #32]
 802a0ae:	9b06      	ldrpl	r3, [sp, #24]
 802a0b0:	1c5d      	addpl	r5, r3, #1
 802a0b2:	44ab      	add	fp, r5
 802a0b4:	ea4f 136b 	mov.w	r3, fp, asr #5
 802a0b8:	9304      	str	r3, [sp, #16]
 802a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a0bc:	4283      	cmp	r3, r0
 802a0be:	f040 815a 	bne.w	802a376 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 802a0c2:	9b04      	ldr	r3, [sp, #16]
 802a0c4:	9a00      	ldr	r2, [sp, #0]
 802a0c6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802a0ca:	4543      	cmp	r3, r8
 802a0cc:	d01a      	beq.n	802a104 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a0ce:	8b61      	ldrh	r1, [r4, #26]
 802a0d0:	8b23      	ldrh	r3, [r4, #24]
 802a0d2:	430b      	orrs	r3, r1
 802a0d4:	d00e      	beq.n	802a0f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a0d6:	f1be 0f00 	cmp.w	lr, #0
 802a0da:	db0b      	blt.n	802a0f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a0de:	4573      	cmp	r3, lr
 802a0e0:	dd08      	ble.n	802a0f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a0e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a0e6:	4299      	cmp	r1, r3
 802a0e8:	f0c0 8138 	bcc.w	802a35c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 802a0ec:	f04f 0301 	mov.w	r3, #1
 802a0f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a0f4:	9b04      	ldr	r3, [sp, #16]
 802a0f6:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a0fa:	82a3      	strh	r3, [r4, #20]
 802a0fc:	9b00      	ldr	r3, [sp, #0]
 802a0fe:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a102:	82e3      	strh	r3, [r4, #22]
 802a104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a106:	9a00      	ldr	r2, [sp, #0]
 802a108:	441a      	add	r2, r3
 802a10a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a10e:	9200      	str	r2, [sp, #0]
 802a110:	9900      	ldr	r1, [sp, #0]
 802a112:	9a04      	ldr	r2, [sp, #16]
 802a114:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802a118:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a120:	4288      	cmp	r0, r1
 802a122:	d01a      	beq.n	802a15a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 802a124:	8b60      	ldrh	r0, [r4, #26]
 802a126:	8b21      	ldrh	r1, [r4, #24]
 802a128:	ea50 0201 	orrs.w	r2, r0, r1
 802a12c:	d00d      	beq.n	802a14a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a12e:	2b00      	cmp	r3, #0
 802a130:	db0b      	blt.n	802a14a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a132:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a134:	4299      	cmp	r1, r3
 802a136:	dd08      	ble.n	802a14a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a138:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a13c:	4299      	cmp	r1, r3
 802a13e:	f0c0 81f9 	bcc.w	802a534 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802a142:	f04f 0301 	mov.w	r3, #1
 802a146:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a14a:	9b04      	ldr	r3, [sp, #16]
 802a14c:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a150:	82a3      	strh	r3, [r4, #20]
 802a152:	9b00      	ldr	r3, [sp, #0]
 802a154:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a158:	82e3      	strh	r3, [r4, #22]
 802a15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a15c:	4659      	mov	r1, fp
 802a15e:	9a00      	ldr	r2, [sp, #0]
 802a160:	4293      	cmp	r3, r2
 802a162:	d192      	bne.n	802a08a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 802a164:	9b02      	ldr	r3, [sp, #8]
 802a166:	f1c3 0c20 	rsb	ip, r3, #32
 802a16a:	9b05      	ldr	r3, [sp, #20]
 802a16c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 802a170:	9b03      	ldr	r3, [sp, #12]
 802a172:	459c      	cmp	ip, r3
 802a174:	f040 81f8 	bne.w	802a568 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 802a178:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a17c:	9a00      	ldr	r2, [sp, #0]
 802a17e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a182:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802a186:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a18a:	4288      	cmp	r0, r1
 802a18c:	f43f ad54 	beq.w	8029c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a190:	8b60      	ldrh	r0, [r4, #26]
 802a192:	8b21      	ldrh	r1, [r4, #24]
 802a194:	ea50 0201 	orrs.w	r2, r0, r1
 802a198:	d00c      	beq.n	802a1b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	db0a      	blt.n	802a1b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a19e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a1a0:	4299      	cmp	r1, r3
 802a1a2:	dd07      	ble.n	802a1b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a1a4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a1a8:	4299      	cmp	r1, r3
 802a1aa:	f0c0 81d0 	bcc.w	802a54e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802a1ae:	2301      	movs	r3, #1
 802a1b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a1b4:	9b00      	ldr	r3, [sp, #0]
 802a1b6:	f8a4 e014 	strh.w	lr, [r4, #20]
 802a1ba:	82e3      	strh	r3, [r4, #22]
 802a1bc:	e517      	b.n	8029bee <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802a1be:	2f00      	cmp	r7, #0
 802a1c0:	f2c0 8097 	blt.w	802a2f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 802a1c4:	2301      	movs	r3, #1
 802a1c6:	f1c1 0c20 	rsb	ip, r1, #32
 802a1ca:	9307      	str	r3, [sp, #28]
 802a1cc:	2320      	movs	r3, #32
 802a1ce:	fb02 f20c 	mul.w	r2, r2, ip
 802a1d2:	9306      	str	r3, [sp, #24]
 802a1d4:	9b06      	ldr	r3, [sp, #24]
 802a1d6:	fb92 fcf7 	sdiv	ip, r2, r7
 802a1da:	fb07 221c 	mls	r2, r7, ip, r2
 802a1de:	4419      	add	r1, r3
 802a1e0:	9b00      	ldr	r3, [sp, #0]
 802a1e2:	2a00      	cmp	r2, #0
 802a1e4:	bfbc      	itt	lt
 802a1e6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a1ea:	19d2      	addlt	r2, r2, r7
 802a1ec:	fb0c 3101 	mla	r1, ip, r1, r3
 802a1f0:	9b07      	ldr	r3, [sp, #28]
 802a1f2:	4460      	add	r0, ip
 802a1f4:	441d      	add	r5, r3
 802a1f6:	0433      	lsls	r3, r6, #16
 802a1f8:	b200      	sxth	r0, r0
 802a1fa:	930a      	str	r3, [sp, #40]	; 0x28
 802a1fc:	18eb      	adds	r3, r5, r3
 802a1fe:	b209      	sxth	r1, r1
 802a200:	8320      	strh	r0, [r4, #24]
 802a202:	454b      	cmp	r3, r9
 802a204:	8361      	strh	r1, [r4, #26]
 802a206:	d014      	beq.n	802a232 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802a208:	ea50 0301 	orrs.w	r3, r0, r1
 802a20c:	d00c      	beq.n	802a228 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a20e:	f1b8 0f00 	cmp.w	r8, #0
 802a212:	db09      	blt.n	802a228 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a216:	4543      	cmp	r3, r8
 802a218:	dd06      	ble.n	802a228 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a21a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a21e:	4299      	cmp	r1, r3
 802a220:	d36e      	bcc.n	802a300 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 802a222:	2301      	movs	r3, #1
 802a224:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a228:	2300      	movs	r3, #0
 802a22a:	82a5      	strh	r5, [r4, #20]
 802a22c:	82e6      	strh	r6, [r4, #22]
 802a22e:	8323      	strh	r3, [r4, #24]
 802a230:	8363      	strh	r3, [r4, #26]
 802a232:	9904      	ldr	r1, [sp, #16]
 802a234:	eb0e 030c 	add.w	r3, lr, ip
 802a238:	42a9      	cmp	r1, r5
 802a23a:	d04d      	beq.n	802a2d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 802a23c:	9902      	ldr	r1, [sp, #8]
 802a23e:	1bd2      	subs	r2, r2, r7
 802a240:	1ac9      	subs	r1, r1, r3
 802a242:	9200      	str	r2, [sp, #0]
 802a244:	448c      	add	ip, r1
 802a246:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802a24a:	fb9c fef7 	sdiv	lr, ip, r7
 802a24e:	fb07 cc1e 	mls	ip, r7, lr, ip
 802a252:	f1bc 0f00 	cmp.w	ip, #0
 802a256:	bfbc      	itt	lt
 802a258:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802a25c:	44bc      	addlt	ip, r7
 802a25e:	f10e 0101 	add.w	r1, lr, #1
 802a262:	910d      	str	r1, [sp, #52]	; 0x34
 802a264:	9a00      	ldr	r2, [sp, #0]
 802a266:	8b20      	ldrh	r0, [r4, #24]
 802a268:	eb12 020c 	adds.w	r2, r2, ip
 802a26c:	8b61      	ldrh	r1, [r4, #26]
 802a26e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a272:	9200      	str	r2, [sp, #0]
 802a274:	bf5b      	ittet	pl
 802a276:	1bd2      	subpl	r2, r2, r7
 802a278:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802a27c:	46f0      	movmi	r8, lr
 802a27e:	9200      	strpl	r2, [sp, #0]
 802a280:	9a07      	ldr	r2, [sp, #28]
 802a282:	4440      	add	r0, r8
 802a284:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802a288:	4443      	add	r3, r8
 802a28a:	4415      	add	r5, r2
 802a28c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a292:	b200      	sxth	r0, r0
 802a294:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a298:	442a      	add	r2, r5
 802a29a:	b209      	sxth	r1, r1
 802a29c:	8320      	strh	r0, [r4, #24]
 802a29e:	454a      	cmp	r2, r9
 802a2a0:	8361      	strh	r1, [r4, #26]
 802a2a2:	d016      	beq.n	802a2d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 802a2a4:	ea50 0201 	orrs.w	r2, r0, r1
 802a2a8:	d00d      	beq.n	802a2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a2aa:	f1b8 0f00 	cmp.w	r8, #0
 802a2ae:	db0a      	blt.n	802a2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a2b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a2b2:	4541      	cmp	r1, r8
 802a2b4:	dd07      	ble.n	802a2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a2b6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a2ba:	4288      	cmp	r0, r1
 802a2bc:	d330      	bcc.n	802a320 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802a2be:	f04f 0201 	mov.w	r2, #1
 802a2c2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a2c6:	f04f 0200 	mov.w	r2, #0
 802a2ca:	82a5      	strh	r5, [r4, #20]
 802a2cc:	82e6      	strh	r6, [r4, #22]
 802a2ce:	8322      	strh	r2, [r4, #24]
 802a2d0:	8362      	strh	r2, [r4, #26]
 802a2d2:	9904      	ldr	r1, [sp, #16]
 802a2d4:	42a9      	cmp	r1, r5
 802a2d6:	d1c5      	bne.n	802a264 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802a2d8:	9a02      	ldr	r2, [sp, #8]
 802a2da:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a2dc:	1ad3      	subs	r3, r2, r3
 802a2de:	8b22      	ldrh	r2, [r4, #24]
 802a2e0:	3120      	adds	r1, #32
 802a2e2:	441a      	add	r2, r3
 802a2e4:	8322      	strh	r2, [r4, #24]
 802a2e6:	9a06      	ldr	r2, [sp, #24]
 802a2e8:	1a89      	subs	r1, r1, r2
 802a2ea:	8b62      	ldrh	r2, [r4, #26]
 802a2ec:	fb03 2301 	mla	r3, r3, r1, r2
 802a2f0:	e64e      	b.n	8029f90 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 802a2f2:	f04f 33ff 	mov.w	r3, #4294967295
 802a2f6:	434a      	muls	r2, r1
 802a2f8:	427f      	negs	r7, r7
 802a2fa:	9307      	str	r3, [sp, #28]
 802a2fc:	2300      	movs	r3, #0
 802a2fe:	e768      	b.n	802a1d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 802a300:	f104 0314 	add.w	r3, r4, #20
 802a304:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a308:	cb03      	ldmia	r3!, {r0, r1}
 802a30a:	f8c8 0000 	str.w	r0, [r8]
 802a30e:	f8c8 1004 	str.w	r1, [r8, #4]
 802a312:	6923      	ldr	r3, [r4, #16]
 802a314:	3308      	adds	r3, #8
 802a316:	6123      	str	r3, [r4, #16]
 802a318:	68a3      	ldr	r3, [r4, #8]
 802a31a:	3301      	adds	r3, #1
 802a31c:	60a3      	str	r3, [r4, #8]
 802a31e:	e783      	b.n	802a228 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a320:	f104 0814 	add.w	r8, r4, #20
 802a324:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a328:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802a32c:	f8c9 0000 	str.w	r0, [r9]
 802a330:	f8c9 1004 	str.w	r1, [r9, #4]
 802a334:	6921      	ldr	r1, [r4, #16]
 802a336:	3108      	adds	r1, #8
 802a338:	6121      	str	r1, [r4, #16]
 802a33a:	68a1      	ldr	r1, [r4, #8]
 802a33c:	3101      	adds	r1, #1
 802a33e:	60a1      	str	r1, [r4, #8]
 802a340:	e7c1      	b.n	802a2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a342:	f104 0314 	add.w	r3, r4, #20
 802a346:	6925      	ldr	r5, [r4, #16]
 802a348:	cb03      	ldmia	r3!, {r0, r1}
 802a34a:	6028      	str	r0, [r5, #0]
 802a34c:	6069      	str	r1, [r5, #4]
 802a34e:	6923      	ldr	r3, [r4, #16]
 802a350:	3308      	adds	r3, #8
 802a352:	6123      	str	r3, [r4, #16]
 802a354:	68a3      	ldr	r3, [r4, #8]
 802a356:	3301      	adds	r3, #1
 802a358:	60a3      	str	r3, [r4, #8]
 802a35a:	e66a      	b.n	802a032 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a35c:	f104 0314 	add.w	r3, r4, #20
 802a360:	6925      	ldr	r5, [r4, #16]
 802a362:	cb03      	ldmia	r3!, {r0, r1}
 802a364:	6028      	str	r0, [r5, #0]
 802a366:	6069      	str	r1, [r5, #4]
 802a368:	6923      	ldr	r3, [r4, #16]
 802a36a:	3308      	adds	r3, #8
 802a36c:	6123      	str	r3, [r4, #16]
 802a36e:	68a3      	ldr	r3, [r4, #8]
 802a370:	3301      	adds	r3, #1
 802a372:	60a3      	str	r3, [r4, #8]
 802a374:	e6be      	b.n	802a0f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a376:	f00b 031f 	and.w	r3, fp, #31
 802a37a:	114f      	asrs	r7, r1, #5
 802a37c:	8b20      	ldrh	r0, [r4, #24]
 802a37e:	f001 011f 	and.w	r1, r1, #31
 802a382:	930f      	str	r3, [sp, #60]	; 0x3c
 802a384:	9b04      	ldr	r3, [sp, #16]
 802a386:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802a38a:	429f      	cmp	r7, r3
 802a38c:	d10a      	bne.n	802a3a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a390:	4418      	add	r0, r3
 802a392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a394:	4419      	add	r1, r3
 802a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a398:	8320      	strh	r0, [r4, #24]
 802a39a:	fb03 9901 	mla	r9, r3, r1, r9
 802a39e:	f8a4 901a 	strh.w	r9, [r4, #26]
 802a3a2:	e6af      	b.n	802a104 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a3a4:	2d00      	cmp	r5, #0
 802a3a6:	f2c0 809b 	blt.w	802a4e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802a3aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802a3ac:	f1c1 0320 	rsb	r3, r1, #32
 802a3b0:	4373      	muls	r3, r6
 802a3b2:	2601      	movs	r6, #1
 802a3b4:	960e      	str	r6, [sp, #56]	; 0x38
 802a3b6:	2620      	movs	r6, #32
 802a3b8:	960d      	str	r6, [sp, #52]	; 0x34
 802a3ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a3bc:	fb93 f6f5 	sdiv	r6, r3, r5
 802a3c0:	4411      	add	r1, r2
 802a3c2:	fb05 3316 	mls	r3, r5, r6, r3
 802a3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a3c8:	2b00      	cmp	r3, #0
 802a3ca:	4417      	add	r7, r2
 802a3cc:	9a00      	ldr	r2, [sp, #0]
 802a3ce:	bfbc      	itt	lt
 802a3d0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802a3d4:	195b      	addlt	r3, r3, r5
 802a3d6:	0412      	lsls	r2, r2, #16
 802a3d8:	fb06 9101 	mla	r1, r6, r1, r9
 802a3dc:	4430      	add	r0, r6
 802a3de:	eb07 0902 	add.w	r9, r7, r2
 802a3e2:	9210      	str	r2, [sp, #64]	; 0x40
 802a3e4:	b200      	sxth	r0, r0
 802a3e6:	b209      	sxth	r1, r1
 802a3e8:	45c1      	cmp	r9, r8
 802a3ea:	8320      	strh	r0, [r4, #24]
 802a3ec:	8361      	strh	r1, [r4, #26]
 802a3ee:	d017      	beq.n	802a420 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 802a3f0:	ea50 0201 	orrs.w	r2, r0, r1
 802a3f4:	d00d      	beq.n	802a412 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a3f6:	f1be 0f00 	cmp.w	lr, #0
 802a3fa:	db0a      	blt.n	802a412 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a3fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a3fe:	4571      	cmp	r1, lr
 802a400:	dd07      	ble.n	802a412 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a402:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a406:	4288      	cmp	r0, r1
 802a408:	d372      	bcc.n	802a4f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802a40a:	f04f 0201 	mov.w	r2, #1
 802a40e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a412:	9a00      	ldr	r2, [sp, #0]
 802a414:	82a7      	strh	r7, [r4, #20]
 802a416:	82e2      	strh	r2, [r4, #22]
 802a418:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a41c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a422:	eb02 0e06 	add.w	lr, r2, r6
 802a426:	9a04      	ldr	r2, [sp, #16]
 802a428:	42ba      	cmp	r2, r7
 802a42a:	d049      	beq.n	802a4c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 802a42c:	9a02      	ldr	r2, [sp, #8]
 802a42e:	1b5b      	subs	r3, r3, r5
 802a430:	eba2 010e 	sub.w	r1, r2, lr
 802a434:	440e      	add	r6, r1
 802a436:	0176      	lsls	r6, r6, #5
 802a438:	fb96 f8f5 	sdiv	r8, r6, r5
 802a43c:	fb05 6618 	mls	r6, r5, r8, r6
 802a440:	2e00      	cmp	r6, #0
 802a442:	bfbc      	itt	lt
 802a444:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802a448:	1976      	addlt	r6, r6, r5
 802a44a:	f108 0201 	add.w	r2, r8, #1
 802a44e:	9211      	str	r2, [sp, #68]	; 0x44
 802a450:	199b      	adds	r3, r3, r6
 802a452:	8b20      	ldrh	r0, [r4, #24]
 802a454:	8b61      	ldrh	r1, [r4, #26]
 802a456:	bf54      	ite	pl
 802a458:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802a45c:	46c1      	movmi	r9, r8
 802a45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a460:	bf58      	it	pl
 802a462:	1b5b      	subpl	r3, r3, r5
 802a464:	4448      	add	r0, r9
 802a466:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802a46a:	4417      	add	r7, r2
 802a46c:	44ce      	add	lr, r9
 802a46e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a470:	b200      	sxth	r0, r0
 802a472:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a476:	b209      	sxth	r1, r1
 802a478:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a47c:	443a      	add	r2, r7
 802a47e:	8320      	strh	r0, [r4, #24]
 802a480:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a484:	8361      	strh	r1, [r4, #26]
 802a486:	4552      	cmp	r2, sl
 802a488:	d017      	beq.n	802a4ba <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802a48a:	ea50 0201 	orrs.w	r2, r0, r1
 802a48e:	d00d      	beq.n	802a4ac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a490:	f1b9 0f00 	cmp.w	r9, #0
 802a494:	db0a      	blt.n	802a4ac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a496:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a498:	4549      	cmp	r1, r9
 802a49a:	dd07      	ble.n	802a4ac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a49c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a4a0:	4288      	cmp	r0, r1
 802a4a2:	d336      	bcc.n	802a512 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802a4a4:	f04f 0201 	mov.w	r2, #1
 802a4a8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a4ac:	9a00      	ldr	r2, [sp, #0]
 802a4ae:	82a7      	strh	r7, [r4, #20]
 802a4b0:	82e2      	strh	r2, [r4, #22]
 802a4b2:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a4b6:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a4ba:	9a04      	ldr	r2, [sp, #16]
 802a4bc:	42ba      	cmp	r2, r7
 802a4be:	d1c7      	bne.n	802a450 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802a4c0:	9b02      	ldr	r3, [sp, #8]
 802a4c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a4c4:	eba3 0e0e 	sub.w	lr, r3, lr
 802a4c8:	8b23      	ldrh	r3, [r4, #24]
 802a4ca:	3120      	adds	r1, #32
 802a4cc:	4473      	add	r3, lr
 802a4ce:	8323      	strh	r3, [r4, #24]
 802a4d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a4d2:	1ac9      	subs	r1, r1, r3
 802a4d4:	8b63      	ldrh	r3, [r4, #26]
 802a4d6:	fb0e 3e01 	mla	lr, lr, r1, r3
 802a4da:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802a4de:	e611      	b.n	802a104 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a4e0:	f04f 36ff 	mov.w	r6, #4294967295
 802a4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a4e6:	426d      	negs	r5, r5
 802a4e8:	960e      	str	r6, [sp, #56]	; 0x38
 802a4ea:	2600      	movs	r6, #0
 802a4ec:	434b      	muls	r3, r1
 802a4ee:	e763      	b.n	802a3b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802a4f0:	f104 0e14 	add.w	lr, r4, #20
 802a4f4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a4f8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a4fc:	f8c8 0000 	str.w	r0, [r8]
 802a500:	f8c8 1004 	str.w	r1, [r8, #4]
 802a504:	6921      	ldr	r1, [r4, #16]
 802a506:	3108      	adds	r1, #8
 802a508:	6121      	str	r1, [r4, #16]
 802a50a:	68a1      	ldr	r1, [r4, #8]
 802a50c:	3101      	adds	r1, #1
 802a50e:	60a1      	str	r1, [r4, #8]
 802a510:	e77f      	b.n	802a412 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a512:	f104 0914 	add.w	r9, r4, #20
 802a516:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a51a:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a51e:	f8ca 0000 	str.w	r0, [sl]
 802a522:	f8ca 1004 	str.w	r1, [sl, #4]
 802a526:	6921      	ldr	r1, [r4, #16]
 802a528:	3108      	adds	r1, #8
 802a52a:	6121      	str	r1, [r4, #16]
 802a52c:	68a1      	ldr	r1, [r4, #8]
 802a52e:	3101      	adds	r1, #1
 802a530:	60a1      	str	r1, [r4, #8]
 802a532:	e7bb      	b.n	802a4ac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a534:	f104 0314 	add.w	r3, r4, #20
 802a538:	6925      	ldr	r5, [r4, #16]
 802a53a:	cb03      	ldmia	r3!, {r0, r1}
 802a53c:	6028      	str	r0, [r5, #0]
 802a53e:	6069      	str	r1, [r5, #4]
 802a540:	6923      	ldr	r3, [r4, #16]
 802a542:	3308      	adds	r3, #8
 802a544:	6123      	str	r3, [r4, #16]
 802a546:	68a3      	ldr	r3, [r4, #8]
 802a548:	3301      	adds	r3, #1
 802a54a:	60a3      	str	r3, [r4, #8]
 802a54c:	e5fd      	b.n	802a14a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a54e:	f104 0314 	add.w	r3, r4, #20
 802a552:	6925      	ldr	r5, [r4, #16]
 802a554:	cb03      	ldmia	r3!, {r0, r1}
 802a556:	6028      	str	r0, [r5, #0]
 802a558:	6069      	str	r1, [r5, #4]
 802a55a:	6923      	ldr	r3, [r4, #16]
 802a55c:	3308      	adds	r3, #8
 802a55e:	6123      	str	r3, [r4, #16]
 802a560:	68a3      	ldr	r3, [r4, #8]
 802a562:	3301      	adds	r3, #1
 802a564:	60a3      	str	r3, [r4, #8]
 802a566:	e625      	b.n	802a1b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a568:	9b05      	ldr	r3, [sp, #20]
 802a56a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802a56e:	f00b 081f 	and.w	r8, fp, #31
 802a572:	8b20      	ldrh	r0, [r4, #24]
 802a574:	f003 031f 	and.w	r3, r3, #31
 802a578:	4577      	cmp	r7, lr
 802a57a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802a57e:	9302      	str	r3, [sp, #8]
 802a580:	9b03      	ldr	r3, [sp, #12]
 802a582:	eba3 050c 	sub.w	r5, r3, ip
 802a586:	d108      	bne.n	802a59a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802a588:	9b02      	ldr	r3, [sp, #8]
 802a58a:	4428      	add	r0, r5
 802a58c:	4498      	add	r8, r3
 802a58e:	8320      	strh	r0, [r4, #24]
 802a590:	fb05 9508 	mla	r5, r5, r8, r9
 802a594:	8365      	strh	r5, [r4, #26]
 802a596:	f7ff bb4f 	b.w	8029c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a59a:	9b05      	ldr	r3, [sp, #20]
 802a59c:	ebb3 030b 	subs.w	r3, r3, fp
 802a5a0:	f100 809c 	bmi.w	802a6dc <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802a5a4:	f1c8 0120 	rsb	r1, r8, #32
 802a5a8:	2201      	movs	r2, #1
 802a5aa:	f04f 0b20 	mov.w	fp, #32
 802a5ae:	434d      	muls	r5, r1
 802a5b0:	9201      	str	r2, [sp, #4]
 802a5b2:	9a01      	ldr	r2, [sp, #4]
 802a5b4:	44d8      	add	r8, fp
 802a5b6:	fb95 f6f3 	sdiv	r6, r5, r3
 802a5ba:	fb03 5516 	mls	r5, r3, r6, r5
 802a5be:	4417      	add	r7, r2
 802a5c0:	9a00      	ldr	r2, [sp, #0]
 802a5c2:	2d00      	cmp	r5, #0
 802a5c4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802a5c8:	bfbc      	itt	lt
 802a5ca:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802a5ce:	18ed      	addlt	r5, r5, r3
 802a5d0:	eb07 0a02 	add.w	sl, r7, r2
 802a5d4:	9204      	str	r2, [sp, #16]
 802a5d6:	fb06 9808 	mla	r8, r6, r8, r9
 802a5da:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a5de:	4430      	add	r0, r6
 802a5e0:	fa0f f188 	sxth.w	r1, r8
 802a5e4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a5e8:	b200      	sxth	r0, r0
 802a5ea:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a5ee:	8361      	strh	r1, [r4, #26]
 802a5f0:	8320      	strh	r0, [r4, #24]
 802a5f2:	45ca      	cmp	sl, r9
 802a5f4:	d015      	beq.n	802a622 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802a5f6:	ea50 0201 	orrs.w	r2, r0, r1
 802a5fa:	d00c      	beq.n	802a616 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a5fc:	f1b8 0f00 	cmp.w	r8, #0
 802a600:	db09      	blt.n	802a616 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a602:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a604:	4541      	cmp	r1, r8
 802a606:	dd06      	ble.n	802a616 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a608:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a60c:	4288      	cmp	r0, r1
 802a60e:	d36e      	bcc.n	802a6ee <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802a610:	2101      	movs	r1, #1
 802a612:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a616:	2100      	movs	r1, #0
 802a618:	9a00      	ldr	r2, [sp, #0]
 802a61a:	82a7      	strh	r7, [r4, #20]
 802a61c:	82e2      	strh	r2, [r4, #22]
 802a61e:	8321      	strh	r1, [r4, #24]
 802a620:	8361      	strh	r1, [r4, #26]
 802a622:	45be      	cmp	lr, r7
 802a624:	44b4      	add	ip, r6
 802a626:	d048      	beq.n	802a6ba <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802a628:	9a03      	ldr	r2, [sp, #12]
 802a62a:	1aed      	subs	r5, r5, r3
 802a62c:	eba2 010c 	sub.w	r1, r2, ip
 802a630:	440e      	add	r6, r1
 802a632:	0176      	lsls	r6, r6, #5
 802a634:	fb96 f8f3 	sdiv	r8, r6, r3
 802a638:	fb03 6618 	mls	r6, r3, r8, r6
 802a63c:	2e00      	cmp	r6, #0
 802a63e:	bfbc      	itt	lt
 802a640:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802a644:	18f6      	addlt	r6, r6, r3
 802a646:	f108 0201 	add.w	r2, r8, #1
 802a64a:	9205      	str	r2, [sp, #20]
 802a64c:	19ad      	adds	r5, r5, r6
 802a64e:	8b20      	ldrh	r0, [r4, #24]
 802a650:	8b61      	ldrh	r1, [r4, #26]
 802a652:	bf54      	ite	pl
 802a654:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802a658:	46c1      	movmi	r9, r8
 802a65a:	9a01      	ldr	r2, [sp, #4]
 802a65c:	bf58      	it	pl
 802a65e:	1aed      	subpl	r5, r5, r3
 802a660:	4448      	add	r0, r9
 802a662:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802a666:	4417      	add	r7, r2
 802a668:	44cc      	add	ip, r9
 802a66a:	9a04      	ldr	r2, [sp, #16]
 802a66c:	b200      	sxth	r0, r0
 802a66e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a672:	b209      	sxth	r1, r1
 802a674:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a678:	443a      	add	r2, r7
 802a67a:	8320      	strh	r0, [r4, #24]
 802a67c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a680:	8361      	strh	r1, [r4, #26]
 802a682:	4552      	cmp	r2, sl
 802a684:	d017      	beq.n	802a6b6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802a686:	ea50 0201 	orrs.w	r2, r0, r1
 802a68a:	d00d      	beq.n	802a6a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a68c:	f1b9 0f00 	cmp.w	r9, #0
 802a690:	db0a      	blt.n	802a6a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a692:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a694:	4549      	cmp	r1, r9
 802a696:	dd07      	ble.n	802a6a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a698:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a69c:	4288      	cmp	r0, r1
 802a69e:	d337      	bcc.n	802a710 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802a6a0:	f04f 0201 	mov.w	r2, #1
 802a6a4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a6a8:	9a00      	ldr	r2, [sp, #0]
 802a6aa:	82a7      	strh	r7, [r4, #20]
 802a6ac:	82e2      	strh	r2, [r4, #22]
 802a6ae:	f04f 0200 	mov.w	r2, #0
 802a6b2:	8322      	strh	r2, [r4, #24]
 802a6b4:	8362      	strh	r2, [r4, #26]
 802a6b6:	45be      	cmp	lr, r7
 802a6b8:	d1c8      	bne.n	802a64c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802a6ba:	9b03      	ldr	r3, [sp, #12]
 802a6bc:	8b62      	ldrh	r2, [r4, #26]
 802a6be:	eba3 0c0c 	sub.w	ip, r3, ip
 802a6c2:	8b23      	ldrh	r3, [r4, #24]
 802a6c4:	4463      	add	r3, ip
 802a6c6:	8323      	strh	r3, [r4, #24]
 802a6c8:	9b02      	ldr	r3, [sp, #8]
 802a6ca:	3320      	adds	r3, #32
 802a6cc:	eba3 030b 	sub.w	r3, r3, fp
 802a6d0:	fb0c 2c03 	mla	ip, ip, r3, r2
 802a6d4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a6d8:	f7ff baae 	b.w	8029c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a6dc:	f04f 32ff 	mov.w	r2, #4294967295
 802a6e0:	fb05 f508 	mul.w	r5, r5, r8
 802a6e4:	425b      	negs	r3, r3
 802a6e6:	f04f 0b00 	mov.w	fp, #0
 802a6ea:	9201      	str	r2, [sp, #4]
 802a6ec:	e761      	b.n	802a5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802a6ee:	f104 0814 	add.w	r8, r4, #20
 802a6f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a6f6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802a6fa:	f8c9 0000 	str.w	r0, [r9]
 802a6fe:	f8c9 1004 	str.w	r1, [r9, #4]
 802a702:	6921      	ldr	r1, [r4, #16]
 802a704:	3108      	adds	r1, #8
 802a706:	6121      	str	r1, [r4, #16]
 802a708:	68a1      	ldr	r1, [r4, #8]
 802a70a:	3101      	adds	r1, #1
 802a70c:	60a1      	str	r1, [r4, #8]
 802a70e:	e782      	b.n	802a616 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a710:	f104 0914 	add.w	r9, r4, #20
 802a714:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a718:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a71c:	f8ca 0000 	str.w	r0, [sl]
 802a720:	f8ca 1004 	str.w	r1, [sl, #4]
 802a724:	6921      	ldr	r1, [r4, #16]
 802a726:	3108      	adds	r1, #8
 802a728:	6121      	str	r1, [r4, #16]
 802a72a:	68a1      	ldr	r1, [r4, #8]
 802a72c:	3101      	adds	r1, #1
 802a72e:	60a1      	str	r1, [r4, #8]
 802a730:	e7ba      	b.n	802a6a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802a732 <_ZN8touchgfx7Outline6lineToEii>:
 802a732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a734:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a736:	4604      	mov	r4, r0
 802a738:	460d      	mov	r5, r1
 802a73a:	4616      	mov	r6, r2
 802a73c:	079b      	lsls	r3, r3, #30
 802a73e:	d526      	bpl.n	802a78e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a740:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802a744:	ea85 0001 	eor.w	r0, r5, r1
 802a748:	ea86 0302 	eor.w	r3, r6, r2
 802a74c:	4303      	orrs	r3, r0
 802a74e:	d01e      	beq.n	802a78e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a750:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a752:	114b      	asrs	r3, r1, #5
 802a754:	9600      	str	r6, [sp, #0]
 802a756:	4283      	cmp	r3, r0
 802a758:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a75a:	bfb8      	it	lt
 802a75c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a75e:	3301      	adds	r3, #1
 802a760:	4283      	cmp	r3, r0
 802a762:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a764:	bfc8      	it	gt
 802a766:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a768:	116b      	asrs	r3, r5, #5
 802a76a:	4283      	cmp	r3, r0
 802a76c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a76e:	bfb8      	it	lt
 802a770:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a772:	3301      	adds	r3, #1
 802a774:	4283      	cmp	r3, r0
 802a776:	4620      	mov	r0, r4
 802a778:	bfc8      	it	gt
 802a77a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a77c:	462b      	mov	r3, r5
 802a77e:	f7ff f9e3 	bl	8029b48 <_ZN8touchgfx7Outline10renderLineEiiii>
 802a782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a784:	f043 0301 	orr.w	r3, r3, #1
 802a788:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802a78c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a78e:	b002      	add	sp, #8
 802a790:	bd70      	pop	{r4, r5, r6, pc}

0802a792 <_ZN8touchgfx7Outline6moveToEii>:
 802a792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a794:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a796:	4615      	mov	r5, r2
 802a798:	4604      	mov	r4, r0
 802a79a:	460e      	mov	r6, r1
 802a79c:	079a      	lsls	r2, r3, #30
 802a79e:	d401      	bmi.n	802a7a4 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802a7a0:	f7ff f98c 	bl	8029abc <_ZN8touchgfx7Outline5resetEv>
 802a7a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a7a6:	07db      	lsls	r3, r3, #31
 802a7a8:	d504      	bpl.n	802a7b4 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802a7aa:	4620      	mov	r0, r4
 802a7ac:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802a7b0:	f7ff ffbf 	bl	802a732 <_ZN8touchgfx7Outline6lineToEii>
 802a7b4:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802a7b8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a7bc:	116f      	asrs	r7, r5, #5
 802a7be:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802a7c2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802a7c6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802a7ca:	4291      	cmp	r1, r2
 802a7cc:	d015      	beq.n	802a7fa <_ZN8touchgfx7Outline6moveToEii+0x68>
 802a7ce:	8b61      	ldrh	r1, [r4, #26]
 802a7d0:	8b22      	ldrh	r2, [r4, #24]
 802a7d2:	430a      	orrs	r2, r1
 802a7d4:	d00b      	beq.n	802a7ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a7d6:	2b00      	cmp	r3, #0
 802a7d8:	db09      	blt.n	802a7ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a7da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a7dc:	429a      	cmp	r2, r3
 802a7de:	dd06      	ble.n	802a7ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a7e0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802a7e4:	429a      	cmp	r2, r3
 802a7e6:	d30d      	bcc.n	802a804 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802a7e8:	2301      	movs	r3, #1
 802a7ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a7ee:	2300      	movs	r3, #0
 802a7f0:	f8a4 c014 	strh.w	ip, [r4, #20]
 802a7f4:	82e7      	strh	r7, [r4, #22]
 802a7f6:	8323      	strh	r3, [r4, #24]
 802a7f8:	8363      	strh	r3, [r4, #26]
 802a7fa:	61e6      	str	r6, [r4, #28]
 802a7fc:	62a5      	str	r5, [r4, #40]	; 0x28
 802a7fe:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a804:	f104 0314 	add.w	r3, r4, #20
 802a808:	6922      	ldr	r2, [r4, #16]
 802a80a:	cb03      	ldmia	r3!, {r0, r1}
 802a80c:	6010      	str	r0, [r2, #0]
 802a80e:	6051      	str	r1, [r2, #4]
 802a810:	6923      	ldr	r3, [r4, #16]
 802a812:	3308      	adds	r3, #8
 802a814:	6123      	str	r3, [r4, #16]
 802a816:	68a3      	ldr	r3, [r4, #8]
 802a818:	3301      	adds	r3, #1
 802a81a:	60a3      	str	r3, [r4, #8]
 802a81c:	e7e7      	b.n	802a7ee <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802a81e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802a81e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a822:	b0d1      	sub	sp, #324	; 0x144
 802a824:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802a828:	466c      	mov	r4, sp
 802a82a:	1a0d      	subs	r5, r1, r0
 802a82c:	f100 0208 	add.w	r2, r0, #8
 802a830:	2d48      	cmp	r5, #72	; 0x48
 802a832:	f340 80ba 	ble.w	802a9aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a836:	112d      	asrs	r5, r5, #4
 802a838:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802a83c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802a840:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802a844:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802a848:	f9b0 8000 	ldrsh.w	r8, [r0]
 802a84c:	681e      	ldr	r6, [r3, #0]
 802a84e:	6006      	str	r6, [r0, #0]
 802a850:	685e      	ldr	r6, [r3, #4]
 802a852:	6046      	str	r6, [r0, #4]
 802a854:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802a858:	f8a3 c004 	strh.w	ip, [r3, #4]
 802a85c:	f8a3 e002 	strh.w	lr, [r3, #2]
 802a860:	80df      	strh	r7, [r3, #6]
 802a862:	f1a1 0308 	sub.w	r3, r1, #8
 802a866:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802a86a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802a86e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a872:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a876:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a87a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a87e:	45ac      	cmp	ip, r5
 802a880:	dd0f      	ble.n	802a8a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802a882:	681d      	ldr	r5, [r3, #0]
 802a884:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802a888:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802a88c:	6015      	str	r5, [r2, #0]
 802a88e:	685d      	ldr	r5, [r3, #4]
 802a890:	6055      	str	r5, [r2, #4]
 802a892:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a896:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a89a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a89e:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a8a2:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802a8a6:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a8aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a8ae:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802a8b2:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802a8b6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a8ba:	4565      	cmp	r5, ip
 802a8bc:	dd0d      	ble.n	802a8da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802a8be:	6815      	ldr	r5, [r2, #0]
 802a8c0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a8c4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a8c8:	6005      	str	r5, [r0, #0]
 802a8ca:	6855      	ldr	r5, [r2, #4]
 802a8cc:	8107      	strh	r7, [r0, #8]
 802a8ce:	6045      	str	r5, [r0, #4]
 802a8d0:	8146      	strh	r6, [r0, #10]
 802a8d2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802a8d6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802a8da:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a8de:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a8e2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a8e6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a8ea:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a8ee:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a8f2:	45ac      	cmp	ip, r5
 802a8f4:	dd0f      	ble.n	802a916 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a8f6:	681d      	ldr	r5, [r3, #0]
 802a8f8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a8fc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a900:	6005      	str	r5, [r0, #0]
 802a902:	685d      	ldr	r5, [r3, #4]
 802a904:	6045      	str	r5, [r0, #4]
 802a906:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a90a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a90e:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a912:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a916:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802a91a:	f102 0508 	add.w	r5, r2, #8
 802a91e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802a922:	f9b0 e000 	ldrsh.w	lr, [r0]
 802a926:	462f      	mov	r7, r5
 802a928:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802a92c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802a930:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802a934:	45b2      	cmp	sl, r6
 802a936:	dc18      	bgt.n	802a96a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802a938:	3b08      	subs	r3, #8
 802a93a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802a93e:	f9b3 6000 	ldrsh.w	r6, [r3]
 802a942:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802a946:	45b2      	cmp	sl, r6
 802a948:	dbf6      	blt.n	802a938 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802a94a:	42ab      	cmp	r3, r5
 802a94c:	681e      	ldr	r6, [r3, #0]
 802a94e:	d30e      	bcc.n	802a96e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802a950:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802a954:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802a958:	602e      	str	r6, [r5, #0]
 802a95a:	685e      	ldr	r6, [r3, #4]
 802a95c:	606e      	str	r6, [r5, #4]
 802a95e:	f8a3 9000 	strh.w	r9, [r3]
 802a962:	f8a3 8002 	strh.w	r8, [r3, #2]
 802a966:	809f      	strh	r7, [r3, #4]
 802a968:	80da      	strh	r2, [r3, #6]
 802a96a:	462a      	mov	r2, r5
 802a96c:	e7d3      	b.n	802a916 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a96e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802a972:	6006      	str	r6, [r0, #0]
 802a974:	685e      	ldr	r6, [r3, #4]
 802a976:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802a97a:	6046      	str	r6, [r0, #4]
 802a97c:	1a1e      	subs	r6, r3, r0
 802a97e:	80da      	strh	r2, [r3, #6]
 802a980:	1b4a      	subs	r2, r1, r5
 802a982:	f8a3 e000 	strh.w	lr, [r3]
 802a986:	10d2      	asrs	r2, r2, #3
 802a988:	f8a3 c002 	strh.w	ip, [r3, #2]
 802a98c:	f8a3 8004 	strh.w	r8, [r3, #4]
 802a990:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802a994:	bfb5      	itete	lt
 802a996:	e9c4 0300 	strdlt	r0, r3, [r4]
 802a99a:	4607      	movge	r7, r0
 802a99c:	460b      	movlt	r3, r1
 802a99e:	e9c4 5100 	strdge	r5, r1, [r4]
 802a9a2:	4638      	mov	r0, r7
 802a9a4:	3408      	adds	r4, #8
 802a9a6:	4619      	mov	r1, r3
 802a9a8:	e73f      	b.n	802a82a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802a9aa:	4291      	cmp	r1, r2
 802a9ac:	d925      	bls.n	802a9fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802a9ae:	f1a2 0310 	sub.w	r3, r2, #16
 802a9b2:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802a9b6:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802a9ba:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802a9be:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802a9c2:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802a9c6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802a9ca:	42b5      	cmp	r5, r6
 802a9cc:	dd13      	ble.n	802a9f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802a9ce:	461d      	mov	r5, r3
 802a9d0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802a9d4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802a9d8:	3b08      	subs	r3, #8
 802a9da:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802a9de:	619e      	str	r6, [r3, #24]
 802a9e0:	42a8      	cmp	r0, r5
 802a9e2:	686e      	ldr	r6, [r5, #4]
 802a9e4:	f8a3 c010 	strh.w	ip, [r3, #16]
 802a9e8:	61de      	str	r6, [r3, #28]
 802a9ea:	825f      	strh	r7, [r3, #18]
 802a9ec:	f8a3 8014 	strh.w	r8, [r3, #20]
 802a9f0:	f8a3 e016 	strh.w	lr, [r3, #22]
 802a9f4:	d1dd      	bne.n	802a9b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802a9f6:	3208      	adds	r2, #8
 802a9f8:	e7d7      	b.n	802a9aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a9fa:	466b      	mov	r3, sp
 802a9fc:	429c      	cmp	r4, r3
 802a9fe:	d903      	bls.n	802aa08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802aa00:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802aa04:	3c08      	subs	r4, #8
 802aa06:	e710      	b.n	802a82a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802aa08:	b051      	add	sp, #324	; 0x144
 802aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aa0e <_ZN8touchgfx7Outline9sortCellsEv>:
 802aa0e:	6881      	ldr	r1, [r0, #8]
 802aa10:	b111      	cbz	r1, 802aa18 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802aa12:	68c0      	ldr	r0, [r0, #12]
 802aa14:	f7ff bf03 	b.w	802a81e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802aa18:	4770      	bx	lr

0802aa1a <_ZN8touchgfx7Outline8getCellsEv>:
 802aa1a:	b510      	push	{r4, lr}
 802aa1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802aa1e:	4604      	mov	r4, r0
 802aa20:	07da      	lsls	r2, r3, #31
 802aa22:	d507      	bpl.n	802aa34 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802aa24:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802aa28:	f7ff fe83 	bl	802a732 <_ZN8touchgfx7Outline6lineToEii>
 802aa2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802aa2e:	f023 0301 	bic.w	r3, r3, #1
 802aa32:	63e3      	str	r3, [r4, #60]	; 0x3c
 802aa34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802aa36:	079b      	lsls	r3, r3, #30
 802aa38:	d51a      	bpl.n	802aa70 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802aa3a:	8b62      	ldrh	r2, [r4, #26]
 802aa3c:	8b23      	ldrh	r3, [r4, #24]
 802aa3e:	4313      	orrs	r3, r2
 802aa40:	d00d      	beq.n	802aa5e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802aa42:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802aa46:	2b00      	cmp	r3, #0
 802aa48:	db09      	blt.n	802aa5e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802aa4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802aa4c:	4293      	cmp	r3, r2
 802aa4e:	da06      	bge.n	802aa5e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802aa50:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802aa54:	429a      	cmp	r2, r3
 802aa56:	d80d      	bhi.n	802aa74 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802aa58:	2301      	movs	r3, #1
 802aa5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802aa5e:	68a0      	ldr	r0, [r4, #8]
 802aa60:	b138      	cbz	r0, 802aa72 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802aa62:	4620      	mov	r0, r4
 802aa64:	f7ff ffd3 	bl	802aa0e <_ZN8touchgfx7Outline9sortCellsEv>
 802aa68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802aa6a:	f023 0302 	bic.w	r3, r3, #2
 802aa6e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802aa70:	68e0      	ldr	r0, [r4, #12]
 802aa72:	bd10      	pop	{r4, pc}
 802aa74:	f104 0314 	add.w	r3, r4, #20
 802aa78:	6922      	ldr	r2, [r4, #16]
 802aa7a:	cb03      	ldmia	r3!, {r0, r1}
 802aa7c:	6010      	str	r0, [r2, #0]
 802aa7e:	6051      	str	r1, [r2, #4]
 802aa80:	6923      	ldr	r3, [r4, #16]
 802aa82:	3308      	adds	r3, #8
 802aa84:	6123      	str	r3, [r4, #16]
 802aa86:	68a3      	ldr	r3, [r4, #8]
 802aa88:	3301      	adds	r3, #1
 802aa8a:	60a3      	str	r3, [r4, #8]
 802aa8c:	e7e7      	b.n	802aa5e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802aa8e <_ZN8touchgfx8ScanlineD1Ev>:
 802aa8e:	4770      	bx	lr

0802aa90 <_ZN8touchgfx8ScanlineD0Ev>:
 802aa90:	b510      	push	{r4, lr}
 802aa92:	4604      	mov	r4, r0
 802aa94:	2124      	movs	r1, #36	; 0x24
 802aa96:	f000 f87a 	bl	802ab8e <_ZdlPvj>
 802aa9a:	4620      	mov	r0, r4
 802aa9c:	bd10      	pop	{r4, pc}

0802aa9e <_ZN8touchgfx8Scanline5resetEv>:
 802aa9e:	b510      	push	{r4, lr}
 802aaa0:	4604      	mov	r4, r0
 802aaa2:	f7f3 f8bf 	bl	801dc24 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802aaa6:	61a0      	str	r0, [r4, #24]
 802aaa8:	f7f3 f8c2 	bl	801dc30 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802aaac:	61e0      	str	r0, [r4, #28]
 802aaae:	f7f3 f8c5 	bl	801dc3c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802aab2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802aab6:	6220      	str	r0, [r4, #32]
 802aab8:	6160      	str	r0, [r4, #20]
 802aaba:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802aabe:	69e3      	ldr	r3, [r4, #28]
 802aac0:	6123      	str	r3, [r4, #16]
 802aac2:	2300      	movs	r3, #0
 802aac4:	60e3      	str	r3, [r4, #12]
 802aac6:	bd10      	pop	{r4, pc}

0802aac8 <_ZN8touchgfx8ScanlineC1Ev>:
 802aac8:	4b07      	ldr	r3, [pc, #28]	; (802aae8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802aaca:	b510      	push	{r4, lr}
 802aacc:	6003      	str	r3, [r0, #0]
 802aace:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802aad2:	4604      	mov	r4, r0
 802aad4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802aad8:	2300      	movs	r3, #0
 802aada:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802aade:	6143      	str	r3, [r0, #20]
 802aae0:	f7ff ffdd 	bl	802aa9e <_ZN8touchgfx8Scanline5resetEv>
 802aae4:	4620      	mov	r0, r4
 802aae6:	bd10      	pop	{r4, pc}
 802aae8:	08030a8c 	.word	0x08030a8c

0802aaec <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aaf0:	1e0c      	subs	r4, r1, #0
 802aaf2:	4605      	mov	r5, r0
 802aaf4:	4617      	mov	r7, r2
 802aaf6:	461e      	mov	r6, r3
 802aaf8:	da03      	bge.n	802ab02 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802aafa:	4426      	add	r6, r4
 802aafc:	2e01      	cmp	r6, #1
 802aafe:	d421      	bmi.n	802ab44 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802ab00:	2400      	movs	r4, #0
 802ab02:	f7f3 f889 	bl	801dc18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ab06:	42a0      	cmp	r0, r4
 802ab08:	d91c      	bls.n	802ab44 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802ab0a:	eb04 0806 	add.w	r8, r4, r6
 802ab0e:	f7f3 f883 	bl	801dc18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ab12:	4580      	cmp	r8, r0
 802ab14:	d902      	bls.n	802ab1c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802ab16:	f7f3 f87f 	bl	801dc18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ab1a:	1b06      	subs	r6, r0, r4
 802ab1c:	69a8      	ldr	r0, [r5, #24]
 802ab1e:	4632      	mov	r2, r6
 802ab20:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802ab24:	4420      	add	r0, r4
 802ab26:	f7f4 fd76 	bl	801f616 <_ZN8touchgfx6memsetEPvhm>
 802ab2a:	686b      	ldr	r3, [r5, #4]
 802ab2c:	b2b2      	uxth	r2, r6
 802ab2e:	3301      	adds	r3, #1
 802ab30:	42a3      	cmp	r3, r4
 802ab32:	696b      	ldr	r3, [r5, #20]
 802ab34:	d108      	bne.n	802ab48 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802ab36:	8819      	ldrh	r1, [r3, #0]
 802ab38:	440a      	add	r2, r1
 802ab3a:	801a      	strh	r2, [r3, #0]
 802ab3c:	3c01      	subs	r4, #1
 802ab3e:	4434      	add	r4, r6
 802ab40:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ab48:	1c99      	adds	r1, r3, #2
 802ab4a:	6169      	str	r1, [r5, #20]
 802ab4c:	805a      	strh	r2, [r3, #2]
 802ab4e:	692b      	ldr	r3, [r5, #16]
 802ab50:	1c9a      	adds	r2, r3, #2
 802ab52:	612a      	str	r2, [r5, #16]
 802ab54:	805c      	strh	r4, [r3, #2]
 802ab56:	68eb      	ldr	r3, [r5, #12]
 802ab58:	3301      	adds	r3, #1
 802ab5a:	60eb      	str	r3, [r5, #12]
 802ab5c:	e7ee      	b.n	802ab3c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802ab5e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802ab5e:	2200      	movs	r2, #0
 802ab60:	6002      	str	r2, [r0, #0]
 802ab62:	7102      	strb	r2, [r0, #4]
 802ab64:	6102      	str	r2, [r0, #16]
 802ab66:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802ab6a:	4770      	bx	lr

0802ab6c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802ab6c:	4770      	bx	lr

0802ab6e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802ab6e:	6083      	str	r3, [r0, #8]
 802ab70:	9b00      	ldr	r3, [sp, #0]
 802ab72:	6001      	str	r1, [r0, #0]
 802ab74:	60c3      	str	r3, [r0, #12]
 802ab76:	9b01      	ldr	r3, [sp, #4]
 802ab78:	7102      	strb	r2, [r0, #4]
 802ab7a:	6103      	str	r3, [r0, #16]
 802ab7c:	4770      	bx	lr

0802ab7e <__aeabi_atexit>:
 802ab7e:	460b      	mov	r3, r1
 802ab80:	4601      	mov	r1, r0
 802ab82:	4618      	mov	r0, r3
 802ab84:	f000 b852 	b.w	802ac2c <__cxa_atexit>

0802ab88 <__cxa_pure_virtual>:
 802ab88:	b508      	push	{r3, lr}
 802ab8a:	f000 f81f 	bl	802abcc <_ZSt9terminatev>

0802ab8e <_ZdlPvj>:
 802ab8e:	f000 b80f 	b.w	802abb0 <_ZdlPv>

0802ab92 <__cxa_guard_acquire>:
 802ab92:	6803      	ldr	r3, [r0, #0]
 802ab94:	07db      	lsls	r3, r3, #31
 802ab96:	d406      	bmi.n	802aba6 <__cxa_guard_acquire+0x14>
 802ab98:	7843      	ldrb	r3, [r0, #1]
 802ab9a:	b103      	cbz	r3, 802ab9e <__cxa_guard_acquire+0xc>
 802ab9c:	deff      	udf	#255	; 0xff
 802ab9e:	2301      	movs	r3, #1
 802aba0:	7043      	strb	r3, [r0, #1]
 802aba2:	4618      	mov	r0, r3
 802aba4:	4770      	bx	lr
 802aba6:	2000      	movs	r0, #0
 802aba8:	4770      	bx	lr

0802abaa <__cxa_guard_release>:
 802abaa:	2301      	movs	r3, #1
 802abac:	6003      	str	r3, [r0, #0]
 802abae:	4770      	bx	lr

0802abb0 <_ZdlPv>:
 802abb0:	f000 b88e 	b.w	802acd0 <free>

0802abb4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802abb4:	b508      	push	{r3, lr}
 802abb6:	4780      	blx	r0
 802abb8:	f000 f80d 	bl	802abd6 <abort>

0802abbc <_ZSt13get_terminatev>:
 802abbc:	4b02      	ldr	r3, [pc, #8]	; (802abc8 <_ZSt13get_terminatev+0xc>)
 802abbe:	6818      	ldr	r0, [r3, #0]
 802abc0:	f3bf 8f5b 	dmb	ish
 802abc4:	4770      	bx	lr
 802abc6:	bf00      	nop
 802abc8:	200000dc 	.word	0x200000dc

0802abcc <_ZSt9terminatev>:
 802abcc:	b508      	push	{r3, lr}
 802abce:	f7ff fff5 	bl	802abbc <_ZSt13get_terminatev>
 802abd2:	f7ff ffef 	bl	802abb4 <_ZN10__cxxabiv111__terminateEPFvvE>

0802abd6 <abort>:
 802abd6:	b508      	push	{r3, lr}
 802abd8:	2006      	movs	r0, #6
 802abda:	f000 fc3d 	bl	802b458 <raise>
 802abde:	2001      	movs	r0, #1
 802abe0:	f7d8 fedc 	bl	800399c <_exit>

0802abe4 <__assert_func>:
 802abe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802abe6:	461c      	mov	r4, r3
 802abe8:	4b09      	ldr	r3, [pc, #36]	; (802ac10 <__assert_func+0x2c>)
 802abea:	681b      	ldr	r3, [r3, #0]
 802abec:	4605      	mov	r5, r0
 802abee:	68d8      	ldr	r0, [r3, #12]
 802abf0:	b152      	cbz	r2, 802ac08 <__assert_func+0x24>
 802abf2:	4b08      	ldr	r3, [pc, #32]	; (802ac14 <__assert_func+0x30>)
 802abf4:	9100      	str	r1, [sp, #0]
 802abf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802abfa:	4907      	ldr	r1, [pc, #28]	; (802ac18 <__assert_func+0x34>)
 802abfc:	462b      	mov	r3, r5
 802abfe:	4622      	mov	r2, r4
 802ac00:	f000 f828 	bl	802ac54 <fiprintf>
 802ac04:	f7ff ffe7 	bl	802abd6 <abort>
 802ac08:	4b04      	ldr	r3, [pc, #16]	; (802ac1c <__assert_func+0x38>)
 802ac0a:	461a      	mov	r2, r3
 802ac0c:	e7f2      	b.n	802abf4 <__assert_func+0x10>
 802ac0e:	bf00      	nop
 802ac10:	200000e0 	.word	0x200000e0
 802ac14:	08030a94 	.word	0x08030a94
 802ac18:	08030aa1 	.word	0x08030aa1
 802ac1c:	08030acf 	.word	0x08030acf

0802ac20 <atexit>:
 802ac20:	2300      	movs	r3, #0
 802ac22:	4601      	mov	r1, r0
 802ac24:	461a      	mov	r2, r3
 802ac26:	4618      	mov	r0, r3
 802ac28:	f000 bcf2 	b.w	802b610 <__register_exitproc>

0802ac2c <__cxa_atexit>:
 802ac2c:	b510      	push	{r4, lr}
 802ac2e:	4c05      	ldr	r4, [pc, #20]	; (802ac44 <__cxa_atexit+0x18>)
 802ac30:	4613      	mov	r3, r2
 802ac32:	b12c      	cbz	r4, 802ac40 <__cxa_atexit+0x14>
 802ac34:	460a      	mov	r2, r1
 802ac36:	4601      	mov	r1, r0
 802ac38:	2002      	movs	r0, #2
 802ac3a:	f000 fce9 	bl	802b610 <__register_exitproc>
 802ac3e:	bd10      	pop	{r4, pc}
 802ac40:	4620      	mov	r0, r4
 802ac42:	e7fc      	b.n	802ac3e <__cxa_atexit+0x12>
 802ac44:	0802b611 	.word	0x0802b611

0802ac48 <__errno>:
 802ac48:	4b01      	ldr	r3, [pc, #4]	; (802ac50 <__errno+0x8>)
 802ac4a:	6818      	ldr	r0, [r3, #0]
 802ac4c:	4770      	bx	lr
 802ac4e:	bf00      	nop
 802ac50:	200000e0 	.word	0x200000e0

0802ac54 <fiprintf>:
 802ac54:	b40e      	push	{r1, r2, r3}
 802ac56:	b503      	push	{r0, r1, lr}
 802ac58:	4601      	mov	r1, r0
 802ac5a:	ab03      	add	r3, sp, #12
 802ac5c:	4805      	ldr	r0, [pc, #20]	; (802ac74 <fiprintf+0x20>)
 802ac5e:	f853 2b04 	ldr.w	r2, [r3], #4
 802ac62:	6800      	ldr	r0, [r0, #0]
 802ac64:	9301      	str	r3, [sp, #4]
 802ac66:	f000 f921 	bl	802aeac <_vfiprintf_r>
 802ac6a:	b002      	add	sp, #8
 802ac6c:	f85d eb04 	ldr.w	lr, [sp], #4
 802ac70:	b003      	add	sp, #12
 802ac72:	4770      	bx	lr
 802ac74:	200000e0 	.word	0x200000e0

0802ac78 <__libc_init_array>:
 802ac78:	b570      	push	{r4, r5, r6, lr}
 802ac7a:	4e0d      	ldr	r6, [pc, #52]	; (802acb0 <__libc_init_array+0x38>)
 802ac7c:	4c0d      	ldr	r4, [pc, #52]	; (802acb4 <__libc_init_array+0x3c>)
 802ac7e:	1ba4      	subs	r4, r4, r6
 802ac80:	10a4      	asrs	r4, r4, #2
 802ac82:	2500      	movs	r5, #0
 802ac84:	42a5      	cmp	r5, r4
 802ac86:	d109      	bne.n	802ac9c <__libc_init_array+0x24>
 802ac88:	4e0b      	ldr	r6, [pc, #44]	; (802acb8 <__libc_init_array+0x40>)
 802ac8a:	4c0c      	ldr	r4, [pc, #48]	; (802acbc <__libc_init_array+0x44>)
 802ac8c:	f000 ffb0 	bl	802bbf0 <_init>
 802ac90:	1ba4      	subs	r4, r4, r6
 802ac92:	10a4      	asrs	r4, r4, #2
 802ac94:	2500      	movs	r5, #0
 802ac96:	42a5      	cmp	r5, r4
 802ac98:	d105      	bne.n	802aca6 <__libc_init_array+0x2e>
 802ac9a:	bd70      	pop	{r4, r5, r6, pc}
 802ac9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802aca0:	4798      	blx	r3
 802aca2:	3501      	adds	r5, #1
 802aca4:	e7ee      	b.n	802ac84 <__libc_init_array+0xc>
 802aca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802acaa:	4798      	blx	r3
 802acac:	3501      	adds	r5, #1
 802acae:	e7f2      	b.n	802ac96 <__libc_init_array+0x1e>
 802acb0:	0806adfc 	.word	0x0806adfc
 802acb4:	0806adfc 	.word	0x0806adfc
 802acb8:	0806adfc 	.word	0x0806adfc
 802acbc:	0806ae10 	.word	0x0806ae10

0802acc0 <malloc>:
 802acc0:	4b02      	ldr	r3, [pc, #8]	; (802accc <malloc+0xc>)
 802acc2:	4601      	mov	r1, r0
 802acc4:	6818      	ldr	r0, [r3, #0]
 802acc6:	f000 b86d 	b.w	802ada4 <_malloc_r>
 802acca:	bf00      	nop
 802accc:	200000e0 	.word	0x200000e0

0802acd0 <free>:
 802acd0:	4b02      	ldr	r3, [pc, #8]	; (802acdc <free+0xc>)
 802acd2:	4601      	mov	r1, r0
 802acd4:	6818      	ldr	r0, [r3, #0]
 802acd6:	f000 b817 	b.w	802ad08 <_free_r>
 802acda:	bf00      	nop
 802acdc:	200000e0 	.word	0x200000e0

0802ace0 <memcpy>:
 802ace0:	b510      	push	{r4, lr}
 802ace2:	1e43      	subs	r3, r0, #1
 802ace4:	440a      	add	r2, r1
 802ace6:	4291      	cmp	r1, r2
 802ace8:	d100      	bne.n	802acec <memcpy+0xc>
 802acea:	bd10      	pop	{r4, pc}
 802acec:	f811 4b01 	ldrb.w	r4, [r1], #1
 802acf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 802acf4:	e7f7      	b.n	802ace6 <memcpy+0x6>

0802acf6 <memset>:
 802acf6:	4402      	add	r2, r0
 802acf8:	4603      	mov	r3, r0
 802acfa:	4293      	cmp	r3, r2
 802acfc:	d100      	bne.n	802ad00 <memset+0xa>
 802acfe:	4770      	bx	lr
 802ad00:	f803 1b01 	strb.w	r1, [r3], #1
 802ad04:	e7f9      	b.n	802acfa <memset+0x4>
	...

0802ad08 <_free_r>:
 802ad08:	b538      	push	{r3, r4, r5, lr}
 802ad0a:	4605      	mov	r5, r0
 802ad0c:	2900      	cmp	r1, #0
 802ad0e:	d045      	beq.n	802ad9c <_free_r+0x94>
 802ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ad14:	1f0c      	subs	r4, r1, #4
 802ad16:	2b00      	cmp	r3, #0
 802ad18:	bfb8      	it	lt
 802ad1a:	18e4      	addlt	r4, r4, r3
 802ad1c:	f000 feba 	bl	802ba94 <__malloc_lock>
 802ad20:	4a1f      	ldr	r2, [pc, #124]	; (802ada0 <_free_r+0x98>)
 802ad22:	6813      	ldr	r3, [r2, #0]
 802ad24:	4610      	mov	r0, r2
 802ad26:	b933      	cbnz	r3, 802ad36 <_free_r+0x2e>
 802ad28:	6063      	str	r3, [r4, #4]
 802ad2a:	6014      	str	r4, [r2, #0]
 802ad2c:	4628      	mov	r0, r5
 802ad2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ad32:	f000 beb0 	b.w	802ba96 <__malloc_unlock>
 802ad36:	42a3      	cmp	r3, r4
 802ad38:	d90c      	bls.n	802ad54 <_free_r+0x4c>
 802ad3a:	6821      	ldr	r1, [r4, #0]
 802ad3c:	1862      	adds	r2, r4, r1
 802ad3e:	4293      	cmp	r3, r2
 802ad40:	bf04      	itt	eq
 802ad42:	681a      	ldreq	r2, [r3, #0]
 802ad44:	685b      	ldreq	r3, [r3, #4]
 802ad46:	6063      	str	r3, [r4, #4]
 802ad48:	bf04      	itt	eq
 802ad4a:	1852      	addeq	r2, r2, r1
 802ad4c:	6022      	streq	r2, [r4, #0]
 802ad4e:	6004      	str	r4, [r0, #0]
 802ad50:	e7ec      	b.n	802ad2c <_free_r+0x24>
 802ad52:	4613      	mov	r3, r2
 802ad54:	685a      	ldr	r2, [r3, #4]
 802ad56:	b10a      	cbz	r2, 802ad5c <_free_r+0x54>
 802ad58:	42a2      	cmp	r2, r4
 802ad5a:	d9fa      	bls.n	802ad52 <_free_r+0x4a>
 802ad5c:	6819      	ldr	r1, [r3, #0]
 802ad5e:	1858      	adds	r0, r3, r1
 802ad60:	42a0      	cmp	r0, r4
 802ad62:	d10b      	bne.n	802ad7c <_free_r+0x74>
 802ad64:	6820      	ldr	r0, [r4, #0]
 802ad66:	4401      	add	r1, r0
 802ad68:	1858      	adds	r0, r3, r1
 802ad6a:	4282      	cmp	r2, r0
 802ad6c:	6019      	str	r1, [r3, #0]
 802ad6e:	d1dd      	bne.n	802ad2c <_free_r+0x24>
 802ad70:	6810      	ldr	r0, [r2, #0]
 802ad72:	6852      	ldr	r2, [r2, #4]
 802ad74:	605a      	str	r2, [r3, #4]
 802ad76:	4401      	add	r1, r0
 802ad78:	6019      	str	r1, [r3, #0]
 802ad7a:	e7d7      	b.n	802ad2c <_free_r+0x24>
 802ad7c:	d902      	bls.n	802ad84 <_free_r+0x7c>
 802ad7e:	230c      	movs	r3, #12
 802ad80:	602b      	str	r3, [r5, #0]
 802ad82:	e7d3      	b.n	802ad2c <_free_r+0x24>
 802ad84:	6820      	ldr	r0, [r4, #0]
 802ad86:	1821      	adds	r1, r4, r0
 802ad88:	428a      	cmp	r2, r1
 802ad8a:	bf04      	itt	eq
 802ad8c:	6811      	ldreq	r1, [r2, #0]
 802ad8e:	6852      	ldreq	r2, [r2, #4]
 802ad90:	6062      	str	r2, [r4, #4]
 802ad92:	bf04      	itt	eq
 802ad94:	1809      	addeq	r1, r1, r0
 802ad96:	6021      	streq	r1, [r4, #0]
 802ad98:	605c      	str	r4, [r3, #4]
 802ad9a:	e7c7      	b.n	802ad2c <_free_r+0x24>
 802ad9c:	bd38      	pop	{r3, r4, r5, pc}
 802ad9e:	bf00      	nop
 802ada0:	2000c10c 	.word	0x2000c10c

0802ada4 <_malloc_r>:
 802ada4:	b570      	push	{r4, r5, r6, lr}
 802ada6:	1ccd      	adds	r5, r1, #3
 802ada8:	f025 0503 	bic.w	r5, r5, #3
 802adac:	3508      	adds	r5, #8
 802adae:	2d0c      	cmp	r5, #12
 802adb0:	bf38      	it	cc
 802adb2:	250c      	movcc	r5, #12
 802adb4:	2d00      	cmp	r5, #0
 802adb6:	4606      	mov	r6, r0
 802adb8:	db01      	blt.n	802adbe <_malloc_r+0x1a>
 802adba:	42a9      	cmp	r1, r5
 802adbc:	d903      	bls.n	802adc6 <_malloc_r+0x22>
 802adbe:	230c      	movs	r3, #12
 802adc0:	6033      	str	r3, [r6, #0]
 802adc2:	2000      	movs	r0, #0
 802adc4:	bd70      	pop	{r4, r5, r6, pc}
 802adc6:	f000 fe65 	bl	802ba94 <__malloc_lock>
 802adca:	4a21      	ldr	r2, [pc, #132]	; (802ae50 <_malloc_r+0xac>)
 802adcc:	6814      	ldr	r4, [r2, #0]
 802adce:	4621      	mov	r1, r4
 802add0:	b991      	cbnz	r1, 802adf8 <_malloc_r+0x54>
 802add2:	4c20      	ldr	r4, [pc, #128]	; (802ae54 <_malloc_r+0xb0>)
 802add4:	6823      	ldr	r3, [r4, #0]
 802add6:	b91b      	cbnz	r3, 802ade0 <_malloc_r+0x3c>
 802add8:	4630      	mov	r0, r6
 802adda:	f000 fb05 	bl	802b3e8 <_sbrk_r>
 802adde:	6020      	str	r0, [r4, #0]
 802ade0:	4629      	mov	r1, r5
 802ade2:	4630      	mov	r0, r6
 802ade4:	f000 fb00 	bl	802b3e8 <_sbrk_r>
 802ade8:	1c43      	adds	r3, r0, #1
 802adea:	d124      	bne.n	802ae36 <_malloc_r+0x92>
 802adec:	230c      	movs	r3, #12
 802adee:	6033      	str	r3, [r6, #0]
 802adf0:	4630      	mov	r0, r6
 802adf2:	f000 fe50 	bl	802ba96 <__malloc_unlock>
 802adf6:	e7e4      	b.n	802adc2 <_malloc_r+0x1e>
 802adf8:	680b      	ldr	r3, [r1, #0]
 802adfa:	1b5b      	subs	r3, r3, r5
 802adfc:	d418      	bmi.n	802ae30 <_malloc_r+0x8c>
 802adfe:	2b0b      	cmp	r3, #11
 802ae00:	d90f      	bls.n	802ae22 <_malloc_r+0x7e>
 802ae02:	600b      	str	r3, [r1, #0]
 802ae04:	50cd      	str	r5, [r1, r3]
 802ae06:	18cc      	adds	r4, r1, r3
 802ae08:	4630      	mov	r0, r6
 802ae0a:	f000 fe44 	bl	802ba96 <__malloc_unlock>
 802ae0e:	f104 000b 	add.w	r0, r4, #11
 802ae12:	1d23      	adds	r3, r4, #4
 802ae14:	f020 0007 	bic.w	r0, r0, #7
 802ae18:	1ac3      	subs	r3, r0, r3
 802ae1a:	d0d3      	beq.n	802adc4 <_malloc_r+0x20>
 802ae1c:	425a      	negs	r2, r3
 802ae1e:	50e2      	str	r2, [r4, r3]
 802ae20:	e7d0      	b.n	802adc4 <_malloc_r+0x20>
 802ae22:	428c      	cmp	r4, r1
 802ae24:	684b      	ldr	r3, [r1, #4]
 802ae26:	bf16      	itet	ne
 802ae28:	6063      	strne	r3, [r4, #4]
 802ae2a:	6013      	streq	r3, [r2, #0]
 802ae2c:	460c      	movne	r4, r1
 802ae2e:	e7eb      	b.n	802ae08 <_malloc_r+0x64>
 802ae30:	460c      	mov	r4, r1
 802ae32:	6849      	ldr	r1, [r1, #4]
 802ae34:	e7cc      	b.n	802add0 <_malloc_r+0x2c>
 802ae36:	1cc4      	adds	r4, r0, #3
 802ae38:	f024 0403 	bic.w	r4, r4, #3
 802ae3c:	42a0      	cmp	r0, r4
 802ae3e:	d005      	beq.n	802ae4c <_malloc_r+0xa8>
 802ae40:	1a21      	subs	r1, r4, r0
 802ae42:	4630      	mov	r0, r6
 802ae44:	f000 fad0 	bl	802b3e8 <_sbrk_r>
 802ae48:	3001      	adds	r0, #1
 802ae4a:	d0cf      	beq.n	802adec <_malloc_r+0x48>
 802ae4c:	6025      	str	r5, [r4, #0]
 802ae4e:	e7db      	b.n	802ae08 <_malloc_r+0x64>
 802ae50:	2000c10c 	.word	0x2000c10c
 802ae54:	2000c110 	.word	0x2000c110

0802ae58 <__sfputc_r>:
 802ae58:	6893      	ldr	r3, [r2, #8]
 802ae5a:	3b01      	subs	r3, #1
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	b410      	push	{r4}
 802ae60:	6093      	str	r3, [r2, #8]
 802ae62:	da08      	bge.n	802ae76 <__sfputc_r+0x1e>
 802ae64:	6994      	ldr	r4, [r2, #24]
 802ae66:	42a3      	cmp	r3, r4
 802ae68:	db01      	blt.n	802ae6e <__sfputc_r+0x16>
 802ae6a:	290a      	cmp	r1, #10
 802ae6c:	d103      	bne.n	802ae76 <__sfputc_r+0x1e>
 802ae6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ae72:	f000 bb0d 	b.w	802b490 <__swbuf_r>
 802ae76:	6813      	ldr	r3, [r2, #0]
 802ae78:	1c58      	adds	r0, r3, #1
 802ae7a:	6010      	str	r0, [r2, #0]
 802ae7c:	7019      	strb	r1, [r3, #0]
 802ae7e:	4608      	mov	r0, r1
 802ae80:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ae84:	4770      	bx	lr

0802ae86 <__sfputs_r>:
 802ae86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ae88:	4606      	mov	r6, r0
 802ae8a:	460f      	mov	r7, r1
 802ae8c:	4614      	mov	r4, r2
 802ae8e:	18d5      	adds	r5, r2, r3
 802ae90:	42ac      	cmp	r4, r5
 802ae92:	d101      	bne.n	802ae98 <__sfputs_r+0x12>
 802ae94:	2000      	movs	r0, #0
 802ae96:	e007      	b.n	802aea8 <__sfputs_r+0x22>
 802ae98:	463a      	mov	r2, r7
 802ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae9e:	4630      	mov	r0, r6
 802aea0:	f7ff ffda 	bl	802ae58 <__sfputc_r>
 802aea4:	1c43      	adds	r3, r0, #1
 802aea6:	d1f3      	bne.n	802ae90 <__sfputs_r+0xa>
 802aea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802aeac <_vfiprintf_r>:
 802aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aeb0:	460c      	mov	r4, r1
 802aeb2:	b09d      	sub	sp, #116	; 0x74
 802aeb4:	4617      	mov	r7, r2
 802aeb6:	461d      	mov	r5, r3
 802aeb8:	4606      	mov	r6, r0
 802aeba:	b118      	cbz	r0, 802aec4 <_vfiprintf_r+0x18>
 802aebc:	6983      	ldr	r3, [r0, #24]
 802aebe:	b90b      	cbnz	r3, 802aec4 <_vfiprintf_r+0x18>
 802aec0:	f000 fcfa 	bl	802b8b8 <__sinit>
 802aec4:	4b7c      	ldr	r3, [pc, #496]	; (802b0b8 <_vfiprintf_r+0x20c>)
 802aec6:	429c      	cmp	r4, r3
 802aec8:	d158      	bne.n	802af7c <_vfiprintf_r+0xd0>
 802aeca:	6874      	ldr	r4, [r6, #4]
 802aecc:	89a3      	ldrh	r3, [r4, #12]
 802aece:	0718      	lsls	r0, r3, #28
 802aed0:	d55e      	bpl.n	802af90 <_vfiprintf_r+0xe4>
 802aed2:	6923      	ldr	r3, [r4, #16]
 802aed4:	2b00      	cmp	r3, #0
 802aed6:	d05b      	beq.n	802af90 <_vfiprintf_r+0xe4>
 802aed8:	2300      	movs	r3, #0
 802aeda:	9309      	str	r3, [sp, #36]	; 0x24
 802aedc:	2320      	movs	r3, #32
 802aede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802aee2:	2330      	movs	r3, #48	; 0x30
 802aee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802aee8:	9503      	str	r5, [sp, #12]
 802aeea:	f04f 0b01 	mov.w	fp, #1
 802aeee:	46b8      	mov	r8, r7
 802aef0:	4645      	mov	r5, r8
 802aef2:	f815 3b01 	ldrb.w	r3, [r5], #1
 802aef6:	b10b      	cbz	r3, 802aefc <_vfiprintf_r+0x50>
 802aef8:	2b25      	cmp	r3, #37	; 0x25
 802aefa:	d154      	bne.n	802afa6 <_vfiprintf_r+0xfa>
 802aefc:	ebb8 0a07 	subs.w	sl, r8, r7
 802af00:	d00b      	beq.n	802af1a <_vfiprintf_r+0x6e>
 802af02:	4653      	mov	r3, sl
 802af04:	463a      	mov	r2, r7
 802af06:	4621      	mov	r1, r4
 802af08:	4630      	mov	r0, r6
 802af0a:	f7ff ffbc 	bl	802ae86 <__sfputs_r>
 802af0e:	3001      	adds	r0, #1
 802af10:	f000 80c2 	beq.w	802b098 <_vfiprintf_r+0x1ec>
 802af14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af16:	4453      	add	r3, sl
 802af18:	9309      	str	r3, [sp, #36]	; 0x24
 802af1a:	f898 3000 	ldrb.w	r3, [r8]
 802af1e:	2b00      	cmp	r3, #0
 802af20:	f000 80ba 	beq.w	802b098 <_vfiprintf_r+0x1ec>
 802af24:	2300      	movs	r3, #0
 802af26:	f04f 32ff 	mov.w	r2, #4294967295
 802af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802af2e:	9304      	str	r3, [sp, #16]
 802af30:	9307      	str	r3, [sp, #28]
 802af32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802af36:	931a      	str	r3, [sp, #104]	; 0x68
 802af38:	46a8      	mov	r8, r5
 802af3a:	2205      	movs	r2, #5
 802af3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 802af40:	485e      	ldr	r0, [pc, #376]	; (802b0bc <_vfiprintf_r+0x210>)
 802af42:	f7d5 f965 	bl	8000210 <memchr>
 802af46:	9b04      	ldr	r3, [sp, #16]
 802af48:	bb78      	cbnz	r0, 802afaa <_vfiprintf_r+0xfe>
 802af4a:	06d9      	lsls	r1, r3, #27
 802af4c:	bf44      	itt	mi
 802af4e:	2220      	movmi	r2, #32
 802af50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802af54:	071a      	lsls	r2, r3, #28
 802af56:	bf44      	itt	mi
 802af58:	222b      	movmi	r2, #43	; 0x2b
 802af5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802af5e:	782a      	ldrb	r2, [r5, #0]
 802af60:	2a2a      	cmp	r2, #42	; 0x2a
 802af62:	d02a      	beq.n	802afba <_vfiprintf_r+0x10e>
 802af64:	9a07      	ldr	r2, [sp, #28]
 802af66:	46a8      	mov	r8, r5
 802af68:	2000      	movs	r0, #0
 802af6a:	250a      	movs	r5, #10
 802af6c:	4641      	mov	r1, r8
 802af6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802af72:	3b30      	subs	r3, #48	; 0x30
 802af74:	2b09      	cmp	r3, #9
 802af76:	d969      	bls.n	802b04c <_vfiprintf_r+0x1a0>
 802af78:	b360      	cbz	r0, 802afd4 <_vfiprintf_r+0x128>
 802af7a:	e024      	b.n	802afc6 <_vfiprintf_r+0x11a>
 802af7c:	4b50      	ldr	r3, [pc, #320]	; (802b0c0 <_vfiprintf_r+0x214>)
 802af7e:	429c      	cmp	r4, r3
 802af80:	d101      	bne.n	802af86 <_vfiprintf_r+0xda>
 802af82:	68b4      	ldr	r4, [r6, #8]
 802af84:	e7a2      	b.n	802aecc <_vfiprintf_r+0x20>
 802af86:	4b4f      	ldr	r3, [pc, #316]	; (802b0c4 <_vfiprintf_r+0x218>)
 802af88:	429c      	cmp	r4, r3
 802af8a:	bf08      	it	eq
 802af8c:	68f4      	ldreq	r4, [r6, #12]
 802af8e:	e79d      	b.n	802aecc <_vfiprintf_r+0x20>
 802af90:	4621      	mov	r1, r4
 802af92:	4630      	mov	r0, r6
 802af94:	f000 face 	bl	802b534 <__swsetup_r>
 802af98:	2800      	cmp	r0, #0
 802af9a:	d09d      	beq.n	802aed8 <_vfiprintf_r+0x2c>
 802af9c:	f04f 30ff 	mov.w	r0, #4294967295
 802afa0:	b01d      	add	sp, #116	; 0x74
 802afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802afa6:	46a8      	mov	r8, r5
 802afa8:	e7a2      	b.n	802aef0 <_vfiprintf_r+0x44>
 802afaa:	4a44      	ldr	r2, [pc, #272]	; (802b0bc <_vfiprintf_r+0x210>)
 802afac:	1a80      	subs	r0, r0, r2
 802afae:	fa0b f000 	lsl.w	r0, fp, r0
 802afb2:	4318      	orrs	r0, r3
 802afb4:	9004      	str	r0, [sp, #16]
 802afb6:	4645      	mov	r5, r8
 802afb8:	e7be      	b.n	802af38 <_vfiprintf_r+0x8c>
 802afba:	9a03      	ldr	r2, [sp, #12]
 802afbc:	1d11      	adds	r1, r2, #4
 802afbe:	6812      	ldr	r2, [r2, #0]
 802afc0:	9103      	str	r1, [sp, #12]
 802afc2:	2a00      	cmp	r2, #0
 802afc4:	db01      	blt.n	802afca <_vfiprintf_r+0x11e>
 802afc6:	9207      	str	r2, [sp, #28]
 802afc8:	e004      	b.n	802afd4 <_vfiprintf_r+0x128>
 802afca:	4252      	negs	r2, r2
 802afcc:	f043 0302 	orr.w	r3, r3, #2
 802afd0:	9207      	str	r2, [sp, #28]
 802afd2:	9304      	str	r3, [sp, #16]
 802afd4:	f898 3000 	ldrb.w	r3, [r8]
 802afd8:	2b2e      	cmp	r3, #46	; 0x2e
 802afda:	d10e      	bne.n	802affa <_vfiprintf_r+0x14e>
 802afdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 802afe0:	2b2a      	cmp	r3, #42	; 0x2a
 802afe2:	d138      	bne.n	802b056 <_vfiprintf_r+0x1aa>
 802afe4:	9b03      	ldr	r3, [sp, #12]
 802afe6:	1d1a      	adds	r2, r3, #4
 802afe8:	681b      	ldr	r3, [r3, #0]
 802afea:	9203      	str	r2, [sp, #12]
 802afec:	2b00      	cmp	r3, #0
 802afee:	bfb8      	it	lt
 802aff0:	f04f 33ff 	movlt.w	r3, #4294967295
 802aff4:	f108 0802 	add.w	r8, r8, #2
 802aff8:	9305      	str	r3, [sp, #20]
 802affa:	4d33      	ldr	r5, [pc, #204]	; (802b0c8 <_vfiprintf_r+0x21c>)
 802affc:	f898 1000 	ldrb.w	r1, [r8]
 802b000:	2203      	movs	r2, #3
 802b002:	4628      	mov	r0, r5
 802b004:	f7d5 f904 	bl	8000210 <memchr>
 802b008:	b140      	cbz	r0, 802b01c <_vfiprintf_r+0x170>
 802b00a:	2340      	movs	r3, #64	; 0x40
 802b00c:	1b40      	subs	r0, r0, r5
 802b00e:	fa03 f000 	lsl.w	r0, r3, r0
 802b012:	9b04      	ldr	r3, [sp, #16]
 802b014:	4303      	orrs	r3, r0
 802b016:	f108 0801 	add.w	r8, r8, #1
 802b01a:	9304      	str	r3, [sp, #16]
 802b01c:	f898 1000 	ldrb.w	r1, [r8]
 802b020:	482a      	ldr	r0, [pc, #168]	; (802b0cc <_vfiprintf_r+0x220>)
 802b022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b026:	2206      	movs	r2, #6
 802b028:	f108 0701 	add.w	r7, r8, #1
 802b02c:	f7d5 f8f0 	bl	8000210 <memchr>
 802b030:	2800      	cmp	r0, #0
 802b032:	d037      	beq.n	802b0a4 <_vfiprintf_r+0x1f8>
 802b034:	4b26      	ldr	r3, [pc, #152]	; (802b0d0 <_vfiprintf_r+0x224>)
 802b036:	bb1b      	cbnz	r3, 802b080 <_vfiprintf_r+0x1d4>
 802b038:	9b03      	ldr	r3, [sp, #12]
 802b03a:	3307      	adds	r3, #7
 802b03c:	f023 0307 	bic.w	r3, r3, #7
 802b040:	3308      	adds	r3, #8
 802b042:	9303      	str	r3, [sp, #12]
 802b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b046:	444b      	add	r3, r9
 802b048:	9309      	str	r3, [sp, #36]	; 0x24
 802b04a:	e750      	b.n	802aeee <_vfiprintf_r+0x42>
 802b04c:	fb05 3202 	mla	r2, r5, r2, r3
 802b050:	2001      	movs	r0, #1
 802b052:	4688      	mov	r8, r1
 802b054:	e78a      	b.n	802af6c <_vfiprintf_r+0xc0>
 802b056:	2300      	movs	r3, #0
 802b058:	f108 0801 	add.w	r8, r8, #1
 802b05c:	9305      	str	r3, [sp, #20]
 802b05e:	4619      	mov	r1, r3
 802b060:	250a      	movs	r5, #10
 802b062:	4640      	mov	r0, r8
 802b064:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b068:	3a30      	subs	r2, #48	; 0x30
 802b06a:	2a09      	cmp	r2, #9
 802b06c:	d903      	bls.n	802b076 <_vfiprintf_r+0x1ca>
 802b06e:	2b00      	cmp	r3, #0
 802b070:	d0c3      	beq.n	802affa <_vfiprintf_r+0x14e>
 802b072:	9105      	str	r1, [sp, #20]
 802b074:	e7c1      	b.n	802affa <_vfiprintf_r+0x14e>
 802b076:	fb05 2101 	mla	r1, r5, r1, r2
 802b07a:	2301      	movs	r3, #1
 802b07c:	4680      	mov	r8, r0
 802b07e:	e7f0      	b.n	802b062 <_vfiprintf_r+0x1b6>
 802b080:	ab03      	add	r3, sp, #12
 802b082:	9300      	str	r3, [sp, #0]
 802b084:	4622      	mov	r2, r4
 802b086:	4b13      	ldr	r3, [pc, #76]	; (802b0d4 <_vfiprintf_r+0x228>)
 802b088:	a904      	add	r1, sp, #16
 802b08a:	4630      	mov	r0, r6
 802b08c:	f3af 8000 	nop.w
 802b090:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b094:	4681      	mov	r9, r0
 802b096:	d1d5      	bne.n	802b044 <_vfiprintf_r+0x198>
 802b098:	89a3      	ldrh	r3, [r4, #12]
 802b09a:	065b      	lsls	r3, r3, #25
 802b09c:	f53f af7e 	bmi.w	802af9c <_vfiprintf_r+0xf0>
 802b0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b0a2:	e77d      	b.n	802afa0 <_vfiprintf_r+0xf4>
 802b0a4:	ab03      	add	r3, sp, #12
 802b0a6:	9300      	str	r3, [sp, #0]
 802b0a8:	4622      	mov	r2, r4
 802b0aa:	4b0a      	ldr	r3, [pc, #40]	; (802b0d4 <_vfiprintf_r+0x228>)
 802b0ac:	a904      	add	r1, sp, #16
 802b0ae:	4630      	mov	r0, r6
 802b0b0:	f000 f888 	bl	802b1c4 <_printf_i>
 802b0b4:	e7ec      	b.n	802b090 <_vfiprintf_r+0x1e4>
 802b0b6:	bf00      	nop
 802b0b8:	08030b2c 	.word	0x08030b2c
 802b0bc:	08030ad4 	.word	0x08030ad4
 802b0c0:	08030b4c 	.word	0x08030b4c
 802b0c4:	08030b0c 	.word	0x08030b0c
 802b0c8:	08030ada 	.word	0x08030ada
 802b0cc:	08030ade 	.word	0x08030ade
 802b0d0:	00000000 	.word	0x00000000
 802b0d4:	0802ae87 	.word	0x0802ae87

0802b0d8 <_printf_common>:
 802b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b0dc:	4691      	mov	r9, r2
 802b0de:	461f      	mov	r7, r3
 802b0e0:	688a      	ldr	r2, [r1, #8]
 802b0e2:	690b      	ldr	r3, [r1, #16]
 802b0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b0e8:	4293      	cmp	r3, r2
 802b0ea:	bfb8      	it	lt
 802b0ec:	4613      	movlt	r3, r2
 802b0ee:	f8c9 3000 	str.w	r3, [r9]
 802b0f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b0f6:	4606      	mov	r6, r0
 802b0f8:	460c      	mov	r4, r1
 802b0fa:	b112      	cbz	r2, 802b102 <_printf_common+0x2a>
 802b0fc:	3301      	adds	r3, #1
 802b0fe:	f8c9 3000 	str.w	r3, [r9]
 802b102:	6823      	ldr	r3, [r4, #0]
 802b104:	0699      	lsls	r1, r3, #26
 802b106:	bf42      	ittt	mi
 802b108:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b10c:	3302      	addmi	r3, #2
 802b10e:	f8c9 3000 	strmi.w	r3, [r9]
 802b112:	6825      	ldr	r5, [r4, #0]
 802b114:	f015 0506 	ands.w	r5, r5, #6
 802b118:	d107      	bne.n	802b12a <_printf_common+0x52>
 802b11a:	f104 0a19 	add.w	sl, r4, #25
 802b11e:	68e3      	ldr	r3, [r4, #12]
 802b120:	f8d9 2000 	ldr.w	r2, [r9]
 802b124:	1a9b      	subs	r3, r3, r2
 802b126:	42ab      	cmp	r3, r5
 802b128:	dc28      	bgt.n	802b17c <_printf_common+0xa4>
 802b12a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b12e:	6822      	ldr	r2, [r4, #0]
 802b130:	3300      	adds	r3, #0
 802b132:	bf18      	it	ne
 802b134:	2301      	movne	r3, #1
 802b136:	0692      	lsls	r2, r2, #26
 802b138:	d42d      	bmi.n	802b196 <_printf_common+0xbe>
 802b13a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b13e:	4639      	mov	r1, r7
 802b140:	4630      	mov	r0, r6
 802b142:	47c0      	blx	r8
 802b144:	3001      	adds	r0, #1
 802b146:	d020      	beq.n	802b18a <_printf_common+0xb2>
 802b148:	6823      	ldr	r3, [r4, #0]
 802b14a:	68e5      	ldr	r5, [r4, #12]
 802b14c:	f8d9 2000 	ldr.w	r2, [r9]
 802b150:	f003 0306 	and.w	r3, r3, #6
 802b154:	2b04      	cmp	r3, #4
 802b156:	bf08      	it	eq
 802b158:	1aad      	subeq	r5, r5, r2
 802b15a:	68a3      	ldr	r3, [r4, #8]
 802b15c:	6922      	ldr	r2, [r4, #16]
 802b15e:	bf0c      	ite	eq
 802b160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b164:	2500      	movne	r5, #0
 802b166:	4293      	cmp	r3, r2
 802b168:	bfc4      	itt	gt
 802b16a:	1a9b      	subgt	r3, r3, r2
 802b16c:	18ed      	addgt	r5, r5, r3
 802b16e:	f04f 0900 	mov.w	r9, #0
 802b172:	341a      	adds	r4, #26
 802b174:	454d      	cmp	r5, r9
 802b176:	d11a      	bne.n	802b1ae <_printf_common+0xd6>
 802b178:	2000      	movs	r0, #0
 802b17a:	e008      	b.n	802b18e <_printf_common+0xb6>
 802b17c:	2301      	movs	r3, #1
 802b17e:	4652      	mov	r2, sl
 802b180:	4639      	mov	r1, r7
 802b182:	4630      	mov	r0, r6
 802b184:	47c0      	blx	r8
 802b186:	3001      	adds	r0, #1
 802b188:	d103      	bne.n	802b192 <_printf_common+0xba>
 802b18a:	f04f 30ff 	mov.w	r0, #4294967295
 802b18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b192:	3501      	adds	r5, #1
 802b194:	e7c3      	b.n	802b11e <_printf_common+0x46>
 802b196:	18e1      	adds	r1, r4, r3
 802b198:	1c5a      	adds	r2, r3, #1
 802b19a:	2030      	movs	r0, #48	; 0x30
 802b19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b1a0:	4422      	add	r2, r4
 802b1a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b1a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b1aa:	3302      	adds	r3, #2
 802b1ac:	e7c5      	b.n	802b13a <_printf_common+0x62>
 802b1ae:	2301      	movs	r3, #1
 802b1b0:	4622      	mov	r2, r4
 802b1b2:	4639      	mov	r1, r7
 802b1b4:	4630      	mov	r0, r6
 802b1b6:	47c0      	blx	r8
 802b1b8:	3001      	adds	r0, #1
 802b1ba:	d0e6      	beq.n	802b18a <_printf_common+0xb2>
 802b1bc:	f109 0901 	add.w	r9, r9, #1
 802b1c0:	e7d8      	b.n	802b174 <_printf_common+0x9c>
	...

0802b1c4 <_printf_i>:
 802b1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b1c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802b1cc:	460c      	mov	r4, r1
 802b1ce:	7e09      	ldrb	r1, [r1, #24]
 802b1d0:	b085      	sub	sp, #20
 802b1d2:	296e      	cmp	r1, #110	; 0x6e
 802b1d4:	4617      	mov	r7, r2
 802b1d6:	4606      	mov	r6, r0
 802b1d8:	4698      	mov	r8, r3
 802b1da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b1dc:	f000 80b3 	beq.w	802b346 <_printf_i+0x182>
 802b1e0:	d822      	bhi.n	802b228 <_printf_i+0x64>
 802b1e2:	2963      	cmp	r1, #99	; 0x63
 802b1e4:	d036      	beq.n	802b254 <_printf_i+0x90>
 802b1e6:	d80a      	bhi.n	802b1fe <_printf_i+0x3a>
 802b1e8:	2900      	cmp	r1, #0
 802b1ea:	f000 80b9 	beq.w	802b360 <_printf_i+0x19c>
 802b1ee:	2958      	cmp	r1, #88	; 0x58
 802b1f0:	f000 8083 	beq.w	802b2fa <_printf_i+0x136>
 802b1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b1f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802b1fc:	e032      	b.n	802b264 <_printf_i+0xa0>
 802b1fe:	2964      	cmp	r1, #100	; 0x64
 802b200:	d001      	beq.n	802b206 <_printf_i+0x42>
 802b202:	2969      	cmp	r1, #105	; 0x69
 802b204:	d1f6      	bne.n	802b1f4 <_printf_i+0x30>
 802b206:	6820      	ldr	r0, [r4, #0]
 802b208:	6813      	ldr	r3, [r2, #0]
 802b20a:	0605      	lsls	r5, r0, #24
 802b20c:	f103 0104 	add.w	r1, r3, #4
 802b210:	d52a      	bpl.n	802b268 <_printf_i+0xa4>
 802b212:	681b      	ldr	r3, [r3, #0]
 802b214:	6011      	str	r1, [r2, #0]
 802b216:	2b00      	cmp	r3, #0
 802b218:	da03      	bge.n	802b222 <_printf_i+0x5e>
 802b21a:	222d      	movs	r2, #45	; 0x2d
 802b21c:	425b      	negs	r3, r3
 802b21e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802b222:	486f      	ldr	r0, [pc, #444]	; (802b3e0 <_printf_i+0x21c>)
 802b224:	220a      	movs	r2, #10
 802b226:	e039      	b.n	802b29c <_printf_i+0xd8>
 802b228:	2973      	cmp	r1, #115	; 0x73
 802b22a:	f000 809d 	beq.w	802b368 <_printf_i+0x1a4>
 802b22e:	d808      	bhi.n	802b242 <_printf_i+0x7e>
 802b230:	296f      	cmp	r1, #111	; 0x6f
 802b232:	d020      	beq.n	802b276 <_printf_i+0xb2>
 802b234:	2970      	cmp	r1, #112	; 0x70
 802b236:	d1dd      	bne.n	802b1f4 <_printf_i+0x30>
 802b238:	6823      	ldr	r3, [r4, #0]
 802b23a:	f043 0320 	orr.w	r3, r3, #32
 802b23e:	6023      	str	r3, [r4, #0]
 802b240:	e003      	b.n	802b24a <_printf_i+0x86>
 802b242:	2975      	cmp	r1, #117	; 0x75
 802b244:	d017      	beq.n	802b276 <_printf_i+0xb2>
 802b246:	2978      	cmp	r1, #120	; 0x78
 802b248:	d1d4      	bne.n	802b1f4 <_printf_i+0x30>
 802b24a:	2378      	movs	r3, #120	; 0x78
 802b24c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b250:	4864      	ldr	r0, [pc, #400]	; (802b3e4 <_printf_i+0x220>)
 802b252:	e055      	b.n	802b300 <_printf_i+0x13c>
 802b254:	6813      	ldr	r3, [r2, #0]
 802b256:	1d19      	adds	r1, r3, #4
 802b258:	681b      	ldr	r3, [r3, #0]
 802b25a:	6011      	str	r1, [r2, #0]
 802b25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b264:	2301      	movs	r3, #1
 802b266:	e08c      	b.n	802b382 <_printf_i+0x1be>
 802b268:	681b      	ldr	r3, [r3, #0]
 802b26a:	6011      	str	r1, [r2, #0]
 802b26c:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b270:	bf18      	it	ne
 802b272:	b21b      	sxthne	r3, r3
 802b274:	e7cf      	b.n	802b216 <_printf_i+0x52>
 802b276:	6813      	ldr	r3, [r2, #0]
 802b278:	6825      	ldr	r5, [r4, #0]
 802b27a:	1d18      	adds	r0, r3, #4
 802b27c:	6010      	str	r0, [r2, #0]
 802b27e:	0628      	lsls	r0, r5, #24
 802b280:	d501      	bpl.n	802b286 <_printf_i+0xc2>
 802b282:	681b      	ldr	r3, [r3, #0]
 802b284:	e002      	b.n	802b28c <_printf_i+0xc8>
 802b286:	0668      	lsls	r0, r5, #25
 802b288:	d5fb      	bpl.n	802b282 <_printf_i+0xbe>
 802b28a:	881b      	ldrh	r3, [r3, #0]
 802b28c:	4854      	ldr	r0, [pc, #336]	; (802b3e0 <_printf_i+0x21c>)
 802b28e:	296f      	cmp	r1, #111	; 0x6f
 802b290:	bf14      	ite	ne
 802b292:	220a      	movne	r2, #10
 802b294:	2208      	moveq	r2, #8
 802b296:	2100      	movs	r1, #0
 802b298:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b29c:	6865      	ldr	r5, [r4, #4]
 802b29e:	60a5      	str	r5, [r4, #8]
 802b2a0:	2d00      	cmp	r5, #0
 802b2a2:	f2c0 8095 	blt.w	802b3d0 <_printf_i+0x20c>
 802b2a6:	6821      	ldr	r1, [r4, #0]
 802b2a8:	f021 0104 	bic.w	r1, r1, #4
 802b2ac:	6021      	str	r1, [r4, #0]
 802b2ae:	2b00      	cmp	r3, #0
 802b2b0:	d13d      	bne.n	802b32e <_printf_i+0x16a>
 802b2b2:	2d00      	cmp	r5, #0
 802b2b4:	f040 808e 	bne.w	802b3d4 <_printf_i+0x210>
 802b2b8:	4665      	mov	r5, ip
 802b2ba:	2a08      	cmp	r2, #8
 802b2bc:	d10b      	bne.n	802b2d6 <_printf_i+0x112>
 802b2be:	6823      	ldr	r3, [r4, #0]
 802b2c0:	07db      	lsls	r3, r3, #31
 802b2c2:	d508      	bpl.n	802b2d6 <_printf_i+0x112>
 802b2c4:	6923      	ldr	r3, [r4, #16]
 802b2c6:	6862      	ldr	r2, [r4, #4]
 802b2c8:	429a      	cmp	r2, r3
 802b2ca:	bfde      	ittt	le
 802b2cc:	2330      	movle	r3, #48	; 0x30
 802b2ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b2d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b2d6:	ebac 0305 	sub.w	r3, ip, r5
 802b2da:	6123      	str	r3, [r4, #16]
 802b2dc:	f8cd 8000 	str.w	r8, [sp]
 802b2e0:	463b      	mov	r3, r7
 802b2e2:	aa03      	add	r2, sp, #12
 802b2e4:	4621      	mov	r1, r4
 802b2e6:	4630      	mov	r0, r6
 802b2e8:	f7ff fef6 	bl	802b0d8 <_printf_common>
 802b2ec:	3001      	adds	r0, #1
 802b2ee:	d14d      	bne.n	802b38c <_printf_i+0x1c8>
 802b2f0:	f04f 30ff 	mov.w	r0, #4294967295
 802b2f4:	b005      	add	sp, #20
 802b2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b2fa:	4839      	ldr	r0, [pc, #228]	; (802b3e0 <_printf_i+0x21c>)
 802b2fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802b300:	6813      	ldr	r3, [r2, #0]
 802b302:	6821      	ldr	r1, [r4, #0]
 802b304:	1d1d      	adds	r5, r3, #4
 802b306:	681b      	ldr	r3, [r3, #0]
 802b308:	6015      	str	r5, [r2, #0]
 802b30a:	060a      	lsls	r2, r1, #24
 802b30c:	d50b      	bpl.n	802b326 <_printf_i+0x162>
 802b30e:	07ca      	lsls	r2, r1, #31
 802b310:	bf44      	itt	mi
 802b312:	f041 0120 	orrmi.w	r1, r1, #32
 802b316:	6021      	strmi	r1, [r4, #0]
 802b318:	b91b      	cbnz	r3, 802b322 <_printf_i+0x15e>
 802b31a:	6822      	ldr	r2, [r4, #0]
 802b31c:	f022 0220 	bic.w	r2, r2, #32
 802b320:	6022      	str	r2, [r4, #0]
 802b322:	2210      	movs	r2, #16
 802b324:	e7b7      	b.n	802b296 <_printf_i+0xd2>
 802b326:	064d      	lsls	r5, r1, #25
 802b328:	bf48      	it	mi
 802b32a:	b29b      	uxthmi	r3, r3
 802b32c:	e7ef      	b.n	802b30e <_printf_i+0x14a>
 802b32e:	4665      	mov	r5, ip
 802b330:	fbb3 f1f2 	udiv	r1, r3, r2
 802b334:	fb02 3311 	mls	r3, r2, r1, r3
 802b338:	5cc3      	ldrb	r3, [r0, r3]
 802b33a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802b33e:	460b      	mov	r3, r1
 802b340:	2900      	cmp	r1, #0
 802b342:	d1f5      	bne.n	802b330 <_printf_i+0x16c>
 802b344:	e7b9      	b.n	802b2ba <_printf_i+0xf6>
 802b346:	6813      	ldr	r3, [r2, #0]
 802b348:	6825      	ldr	r5, [r4, #0]
 802b34a:	6961      	ldr	r1, [r4, #20]
 802b34c:	1d18      	adds	r0, r3, #4
 802b34e:	6010      	str	r0, [r2, #0]
 802b350:	0628      	lsls	r0, r5, #24
 802b352:	681b      	ldr	r3, [r3, #0]
 802b354:	d501      	bpl.n	802b35a <_printf_i+0x196>
 802b356:	6019      	str	r1, [r3, #0]
 802b358:	e002      	b.n	802b360 <_printf_i+0x19c>
 802b35a:	066a      	lsls	r2, r5, #25
 802b35c:	d5fb      	bpl.n	802b356 <_printf_i+0x192>
 802b35e:	8019      	strh	r1, [r3, #0]
 802b360:	2300      	movs	r3, #0
 802b362:	6123      	str	r3, [r4, #16]
 802b364:	4665      	mov	r5, ip
 802b366:	e7b9      	b.n	802b2dc <_printf_i+0x118>
 802b368:	6813      	ldr	r3, [r2, #0]
 802b36a:	1d19      	adds	r1, r3, #4
 802b36c:	6011      	str	r1, [r2, #0]
 802b36e:	681d      	ldr	r5, [r3, #0]
 802b370:	6862      	ldr	r2, [r4, #4]
 802b372:	2100      	movs	r1, #0
 802b374:	4628      	mov	r0, r5
 802b376:	f7d4 ff4b 	bl	8000210 <memchr>
 802b37a:	b108      	cbz	r0, 802b380 <_printf_i+0x1bc>
 802b37c:	1b40      	subs	r0, r0, r5
 802b37e:	6060      	str	r0, [r4, #4]
 802b380:	6863      	ldr	r3, [r4, #4]
 802b382:	6123      	str	r3, [r4, #16]
 802b384:	2300      	movs	r3, #0
 802b386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b38a:	e7a7      	b.n	802b2dc <_printf_i+0x118>
 802b38c:	6923      	ldr	r3, [r4, #16]
 802b38e:	462a      	mov	r2, r5
 802b390:	4639      	mov	r1, r7
 802b392:	4630      	mov	r0, r6
 802b394:	47c0      	blx	r8
 802b396:	3001      	adds	r0, #1
 802b398:	d0aa      	beq.n	802b2f0 <_printf_i+0x12c>
 802b39a:	6823      	ldr	r3, [r4, #0]
 802b39c:	079b      	lsls	r3, r3, #30
 802b39e:	d413      	bmi.n	802b3c8 <_printf_i+0x204>
 802b3a0:	68e0      	ldr	r0, [r4, #12]
 802b3a2:	9b03      	ldr	r3, [sp, #12]
 802b3a4:	4298      	cmp	r0, r3
 802b3a6:	bfb8      	it	lt
 802b3a8:	4618      	movlt	r0, r3
 802b3aa:	e7a3      	b.n	802b2f4 <_printf_i+0x130>
 802b3ac:	2301      	movs	r3, #1
 802b3ae:	464a      	mov	r2, r9
 802b3b0:	4639      	mov	r1, r7
 802b3b2:	4630      	mov	r0, r6
 802b3b4:	47c0      	blx	r8
 802b3b6:	3001      	adds	r0, #1
 802b3b8:	d09a      	beq.n	802b2f0 <_printf_i+0x12c>
 802b3ba:	3501      	adds	r5, #1
 802b3bc:	68e3      	ldr	r3, [r4, #12]
 802b3be:	9a03      	ldr	r2, [sp, #12]
 802b3c0:	1a9b      	subs	r3, r3, r2
 802b3c2:	42ab      	cmp	r3, r5
 802b3c4:	dcf2      	bgt.n	802b3ac <_printf_i+0x1e8>
 802b3c6:	e7eb      	b.n	802b3a0 <_printf_i+0x1dc>
 802b3c8:	2500      	movs	r5, #0
 802b3ca:	f104 0919 	add.w	r9, r4, #25
 802b3ce:	e7f5      	b.n	802b3bc <_printf_i+0x1f8>
 802b3d0:	2b00      	cmp	r3, #0
 802b3d2:	d1ac      	bne.n	802b32e <_printf_i+0x16a>
 802b3d4:	7803      	ldrb	r3, [r0, #0]
 802b3d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b3da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b3de:	e76c      	b.n	802b2ba <_printf_i+0xf6>
 802b3e0:	08030ae5 	.word	0x08030ae5
 802b3e4:	08030af6 	.word	0x08030af6

0802b3e8 <_sbrk_r>:
 802b3e8:	b538      	push	{r3, r4, r5, lr}
 802b3ea:	4c06      	ldr	r4, [pc, #24]	; (802b404 <_sbrk_r+0x1c>)
 802b3ec:	2300      	movs	r3, #0
 802b3ee:	4605      	mov	r5, r0
 802b3f0:	4608      	mov	r0, r1
 802b3f2:	6023      	str	r3, [r4, #0]
 802b3f4:	f7d8 fb4a 	bl	8003a8c <_sbrk>
 802b3f8:	1c43      	adds	r3, r0, #1
 802b3fa:	d102      	bne.n	802b402 <_sbrk_r+0x1a>
 802b3fc:	6823      	ldr	r3, [r4, #0]
 802b3fe:	b103      	cbz	r3, 802b402 <_sbrk_r+0x1a>
 802b400:	602b      	str	r3, [r5, #0]
 802b402:	bd38      	pop	{r3, r4, r5, pc}
 802b404:	2000ceb0 	.word	0x2000ceb0

0802b408 <_raise_r>:
 802b408:	291f      	cmp	r1, #31
 802b40a:	b538      	push	{r3, r4, r5, lr}
 802b40c:	4604      	mov	r4, r0
 802b40e:	460d      	mov	r5, r1
 802b410:	d904      	bls.n	802b41c <_raise_r+0x14>
 802b412:	2316      	movs	r3, #22
 802b414:	6003      	str	r3, [r0, #0]
 802b416:	f04f 30ff 	mov.w	r0, #4294967295
 802b41a:	bd38      	pop	{r3, r4, r5, pc}
 802b41c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b41e:	b112      	cbz	r2, 802b426 <_raise_r+0x1e>
 802b420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b424:	b94b      	cbnz	r3, 802b43a <_raise_r+0x32>
 802b426:	4620      	mov	r0, r4
 802b428:	f000 f830 	bl	802b48c <_getpid_r>
 802b42c:	462a      	mov	r2, r5
 802b42e:	4601      	mov	r1, r0
 802b430:	4620      	mov	r0, r4
 802b432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b436:	f000 b817 	b.w	802b468 <_kill_r>
 802b43a:	2b01      	cmp	r3, #1
 802b43c:	d00a      	beq.n	802b454 <_raise_r+0x4c>
 802b43e:	1c59      	adds	r1, r3, #1
 802b440:	d103      	bne.n	802b44a <_raise_r+0x42>
 802b442:	2316      	movs	r3, #22
 802b444:	6003      	str	r3, [r0, #0]
 802b446:	2001      	movs	r0, #1
 802b448:	e7e7      	b.n	802b41a <_raise_r+0x12>
 802b44a:	2400      	movs	r4, #0
 802b44c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b450:	4628      	mov	r0, r5
 802b452:	4798      	blx	r3
 802b454:	2000      	movs	r0, #0
 802b456:	e7e0      	b.n	802b41a <_raise_r+0x12>

0802b458 <raise>:
 802b458:	4b02      	ldr	r3, [pc, #8]	; (802b464 <raise+0xc>)
 802b45a:	4601      	mov	r1, r0
 802b45c:	6818      	ldr	r0, [r3, #0]
 802b45e:	f7ff bfd3 	b.w	802b408 <_raise_r>
 802b462:	bf00      	nop
 802b464:	200000e0 	.word	0x200000e0

0802b468 <_kill_r>:
 802b468:	b538      	push	{r3, r4, r5, lr}
 802b46a:	4c07      	ldr	r4, [pc, #28]	; (802b488 <_kill_r+0x20>)
 802b46c:	2300      	movs	r3, #0
 802b46e:	4605      	mov	r5, r0
 802b470:	4608      	mov	r0, r1
 802b472:	4611      	mov	r1, r2
 802b474:	6023      	str	r3, [r4, #0]
 802b476:	f7d8 fa81 	bl	800397c <_kill>
 802b47a:	1c43      	adds	r3, r0, #1
 802b47c:	d102      	bne.n	802b484 <_kill_r+0x1c>
 802b47e:	6823      	ldr	r3, [r4, #0]
 802b480:	b103      	cbz	r3, 802b484 <_kill_r+0x1c>
 802b482:	602b      	str	r3, [r5, #0]
 802b484:	bd38      	pop	{r3, r4, r5, pc}
 802b486:	bf00      	nop
 802b488:	2000ceb0 	.word	0x2000ceb0

0802b48c <_getpid_r>:
 802b48c:	f7d8 ba6e 	b.w	800396c <_getpid>

0802b490 <__swbuf_r>:
 802b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b492:	460e      	mov	r6, r1
 802b494:	4614      	mov	r4, r2
 802b496:	4605      	mov	r5, r0
 802b498:	b118      	cbz	r0, 802b4a2 <__swbuf_r+0x12>
 802b49a:	6983      	ldr	r3, [r0, #24]
 802b49c:	b90b      	cbnz	r3, 802b4a2 <__swbuf_r+0x12>
 802b49e:	f000 fa0b 	bl	802b8b8 <__sinit>
 802b4a2:	4b21      	ldr	r3, [pc, #132]	; (802b528 <__swbuf_r+0x98>)
 802b4a4:	429c      	cmp	r4, r3
 802b4a6:	d12a      	bne.n	802b4fe <__swbuf_r+0x6e>
 802b4a8:	686c      	ldr	r4, [r5, #4]
 802b4aa:	69a3      	ldr	r3, [r4, #24]
 802b4ac:	60a3      	str	r3, [r4, #8]
 802b4ae:	89a3      	ldrh	r3, [r4, #12]
 802b4b0:	071a      	lsls	r2, r3, #28
 802b4b2:	d52e      	bpl.n	802b512 <__swbuf_r+0x82>
 802b4b4:	6923      	ldr	r3, [r4, #16]
 802b4b6:	b363      	cbz	r3, 802b512 <__swbuf_r+0x82>
 802b4b8:	6923      	ldr	r3, [r4, #16]
 802b4ba:	6820      	ldr	r0, [r4, #0]
 802b4bc:	1ac0      	subs	r0, r0, r3
 802b4be:	6963      	ldr	r3, [r4, #20]
 802b4c0:	b2f6      	uxtb	r6, r6
 802b4c2:	4283      	cmp	r3, r0
 802b4c4:	4637      	mov	r7, r6
 802b4c6:	dc04      	bgt.n	802b4d2 <__swbuf_r+0x42>
 802b4c8:	4621      	mov	r1, r4
 802b4ca:	4628      	mov	r0, r5
 802b4cc:	f000 f98a 	bl	802b7e4 <_fflush_r>
 802b4d0:	bb28      	cbnz	r0, 802b51e <__swbuf_r+0x8e>
 802b4d2:	68a3      	ldr	r3, [r4, #8]
 802b4d4:	3b01      	subs	r3, #1
 802b4d6:	60a3      	str	r3, [r4, #8]
 802b4d8:	6823      	ldr	r3, [r4, #0]
 802b4da:	1c5a      	adds	r2, r3, #1
 802b4dc:	6022      	str	r2, [r4, #0]
 802b4de:	701e      	strb	r6, [r3, #0]
 802b4e0:	6963      	ldr	r3, [r4, #20]
 802b4e2:	3001      	adds	r0, #1
 802b4e4:	4283      	cmp	r3, r0
 802b4e6:	d004      	beq.n	802b4f2 <__swbuf_r+0x62>
 802b4e8:	89a3      	ldrh	r3, [r4, #12]
 802b4ea:	07db      	lsls	r3, r3, #31
 802b4ec:	d519      	bpl.n	802b522 <__swbuf_r+0x92>
 802b4ee:	2e0a      	cmp	r6, #10
 802b4f0:	d117      	bne.n	802b522 <__swbuf_r+0x92>
 802b4f2:	4621      	mov	r1, r4
 802b4f4:	4628      	mov	r0, r5
 802b4f6:	f000 f975 	bl	802b7e4 <_fflush_r>
 802b4fa:	b190      	cbz	r0, 802b522 <__swbuf_r+0x92>
 802b4fc:	e00f      	b.n	802b51e <__swbuf_r+0x8e>
 802b4fe:	4b0b      	ldr	r3, [pc, #44]	; (802b52c <__swbuf_r+0x9c>)
 802b500:	429c      	cmp	r4, r3
 802b502:	d101      	bne.n	802b508 <__swbuf_r+0x78>
 802b504:	68ac      	ldr	r4, [r5, #8]
 802b506:	e7d0      	b.n	802b4aa <__swbuf_r+0x1a>
 802b508:	4b09      	ldr	r3, [pc, #36]	; (802b530 <__swbuf_r+0xa0>)
 802b50a:	429c      	cmp	r4, r3
 802b50c:	bf08      	it	eq
 802b50e:	68ec      	ldreq	r4, [r5, #12]
 802b510:	e7cb      	b.n	802b4aa <__swbuf_r+0x1a>
 802b512:	4621      	mov	r1, r4
 802b514:	4628      	mov	r0, r5
 802b516:	f000 f80d 	bl	802b534 <__swsetup_r>
 802b51a:	2800      	cmp	r0, #0
 802b51c:	d0cc      	beq.n	802b4b8 <__swbuf_r+0x28>
 802b51e:	f04f 37ff 	mov.w	r7, #4294967295
 802b522:	4638      	mov	r0, r7
 802b524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b526:	bf00      	nop
 802b528:	08030b2c 	.word	0x08030b2c
 802b52c:	08030b4c 	.word	0x08030b4c
 802b530:	08030b0c 	.word	0x08030b0c

0802b534 <__swsetup_r>:
 802b534:	4b32      	ldr	r3, [pc, #200]	; (802b600 <__swsetup_r+0xcc>)
 802b536:	b570      	push	{r4, r5, r6, lr}
 802b538:	681d      	ldr	r5, [r3, #0]
 802b53a:	4606      	mov	r6, r0
 802b53c:	460c      	mov	r4, r1
 802b53e:	b125      	cbz	r5, 802b54a <__swsetup_r+0x16>
 802b540:	69ab      	ldr	r3, [r5, #24]
 802b542:	b913      	cbnz	r3, 802b54a <__swsetup_r+0x16>
 802b544:	4628      	mov	r0, r5
 802b546:	f000 f9b7 	bl	802b8b8 <__sinit>
 802b54a:	4b2e      	ldr	r3, [pc, #184]	; (802b604 <__swsetup_r+0xd0>)
 802b54c:	429c      	cmp	r4, r3
 802b54e:	d10f      	bne.n	802b570 <__swsetup_r+0x3c>
 802b550:	686c      	ldr	r4, [r5, #4]
 802b552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b556:	b29a      	uxth	r2, r3
 802b558:	0715      	lsls	r5, r2, #28
 802b55a:	d42c      	bmi.n	802b5b6 <__swsetup_r+0x82>
 802b55c:	06d0      	lsls	r0, r2, #27
 802b55e:	d411      	bmi.n	802b584 <__swsetup_r+0x50>
 802b560:	2209      	movs	r2, #9
 802b562:	6032      	str	r2, [r6, #0]
 802b564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b568:	81a3      	strh	r3, [r4, #12]
 802b56a:	f04f 30ff 	mov.w	r0, #4294967295
 802b56e:	e03e      	b.n	802b5ee <__swsetup_r+0xba>
 802b570:	4b25      	ldr	r3, [pc, #148]	; (802b608 <__swsetup_r+0xd4>)
 802b572:	429c      	cmp	r4, r3
 802b574:	d101      	bne.n	802b57a <__swsetup_r+0x46>
 802b576:	68ac      	ldr	r4, [r5, #8]
 802b578:	e7eb      	b.n	802b552 <__swsetup_r+0x1e>
 802b57a:	4b24      	ldr	r3, [pc, #144]	; (802b60c <__swsetup_r+0xd8>)
 802b57c:	429c      	cmp	r4, r3
 802b57e:	bf08      	it	eq
 802b580:	68ec      	ldreq	r4, [r5, #12]
 802b582:	e7e6      	b.n	802b552 <__swsetup_r+0x1e>
 802b584:	0751      	lsls	r1, r2, #29
 802b586:	d512      	bpl.n	802b5ae <__swsetup_r+0x7a>
 802b588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b58a:	b141      	cbz	r1, 802b59e <__swsetup_r+0x6a>
 802b58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b590:	4299      	cmp	r1, r3
 802b592:	d002      	beq.n	802b59a <__swsetup_r+0x66>
 802b594:	4630      	mov	r0, r6
 802b596:	f7ff fbb7 	bl	802ad08 <_free_r>
 802b59a:	2300      	movs	r3, #0
 802b59c:	6363      	str	r3, [r4, #52]	; 0x34
 802b59e:	89a3      	ldrh	r3, [r4, #12]
 802b5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b5a4:	81a3      	strh	r3, [r4, #12]
 802b5a6:	2300      	movs	r3, #0
 802b5a8:	6063      	str	r3, [r4, #4]
 802b5aa:	6923      	ldr	r3, [r4, #16]
 802b5ac:	6023      	str	r3, [r4, #0]
 802b5ae:	89a3      	ldrh	r3, [r4, #12]
 802b5b0:	f043 0308 	orr.w	r3, r3, #8
 802b5b4:	81a3      	strh	r3, [r4, #12]
 802b5b6:	6923      	ldr	r3, [r4, #16]
 802b5b8:	b94b      	cbnz	r3, 802b5ce <__swsetup_r+0x9a>
 802b5ba:	89a3      	ldrh	r3, [r4, #12]
 802b5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b5c4:	d003      	beq.n	802b5ce <__swsetup_r+0x9a>
 802b5c6:	4621      	mov	r1, r4
 802b5c8:	4630      	mov	r0, r6
 802b5ca:	f000 fa23 	bl	802ba14 <__smakebuf_r>
 802b5ce:	89a2      	ldrh	r2, [r4, #12]
 802b5d0:	f012 0301 	ands.w	r3, r2, #1
 802b5d4:	d00c      	beq.n	802b5f0 <__swsetup_r+0xbc>
 802b5d6:	2300      	movs	r3, #0
 802b5d8:	60a3      	str	r3, [r4, #8]
 802b5da:	6963      	ldr	r3, [r4, #20]
 802b5dc:	425b      	negs	r3, r3
 802b5de:	61a3      	str	r3, [r4, #24]
 802b5e0:	6923      	ldr	r3, [r4, #16]
 802b5e2:	b953      	cbnz	r3, 802b5fa <__swsetup_r+0xc6>
 802b5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b5e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802b5ec:	d1ba      	bne.n	802b564 <__swsetup_r+0x30>
 802b5ee:	bd70      	pop	{r4, r5, r6, pc}
 802b5f0:	0792      	lsls	r2, r2, #30
 802b5f2:	bf58      	it	pl
 802b5f4:	6963      	ldrpl	r3, [r4, #20]
 802b5f6:	60a3      	str	r3, [r4, #8]
 802b5f8:	e7f2      	b.n	802b5e0 <__swsetup_r+0xac>
 802b5fa:	2000      	movs	r0, #0
 802b5fc:	e7f7      	b.n	802b5ee <__swsetup_r+0xba>
 802b5fe:	bf00      	nop
 802b600:	200000e0 	.word	0x200000e0
 802b604:	08030b2c 	.word	0x08030b2c
 802b608:	08030b4c 	.word	0x08030b4c
 802b60c:	08030b0c 	.word	0x08030b0c

0802b610 <__register_exitproc>:
 802b610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b614:	4d2c      	ldr	r5, [pc, #176]	; (802b6c8 <__register_exitproc+0xb8>)
 802b616:	682c      	ldr	r4, [r5, #0]
 802b618:	4607      	mov	r7, r0
 802b61a:	460e      	mov	r6, r1
 802b61c:	4691      	mov	r9, r2
 802b61e:	4698      	mov	r8, r3
 802b620:	b934      	cbnz	r4, 802b630 <__register_exitproc+0x20>
 802b622:	4b2a      	ldr	r3, [pc, #168]	; (802b6cc <__register_exitproc+0xbc>)
 802b624:	4c2a      	ldr	r4, [pc, #168]	; (802b6d0 <__register_exitproc+0xc0>)
 802b626:	602c      	str	r4, [r5, #0]
 802b628:	b113      	cbz	r3, 802b630 <__register_exitproc+0x20>
 802b62a:	681b      	ldr	r3, [r3, #0]
 802b62c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b630:	6863      	ldr	r3, [r4, #4]
 802b632:	2b1f      	cmp	r3, #31
 802b634:	dd3d      	ble.n	802b6b2 <__register_exitproc+0xa2>
 802b636:	4b27      	ldr	r3, [pc, #156]	; (802b6d4 <__register_exitproc+0xc4>)
 802b638:	b91b      	cbnz	r3, 802b642 <__register_exitproc+0x32>
 802b63a:	f04f 30ff 	mov.w	r0, #4294967295
 802b63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b642:	208c      	movs	r0, #140	; 0x8c
 802b644:	f7ff fb3c 	bl	802acc0 <malloc>
 802b648:	4604      	mov	r4, r0
 802b64a:	2800      	cmp	r0, #0
 802b64c:	d0f5      	beq.n	802b63a <__register_exitproc+0x2a>
 802b64e:	2300      	movs	r3, #0
 802b650:	682a      	ldr	r2, [r5, #0]
 802b652:	6002      	str	r2, [r0, #0]
 802b654:	6043      	str	r3, [r0, #4]
 802b656:	6028      	str	r0, [r5, #0]
 802b658:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802b65c:	b30f      	cbz	r7, 802b6a2 <__register_exitproc+0x92>
 802b65e:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b662:	f7ff fb2d 	bl	802acc0 <malloc>
 802b666:	2800      	cmp	r0, #0
 802b668:	d0e7      	beq.n	802b63a <__register_exitproc+0x2a>
 802b66a:	2300      	movs	r3, #0
 802b66c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b670:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802b674:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b678:	6862      	ldr	r2, [r4, #4]
 802b67a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802b67e:	2301      	movs	r3, #1
 802b680:	4093      	lsls	r3, r2
 802b682:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802b686:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802b68a:	431a      	orrs	r2, r3
 802b68c:	2f02      	cmp	r7, #2
 802b68e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802b692:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802b696:	bf02      	ittt	eq
 802b698:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802b69c:	4313      	orreq	r3, r2
 802b69e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b6a2:	6863      	ldr	r3, [r4, #4]
 802b6a4:	1c5a      	adds	r2, r3, #1
 802b6a6:	3302      	adds	r3, #2
 802b6a8:	6062      	str	r2, [r4, #4]
 802b6aa:	2000      	movs	r0, #0
 802b6ac:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b6b0:	e7c5      	b.n	802b63e <__register_exitproc+0x2e>
 802b6b2:	2f00      	cmp	r7, #0
 802b6b4:	d0f5      	beq.n	802b6a2 <__register_exitproc+0x92>
 802b6b6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b6ba:	2800      	cmp	r0, #0
 802b6bc:	d1dc      	bne.n	802b678 <__register_exitproc+0x68>
 802b6be:	4b05      	ldr	r3, [pc, #20]	; (802b6d4 <__register_exitproc+0xc4>)
 802b6c0:	2b00      	cmp	r3, #0
 802b6c2:	d0ba      	beq.n	802b63a <__register_exitproc+0x2a>
 802b6c4:	e7cb      	b.n	802b65e <__register_exitproc+0x4e>
 802b6c6:	bf00      	nop
 802b6c8:	2000c2a8 	.word	0x2000c2a8
 802b6cc:	08030b08 	.word	0x08030b08
 802b6d0:	2000c21c 	.word	0x2000c21c
 802b6d4:	0802acc1 	.word	0x0802acc1

0802b6d8 <__sflush_r>:
 802b6d8:	898a      	ldrh	r2, [r1, #12]
 802b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b6de:	4605      	mov	r5, r0
 802b6e0:	0710      	lsls	r0, r2, #28
 802b6e2:	460c      	mov	r4, r1
 802b6e4:	d458      	bmi.n	802b798 <__sflush_r+0xc0>
 802b6e6:	684b      	ldr	r3, [r1, #4]
 802b6e8:	2b00      	cmp	r3, #0
 802b6ea:	dc05      	bgt.n	802b6f8 <__sflush_r+0x20>
 802b6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b6ee:	2b00      	cmp	r3, #0
 802b6f0:	dc02      	bgt.n	802b6f8 <__sflush_r+0x20>
 802b6f2:	2000      	movs	r0, #0
 802b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b6fa:	2e00      	cmp	r6, #0
 802b6fc:	d0f9      	beq.n	802b6f2 <__sflush_r+0x1a>
 802b6fe:	2300      	movs	r3, #0
 802b700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b704:	682f      	ldr	r7, [r5, #0]
 802b706:	6a21      	ldr	r1, [r4, #32]
 802b708:	602b      	str	r3, [r5, #0]
 802b70a:	d032      	beq.n	802b772 <__sflush_r+0x9a>
 802b70c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b70e:	89a3      	ldrh	r3, [r4, #12]
 802b710:	075a      	lsls	r2, r3, #29
 802b712:	d505      	bpl.n	802b720 <__sflush_r+0x48>
 802b714:	6863      	ldr	r3, [r4, #4]
 802b716:	1ac0      	subs	r0, r0, r3
 802b718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b71a:	b10b      	cbz	r3, 802b720 <__sflush_r+0x48>
 802b71c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b71e:	1ac0      	subs	r0, r0, r3
 802b720:	2300      	movs	r3, #0
 802b722:	4602      	mov	r2, r0
 802b724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b726:	6a21      	ldr	r1, [r4, #32]
 802b728:	4628      	mov	r0, r5
 802b72a:	47b0      	blx	r6
 802b72c:	1c43      	adds	r3, r0, #1
 802b72e:	89a3      	ldrh	r3, [r4, #12]
 802b730:	d106      	bne.n	802b740 <__sflush_r+0x68>
 802b732:	6829      	ldr	r1, [r5, #0]
 802b734:	291d      	cmp	r1, #29
 802b736:	d848      	bhi.n	802b7ca <__sflush_r+0xf2>
 802b738:	4a29      	ldr	r2, [pc, #164]	; (802b7e0 <__sflush_r+0x108>)
 802b73a:	40ca      	lsrs	r2, r1
 802b73c:	07d6      	lsls	r6, r2, #31
 802b73e:	d544      	bpl.n	802b7ca <__sflush_r+0xf2>
 802b740:	2200      	movs	r2, #0
 802b742:	6062      	str	r2, [r4, #4]
 802b744:	04d9      	lsls	r1, r3, #19
 802b746:	6922      	ldr	r2, [r4, #16]
 802b748:	6022      	str	r2, [r4, #0]
 802b74a:	d504      	bpl.n	802b756 <__sflush_r+0x7e>
 802b74c:	1c42      	adds	r2, r0, #1
 802b74e:	d101      	bne.n	802b754 <__sflush_r+0x7c>
 802b750:	682b      	ldr	r3, [r5, #0]
 802b752:	b903      	cbnz	r3, 802b756 <__sflush_r+0x7e>
 802b754:	6560      	str	r0, [r4, #84]	; 0x54
 802b756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b758:	602f      	str	r7, [r5, #0]
 802b75a:	2900      	cmp	r1, #0
 802b75c:	d0c9      	beq.n	802b6f2 <__sflush_r+0x1a>
 802b75e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b762:	4299      	cmp	r1, r3
 802b764:	d002      	beq.n	802b76c <__sflush_r+0x94>
 802b766:	4628      	mov	r0, r5
 802b768:	f7ff face 	bl	802ad08 <_free_r>
 802b76c:	2000      	movs	r0, #0
 802b76e:	6360      	str	r0, [r4, #52]	; 0x34
 802b770:	e7c0      	b.n	802b6f4 <__sflush_r+0x1c>
 802b772:	2301      	movs	r3, #1
 802b774:	4628      	mov	r0, r5
 802b776:	47b0      	blx	r6
 802b778:	1c41      	adds	r1, r0, #1
 802b77a:	d1c8      	bne.n	802b70e <__sflush_r+0x36>
 802b77c:	682b      	ldr	r3, [r5, #0]
 802b77e:	2b00      	cmp	r3, #0
 802b780:	d0c5      	beq.n	802b70e <__sflush_r+0x36>
 802b782:	2b1d      	cmp	r3, #29
 802b784:	d001      	beq.n	802b78a <__sflush_r+0xb2>
 802b786:	2b16      	cmp	r3, #22
 802b788:	d101      	bne.n	802b78e <__sflush_r+0xb6>
 802b78a:	602f      	str	r7, [r5, #0]
 802b78c:	e7b1      	b.n	802b6f2 <__sflush_r+0x1a>
 802b78e:	89a3      	ldrh	r3, [r4, #12]
 802b790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b794:	81a3      	strh	r3, [r4, #12]
 802b796:	e7ad      	b.n	802b6f4 <__sflush_r+0x1c>
 802b798:	690f      	ldr	r7, [r1, #16]
 802b79a:	2f00      	cmp	r7, #0
 802b79c:	d0a9      	beq.n	802b6f2 <__sflush_r+0x1a>
 802b79e:	0793      	lsls	r3, r2, #30
 802b7a0:	680e      	ldr	r6, [r1, #0]
 802b7a2:	bf08      	it	eq
 802b7a4:	694b      	ldreq	r3, [r1, #20]
 802b7a6:	600f      	str	r7, [r1, #0]
 802b7a8:	bf18      	it	ne
 802b7aa:	2300      	movne	r3, #0
 802b7ac:	eba6 0807 	sub.w	r8, r6, r7
 802b7b0:	608b      	str	r3, [r1, #8]
 802b7b2:	f1b8 0f00 	cmp.w	r8, #0
 802b7b6:	dd9c      	ble.n	802b6f2 <__sflush_r+0x1a>
 802b7b8:	4643      	mov	r3, r8
 802b7ba:	463a      	mov	r2, r7
 802b7bc:	6a21      	ldr	r1, [r4, #32]
 802b7be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b7c0:	4628      	mov	r0, r5
 802b7c2:	47b0      	blx	r6
 802b7c4:	2800      	cmp	r0, #0
 802b7c6:	dc06      	bgt.n	802b7d6 <__sflush_r+0xfe>
 802b7c8:	89a3      	ldrh	r3, [r4, #12]
 802b7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b7ce:	81a3      	strh	r3, [r4, #12]
 802b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 802b7d4:	e78e      	b.n	802b6f4 <__sflush_r+0x1c>
 802b7d6:	4407      	add	r7, r0
 802b7d8:	eba8 0800 	sub.w	r8, r8, r0
 802b7dc:	e7e9      	b.n	802b7b2 <__sflush_r+0xda>
 802b7de:	bf00      	nop
 802b7e0:	20400001 	.word	0x20400001

0802b7e4 <_fflush_r>:
 802b7e4:	b538      	push	{r3, r4, r5, lr}
 802b7e6:	690b      	ldr	r3, [r1, #16]
 802b7e8:	4605      	mov	r5, r0
 802b7ea:	460c      	mov	r4, r1
 802b7ec:	b1db      	cbz	r3, 802b826 <_fflush_r+0x42>
 802b7ee:	b118      	cbz	r0, 802b7f8 <_fflush_r+0x14>
 802b7f0:	6983      	ldr	r3, [r0, #24]
 802b7f2:	b90b      	cbnz	r3, 802b7f8 <_fflush_r+0x14>
 802b7f4:	f000 f860 	bl	802b8b8 <__sinit>
 802b7f8:	4b0c      	ldr	r3, [pc, #48]	; (802b82c <_fflush_r+0x48>)
 802b7fa:	429c      	cmp	r4, r3
 802b7fc:	d109      	bne.n	802b812 <_fflush_r+0x2e>
 802b7fe:	686c      	ldr	r4, [r5, #4]
 802b800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b804:	b17b      	cbz	r3, 802b826 <_fflush_r+0x42>
 802b806:	4621      	mov	r1, r4
 802b808:	4628      	mov	r0, r5
 802b80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b80e:	f7ff bf63 	b.w	802b6d8 <__sflush_r>
 802b812:	4b07      	ldr	r3, [pc, #28]	; (802b830 <_fflush_r+0x4c>)
 802b814:	429c      	cmp	r4, r3
 802b816:	d101      	bne.n	802b81c <_fflush_r+0x38>
 802b818:	68ac      	ldr	r4, [r5, #8]
 802b81a:	e7f1      	b.n	802b800 <_fflush_r+0x1c>
 802b81c:	4b05      	ldr	r3, [pc, #20]	; (802b834 <_fflush_r+0x50>)
 802b81e:	429c      	cmp	r4, r3
 802b820:	bf08      	it	eq
 802b822:	68ec      	ldreq	r4, [r5, #12]
 802b824:	e7ec      	b.n	802b800 <_fflush_r+0x1c>
 802b826:	2000      	movs	r0, #0
 802b828:	bd38      	pop	{r3, r4, r5, pc}
 802b82a:	bf00      	nop
 802b82c:	08030b2c 	.word	0x08030b2c
 802b830:	08030b4c 	.word	0x08030b4c
 802b834:	08030b0c 	.word	0x08030b0c

0802b838 <std>:
 802b838:	2300      	movs	r3, #0
 802b83a:	b510      	push	{r4, lr}
 802b83c:	4604      	mov	r4, r0
 802b83e:	e9c0 3300 	strd	r3, r3, [r0]
 802b842:	6083      	str	r3, [r0, #8]
 802b844:	8181      	strh	r1, [r0, #12]
 802b846:	6643      	str	r3, [r0, #100]	; 0x64
 802b848:	81c2      	strh	r2, [r0, #14]
 802b84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b84e:	6183      	str	r3, [r0, #24]
 802b850:	4619      	mov	r1, r3
 802b852:	2208      	movs	r2, #8
 802b854:	305c      	adds	r0, #92	; 0x5c
 802b856:	f7ff fa4e 	bl	802acf6 <memset>
 802b85a:	4b05      	ldr	r3, [pc, #20]	; (802b870 <std+0x38>)
 802b85c:	6263      	str	r3, [r4, #36]	; 0x24
 802b85e:	4b05      	ldr	r3, [pc, #20]	; (802b874 <std+0x3c>)
 802b860:	62a3      	str	r3, [r4, #40]	; 0x28
 802b862:	4b05      	ldr	r3, [pc, #20]	; (802b878 <std+0x40>)
 802b864:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b866:	4b05      	ldr	r3, [pc, #20]	; (802b87c <std+0x44>)
 802b868:	6224      	str	r4, [r4, #32]
 802b86a:	6323      	str	r3, [r4, #48]	; 0x30
 802b86c:	bd10      	pop	{r4, pc}
 802b86e:	bf00      	nop
 802b870:	0802ba99 	.word	0x0802ba99
 802b874:	0802babb 	.word	0x0802babb
 802b878:	0802baf3 	.word	0x0802baf3
 802b87c:	0802bb17 	.word	0x0802bb17

0802b880 <_cleanup_r>:
 802b880:	4901      	ldr	r1, [pc, #4]	; (802b888 <_cleanup_r+0x8>)
 802b882:	f000 b885 	b.w	802b990 <_fwalk_reent>
 802b886:	bf00      	nop
 802b888:	0802b7e5 	.word	0x0802b7e5

0802b88c <__sfmoreglue>:
 802b88c:	b570      	push	{r4, r5, r6, lr}
 802b88e:	1e4a      	subs	r2, r1, #1
 802b890:	2568      	movs	r5, #104	; 0x68
 802b892:	4355      	muls	r5, r2
 802b894:	460e      	mov	r6, r1
 802b896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b89a:	f7ff fa83 	bl	802ada4 <_malloc_r>
 802b89e:	4604      	mov	r4, r0
 802b8a0:	b140      	cbz	r0, 802b8b4 <__sfmoreglue+0x28>
 802b8a2:	2100      	movs	r1, #0
 802b8a4:	e9c0 1600 	strd	r1, r6, [r0]
 802b8a8:	300c      	adds	r0, #12
 802b8aa:	60a0      	str	r0, [r4, #8]
 802b8ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b8b0:	f7ff fa21 	bl	802acf6 <memset>
 802b8b4:	4620      	mov	r0, r4
 802b8b6:	bd70      	pop	{r4, r5, r6, pc}

0802b8b8 <__sinit>:
 802b8b8:	6983      	ldr	r3, [r0, #24]
 802b8ba:	b510      	push	{r4, lr}
 802b8bc:	4604      	mov	r4, r0
 802b8be:	bb33      	cbnz	r3, 802b90e <__sinit+0x56>
 802b8c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802b8c4:	6503      	str	r3, [r0, #80]	; 0x50
 802b8c6:	4b12      	ldr	r3, [pc, #72]	; (802b910 <__sinit+0x58>)
 802b8c8:	4a12      	ldr	r2, [pc, #72]	; (802b914 <__sinit+0x5c>)
 802b8ca:	681b      	ldr	r3, [r3, #0]
 802b8cc:	6282      	str	r2, [r0, #40]	; 0x28
 802b8ce:	4298      	cmp	r0, r3
 802b8d0:	bf04      	itt	eq
 802b8d2:	2301      	moveq	r3, #1
 802b8d4:	6183      	streq	r3, [r0, #24]
 802b8d6:	f000 f81f 	bl	802b918 <__sfp>
 802b8da:	6060      	str	r0, [r4, #4]
 802b8dc:	4620      	mov	r0, r4
 802b8de:	f000 f81b 	bl	802b918 <__sfp>
 802b8e2:	60a0      	str	r0, [r4, #8]
 802b8e4:	4620      	mov	r0, r4
 802b8e6:	f000 f817 	bl	802b918 <__sfp>
 802b8ea:	2200      	movs	r2, #0
 802b8ec:	60e0      	str	r0, [r4, #12]
 802b8ee:	2104      	movs	r1, #4
 802b8f0:	6860      	ldr	r0, [r4, #4]
 802b8f2:	f7ff ffa1 	bl	802b838 <std>
 802b8f6:	2201      	movs	r2, #1
 802b8f8:	2109      	movs	r1, #9
 802b8fa:	68a0      	ldr	r0, [r4, #8]
 802b8fc:	f7ff ff9c 	bl	802b838 <std>
 802b900:	2202      	movs	r2, #2
 802b902:	2112      	movs	r1, #18
 802b904:	68e0      	ldr	r0, [r4, #12]
 802b906:	f7ff ff97 	bl	802b838 <std>
 802b90a:	2301      	movs	r3, #1
 802b90c:	61a3      	str	r3, [r4, #24]
 802b90e:	bd10      	pop	{r4, pc}
 802b910:	08030ad0 	.word	0x08030ad0
 802b914:	0802b881 	.word	0x0802b881

0802b918 <__sfp>:
 802b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b91a:	4b1b      	ldr	r3, [pc, #108]	; (802b988 <__sfp+0x70>)
 802b91c:	681e      	ldr	r6, [r3, #0]
 802b91e:	69b3      	ldr	r3, [r6, #24]
 802b920:	4607      	mov	r7, r0
 802b922:	b913      	cbnz	r3, 802b92a <__sfp+0x12>
 802b924:	4630      	mov	r0, r6
 802b926:	f7ff ffc7 	bl	802b8b8 <__sinit>
 802b92a:	3648      	adds	r6, #72	; 0x48
 802b92c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b930:	3b01      	subs	r3, #1
 802b932:	d503      	bpl.n	802b93c <__sfp+0x24>
 802b934:	6833      	ldr	r3, [r6, #0]
 802b936:	b133      	cbz	r3, 802b946 <__sfp+0x2e>
 802b938:	6836      	ldr	r6, [r6, #0]
 802b93a:	e7f7      	b.n	802b92c <__sfp+0x14>
 802b93c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b940:	b16d      	cbz	r5, 802b95e <__sfp+0x46>
 802b942:	3468      	adds	r4, #104	; 0x68
 802b944:	e7f4      	b.n	802b930 <__sfp+0x18>
 802b946:	2104      	movs	r1, #4
 802b948:	4638      	mov	r0, r7
 802b94a:	f7ff ff9f 	bl	802b88c <__sfmoreglue>
 802b94e:	6030      	str	r0, [r6, #0]
 802b950:	2800      	cmp	r0, #0
 802b952:	d1f1      	bne.n	802b938 <__sfp+0x20>
 802b954:	230c      	movs	r3, #12
 802b956:	603b      	str	r3, [r7, #0]
 802b958:	4604      	mov	r4, r0
 802b95a:	4620      	mov	r0, r4
 802b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b95e:	4b0b      	ldr	r3, [pc, #44]	; (802b98c <__sfp+0x74>)
 802b960:	6665      	str	r5, [r4, #100]	; 0x64
 802b962:	e9c4 5500 	strd	r5, r5, [r4]
 802b966:	60a5      	str	r5, [r4, #8]
 802b968:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802b96c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802b970:	2208      	movs	r2, #8
 802b972:	4629      	mov	r1, r5
 802b974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b978:	f7ff f9bd 	bl	802acf6 <memset>
 802b97c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b984:	e7e9      	b.n	802b95a <__sfp+0x42>
 802b986:	bf00      	nop
 802b988:	08030ad0 	.word	0x08030ad0
 802b98c:	ffff0001 	.word	0xffff0001

0802b990 <_fwalk_reent>:
 802b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b994:	4680      	mov	r8, r0
 802b996:	4689      	mov	r9, r1
 802b998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b99c:	2600      	movs	r6, #0
 802b99e:	b914      	cbnz	r4, 802b9a6 <_fwalk_reent+0x16>
 802b9a0:	4630      	mov	r0, r6
 802b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b9a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802b9aa:	3f01      	subs	r7, #1
 802b9ac:	d501      	bpl.n	802b9b2 <_fwalk_reent+0x22>
 802b9ae:	6824      	ldr	r4, [r4, #0]
 802b9b0:	e7f5      	b.n	802b99e <_fwalk_reent+0xe>
 802b9b2:	89ab      	ldrh	r3, [r5, #12]
 802b9b4:	2b01      	cmp	r3, #1
 802b9b6:	d907      	bls.n	802b9c8 <_fwalk_reent+0x38>
 802b9b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b9bc:	3301      	adds	r3, #1
 802b9be:	d003      	beq.n	802b9c8 <_fwalk_reent+0x38>
 802b9c0:	4629      	mov	r1, r5
 802b9c2:	4640      	mov	r0, r8
 802b9c4:	47c8      	blx	r9
 802b9c6:	4306      	orrs	r6, r0
 802b9c8:	3568      	adds	r5, #104	; 0x68
 802b9ca:	e7ee      	b.n	802b9aa <_fwalk_reent+0x1a>

0802b9cc <__swhatbuf_r>:
 802b9cc:	b570      	push	{r4, r5, r6, lr}
 802b9ce:	460e      	mov	r6, r1
 802b9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b9d4:	2900      	cmp	r1, #0
 802b9d6:	b096      	sub	sp, #88	; 0x58
 802b9d8:	4614      	mov	r4, r2
 802b9da:	461d      	mov	r5, r3
 802b9dc:	da07      	bge.n	802b9ee <__swhatbuf_r+0x22>
 802b9de:	2300      	movs	r3, #0
 802b9e0:	602b      	str	r3, [r5, #0]
 802b9e2:	89b3      	ldrh	r3, [r6, #12]
 802b9e4:	061a      	lsls	r2, r3, #24
 802b9e6:	d410      	bmi.n	802ba0a <__swhatbuf_r+0x3e>
 802b9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b9ec:	e00e      	b.n	802ba0c <__swhatbuf_r+0x40>
 802b9ee:	466a      	mov	r2, sp
 802b9f0:	f000 f8b8 	bl	802bb64 <_fstat_r>
 802b9f4:	2800      	cmp	r0, #0
 802b9f6:	dbf2      	blt.n	802b9de <__swhatbuf_r+0x12>
 802b9f8:	9a01      	ldr	r2, [sp, #4]
 802b9fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b9fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ba02:	425a      	negs	r2, r3
 802ba04:	415a      	adcs	r2, r3
 802ba06:	602a      	str	r2, [r5, #0]
 802ba08:	e7ee      	b.n	802b9e8 <__swhatbuf_r+0x1c>
 802ba0a:	2340      	movs	r3, #64	; 0x40
 802ba0c:	2000      	movs	r0, #0
 802ba0e:	6023      	str	r3, [r4, #0]
 802ba10:	b016      	add	sp, #88	; 0x58
 802ba12:	bd70      	pop	{r4, r5, r6, pc}

0802ba14 <__smakebuf_r>:
 802ba14:	898b      	ldrh	r3, [r1, #12]
 802ba16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ba18:	079d      	lsls	r5, r3, #30
 802ba1a:	4606      	mov	r6, r0
 802ba1c:	460c      	mov	r4, r1
 802ba1e:	d507      	bpl.n	802ba30 <__smakebuf_r+0x1c>
 802ba20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ba24:	6023      	str	r3, [r4, #0]
 802ba26:	6123      	str	r3, [r4, #16]
 802ba28:	2301      	movs	r3, #1
 802ba2a:	6163      	str	r3, [r4, #20]
 802ba2c:	b002      	add	sp, #8
 802ba2e:	bd70      	pop	{r4, r5, r6, pc}
 802ba30:	ab01      	add	r3, sp, #4
 802ba32:	466a      	mov	r2, sp
 802ba34:	f7ff ffca 	bl	802b9cc <__swhatbuf_r>
 802ba38:	9900      	ldr	r1, [sp, #0]
 802ba3a:	4605      	mov	r5, r0
 802ba3c:	4630      	mov	r0, r6
 802ba3e:	f7ff f9b1 	bl	802ada4 <_malloc_r>
 802ba42:	b948      	cbnz	r0, 802ba58 <__smakebuf_r+0x44>
 802ba44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba48:	059a      	lsls	r2, r3, #22
 802ba4a:	d4ef      	bmi.n	802ba2c <__smakebuf_r+0x18>
 802ba4c:	f023 0303 	bic.w	r3, r3, #3
 802ba50:	f043 0302 	orr.w	r3, r3, #2
 802ba54:	81a3      	strh	r3, [r4, #12]
 802ba56:	e7e3      	b.n	802ba20 <__smakebuf_r+0xc>
 802ba58:	4b0d      	ldr	r3, [pc, #52]	; (802ba90 <__smakebuf_r+0x7c>)
 802ba5a:	62b3      	str	r3, [r6, #40]	; 0x28
 802ba5c:	89a3      	ldrh	r3, [r4, #12]
 802ba5e:	6020      	str	r0, [r4, #0]
 802ba60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ba64:	81a3      	strh	r3, [r4, #12]
 802ba66:	9b00      	ldr	r3, [sp, #0]
 802ba68:	6163      	str	r3, [r4, #20]
 802ba6a:	9b01      	ldr	r3, [sp, #4]
 802ba6c:	6120      	str	r0, [r4, #16]
 802ba6e:	b15b      	cbz	r3, 802ba88 <__smakebuf_r+0x74>
 802ba70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ba74:	4630      	mov	r0, r6
 802ba76:	f000 f887 	bl	802bb88 <_isatty_r>
 802ba7a:	b128      	cbz	r0, 802ba88 <__smakebuf_r+0x74>
 802ba7c:	89a3      	ldrh	r3, [r4, #12]
 802ba7e:	f023 0303 	bic.w	r3, r3, #3
 802ba82:	f043 0301 	orr.w	r3, r3, #1
 802ba86:	81a3      	strh	r3, [r4, #12]
 802ba88:	89a3      	ldrh	r3, [r4, #12]
 802ba8a:	431d      	orrs	r5, r3
 802ba8c:	81a5      	strh	r5, [r4, #12]
 802ba8e:	e7cd      	b.n	802ba2c <__smakebuf_r+0x18>
 802ba90:	0802b881 	.word	0x0802b881

0802ba94 <__malloc_lock>:
 802ba94:	4770      	bx	lr

0802ba96 <__malloc_unlock>:
 802ba96:	4770      	bx	lr

0802ba98 <__sread>:
 802ba98:	b510      	push	{r4, lr}
 802ba9a:	460c      	mov	r4, r1
 802ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802baa0:	f000 f894 	bl	802bbcc <_read_r>
 802baa4:	2800      	cmp	r0, #0
 802baa6:	bfab      	itete	ge
 802baa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802baaa:	89a3      	ldrhlt	r3, [r4, #12]
 802baac:	181b      	addge	r3, r3, r0
 802baae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802bab2:	bfac      	ite	ge
 802bab4:	6563      	strge	r3, [r4, #84]	; 0x54
 802bab6:	81a3      	strhlt	r3, [r4, #12]
 802bab8:	bd10      	pop	{r4, pc}

0802baba <__swrite>:
 802baba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802babe:	461f      	mov	r7, r3
 802bac0:	898b      	ldrh	r3, [r1, #12]
 802bac2:	05db      	lsls	r3, r3, #23
 802bac4:	4605      	mov	r5, r0
 802bac6:	460c      	mov	r4, r1
 802bac8:	4616      	mov	r6, r2
 802baca:	d505      	bpl.n	802bad8 <__swrite+0x1e>
 802bacc:	2302      	movs	r3, #2
 802bace:	2200      	movs	r2, #0
 802bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bad4:	f000 f868 	bl	802bba8 <_lseek_r>
 802bad8:	89a3      	ldrh	r3, [r4, #12]
 802bada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bae2:	81a3      	strh	r3, [r4, #12]
 802bae4:	4632      	mov	r2, r6
 802bae6:	463b      	mov	r3, r7
 802bae8:	4628      	mov	r0, r5
 802baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802baee:	f000 b817 	b.w	802bb20 <_write_r>

0802baf2 <__sseek>:
 802baf2:	b510      	push	{r4, lr}
 802baf4:	460c      	mov	r4, r1
 802baf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bafa:	f000 f855 	bl	802bba8 <_lseek_r>
 802bafe:	1c43      	adds	r3, r0, #1
 802bb00:	89a3      	ldrh	r3, [r4, #12]
 802bb02:	bf15      	itete	ne
 802bb04:	6560      	strne	r0, [r4, #84]	; 0x54
 802bb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802bb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802bb0e:	81a3      	strheq	r3, [r4, #12]
 802bb10:	bf18      	it	ne
 802bb12:	81a3      	strhne	r3, [r4, #12]
 802bb14:	bd10      	pop	{r4, pc}

0802bb16 <__sclose>:
 802bb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bb1a:	f000 b813 	b.w	802bb44 <_close_r>
	...

0802bb20 <_write_r>:
 802bb20:	b538      	push	{r3, r4, r5, lr}
 802bb22:	4c07      	ldr	r4, [pc, #28]	; (802bb40 <_write_r+0x20>)
 802bb24:	4605      	mov	r5, r0
 802bb26:	4608      	mov	r0, r1
 802bb28:	4611      	mov	r1, r2
 802bb2a:	2200      	movs	r2, #0
 802bb2c:	6022      	str	r2, [r4, #0]
 802bb2e:	461a      	mov	r2, r3
 802bb30:	f7d7 ff5b 	bl	80039ea <_write>
 802bb34:	1c43      	adds	r3, r0, #1
 802bb36:	d102      	bne.n	802bb3e <_write_r+0x1e>
 802bb38:	6823      	ldr	r3, [r4, #0]
 802bb3a:	b103      	cbz	r3, 802bb3e <_write_r+0x1e>
 802bb3c:	602b      	str	r3, [r5, #0]
 802bb3e:	bd38      	pop	{r3, r4, r5, pc}
 802bb40:	2000ceb0 	.word	0x2000ceb0

0802bb44 <_close_r>:
 802bb44:	b538      	push	{r3, r4, r5, lr}
 802bb46:	4c06      	ldr	r4, [pc, #24]	; (802bb60 <_close_r+0x1c>)
 802bb48:	2300      	movs	r3, #0
 802bb4a:	4605      	mov	r5, r0
 802bb4c:	4608      	mov	r0, r1
 802bb4e:	6023      	str	r3, [r4, #0]
 802bb50:	f7d7 ff67 	bl	8003a22 <_close>
 802bb54:	1c43      	adds	r3, r0, #1
 802bb56:	d102      	bne.n	802bb5e <_close_r+0x1a>
 802bb58:	6823      	ldr	r3, [r4, #0]
 802bb5a:	b103      	cbz	r3, 802bb5e <_close_r+0x1a>
 802bb5c:	602b      	str	r3, [r5, #0]
 802bb5e:	bd38      	pop	{r3, r4, r5, pc}
 802bb60:	2000ceb0 	.word	0x2000ceb0

0802bb64 <_fstat_r>:
 802bb64:	b538      	push	{r3, r4, r5, lr}
 802bb66:	4c07      	ldr	r4, [pc, #28]	; (802bb84 <_fstat_r+0x20>)
 802bb68:	2300      	movs	r3, #0
 802bb6a:	4605      	mov	r5, r0
 802bb6c:	4608      	mov	r0, r1
 802bb6e:	4611      	mov	r1, r2
 802bb70:	6023      	str	r3, [r4, #0]
 802bb72:	f7d7 ff62 	bl	8003a3a <_fstat>
 802bb76:	1c43      	adds	r3, r0, #1
 802bb78:	d102      	bne.n	802bb80 <_fstat_r+0x1c>
 802bb7a:	6823      	ldr	r3, [r4, #0]
 802bb7c:	b103      	cbz	r3, 802bb80 <_fstat_r+0x1c>
 802bb7e:	602b      	str	r3, [r5, #0]
 802bb80:	bd38      	pop	{r3, r4, r5, pc}
 802bb82:	bf00      	nop
 802bb84:	2000ceb0 	.word	0x2000ceb0

0802bb88 <_isatty_r>:
 802bb88:	b538      	push	{r3, r4, r5, lr}
 802bb8a:	4c06      	ldr	r4, [pc, #24]	; (802bba4 <_isatty_r+0x1c>)
 802bb8c:	2300      	movs	r3, #0
 802bb8e:	4605      	mov	r5, r0
 802bb90:	4608      	mov	r0, r1
 802bb92:	6023      	str	r3, [r4, #0]
 802bb94:	f7d7 ff61 	bl	8003a5a <_isatty>
 802bb98:	1c43      	adds	r3, r0, #1
 802bb9a:	d102      	bne.n	802bba2 <_isatty_r+0x1a>
 802bb9c:	6823      	ldr	r3, [r4, #0]
 802bb9e:	b103      	cbz	r3, 802bba2 <_isatty_r+0x1a>
 802bba0:	602b      	str	r3, [r5, #0]
 802bba2:	bd38      	pop	{r3, r4, r5, pc}
 802bba4:	2000ceb0 	.word	0x2000ceb0

0802bba8 <_lseek_r>:
 802bba8:	b538      	push	{r3, r4, r5, lr}
 802bbaa:	4c07      	ldr	r4, [pc, #28]	; (802bbc8 <_lseek_r+0x20>)
 802bbac:	4605      	mov	r5, r0
 802bbae:	4608      	mov	r0, r1
 802bbb0:	4611      	mov	r1, r2
 802bbb2:	2200      	movs	r2, #0
 802bbb4:	6022      	str	r2, [r4, #0]
 802bbb6:	461a      	mov	r2, r3
 802bbb8:	f7d7 ff5a 	bl	8003a70 <_lseek>
 802bbbc:	1c43      	adds	r3, r0, #1
 802bbbe:	d102      	bne.n	802bbc6 <_lseek_r+0x1e>
 802bbc0:	6823      	ldr	r3, [r4, #0]
 802bbc2:	b103      	cbz	r3, 802bbc6 <_lseek_r+0x1e>
 802bbc4:	602b      	str	r3, [r5, #0]
 802bbc6:	bd38      	pop	{r3, r4, r5, pc}
 802bbc8:	2000ceb0 	.word	0x2000ceb0

0802bbcc <_read_r>:
 802bbcc:	b538      	push	{r3, r4, r5, lr}
 802bbce:	4c07      	ldr	r4, [pc, #28]	; (802bbec <_read_r+0x20>)
 802bbd0:	4605      	mov	r5, r0
 802bbd2:	4608      	mov	r0, r1
 802bbd4:	4611      	mov	r1, r2
 802bbd6:	2200      	movs	r2, #0
 802bbd8:	6022      	str	r2, [r4, #0]
 802bbda:	461a      	mov	r2, r3
 802bbdc:	f7d7 fee8 	bl	80039b0 <_read>
 802bbe0:	1c43      	adds	r3, r0, #1
 802bbe2:	d102      	bne.n	802bbea <_read_r+0x1e>
 802bbe4:	6823      	ldr	r3, [r4, #0]
 802bbe6:	b103      	cbz	r3, 802bbea <_read_r+0x1e>
 802bbe8:	602b      	str	r3, [r5, #0]
 802bbea:	bd38      	pop	{r3, r4, r5, pc}
 802bbec:	2000ceb0 	.word	0x2000ceb0

0802bbf0 <_init>:
 802bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bbf2:	bf00      	nop
 802bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bbf6:	bc08      	pop	{r3}
 802bbf8:	469e      	mov	lr, r3
 802bbfa:	4770      	bx	lr

0802bbfc <_fini>:
 802bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bbfe:	bf00      	nop
 802bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bc02:	bc08      	pop	{r3}
 802bc04:	469e      	mov	lr, r3
 802bc06:	4770      	bx	lr
