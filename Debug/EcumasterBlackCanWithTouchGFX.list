
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055c4  0802c2e8  0802c2e8  0003c2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00004828  080318ac  080318ac  000418ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00051be8  080360d4  080360d4  000460d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000005f0  08087cbc  08087cbc  00097cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080882ac  080882ac  000a0140  2**0
                  CONTENTS
  7 .ARM          00000008  080882ac  080882ac  000982ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080882b4  080882b4  000a0140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080882b4  080882b4  000982b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080882c8  080882c8  000982c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  20000000  080882d0  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cd54  20000140  08088410  000a0140  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ce94  08088410  000ace94  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000a0140  2**0
                  CONTENTS, READONLY
 15 .debug_info   00071a24  00000000  00000000  000a0170  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00011238  00000000  00000000  00111b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000054e8  00000000  00000000  00122dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004db0  00000000  00000000  001282b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003de94  00000000  00000000  0012d068  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004d8df  00000000  00000000  0016aefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013a68a  00000000  00000000  001b87db  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002f2e65  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00016e48  00000000  00000000  002f2f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802c2d0 	.word	0x0802c2d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	0802c2d0 	.word	0x0802c2d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000015c 	.word	0x2000015c
 8000b3c:	200001b4 	.word	0x200001b4

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6200, 6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b73      	ldr	r3, [pc, #460]	; (8000d18 <SecondTask+0x1d8>)
 8000b4a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b6e      	ldr	r3, [pc, #440]	; (8000d1c <SecondTask+0x1dc>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c fb80 	bl	800d270 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00c f88f 	bl	800cc94 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b6a      	ldr	r3, [pc, #424]	; (8000d20 <SecondTask+0x1e0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8093 	beq.w	8000ca6 <SecondTask+0x166>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <SecondTask+0x1e4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b66      	ldr	r3, [pc, #408]	; (8000d24 <SecondTask+0x1e4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <SecondTask+0x1e4>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <SecondTask+0x1e8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <SecondTask+0x1e8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a5e      	ldr	r2, [pc, #376]	; (8000d28 <SecondTask+0x1e8>)
 8000bae:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bb0:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <SecondTask+0x1ec>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fcdf 	bl	8000578 <__aeabi_f2d>
 8000bba:	a351      	add	r3, pc, #324	; (adr r3, 8000d00 <SecondTask+0x1c0>)
 8000bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc0:	f7ff fda6 	bl	8000710 <__aeabi_dcmpge>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SecondTask+0x8e>
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <SecondTask+0x1f0>)
 8000bcc:	e010      	b.n	8000bf0 <SecondTask+0xb0>
 8000bce:	4b57      	ldr	r3, [pc, #348]	; (8000d2c <SecondTask+0x1ec>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcd0 	bl	8000578 <__aeabi_f2d>
 8000bd8:	a34b      	add	r3, pc, #300	; (adr r3, 8000d08 <SecondTask+0x1c8>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff fb6d 	bl	80002bc <__adddf3>
 8000be2:	4603      	mov	r3, r0
 8000be4:	460c      	mov	r4, r1
 8000be6:	4618      	mov	r0, r3
 8000be8:	4621      	mov	r1, r4
 8000bea:	f7ff fda5 	bl	8000738 <__aeabi_d2f>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a4e      	ldr	r2, [pc, #312]	; (8000d2c <SecondTask+0x1ec>)
 8000bf2:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <SecondTask+0x1f4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b9f      	cmp	r3, #159	; 0x9f
 8000bfa:	dc03      	bgt.n	8000c04 <SecondTask+0xc4>
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <SecondTask+0x1f4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3302      	adds	r3, #2
 8000c02:	e000      	b.n	8000c06 <SecondTask+0xc6>
 8000c04:	2301      	movs	r3, #1
 8000c06:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <SecondTask+0x1f4>)
 8000c08:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <SecondTask+0x1f8>)
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
 8000c10:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1c:	db01      	blt.n	8000c22 <SecondTask+0xe2>
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <SecondTask+0x1fc>)
 8000c20:	e010      	b.n	8000c44 <SecondTask+0x104>
 8000c22:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <SecondTask+0x1f8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fca6 	bl	8000578 <__aeabi_f2d>
 8000c2c:	a338      	add	r3, pc, #224	; (adr r3, 8000d10 <SecondTask+0x1d0>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fb43 	bl	80002bc <__adddf3>
 8000c36:	4603      	mov	r3, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f7ff fd7b 	bl	8000738 <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <SecondTask+0x1f8>)
 8000c46:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <SecondTask+0x200>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b63      	cmp	r3, #99	; 0x63
 8000c4e:	dc03      	bgt.n	8000c58 <SecondTask+0x118>
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <SecondTask+0x200>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3304      	adds	r3, #4
 8000c56:	e000      	b.n	8000c5a <SecondTask+0x11a>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <SecondTask+0x200>)
 8000c5c:	6013      	str	r3, [r2, #0]
			br_p = (br_p >= 130) ? 0: br_p + 4;
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <SecondTask+0x204>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b81      	cmp	r3, #129	; 0x81
 8000c64:	dc03      	bgt.n	8000c6e <SecondTask+0x12e>
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <SecondTask+0x204>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	e000      	b.n	8000c70 <SecondTask+0x130>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <SecondTask+0x204>)
 8000c72:	6013      	str	r3, [r2, #0]
			//tpms_id = (tpms_id >= 5) ? 1: tpms_id + 1;
			tpms_id = 3;
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <SecondTask+0x208>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	601a      	str	r2, [r3, #0]
			tpms_press = (tpms_press >= 100) ? 0: tpms_press + 4;
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <SecondTask+0x20c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b63      	cmp	r3, #99	; 0x63
 8000c80:	dc03      	bgt.n	8000c8a <SecondTask+0x14a>
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <SecondTask+0x20c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3304      	adds	r3, #4
 8000c88:	e000      	b.n	8000c8c <SecondTask+0x14c>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <SecondTask+0x20c>)
 8000c8e:	6013      	str	r3, [r2, #0]
			tpms_temp = (tpms_temp >= 100) ? 0: tpms_temp + 4;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <SecondTask+0x210>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b63      	cmp	r3, #99	; 0x63
 8000c96:	dc03      	bgt.n	8000ca0 <SecondTask+0x160>
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <SecondTask+0x210>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	e000      	b.n	8000ca2 <SecondTask+0x162>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <SecondTask+0x210>)
 8000ca4:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, lambda, oil_tmp, diff_tmp, oil_press, tps, br_p, tpms_id, tpms_press, tpms_temp};
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <SecondTask+0x1e4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <SecondTask+0x1e8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <SecondTask+0x1ec>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <SecondTask+0x1f4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <SecondTask+0x214>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <SecondTask+0x1f8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <SecondTask+0x200>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	623b      	str	r3, [r7, #32]
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <SecondTask+0x204>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <SecondTask+0x208>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <SecondTask+0x20c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <SecondTask+0x210>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
	    xQueueSend(messageQ, &dispVals,0);
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <SecondTask+0x218>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f107 0108 	add.w	r1, r7, #8
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f00c fabc 	bl	800d270 <xQueueGenericSend>
		osDelay(50);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f00b ffcb 	bl	800cc94 <osDelay>
	{
 8000cfe:	e73a      	b.n	8000b76 <SecondTask+0x36>
 8000d00:	66666666 	.word	0x66666666
 8000d04:	3ff66666 	.word	0x3ff66666
 8000d08:	9999999a 	.word	0x9999999a
 8000d0c:	3fa99999 	.word	0x3fa99999
 8000d10:	9999999a 	.word	0x9999999a
 8000d14:	3fb99999 	.word	0x3fb99999
 8000d18:	0802c2e8 	.word	0x0802c2e8
 8000d1c:	200087c0 	.word	0x200087c0
 8000d20:	0802ccc0 	.word	0x0802ccc0
 8000d24:	20000004 	.word	0x20000004
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	3f19999a 	.word	0x3f19999a
 8000d34:	200003c4 	.word	0x200003c4
 8000d38:	200003cc 	.word	0x200003cc
 8000d3c:	3dcccccd 	.word	0x3dcccccd
 8000d40:	200003d0 	.word	0x200003d0
 8000d44:	200003d4 	.word	0x200003d4
 8000d48:	200003d8 	.word	0x200003d8
 8000d4c:	200003dc 	.word	0x200003dc
 8000d50:	200003e0 	.word	0x200003e0
 8000d54:	200003c8 	.word	0x200003c8
 8000d58:	200087bc 	.word	0x200087bc

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f002 fd06 	bl	8003772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f85f 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f001 f9d9 	bl	8002120 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000d6e:	f000 f917 	bl	8000fa0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000d72:	f000 fb11 	bl	8001398 <MX_CRC_Init>
  MX_DCMI_Init();
 8000d76:	f000 fb31 	bl	80013dc <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000d7a:	f000 fb63 	bl	8001444 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d7e:	f001 f923 	bl	8001fc8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000d82:	f000 fb91 	bl	80014a8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000d86:	f000 fc11 	bl	80015ac <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000d8a:	f000 fc3b 	bl	8001604 <MX_RTC_Init>
  MX_SAI2_Init();
 8000d8e:	f000 fce1 	bl	8001754 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000d92:	f000 fd87 	bl	80018a4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000d96:	f000 fda5 	bl	80018e4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000d9a:	f000 fdd3 	bl	8001944 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d9e:	f000 fe0f 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000da2:	f000 feb9 	bl	8001b18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000da6:	f000 ff2d 	bl	8001c04 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000daa:	f000 ffa1 	bl	8001cf0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000dae:	f001 f815 	bl	8001ddc <MX_TIM8_Init>
  MX_TIM12_Init();
 8000db2:	f001 f865 	bl	8001e80 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000db6:	f001 f8a7 	bl	8001f08 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000dba:	f001 f8d5 	bl	8001f68 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000dbe:	f00b fc25 	bl	800c60c <MX_FATFS_Init>
  MX_CAN1_Init();
 8000dc2:	f000 f93f 	bl	8001044 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000dc6:	f00f f899 	bl	800fefc <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <main+0xbc>)
 8000dcc:	f107 041c 	add.w	r4, r7, #28
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00b ff09 	bl	800cbfc <osThreadCreate>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <main+0xc0>)
 8000dee:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <main+0xc4>)
 8000df2:	463c      	mov	r4, r7
 8000df4:	461d      	mov	r5, r3
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000e02:	463b      	mov	r3, r7
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00b fef8 	bl	800cbfc <osThreadCreate>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <main+0xc8>)
 8000e10:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e12:	f00b fed0 	bl	800cbb6 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <main+0xba>
 8000e18:	0802c320 	.word	0x0802c320
 8000e1c:	2000c90c 	.word	0x2000c90c
 8000e20:	0802c344 	.word	0x0802c344
 8000e24:	2000c848 	.word	0x2000c848

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b4      	sub	sp, #208	; 0xd0
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e32:	2230      	movs	r2, #48	; 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f02a facd 	bl	802b3d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2284      	movs	r2, #132	; 0x84
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f02a fabe 	bl	802b3d6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000e5a:	f005 fe8b 	bl	8006b74 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <SystemClock_Config+0x16c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <SystemClock_Config+0x16c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <SystemClock_Config+0x16c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e76:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <SystemClock_Config+0x170>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <SystemClock_Config+0x170>)
 8000e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <SystemClock_Config+0x170>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e8e:	2309      	movs	r3, #9
 8000e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb0:	2319      	movs	r3, #25
 8000eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000eb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 ff72 	bl	8006db8 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eda:	f001 fb55 	bl	8002588 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ede:	f005 fe59 	bl	8006b94 <HAL_PWREx_EnableOverDrive>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ee8:	f001 fb4e 	bl	8002588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f12:	2106      	movs	r1, #6
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 f9f3 	bl	8007300 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000f20:	f001 fb32 	bl	8002588 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <SystemClock_Config+0x174>)
 8000f26:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000f38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000f46:	2303      	movs	r3, #3
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fbc3 	bl	8007708 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x164>
  {
    Error_Handler();
 8000f88:	f001 fafe 	bl	8002588 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	37d0      	adds	r7, #208	; 0xd0
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	01b00868 	.word	0x01b00868

08000fa0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <MX_ADC3_Init+0x9c>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <MX_ADC3_Init+0xa0>)
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_ADC3_Init+0x98>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_ADC3_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_ADC3_Init+0x98>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_ADC3_Init+0x98>)
 8001002:	f002 fc05 	bl	8003810 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800100c:	f001 fabc 	bl	8002588 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001010:	2304      	movs	r3, #4
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_ADC3_Init+0x98>)
 8001022:	f002 fc39 	bl	8003898 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800102c:	f001 faac 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000c6b8 	.word	0x2000c6b8
 800103c:	40012200 	.word	0x40012200
 8001040:	0f000001 	.word	0x0f000001

08001044 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <MX_CAN1_Init+0xc8>)
 800104c:	4a30      	ldr	r2, [pc, #192]	; (8001110 <MX_CAN1_Init+0xcc>)
 800104e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <MX_CAN1_Init+0xc8>)
 8001052:	220a      	movs	r2, #10
 8001054:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MX_CAN1_Init+0xc8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <MX_CAN1_Init+0xc8>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_CAN1_Init+0xc8>)
 8001064:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001068:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <MX_CAN1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_CAN1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_CAN1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_CAN1_Init+0xc8>)
 800107e:	2200      	movs	r2, #0
 8001080:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_CAN1_Init+0xc8>)
 8001084:	2200      	movs	r2, #0
 8001086:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_CAN1_Init+0xc8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_CAN1_Init+0xc8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001094:	481d      	ldr	r0, [pc, #116]	; (800110c <MX_CAN1_Init+0xc8>)
 8001096:	f002 fe43 	bl	8003d20 <HAL_CAN_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010a0:	f001 fa72 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80010c8:	230e      	movs	r3, #14
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_CAN1_Init+0xc8>)
 80010d2:	f002 ff21 	bl	8003f18 <HAL_CAN_ConfigFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80010dc:	f001 fa54 	bl	8002588 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <MX_CAN1_Init+0xc8>)
 80010e2:	f002 fff9 	bl	80040d8 <HAL_CAN_Start>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80010ec:	f001 fa4c 	bl	8002588 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010f0:	2102      	movs	r1, #2
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_CAN1_Init+0xc8>)
 80010f4:	f003 f946 	bl	8004384 <HAL_CAN_ActivateNotification>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80010fe:	f001 fa43 	bl	8002588 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000c4c8 	.word	0x2000c4c8
 8001110:	40006400 	.word	0x40006400

08001114 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800111c:	4b8c      	ldr	r3, [pc, #560]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800111e:	4a8d      	ldr	r2, [pc, #564]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f003 f81c 	bl	8004160 <HAL_CAN_GetRxMessage>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800112e:	f001 fa2b 	bl	8002588 <Error_Handler>
  }

  /* Package one */
  /* Package one */
  if ((RxHeader.StdId == 0x180) && (RxHeader.IDE == CAN_ID_EXT) && (RxHeader.DLC == 8))
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800113a:	d11e      	bne.n	800117a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 800113c:	4b85      	ldr	r3, [pc, #532]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d11a      	bne.n	800117a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8001144:	4b83      	ldr	r3, [pc, #524]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	2b08      	cmp	r3, #8
 800114a:	d116      	bne.n	800117a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
     {
	  uint16_t lambda_in = (RxData[0] << 0) | (RxData[1] << 8);
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	83fb      	strh	r3, [r7, #30]

   	 lambda = (int)lambda_in * 0.0001f;
 8001160:	8bfb      	ldrh	r3, [r7, #30]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001358 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	4b7a      	ldr	r3, [pc, #488]	; (800135c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001174:	edc3 7a00 	vstr	s15, [r3]
     {
 8001178:	e0e6      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
     }
   else if ((RxHeader.StdId == 0x316) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f240 3216 	movw	r2, #790	; 0x316
 8001182:	4293      	cmp	r3, r2
 8001184:	d121      	bne.n	80011ca <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d11d      	bne.n	80011ca <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 800118e:	4b71      	ldr	r3, [pc, #452]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	2b08      	cmp	r3, #8
 8001194:	d119      	bne.n	80011ca <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
   {
 	 uint16_t rpm_in = (RxData[2] << 0) | (RxData[3] << 8);
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b6c      	ldr	r3, [pc, #432]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800119e:	78db      	ldrb	r3, [r3, #3]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	83bb      	strh	r3, [r7, #28]

 	 rpm = (int)rpm_in * 0.15625f;
 80011aa:	8bbb      	ldrh	r3, [r7, #28]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	eeb4 7a04 	vmov.f32	s14, #68	; 0x3e200000  0.1562500
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 2a90 	vmov	r2, s15
 80011c4:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80011c6:	601a      	str	r2, [r3, #0]
   {
 80011c8:	e0be      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
   }
   else if ((RxHeader.StdId == 0x329) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f240 3229 	movw	r2, #809	; 0x329
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d130      	bne.n	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12c      	bne.n	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d128      	bne.n	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
   {
 	 uint8_t clt_in = RxData[1];
 80011e6:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	76fb      	strb	r3, [r7, #27]
 	 uint8_t tps_in = RxData[5];
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	76bb      	strb	r3, [r7, #26]

 	 clt = ((int)clt_in) * 0.75f - 48;
 80011f2:	7efb      	ldrb	r3, [r7, #27]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800120c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001210:	ee17 2a90 	vmov	r2, s15
 8001214:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001216:	601a      	str	r2, [r3, #0]
 	 tps = (int)(((float)tps_in) * 0.45955859375f);
 8001218:	7ebb      	ldrb	r3, [r7, #26]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122e:	ee17 2a90 	vmov	r2, s15
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001234:	601a      	str	r2, [r3, #0]
   {
 8001236:	e087      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
   } else if ((RxHeader.StdId == 0x545) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001238:	4b46      	ldr	r3, [pc, #280]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f240 5245 	movw	r2, #1349	; 0x545
 8001240:	4293      	cmp	r3, r2
 8001242:	d10f      	bne.n	8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
 8001244:	4b43      	ldr	r3, [pc, #268]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10b      	bne.n	8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d107      	bne.n	8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
   {
 	 uint8_t oil_tmp_in = RxData[4];
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001256:	791b      	ldrb	r3, [r3, #4]
 8001258:	767b      	strb	r3, [r7, #25]
 	 oil_tmp = ((int)oil_tmp_in) - 48;
 800125a:	7e7b      	ldrb	r3, [r7, #25]
 800125c:	3b30      	subs	r3, #48	; 0x30
 800125e:	4a45      	ldr	r2, [pc, #276]	; (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001260:	6013      	str	r3, [r2, #0]
   {
 8001262:	e071      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>

   }
   else if ((RxHeader.StdId == 0x640) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800126c:	d144      	bne.n	80012f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d140      	bne.n	80012f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d13c      	bne.n	80012f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
   {
	 uint16_t br_p_in =(RxData[1] << 0) | (RxData[0] << 8);
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	82fb      	strh	r3, [r7, #22]
	 uint16_t oil_press_in =(RxData[7] << 0) | (RxData[6] << 8);
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001294:	79db      	ldrb	r3, [r3, #7]
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800129a:	799b      	ldrb	r3, [r3, #6]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	82bb      	strh	r3, [r7, #20]
	 uint16_t diff_temp_in =(RxData[5] << 0) | (RxData[4] << 8);
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012a8:	795b      	ldrb	r3, [r3, #5]
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	827b      	strh	r3, [r7, #18]

	 br_p = (int) ((int) br_p_in * 0.05f);
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012d6:	601a      	str	r2, [r3, #0]
	 oil_press = (int)((int)oil_press_in) * 0.002585f;
 80012d8:	8abb      	ldrh	r3, [r7, #20]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]
	 diff_tmp = (int)((int)diff_temp_in);
 80012f0:	8a7b      	ldrh	r3, [r7, #18]
 80012f2:	4a25      	ldr	r2, [pc, #148]	; (8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80012f4:	6013      	str	r3, [r2, #0]
   {
 80012f6:	e027      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
   }
   else if ((RxHeader.StdId == 0x77E) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f240 727e 	movw	r2, #1918	; 0x77e
 8001300:	4293      	cmp	r3, r2
 8001302:	d121      	bne.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d11d      	bne.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d119      	bne.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
      {
   	 uint8_t tpms_id_in = RxData[0];
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	747b      	strb	r3, [r7, #17]
   	 uint16_t tpms_press_in =(RxData[1] << 0) | (RxData[2] << 8);
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	81fb      	strh	r3, [r7, #14]
   	 uint8_t tpms_temp_in = RxData[3];
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001330:	78db      	ldrb	r3, [r3, #3]
 8001332:	737b      	strb	r3, [r7, #13]


	 tpms_id = (int) tpms_id_in;
 8001334:	7c7b      	ldrb	r3, [r7, #17]
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001338:	6013      	str	r3, [r2, #0]
	 tpms_press = (int) tpms_press_in;
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800133e:	6013      	str	r3, [r2, #0]
   	 tpms_temp = (int) tpms_temp_in;
 8001340:	7b7b      	ldrb	r3, [r7, #13]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001344:	6013      	str	r3, [r2, #0]
    }
}
 8001346:	e7ff      	b.n	8001348 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000c840 	.word	0x2000c840
 8001354:	2000c5f8 	.word	0x2000c5f8
 8001358:	38d1b717 	.word	0x38d1b717
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20000004 	.word	0x20000004
 8001364:	42400000 	.word	0x42400000
 8001368:	20000008 	.word	0x20000008
 800136c:	3eeb4b44 	.word	0x3eeb4b44
 8001370:	200003d0 	.word	0x200003d0
 8001374:	200003c4 	.word	0x200003c4
 8001378:	3d4ccccd 	.word	0x3d4ccccd
 800137c:	200003d4 	.word	0x200003d4
 8001380:	3b29691a 	.word	0x3b29691a
 8001384:	200003cc 	.word	0x200003cc
 8001388:	200003c8 	.word	0x200003c8
 800138c:	200003d8 	.word	0x200003d8
 8001390:	200003dc 	.word	0x200003dc
 8001394:	200003e0 	.word	0x200003e0

08001398 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_CRC_Init+0x3c>)
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <MX_CRC_Init+0x40>)
 80013a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013bc:	2201      	movs	r2, #1
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_CRC_Init+0x3c>)
 80013c2:	f003 fb41 	bl	8004a48 <HAL_CRC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013cc:	f001 f8dc 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000c694 	.word	0x2000c694
 80013d8:	40023000 	.word	0x40023000

080013dc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_DCMI_Init+0x60>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <MX_DCMI_Init+0x64>)
 80013e4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_DCMI_Init+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_DCMI_Init+0x60>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_DCMI_Init+0x60>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_DCMI_Init+0x60>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_DCMI_Init+0x60>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_DCMI_Init+0x60>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_DCMI_Init+0x60>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_DCMI_Init+0x60>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_DCMI_Init+0x60>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_DCMI_Init+0x60>)
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_DCMI_Init+0x60>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_DCMI_Init+0x60>)
 800142a:	f003 fbf7 	bl	8004c1c <HAL_DCMI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001434:	f001 f8a8 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000c910 	.word	0x2000c910
 8001440:	50050000 	.word	0x50050000

08001444 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <MX_DMA2D_Init+0x60>)
 800144c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 800146e:	2200      	movs	r2, #0
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 800147a:	f003 fce3 	bl	8004e44 <HAL_DMA2D_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001484:	f001 f880 	bl	8002588 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001488:	2101      	movs	r1, #1
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_DMA2D_Init+0x5c>)
 800148c:	f003 ffa4 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001496:	f001 f877 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000c43c 	.word	0x2000c43c
 80014a4:	4002b000 	.word	0x4002b000

080014a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2234      	movs	r2, #52	; 0x34
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f029 ff8e 	bl	802b3d6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014bc:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <MX_LTDC_Init+0x100>)
 80014be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e0:	2209      	movs	r2, #9
 80014e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e6:	2235      	movs	r2, #53	; 0x35
 80014e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ec:	220b      	movs	r2, #11
 80014ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014f2:	f240 2215 	movw	r2, #533	; 0x215
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014fa:	f240 121b 	movw	r2, #283	; 0x11b
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001502:	f240 2235 	movw	r2, #565	; 0x235
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800150a:	f240 121d 	movw	r2, #285	; 0x11d
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800152a:	f004 ff8b 	bl	8006444 <HAL_LTDC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001534:	f001 f828 	bl	8002588 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800153c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001540:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800154a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800155e:	2305      	movs	r3, #5
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001562:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001568:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800156e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800158e:	f005 f8e1 	bl	8006754 <HAL_LTDC_ConfigLayer>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001598:	f000 fff6 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000c330 	.word	0x2000c330
 80015a8:	40016800 	.word	0x40016800

080015ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <MX_QUADSPI_Init+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015be:	2201      	movs	r2, #1
 80015c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_QUADSPI_Init+0x50>)
 80015e8:	f005 fb24 	bl	8006c34 <HAL_QSPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f000 ffc9 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000c47c 	.word	0x2000c47c
 8001600:	a0001000 	.word	0xa0001000

08001604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b092      	sub	sp, #72	; 0x48
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800160a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	222c      	movs	r2, #44	; 0x2c
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f029 fed5 	bl	802b3d6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <MX_RTC_Init+0x148>)
 800162e:	4a48      	ldr	r2, [pc, #288]	; (8001750 <MX_RTC_Init+0x14c>)
 8001630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001632:	4b46      	ldr	r3, [pc, #280]	; (800174c <MX_RTC_Init+0x148>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001638:	4b44      	ldr	r3, [pc, #272]	; (800174c <MX_RTC_Init+0x148>)
 800163a:	227f      	movs	r2, #127	; 0x7f
 800163c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <MX_RTC_Init+0x148>)
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <MX_RTC_Init+0x148>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <MX_RTC_Init+0x148>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <MX_RTC_Init+0x148>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001656:	483d      	ldr	r0, [pc, #244]	; (800174c <MX_RTC_Init+0x148>)
 8001658:	f006 fd78 	bl	800814c <HAL_RTC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001662:	f000 ff91 	bl	8002588 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	4830      	ldr	r0, [pc, #192]	; (800174c <MX_RTC_Init+0x148>)
 800168a:	f006 fddb 	bl	8008244 <HAL_RTC_SetTime>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 ff78 	bl	8002588 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	4824      	ldr	r0, [pc, #144]	; (800174c <MX_RTC_Init+0x148>)
 80016ba:	f006 fe81 	bl	80083c0 <HAL_RTC_SetDate>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80016c4:	f000 ff60 	bl	8002588 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80016f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	2201      	movs	r2, #1
 80016fc:	4619      	mov	r1, r3
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <MX_RTC_Init+0x148>)
 8001700:	f006 ff06 	bl	8008510 <HAL_RTC_SetAlarm>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800170a:	f000 ff3d 	bl	8002588 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <MX_RTC_Init+0x148>)
 8001722:	f006 fef5 	bl	8008510 <HAL_RTC_SetAlarm>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800172c:	f000 ff2c 	bl	8002588 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001730:	2202      	movs	r2, #2
 8001732:	2100      	movs	r1, #0
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_RTC_Init+0x148>)
 8001736:	f007 f875 	bl	8008824 <HAL_RTCEx_SetTimeStamp>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001740:	f000 ff22 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3748      	adds	r7, #72	; 0x48
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000c310 	.word	0x2000c310
 8001750:	40002800 	.word	0x40002800

08001754 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <MX_SAI2_Init+0x13c>)
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <MX_SAI2_Init+0x140>)
 800175c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <MX_SAI2_Init+0x13c>)
 800176c:	2240      	movs	r2, #64	; 0x40
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <MX_SAI2_Init+0x13c>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <MX_SAI2_Init+0x13c>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800178e:	4b40      	ldr	r3, [pc, #256]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001794:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <MX_SAI2_Init+0x13c>)
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <MX_SAI2_Init+0x144>)
 8001798:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <MX_SAI2_Init+0x13c>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80017a0:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80017a6:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017b4:	2208      	movs	r2, #8
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <MX_SAI2_Init+0x13c>)
 80017ea:	f007 f871 	bl	80088d0 <HAL_SAI_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80017f4:	f000 fec8 	bl	8002588 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <MX_SAI2_Init+0x148>)
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <MX_SAI2_Init+0x14c>)
 80017fc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_SAI2_Init+0x148>)
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <MX_SAI2_Init+0x148>)
 8001806:	2203      	movs	r2, #3
 8001808:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_SAI2_Init+0x148>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_SAI2_Init+0x148>)
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_SAI2_Init+0x148>)
 8001818:	2200      	movs	r2, #0
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_SAI2_Init+0x148>)
 800181e:	2201      	movs	r2, #1
 8001820:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_SAI2_Init+0x148>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_SAI2_Init+0x148>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_SAI2_Init+0x148>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_SAI2_Init+0x148>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_SAI2_Init+0x148>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_SAI2_Init+0x148>)
 8001842:	2200      	movs	r2, #0
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_SAI2_Init+0x148>)
 8001848:	2208      	movs	r2, #8
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_SAI2_Init+0x148>)
 800184e:	2201      	movs	r2, #1
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_SAI2_Init+0x148>)
 8001854:	2200      	movs	r2, #0
 8001856:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_SAI2_Init+0x148>)
 800185a:	2200      	movs	r2, #0
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_SAI2_Init+0x148>)
 8001860:	2200      	movs	r2, #0
 8001862:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MX_SAI2_Init+0x148>)
 8001866:	2200      	movs	r2, #0
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_SAI2_Init+0x148>)
 800186c:	2200      	movs	r2, #0
 800186e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_SAI2_Init+0x148>)
 8001872:	2201      	movs	r2, #1
 8001874:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_SAI2_Init+0x148>)
 8001878:	2200      	movs	r2, #0
 800187a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_SAI2_Init+0x148>)
 800187e:	f007 f827 	bl	80088d0 <HAL_SAI_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001888:	f000 fe7e 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000c574 	.word	0x2000c574
 8001894:	40015c04 	.word	0x40015c04
 8001898:	0002ee00 	.word	0x0002ee00
 800189c:	2000c4f0 	.word	0x2000c4f0
 80018a0:	40015c24 	.word	0x40015c24

080018a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018aa:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <MX_SDMMC1_SD_Init+0x3c>)
 80018ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <MX_SDMMC1_SD_Init+0x38>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	2000c28c 	.word	0x2000c28c
 80018e0:	40012c00 	.word	0x40012c00

080018e4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 80018ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018ee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_SPDIFRX_Init+0x5c>)
 800192e:	f008 fa63 	bl	8009df8 <HAL_SPDIFRX_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 fe26 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000c7f4 	.word	0x2000c7f4

08001944 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_SPI2_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_SPI2_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI2_Init+0x74>)
 800195e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001962:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_SPI2_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI2_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_SPI2_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001992:	2207      	movs	r2, #7
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_SPI2_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI2_Init+0x74>)
 800199e:	2208      	movs	r2, #8
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_SPI2_Init+0x74>)
 80019a4:	f008 fa84 	bl	8009eb0 <HAL_SPI_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fdeb 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000c3d8 	.word	0x2000c3d8
 80019bc:	40003800 	.word	0x40003800

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b09a      	sub	sp, #104	; 0x68
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	222c      	movs	r2, #44	; 0x2c
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f029 fceb 	bl	802b3d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a02:	4a44      	ldr	r2, [pc, #272]	; (8001b14 <MX_TIM1_Init+0x154>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a2a:	4839      	ldr	r0, [pc, #228]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a2c:	f008 fad2 	bl	8009fd4 <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a36:	f000 fda7 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a44:	4619      	mov	r1, r3
 8001a46:	4832      	ldr	r0, [pc, #200]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a48:	f008 fd7c 	bl	800a544 <HAL_TIM_ConfigClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fd99 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a56:	482e      	ldr	r0, [pc, #184]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a58:	f008 fb12 	bl	800a080 <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a62:	f000 fd91 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a76:	4619      	mov	r1, r3
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001a7a:	f009 f9dd 	bl	800ae38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001a84:	f000 fd80 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a88:	2360      	movs	r3, #96	; 0x60
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001aae:	f008 fc31 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ab8:	f000 fd66 	bl	8002588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001af2:	f009 fa2f 	bl	800af54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001afc:	f000 fd44 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <MX_TIM1_Init+0x150>)
 8001b02:	f001 fa3b 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001b06:	bf00      	nop
 8001b08:	3768      	adds	r7, #104	; 0x68
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000c960 	.word	0x2000c960
 8001b14:	40010000 	.word	0x40010000

08001b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b52:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b70:	4823      	ldr	r0, [pc, #140]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b72:	f008 fa2f 	bl	8009fd4 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b7c:	f000 fd04 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b8e:	f008 fcd9 	bl	800a544 <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b98:	f000 fcf6 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001b9e:	f008 fa6f 	bl	800a080 <HAL_TIM_PWM_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ba8:	f000 fcee 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001bbc:	f009 f93c 	bl	800ae38 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bc6:	f000 fcdf 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	; 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001be2:	f008 fb97 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001bec:	f000 fccc 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM2_Init+0xe8>)
 8001bf2:	f001 f9c3 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3738      	adds	r7, #56	; 0x38
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000c88c 	.word	0x2000c88c

08001c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c38:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <MX_TIM3_Init+0xe8>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c5c:	f008 f9ba 	bl	8009fd4 <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c66:	f000 fc8f 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c74:	4619      	mov	r1, r3
 8001c76:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c78:	f008 fc64 	bl	800a544 <HAL_TIM_ConfigClockSource>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c82:	f000 fc81 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c86:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001c88:	f008 f9fa 	bl	800a080 <HAL_TIM_PWM_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c92:	f000 fc79 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001ca6:	f009 f8c7 	bl	800ae38 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cb0:	f000 fc6a 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb4:	2360      	movs	r3, #96	; 0x60
 8001cb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001ccc:	f008 fb22 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cd6:	f000 fc57 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <MX_TIM3_Init+0xe4>)
 8001cdc:	f001 f94e 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000c8cc 	.word	0x2000c8cc
 8001cec:	40000400 	.word	0x40000400

08001cf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	463b      	mov	r3, r7
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <MX_TIM5_Init+0xe8>)
 8001d26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d46:	4823      	ldr	r0, [pc, #140]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d48:	f008 f944 	bl	8009fd4 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001d52:	f000 fc19 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d60:	4619      	mov	r1, r3
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d64:	f008 fbee 	bl	800a544 <HAL_TIM_ConfigClockSource>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001d6e:	f000 fc0b 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d72:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d74:	f008 f984 	bl	800a080 <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001d7e:	f000 fc03 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001d92:	f009 f851 	bl	800ae38 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001d9c:	f000 fbf4 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da0:	2360      	movs	r3, #96	; 0x60
 8001da2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	220c      	movs	r2, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001db8:	f008 faac 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001dc2:	f000 fbe1 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <MX_TIM5_Init+0xe4>)
 8001dc8:	f001 f8d8 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001dcc:	bf00      	nop
 8001dce:	3738      	adds	r7, #56	; 0x38
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000c84c 	.word	0x2000c84c
 8001dd8:	40000c00 	.word	0x40000c00

08001ddc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <MX_TIM8_Init+0xa0>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e24:	4814      	ldr	r0, [pc, #80]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e26:	f008 f8d5 	bl	8009fd4 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001e30:	f000 fbaa 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e42:	f008 fb7f 	bl	800a544 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001e4c:	f000 fb9c 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM8_Init+0x9c>)
 8001e62:	f008 ffe9 	bl	800ae38 <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001e6c:	f000 fb8c 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000c9a0 	.word	0x2000c9a0
 8001e7c:	40010400 	.word	0x40010400

08001e80 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <MX_TIM12_Init+0x84>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ebc:	4810      	ldr	r0, [pc, #64]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001ebe:	f008 f8df 	bl	800a080 <HAL_TIM_PWM_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001ec8:	f000 fb5e 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ecc:	2360      	movs	r3, #96	; 0x60
 8001ece:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001ee4:	f008 fa16 	bl	800a314 <HAL_TIM_PWM_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001eee:	f000 fb4b 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ef2:	4803      	ldr	r0, [pc, #12]	; (8001f00 <MX_TIM12_Init+0x80>)
 8001ef4:	f001 f842 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000c734 	.word	0x2000c734
 8001f04:	40001800 	.word	0x40001800

08001f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <MX_USART1_UART_Init+0x5c>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_USART1_UART_Init+0x58>)
 8001f4c:	f009 f89e 	bl	800b08c <HAL_UART_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f56:	f000 fb17 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000c614 	.word	0x2000c614
 8001f64:	40011000 	.word	0x40011000

08001f68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <MX_USART6_UART_Init+0x5c>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_USART6_UART_Init+0x58>)
 8001fac:	f009 f86e 	bl	800b08c <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001fb6:	f000 fae7 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000c774 	.word	0x2000c774
 8001fc4:	40011400 	.word	0x40011400

08001fc8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <MX_FMC_Init+0x14c>)
 8001fe2:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <MX_FMC_Init+0x150>)
 8001fe4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <MX_FMC_Init+0x14c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <MX_FMC_Init+0x14c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <MX_FMC_Init+0x14c>)
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <MX_FMC_Init+0x14c>)
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <MX_FMC_Init+0x14c>)
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <MX_FMC_Init+0x14c>)
 8002006:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800200a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800200c:	4b41      	ldr	r3, [pc, #260]	; (8002114 <MX_FMC_Init+0x14c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <MX_FMC_Init+0x14c>)
 8002014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002018:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800201a:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <MX_FMC_Init+0x14c>)
 800201c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <MX_FMC_Init+0x14c>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800202c:	2307      	movs	r3, #7
 800202e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002030:	2304      	movs	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002034:	2307      	movs	r3, #7
 8002036:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002038:	2303      	movs	r3, #3
 800203a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002040:	2302      	movs	r3, #2
 8002042:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4832      	ldr	r0, [pc, #200]	; (8002114 <MX_FMC_Init+0x14c>)
 800204a:	f007 fe55 	bl	8009cf8 <HAL_SDRAM_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002054:	f000 fa98 	bl	8002588 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_FMC_Init+0x154>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <MX_FMC_Init+0x154>)
 8002064:	2210      	movs	r2, #16
 8002066:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <MX_FMC_Init+0x154>)
 800206a:	2201      	movs	r2, #1
 800206c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <MX_FMC_Init+0x154>)
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002078:	4928      	ldr	r1, [pc, #160]	; (800211c <MX_FMC_Init+0x154>)
 800207a:	4826      	ldr	r0, [pc, #152]	; (8002114 <MX_FMC_Init+0x14c>)
 800207c:	f007 fe70 	bl	8009d60 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002080:	2001      	movs	r0, #1
 8002082:	f001 fba3 	bl	80037cc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <MX_FMC_Init+0x154>)
 8002088:	2202      	movs	r2, #2
 800208a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_FMC_Init+0x154>)
 800208e:	2210      	movs	r2, #16
 8002090:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <MX_FMC_Init+0x154>)
 8002094:	2201      	movs	r2, #1
 8002096:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <MX_FMC_Init+0x154>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800209e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a2:	491e      	ldr	r1, [pc, #120]	; (800211c <MX_FMC_Init+0x154>)
 80020a4:	481b      	ldr	r0, [pc, #108]	; (8002114 <MX_FMC_Init+0x14c>)
 80020a6:	f007 fe5b 	bl	8009d60 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_FMC_Init+0x154>)
 80020ac:	2203      	movs	r2, #3
 80020ae:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_FMC_Init+0x154>)
 80020b2:	2210      	movs	r2, #16
 80020b4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <MX_FMC_Init+0x154>)
 80020b8:	2208      	movs	r2, #8
 80020ba:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_FMC_Init+0x154>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	4915      	ldr	r1, [pc, #84]	; (800211c <MX_FMC_Init+0x154>)
 80020c8:	4812      	ldr	r0, [pc, #72]	; (8002114 <MX_FMC_Init+0x14c>)
 80020ca:	f007 fe49 	bl	8009d60 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80020ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80020d2:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_FMC_Init+0x154>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <MX_FMC_Init+0x154>)
 80020dc:	2210      	movs	r2, #16
 80020de:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_FMC_Init+0x154>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4a0c      	ldr	r2, [pc, #48]	; (800211c <MX_FMC_Init+0x154>)
 80020ea:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80020ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f0:	490a      	ldr	r1, [pc, #40]	; (800211c <MX_FMC_Init+0x154>)
 80020f2:	4808      	ldr	r0, [pc, #32]	; (8002114 <MX_FMC_Init+0x14c>)
 80020f4:	f007 fe34 	bl	8009d60 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80020f8:	f240 712b 	movw	r1, #1835	; 0x72b
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_FMC_Init+0x14c>)
 80020fe:	f007 fe5a 	bl	8009db6 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002102:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002106:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800210a:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000c700 	.word	0x2000c700
 8002118:	a0000140 	.word	0xa0000140
 800211c:	200003b4 	.word	0x200003b4

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b090      	sub	sp, #64	; 0x40
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002136:	4baf      	ldr	r3, [pc, #700]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4aae      	ldr	r2, [pc, #696]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4bac      	ldr	r3, [pc, #688]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800214e:	4ba9      	ldr	r3, [pc, #676]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4aa8      	ldr	r2, [pc, #672]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4ba6      	ldr	r3, [pc, #664]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4aa2      	ldr	r2, [pc, #648]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800217e:	4b9d      	ldr	r3, [pc, #628]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a9c      	ldr	r2, [pc, #624]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b9a      	ldr	r3, [pc, #616]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	4b97      	ldr	r3, [pc, #604]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a96      	ldr	r2, [pc, #600]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b94      	ldr	r3, [pc, #592]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b91      	ldr	r3, [pc, #580]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a90      	ldr	r2, [pc, #576]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b8e      	ldr	r3, [pc, #568]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a8a      	ldr	r2, [pc, #552]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021de:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a84      	ldr	r2, [pc, #528]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 80021fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a78      	ldr	r2, [pc, #480]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002214:	f043 0320 	orr.w	r3, r3, #32
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a72      	ldr	r2, [pc, #456]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <MX_GPIO_Init+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	2120      	movs	r1, #32
 8002242:	486d      	ldr	r0, [pc, #436]	; (80023f8 <MX_GPIO_Init+0x2d8>)
 8002244:	f003 fbb8 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	210c      	movs	r1, #12
 800224c:	486b      	ldr	r0, [pc, #428]	; (80023fc <MX_GPIO_Init+0x2dc>)
 800224e:	f003 fbb3 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2108      	movs	r1, #8
 8002256:	486a      	ldr	r0, [pc, #424]	; (8002400 <MX_GPIO_Init+0x2e0>)
 8002258:	f003 fbae 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002262:	4866      	ldr	r0, [pc, #408]	; (80023fc <MX_GPIO_Init+0x2dc>)
 8002264:	f003 fba8 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226e:	4865      	ldr	r0, [pc, #404]	; (8002404 <MX_GPIO_Init+0x2e4>)
 8002270:	f003 fba2 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	21c8      	movs	r1, #200	; 0xc8
 8002278:	4863      	ldr	r0, [pc, #396]	; (8002408 <MX_GPIO_Init+0x2e8>)
 800227a:	f003 fb9d 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800227e:	2308      	movs	r3, #8
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	485e      	ldr	r0, [pc, #376]	; (800240c <MX_GPIO_Init+0x2ec>)
 8002292:	f003 f9cf 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002296:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022a8:	230b      	movs	r3, #11
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b0:	4619      	mov	r1, r3
 80022b2:	4855      	ldr	r0, [pc, #340]	; (8002408 <MX_GPIO_Init+0x2e8>)
 80022b4:	f003 f9be 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80022b8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022ca:	230a      	movs	r3, #10
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d2:	4619      	mov	r1, r3
 80022d4:	484e      	ldr	r0, [pc, #312]	; (8002410 <MX_GPIO_Init+0x2f0>)
 80022d6:	f003 f9ad 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ec:	4619      	mov	r1, r3
 80022ee:	4849      	ldr	r0, [pc, #292]	; (8002414 <MX_GPIO_Init+0x2f4>)
 80022f0:	f003 f9a0 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80022f4:	2340      	movs	r3, #64	; 0x40
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022f8:	4b47      	ldr	r3, [pc, #284]	; (8002418 <MX_GPIO_Init+0x2f8>)
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002304:	4619      	mov	r1, r3
 8002306:	483c      	ldr	r0, [pc, #240]	; (80023f8 <MX_GPIO_Init+0x2d8>)
 8002308:	f003 f994 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800230c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800231e:	230a      	movs	r3, #10
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	483c      	ldr	r0, [pc, #240]	; (800241c <MX_GPIO_Init+0x2fc>)
 800232a:	f003 f983 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800232e:	2320      	movs	r3, #32
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002342:	4619      	mov	r1, r3
 8002344:	482c      	ldr	r0, [pc, #176]	; (80023f8 <MX_GPIO_Init+0x2d8>)
 8002346:	f003 f975 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800234a:	f241 030c 	movw	r3, #4108	; 0x100c
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800235c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	4826      	ldr	r0, [pc, #152]	; (80023fc <MX_GPIO_Init+0x2dc>)
 8002364:	f003 f966 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237a:	4619      	mov	r1, r3
 800237c:	4828      	ldr	r0, [pc, #160]	; (8002420 <MX_GPIO_Init+0x300>)
 800237e:	f003 f959 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002382:	2308      	movs	r3, #8
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	4819      	ldr	r0, [pc, #100]	; (8002400 <MX_GPIO_Init+0x2e0>)
 800239a:	f003 f94b 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800239e:	2310      	movs	r3, #16
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	4619      	mov	r1, r3
 80023b0:	4811      	ldr	r0, [pc, #68]	; (80023f8 <MX_GPIO_Init+0x2d8>)
 80023b2:	f003 f93f 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80023b6:	f248 0304 	movw	r3, #32772	; 0x8004
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c8:	4619      	mov	r1, r3
 80023ca:	480e      	ldr	r0, [pc, #56]	; (8002404 <MX_GPIO_Init+0x2e4>)
 80023cc:	f003 f932 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <MX_GPIO_Init+0x2e4>)
 80023ea:	f003 f923 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80023ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f2:	e017      	b.n	8002424 <MX_GPIO_Init+0x304>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022800 	.word	0x40022800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40021800 	.word	0x40021800
 800240c:	40021000 	.word	0x40021000
 8002410:	40020400 	.word	0x40020400
 8002414:	40022400 	.word	0x40022400
 8002418:	10120000 	.word	0x10120000
 800241c:	40020000 	.word	0x40020000
 8002420:	40020800 	.word	0x40020800
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <MX_GPIO_Init+0x418>)
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	4619      	mov	r1, r3
 8002434:	4841      	ldr	r0, [pc, #260]	; (800253c <MX_GPIO_Init+0x41c>)
 8002436:	f003 f8fd 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800243a:	2310      	movs	r3, #16
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800244a:	230a      	movs	r3, #10
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002452:	4619      	mov	r1, r3
 8002454:	483a      	ldr	r0, [pc, #232]	; (8002540 <MX_GPIO_Init+0x420>)
 8002456:	f003 f8ed 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800245a:	23c8      	movs	r3, #200	; 0xc8
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800246a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246e:	4619      	mov	r1, r3
 8002470:	4834      	ldr	r0, [pc, #208]	; (8002544 <MX_GPIO_Init+0x424>)
 8002472:	f003 f8df 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002476:	2305      	movs	r3, #5
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002486:	230a      	movs	r3, #10
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	482d      	ldr	r0, [pc, #180]	; (8002548 <MX_GPIO_Init+0x428>)
 8002492:	f003 f8cf 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002496:	2332      	movs	r3, #50	; 0x32
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a6:	230b      	movs	r3, #11
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4825      	ldr	r0, [pc, #148]	; (8002548 <MX_GPIO_Init+0x428>)
 80024b2:	f003 f8bf 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80024b6:	2304      	movs	r3, #4
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <MX_GPIO_Init+0x424>)
 80024ca:	f003 f8b3 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024ce:	2386      	movs	r3, #134	; 0x86
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024de:	230b      	movs	r3, #11
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4619      	mov	r1, r3
 80024e8:	4818      	ldr	r0, [pc, #96]	; (800254c <MX_GPIO_Init+0x42c>)
 80024ea:	f003 f8a3 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f4:	2312      	movs	r3, #18
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002500:	2304      	movs	r3, #4
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_GPIO_Init+0x420>)
 800250c:	f003 f892 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002510:	2328      	movs	r3, #40	; 0x28
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002520:	230a      	movs	r3, #10
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	4808      	ldr	r0, [pc, #32]	; (800254c <MX_GPIO_Init+0x42c>)
 800252c:	f003 f882 	bl	8005634 <HAL_GPIO_Init>

}
 8002530:	bf00      	nop
 8002532:	3740      	adds	r7, #64	; 0x40
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	10120000 	.word	0x10120000
 800253c:	40022000 	.word	0x40022000
 8002540:	40021c00 	.word	0x40021c00
 8002544:	40021800 	.word	0x40021800
 8002548:	40020800 	.word	0x40020800
 800254c:	40020000 	.word	0x40020000

08002550 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002558:	f00d fcd6 	bl	800ff08 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800255c:	2001      	movs	r0, #1
 800255e:	f00a fb99 	bl	800cc94 <osDelay>
 8002562:	e7fb      	b.n	800255c <StartDefaultTask+0xc>

08002564 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002576:	f001 f909 	bl	800378c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40001000 	.word	0x40001000

08002588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_MspInit+0x4c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_MspInit+0x4c>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_MspInit+0x4c>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	210f      	movs	r1, #15
 80025d2:	f06f 0001 	mvn.w	r0, #1
 80025d6:	f002 f9ff 	bl	80049d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_ADC_MspInit+0xa4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d13c      	bne.n	8002684 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_ADC_MspInit+0xa8>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002652:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002656:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002658:	2303      	movs	r3, #3
 800265a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	480b      	ldr	r0, [pc, #44]	; (8002694 <HAL_ADC_MspInit+0xac>)
 8002668:	f002 ffe4 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800266c:	2301      	movs	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002670:	2303      	movs	r3, #3
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <HAL_ADC_MspInit+0xb0>)
 8002680:	f002 ffd8 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40012200 	.word	0x40012200
 8002690:	40023800 	.word	0x40023800
 8002694:	40021400 	.word	0x40021400
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_CAN_MspInit+0x8c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d130      	bne.n	8002720 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_CAN_MspInit+0x90>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002700:	2309      	movs	r3, #9
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <HAL_CAN_MspInit+0x94>)
 800270c:	f002 ff92 	bl	8005634 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2105      	movs	r1, #5
 8002714:	2014      	movs	r0, #20
 8002716:	f002 f95f 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800271a:	2014      	movs	r0, #20
 800271c:	f002 f978 	bl	8004a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	; 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40006400 	.word	0x40006400
 800272c:	40023800 	.word	0x40023800
 8002730:	40020400 	.word	0x40020400

08002734 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_CRC_MspInit+0x38>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10b      	bne.n	800275e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_CRC_MspInit+0x3c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_CRC_MspInit+0x3c>)
 800274c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_CRC_MspInit+0x3c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023000 	.word	0x40023000
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a50      	ldr	r2, [pc, #320]	; (80028d4 <HAL_DCMI_MspInit+0x160>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 809a 	bne.w	80028cc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002798:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	4a4e      	ldr	r2, [pc, #312]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6353      	str	r3, [r2, #52]	; 0x34
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027ce:	f043 0308 	orr.w	r3, r3, #8
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e0:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a3c      	ldr	r2, [pc, #240]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 80027fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_DCMI_MspInit+0x164>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002828:	2360      	movs	r3, #96	; 0x60
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002838:	230d      	movs	r3, #13
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4826      	ldr	r0, [pc, #152]	; (80028dc <HAL_DCMI_MspInit+0x168>)
 8002844:	f002 fef6 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002848:	2308      	movs	r3, #8
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002858:	230d      	movs	r3, #13
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	481f      	ldr	r0, [pc, #124]	; (80028e0 <HAL_DCMI_MspInit+0x16c>)
 8002864:	f002 fee6 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800287a:	230d      	movs	r3, #13
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002882:	4619      	mov	r1, r3
 8002884:	4817      	ldr	r0, [pc, #92]	; (80028e4 <HAL_DCMI_MspInit+0x170>)
 8002886:	f002 fed5 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800288a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800289c:	230d      	movs	r3, #13
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	4619      	mov	r1, r3
 80028a6:	4810      	ldr	r0, [pc, #64]	; (80028e8 <HAL_DCMI_MspInit+0x174>)
 80028a8:	f002 fec4 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80028ac:	2350      	movs	r3, #80	; 0x50
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028bc:	230d      	movs	r3, #13
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	4809      	ldr	r0, [pc, #36]	; (80028ec <HAL_DCMI_MspInit+0x178>)
 80028c8:	f002 feb4 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3738      	adds	r7, #56	; 0x38
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	50050000 	.word	0x50050000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40021c00 	.word	0x40021c00
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_DMA2D_MspInit+0x44>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_DMA2D_MspInit+0x48>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_DMA2D_MspInit+0x48>)
 8002908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_DMA2D_MspInit+0x48>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2105      	movs	r1, #5
 800291e:	205a      	movs	r0, #90	; 0x5a
 8002920:	f002 f85a 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002924:	205a      	movs	r0, #90	; 0x5a
 8002926:	f002 f873 	bl	8004a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	4002b000 	.word	0x4002b000
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_DMA2D_MspDeInit+0x2c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <HAL_DMA2D_MspDeInit+0x30>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_DMA2D_MspDeInit+0x30>)
 8002954:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002958:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800295a:	205a      	movs	r0, #90	; 0x5a
 800295c:	f002 f866 	bl	8004a2c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	4002b000 	.word	0x4002b000
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	; 0x38
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_LTDC_MspInit+0x174>)
 800298e:	4293      	cmp	r3, r2
 8002990:	f040 80a3 	bne.w	8002ada <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002994:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 800299a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800299e:	6453      	str	r3, [r2, #68]	; 0x44
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ac:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029b2:	f043 0310 	orr.w	r3, r3, #16
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029c4:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a47      	ldr	r2, [pc, #284]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e6:	6313      	str	r3, [r2, #48]	; 0x30
 80029e8:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029f4:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 80029fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_LTDC_MspInit+0x178>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002a24:	2310      	movs	r3, #16
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a34:	230e      	movs	r3, #14
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482b      	ldr	r0, [pc, #172]	; (8002aec <HAL_LTDC_MspInit+0x17c>)
 8002a40:	f002 fdf8 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002a44:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a56:	230e      	movs	r3, #14
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4823      	ldr	r0, [pc, #140]	; (8002af0 <HAL_LTDC_MspInit+0x180>)
 8002a62:	f002 fde7 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002a66:	23f7      	movs	r3, #247	; 0xf7
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a76:	230e      	movs	r3, #14
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	481c      	ldr	r0, [pc, #112]	; (8002af4 <HAL_LTDC_MspInit+0x184>)
 8002a82:	f002 fdd7 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a98:	2309      	movs	r3, #9
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4815      	ldr	r0, [pc, #84]	; (8002af8 <HAL_LTDC_MspInit+0x188>)
 8002aa4:	f002 fdc6 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002aa8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aba:	230e      	movs	r3, #14
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480d      	ldr	r0, [pc, #52]	; (8002afc <HAL_LTDC_MspInit+0x18c>)
 8002ac6:	f002 fdb5 	bl	8005634 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	2058      	movs	r0, #88	; 0x58
 8002ad0:	f001 ff82 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ad4:	2058      	movs	r0, #88	; 0x58
 8002ad6:	f001 ff9b 	bl	8004a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3738      	adds	r7, #56	; 0x38
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40016800 	.word	0x40016800
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40022400 	.word	0x40022400
 8002af4:	40022800 	.word	0x40022800
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40022000 	.word	0x40022000

08002b00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_QSPI_MspInit+0x10c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d170      	bne.n	8002c04 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b2e:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3a:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b40:	f043 0310 	orr.w	r3, r3, #16
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_QSPI_MspInit+0x110>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002b82:	2304      	movs	r3, #4
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b92:	2309      	movs	r3, #9
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481d      	ldr	r0, [pc, #116]	; (8002c14 <HAL_QSPI_MspInit+0x114>)
 8002b9e:	f002 fd49 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4816      	ldr	r0, [pc, #88]	; (8002c18 <HAL_QSPI_MspInit+0x118>)
 8002bbe:	f002 fd39 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bd2:	2309      	movs	r3, #9
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480e      	ldr	r0, [pc, #56]	; (8002c18 <HAL_QSPI_MspInit+0x118>)
 8002bde:	f002 fd29 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4807      	ldr	r0, [pc, #28]	; (8002c1c <HAL_QSPI_MspInit+0x11c>)
 8002c00:	f002 fd18 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c04:	bf00      	nop
 8002c06:	3730      	adds	r7, #48	; 0x30
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	a0001000 	.word	0xa0001000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020c00 	.word	0x40020c00

08002c20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RTC_MspInit+0x2c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d105      	bne.n	8002c3e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RTC_MspInit+0x30>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_RTC_MspInit+0x30>)
 8002c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40002800 	.word	0x40002800
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_SD_MspInit+0xb4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d144      	bne.n	8002d00 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_SD_MspInit+0xb8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002cbe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002cc2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <HAL_SD_MspInit+0xbc>)
 8002cdc:	f002 fcaa 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4806      	ldr	r0, [pc, #24]	; (8002d14 <HAL_SD_MspInit+0xc0>)
 8002cfc:	f002 fc9a 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	; 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00

08002d18 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002d38:	d127      	bne.n	8002d8a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f107 0314 	add.w	r3, r7, #20
 8002d82:	4619      	mov	r1, r3
 8002d84:	4804      	ldr	r0, [pc, #16]	; (8002d98 <HAL_SPDIFRX_MspInit+0x80>)
 8002d86:	f002 fc55 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020c00 	.word	0x40020c00

08002d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a25      	ldr	r2, [pc, #148]	; (8002e50 <HAL_SPI_MspInit+0xb4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d144      	bne.n	8002e48 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <HAL_SPI_MspInit+0xb8>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002e06:	2302      	movs	r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e16:	2305      	movs	r3, #5
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <HAL_SPI_MspInit+0xbc>)
 8002e22:	f002 fc07 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002e26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e38:	2305      	movs	r3, #5
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	4806      	ldr	r0, [pc, #24]	; (8002e5c <HAL_SPI_MspInit+0xc0>)
 8002e44:	f002 fbf6 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40003800 	.word	0x40003800
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40020400 	.word	0x40020400

08002e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_TIM_Base_MspInit+0xc8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10c      	bne.n	8002e8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4a2d      	ldr	r2, [pc, #180]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002e8a:	e046      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e96:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	69bb      	ldr	r3, [r7, #24]
}
 8002eae:	e034      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_TIM_Base_MspInit+0xd0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
}
 8002ed2:	e022      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIM_Base_MspInit+0xd4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10c      	bne.n	8002ef8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
}
 8002ef6:	e010      	b.n	8002f1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_TIM_Base_MspInit+0xd8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10b      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_TIM_Base_MspInit+0xcc>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
}
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_TIM_PWM_MspInit+0x38>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10b      	bne.n	8002f66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40001800 	.word	0x40001800
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_TIM_MspPostInit+0x178>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d11d      	bne.n	8002fda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	4b56      	ldr	r3, [pc, #344]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	484a      	ldr	r0, [pc, #296]	; (80030fc <HAL_TIM_MspPostInit+0x180>)
 8002fd4:	f002 fb2e 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002fd8:	e087      	b.n	80030ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d11d      	bne.n	8003020 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe4:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4a43      	ldr	r2, [pc, #268]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	4838      	ldr	r0, [pc, #224]	; (80030fc <HAL_TIM_MspPostInit+0x180>)
 800301a:	f002 fb0b 	bl	8005634 <HAL_GPIO_Init>
}
 800301e:	e064      	b.n	80030ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_TIM_MspPostInit+0x184>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d11c      	bne.n	8003064 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003042:	2310      	movs	r3, #16
 8003044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003052:	2302      	movs	r3, #2
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	4829      	ldr	r0, [pc, #164]	; (8003104 <HAL_TIM_MspPostInit+0x188>)
 800305e:	f002 fae9 	bl	8005634 <HAL_GPIO_Init>
}
 8003062:	e042      	b.n	80030ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_TIM_MspPostInit+0x18c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d11c      	bne.n	80030a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003096:	2302      	movs	r3, #2
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	481a      	ldr	r0, [pc, #104]	; (800310c <HAL_TIM_MspPostInit+0x190>)
 80030a2:	f002 fac7 	bl	8005634 <HAL_GPIO_Init>
}
 80030a6:	e020      	b.n	80030ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_TIM_MspPostInit+0x194>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_TIM_MspPostInit+0x17c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80030da:	2309      	movs	r3, #9
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <HAL_TIM_MspPostInit+0x198>)
 80030e6:	f002 faa5 	bl	8005634 <HAL_GPIO_Init>
}
 80030ea:	bf00      	nop
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40000400 	.word	0x40000400
 8003104:	40020400 	.word	0x40020400
 8003108:	40000c00 	.word	0x40000c00
 800310c:	40022000 	.word	0x40022000
 8003110:	40001800 	.word	0x40001800
 8003114:	40021c00 	.word	0x40021c00

08003118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_UART_MspInit+0x110>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d145      	bne.n	80031c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_UART_MspInit+0x114>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_UART_MspInit+0x114>)
 8003140:	f043 0310 	orr.w	r3, r3, #16
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_UART_MspInit+0x114>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_UART_MspInit+0x114>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a35      	ldr	r2, [pc, #212]	; (800322c <HAL_UART_MspInit+0x114>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_UART_MspInit+0x114>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_UART_MspInit+0x114>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a2f      	ldr	r2, [pc, #188]	; (800322c <HAL_UART_MspInit+0x114>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_UART_MspInit+0x114>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003192:	2307      	movs	r3, #7
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	4824      	ldr	r0, [pc, #144]	; (8003230 <HAL_UART_MspInit+0x118>)
 800319e:	f002 fa49 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b4:	2307      	movs	r3, #7
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	4619      	mov	r1, r3
 80031be:	481d      	ldr	r0, [pc, #116]	; (8003234 <HAL_UART_MspInit+0x11c>)
 80031c0:	f002 fa38 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031c4:	e02c      	b.n	8003220 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_UART_MspInit+0x120>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d127      	bne.n	8003220 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_UART_MspInit+0x114>)
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <HAL_UART_MspInit+0x114>)
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	6453      	str	r3, [r2, #68]	; 0x44
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_UART_MspInit+0x114>)
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_UART_MspInit+0x114>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_UART_MspInit+0x114>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6313      	str	r3, [r2, #48]	; 0x30
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_UART_MspInit+0x114>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003210:	2308      	movs	r3, #8
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4808      	ldr	r0, [pc, #32]	; (800323c <HAL_UART_MspInit+0x124>)
 800321c:	f002 fa0a 	bl	8005634 <HAL_GPIO_Init>
}
 8003220:	bf00      	nop
 8003222:	3730      	adds	r7, #48	; 0x30
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40011000 	.word	0x40011000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020400 	.word	0x40020400
 8003234:	40020000 	.word	0x40020000
 8003238:	40011400 	.word	0x40011400
 800323c:	40020800 	.word	0x40020800

08003240 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003254:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_FMC_MspInit+0x100>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d16d      	bne.n	8003338 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <HAL_FMC_MspInit+0x100>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003262:	4b38      	ldr	r3, [pc, #224]	; (8003344 <HAL_FMC_MspInit+0x104>)
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_FMC_MspInit+0x104>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6393      	str	r3, [r2, #56]	; 0x38
 800326e:	4b35      	ldr	r3, [pc, #212]	; (8003344 <HAL_FMC_MspInit+0x104>)
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800327a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800327e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800328c:	230c      	movs	r3, #12
 800328e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	4619      	mov	r1, r3
 8003294:	482c      	ldr	r0, [pc, #176]	; (8003348 <HAL_FMC_MspInit+0x108>)
 8003296:	f002 f9cd 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800329a:	f248 1333 	movw	r3, #33075	; 0x8133
 800329e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a8:	2303      	movs	r3, #3
 80032aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032ac:	230c      	movs	r3, #12
 80032ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4825      	ldr	r0, [pc, #148]	; (800334c <HAL_FMC_MspInit+0x10c>)
 80032b6:	f002 f9bd 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80032ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032be:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032cc:	230c      	movs	r3, #12
 80032ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	481e      	ldr	r0, [pc, #120]	; (8003350 <HAL_FMC_MspInit+0x110>)
 80032d6:	f002 f9ad 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80032da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80032de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032ec:	230c      	movs	r3, #12
 80032ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4817      	ldr	r0, [pc, #92]	; (8003354 <HAL_FMC_MspInit+0x114>)
 80032f6:	f002 f99d 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80032fa:	2328      	movs	r3, #40	; 0x28
 80032fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800330a:	230c      	movs	r3, #12
 800330c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4811      	ldr	r0, [pc, #68]	; (8003358 <HAL_FMC_MspInit+0x118>)
 8003314:	f002 f98e 	bl	8005634 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003318:	2308      	movs	r3, #8
 800331a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003328:	230c      	movs	r3, #12
 800332a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	480a      	ldr	r0, [pc, #40]	; (800335c <HAL_FMC_MspInit+0x11c>)
 8003332:	f002 f97f 	bl	8005634 <HAL_GPIO_Init>
 8003336:	e000      	b.n	800333a <HAL_FMC_MspInit+0xfa>
    return;
 8003338:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200003e4 	.word	0x200003e4
 8003344:	40023800 	.word	0x40023800
 8003348:	40021000 	.word	0x40021000
 800334c:	40021800 	.word	0x40021800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021400 	.word	0x40021400
 8003358:	40021c00 	.word	0x40021c00
 800335c:	40020800 	.word	0x40020800

08003360 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003368:	f7ff ff6a 	bl	8003240 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_SAI_MspInit+0xbc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d124      	bne.n	80033d0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 8003394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 80033ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80033b0:	23f0      	movs	r3, #240	; 0xf0
 80033b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80033c0:	230a      	movs	r3, #10
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	481c      	ldr	r0, [pc, #112]	; (800343c <HAL_SAI_MspInit+0xc8>)
 80033cc:	f002 f932 	bl	8005634 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_SAI_MspInit+0xcc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d125      	bne.n	8003426 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 80033e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033ec:	6453      	str	r3, [r2, #68]	; 0x44
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_SAI_MspInit+0xc4>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <HAL_SAI_MspInit+0xc0>)
 8003402:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003416:	230a      	movs	r3, #10
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4808      	ldr	r0, [pc, #32]	; (8003444 <HAL_SAI_MspInit+0xd0>)
 8003422:	f002 f907 	bl	8005634 <HAL_GPIO_Init>

    }
}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40015c04 	.word	0x40015c04
 8003434:	200003e8 	.word	0x200003e8
 8003438:	40023800 	.word	0x40023800
 800343c:	40022000 	.word	0x40022000
 8003440:	40015c24 	.word	0x40015c24
 8003444:	40021800 	.word	0x40021800

08003448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003458:	2200      	movs	r2, #0
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	2036      	movs	r0, #54	; 0x36
 800345e:	f001 fabb 	bl	80049d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003462:	2036      	movs	r0, #54	; 0x36
 8003464:	f001 fad4 	bl	8004a10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_InitTick+0xa0>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_InitTick+0xa0>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_InitTick+0xa0>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003480:	f107 0210 	add.w	r2, r7, #16
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f004 f90a 	bl	80076a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003490:	f004 f8e0 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 8003494:	4603      	mov	r3, r0
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <HAL_InitTick+0xa4>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	3b01      	subs	r3, #1
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_InitTick+0xa8>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <HAL_InitTick+0xac>)
 80034ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_InitTick+0xa8>)
 80034b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034b6:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <HAL_InitTick+0xa8>)
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_InitTick+0xa8>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_InitTick+0xa8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034c8:	4809      	ldr	r0, [pc, #36]	; (80034f0 <HAL_InitTick+0xa8>)
 80034ca:	f006 fd83 	bl	8009fd4 <HAL_TIM_Base_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <HAL_InitTick+0xa8>)
 80034d6:	f006 fda9 	bl	800a02c <HAL_TIM_Base_Start_IT>
 80034da:	4603      	mov	r3, r0
 80034dc:	e000      	b.n	80034e0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3730      	adds	r7, #48	; 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	431bde83 	.word	0x431bde83
 80034f0:	2000c9e0 	.word	0x2000c9e0
 80034f4:	40001000 	.word	0x40001000

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <HardFault_Handler+0x4>

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <MemManage_Handler+0x4>

08003512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler+0x4>

0800351e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <CAN1_RX0_IRQHandler+0x10>)
 8003532:	f000 ff4d 	bl	80043d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2000c4c8 	.word	0x2000c4c8

08003540 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <TIM6_DAC_IRQHandler+0x10>)
 8003546:	f006 fdc6 	bl	800a0d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000c9e0 	.word	0x2000c9e0

08003554 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <LTDC_IRQHandler+0x10>)
 800355a:	f003 f843 	bl	80065e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000c330 	.word	0x2000c330

08003568 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA2D_IRQHandler+0x10>)
 800356e:	f001 fe22 	bl	80051b6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000c43c 	.word	0x2000c43c

0800357c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
	return 1;
 8003580:	2301      	movs	r3, #1
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_kill>:

int _kill(int pid, int sig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003596:	f027 fec7 	bl	802b328 <__errno>
 800359a:	4602      	mov	r2, r0
 800359c:	2316      	movs	r3, #22
 800359e:	6013      	str	r3, [r2, #0]
	return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_exit>:

void _exit (int status)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ffe7 	bl	800358c <_kill>
	while (1) {}		/* Make sure we hang here */
 80035be:	e7fe      	b.n	80035be <_exit+0x12>

080035c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e00a      	b.n	80035e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035d2:	f3af 8000 	nop.w
 80035d6:	4601      	mov	r1, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	60ba      	str	r2, [r7, #8]
 80035de:	b2ca      	uxtb	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbf0      	blt.n	80035d2 <_read+0x12>
	}

return len;
 80035f0:	687b      	ldr	r3, [r7, #4]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e009      	b.n	8003620 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60ba      	str	r2, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	dbf1      	blt.n	800360c <_write+0x12>
	}
	return len;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_close>:

int _close(int file)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
	return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365a:	605a      	str	r2, [r3, #4]
	return 0;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <_isatty>:

int _isatty(int file)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	return 1;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <_sbrk+0x50>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <_sbrk+0x16>
		heap_end = &end;
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_sbrk+0x50>)
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <_sbrk+0x54>)
 80036b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <_sbrk+0x50>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <_sbrk+0x50>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	466a      	mov	r2, sp
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d907      	bls.n	80036d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80036c6:	f027 fe2f 	bl	802b328 <__errno>
 80036ca:	4602      	mov	r2, r0
 80036cc:	230c      	movs	r3, #12
 80036ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e006      	b.n	80036e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <_sbrk+0x50>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <_sbrk+0x50>)
 80036e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200003ec 	.word	0x200003ec
 80036f0:	2000ce98 	.word	0x2000ce98

080036f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <SystemInit+0x28>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <SystemInit+0x28>)
 8003700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <SystemInit+0x28>)
 800370a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370e:	609a      	str	r2, [r3, #8]
#endif
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003726:	e003      	b.n	8003730 <LoopCopyDataInit>

08003728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800372a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800372c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800372e:	3104      	adds	r1, #4

08003730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003730:	480b      	ldr	r0, [pc, #44]	; (8003760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003738:	d3f6      	bcc.n	8003728 <CopyDataInit>
  ldr  r2, =_sbss
 800373a:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800373c:	e002      	b.n	8003744 <LoopFillZerobss>

0800373e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800373e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003740:	f842 3b04 	str.w	r3, [r2], #4

08003744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003748:	d3f9      	bcc.n	800373e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800374a:	f7ff ffd3 	bl	80036f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800374e:	f027 fe03 	bl	802b358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003752:	f7fd fb03 	bl	8000d5c <main>
  bx  lr    
 8003756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003758:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800375c:	080882d0 	.word	0x080882d0
  ldr  r0, =_sdata
 8003760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003764:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8003768:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 800376c:	2000ce94 	.word	0x2000ce94

08003770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003770:	e7fe      	b.n	8003770 <ADC_IRQHandler>

08003772 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003776:	2003      	movs	r0, #3
 8003778:	f001 f923 	bl	80049c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff fe63 	bl	8003448 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003782:	f7fe ff09 	bl	8002598 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x20>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_IncTick+0x24>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000018 	.word	0x20000018
 80037b0:	2000ca20 	.word	0x2000ca20

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000ca20 	.word	0x2000ca20

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff ffee 	bl	80037b4 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_Delay+0x40>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f2:	bf00      	nop
 80037f4:	f7ff ffde 	bl	80037b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000018 	.word	0x20000018

08003810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e031      	b.n	800388a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe feda 	bl	80025e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_ADC_Init+0x84>)
 8003854:	4013      	ands	r3, r2
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f964 	bl	8003b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
 800387a:	e001      	b.n	8003880 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	ffffeefd 	.word	0xffffeefd

08003898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e12a      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x272>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b09      	cmp	r3, #9
 80038c2:	d93a      	bls.n	800393a <HAL_ADC_ConfigChannel+0xa2>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038cc:	d035      	beq.n	800393a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68d9      	ldr	r1, [r3, #12]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	3b1e      	subs	r3, #30
 80038e4:	2207      	movs	r2, #7
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	400a      	ands	r2, r1
 80038f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a87      	ldr	r2, [pc, #540]	; (8003b18 <HAL_ADC_ConfigChannel+0x280>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10a      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68d9      	ldr	r1, [r3, #12]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003912:	e035      	b.n	8003980 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	4603      	mov	r3, r0
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4403      	add	r3, r0
 800392c:	3b1e      	subs	r3, #30
 800392e:	409a      	lsls	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003938:	e022      	b.n	8003980 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6919      	ldr	r1, [r3, #16]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	2207      	movs	r2, #7
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43da      	mvns	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	400a      	ands	r2, r1
 800395c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6919      	ldr	r1, [r3, #16]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4618      	mov	r0, r3
 8003970:	4603      	mov	r3, r0
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4403      	add	r3, r0
 8003976:	409a      	lsls	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d824      	bhi.n	80039d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	3b05      	subs	r3, #5
 800399a:	221f      	movs	r2, #31
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43da      	mvns	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	400a      	ands	r2, r1
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	3b05      	subs	r3, #5
 80039c4:	fa00 f203 	lsl.w	r2, r0, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34
 80039d0:	e04c      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d824      	bhi.n	8003a24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	3b23      	subs	r3, #35	; 0x23
 80039ec:	221f      	movs	r2, #31
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	400a      	ands	r2, r1
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b23      	subs	r3, #35	; 0x23
 8003a16:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
 8003a22:	e023      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	3b41      	subs	r3, #65	; 0x41
 8003a36:	221f      	movs	r2, #31
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	400a      	ands	r2, r1
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3b41      	subs	r3, #65	; 0x41
 8003a60:	fa00 f203 	lsl.w	r2, r0, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HAL_ADC_ConfigChannel+0x284>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10a      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1f4>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7e:	d105      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003a86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <HAL_ADC_ConfigChannel+0x284>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d109      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x212>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b12      	cmp	r3, #18
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_ADC_ConfigChannel+0x284>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d125      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x268>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_ADC_ConfigChannel+0x280>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <HAL_ADC_ConfigChannel+0x22e>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b11      	cmp	r3, #17
 8003ac4:	d11c      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <HAL_ADC_ConfigChannel+0x288>)
 8003acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_ADC_ConfigChannel+0x280>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_ADC_ConfigChannel+0x28c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_ADC_ConfigChannel+0x290>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0c9a      	lsrs	r2, r3, #18
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003af2:	e002      	b.n	8003afa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f9      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	10000012 	.word	0x10000012
 8003b1c:	40012000 	.word	0x40012000
 8003b20:	40012300 	.word	0x40012300
 8003b24:	20000010 	.word	0x20000010
 8003b28:	431bde83 	.word	0x431bde83

08003b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b34:	4b78      	ldr	r3, [pc, #480]	; (8003d18 <ADC_Init+0x1ec>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <ADC_Init+0x1ec>)
 8003b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b40:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <ADC_Init+0x1ec>)
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4973      	ldr	r1, [pc, #460]	; (8003d18 <ADC_Init+0x1ec>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <ADC_Init+0x1f0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	e00f      	b.n	8003c26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0202 	bic.w	r2, r2, #2
 8003c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	005a      	lsls	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01b      	beq.n	8003c8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	035a      	lsls	r2, r3, #13
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	e007      	b.n	8003c9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	051a      	lsls	r2, r3, #20
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cde:	025a      	lsls	r2, r3, #9
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	029a      	lsls	r2, r3, #10
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40012300 	.word	0x40012300
 8003d1c:	0f000001 	.word	0x0f000001

08003d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0ed      	b.n	8003f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fcac 	bl	800269c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0202 	bic.w	r2, r2, #2
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d54:	f7ff fd2e 	bl	80037b4 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d5a:	e012      	b.n	8003d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d5c:	f7ff fd2a 	bl	80037b4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b0a      	cmp	r3, #10
 8003d68:	d90b      	bls.n	8003d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0c5      	b.n	8003f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da0:	f7ff fd08 	bl	80037b4 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003da6:	e012      	b.n	8003dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003da8:	f7ff fd04 	bl	80037b4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b0a      	cmp	r3, #10
 8003db4:	d90b      	bls.n	8003dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e09f      	b.n	8003f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0e5      	beq.n	8003da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d108      	bne.n	8003df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e007      	b.n	8003e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7e5b      	ldrb	r3, [r3, #25]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d108      	bne.n	8003e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e007      	b.n	8003e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7e9b      	ldrb	r3, [r3, #26]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0220 	orr.w	r2, r2, #32
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e007      	b.n	8003e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0220 	bic.w	r2, r2, #32
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7edb      	ldrb	r3, [r3, #27]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d108      	bne.n	8003e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0210 	bic.w	r2, r2, #16
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0210 	orr.w	r2, r2, #16
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7f1b      	ldrb	r3, [r3, #28]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d108      	bne.n	8003e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e007      	b.n	8003eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0208 	bic.w	r2, r2, #8
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7f5b      	ldrb	r3, [r3, #29]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d108      	bne.n	8003ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0204 	orr.w	r2, r2, #4
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e007      	b.n	8003ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	ea42 0103 	orr.w	r1, r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d003      	beq.n	8003f3e <HAL_CAN_ConfigFilter+0x26>
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	f040 80be 	bne.w	80040ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003f40:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	401a      	ands	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d123      	bne.n	8003fe8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3248      	adds	r2, #72	; 0x48
 8003fc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	3348      	adds	r3, #72	; 0x48
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d122      	bne.n	8004036 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004010:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3248      	adds	r2, #72	; 0x48
 8004016:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800402a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	3348      	adds	r3, #72	; 0x48
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	440b      	add	r3, r1
 8004034:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	401a      	ands	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004050:	e007      	b.n	8004062 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	431a      	orrs	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800407c:	e007      	b.n	800408e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	431a      	orrs	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d107      	bne.n	80040a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	431a      	orrs	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ac:	f023 0201 	bic.w	r2, r3, #1
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e006      	b.n	80040c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40006400 	.word	0x40006400

080040d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d12e      	bne.n	800414a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004104:	f7ff fb56 	bl	80037b4 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800410a:	e012      	b.n	8004132 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800410c:	f7ff fb52 	bl	80037b4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d90b      	bls.n	8004132 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2205      	movs	r2, #5
 800412a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e012      	b.n	8004158 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e006      	b.n	8004158 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004174:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d003      	beq.n	8004184 <HAL_CAN_GetRxMessage+0x24>
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b02      	cmp	r3, #2
 8004180:	f040 80f3 	bne.w	800436a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10e      	bne.n	80041a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0e7      	b.n	8004378 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0d8      	b.n	8004378 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	331b      	adds	r3, #27
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0204 	and.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	331b      	adds	r3, #27
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	4413      	add	r3, r2
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0d5b      	lsrs	r3, r3, #21
 80041f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e00b      	b.n	8004216 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	331b      	adds	r3, #27
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	4413      	add	r3, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	08db      	lsrs	r3, r3, #3
 800420e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	331b      	adds	r3, #27
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4413      	add	r3, r2
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0202 	and.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	331b      	adds	r3, #27
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4413      	add	r3, r2
 8004238:	3304      	adds	r3, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	331b      	adds	r3, #27
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b2da      	uxtb	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	331b      	adds	r3, #27
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4413      	add	r3, r2
 8004294:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	0a1a      	lsrs	r2, r3, #8
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	3301      	adds	r3, #1
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0c1a      	lsrs	r2, r3, #16
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3302      	adds	r3, #2
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0e1a      	lsrs	r2, r3, #24
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	3303      	adds	r3, #3
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	3304      	adds	r3, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0a1a      	lsrs	r2, r3, #8
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	3305      	adds	r3, #5
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4413      	add	r3, r2
 8004314:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	0c1a      	lsrs	r2, r3, #16
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	3306      	adds	r3, #6
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	4413      	add	r3, r2
 800432e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e1a      	lsrs	r2, r3, #24
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3307      	adds	r3, #7
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d108      	bne.n	8004356 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0220 	orr.w	r2, r2, #32
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e007      	b.n	8004366 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0220 	orr.w	r2, r2, #32
 8004364:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e006      	b.n	8004378 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d002      	beq.n	80043a2 <HAL_CAN_ActivateNotification+0x1e>
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d109      	bne.n	80043b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6959      	ldr	r1, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e006      	b.n	80043c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d07c      	beq.n	8004510 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d023      	beq.n	8004468 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f97d 	bl	8004732 <HAL_CAN_TxMailbox0CompleteCallback>
 8004438:	e016      	b.n	8004468 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e00c      	b.n	8004468 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	e002      	b.n	8004468 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f983 	bl	800476e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d024      	beq.n	80044bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f95d 	bl	8004746 <HAL_CAN_TxMailbox1CompleteCallback>
 800448c:	e016      	b.n	80044bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e00c      	b.n	80044bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	e002      	b.n	80044bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f963 	bl	8004782 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d024      	beq.n	8004510 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f93d 	bl	800475a <HAL_CAN_TxMailbox2CompleteCallback>
 80044e0:	e016      	b.n	8004510 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	e00c      	b.n	8004510 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e002      	b.n	8004510 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f943 	bl	8004796 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2210      	movs	r2, #16
 8004532:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f92a 	bl	80047aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fdd0 	bl	8001114 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800458e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2208      	movs	r2, #8
 80045b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f90c 	bl	80047d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8f3 	bl	80047be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2210      	movs	r2, #16
 80045f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8f6 	bl	80047e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2208      	movs	r2, #8
 8004614:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8ef 	bl	80047fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d075      	beq.n	8004712 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d06c      	beq.n	800470a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	f043 0302 	orr.w	r3, r3, #2
 8004666:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468a:	2b00      	cmp	r3, #0
 800468c:	d03d      	beq.n	800470a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004694:	2b00      	cmp	r3, #0
 8004696:	d038      	beq.n	800470a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800469e:	2b30      	cmp	r3, #48	; 0x30
 80046a0:	d017      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x302>
 80046a2:	2b30      	cmp	r3, #48	; 0x30
 80046a4:	d804      	bhi.n	80046b0 <HAL_CAN_IRQHandler+0x2e0>
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d009      	beq.n	80046be <HAL_CAN_IRQHandler+0x2ee>
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d00c      	beq.n	80046c8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80046ae:	e024      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80046b0:	2b50      	cmp	r3, #80	; 0x50
 80046b2:	d018      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x316>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d01b      	beq.n	80046f0 <HAL_CAN_IRQHandler+0x320>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d00f      	beq.n	80046dc <HAL_CAN_IRQHandler+0x30c>
            break;
 80046bc:	e01d      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046c6:	e018      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f043 0310 	orr.w	r3, r3, #16
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046d0:	e013      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f043 0320 	orr.w	r3, r3, #32
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046da:	e00e      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046e4:	e009      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046ee:	e004      	b.n	80046fa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004708:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f872 	bl	800480e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800472a:	bf00      	nop
 800472c:	3728      	adds	r7, #40	; 0x28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <__NVIC_SetPriorityGrouping+0x40>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 800484e:	4313      	orrs	r3, r2
 8004850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <__NVIC_SetPriorityGrouping+0x40>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	60d3      	str	r3, [r2, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00
 8004868:	05fa0000 	.word	0x05fa0000

0800486c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <__NVIC_GetPriorityGrouping+0x18>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 0307 	and.w	r3, r3, #7
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db0b      	blt.n	80048b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4907      	ldr	r1, [pc, #28]	; (80048c0 <__NVIC_EnableIRQ+0x38>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e100 	.word	0xe000e100

080048c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db10      	blt.n	80048f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	f003 021f 	and.w	r2, r3, #31
 80048dc:	4909      	ldr	r1, [pc, #36]	; (8004904 <__NVIC_DisableIRQ+0x40>)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2001      	movs	r0, #1
 80048e6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ea:	3320      	adds	r3, #32
 80048ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	; (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	; 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf28      	it	cs
 800497a:	2304      	movcs	r3, #4
 800497c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
 8004982:	2b06      	cmp	r3, #6
 8004984:	d902      	bls.n	800498c <NVIC_EncodePriority+0x30>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3b03      	subs	r3, #3
 800498a:	e000      	b.n	800498e <NVIC_EncodePriority+0x32>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	401a      	ands	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43d9      	mvns	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	4313      	orrs	r3, r2
         );
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	; 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff2a 	bl	8004824 <__NVIC_SetPriorityGrouping>
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049ea:	f7ff ff3f 	bl	800486c <__NVIC_GetPriorityGrouping>
 80049ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7ff ffb1 	bl	800495c <NVIC_EncodePriority>
 80049fa:	4602      	mov	r2, r0
 80049fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ff80 	bl	8004908 <__NVIC_SetPriority>
}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff ff32 	bl	8004888 <__NVIC_EnableIRQ>
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ff42 	bl	80048c4 <__NVIC_DisableIRQ>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e054      	b.n	8004b04 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7f5b      	ldrb	r3, [r3, #29]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fe62 	bl	8002734 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	791b      	ldrb	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_CRC_Init+0xc4>)
 8004a84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0218 	bic.w	r2, r2, #24
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	e00c      	b.n	8004ab2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6899      	ldr	r1, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f834 	bl	8004b10 <HAL_CRCEx_Polynomial_Set>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e028      	b.n	8004b04 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	795b      	ldrb	r3, [r3, #5]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	611a      	str	r2, [r3, #16]
 8004ac4:	e004      	b.n	8004ad0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6912      	ldr	r2, [r2, #16]
 8004ace:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	04c11db7 	.word	0x04c11db7

08004b10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b20:	231f      	movs	r3, #31
 8004b22:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b24:	bf00      	nop
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	613a      	str	r2, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b18      	cmp	r3, #24
 8004b48:	d846      	bhi.n	8004bd8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004bdf 	.word	0x08004bdf
 8004b54:	08004bd9 	.word	0x08004bd9
 8004b58:	08004bd9 	.word	0x08004bd9
 8004b5c:	08004bd9 	.word	0x08004bd9
 8004b60:	08004bd9 	.word	0x08004bd9
 8004b64:	08004bd9 	.word	0x08004bd9
 8004b68:	08004bd9 	.word	0x08004bd9
 8004b6c:	08004bd9 	.word	0x08004bd9
 8004b70:	08004bcd 	.word	0x08004bcd
 8004b74:	08004bd9 	.word	0x08004bd9
 8004b78:	08004bd9 	.word	0x08004bd9
 8004b7c:	08004bd9 	.word	0x08004bd9
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004bd9 	.word	0x08004bd9
 8004b8c:	08004bd9 	.word	0x08004bd9
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bd9 	.word	0x08004bd9
 8004b98:	08004bd9 	.word	0x08004bd9
 8004b9c:	08004bd9 	.word	0x08004bd9
 8004ba0:	08004bd9 	.word	0x08004bd9
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004bd9 	.word	0x08004bd9
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004bb5 	.word	0x08004bb5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d913      	bls.n	8004be2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bbe:	e010      	b.n	8004be2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	d90f      	bls.n	8004be6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bca:	e00c      	b.n	8004be6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d90b      	bls.n	8004bea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bd6:	e008      	b.n	8004bea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
      break;
 8004bdc:	e006      	b.n	8004bec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bde:	bf00      	nop
 8004be0:	e004      	b.n	8004bec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bea:	bf00      	nop
  }
  if (status == HAL_OK)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0118 	bic.w	r1, r3, #24
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e069      	b.n	8004d02 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fd9a 	bl	8002774 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <HAL_DCMI_Init+0xf0>)
 8004c62:	400b      	ands	r3, r1
 8004c64:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004c86:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004c92:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c9e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004caa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d112      	bne.n	8004ce2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7f1b      	ldrb	r3, [r3, #28]
 8004cc0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	7f5b      	ldrb	r3, [r3, #29]
 8004cc6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004cc8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7f9b      	ldrb	r3, [r3, #30]
 8004cce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004cd0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7fdb      	ldrb	r3, [r3, #31]
 8004cd8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004cde:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ce0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 021e 	orr.w	r2, r2, #30
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	ffe0f007 	.word	0xffe0f007

08004d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_DMA_Start_IT+0x26>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e048      	b.n	8004dc8 <HAL_DMA_Start_IT+0xb8>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d137      	bne.n	8004dba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f842 	bl	8004de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0216 	orr.w	r2, r2, #22
 8004d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e005      	b.n	8004dc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d108      	bne.n	8004e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e26:	e007      	b.n	8004e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e039      	b.n	8004eca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fd fd40 	bl	80028f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	f023 0107 	bic.w	r1, r3, #7
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <HAL_DMA2D_Init+0x90>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68d1      	ldr	r1, [r2, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	ffffc000 	.word	0xffffc000

08004ed8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e05f      	b.n	8004faa <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004eea:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <HAL_DMA2D_DeInit+0xdc>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02e      	beq.n	8004f54 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8c1 	bl	800508c <HAL_DMA2D_Abort>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d021      	beq.n	8004f54 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04a      	b.n	8004faa <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d108      	bne.n	8004f34 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004f22:	2100      	movs	r1, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8f7 	bl	8005118 <HAL_DMA2D_CLUTLoading_Abort>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d011      	beq.n	8004f54 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e03a      	b.n	8004faa <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d108      	bne.n	8004f54 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004f42:	2101      	movs	r1, #1
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f8e7 	bl	8005118 <HAL_DMA2D_CLUTLoading_Abort>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e02a      	b.n	8004faa <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	223f      	movs	r2, #63	; 0x3f
 8004f62:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2200      	movs	r2, #0
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fd fcd5 	bl	800293c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_DMA2D_Start_IT+0x1c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e020      	b.n	8005016 <HAL_DMA2D_Start_IT+0x5e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fa84 	bl	80054fc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005002:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af02      	add	r7, sp, #8
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8005036:	2302      	movs	r3, #2
 8005038:	e024      	b.n	8005084 <HAL_DMA2D_BlendingStart_IT+0x66>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fa4d 	bl	80054fc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005070:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 0205 	bic.w	r2, r3, #5
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0204 	orr.w	r2, r2, #4
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a8:	f7fe fb84 	bl	80037b4 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80050ae:	e017      	b.n	80050e0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80050b0:	f7fe fb80 	bl	80037b4 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050be:	d90f      	bls.n	80050e0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2203      	movs	r2, #3
 80050d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e017      	b.n	8005110 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e0      	bne.n	80050b0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80050fc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0204 	orr.w	r2, r2, #4
 8005138:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d103      	bne.n	8005148 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	331c      	adds	r3, #28
 8005146:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005148:	f7fe fb34 	bl	80037b4 <HAL_GetTick>
 800514c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800514e:	e017      	b.n	8005180 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005150:	f7fe fb30 	bl	80037b4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800515e:	d90f      	bls.n	8005180 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2203      	movs	r2, #3
 8005170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e016      	b.n	80051ae <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e1      	bne.n	8005150 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800519a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d026      	beq.n	8005226 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d021      	beq.n	8005226 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2201      	movs	r2, #1
 8005204:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d026      	beq.n	800527e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d021      	beq.n	800527e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005248:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2220      	movs	r2, #32
 8005250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	f043 0202 	orr.w	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2204      	movs	r2, #4
 8005262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d026      	beq.n	80052d6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528e:	2b00      	cmp	r3, #0
 8005290:	d021      	beq.n	80052d6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2208      	movs	r2, #8
 80052a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2204      	movs	r2, #4
 8005300:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f853 	bl	80053ae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d024      	beq.n	800535c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2202      	movs	r2, #2
 8005332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01f      	beq.n	80053a6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01a      	beq.n	80053a6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800537e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2210      	movs	r2, #16
 8005386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f80e 	bl	80053c2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA2D_ConfigLayer+0x20>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e079      	b.n	80054ec <HAL_DMA2D_ConfigLayer+0x114>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	3318      	adds	r3, #24
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005422:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005424:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b0a      	cmp	r3, #10
 800542c:	d003      	beq.n	8005436 <HAL_DMA2D_ConfigLayer+0x5e>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b09      	cmp	r3, #9
 8005434:	d107      	bne.n	8005446 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e005      	b.n	8005452 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d120      	bne.n	800549a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	43db      	mvns	r3, r3
 8005462:	ea02 0103 	and.w	r1, r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	430a      	orrs	r2, r1
 800546e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b0a      	cmp	r3, #10
 8005480:	d003      	beq.n	800548a <HAL_DMA2D_ConfigLayer+0xb2>
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b09      	cmp	r3, #9
 8005488:	d127      	bne.n	80054da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
 8005498:	e01f      	b.n	80054da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	ea02 0103 	and.w	r1, r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b0a      	cmp	r3, #10
 80054c2:	d003      	beq.n	80054cc <HAL_DMA2D_ConfigLayer+0xf4>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d106      	bne.n	80054da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80054d8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	ff03000f 	.word	0xff03000f

080054fc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b08b      	sub	sp, #44	; 0x2c
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005510:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	041a      	lsls	r2, r3, #16
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	431a      	orrs	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005534:	d174      	bne.n	8005620 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800553c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005544:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800554c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	431a      	orrs	r2, r3
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	4313      	orrs	r3, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
 800556c:	e053      	b.n	8005616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d106      	bne.n	8005584 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4313      	orrs	r3, r2
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	e048      	b.n	8005616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d111      	bne.n	80055b0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	0cdb      	lsrs	r3, r3, #19
 8005590:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	0a9b      	lsrs	r3, r3, #10
 8005596:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	02db      	lsls	r3, r3, #11
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e032      	b.n	8005616 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d117      	bne.n	80055e8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	0fdb      	lsrs	r3, r3, #31
 80055bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	0cdb      	lsrs	r3, r3, #19
 80055c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	0adb      	lsrs	r3, r3, #11
 80055c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	431a      	orrs	r2, r3
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	03db      	lsls	r3, r3, #15
 80055de:	4313      	orrs	r3, r2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	e016      	b.n	8005616 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	0f1b      	lsrs	r3, r3, #28
 80055ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	0d1b      	lsrs	r3, r3, #20
 80055f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	0b1b      	lsrs	r3, r3, #12
 80055f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	011a      	lsls	r2, r3, #4
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	431a      	orrs	r2, r3
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	4313      	orrs	r3, r2
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800561e:	e003      	b.n	8005628 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	60da      	str	r2, [r3, #12]
}
 8005628:	bf00      	nop
 800562a:	372c      	adds	r7, #44	; 0x2c
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e175      	b.n	8005940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005654:	2201      	movs	r2, #1
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	429a      	cmp	r2, r3
 800566e:	f040 8164 	bne.w	800593a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d00b      	beq.n	8005692 <HAL_GPIO_Init+0x5e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005686:	2b11      	cmp	r3, #17
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b12      	cmp	r3, #18
 8005690:	d130      	bne.n	80056f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	2203      	movs	r2, #3
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056c8:	2201      	movs	r2, #1
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 0201 	and.w	r2, r3, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x100>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b12      	cmp	r3, #18
 8005732:	d123      	bne.n	800577c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	08da      	lsrs	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3208      	adds	r2, #8
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	220f      	movs	r2, #15
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	08da      	lsrs	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3208      	adds	r2, #8
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2203      	movs	r2, #3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 0203 	and.w	r2, r3, #3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80be 	beq.w	800593a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	4b65      	ldr	r3, [pc, #404]	; (8005954 <HAL_GPIO_Init+0x320>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	4a64      	ldr	r2, [pc, #400]	; (8005954 <HAL_GPIO_Init+0x320>)
 80057c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <HAL_GPIO_Init+0x320>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057d6:	4a60      	ldr	r2, [pc, #384]	; (8005958 <HAL_GPIO_Init+0x324>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a57      	ldr	r2, [pc, #348]	; (800595c <HAL_GPIO_Init+0x328>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d037      	beq.n	8005872 <HAL_GPIO_Init+0x23e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a56      	ldr	r2, [pc, #344]	; (8005960 <HAL_GPIO_Init+0x32c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_GPIO_Init+0x23a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a55      	ldr	r2, [pc, #340]	; (8005964 <HAL_GPIO_Init+0x330>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d02b      	beq.n	800586a <HAL_GPIO_Init+0x236>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a54      	ldr	r2, [pc, #336]	; (8005968 <HAL_GPIO_Init+0x334>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d025      	beq.n	8005866 <HAL_GPIO_Init+0x232>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a53      	ldr	r2, [pc, #332]	; (800596c <HAL_GPIO_Init+0x338>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <HAL_GPIO_Init+0x22e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a52      	ldr	r2, [pc, #328]	; (8005970 <HAL_GPIO_Init+0x33c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d019      	beq.n	800585e <HAL_GPIO_Init+0x22a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a51      	ldr	r2, [pc, #324]	; (8005974 <HAL_GPIO_Init+0x340>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_GPIO_Init+0x226>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a50      	ldr	r2, [pc, #320]	; (8005978 <HAL_GPIO_Init+0x344>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00d      	beq.n	8005856 <HAL_GPIO_Init+0x222>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a4f      	ldr	r2, [pc, #316]	; (800597c <HAL_GPIO_Init+0x348>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <HAL_GPIO_Init+0x21e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4e      	ldr	r2, [pc, #312]	; (8005980 <HAL_GPIO_Init+0x34c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_GPIO_Init+0x21a>
 800584a:	2309      	movs	r3, #9
 800584c:	e012      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800584e:	230a      	movs	r3, #10
 8005850:	e010      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005852:	2308      	movs	r3, #8
 8005854:	e00e      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005856:	2307      	movs	r3, #7
 8005858:	e00c      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800585a:	2306      	movs	r3, #6
 800585c:	e00a      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800585e:	2305      	movs	r3, #5
 8005860:	e008      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005862:	2304      	movs	r3, #4
 8005864:	e006      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005866:	2303      	movs	r3, #3
 8005868:	e004      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800586a:	2302      	movs	r3, #2
 800586c:	e002      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005872:	2300      	movs	r3, #0
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	f002 0203 	and.w	r2, r2, #3
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	4093      	lsls	r3, r2
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005884:	4934      	ldr	r1, [pc, #208]	; (8005958 <HAL_GPIO_Init+0x324>)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	3302      	adds	r3, #2
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005892:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <HAL_GPIO_Init+0x350>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058b6:	4a33      	ldr	r2, [pc, #204]	; (8005984 <HAL_GPIO_Init+0x350>)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058bc:	4b31      	ldr	r3, [pc, #196]	; (8005984 <HAL_GPIO_Init+0x350>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <HAL_GPIO_Init+0x350>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058e6:	4b27      	ldr	r3, [pc, #156]	; (8005984 <HAL_GPIO_Init+0x350>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800590a:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <HAL_GPIO_Init+0x350>)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_GPIO_Init+0x350>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <HAL_GPIO_Init+0x350>)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3301      	adds	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	f67f ae86 	bls.w	8005654 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005948:	bf00      	nop
 800594a:	3724      	adds	r7, #36	; 0x24
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40023800 	.word	0x40023800
 8005958:	40013800 	.word	0x40013800
 800595c:	40020000 	.word	0x40020000
 8005960:	40020400 	.word	0x40020400
 8005964:	40020800 	.word	0x40020800
 8005968:	40020c00 	.word	0x40020c00
 800596c:	40021000 	.word	0x40021000
 8005970:	40021400 	.word	0x40021400
 8005974:	40021800 	.word	0x40021800
 8005978:	40021c00 	.word	0x40021c00
 800597c:	40022000 	.word	0x40022000
 8005980:	40022400 	.word	0x40022400
 8005984:	40013c00 	.word	0x40013c00

08005988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	887b      	ldrh	r3, [r7, #2]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e001      	b.n	80059aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
 80059c4:	4613      	mov	r3, r2
 80059c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059c8:	787b      	ldrb	r3, [r7, #1]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ce:	887a      	ldrh	r2, [r7, #2]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059d4:	e003      	b.n	80059de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	041a      	lsls	r2, r3, #16
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	619a      	str	r2, [r3, #24]
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e07f      	b.n	8005afe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8a9 	bl	8005b6a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d107      	bne.n	8005a66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	e006      	b.n	8005a74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d104      	bne.n	8005a86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <HAL_I2C_Init+0x11c>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	ea42 0103 	orr.w	r1, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69d9      	ldr	r1, [r3, #28]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	02008000 	.word	0x02008000

08005b0c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e021      	b.n	8005b62 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f821 	bl	8005b7e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	817b      	strh	r3, [r7, #10]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	813b      	strh	r3, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	f040 80f9 	bne.w	8005dae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_I2C_Mem_Write+0x34>
 8005bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0ed      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2C_Mem_Write+0x4e>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e0e6      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bea:	f7fd fde3 	bl	80037b4 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2319      	movs	r3, #25
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fad1 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0d1      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2221      	movs	r2, #33	; 0x21
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c34:	88f8      	ldrh	r0, [r7, #6]
 8005c36:	893a      	ldrh	r2, [r7, #8]
 8005c38:	8979      	ldrh	r1, [r7, #10]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	4603      	mov	r3, r0
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f9e1 	bl	800600c <I2C_RequestMemoryWrite>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0a9      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2bff      	cmp	r3, #255	; 0xff
 8005c64:	d90e      	bls.n	8005c84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	2300      	movs	r3, #0
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fbb3 	bl	80063e8 <I2C_TransferConfig>
 8005c82:	e00f      	b.n	8005ca4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	8979      	ldrh	r1, [r7, #10]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fba2 	bl	80063e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fabb 	bl	8006224 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e07b      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d034      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x1c8>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d130      	bne.n	8005d5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	2200      	movs	r2, #0
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fa4d 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e04d      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2bff      	cmp	r3, #255	; 0xff
 8005d1c:	d90e      	bls.n	8005d3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	8979      	ldrh	r1, [r7, #10]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fb57 	bl	80063e8 <I2C_TransferConfig>
 8005d3a:	e00f      	b.n	8005d5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	8979      	ldrh	r1, [r7, #10]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fb46 	bl	80063e8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d19e      	bne.n	8005ca4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fa9a 	bl	80062a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e01a      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <HAL_I2C_Mem_Write+0x224>)
 8005d8e:	400b      	ands	r3, r1
 8005d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	fe00e800 	.word	0xfe00e800

08005dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	813b      	strh	r3, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	f040 80fd 	bne.w	8005fde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_I2C_Mem_Read+0x34>
 8005dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0f1      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_I2C_Mem_Read+0x4e>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e0ea      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e12:	f7fd fccf 	bl	80037b4 <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2319      	movs	r3, #25
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f9bd 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0d5      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2222      	movs	r2, #34	; 0x22
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2240      	movs	r2, #64	; 0x40
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5c:	88f8      	ldrh	r0, [r7, #6]
 8005e5e:	893a      	ldrh	r2, [r7, #8]
 8005e60:	8979      	ldrh	r1, [r7, #10]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f921 	bl	80060b4 <I2C_RequestMemoryRead>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0ad      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2bff      	cmp	r3, #255	; 0xff
 8005e8c:	d90e      	bls.n	8005eac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	8979      	ldrh	r1, [r7, #10]
 8005e9c:	4b52      	ldr	r3, [pc, #328]	; (8005fe8 <HAL_I2C_Mem_Read+0x22c>)
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fa9f 	bl	80063e8 <I2C_TransferConfig>
 8005eaa:	e00f      	b.n	8005ecc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	8979      	ldrh	r1, [r7, #10]
 8005ebe:	4b4a      	ldr	r3, [pc, #296]	; (8005fe8 <HAL_I2C_Mem_Read+0x22c>)
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fa8e 	bl	80063e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f964 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e07c      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d034      	beq.n	8005f8c <HAL_I2C_Mem_Read+0x1d0>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d130      	bne.n	8005f8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2200      	movs	r2, #0
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f935 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e04d      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d90e      	bls.n	8005f6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	8979      	ldrh	r1, [r7, #10]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fa3f 	bl	80063e8 <I2C_TransferConfig>
 8005f6a:	e00f      	b.n	8005f8c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 fa2e 	bl	80063e8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d19a      	bne.n	8005ecc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f982 	bl	80062a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e01a      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_I2C_Mem_Read+0x230>)
 8005fbe:	400b      	ands	r3, r1
 8005fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	80002400 	.word	0x80002400
 8005fec:	fe00e800 	.word	0xfe00e800

08005ff0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffe:	b2db      	uxtb	r3, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	8979      	ldrh	r1, [r7, #10]
 800602c:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <I2C_RequestMemoryWrite+0xa4>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f9d7 	bl	80063e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f8f0 	bl	8006224 <I2C_WaitOnTXISFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e02c      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
 800605e:	e015      	b.n	800608c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f8d6 	bl	8006224 <I2C_WaitOnTXISFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e012      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006082:	893b      	ldrh	r3, [r7, #8]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2200      	movs	r2, #0
 8006094:	2180      	movs	r1, #128	; 0x80
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f884 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	80002000 	.word	0x80002000

080060b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	4b20      	ldr	r3, [pc, #128]	; (8006158 <I2C_RequestMemoryRead+0xa4>)
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f984 	bl	80063e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f89d 	bl	8006224 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02c      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e015      	b.n	8006132 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006106:	893b      	ldrh	r3, [r7, #8]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	b29b      	uxth	r3, r3
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f883 	bl	8006224 <I2C_WaitOnTXISFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e012      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f831 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	80002000 	.word	0x80002000

0800615c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d103      	bne.n	800617a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d007      	beq.n	8006198 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	619a      	str	r2, [r3, #24]
  }
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b4:	e022      	b.n	80061fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d01e      	beq.n	80061fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fd faf9 	bl	80037b4 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d113      	bne.n	80061fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e00f      	b.n	800621c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4013      	ands	r3, r2
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	429a      	cmp	r2, r3
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	429a      	cmp	r2, r3
 8006218:	d0cd      	beq.n	80061b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006230:	e02c      	b.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f870 	bl	800631c <I2C_IsAcknowledgeFailed>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e02a      	b.n	800629c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d01e      	beq.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fd fab1 	bl	80037b4 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	f043 0220 	orr.w	r2, r3, #32
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e007      	b.n	800629c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d1cb      	bne.n	8006232 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062b0:	e028      	b.n	8006304 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f830 	bl	800631c <I2C_IsAcknowledgeFailed>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e026      	b.n	8006314 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c6:	f7fd fa75 	bl	80037b4 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d302      	bcc.n	80062dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d113      	bne.n	8006304 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e007      	b.n	8006314 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b20      	cmp	r3, #32
 8006310:	d1cf      	bne.n	80062b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b10      	cmp	r3, #16
 8006334:	d151      	bne.n	80063da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006336:	e022      	b.n	800637e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d01e      	beq.n	800637e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006340:	f7fd fa38 	bl	80037b4 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	429a      	cmp	r2, r3
 800634e:	d302      	bcc.n	8006356 <I2C_IsAcknowledgeFailed+0x3a>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d113      	bne.n	800637e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e02e      	b.n	80063dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b20      	cmp	r3, #32
 800638a:	d1d5      	bne.n	8006338 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2210      	movs	r2, #16
 8006392:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2220      	movs	r2, #32
 800639a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fedd 	bl	800615c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80063ae:	400b      	ands	r3, r1
 80063b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	fe00e800 	.word	0xfe00e800

080063e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	817b      	strh	r3, [r7, #10]
 80063f6:	4613      	mov	r3, r2
 80063f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	0d5b      	lsrs	r3, r3, #21
 8006404:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <I2C_TransferConfig+0x58>)
 800640a:	430b      	orrs	r3, r1
 800640c:	43db      	mvns	r3, r3
 800640e:	ea02 0103 	and.w	r1, r2, r3
 8006412:	897b      	ldrh	r3, [r7, #10]
 8006414:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006418:	7a7b      	ldrb	r3, [r7, #9]
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	431a      	orrs	r2, r3
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	03ff63ff 	.word	0x03ff63ff

08006444 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0bf      	b.n	80065d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fc fa80 	bl	8002970 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006486:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6999      	ldr	r1, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800649c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <HAL_LTDC_Init+0x19c>)
 80064b8:	400b      	ands	r3, r1
 80064ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	041b      	lsls	r3, r3, #16
 80064c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68d9      	ldr	r1, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b3e      	ldr	r3, [pc, #248]	; (80065e0 <HAL_LTDC_Init+0x19c>)
 80064e6:	400b      	ands	r3, r1
 80064e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6919      	ldr	r1, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <HAL_LTDC_Init+0x19c>)
 8006514:	400b      	ands	r3, r1
 8006516:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6919      	ldr	r1, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6959      	ldr	r1, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <HAL_LTDC_Init+0x19c>)
 8006542:	400b      	ands	r3, r1
 8006544:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0206 	orr.w	r2, r2, #6
 80065b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	f000f800 	.word	0xf000f800

080065e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d023      	beq.n	800664e <HAL_LTDC_IRQHandler+0x6a>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01e      	beq.n	800664e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2204      	movs	r2, #4
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800662e:	f043 0201 	orr.w	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f86f 	bl	800672c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d023      	beq.n	80066a0 <HAL_LTDC_IRQHandler+0xbc>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01e      	beq.n	80066a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0202 	bic.w	r2, r2, #2
 8006670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006680:	f043 0202 	orr.w	r2, r3, #2
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f846 	bl	800672c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01b      	beq.n	80066e2 <HAL_LTDC_IRQHandler+0xfe>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2201      	movs	r2, #1
 80066ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f013 feed 	bl	801a4bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01b      	beq.n	8006724 <HAL_LTDC_IRQHandler+0x140>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0208 	bic.w	r2, r2, #8
 8006704:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2208      	movs	r2, #8
 800670c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f80e 	bl	8006740 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006754:	b5b0      	push	{r4, r5, r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_LTDC_ConfigLayer+0x1a>
 800676a:	2302      	movs	r3, #2
 800676c:	e02c      	b.n	80067c8 <HAL_LTDC_ConfigLayer+0x74>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2202      	movs	r2, #2
 800677a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2134      	movs	r1, #52	; 0x34
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4614      	mov	r4, r2
 8006792:	461d      	mov	r5, r3
 8006794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800679e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f849 	bl	8006840 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bdb0      	pop	{r4, r5, r7, pc}

080067d0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_LTDC_ProgramLineEvent+0x18>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e023      	b.n	8006830 <HAL_LTDC_ProgramLineEvent+0x60>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006808:	4a0c      	ldr	r2, [pc, #48]	; (800683c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40016800 	.word	0x40016800

08006840 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685c:	4413      	add	r3, r2
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	4413      	add	r3, r2
 800686e:	3384      	adds	r3, #132	; 0x84
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	4611      	mov	r1, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	01d2      	lsls	r2, r2, #7
 800687c:	440a      	add	r2, r1
 800687e:	3284      	adds	r2, #132	; 0x84
 8006880:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006884:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006896:	4413      	add	r3, r2
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	01db      	lsls	r3, r3, #7
 80068a4:	440b      	add	r3, r1
 80068a6:	3384      	adds	r3, #132	; 0x84
 80068a8:	4619      	mov	r1, r3
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068be:	4413      	add	r3, r2
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	01db      	lsls	r3, r3, #7
 80068ce:	4413      	add	r3, r2
 80068d0:	3384      	adds	r3, #132	; 0x84
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	4611      	mov	r1, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	01d2      	lsls	r2, r2, #7
 80068de:	440a      	add	r2, r1
 80068e0:	3284      	adds	r2, #132	; 0x84
 80068e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80068e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068f6:	4413      	add	r3, r2
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	01db      	lsls	r3, r3, #7
 8006904:	440b      	add	r3, r1
 8006906:	3384      	adds	r3, #132	; 0x84
 8006908:	4619      	mov	r1, r3
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4313      	orrs	r3, r2
 800690e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	01db      	lsls	r3, r3, #7
 800691a:	4413      	add	r3, r2
 800691c:	3384      	adds	r3, #132	; 0x84
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	4611      	mov	r1, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	01d2      	lsls	r2, r2, #7
 800692a:	440a      	add	r2, r1
 800692c:	3284      	adds	r2, #132	; 0x84
 800692e:	f023 0307 	bic.w	r3, r3, #7
 8006932:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	01db      	lsls	r3, r3, #7
 800693e:	4413      	add	r3, r2
 8006940:	3384      	adds	r3, #132	; 0x84
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	4413      	add	r3, r2
 8006972:	3384      	adds	r3, #132	; 0x84
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	01db      	lsls	r3, r3, #7
 8006980:	4413      	add	r3, r2
 8006982:	3384      	adds	r3, #132	; 0x84
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006990:	461a      	mov	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	431a      	orrs	r2, r3
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	431a      	orrs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	440b      	add	r3, r1
 80069a6:	3384      	adds	r3, #132	; 0x84
 80069a8:	4619      	mov	r1, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	01db      	lsls	r3, r3, #7
 80069ba:	4413      	add	r3, r2
 80069bc:	3384      	adds	r3, #132	; 0x84
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	4611      	mov	r1, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	01d2      	lsls	r2, r2, #7
 80069ca:	440a      	add	r2, r1
 80069cc:	3284      	adds	r2, #132	; 0x84
 80069ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	01db      	lsls	r3, r3, #7
 80069de:	4413      	add	r3, r2
 80069e0:	3384      	adds	r3, #132	; 0x84
 80069e2:	461a      	mov	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	4413      	add	r3, r2
 80069f6:	3384      	adds	r3, #132	; 0x84
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	01db      	lsls	r3, r3, #7
 8006a04:	440b      	add	r3, r1
 8006a06:	3384      	adds	r3, #132	; 0x84
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4b58      	ldr	r3, [pc, #352]	; (8006b6c <LTDC_SetConfig+0x32c>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	6809      	ldr	r1, [r1, #0]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	01c9      	lsls	r1, r1, #7
 8006a22:	4401      	add	r1, r0
 8006a24:	3184      	adds	r1, #132	; 0x84
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	4413      	add	r3, r2
 8006a36:	3384      	adds	r3, #132	; 0x84
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	01db      	lsls	r3, r3, #7
 8006a44:	4413      	add	r3, r2
 8006a46:	3384      	adds	r3, #132	; 0x84
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	4413      	add	r3, r2
 8006a5a:	3384      	adds	r3, #132	; 0x84
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	e01b      	b.n	8006aaa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d102      	bne.n	8006a80 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e014      	b.n	8006aaa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d00b      	beq.n	8006aa0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d007      	beq.n	8006aa0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d003      	beq.n	8006aa0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	d102      	bne.n	8006aa6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e001      	b.n	8006aaa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	01db      	lsls	r3, r3, #7
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3384      	adds	r3, #132	; 0x84
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	4611      	mov	r1, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	01d2      	lsls	r2, r2, #7
 8006ac4:	440a      	add	r2, r1
 8006ac6:	3284      	adds	r2, #132	; 0x84
 8006ac8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006acc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	041a      	lsls	r2, r3, #16
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	1acb      	subs	r3, r1, r3
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	3303      	adds	r3, #3
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6809      	ldr	r1, [r1, #0]
 8006af0:	4608      	mov	r0, r1
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	01c9      	lsls	r1, r1, #7
 8006af6:	4401      	add	r1, r0
 8006af8:	3184      	adds	r1, #132	; 0x84
 8006afa:	4313      	orrs	r3, r2
 8006afc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	4413      	add	r3, r2
 8006b0a:	3384      	adds	r3, #132	; 0x84
 8006b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	440b      	add	r3, r1
 8006b1a:	3384      	adds	r3, #132	; 0x84
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4b14      	ldr	r3, [pc, #80]	; (8006b70 <LTDC_SetConfig+0x330>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	01db      	lsls	r3, r3, #7
 8006b2e:	4413      	add	r3, r2
 8006b30:	3384      	adds	r3, #132	; 0x84
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4413      	add	r3, r2
 8006b46:	3384      	adds	r3, #132	; 0x84
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	01d2      	lsls	r2, r2, #7
 8006b54:	440a      	add	r2, r1
 8006b56:	3284      	adds	r2, #132	; 0x84
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	3724      	adds	r7, #36	; 0x24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	fffff8f8 	.word	0xfffff8f8
 8006b70:	fffff800 	.word	0xfffff800

08006b74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	bf00      	nop
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40007000 	.word	0x40007000

08006b94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8006baa:	4b20      	ldr	r3, [pc, #128]	; (8006c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bc2:	f7fc fdf7 	bl	80037b4 <HAL_GetTick>
 8006bc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006bc8:	e009      	b.n	8006bde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006bca:	f7fc fdf3 	bl	80037b4 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd8:	d901      	bls.n	8006bde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e022      	b.n	8006c24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bea:	d1ee      	bne.n	8006bca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0f      	ldr	r2, [pc, #60]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bf8:	f7fc fddc 	bl	80037b4 <HAL_GetTick>
 8006bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bfe:	e009      	b.n	8006c14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c00:	f7fc fdd8 	bl	80037b4 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c0e:	d901      	bls.n	8006c14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e007      	b.n	8006c24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c20:	d1ee      	bne.n	8006c00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	40007000 	.word	0x40007000

08006c34 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c3c:	f7fc fdba 	bl	80037b4 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e067      	b.n	8006d1c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fb ff4d 	bl	8002b00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006c66:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f85e 	bl	8006d2c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	021a      	lsls	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	2120      	movs	r1, #32
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f856 	bl	8006d48 <QSPI_WaitFlagStateUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d135      	bne.n	8006d12 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <HAL_QSPI_Init+0xf0>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6852      	ldr	r2, [r2, #4]
 8006cb4:	0611      	lsls	r1, r2, #24
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68d2      	ldr	r2, [r2, #12]
 8006cba:	4311      	orrs	r1, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	69d2      	ldr	r2, [r2, #28]
 8006cc0:	4311      	orrs	r1, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6a12      	ldr	r2, [r2, #32]
 8006cc6:	4311      	orrs	r1, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_QSPI_Init+0xf4>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6912      	ldr	r2, [r2, #16]
 8006cde:	0411      	lsls	r1, r2, #16
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6952      	ldr	r2, [r2, #20]
 8006ce4:	4311      	orrs	r1, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6992      	ldr	r2, [r2, #24]
 8006cea:	4311      	orrs	r1, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	00ffff2f 	.word	0x00ffff2f
 8006d28:	ffe0f8fe 	.word	0xffe0f8fe

08006d2c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d58:	e01a      	b.n	8006d90 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d016      	beq.n	8006d90 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fc fd27 	bl	80037b4 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	f043 0201 	orr.w	r2, r3, #1
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e00e      	b.n	8006dae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bf14      	ite	ne
 8006d9e:	2301      	movne	r3, #1
 8006da0:	2300      	moveq	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1d6      	bne.n	8006d5a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e291      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8087 	beq.w	8006eea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ddc:	4b96      	ldr	r3, [pc, #600]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d00c      	beq.n	8006e02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006de8:	4b93      	ldr	r3, [pc, #588]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d112      	bne.n	8006e1a <HAL_RCC_OscConfig+0x62>
 8006df4:	4b90      	ldr	r3, [pc, #576]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e00:	d10b      	bne.n	8006e1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e02:	4b8d      	ldr	r3, [pc, #564]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d06c      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x130>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d168      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e26b      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x7a>
 8006e24:	4b84      	ldr	r3, [pc, #528]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a83      	ldr	r2, [pc, #524]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e02e      	b.n	8006e90 <HAL_RCC_OscConfig+0xd8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x9c>
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7e      	ldr	r2, [pc, #504]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	4b7c      	ldr	r3, [pc, #496]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a7b      	ldr	r2, [pc, #492]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e01d      	b.n	8006e90 <HAL_RCC_OscConfig+0xd8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e5c:	d10c      	bne.n	8006e78 <HAL_RCC_OscConfig+0xc0>
 8006e5e:	4b76      	ldr	r3, [pc, #472]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a75      	ldr	r2, [pc, #468]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4b73      	ldr	r3, [pc, #460]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a72      	ldr	r2, [pc, #456]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e00b      	b.n	8006e90 <HAL_RCC_OscConfig+0xd8>
 8006e78:	4b6f      	ldr	r3, [pc, #444]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	4b6c      	ldr	r3, [pc, #432]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6b      	ldr	r2, [pc, #428]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d013      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fc fc8c 	bl	80037b4 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea0:	f7fc fc88 	bl	80037b4 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b64      	cmp	r3, #100	; 0x64
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e21f      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb2:	4b61      	ldr	r3, [pc, #388]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0xe8>
 8006ebe:	e014      	b.n	8006eea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fc fc78 	bl	80037b4 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec8:	f7fc fc74 	bl	80037b4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b64      	cmp	r3, #100	; 0x64
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e20b      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eda:	4b57      	ldr	r3, [pc, #348]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x110>
 8006ee6:	e000      	b.n	8006eea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d069      	beq.n	8006fca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ef6:	4b50      	ldr	r3, [pc, #320]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 030c 	and.w	r3, r3, #12
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00b      	beq.n	8006f1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f02:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 030c 	and.w	r3, r3, #12
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d11c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x190>
 8006f0e:	4b4a      	ldr	r3, [pc, #296]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d116      	bne.n	8006f48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1a:	4b47      	ldr	r3, [pc, #284]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_RCC_OscConfig+0x17a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e1df      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	4b41      	ldr	r3, [pc, #260]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	493d      	ldr	r1, [pc, #244]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f46:	e040      	b.n	8006fca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f50:	4b39      	ldr	r3, [pc, #228]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a38      	ldr	r2, [pc, #224]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5c:	f7fc fc2a 	bl	80037b4 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f64:	f7fc fc26 	bl	80037b4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e1bd      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f76:	4b30      	ldr	r3, [pc, #192]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f82:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4929      	ldr	r1, [pc, #164]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]
 8006f96:	e018      	b.n	8006fca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f98:	4b27      	ldr	r3, [pc, #156]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a26      	ldr	r2, [pc, #152]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fc fc06 	bl	80037b4 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fac:	f7fc fc02 	bl	80037b4 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e199      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fbe:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d038      	beq.n	8007048 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d019      	beq.n	8007012 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fea:	f7fc fbe3 	bl	80037b4 <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff2:	f7fc fbdf 	bl	80037b4 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e176      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8007006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x23a>
 8007010:	e01a      	b.n	8007048 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8007014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007016:	4a08      	ldr	r2, [pc, #32]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701e:	f7fc fbc9 	bl	80037b4 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007024:	e00a      	b.n	800703c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007026:	f7fc fbc5 	bl	80037b4 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d903      	bls.n	800703c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e15c      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
 8007038:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800703c:	4b91      	ldr	r3, [pc, #580]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 800703e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1ee      	bne.n	8007026 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80a4 	beq.w	800719e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007056:	4b8b      	ldr	r3, [pc, #556]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10d      	bne.n	800707e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007062:	4b88      	ldr	r3, [pc, #544]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	4a87      	ldr	r2, [pc, #540]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706c:	6413      	str	r3, [r2, #64]	; 0x40
 800706e:	4b85      	ldr	r3, [pc, #532]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007076:	60bb      	str	r3, [r7, #8]
 8007078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800707a:	2301      	movs	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800707e:	4b82      	ldr	r3, [pc, #520]	; (8007288 <HAL_RCC_OscConfig+0x4d0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d118      	bne.n	80070bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800708a:	4b7f      	ldr	r3, [pc, #508]	; (8007288 <HAL_RCC_OscConfig+0x4d0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a7e      	ldr	r2, [pc, #504]	; (8007288 <HAL_RCC_OscConfig+0x4d0>)
 8007090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007096:	f7fc fb8d 	bl	80037b4 <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800709c:	e008      	b.n	80070b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800709e:	f7fc fb89 	bl	80037b4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b64      	cmp	r3, #100	; 0x64
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e120      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070b0:	4b75      	ldr	r3, [pc, #468]	; (8007288 <HAL_RCC_OscConfig+0x4d0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d106      	bne.n	80070d2 <HAL_RCC_OscConfig+0x31a>
 80070c4:	4b6f      	ldr	r3, [pc, #444]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	4a6e      	ldr	r2, [pc, #440]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	6713      	str	r3, [r2, #112]	; 0x70
 80070d0:	e02d      	b.n	800712e <HAL_RCC_OscConfig+0x376>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10c      	bne.n	80070f4 <HAL_RCC_OscConfig+0x33c>
 80070da:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a69      	ldr	r2, [pc, #420]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
 80070e6:	4b67      	ldr	r3, [pc, #412]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	4a66      	ldr	r2, [pc, #408]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070ec:	f023 0304 	bic.w	r3, r3, #4
 80070f0:	6713      	str	r3, [r2, #112]	; 0x70
 80070f2:	e01c      	b.n	800712e <HAL_RCC_OscConfig+0x376>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d10c      	bne.n	8007116 <HAL_RCC_OscConfig+0x35e>
 80070fc:	4b61      	ldr	r3, [pc, #388]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	4a60      	ldr	r2, [pc, #384]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007102:	f043 0304 	orr.w	r3, r3, #4
 8007106:	6713      	str	r3, [r2, #112]	; 0x70
 8007108:	4b5e      	ldr	r3, [pc, #376]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	4a5d      	ldr	r2, [pc, #372]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	; 0x70
 8007114:	e00b      	b.n	800712e <HAL_RCC_OscConfig+0x376>
 8007116:	4b5b      	ldr	r3, [pc, #364]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	4a5a      	ldr	r2, [pc, #360]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6713      	str	r3, [r2, #112]	; 0x70
 8007122:	4b58      	ldr	r3, [pc, #352]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	4a57      	ldr	r2, [pc, #348]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d015      	beq.n	8007162 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007136:	f7fc fb3d 	bl	80037b4 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713c:	e00a      	b.n	8007154 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fc fb39 	bl	80037b4 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f241 3288 	movw	r2, #5000	; 0x1388
 800714c:	4293      	cmp	r3, r2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e0ce      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007154:	4b4b      	ldr	r3, [pc, #300]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ee      	beq.n	800713e <HAL_RCC_OscConfig+0x386>
 8007160:	e014      	b.n	800718c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007162:	f7fc fb27 	bl	80037b4 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fc fb23 	bl	80037b4 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	; 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0b8      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007180:	4b40      	ldr	r3, [pc, #256]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ee      	bne.n	800716a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007192:	4b3c      	ldr	r3, [pc, #240]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	4a3b      	ldr	r2, [pc, #236]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80a4 	beq.w	80072f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a8:	4b36      	ldr	r3, [pc, #216]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d06b      	beq.n	800728c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d149      	bne.n	8007250 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071bc:	4b31      	ldr	r3, [pc, #196]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a30      	ldr	r2, [pc, #192]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80071c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc faf4 	bl	80037b4 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fc faf0 	bl	80037b4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e087      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e2:	4b28      	ldr	r3, [pc, #160]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	019b      	lsls	r3, r3, #6
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	3b01      	subs	r3, #1
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	4313      	orrs	r3, r2
 8007214:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800721a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800721c:	4b19      	ldr	r3, [pc, #100]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a18      	ldr	r2, [pc, #96]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fc fac4 	bl	80037b4 <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007230:	f7fc fac0 	bl	80037b4 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e057      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCC_OscConfig+0x478>
 800724e:	e04f      	b.n	80072f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a0b      	ldr	r2, [pc, #44]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800725a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fc faaa 	bl	80037b4 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007264:	f7fc faa6 	bl	80037b4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e03d      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <HAL_RCC_OscConfig+0x4cc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x4ac>
 8007282:	e035      	b.n	80072f0 <HAL_RCC_OscConfig+0x538>
 8007284:	40023800 	.word	0x40023800
 8007288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800728c:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <HAL_RCC_OscConfig+0x544>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d028      	beq.n	80072ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d121      	bne.n	80072ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d11a      	bne.n	80072ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d111      	bne.n	80072ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	3b01      	subs	r3, #1
 80072d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800

08007300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e0d0      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007318:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d910      	bls.n	8007348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007326:	4b67      	ldr	r3, [pc, #412]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 020f 	bic.w	r2, r3, #15
 800732e:	4965      	ldr	r1, [pc, #404]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	4313      	orrs	r3, r2
 8007334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007336:	4b63      	ldr	r3, [pc, #396]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d001      	beq.n	8007348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0b8      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d020      	beq.n	8007396 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4a58      	ldr	r2, [pc, #352]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800736a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007378:	4b53      	ldr	r3, [pc, #332]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a52      	ldr	r2, [pc, #328]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 800737e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007384:	4b50      	ldr	r3, [pc, #320]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	494d      	ldr	r1, [pc, #308]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d040      	beq.n	8007424 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	4b47      	ldr	r3, [pc, #284]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d115      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e07f      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d107      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c2:	4b41      	ldr	r3, [pc, #260]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d109      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e073      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d2:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e06b      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073e2:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f023 0203 	bic.w	r2, r3, #3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4936      	ldr	r1, [pc, #216]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f4:	f7fc f9de 	bl	80037b4 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fa:	e00a      	b.n	8007412 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fc:	f7fc f9da 	bl	80037b4 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f241 3288 	movw	r2, #5000	; 0x1388
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e053      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007412:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 020c 	and.w	r2, r3, #12
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	429a      	cmp	r2, r3
 8007422:	d1eb      	bne.n	80073fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d210      	bcs.n	8007454 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 020f 	bic.w	r2, r3, #15
 800743a:	4922      	ldr	r1, [pc, #136]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	4313      	orrs	r3, r2
 8007440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007442:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e032      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4916      	ldr	r1, [pc, #88]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	490e      	ldr	r1, [pc, #56]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007492:	f000 f821 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8007496:	4601      	mov	r1, r0
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <HAL_RCC_ClockConfig+0x1cc>)
 80074a4:	5cd3      	ldrb	r3, [r2, r3]
 80074a6:	fa21 f303 	lsr.w	r3, r1, r3
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <HAL_RCC_ClockConfig+0x1d0>)
 80074ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074ae:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <HAL_RCC_ClockConfig+0x1d4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb ffc8 	bl	8003448 <HAL_InitTick>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40023c00 	.word	0x40023c00
 80074c8:	40023800 	.word	0x40023800
 80074cc:	0802ccc4 	.word	0x0802ccc4
 80074d0:	20000010 	.word	0x20000010
 80074d4:	20000014 	.word	0x20000014

080074d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	2300      	movs	r3, #0
 80074e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ee:	4b50      	ldr	r3, [pc, #320]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 030c 	and.w	r3, r3, #12
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d007      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x32>
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d008      	beq.n	8007510 <HAL_RCC_GetSysClockFreq+0x38>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 808d 	bne.w	800761e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007504:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007506:	60bb      	str	r3, [r7, #8]
      break;
 8007508:	e08c      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800750a:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <HAL_RCC_GetSysClockFreq+0x160>)
 800750c:	60bb      	str	r3, [r7, #8]
      break;
 800750e:	e089      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007510:	4b47      	ldr	r3, [pc, #284]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007518:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800751a:	4b45      	ldr	r3, [pc, #276]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d023      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007526:	4b42      	ldr	r3, [pc, #264]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	099b      	lsrs	r3, r3, #6
 800752c:	f04f 0400 	mov.w	r4, #0
 8007530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	ea03 0501 	and.w	r5, r3, r1
 800753c:	ea04 0602 	and.w	r6, r4, r2
 8007540:	4a3d      	ldr	r2, [pc, #244]	; (8007638 <HAL_RCC_GetSysClockFreq+0x160>)
 8007542:	fb02 f106 	mul.w	r1, r2, r6
 8007546:	2200      	movs	r2, #0
 8007548:	fb02 f205 	mul.w	r2, r2, r5
 800754c:	440a      	add	r2, r1
 800754e:	493a      	ldr	r1, [pc, #232]	; (8007638 <HAL_RCC_GetSysClockFreq+0x160>)
 8007550:	fba5 0101 	umull	r0, r1, r5, r1
 8007554:	1853      	adds	r3, r2, r1
 8007556:	4619      	mov	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f04f 0400 	mov.w	r4, #0
 800755e:	461a      	mov	r2, r3
 8007560:	4623      	mov	r3, r4
 8007562:	f7f9 f939 	bl	80007d8 <__aeabi_uldivmod>
 8007566:	4603      	mov	r3, r0
 8007568:	460c      	mov	r4, r1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e049      	b.n	8007602 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800756e:	4b30      	ldr	r3, [pc, #192]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	f04f 0400 	mov.w	r4, #0
 8007578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	ea03 0501 	and.w	r5, r3, r1
 8007584:	ea04 0602 	and.w	r6, r4, r2
 8007588:	4629      	mov	r1, r5
 800758a:	4632      	mov	r2, r6
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	0154      	lsls	r4, r2, #5
 8007596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800759a:	014b      	lsls	r3, r1, #5
 800759c:	4619      	mov	r1, r3
 800759e:	4622      	mov	r2, r4
 80075a0:	1b49      	subs	r1, r1, r5
 80075a2:	eb62 0206 	sbc.w	r2, r2, r6
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	f04f 0400 	mov.w	r4, #0
 80075ae:	0194      	lsls	r4, r2, #6
 80075b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80075b4:	018b      	lsls	r3, r1, #6
 80075b6:	1a5b      	subs	r3, r3, r1
 80075b8:	eb64 0402 	sbc.w	r4, r4, r2
 80075bc:	f04f 0100 	mov.w	r1, #0
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	00e2      	lsls	r2, r4, #3
 80075c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80075ca:	00d9      	lsls	r1, r3, #3
 80075cc:	460b      	mov	r3, r1
 80075ce:	4614      	mov	r4, r2
 80075d0:	195b      	adds	r3, r3, r5
 80075d2:	eb44 0406 	adc.w	r4, r4, r6
 80075d6:	f04f 0100 	mov.w	r1, #0
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	02a2      	lsls	r2, r4, #10
 80075e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80075e4:	0299      	lsls	r1, r3, #10
 80075e6:	460b      	mov	r3, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	4621      	mov	r1, r4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	461a      	mov	r2, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	f7f9 f8ee 	bl	80007d8 <__aeabi_uldivmod>
 80075fc:	4603      	mov	r3, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007602:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_RCC_GetSysClockFreq+0x158>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	3301      	adds	r3, #1
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	60bb      	str	r3, [r7, #8]
      break;
 800761c:	e002      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007620:	60bb      	str	r3, [r7, #8]
      break;
 8007622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007624:	68bb      	ldr	r3, [r7, #8]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800
 8007634:	00f42400 	.word	0x00f42400
 8007638:	017d7840 	.word	0x017d7840

0800763c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <HAL_RCC_GetHCLKFreq+0x14>)
 8007642:	681b      	ldr	r3, [r3, #0]
}
 8007644:	4618      	mov	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20000010 	.word	0x20000010

08007654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007658:	f7ff fff0 	bl	800763c <HAL_RCC_GetHCLKFreq>
 800765c:	4601      	mov	r1, r0
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	0a9b      	lsrs	r3, r3, #10
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4a03      	ldr	r2, [pc, #12]	; (8007678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800766a:	5cd3      	ldrb	r3, [r2, r3]
 800766c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40023800 	.word	0x40023800
 8007678:	0802ccd4 	.word	0x0802ccd4

0800767c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007680:	f7ff ffdc 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8007684:	4601      	mov	r1, r0
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	0b5b      	lsrs	r3, r3, #13
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	4a03      	ldr	r2, [pc, #12]	; (80076a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007692:	5cd3      	ldrb	r3, [r2, r3]
 8007694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007698:	4618      	mov	r0, r3
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40023800 	.word	0x40023800
 80076a0:	0802ccd4 	.word	0x0802ccd4

080076a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220f      	movs	r2, #15
 80076b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0203 	and.w	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076cc:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <HAL_RCC_GetClockConfig+0x5c>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	08db      	lsrs	r3, r3, #3
 80076de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <HAL_RCC_GetClockConfig+0x60>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800
 8007704:	40023c00 	.word	0x40023c00

08007708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d012      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007730:	4b69      	ldr	r3, [pc, #420]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4a68      	ldr	r2, [pc, #416]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007736:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800773a:	6093      	str	r3, [r2, #8]
 800773c:	4b66      	ldr	r3, [pc, #408]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	4964      	ldr	r1, [pc, #400]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d017      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007762:	4b5d      	ldr	r3, [pc, #372]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	4959      	ldr	r1, [pc, #356]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007780:	d101      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800779e:	4b4e      	ldr	r3, [pc, #312]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	494a      	ldr	r1, [pc, #296]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077bc:	d101      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 808b 	beq.w	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077ec:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	4a39      	ldr	r2, [pc, #228]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f6:	6413      	str	r3, [r2, #64]	; 0x40
 80077f8:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007804:	4b35      	ldr	r3, [pc, #212]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a34      	ldr	r2, [pc, #208]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800780a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007810:	f7fb ffd0 	bl	80037b4 <HAL_GetTick>
 8007814:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007816:	e008      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007818:	f7fb ffcc 	bl	80037b4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e355      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800782a:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007836:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d035      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d02e      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800785e:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800786a:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007876:	4a18      	ldr	r2, [pc, #96]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800787c:	4b16      	ldr	r3, [pc, #88]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d114      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fb ff94 	bl	80037b4 <HAL_GetTick>
 800788c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800788e:	e00a      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007890:	f7fb ff90 	bl	80037b4 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f241 3288 	movw	r2, #5000	; 0x1388
 800789e:	4293      	cmp	r3, r2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e317      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0ee      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078be:	d111      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078ce:	400b      	ands	r3, r1
 80078d0:	4901      	ldr	r1, [pc, #4]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	608b      	str	r3, [r1, #8]
 80078d6:	e00b      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40007000 	.word	0x40007000
 80078e0:	0ffffcff 	.word	0x0ffffcff
 80078e4:	4bb0      	ldr	r3, [pc, #704]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4aaf      	ldr	r2, [pc, #700]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078ee:	6093      	str	r3, [r2, #8]
 80078f0:	4bad      	ldr	r3, [pc, #692]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fc:	49aa      	ldr	r1, [pc, #680]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	d010      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800790e:	4ba6      	ldr	r3, [pc, #664]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007914:	4aa4      	ldr	r2, [pc, #656]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800791e:	4ba2      	ldr	r3, [pc, #648]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	499f      	ldr	r1, [pc, #636]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800793c:	4b9a      	ldr	r3, [pc, #616]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794a:	4997      	ldr	r1, [pc, #604]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800795e:	4b92      	ldr	r3, [pc, #584]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800796c:	498e      	ldr	r1, [pc, #568]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007980:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798e:	4986      	ldr	r1, [pc, #536]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007990:	4313      	orrs	r3, r2
 8007992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a2:	4b81      	ldr	r3, [pc, #516]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	497d      	ldr	r1, [pc, #500]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079c4:	4b78      	ldr	r3, [pc, #480]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ca:	f023 0203 	bic.w	r2, r3, #3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	4975      	ldr	r1, [pc, #468]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079e6:	4b70      	ldr	r3, [pc, #448]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f023 020c 	bic.w	r2, r3, #12
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f4:	496c      	ldr	r1, [pc, #432]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a08:	4b67      	ldr	r3, [pc, #412]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	4964      	ldr	r1, [pc, #400]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	495b      	ldr	r1, [pc, #364]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a4c:	4b56      	ldr	r3, [pc, #344]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	4953      	ldr	r1, [pc, #332]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a6e:	4b4e      	ldr	r3, [pc, #312]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7c:	494a      	ldr	r1, [pc, #296]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a90:	4b45      	ldr	r3, [pc, #276]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9e:	4942      	ldr	r1, [pc, #264]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ab2:	4b3d      	ldr	r3, [pc, #244]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac0:	4939      	ldr	r1, [pc, #228]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ad4:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae2:	4931      	ldr	r1, [pc, #196]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007af6:	4b2c      	ldr	r3, [pc, #176]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b04:	4928      	ldr	r1, [pc, #160]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b14:	d101      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b36:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b44:	4918      	ldr	r1, [pc, #96]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b58:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b68:	490f      	ldr	r1, [pc, #60]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d005      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b7e:	f040 80d8 	bne.w	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a08      	ldr	r2, [pc, #32]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8e:	f7fb fe11 	bl	80037b4 <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b94:	e00a      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b96:	f7fb fe0d 	bl	80037b4 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b64      	cmp	r3, #100	; 0x64
 8007ba2:	d903      	bls.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e196      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bac:	4b6c      	ldr	r3, [pc, #432]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1ee      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d021      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11d      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bcc:	4b64      	ldr	r3, [pc, #400]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bda:	4b61      	ldr	r3, [pc, #388]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be0:	0e1b      	lsrs	r3, r3, #24
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	019a      	lsls	r2, r3, #6
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	061b      	lsls	r3, r3, #24
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	071b      	lsls	r3, r3, #28
 8007c00:	4957      	ldr	r1, [pc, #348]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d02e      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c32:	d129      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c34:	4b4a      	ldr	r3, [pc, #296]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c42:	4b47      	ldr	r3, [pc, #284]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c48:	0f1b      	lsrs	r3, r3, #28
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	019a      	lsls	r2, r3, #6
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	061b      	lsls	r3, r3, #24
 8007c62:	431a      	orrs	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	071b      	lsls	r3, r3, #28
 8007c68:	493d      	ldr	r1, [pc, #244]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c70:	4b3b      	ldr	r3, [pc, #236]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c76:	f023 021f 	bic.w	r2, r3, #31
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4937      	ldr	r1, [pc, #220]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01d      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c94:	4b32      	ldr	r3, [pc, #200]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9a:	0e1b      	lsrs	r3, r3, #24
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ca2:	4b2f      	ldr	r3, [pc, #188]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	0f1b      	lsrs	r3, r3, #28
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	019a      	lsls	r2, r3, #6
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	061b      	lsls	r3, r3, #24
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	071b      	lsls	r3, r3, #28
 8007cc8:	4925      	ldr	r1, [pc, #148]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d011      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	019a      	lsls	r2, r3, #6
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	071b      	lsls	r3, r3, #28
 8007cf8:	4919      	ldr	r1, [pc, #100]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0c:	f7fb fd52 	bl	80037b4 <HAL_GetTick>
 8007d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d14:	f7fb fd4e 	bl	80037b4 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b64      	cmp	r3, #100	; 0x64
 8007d20:	d901      	bls.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e0d7      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	f040 80cd 	bne.w	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d46:	f7fb fd35 	bl	80037b4 <HAL_GetTick>
 8007d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d4c:	e00a      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d4e:	f7fb fd31 	bl	80037b4 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b64      	cmp	r3, #100	; 0x64
 8007d5a:	d903      	bls.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e0ba      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d64:	4b5e      	ldr	r3, [pc, #376]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d70:	d0ed      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d02e      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d12a      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d9a:	4b51      	ldr	r3, [pc, #324]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007da8:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	019a      	lsls	r2, r3, #6
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	041b      	lsls	r3, r3, #16
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	061b      	lsls	r3, r3, #24
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	071b      	lsls	r3, r3, #28
 8007dce:	4944      	ldr	r1, [pc, #272]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007dd6:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ddc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	3b01      	subs	r3, #1
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	493d      	ldr	r1, [pc, #244]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d022      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e04:	d11d      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e06:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0c:	0e1b      	lsrs	r3, r3, #24
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e14:	4b32      	ldr	r3, [pc, #200]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1a:	0f1b      	lsrs	r3, r3, #28
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	019a      	lsls	r2, r3, #6
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	041b      	lsls	r3, r3, #16
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	061b      	lsls	r3, r3, #24
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	071b      	lsls	r3, r3, #28
 8007e3a:	4929      	ldr	r1, [pc, #164]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0308 	and.w	r3, r3, #8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d028      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e4e:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	f003 0303 	and.w	r3, r3, #3
 8007e68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	019a      	lsls	r2, r3, #6
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	431a      	orrs	r2, r3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	071b      	lsls	r3, r3, #28
 8007e82:	4917      	ldr	r1, [pc, #92]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e8a:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4911      	ldr	r1, [pc, #68]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a0e      	ldr	r2, [pc, #56]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eac:	f7fb fc82 	bl	80037b4 <HAL_GetTick>
 8007eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eb4:	f7fb fc7e 	bl	80037b4 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e007      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ec6:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed2:	d1ef      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3720      	adds	r7, #32
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800

08007ee4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f02:	f040 8086 	bne.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007f06:	4b8d      	ldr	r3, [pc, #564]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007f14:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1c:	d03e      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f22:	d073      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d000      	beq.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007f28:	e074      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f2a:	4b84      	ldr	r3, [pc, #528]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d108      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f36:	4b81      	ldr	r3, [pc, #516]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f3e:	4a80      	ldr	r2, [pc, #512]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	e007      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f48:	4b7c      	ldr	r3, [pc, #496]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f50:	4a7c      	ldr	r2, [pc, #496]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f58:	4b78      	ldr	r3, [pc, #480]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f66:	4b75      	ldr	r3, [pc, #468]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6c:	099b      	lsrs	r3, r3, #6
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	fb02 f203 	mul.w	r2, r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f80:	4b6e      	ldr	r3, [pc, #440]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
        break;
 8007f9a:	e03b      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f9c:	4b67      	ldr	r3, [pc, #412]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d108      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007fa8:	4b64      	ldr	r3, [pc, #400]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb0:	4a63      	ldr	r2, [pc, #396]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	e007      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007fba:	4b60      	ldr	r3, [pc, #384]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fc2:	4a60      	ldr	r2, [pc, #384]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007fca:	4b5c      	ldr	r3, [pc, #368]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd0:	0e1b      	lsrs	r3, r3, #24
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007fd8:	4b58      	ldr	r3, [pc, #352]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fde:	099b      	lsrs	r3, r3, #6
 8007fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	fb02 f203 	mul.w	r2, r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007ff2:	4b52      	ldr	r3, [pc, #328]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	617b      	str	r3, [r7, #20]
        break;
 800800a:	e003      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800800c:	4b4e      	ldr	r3, [pc, #312]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800800e:	617b      	str	r3, [r7, #20]
        break;
 8008010:	e000      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008012:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801a:	f040 8086 	bne.w	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800801e:	4b47      	ldr	r3, [pc, #284]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008024:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800802c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008034:	d03e      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800803a:	d073      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d000      	beq.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008040:	e074      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008042:	4b3e      	ldr	r3, [pc, #248]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d108      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008056:	4a3a      	ldr	r2, [pc, #232]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e007      	b.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008060:	4b36      	ldr	r3, [pc, #216]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008068:	4a36      	ldr	r2, [pc, #216]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008070:	4b32      	ldr	r3, [pc, #200]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008076:	0e1b      	lsrs	r3, r3, #24
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800807e:	4b2f      	ldr	r3, [pc, #188]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008084:	099b      	lsrs	r3, r3, #6
 8008086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	fb02 f203 	mul.w	r2, r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008098:	4b28      	ldr	r3, [pc, #160]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800809a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	617b      	str	r3, [r7, #20]
        break;
 80080b2:	e03b      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080b4:	4b21      	ldr	r3, [pc, #132]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d108      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080c0:	4b1e      	ldr	r3, [pc, #120]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c8:	4a1d      	ldr	r2, [pc, #116]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80080ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	e007      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080d2:	4b1a      	ldr	r3, [pc, #104]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080da:	4a1a      	ldr	r2, [pc, #104]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80080dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080e2:	4b16      	ldr	r3, [pc, #88]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080f0:	4b12      	ldr	r3, [pc, #72]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f6:	099b      	lsrs	r3, r3, #6
 80080f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	fb02 f203 	mul.w	r2, r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	fbb2 f3f3 	udiv	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	3301      	adds	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]
        break;
 8008122:	e003      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008126:	617b      	str	r3, [r7, #20]
        break;
 8008128:	e000      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800812a:	bf00      	nop

  return frequency;
 800812c:	697b      	ldr	r3, [r7, #20]
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40023800 	.word	0x40023800
 8008140:	00f42400 	.word	0x00f42400
 8008144:	017d7840 	.word	0x017d7840
 8008148:	00bb8000 	.word	0x00bb8000

0800814c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e06b      	b.n	8008236 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7f5b      	ldrb	r3, [r3, #29]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d105      	bne.n	8008174 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fa fd56 	bl	8002c20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	22ca      	movs	r2, #202	; 0xca
 8008180:	625a      	str	r2, [r3, #36]	; 0x24
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2253      	movs	r2, #83	; 0x53
 8008188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb00 	bl	8008790 <RTC_EnterInitMode>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	22ff      	movs	r2, #255	; 0xff
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2204      	movs	r2, #4
 80081a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e046      	b.n	8008236 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6899      	ldr	r1, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b23      	ldr	r3, [pc, #140]	; (8008240 <HAL_RTC_Init+0xf4>)
 80081b4:	400b      	ands	r3, r1
 80081b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6899      	ldr	r1, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6919      	ldr	r1, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	041a      	lsls	r2, r3, #16
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008202:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0208 	bic.w	r2, r2, #8
 8008212:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	22ff      	movs	r2, #255	; 0xff
 800822c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008234:	2300      	movs	r3, #0
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	ff8fffbf 	.word	0xff8fffbf

08008244 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008244:	b590      	push	{r4, r7, lr}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	7f1b      	ldrb	r3, [r3, #28]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_RTC_SetTime+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e0a8      	b.n	80083b2 <HAL_RTC_SetTime+0x16e>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2202      	movs	r2, #2
 800826a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d126      	bne.n	80082c0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2200      	movs	r2, #0
 8008284:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 faac 	bl	80087e8 <RTC_ByteToBcd2>
 8008290:	4603      	mov	r3, r0
 8008292:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 faa5 	bl	80087e8 <RTC_ByteToBcd2>
 800829e:	4603      	mov	r3, r0
 80082a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082a2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	789b      	ldrb	r3, [r3, #2]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fa9d 	bl	80087e8 <RTC_ByteToBcd2>
 80082ae:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80082b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	7b1b      	ldrb	r3, [r3, #12]
 80082b8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	e018      	b.n	80082f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	7b1b      	ldrb	r3, [r3, #12]
 80082ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	22ca      	movs	r2, #202	; 0xca
 80082f8:	625a      	str	r2, [r3, #36]	; 0x24
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2253      	movs	r2, #83	; 0x53
 8008300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fa44 	bl	8008790 <RTC_EnterInitMode>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	22ff      	movs	r2, #255	; 0xff
 8008314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2204      	movs	r2, #4
 800831a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e045      	b.n	80083b2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	4b23      	ldr	r3, [pc, #140]	; (80083bc <HAL_RTC_SetTime+0x178>)
 800832e:	400b      	ands	r3, r1
 8008330:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008340:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6899      	ldr	r1, [r3, #8]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008368:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d111      	bne.n	800839c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f9e1 	bl	8008740 <HAL_RTC_WaitForSynchro>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	22ff      	movs	r2, #255	; 0xff
 800838a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2204      	movs	r2, #4
 8008390:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e00a      	b.n	80083b2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	22ff      	movs	r2, #255	; 0xff
 80083a2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80083b0:	2300      	movs	r3, #0
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd90      	pop	{r4, r7, pc}
 80083ba:	bf00      	nop
 80083bc:	007f7f7f 	.word	0x007f7f7f

080083c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	7f1b      	ldrb	r3, [r3, #28]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_RTC_SetDate+0x1c>
 80083d8:	2302      	movs	r3, #2
 80083da:	e092      	b.n	8008502 <HAL_RTC_SetDate+0x142>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <HAL_RTC_SetDate+0x4c>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	f023 0310 	bic.w	r3, r3, #16
 8008402:	b2db      	uxtb	r3, r3
 8008404:	330a      	adds	r3, #10
 8008406:	b2da      	uxtb	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11c      	bne.n	800844c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	78db      	ldrb	r3, [r3, #3]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f9e6 	bl	80087e8 <RTC_ByteToBcd2>
 800841c:	4603      	mov	r3, r0
 800841e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 f9df 	bl	80087e8 <RTC_ByteToBcd2>
 800842a:	4603      	mov	r3, r0
 800842c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800842e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	789b      	ldrb	r3, [r3, #2]
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f9d7 	bl	80087e8 <RTC_ByteToBcd2>
 800843a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800843c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e00e      	b.n	800846a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	78db      	ldrb	r3, [r3, #3]
 8008450:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008458:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800845e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	22ca      	movs	r2, #202	; 0xca
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2253      	movs	r2, #83	; 0x53
 8008478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f988 	bl	8008790 <RTC_EnterInitMode>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	22ff      	movs	r2, #255	; 0xff
 800848c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2204      	movs	r2, #4
 8008492:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e031      	b.n	8008502 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	4b19      	ldr	r3, [pc, #100]	; (800850c <HAL_RTC_SetDate+0x14c>)
 80084a6:	400b      	ands	r3, r1
 80084a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d111      	bne.n	80084ec <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f939 	bl	8008740 <HAL_RTC_WaitForSynchro>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	22ff      	movs	r2, #255	; 0xff
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2204      	movs	r2, #4
 80084e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e00a      	b.n	8008502 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	22ff      	movs	r2, #255	; 0xff
 80084f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008500:	2300      	movs	r3, #0
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}
 800850a:	bf00      	nop
 800850c:	00ffff3f 	.word	0x00ffff3f

08008510 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b089      	sub	sp, #36	; 0x24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	2300      	movs	r3, #0
 8008526:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	7f1b      	ldrb	r3, [r3, #28]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_RTC_SetAlarm+0x24>
 8008530:	2302      	movs	r3, #2
 8008532:	e101      	b.n	8008738 <HAL_RTC_SetAlarm+0x228>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2202      	movs	r2, #2
 800853e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d137      	bne.n	80085b6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2200      	movs	r2, #0
 8008558:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f942 	bl	80087e8 <RTC_ByteToBcd2>
 8008564:	4603      	mov	r3, r0
 8008566:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f93b 	bl	80087e8 <RTC_ByteToBcd2>
 8008572:	4603      	mov	r3, r0
 8008574:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008576:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	789b      	ldrb	r3, [r3, #2]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f933 	bl	80087e8 <RTC_ByteToBcd2>
 8008582:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008584:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	7b1b      	ldrb	r3, [r3, #12]
 800858c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800858e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008598:	4618      	mov	r0, r3
 800859a:	f000 f925 	bl	80087e8 <RTC_ByteToBcd2>
 800859e:	4603      	mov	r3, r0
 80085a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80085aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80085b0:	4313      	orrs	r3, r2
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e023      	b.n	80085fe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085d6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	7b1b      	ldrb	r3, [r3, #12]
 80085e2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085fa:	4313      	orrs	r3, r2
 80085fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	22ca      	movs	r2, #202	; 0xca
 8008610:	625a      	str	r2, [r3, #36]	; 0x24
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2253      	movs	r2, #83	; 0x53
 8008618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008622:	d13f      	bne.n	80086a4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008632:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008642:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008644:	f7fb f8b6 	bl	80037b4 <HAL_GetTick>
 8008648:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800864a:	e013      	b.n	8008674 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800864c:	f7fb f8b2 	bl	80037b4 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865a:	d90b      	bls.n	8008674 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2203      	movs	r2, #3
 8008668:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e061      	b.n	8008738 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0e4      	beq.n	800864c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a0:	609a      	str	r2, [r3, #8]
 80086a2:	e03e      	b.n	8008722 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80086b2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086c2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086c4:	f7fb f876 	bl	80037b4 <HAL_GetTick>
 80086c8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086ca:	e013      	b.n	80086f4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086cc:	f7fb f872 	bl	80037b4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086da:	d90b      	bls.n	80086f4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2203      	movs	r2, #3
 80086e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e021      	b.n	8008738 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0e4      	beq.n	80086cc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008720:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	22ff      	movs	r2, #255	; 0xff
 8008728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3724      	adds	r7, #36	; 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd90      	pop	{r4, r7, pc}

08008740 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800875a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800875c:	f7fb f82a 	bl	80037b4 <HAL_GetTick>
 8008760:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008762:	e009      	b.n	8008778 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008764:	f7fb f826 	bl	80037b4 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d901      	bls.n	8008778 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e007      	b.n	8008788 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0ee      	beq.n	8008764 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d119      	bne.n	80087de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087b4:	f7fa fffe 	bl	80037b4 <HAL_GetTick>
 80087b8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087ba:	e009      	b.n	80087d0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087bc:	f7fa fffa 	bl	80037b4 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ca:	d901      	bls.n	80087d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e007      	b.n	80087e0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0ee      	beq.n	80087bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80087f6:	e005      	b.n	8008804 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	3b0a      	subs	r3, #10
 8008802:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b09      	cmp	r3, #9
 8008808:	d8f6      	bhi.n	80087f8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	b2da      	uxtb	r2, r3
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	4313      	orrs	r3, r2
 8008816:	b2db      	uxtb	r3, r3
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	7f1b      	ldrb	r3, [r3, #28]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_RTCEx_SetTimeStamp+0x1c>
 800883c:	2302      	movs	r3, #2
 800883e:	e03e      	b.n	80088be <HAL_RTCEx_SetTimeStamp+0x9a>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2202      	movs	r2, #2
 800884a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008854:	4013      	ands	r3, r2
 8008856:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	22ca      	movs	r2, #202	; 0xca
 8008866:	625a      	str	r2, [r3, #36]	; 0x24
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2253      	movs	r2, #83	; 0x53
 800886e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0206 	bic.w	r2, r2, #6
 800887e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	430a      	orrs	r2, r1
 800888e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	fffff7f7 	.word	0xfffff7f7

080088d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e149      	b.n	8008b82 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7fa fd36 	bl	8003374 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f94f 	bl	8008bb4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d007      	beq.n	800892e <HAL_SAI_Init+0x5e>
 800891e:	2b01      	cmp	r3, #1
 8008920:	d302      	bcc.n	8008928 <HAL_SAI_Init+0x58>
 8008922:	2b02      	cmp	r3, #2
 8008924:	d006      	beq.n	8008934 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008926:	e008      	b.n	800893a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
      break;
 800892c:	e005      	b.n	800893a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800892e:	2310      	movs	r3, #16
 8008930:	61fb      	str	r3, [r7, #28]
      break;
 8008932:	e002      	b.n	800893a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008934:	2320      	movs	r3, #32
 8008936:	61fb      	str	r3, [r7, #28]
      break;
 8008938:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d81d      	bhi.n	800897e <HAL_SAI_Init+0xae>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <HAL_SAI_Init+0x78>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008959 	.word	0x08008959
 800894c:	0800895f 	.word	0x0800895f
 8008950:	08008967 	.word	0x08008967
 8008954:	0800896f 	.word	0x0800896f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
      }
      break;
 800895c:	e010      	b.n	8008980 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800895e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008962:	617b      	str	r3, [r7, #20]
      }
      break;
 8008964:	e00c      	b.n	8008980 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800896a:	617b      	str	r3, [r7, #20]
      }
      break;
 800896c:	e008      	b.n	8008980 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800896e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008972:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800897c:	e000      	b.n	8008980 <HAL_SAI_Init+0xb0>
  default:
    break;
 800897e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a81      	ldr	r2, [pc, #516]	; (8008b8c <HAL_SAI_Init+0x2bc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_SAI_Init+0xc4>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a80      	ldr	r2, [pc, #512]	; (8008b90 <HAL_SAI_Init+0x2c0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008994:	4a7f      	ldr	r2, [pc, #508]	; (8008b94 <HAL_SAI_Init+0x2c4>)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e002      	b.n	80089a2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800899c:	4a7e      	ldr	r2, [pc, #504]	; (8008b98 <HAL_SAI_Init+0x2c8>)
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d043      	beq.n	8008a32 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a76      	ldr	r2, [pc, #472]	; (8008b8c <HAL_SAI_Init+0x2bc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_SAI_Init+0xf2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a74      	ldr	r2, [pc, #464]	; (8008b90 <HAL_SAI_Init+0x2c0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d104      	bne.n	80089cc <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80089c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80089c6:	f7ff fa8d 	bl	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq>
 80089ca:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a72      	ldr	r2, [pc, #456]	; (8008b9c <HAL_SAI_Init+0x2cc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d004      	beq.n	80089e0 <HAL_SAI_Init+0x110>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a71      	ldr	r2, [pc, #452]	; (8008ba0 <HAL_SAI_Init+0x2d0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d104      	bne.n	80089ea <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80089e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089e4:	f7ff fa7e 	bl	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq>
 80089e8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	025b      	lsls	r3, r3, #9
 80089fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a00:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4a67      	ldr	r2, [pc, #412]	; (8008ba4 <HAL_SAI_Init+0x2d4>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	08da      	lsrs	r2, r3, #3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	4b64      	ldr	r3, [pc, #400]	; (8008ba4 <HAL_SAI_Init+0x2d4>)
 8008a14:	fba3 2301 	umull	r2, r3, r3, r1
 8008a18:	08da      	lsrs	r2, r3, #3
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	1aca      	subs	r2, r1, r3
 8008a24:	2a08      	cmp	r2, #8
 8008a26:	d904      	bls.n	8008a32 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_SAI_Init+0x172>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d109      	bne.n	8008a56 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_SAI_Init+0x17e>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e001      	b.n	8008a52 <HAL_SAI_Init+0x182>
 8008a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a52:	61bb      	str	r3, [r7, #24]
 8008a54:	e008      	b.n	8008a68 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d102      	bne.n	8008a64 <HAL_SAI_Init+0x194>
 8008a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a62:	e000      	b.n	8008a66 <HAL_SAI_Init+0x196>
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b4d      	ldr	r3, [pc, #308]	; (8008ba8 <HAL_SAI_Init+0x2d8>)
 8008a74:	400b      	ands	r3, r1
 8008a76:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a8c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	431a      	orrs	r2, r3
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008aa0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aac:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	051b      	lsls	r3, r3, #20
 8008ab4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6859      	ldr	r1, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b38      	ldr	r3, [pc, #224]	; (8008bac <HAL_SAI_Init+0x2dc>)
 8008aca:	400b      	ands	r3, r1
 8008acc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6859      	ldr	r1, [r3, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699a      	ldr	r2, [r3, #24]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6899      	ldr	r1, [r3, #8]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b2e      	ldr	r3, [pc, #184]	; (8008bb0 <HAL_SAI_Init+0x2e0>)
 8008af8:	400b      	ands	r3, r1
 8008afa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6899      	ldr	r1, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008b0c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008b12:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008b18:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008b22:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68d9      	ldr	r1, [r3, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008b3a:	400b      	ands	r3, r1
 8008b3c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68d9      	ldr	r1, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	40015804 	.word	0x40015804
 8008b90:	40015824 	.word	0x40015824
 8008b94:	40015800 	.word	0x40015800
 8008b98:	40015c00 	.word	0x40015c00
 8008b9c:	40015c04 	.word	0x40015c04
 8008ba0:	40015c24 	.word	0x40015c24
 8008ba4:	cccccccd 	.word	0xcccccccd
 8008ba8:	ff05c010 	.word	0xff05c010
 8008bac:	ffff1ff0 	.word	0xffff1ff0
 8008bb0:	fff88000 	.word	0xfff88000

08008bb4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008bb4:	b490      	push	{r4, r7}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008bbc:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <SAI_Disable+0x64>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <SAI_Disable+0x68>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	0b1b      	lsrs	r3, r3, #12
 8008bc8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bdc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008bde:	4623      	mov	r3, r4
 8008be0:	1e5c      	subs	r4, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfa:	e006      	b.n	8008c0a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e9      	bne.n	8008bde <SAI_Disable+0x2a>

  return status;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc90      	pop	{r4, r7}
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010
 8008c1c:	95cbec1b 	.word	0x95cbec1b

08008c20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e022      	b.n	8008c78 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fa f805 	bl	8002c54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f814 	bl	8008c80 <HAL_SD_InitCard>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00a      	b.n	8008c78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c80:	b5b0      	push	{r4, r5, r7, lr}
 8008c82:	b08e      	sub	sp, #56	; 0x38
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008c9c:	2376      	movs	r3, #118	; 0x76
 8008c9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681d      	ldr	r5, [r3, #0]
 8008ca4:	466c      	mov	r4, sp
 8008ca6:	f107 0314 	add.w	r3, r7, #20
 8008caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cb2:	f107 0308 	add.w	r3, r7, #8
 8008cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f002 ff51 	bl	800bb60 <SDMMC_Init>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e03b      	b.n	8008d48 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cde:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f002 ff74 	bl	800bbd2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cf8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fde6 	bl	80098cc <SD_PowerON>
 8008d00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e013      	b.n	8008d48 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fd05 	bl	8009730 <SD_InitCard>
 8008d26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bdb0      	pop	{r4, r5, r7, pc}

08008d50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08c      	sub	sp, #48	; 0x30
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e0cc      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	f040 80c5 	bne.w	8008f10 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d907      	bls.n	8008daa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e0b3      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2203      	movs	r2, #3
 8008dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2200      	movs	r2, #0
 8008db8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	4a53      	ldr	r2, [pc, #332]	; (8008f1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	4a52      	ldr	r2, [pc, #328]	; (8008f20 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008dd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	2200      	movs	r2, #0
 8008de0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3380      	adds	r3, #128	; 0x80
 8008dec:	4619      	mov	r1, r3
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	025b      	lsls	r3, r3, #9
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	f7fb ff8b 	bl	8004d10 <HAL_DMA_Start_IT>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d017      	beq.n	8008e30 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008e0e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a43      	ldr	r2, [pc, #268]	; (8008f24 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e070      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0208 	orr.w	r2, r2, #8
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d002      	beq.n	8008e4e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	025b      	lsls	r3, r3, #9
 8008e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 ff4e 	bl	800bcf8 <SDMMC_CmdBlockLength>
 8008e5c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00f      	beq.n	8008e84 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a2e      	ldr	r2, [pc, #184]	; (8008f24 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	431a      	orrs	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e046      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295
 8008e88:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	025b      	lsls	r3, r3, #9
 8008e8e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e90:	2390      	movs	r3, #144	; 0x90
 8008e92:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e94:	2302      	movs	r3, #2
 8008e96:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f107 0210 	add.w	r2, r7, #16
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 fef8 	bl	800bca0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d90a      	bls.n	8008ecc <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2282      	movs	r2, #130	; 0x82
 8008eba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f002 ff5c 	bl	800bd80 <SDMMC_CmdReadMultiBlock>
 8008ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008eca:	e009      	b.n	8008ee0 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2281      	movs	r2, #129	; 0x81
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f002 ff2f 	bl	800bd3c <SDMMC_CmdReadSingleBlock>
 8008ede:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d012      	beq.n	8008f0c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a0e      	ldr	r2, [pc, #56]	; (8008f24 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e002      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	0800961b 	.word	0x0800961b
 8008f20:	0800968d 	.word	0x0800968d
 8008f24:	004005ff 	.word	0x004005ff

08008f28 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08c      	sub	sp, #48	; 0x30
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d107      	bne.n	8008f50 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0cf      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	f040 80c8 	bne.w	80090ee <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d907      	bls.n	8008f82 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e0b6      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2203      	movs	r2, #3
 8008f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 021a 	orr.w	r2, r2, #26
 8008fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	4a54      	ldr	r2, [pc, #336]	; (80090f8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	4a53      	ldr	r2, [pc, #332]	; (80090fc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008fb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d002      	beq.n	8008fc8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	025b      	lsls	r3, r3, #9
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 fe91 	bl	800bcf8 <SDMMC_CmdBlockLength>
 8008fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a47      	ldr	r2, [pc, #284]	; (8009100 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	431a      	orrs	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e078      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d90a      	bls.n	800901a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	22a0      	movs	r2, #160	; 0xa0
 8009008:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fef9 	bl	800be08 <SDMMC_CmdWriteMultiBlock>
 8009016:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009018:	e009      	b.n	800902e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2290      	movs	r2, #144	; 0x90
 800901e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fecc 	bl	800bdc4 <SDMMC_CmdWriteSingleBlock>
 800902c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d012      	beq.n	800905a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a31      	ldr	r2, [pc, #196]	; (8009100 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800903a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	431a      	orrs	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e04a      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0208 	orr.w	r2, r2, #8
 8009068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3380      	adds	r3, #128	; 0x80
 8009076:	461a      	mov	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	025b      	lsls	r3, r3, #9
 800907c:	089b      	lsrs	r3, r3, #2
 800907e:	f7fb fe47 	bl	8004d10 <HAL_DMA_Start_IT>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01a      	beq.n	80090be <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 021a 	bic.w	r2, r2, #26
 8009096:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a18      	ldr	r2, [pc, #96]	; (8009100 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800909e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e018      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090be:	f04f 33ff 	mov.w	r3, #4294967295
 80090c2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	025b      	lsls	r3, r3, #9
 80090c8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090ca:	2390      	movs	r3, #144	; 0x90
 80090cc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f107 0210 	add.w	r2, r7, #16
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f002 fddb 	bl	800bca0 <SDMMC_ConfigData>

      return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e000      	b.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	; 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	080095f1 	.word	0x080095f1
 80090fc:	0800968d 	.word	0x0800968d
 8009100:	004005ff 	.word	0x004005ff

08009104 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009126:	0f9b      	lsrs	r3, r3, #30
 8009128:	b2da      	uxtb	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009132:	0e9b      	lsrs	r3, r3, #26
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009144:	0e1b      	lsrs	r3, r3, #24
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	b2da      	uxtb	r2, r3
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009156:	0c1b      	lsrs	r3, r3, #16
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	b2da      	uxtb	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800916e:	b2da      	uxtb	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009178:	0d1b      	lsrs	r3, r3, #20
 800917a:	b29a      	uxth	r2, r3
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	b2da      	uxtb	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009196:	0bdb      	lsrs	r3, r3, #15
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a8:	0b9b      	lsrs	r3, r3, #14
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ba:	0b5b      	lsrs	r3, r3, #13
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091cc:	0b1b      	lsrs	r3, r3, #12
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2200      	movs	r2, #0
 80091de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d163      	bne.n	80092b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ec:	009a      	lsls	r2, r3, #2
 80091ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091f2:	4013      	ands	r3, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80091f8:	0f92      	lsrs	r2, r2, #30
 80091fa:	431a      	orrs	r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009204:	0edb      	lsrs	r3, r3, #27
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	b2da      	uxtb	r2, r3
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	0e1b      	lsrs	r3, r3, #24
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	b2da      	uxtb	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009228:	0d5b      	lsrs	r3, r3, #21
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	b2da      	uxtb	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923a:	0c9b      	lsrs	r3, r3, #18
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924c:	0bdb      	lsrs	r3, r3, #15
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	b2da      	uxtb	r2, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	7e1b      	ldrb	r3, [r3, #24]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	3302      	adds	r3, #2
 8009270:	2201      	movs	r2, #1
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800927a:	fb02 f203 	mul.w	r2, r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	7a1b      	ldrb	r3, [r3, #8]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	2201      	movs	r2, #1
 800928e:	409a      	lsls	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800929c:	0a52      	lsrs	r2, r2, #9
 800929e:	fb02 f203 	mul.w	r2, r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092ac:	661a      	str	r2, [r3, #96]	; 0x60
 80092ae:	e031      	b.n	8009314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d11d      	bne.n	80092f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c6:	0c1b      	lsrs	r3, r3, #16
 80092c8:	431a      	orrs	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	3301      	adds	r3, #1
 80092d4:	029a      	lsls	r2, r3, #10
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	661a      	str	r2, [r3, #96]	; 0x60
 80092f2:	e00f      	b.n	8009314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a58      	ldr	r2, [pc, #352]	; (800945c <HAL_SD_GetCardCSD+0x344>)
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e09d      	b.n	8009450 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009318:	0b9b      	lsrs	r3, r3, #14
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	09db      	lsrs	r3, r3, #7
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009342:	b2da      	uxtb	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	0fdb      	lsrs	r3, r3, #31
 800934e:	b2da      	uxtb	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009358:	0f5b      	lsrs	r3, r3, #29
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	0e9b      	lsrs	r3, r3, #26
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	0d9b      	lsrs	r3, r3, #22
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	0d5b      	lsrs	r3, r3, #21
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	0c1b      	lsrs	r3, r3, #16
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	0bdb      	lsrs	r3, r3, #15
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d2:	0b9b      	lsrs	r3, r3, #14
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	0b5b      	lsrs	r3, r3, #13
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	0b1b      	lsrs	r3, r3, #12
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940e:	0a9b      	lsrs	r3, r3, #10
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943e:	b2da      	uxtb	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	004005ff 	.word	0x004005ff

08009460 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	b08e      	sub	sp, #56	; 0x38
 80094bc:	af04      	add	r7, sp, #16
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2203      	movs	r2, #3
 80094c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d02e      	beq.n	8009530 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d8:	d106      	bne.n	80094e8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38
 80094e6:	e029      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ee:	d10a      	bne.n	8009506 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 faa1 	bl	8009a38 <SD_WideBus_Enable>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38
 8009504:	e01a      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fade 	bl	8009ace <SD_WideBus_Disable>
 8009512:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	639a      	str	r2, [r3, #56]	; 0x38
 8009520:	e00c      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
 800952e:	e005      	b.n	800953c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a18      	ldr	r2, [pc, #96]	; (80095ac <HAL_SD_ConfigWideBusOperation+0xf4>)
 800954a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e024      	b.n	80095a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	466c      	mov	r4, sp
 8009580:	f107 0318 	add.w	r3, r7, #24
 8009584:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009592:	4628      	mov	r0, r5
 8009594:	f002 fae4 	bl	800bb60 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3728      	adds	r7, #40	; 0x28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bdb0      	pop	{r4, r5, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	004005ff 	.word	0x004005ff

080095b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa10 	bl	80099e8 <SD_SendStatus>
 80095c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	0a5b      	lsrs	r3, r3, #9
 80095e0:	f003 030f 	and.w	r3, r3, #15
 80095e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80095e6:	693b      	ldr	r3, [r7, #16]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800960c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962c:	2b82      	cmp	r3, #130	; 0x82
 800962e:	d111      	bne.n	8009654 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f002 fc09 	bl	800be4c <SDMMC_CmdStopTransfer>
 800963a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d008      	beq.n	8009654 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	431a      	orrs	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd58 	bl	8009104 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0208 	bic.w	r2, r2, #8
 8009662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f240 523a 	movw	r2, #1338	; 0x53a
 800966c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f003 f84f 	bl	800c720 <HAL_SD_RxCpltCallback>
#endif
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009698:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7fb fb98 	bl	8004dd0 <HAL_DMA_GetError>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d03e      	beq.n	8009724 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d002      	beq.n	80096c2 <SD_DMAError+0x36>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d12d      	bne.n	800971e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a19      	ldr	r2, [pc, #100]	; (800972c <SD_DMAError+0xa0>)
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80096d8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f7ff ff62 	bl	80095b0 <HAL_SD_GetCardState>
 80096ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b06      	cmp	r3, #6
 80096f2:	d002      	beq.n	80096fa <SD_DMAError+0x6e>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d10a      	bne.n	8009710 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f002 fba4 	bl	800be4c <SDMMC_CmdStopTransfer>
 8009704:	4602      	mov	r2, r0
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	431a      	orrs	r2, r3
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2200      	movs	r2, #0
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800971e:	6978      	ldr	r0, [r7, #20]
 8009720:	f7ff fcf0 	bl	8009104 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	004005ff 	.word	0x004005ff

08009730 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009730:	b5b0      	push	{r4, r5, r7, lr}
 8009732:	b094      	sub	sp, #80	; 0x50
 8009734:	af04      	add	r7, sp, #16
 8009736:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009738:	2301      	movs	r3, #1
 800973a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f002 fa55 	bl	800bbf0 <SDMMC_GetPowerState>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d102      	bne.n	8009752 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800974c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009750:	e0b7      	b.n	80098c2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009756:	2b03      	cmp	r3, #3
 8009758:	d02f      	beq.n	80097ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f002 fc7f 	bl	800c062 <SDMMC_CmdSendCID>
 8009764:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <SD_InitCard+0x40>
    {
      return errorstate;
 800976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976e:	e0a8      	b.n	80098c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f002 fa7f 	bl	800bc7a <SDMMC_GetResponse>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2104      	movs	r1, #4
 8009788:	4618      	mov	r0, r3
 800978a:	f002 fa76 	bl	800bc7a <SDMMC_GetResponse>
 800978e:	4602      	mov	r2, r0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2108      	movs	r1, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f002 fa6d 	bl	800bc7a <SDMMC_GetResponse>
 80097a0:	4602      	mov	r2, r0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	210c      	movs	r1, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f002 fa64 	bl	800bc7a <SDMMC_GetResponse>
 80097b2:	4602      	mov	r2, r0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d00d      	beq.n	80097de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f107 020e 	add.w	r2, r7, #14
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f002 fc85 	bl	800c0dc <SDMMC_CmdSetRelAdd>
 80097d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <SD_InitCard+0xae>
    {
      return errorstate;
 80097da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097dc:	e071      	b.n	80098c2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d036      	beq.n	8009854 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80097e6:	89fb      	ldrh	r3, [r7, #14]
 80097e8:	461a      	mov	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f6:	041b      	lsls	r3, r3, #16
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f002 fc4f 	bl	800c09e <SDMMC_CmdSendCSD>
 8009800:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980a:	e05a      	b.n	80098c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fa31 	bl	800bc7a <SDMMC_GetResponse>
 8009818:	4602      	mov	r2, r0
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2104      	movs	r1, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fa28 	bl	800bc7a <SDMMC_GetResponse>
 800982a:	4602      	mov	r2, r0
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2108      	movs	r1, #8
 8009836:	4618      	mov	r0, r3
 8009838:	f002 fa1f 	bl	800bc7a <SDMMC_GetResponse>
 800983c:	4602      	mov	r2, r0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	210c      	movs	r1, #12
 8009848:	4618      	mov	r0, r3
 800984a:	f002 fa16 	bl	800bc7a <SDMMC_GetResponse>
 800984e:	4602      	mov	r2, r0
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2104      	movs	r1, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f002 fa0d 	bl	800bc7a <SDMMC_GetResponse>
 8009860:	4603      	mov	r3, r0
 8009862:	0d1a      	lsrs	r2, r3, #20
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009868:	f107 0310 	add.w	r3, r7, #16
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff fc52 	bl	8009118 <HAL_SD_GetCardCSD>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800987a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800987e:	e020      	b.n	80098c2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	f04f 0400 	mov.w	r4, #0
 800988e:	461a      	mov	r2, r3
 8009890:	4623      	mov	r3, r4
 8009892:	4608      	mov	r0, r1
 8009894:	f002 fafc 	bl	800be90 <SDMMC_CmdSelDesel>
 8009898:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800989a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <SD_InitCard+0x174>
  {
    return errorstate;
 80098a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a2:	e00e      	b.n	80098c2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681d      	ldr	r5, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	466c      	mov	r4, sp
 80098ac:	f103 0210 	add.w	r2, r3, #16
 80098b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80098b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098b6:	3304      	adds	r3, #4
 80098b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098ba:	4628      	mov	r0, r5
 80098bc:	f002 f950 	bl	800bb60 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3740      	adds	r7, #64	; 0x40
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f002 faf6 	bl	800bed6 <SDMMC_CmdGoIdleState>
 80098ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	e072      	b.n	80099dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f002 fb09 	bl	800bf12 <SDMMC_CmdOperCond>
 8009900:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00d      	beq.n	8009924 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f002 fadf 	bl	800bed6 <SDMMC_CmdGoIdleState>
 8009918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	e05b      	b.n	80099dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800992e:	2b01      	cmp	r3, #1
 8009930:	d137      	bne.n	80099a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2100      	movs	r1, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f002 fb09 	bl	800bf50 <SDMMC_CmdAppCommand>
 800993e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d02d      	beq.n	80099a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009946:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800994a:	e047      	b.n	80099dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f002 fafc 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <SD_PowerON+0x98>
    {
      return errorstate;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	e03b      	b.n	80099dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	491e      	ldr	r1, [pc, #120]	; (80099e4 <SD_PowerON+0x118>)
 800996a:	4618      	mov	r0, r3
 800996c:	f002 fb12 	bl	800bf94 <SDMMC_CmdAppOperCommand>
 8009970:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009978:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800997c:	e02e      	b.n	80099dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f002 f978 	bl	800bc7a <SDMMC_GetResponse>
 800998a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	0fdb      	lsrs	r3, r3, #31
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <SD_PowerON+0xcc>
 8009994:	2301      	movs	r3, #1
 8009996:	e000      	b.n	800999a <SD_PowerON+0xce>
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]

    count++;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3301      	adds	r3, #1
 80099a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d802      	bhi.n	80099b2 <SD_PowerON+0xe6>
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0cc      	beq.n	800994c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d902      	bls.n	80099c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80099bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099c0:	e00c      	b.n	80099dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
 80099d2:	e002      	b.n	80099da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	c1100000 	.word	0xc1100000

080099e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d102      	bne.n	80099fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80099f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099fc:	e018      	b.n	8009a30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f002 fb87 	bl	800c11e <SDMMC_CmdSendStatus>
 8009a10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	e009      	b.n	8009a30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f002 f929 	bl	800bc7a <SDMMC_GetResponse>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f002 f913 	bl	800bc7a <SDMMC_GetResponse>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a5e:	d102      	bne.n	8009a66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a64:	e02f      	b.n	8009ac6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a66:	f107 030c 	add.w	r3, r7, #12
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f879 	bl	8009b64 <SD_FindSCR>
 8009a72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	e023      	b.n	8009ac6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01c      	beq.n	8009ac2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a90:	041b      	lsls	r3, r3, #16
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f002 fa5b 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009a9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	e00f      	b.n	8009ac6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2102      	movs	r1, #2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f002 fa95 	bl	800bfdc <SDMMC_CmdBusWidth>
 8009ab2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	e003      	b.n	8009ac6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e001      	b.n	8009ac6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ac2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b086      	sub	sp, #24
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f002 f8c8 	bl	800bc7a <SDMMC_GetResponse>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af4:	d102      	bne.n	8009afc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009afa:	e02f      	b.n	8009b5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009afc:	f107 030c 	add.w	r3, r7, #12
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f82e 	bl	8009b64 <SD_FindSCR>
 8009b08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	e023      	b.n	8009b5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01c      	beq.n	8009b58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f002 fa10 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009b30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	e00f      	b.n	8009b5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 fa4a 	bl	800bfdc <SDMMC_CmdBusWidth>
 8009b48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	e003      	b.n	8009b5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e001      	b.n	8009b5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b08f      	sub	sp, #60	; 0x3c
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b6e:	f7f9 fe21 	bl	80037b4 <HAL_GetTick>
 8009b72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60bb      	str	r3, [r7, #8]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2108      	movs	r1, #8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f002 f8b4 	bl	800bcf8 <SDMMC_CmdBlockLength>
 8009b90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	e0a9      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f002 f9d1 	bl	800bf50 <SDMMC_CmdAppCommand>
 8009bae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <SD_FindSCR+0x56>
  {
    return errorstate;
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	e09a      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bba:	f04f 33ff 	mov.w	r3, #4294967295
 8009bbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009bc0:	2308      	movs	r3, #8
 8009bc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009bc4:	2330      	movs	r3, #48	; 0x30
 8009bc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f107 0210 	add.w	r2, r7, #16
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f002 f85e 	bl	800bca0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 fa19 	bl	800c020 <SDMMC_CmdSendSCR>
 8009bee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d022      	beq.n	8009c3c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	e07a      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00e      	beq.n	8009c26 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6819      	ldr	r1, [r3, #0]
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	f107 0208 	add.w	r2, r7, #8
 8009c14:	18d4      	adds	r4, r2, r3
 8009c16:	4608      	mov	r0, r1
 8009c18:	f001 ffce 	bl	800bbb8 <SDMMC_ReadFIFO>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	6023      	str	r3, [r4, #0]
      index++;
 8009c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c22:	3301      	adds	r3, #1
 8009c24:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c26:	f7f9 fdc5 	bl	80037b4 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c34:	d102      	bne.n	8009c3c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c3a:	e059      	b.n	8009cf0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c42:	f240 432a 	movw	r3, #1066	; 0x42a
 8009c46:	4013      	ands	r3, r2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0d6      	beq.n	8009bfa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	f003 0308 	and.w	r3, r3, #8
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2208      	movs	r2, #8
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c62:	2308      	movs	r3, #8
 8009c64:	e044      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e037      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d005      	beq.n	8009c9a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2220      	movs	r2, #32
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009c96:	2320      	movs	r3, #32
 8009c98:	e02a      	b.n	8009cf0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	061a      	lsls	r2, r3, #24
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	0e1b      	lsrs	r3, r3, #24
 8009cc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	601a      	str	r2, [r3, #0]
    scr++;
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	3304      	adds	r3, #4
 8009cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	061a      	lsls	r2, r3, #24
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	0a1b      	lsrs	r3, r3, #8
 8009cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ce2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	0e1b      	lsrs	r3, r3, #24
 8009ce8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	373c      	adds	r7, #60	; 0x3c
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd90      	pop	{r4, r7, pc}

08009cf8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e025      	b.n	8009d58 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d106      	bne.n	8009d26 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7f9 fb1d 	bl	8003360 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f001 fdeb 	bl	800b914 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	f001 fe55 	bl	800b9f8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d101      	bne.n	8009d7c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e018      	b.n	8009dae <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 feb3 	bl	800baf8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d104      	bne.n	8009da4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2205      	movs	r2, #5
 8009d9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009da2:	e003      	b.n	8009dac <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d101      	bne.n	8009dd0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e00e      	b.n	8009dee <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 feab 	bl	800bb3a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e04c      	b.n	8009ea4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7f8 ff7a 	bl	8002d18 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0203 	bic.w	r2, r2, #3
 8009e3a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4b19      	ldr	r3, [pc, #100]	; (8009eac <HAL_SPDIFRX_Init+0xb4>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009e54:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009e5a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009e60:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009e66:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009e6c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009e72:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009e78:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009e7e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009e84:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	fff88407 	.word	0xfff88407

08009eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e084      	b.n	8009fcc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d106      	bne.n	8009ee2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7f8 ff5d 	bl	8002d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ef8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f02:	d902      	bls.n	8009f0a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	e002      	b.n	8009f10 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f18:	d007      	beq.n	8009f2a <HAL_SPI_Init+0x7a>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f22:	d002      	beq.n	8009f2a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f3a:	d903      	bls.n	8009f44 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	631a      	str	r2, [r3, #48]	; 0x30
 8009f42:	e002      	b.n	8009f4a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	ea42 0103 	orr.w	r1, r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	f003 0204 	and.w	r2, r3, #4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	431a      	orrs	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	ea42 0103 	orr.w	r1, r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e01d      	b.n	800a022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d106      	bne.n	800a000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7f8 ff30 	bl	8002e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3304      	adds	r3, #4
 800a010:	4619      	mov	r1, r3
 800a012:	4610      	mov	r0, r2
 800a014:	f000 fb78 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <HAL_TIM_Base_Start_IT+0x50>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b06      	cmp	r3, #6
 800a054:	d00b      	beq.n	800a06e <HAL_TIM_Base_Start_IT+0x42>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a05c:	d007      	beq.n	800a06e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0201 	orr.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	00010007 	.word	0x00010007

0800a080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e01d      	b.n	800a0ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7f8 ff48 	bl	8002f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	f000 fb22 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d122      	bne.n	800a132 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f003 0302 	and.w	r3, r3, #2
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d11b      	bne.n	800a132 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f06f 0202 	mvn.w	r2, #2
 800a102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fad7 	bl	800a6cc <HAL_TIM_IC_CaptureCallback>
 800a11e:	e005      	b.n	800a12c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fac9 	bl	800a6b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fada 	bl	800a6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	d122      	bne.n	800a186 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d11b      	bne.n	800a186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f06f 0204 	mvn.w	r2, #4
 800a156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 faad 	bl	800a6cc <HAL_TIM_IC_CaptureCallback>
 800a172:	e005      	b.n	800a180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fa9f 	bl	800a6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fab0 	bl	800a6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b08      	cmp	r3, #8
 800a192:	d122      	bne.n	800a1da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f003 0308 	and.w	r3, r3, #8
 800a19e:	2b08      	cmp	r3, #8
 800a1a0:	d11b      	bne.n	800a1da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f06f 0208 	mvn.w	r2, #8
 800a1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fa83 	bl	800a6cc <HAL_TIM_IC_CaptureCallback>
 800a1c6:	e005      	b.n	800a1d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fa75 	bl	800a6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa86 	bl	800a6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b10      	cmp	r3, #16
 800a1e6:	d122      	bne.n	800a22e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d11b      	bne.n	800a22e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f06f 0210 	mvn.w	r2, #16
 800a1fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2208      	movs	r2, #8
 800a204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a210:	2b00      	cmp	r3, #0
 800a212:	d003      	beq.n	800a21c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa59 	bl	800a6cc <HAL_TIM_IC_CaptureCallback>
 800a21a:	e005      	b.n	800a228 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa4b 	bl	800a6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa5c 	bl	800a6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d10e      	bne.n	800a25a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b01      	cmp	r3, #1
 800a248:	d107      	bne.n	800a25a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f06f 0201 	mvn.w	r2, #1
 800a252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7f8 f985 	bl	8002564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a264:	2b80      	cmp	r3, #128	; 0x80
 800a266:	d10e      	bne.n	800a286 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b80      	cmp	r3, #128	; 0x80
 800a274:	d107      	bne.n	800a286 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 feef 	bl	800b064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a294:	d10e      	bne.n	800a2b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a0:	2b80      	cmp	r3, #128	; 0x80
 800a2a2:	d107      	bne.n	800a2b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fee2 	bl	800b078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2be:	2b40      	cmp	r3, #64	; 0x40
 800a2c0:	d10e      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2cc:	2b40      	cmp	r3, #64	; 0x40
 800a2ce:	d107      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa0a 	bl	800a6f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d10e      	bne.n	800a30c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d107      	bne.n	800a30c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0220 	mvn.w	r2, #32
 800a304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fea2 	bl	800b050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e105      	b.n	800a53a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b14      	cmp	r3, #20
 800a342:	f200 80f0 	bhi.w	800a526 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a346:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a3a1 	.word	0x0800a3a1
 800a350:	0800a527 	.word	0x0800a527
 800a354:	0800a527 	.word	0x0800a527
 800a358:	0800a527 	.word	0x0800a527
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a527 	.word	0x0800a527
 800a364:	0800a527 	.word	0x0800a527
 800a368:	0800a527 	.word	0x0800a527
 800a36c:	0800a423 	.word	0x0800a423
 800a370:	0800a527 	.word	0x0800a527
 800a374:	0800a527 	.word	0x0800a527
 800a378:	0800a527 	.word	0x0800a527
 800a37c:	0800a463 	.word	0x0800a463
 800a380:	0800a527 	.word	0x0800a527
 800a384:	0800a527 	.word	0x0800a527
 800a388:	0800a527 	.word	0x0800a527
 800a38c:	0800a4a5 	.word	0x0800a4a5
 800a390:	0800a527 	.word	0x0800a527
 800a394:	0800a527 	.word	0x0800a527
 800a398:	0800a527 	.word	0x0800a527
 800a39c:	0800a4e5 	.word	0x0800a4e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fa4e 	bl	800a848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0208 	orr.w	r2, r2, #8
 800a3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0204 	bic.w	r2, r2, #4
 800a3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6999      	ldr	r1, [r3, #24]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	619a      	str	r2, [r3, #24]
      break;
 800a3de:	e0a3      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 faa0 	bl	800a92c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6999      	ldr	r1, [r3, #24]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	021a      	lsls	r2, r3, #8
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	619a      	str	r2, [r3, #24]
      break;
 800a420:	e082      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 faf7 	bl	800aa1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69da      	ldr	r2, [r3, #28]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f042 0208 	orr.w	r2, r2, #8
 800a43c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0204 	bic.w	r2, r2, #4
 800a44c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69d9      	ldr	r1, [r3, #28]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	61da      	str	r2, [r3, #28]
      break;
 800a460:	e062      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fb4d 	bl	800ab08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	69da      	ldr	r2, [r3, #28]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a48c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69d9      	ldr	r1, [r3, #28]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	021a      	lsls	r2, r3, #8
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	61da      	str	r2, [r3, #28]
      break;
 800a4a2:	e041      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fb84 	bl	800abb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0208 	orr.w	r2, r2, #8
 800a4be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0204 	bic.w	r2, r2, #4
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4e2:	e021      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fbb6 	bl	800ac5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a524:	e000      	b.n	800a528 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a526:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop

0800a544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0x18>
 800a558:	2302      	movs	r3, #2
 800a55a:	e0a6      	b.n	800a6aa <HAL_TIM_ConfigClockSource+0x166>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4b4f      	ldr	r3, [pc, #316]	; (800a6b4 <HAL_TIM_ConfigClockSource+0x170>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a582:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b40      	cmp	r3, #64	; 0x40
 800a592:	d067      	beq.n	800a664 <HAL_TIM_ConfigClockSource+0x120>
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d80b      	bhi.n	800a5b0 <HAL_TIM_ConfigClockSource+0x6c>
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d073      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x140>
 800a59c:	2b10      	cmp	r3, #16
 800a59e:	d802      	bhi.n	800a5a6 <HAL_TIM_ConfigClockSource+0x62>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d06f      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a5a4:	e078      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d06c      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x140>
 800a5aa:	2b30      	cmp	r3, #48	; 0x30
 800a5ac:	d06a      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a5ae:	e073      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5b0:	2b70      	cmp	r3, #112	; 0x70
 800a5b2:	d00d      	beq.n	800a5d0 <HAL_TIM_ConfigClockSource+0x8c>
 800a5b4:	2b70      	cmp	r3, #112	; 0x70
 800a5b6:	d804      	bhi.n	800a5c2 <HAL_TIM_ConfigClockSource+0x7e>
 800a5b8:	2b50      	cmp	r3, #80	; 0x50
 800a5ba:	d033      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0xe0>
 800a5bc:	2b60      	cmp	r3, #96	; 0x60
 800a5be:	d041      	beq.n	800a644 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a5c0:	e06a      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c6:	d066      	beq.n	800a696 <HAL_TIM_ConfigClockSource+0x152>
 800a5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5cc:	d017      	beq.n	800a5fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a5ce:	e063      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	6899      	ldr	r1, [r3, #8]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	f000 fc0a 	bl	800adf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	609a      	str	r2, [r3, #8]
      break;
 800a5fc:	e04c      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	6899      	ldr	r1, [r3, #8]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f000 fbf3 	bl	800adf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a620:	609a      	str	r2, [r3, #8]
      break;
 800a622:	e039      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6859      	ldr	r1, [r3, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	461a      	mov	r2, r3
 800a632:	f000 fb67 	bl	800ad04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2150      	movs	r1, #80	; 0x50
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fbc0 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a642:	e029      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	6859      	ldr	r1, [r3, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	461a      	mov	r2, r3
 800a652:	f000 fb86 	bl	800ad62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2160      	movs	r1, #96	; 0x60
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 fbb0 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a662:	e019      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6859      	ldr	r1, [r3, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	461a      	mov	r2, r3
 800a672:	f000 fb47 	bl	800ad04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2140      	movs	r1, #64	; 0x40
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fba0 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a682:	e009      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4619      	mov	r1, r3
 800a68e:	4610      	mov	r0, r2
 800a690:	f000 fb97 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a694:	e000      	b.n	800a698 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	fffeff88 	.word	0xfffeff88

0800a6b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a40      	ldr	r2, [pc, #256]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a726:	d00f      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3d      	ldr	r2, [pc, #244]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00b      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d007      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a3b      	ldr	r2, [pc, #236]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a3a      	ldr	r2, [pc, #232]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d108      	bne.n	800a75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a2f      	ldr	r2, [pc, #188]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d02b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a768:	d027      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a2c      	ldr	r2, [pc, #176]	; (800a820 <TIM_Base_SetConfig+0x118>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d023      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a2b      	ldr	r2, [pc, #172]	; (800a824 <TIM_Base_SetConfig+0x11c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01f      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a2a      	ldr	r2, [pc, #168]	; (800a828 <TIM_Base_SetConfig+0x120>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d01b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a29      	ldr	r2, [pc, #164]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d017      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a28      	ldr	r2, [pc, #160]	; (800a830 <TIM_Base_SetConfig+0x128>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d013      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a27      	ldr	r2, [pc, #156]	; (800a834 <TIM_Base_SetConfig+0x12c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00f      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a26      	ldr	r2, [pc, #152]	; (800a838 <TIM_Base_SetConfig+0x130>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00b      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a25      	ldr	r2, [pc, #148]	; (800a83c <TIM_Base_SetConfig+0x134>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d007      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a24      	ldr	r2, [pc, #144]	; (800a840 <TIM_Base_SetConfig+0x138>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d003      	beq.n	800a7ba <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a23      	ldr	r2, [pc, #140]	; (800a844 <TIM_Base_SetConfig+0x13c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d108      	bne.n	800a7cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <TIM_Base_SetConfig+0x114>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a0c      	ldr	r2, [pc, #48]	; (800a82c <TIM_Base_SetConfig+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d103      	bne.n	800a808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	615a      	str	r2, [r3, #20]
}
 800a80e:	bf00      	nop
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010000 	.word	0x40010000
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800
 800a828:	40000c00 	.word	0x40000c00
 800a82c:	40010400 	.word	0x40010400
 800a830:	40014000 	.word	0x40014000
 800a834:	40014400 	.word	0x40014400
 800a838:	40014800 	.word	0x40014800
 800a83c:	40001800 	.word	0x40001800
 800a840:	40001c00 	.word	0x40001c00
 800a844:	40002000 	.word	0x40002000

0800a848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	f023 0201 	bic.w	r2, r3, #1
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4b2b      	ldr	r3, [pc, #172]	; (800a920 <TIM_OC1_SetConfig+0xd8>)
 800a874:	4013      	ands	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f023 0302 	bic.w	r3, r3, #2
 800a890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a21      	ldr	r2, [pc, #132]	; (800a924 <TIM_OC1_SetConfig+0xdc>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d003      	beq.n	800a8ac <TIM_OC1_SetConfig+0x64>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a20      	ldr	r2, [pc, #128]	; (800a928 <TIM_OC1_SetConfig+0xe0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d10c      	bne.n	800a8c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f023 0308 	bic.w	r3, r3, #8
 800a8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f023 0304 	bic.w	r3, r3, #4
 800a8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a16      	ldr	r2, [pc, #88]	; (800a924 <TIM_OC1_SetConfig+0xdc>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d003      	beq.n	800a8d6 <TIM_OC1_SetConfig+0x8e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a15      	ldr	r2, [pc, #84]	; (800a928 <TIM_OC1_SetConfig+0xe0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d111      	bne.n	800a8fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	621a      	str	r2, [r3, #32]
}
 800a914:	bf00      	nop
 800a916:	371c      	adds	r7, #28
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	fffeff8f 	.word	0xfffeff8f
 800a924:	40010000 	.word	0x40010000
 800a928:	40010400 	.word	0x40010400

0800a92c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f023 0210 	bic.w	r2, r3, #16
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4b2e      	ldr	r3, [pc, #184]	; (800aa10 <TIM_OC2_SetConfig+0xe4>)
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f023 0320 	bic.w	r3, r3, #32
 800a976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a23      	ldr	r2, [pc, #140]	; (800aa14 <TIM_OC2_SetConfig+0xe8>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d003      	beq.n	800a994 <TIM_OC2_SetConfig+0x68>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a22      	ldr	r2, [pc, #136]	; (800aa18 <TIM_OC2_SetConfig+0xec>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d10d      	bne.n	800a9b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a18      	ldr	r2, [pc, #96]	; (800aa14 <TIM_OC2_SetConfig+0xe8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_OC2_SetConfig+0x94>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <TIM_OC2_SetConfig+0xec>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d113      	bne.n	800a9e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	621a      	str	r2, [r3, #32]
}
 800aa02:	bf00      	nop
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	feff8fff 	.word	0xfeff8fff
 800aa14:	40010000 	.word	0x40010000
 800aa18:	40010400 	.word	0x40010400

0800aa1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4b2d      	ldr	r3, [pc, #180]	; (800aafc <TIM_OC3_SetConfig+0xe0>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	021b      	lsls	r3, r3, #8
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a22      	ldr	r2, [pc, #136]	; (800ab00 <TIM_OC3_SetConfig+0xe4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_OC3_SetConfig+0x66>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a21      	ldr	r2, [pc, #132]	; (800ab04 <TIM_OC3_SetConfig+0xe8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d10d      	bne.n	800aa9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a17      	ldr	r2, [pc, #92]	; (800ab00 <TIM_OC3_SetConfig+0xe4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d003      	beq.n	800aaae <TIM_OC3_SetConfig+0x92>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a16      	ldr	r2, [pc, #88]	; (800ab04 <TIM_OC3_SetConfig+0xe8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d113      	bne.n	800aad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aabc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	621a      	str	r2, [r3, #32]
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	fffeff8f 	.word	0xfffeff8f
 800ab00:	40010000 	.word	0x40010000
 800ab04:	40010400 	.word	0x40010400

0800ab08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4b1e      	ldr	r3, [pc, #120]	; (800abac <TIM_OC4_SetConfig+0xa4>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	031b      	lsls	r3, r3, #12
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a13      	ldr	r2, [pc, #76]	; (800abb0 <TIM_OC4_SetConfig+0xa8>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d003      	beq.n	800ab70 <TIM_OC4_SetConfig+0x68>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <TIM_OC4_SetConfig+0xac>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d109      	bne.n	800ab84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	019b      	lsls	r3, r3, #6
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	621a      	str	r2, [r3, #32]
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	feff8fff 	.word	0xfeff8fff
 800abb0:	40010000 	.word	0x40010000
 800abb4:	40010400 	.word	0x40010400

0800abb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <TIM_OC5_SetConfig+0x98>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800abf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	041b      	lsls	r3, r3, #16
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a12      	ldr	r2, [pc, #72]	; (800ac54 <TIM_OC5_SetConfig+0x9c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d003      	beq.n	800ac16 <TIM_OC5_SetConfig+0x5e>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a11      	ldr	r2, [pc, #68]	; (800ac58 <TIM_OC5_SetConfig+0xa0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d109      	bne.n	800ac2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	621a      	str	r2, [r3, #32]
}
 800ac44:	bf00      	nop
 800ac46:	371c      	adds	r7, #28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	fffeff8f 	.word	0xfffeff8f
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40010400 	.word	0x40010400

0800ac5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4b1c      	ldr	r3, [pc, #112]	; (800acf8 <TIM_OC6_SetConfig+0x9c>)
 800ac88:	4013      	ands	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	051b      	lsls	r3, r3, #20
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a13      	ldr	r2, [pc, #76]	; (800acfc <TIM_OC6_SetConfig+0xa0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC6_SetConfig+0x60>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <TIM_OC6_SetConfig+0xa4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d109      	bne.n	800acd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	621a      	str	r2, [r3, #32]
}
 800acea:	bf00      	nop
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	feff8fff 	.word	0xfeff8fff
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40010400 	.word	0x40010400

0800ad04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	f023 0201 	bic.w	r2, r3, #1
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f023 030a 	bic.w	r3, r3, #10
 800ad40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	621a      	str	r2, [r3, #32]
}
 800ad56:	bf00      	nop
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b087      	sub	sp, #28
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0210 	bic.w	r2, r3, #16
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	031b      	lsls	r3, r3, #12
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b085      	sub	sp, #20
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	f043 0307 	orr.w	r3, r3, #7
 800ade4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	609a      	str	r2, [r3, #8]
}
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	021a      	lsls	r2, r3, #8
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	609a      	str	r2, [r3, #8]
}
 800ae2c:	bf00      	nop
 800ae2e:	371c      	adds	r7, #28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d101      	bne.n	800ae50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e06d      	b.n	800af2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a30      	ldr	r2, [pc, #192]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d004      	beq.n	800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a2f      	ldr	r2, [pc, #188]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d108      	bne.n	800ae96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a20      	ldr	r2, [pc, #128]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d022      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec2:	d01d      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a1d      	ldr	r2, [pc, #116]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d018      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a1c      	ldr	r2, [pc, #112]	; (800af44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d013      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a1a      	ldr	r2, [pc, #104]	; (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00e      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a15      	ldr	r2, [pc, #84]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d009      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a16      	ldr	r2, [pc, #88]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a15      	ldr	r2, [pc, #84]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d10c      	bne.n	800af1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	40010000 	.word	0x40010000
 800af3c:	40010400 	.word	0x40010400
 800af40:	40000400 	.word	0x40000400
 800af44:	40000800 	.word	0x40000800
 800af48:	40000c00 	.word	0x40000c00
 800af4c:	40014000 	.word	0x40014000
 800af50:	40001800 	.word	0x40001800

0800af54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e065      	b.n	800b03c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	041b      	lsls	r3, r3, #16
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a16      	ldr	r2, [pc, #88]	; (800b048 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d004      	beq.n	800affe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a14      	ldr	r2, [pc, #80]	; (800b04c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d115      	bne.n	800b02a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	051b      	lsls	r3, r3, #20
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010400 	.word	0x40010400

0800b050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e040      	b.n	800b120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7f8 f832 	bl	8003118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2224      	movs	r2, #36	; 0x24
 800b0b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 0201 	bic.w	r2, r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f82c 	bl	800b128 <UART_SetConfig>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e022      	b.n	800b120 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 faca 	bl	800b67c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f042 0201 	orr.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fb51 	bl	800b7c0 <UART_CheckIdleState>
 800b11e:	4603      	mov	r3, r0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b130:	2300      	movs	r3, #0
 800b132:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69db      	ldr	r3, [r3, #28]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4bb1      	ldr	r3, [pc, #708]	; (800b41c <UART_SetConfig+0x2f4>)
 800b158:	4013      	ands	r3, r2
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6812      	ldr	r2, [r2, #0]
 800b15e:	6939      	ldr	r1, [r7, #16]
 800b160:	430b      	orrs	r3, r1
 800b162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	4313      	orrs	r3, r2
 800b188:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a9f      	ldr	r2, [pc, #636]	; (800b420 <UART_SetConfig+0x2f8>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d121      	bne.n	800b1ec <UART_SetConfig+0xc4>
 800b1a8:	4b9e      	ldr	r3, [pc, #632]	; (800b424 <UART_SetConfig+0x2fc>)
 800b1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d816      	bhi.n	800b1e4 <UART_SetConfig+0xbc>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <UART_SetConfig+0x94>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1cd 	.word	0x0800b1cd
 800b1c0:	0800b1d9 	.word	0x0800b1d9
 800b1c4:	0800b1d3 	.word	0x0800b1d3
 800b1c8:	0800b1df 	.word	0x0800b1df
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	77fb      	strb	r3, [r7, #31]
 800b1d0:	e151      	b.n	800b476 <UART_SetConfig+0x34e>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	77fb      	strb	r3, [r7, #31]
 800b1d6:	e14e      	b.n	800b476 <UART_SetConfig+0x34e>
 800b1d8:	2304      	movs	r3, #4
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e14b      	b.n	800b476 <UART_SetConfig+0x34e>
 800b1de:	2308      	movs	r3, #8
 800b1e0:	77fb      	strb	r3, [r7, #31]
 800b1e2:	e148      	b.n	800b476 <UART_SetConfig+0x34e>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	77fb      	strb	r3, [r7, #31]
 800b1e8:	bf00      	nop
 800b1ea:	e144      	b.n	800b476 <UART_SetConfig+0x34e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a8d      	ldr	r2, [pc, #564]	; (800b428 <UART_SetConfig+0x300>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d134      	bne.n	800b260 <UART_SetConfig+0x138>
 800b1f6:	4b8b      	ldr	r3, [pc, #556]	; (800b424 <UART_SetConfig+0x2fc>)
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1fc:	f003 030c 	and.w	r3, r3, #12
 800b200:	2b0c      	cmp	r3, #12
 800b202:	d829      	bhi.n	800b258 <UART_SetConfig+0x130>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <UART_SetConfig+0xe4>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b241 	.word	0x0800b241
 800b210:	0800b259 	.word	0x0800b259
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b259 	.word	0x0800b259
 800b21c:	0800b24d 	.word	0x0800b24d
 800b220:	0800b259 	.word	0x0800b259
 800b224:	0800b259 	.word	0x0800b259
 800b228:	0800b259 	.word	0x0800b259
 800b22c:	0800b247 	.word	0x0800b247
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b259 	.word	0x0800b259
 800b238:	0800b259 	.word	0x0800b259
 800b23c:	0800b253 	.word	0x0800b253
 800b240:	2300      	movs	r3, #0
 800b242:	77fb      	strb	r3, [r7, #31]
 800b244:	e117      	b.n	800b476 <UART_SetConfig+0x34e>
 800b246:	2302      	movs	r3, #2
 800b248:	77fb      	strb	r3, [r7, #31]
 800b24a:	e114      	b.n	800b476 <UART_SetConfig+0x34e>
 800b24c:	2304      	movs	r3, #4
 800b24e:	77fb      	strb	r3, [r7, #31]
 800b250:	e111      	b.n	800b476 <UART_SetConfig+0x34e>
 800b252:	2308      	movs	r3, #8
 800b254:	77fb      	strb	r3, [r7, #31]
 800b256:	e10e      	b.n	800b476 <UART_SetConfig+0x34e>
 800b258:	2310      	movs	r3, #16
 800b25a:	77fb      	strb	r3, [r7, #31]
 800b25c:	bf00      	nop
 800b25e:	e10a      	b.n	800b476 <UART_SetConfig+0x34e>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a71      	ldr	r2, [pc, #452]	; (800b42c <UART_SetConfig+0x304>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d120      	bne.n	800b2ac <UART_SetConfig+0x184>
 800b26a:	4b6e      	ldr	r3, [pc, #440]	; (800b424 <UART_SetConfig+0x2fc>)
 800b26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b270:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b274:	2b10      	cmp	r3, #16
 800b276:	d00f      	beq.n	800b298 <UART_SetConfig+0x170>
 800b278:	2b10      	cmp	r3, #16
 800b27a:	d802      	bhi.n	800b282 <UART_SetConfig+0x15a>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <UART_SetConfig+0x164>
 800b280:	e010      	b.n	800b2a4 <UART_SetConfig+0x17c>
 800b282:	2b20      	cmp	r3, #32
 800b284:	d005      	beq.n	800b292 <UART_SetConfig+0x16a>
 800b286:	2b30      	cmp	r3, #48	; 0x30
 800b288:	d009      	beq.n	800b29e <UART_SetConfig+0x176>
 800b28a:	e00b      	b.n	800b2a4 <UART_SetConfig+0x17c>
 800b28c:	2300      	movs	r3, #0
 800b28e:	77fb      	strb	r3, [r7, #31]
 800b290:	e0f1      	b.n	800b476 <UART_SetConfig+0x34e>
 800b292:	2302      	movs	r3, #2
 800b294:	77fb      	strb	r3, [r7, #31]
 800b296:	e0ee      	b.n	800b476 <UART_SetConfig+0x34e>
 800b298:	2304      	movs	r3, #4
 800b29a:	77fb      	strb	r3, [r7, #31]
 800b29c:	e0eb      	b.n	800b476 <UART_SetConfig+0x34e>
 800b29e:	2308      	movs	r3, #8
 800b2a0:	77fb      	strb	r3, [r7, #31]
 800b2a2:	e0e8      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2a4:	2310      	movs	r3, #16
 800b2a6:	77fb      	strb	r3, [r7, #31]
 800b2a8:	bf00      	nop
 800b2aa:	e0e4      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a5f      	ldr	r2, [pc, #380]	; (800b430 <UART_SetConfig+0x308>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d120      	bne.n	800b2f8 <UART_SetConfig+0x1d0>
 800b2b6:	4b5b      	ldr	r3, [pc, #364]	; (800b424 <UART_SetConfig+0x2fc>)
 800b2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b2c0:	2b40      	cmp	r3, #64	; 0x40
 800b2c2:	d00f      	beq.n	800b2e4 <UART_SetConfig+0x1bc>
 800b2c4:	2b40      	cmp	r3, #64	; 0x40
 800b2c6:	d802      	bhi.n	800b2ce <UART_SetConfig+0x1a6>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <UART_SetConfig+0x1b0>
 800b2cc:	e010      	b.n	800b2f0 <UART_SetConfig+0x1c8>
 800b2ce:	2b80      	cmp	r3, #128	; 0x80
 800b2d0:	d005      	beq.n	800b2de <UART_SetConfig+0x1b6>
 800b2d2:	2bc0      	cmp	r3, #192	; 0xc0
 800b2d4:	d009      	beq.n	800b2ea <UART_SetConfig+0x1c2>
 800b2d6:	e00b      	b.n	800b2f0 <UART_SetConfig+0x1c8>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	77fb      	strb	r3, [r7, #31]
 800b2dc:	e0cb      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	77fb      	strb	r3, [r7, #31]
 800b2e2:	e0c8      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2e4:	2304      	movs	r3, #4
 800b2e6:	77fb      	strb	r3, [r7, #31]
 800b2e8:	e0c5      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	77fb      	strb	r3, [r7, #31]
 800b2ee:	e0c2      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	77fb      	strb	r3, [r7, #31]
 800b2f4:	bf00      	nop
 800b2f6:	e0be      	b.n	800b476 <UART_SetConfig+0x34e>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a4d      	ldr	r2, [pc, #308]	; (800b434 <UART_SetConfig+0x30c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d124      	bne.n	800b34c <UART_SetConfig+0x224>
 800b302:	4b48      	ldr	r3, [pc, #288]	; (800b424 <UART_SetConfig+0x2fc>)
 800b304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b310:	d012      	beq.n	800b338 <UART_SetConfig+0x210>
 800b312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b316:	d802      	bhi.n	800b31e <UART_SetConfig+0x1f6>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <UART_SetConfig+0x204>
 800b31c:	e012      	b.n	800b344 <UART_SetConfig+0x21c>
 800b31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b322:	d006      	beq.n	800b332 <UART_SetConfig+0x20a>
 800b324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b328:	d009      	beq.n	800b33e <UART_SetConfig+0x216>
 800b32a:	e00b      	b.n	800b344 <UART_SetConfig+0x21c>
 800b32c:	2300      	movs	r3, #0
 800b32e:	77fb      	strb	r3, [r7, #31]
 800b330:	e0a1      	b.n	800b476 <UART_SetConfig+0x34e>
 800b332:	2302      	movs	r3, #2
 800b334:	77fb      	strb	r3, [r7, #31]
 800b336:	e09e      	b.n	800b476 <UART_SetConfig+0x34e>
 800b338:	2304      	movs	r3, #4
 800b33a:	77fb      	strb	r3, [r7, #31]
 800b33c:	e09b      	b.n	800b476 <UART_SetConfig+0x34e>
 800b33e:	2308      	movs	r3, #8
 800b340:	77fb      	strb	r3, [r7, #31]
 800b342:	e098      	b.n	800b476 <UART_SetConfig+0x34e>
 800b344:	2310      	movs	r3, #16
 800b346:	77fb      	strb	r3, [r7, #31]
 800b348:	bf00      	nop
 800b34a:	e094      	b.n	800b476 <UART_SetConfig+0x34e>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a39      	ldr	r2, [pc, #228]	; (800b438 <UART_SetConfig+0x310>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d124      	bne.n	800b3a0 <UART_SetConfig+0x278>
 800b356:	4b33      	ldr	r3, [pc, #204]	; (800b424 <UART_SetConfig+0x2fc>)
 800b358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b35c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b364:	d012      	beq.n	800b38c <UART_SetConfig+0x264>
 800b366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b36a:	d802      	bhi.n	800b372 <UART_SetConfig+0x24a>
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <UART_SetConfig+0x258>
 800b370:	e012      	b.n	800b398 <UART_SetConfig+0x270>
 800b372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b376:	d006      	beq.n	800b386 <UART_SetConfig+0x25e>
 800b378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b37c:	d009      	beq.n	800b392 <UART_SetConfig+0x26a>
 800b37e:	e00b      	b.n	800b398 <UART_SetConfig+0x270>
 800b380:	2301      	movs	r3, #1
 800b382:	77fb      	strb	r3, [r7, #31]
 800b384:	e077      	b.n	800b476 <UART_SetConfig+0x34e>
 800b386:	2302      	movs	r3, #2
 800b388:	77fb      	strb	r3, [r7, #31]
 800b38a:	e074      	b.n	800b476 <UART_SetConfig+0x34e>
 800b38c:	2304      	movs	r3, #4
 800b38e:	77fb      	strb	r3, [r7, #31]
 800b390:	e071      	b.n	800b476 <UART_SetConfig+0x34e>
 800b392:	2308      	movs	r3, #8
 800b394:	77fb      	strb	r3, [r7, #31]
 800b396:	e06e      	b.n	800b476 <UART_SetConfig+0x34e>
 800b398:	2310      	movs	r3, #16
 800b39a:	77fb      	strb	r3, [r7, #31]
 800b39c:	bf00      	nop
 800b39e:	e06a      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a25      	ldr	r2, [pc, #148]	; (800b43c <UART_SetConfig+0x314>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d124      	bne.n	800b3f4 <UART_SetConfig+0x2cc>
 800b3aa:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <UART_SetConfig+0x2fc>)
 800b3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b8:	d012      	beq.n	800b3e0 <UART_SetConfig+0x2b8>
 800b3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3be:	d802      	bhi.n	800b3c6 <UART_SetConfig+0x29e>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d007      	beq.n	800b3d4 <UART_SetConfig+0x2ac>
 800b3c4:	e012      	b.n	800b3ec <UART_SetConfig+0x2c4>
 800b3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ca:	d006      	beq.n	800b3da <UART_SetConfig+0x2b2>
 800b3cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3d0:	d009      	beq.n	800b3e6 <UART_SetConfig+0x2be>
 800b3d2:	e00b      	b.n	800b3ec <UART_SetConfig+0x2c4>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	e04d      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	77fb      	strb	r3, [r7, #31]
 800b3de:	e04a      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e047      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	77fb      	strb	r3, [r7, #31]
 800b3ea:	e044      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	bf00      	nop
 800b3f2:	e040      	b.n	800b476 <UART_SetConfig+0x34e>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a11      	ldr	r2, [pc, #68]	; (800b440 <UART_SetConfig+0x318>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d139      	bne.n	800b472 <UART_SetConfig+0x34a>
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <UART_SetConfig+0x2fc>)
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b40c:	d027      	beq.n	800b45e <UART_SetConfig+0x336>
 800b40e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b412:	d817      	bhi.n	800b444 <UART_SetConfig+0x31c>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d01c      	beq.n	800b452 <UART_SetConfig+0x32a>
 800b418:	e027      	b.n	800b46a <UART_SetConfig+0x342>
 800b41a:	bf00      	nop
 800b41c:	efff69f3 	.word	0xefff69f3
 800b420:	40011000 	.word	0x40011000
 800b424:	40023800 	.word	0x40023800
 800b428:	40004400 	.word	0x40004400
 800b42c:	40004800 	.word	0x40004800
 800b430:	40004c00 	.word	0x40004c00
 800b434:	40005000 	.word	0x40005000
 800b438:	40011400 	.word	0x40011400
 800b43c:	40007800 	.word	0x40007800
 800b440:	40007c00 	.word	0x40007c00
 800b444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b448:	d006      	beq.n	800b458 <UART_SetConfig+0x330>
 800b44a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b44e:	d009      	beq.n	800b464 <UART_SetConfig+0x33c>
 800b450:	e00b      	b.n	800b46a <UART_SetConfig+0x342>
 800b452:	2300      	movs	r3, #0
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e00e      	b.n	800b476 <UART_SetConfig+0x34e>
 800b458:	2302      	movs	r3, #2
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	e00b      	b.n	800b476 <UART_SetConfig+0x34e>
 800b45e:	2304      	movs	r3, #4
 800b460:	77fb      	strb	r3, [r7, #31]
 800b462:	e008      	b.n	800b476 <UART_SetConfig+0x34e>
 800b464:	2308      	movs	r3, #8
 800b466:	77fb      	strb	r3, [r7, #31]
 800b468:	e005      	b.n	800b476 <UART_SetConfig+0x34e>
 800b46a:	2310      	movs	r3, #16
 800b46c:	77fb      	strb	r3, [r7, #31]
 800b46e:	bf00      	nop
 800b470:	e001      	b.n	800b476 <UART_SetConfig+0x34e>
 800b472:	2310      	movs	r3, #16
 800b474:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b47e:	d17f      	bne.n	800b580 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b480:	7ffb      	ldrb	r3, [r7, #31]
 800b482:	2b08      	cmp	r3, #8
 800b484:	d85c      	bhi.n	800b540 <UART_SetConfig+0x418>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <UART_SetConfig+0x364>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b4b1 	.word	0x0800b4b1
 800b490:	0800b4d1 	.word	0x0800b4d1
 800b494:	0800b4f1 	.word	0x0800b4f1
 800b498:	0800b541 	.word	0x0800b541
 800b49c:	0800b509 	.word	0x0800b509
 800b4a0:	0800b541 	.word	0x0800b541
 800b4a4:	0800b541 	.word	0x0800b541
 800b4a8:	0800b541 	.word	0x0800b541
 800b4ac:	0800b529 	.word	0x0800b529
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4b0:	f7fc f8d0 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800b4b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	005a      	lsls	r2, r3, #1
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	085b      	lsrs	r3, r3, #1
 800b4c0:	441a      	add	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	61bb      	str	r3, [r7, #24]
        break;
 800b4ce:	e03a      	b.n	800b546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4d0:	f7fc f8d4 	bl	800767c <HAL_RCC_GetPCLK2Freq>
 800b4d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	005a      	lsls	r2, r3, #1
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	441a      	add	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	61bb      	str	r3, [r7, #24]
        break;
 800b4ee:	e02a      	b.n	800b546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	085a      	lsrs	r2, r3, #1
 800b4f6:	4b5f      	ldr	r3, [pc, #380]	; (800b674 <UART_SetConfig+0x54c>)
 800b4f8:	4413      	add	r3, r2
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	6852      	ldr	r2, [r2, #4]
 800b4fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b502:	b29b      	uxth	r3, r3
 800b504:	61bb      	str	r3, [r7, #24]
        break;
 800b506:	e01e      	b.n	800b546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b508:	f7fb ffe6 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 800b50c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	005a      	lsls	r2, r3, #1
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	085b      	lsrs	r3, r3, #1
 800b518:	441a      	add	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b522:	b29b      	uxth	r3, r3
 800b524:	61bb      	str	r3, [r7, #24]
        break;
 800b526:	e00e      	b.n	800b546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	085b      	lsrs	r3, r3, #1
 800b52e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	61bb      	str	r3, [r7, #24]
        break;
 800b53e:	e002      	b.n	800b546 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	75fb      	strb	r3, [r7, #23]
        break;
 800b544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b0f      	cmp	r3, #15
 800b54a:	d916      	bls.n	800b57a <UART_SetConfig+0x452>
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b552:	d212      	bcs.n	800b57a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f023 030f 	bic.w	r3, r3, #15
 800b55c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	085b      	lsrs	r3, r3, #1
 800b562:	b29b      	uxth	r3, r3
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	b29a      	uxth	r2, r3
 800b56a:	897b      	ldrh	r3, [r7, #10]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	897a      	ldrh	r2, [r7, #10]
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	e070      	b.n	800b65c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
 800b57e:	e06d      	b.n	800b65c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b580:	7ffb      	ldrb	r3, [r7, #31]
 800b582:	2b08      	cmp	r3, #8
 800b584:	d859      	bhi.n	800b63a <UART_SetConfig+0x512>
 800b586:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <UART_SetConfig+0x464>)
 800b588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58c:	0800b5b1 	.word	0x0800b5b1
 800b590:	0800b5cf 	.word	0x0800b5cf
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b63b 	.word	0x0800b63b
 800b59c:	0800b605 	.word	0x0800b605
 800b5a0:	0800b63b 	.word	0x0800b63b
 800b5a4:	0800b63b 	.word	0x0800b63b
 800b5a8:	0800b63b 	.word	0x0800b63b
 800b5ac:	0800b623 	.word	0x0800b623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5b0:	f7fc f850 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800b5b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	085a      	lsrs	r2, r3, #1
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	441a      	add	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	61bb      	str	r3, [r7, #24]
        break;
 800b5cc:	e038      	b.n	800b640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ce:	f7fc f855 	bl	800767c <HAL_RCC_GetPCLK2Freq>
 800b5d2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	085a      	lsrs	r2, r3, #1
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	441a      	add	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	61bb      	str	r3, [r7, #24]
        break;
 800b5ea:	e029      	b.n	800b640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	085a      	lsrs	r2, r3, #1
 800b5f2:	4b21      	ldr	r3, [pc, #132]	; (800b678 <UART_SetConfig+0x550>)
 800b5f4:	4413      	add	r3, r2
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	6852      	ldr	r2, [r2, #4]
 800b5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	61bb      	str	r3, [r7, #24]
        break;
 800b602:	e01d      	b.n	800b640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b604:	f7fb ff68 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 800b608:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	085a      	lsrs	r2, r3, #1
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	441a      	add	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	61bb      	str	r3, [r7, #24]
        break;
 800b620:	e00e      	b.n	800b640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	085b      	lsrs	r3, r3, #1
 800b628:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	fbb2 f3f3 	udiv	r3, r2, r3
 800b634:	b29b      	uxth	r3, r3
 800b636:	61bb      	str	r3, [r7, #24]
        break;
 800b638:	e002      	b.n	800b640 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]
        break;
 800b63e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b0f      	cmp	r3, #15
 800b644:	d908      	bls.n	800b658 <UART_SetConfig+0x530>
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b64c:	d204      	bcs.n	800b658 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e001      	b.n	800b65c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	01e84800 	.word	0x01e84800
 800b678:	00f42400 	.word	0x00f42400

0800b67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00a      	beq.n	800b6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6aa:	f003 0302 	and.w	r3, r3, #2
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00a      	beq.n	800b6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	f003 0304 	and.w	r3, r3, #4
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00a      	beq.n	800b6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b710:	f003 0310 	and.w	r3, r3, #16
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00a      	beq.n	800b72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01a      	beq.n	800b792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	430a      	orrs	r2, r1
 800b770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b77a:	d10a      	bne.n	800b792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	605a      	str	r2, [r3, #4]
  }
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b7ce:	f7f7 fff1 	bl	80037b4 <HAL_GetTick>
 800b7d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	2b08      	cmp	r3, #8
 800b7e0:	d10e      	bne.n	800b800 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f814 	bl	800b81e <UART_WaitOnFlagUntilTimeout>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e00a      	b.n	800b816 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2220      	movs	r2, #32
 800b80a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	603b      	str	r3, [r7, #0]
 800b82a:	4613      	mov	r3, r2
 800b82c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b82e:	e05d      	b.n	800b8ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d059      	beq.n	800b8ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b838:	f7f7 ffbc 	bl	80037b4 <HAL_GetTick>
 800b83c:	4602      	mov	r2, r0
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	429a      	cmp	r2, r3
 800b846:	d302      	bcc.n	800b84e <UART_WaitOnFlagUntilTimeout+0x30>
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d11b      	bne.n	800b886 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b85c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689a      	ldr	r2, [r3, #8]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0201 	bic.w	r2, r2, #1
 800b86c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2220      	movs	r2, #32
 800b872:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2220      	movs	r2, #32
 800b878:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e042      	b.n	800b90c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d02b      	beq.n	800b8ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b89e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8a2:	d123      	bne.n	800b8ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b8bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0201 	bic.w	r2, r2, #1
 800b8cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2220      	movs	r2, #32
 800b8d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2220      	movs	r2, #32
 800b8de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e00f      	b.n	800b90c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	bf0c      	ite	eq
 800b8fc:	2301      	moveq	r3, #1
 800b8fe:	2300      	movne	r3, #0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	429a      	cmp	r2, r3
 800b908:	d092      	beq.n	800b830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d027      	beq.n	800b97e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	4b2f      	ldr	r3, [pc, #188]	; (800b9f4 <FMC_SDRAM_Init+0xe0>)
 800b938:	4013      	ands	r3, r2
 800b93a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b944:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b94a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b950:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b956:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b95c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b962:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b968:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b96e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	4313      	orrs	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	e032      	b.n	800b9e4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b98a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b994:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b99a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <FMC_SDRAM_Init+0xe0>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b9b8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b9be:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b9c4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b9ca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b9d0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	ffff8000 	.word	0xffff8000

0800b9f8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d02e      	beq.n	800ba70 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba1e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba2e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ba38:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ba42:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ba4c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ba56:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba60:	4313      	orrs	r3, r2
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	609a      	str	r2, [r3, #8]
 800ba6e:	e039      	b.n	800bae4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4b1e      	ldr	r3, [pc, #120]	; (800baf4 <FMC_SDRAM_Timing_Init+0xfc>)
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800baa2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	3b01      	subs	r3, #1
 800bab0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bab2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800babc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bac6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	3b01      	subs	r3, #1
 800bace:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bad0:	4313      	orrs	r3, r2
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	ff0f0fff 	.word	0xff0f0fff

0800baf8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bb10:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bb1a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	695a      	ldr	r2, [r3, #20]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bb60:	b084      	sub	sp, #16
 800bb62:	b480      	push	{r7}
 800bb64:	b085      	sub	sp, #20
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	f107 001c 	add.w	r0, r7, #28
 800bb6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bb76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bb78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bb7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bb82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bb86:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <SDMMC_Init+0x54>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	b004      	add	sp, #16
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	ffff8100 	.word	0xffff8100

0800bbb8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2203      	movs	r2, #3
 800bbde:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bbe0:	2002      	movs	r0, #2
 800bbe2:	f7f7 fdf3 	bl	80037cc <HAL_Delay>
  
  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 0303 	and.w	r3, r3, #3
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc30:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <SDMMC_SendCommand+0x50>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	fffff000 	.word	0xfffff000

0800bc60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	b2db      	uxtb	r3, r3
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b085      	sub	sp, #20
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3314      	adds	r3, #20
 800bc88:	461a      	mov	r2, r3
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
}  
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bccc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bcd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	431a      	orrs	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0

}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd06:	2310      	movs	r3, #16
 800bd08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd18:	f107 0308 	add.w	r3, r7, #8
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff ff74 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd28:	2110      	movs	r1, #16
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fa42 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800bd30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd32:	69fb      	ldr	r3, [r7, #28]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd4a:	2311      	movs	r3, #17
 800bd4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd4e:	2340      	movs	r3, #64	; 0x40
 800bd50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd5c:	f107 0308 	add.w	r3, r7, #8
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff ff52 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd68:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd6c:	2111      	movs	r1, #17
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa20 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800bd74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd76:	69fb      	ldr	r3, [r7, #28]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3720      	adds	r7, #32
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd8e:	2312      	movs	r3, #18
 800bd90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd92:	2340      	movs	r3, #64	; 0x40
 800bd94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bda0:	f107 0308 	add.w	r3, r7, #8
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff ff30 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bdac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdb0:	2112      	movs	r1, #18
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f9fe 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800bdb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdba:	69fb      	ldr	r3, [r7, #28]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bdd2:	2318      	movs	r3, #24
 800bdd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd6:	2340      	movs	r3, #64	; 0x40
 800bdd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdda:	2300      	movs	r3, #0
 800bddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bde2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde4:	f107 0308 	add.w	r3, r7, #8
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff ff0e 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bdf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf4:	2118      	movs	r1, #24
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f9dc 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800bdfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3720      	adds	r7, #32
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be16:	2319      	movs	r3, #25
 800be18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be1e:	2300      	movs	r3, #0
 800be20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be28:	f107 0308 	add.w	r3, r7, #8
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7ff feec 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be34:	f241 3288 	movw	r2, #5000	; 0x1388
 800be38:	2119      	movs	r1, #25
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f9ba 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800be40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be42:	69fb      	ldr	r3, [r7, #28]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3720      	adds	r7, #32
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be58:	230c      	movs	r3, #12
 800be5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be5c:	2340      	movs	r3, #64	; 0x40
 800be5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff fecb 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800be76:	4a05      	ldr	r2, [pc, #20]	; (800be8c <SDMMC_CmdStopTransfer+0x40>)
 800be78:	210c      	movs	r1, #12
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f99a 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800be80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be82:	69fb      	ldr	r3, [r7, #28]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3720      	adds	r7, #32
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	05f5e100 	.word	0x05f5e100

0800be90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08a      	sub	sp, #40	; 0x28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bea0:	2307      	movs	r3, #7
 800bea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea4:	2340      	movs	r3, #64	; 0x40
 800bea6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea8:	2300      	movs	r3, #0
 800beaa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb2:	f107 0310 	add.w	r3, r7, #16
 800beb6:	4619      	mov	r1, r3
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7ff fea7 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bebe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec2:	2107      	movs	r1, #7
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f975 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800beca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3728      	adds	r7, #40	; 0x28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b088      	sub	sp, #32
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fe86 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f92f 	bl	800c164 <SDMMC_GetCmdError>
 800bf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf08:	69fb      	ldr	r3, [r7, #28]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf20:	2308      	movs	r3, #8
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fe67 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb18 	bl	800c574 <SDMMC_GetCmdResp7>
 800bf44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf46:	69fb      	ldr	r3, [r7, #28]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf5e:	2337      	movs	r3, #55	; 0x37
 800bf60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf62:	2340      	movs	r3, #64	; 0x40
 800bf64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf66:	2300      	movs	r3, #0
 800bf68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf70:	f107 0308 	add.w	r3, r7, #8
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fe48 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bf7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf80:	2137      	movs	r1, #55	; 0x37
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f916 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800bf88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3720      	adds	r7, #32
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <SDMMC_CmdAppOperCommand+0x44>)
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bfa6:	2329      	movs	r3, #41	; 0x29
 800bfa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfaa:	2340      	movs	r3, #64	; 0x40
 800bfac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb8:	f107 0308 	add.w	r3, r7, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fe24 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fa27 	bl	800c418 <SDMMC_GetCmdResp3>
 800bfca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3720      	adds	r7, #32
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	80100000 	.word	0x80100000

0800bfdc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bfea:	2306      	movs	r3, #6
 800bfec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfee:	2340      	movs	r3, #64	; 0x40
 800bff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bffa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffc:	f107 0308 	add.w	r3, r7, #8
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fe02 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c008:	f241 3288 	movw	r2, #5000	; 0x1388
 800c00c:	2106      	movs	r1, #6
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f8d0 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800c014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c016:	69fb      	ldr	r3, [r7, #28]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c02c:	2333      	movs	r3, #51	; 0x33
 800c02e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c030:	2340      	movs	r3, #64	; 0x40
 800c032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fde1 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c04e:	2133      	movs	r1, #51	; 0x33
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f8af 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800c056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c058:	69fb      	ldr	r3, [r7, #28]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b088      	sub	sp, #32
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c06e:	2302      	movs	r3, #2
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c072:	23c0      	movs	r3, #192	; 0xc0
 800c074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fdc0 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f97d 	bl	800c38c <SDMMC_GetCmdResp2>
 800c092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c094:	69fb      	ldr	r3, [r7, #28]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b088      	sub	sp, #32
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c0ac:	2309      	movs	r3, #9
 800c0ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c0b0:	23c0      	movs	r3, #192	; 0xc0
 800c0b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0be:	f107 0308 	add.w	r3, r7, #8
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff fda1 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f95e 	bl	800c38c <SDMMC_GetCmdResp2>
 800c0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b088      	sub	sp, #32
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0ee:	2340      	movs	r3, #64	; 0x40
 800c0f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0fc:	f107 0308 	add.w	r3, r7, #8
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fd82 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	2103      	movs	r1, #3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f9bd 	bl	800c48c <SDMMC_GetCmdResp6>
 800c112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c114:	69fb      	ldr	r3, [r7, #28]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3720      	adds	r7, #32
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b088      	sub	sp, #32
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c12c:	230d      	movs	r3, #13
 800c12e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c13c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fd61 	bl	800bc0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c14a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c14e:	210d      	movs	r1, #13
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f82f 	bl	800c1b4 <SDMMC_GetCmdResp1>
 800c156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c158:	69fb      	ldr	r3, [r7, #28]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3720      	adds	r7, #32
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c164:	b490      	push	{r4, r7}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c16c:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <SDMMC_GetCmdError+0x48>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a0f      	ldr	r2, [pc, #60]	; (800c1b0 <SDMMC_GetCmdError+0x4c>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	0a5b      	lsrs	r3, r3, #9
 800c178:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c180:	4623      	mov	r3, r4
 800c182:	1e5c      	subs	r4, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c18c:	e009      	b.n	800c1a2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0f2      	beq.n	800c180 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	22c5      	movs	r2, #197	; 0xc5
 800c19e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bc90      	pop	{r4, r7}
 800c1aa:	4770      	bx	lr
 800c1ac:	20000010 	.word	0x20000010
 800c1b0:	10624dd3 	.word	0x10624dd3

0800c1b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1c2:	4b6f      	ldr	r3, [pc, #444]	; (800c380 <SDMMC_GetCmdResp1+0x1cc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a6f      	ldr	r2, [pc, #444]	; (800c384 <SDMMC_GetCmdResp1+0x1d0>)
 800c1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1cc:	0a5b      	lsrs	r3, r3, #9
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1d4:	4623      	mov	r3, r4
 800c1d6:	1e5c      	subs	r4, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1e0:	e0c9      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0f0      	beq.n	800c1d4 <SDMMC_GetCmdResp1+0x20>
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1eb      	bne.n	800c1d4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2204      	movs	r2, #4
 800c20c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c20e:	2304      	movs	r3, #4
 800c210:	e0b1      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2201      	movs	r2, #1
 800c222:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c224:	2301      	movs	r3, #1
 800c226:	e0a6      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	22c5      	movs	r2, #197	; 0xc5
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff fd16 	bl	800bc60 <SDMMC_GetCommandResponse>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	7afb      	ldrb	r3, [r7, #11]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d001      	beq.n	800c242 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c23e:	2301      	movs	r3, #1
 800c240:	e099      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c242:	2100      	movs	r1, #0
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f7ff fd18 	bl	800bc7a <SDMMC_GetResponse>
 800c24a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	4b4e      	ldr	r3, [pc, #312]	; (800c388 <SDMMC_GetCmdResp1+0x1d4>)
 800c250:	4013      	ands	r3, r2
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c256:	2300      	movs	r3, #0
 800c258:	e08d      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da02      	bge.n	800c266 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c264:	e087      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c270:	2340      	movs	r3, #64	; 0x40
 800c272:	e080      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c27e:	2380      	movs	r3, #128	; 0x80
 800c280:	e079      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c290:	e071      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c29c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a0:	e069      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2b0:	e061      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2c0:	e059      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2d0:	e051      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2e0:	e049      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c2ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c2f0:	e041      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c2fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c300:	e039      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c30c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c310:	e031      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c31c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c320:	e029      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c32c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c330:	e021      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c33c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c340:	e019      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c34c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c350:	e011      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c35c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c360:	e009      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c36c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c370:	e001      	b.n	800c376 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c376:	4618      	mov	r0, r3
 800c378:	371c      	adds	r7, #28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}
 800c37e:	bf00      	nop
 800c380:	20000010 	.word	0x20000010
 800c384:	10624dd3 	.word	0x10624dd3
 800c388:	fdffe008 	.word	0xfdffe008

0800c38c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c38c:	b490      	push	{r4, r7}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c394:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <SDMMC_GetCmdResp2+0x84>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a1e      	ldr	r2, [pc, #120]	; (800c414 <SDMMC_GetCmdResp2+0x88>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	0a5b      	lsrs	r3, r3, #9
 800c3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	1e5c      	subs	r4, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3b4:	e026      	b.n	800c404 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0f0      	beq.n	800c3a8 <SDMMC_GetCmdResp2+0x1c>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1eb      	bne.n	800c3a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2204      	movs	r2, #4
 800c3e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3e2:	2304      	movs	r3, #4
 800c3e4:	e00e      	b.n	800c404 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d004      	beq.n	800c3fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e003      	b.n	800c404 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	22c5      	movs	r2, #197	; 0xc5
 800c400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bc90      	pop	{r4, r7}
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	20000010 	.word	0x20000010
 800c414:	10624dd3 	.word	0x10624dd3

0800c418 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c418:	b490      	push	{r4, r7}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c420:	4b18      	ldr	r3, [pc, #96]	; (800c484 <SDMMC_GetCmdResp3+0x6c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a18      	ldr	r2, [pc, #96]	; (800c488 <SDMMC_GetCmdResp3+0x70>)
 800c426:	fba2 2303 	umull	r2, r3, r2, r3
 800c42a:	0a5b      	lsrs	r3, r3, #9
 800c42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c430:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c434:	4623      	mov	r3, r4
 800c436:	1e5c      	subs	r4, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d102      	bne.n	800c442 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c43c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c440:	e01b      	b.n	800c47a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0f0      	beq.n	800c434 <SDMMC_GetCmdResp3+0x1c>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1eb      	bne.n	800c434 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c460:	f003 0304 	and.w	r3, r3, #4
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2204      	movs	r2, #4
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c46e:	2304      	movs	r3, #4
 800c470:	e003      	b.n	800c47a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	22c5      	movs	r2, #197	; 0xc5
 800c476:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc90      	pop	{r4, r7}
 800c482:	4770      	bx	lr
 800c484:	20000010 	.word	0x20000010
 800c488:	10624dd3 	.word	0x10624dd3

0800c48c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	460b      	mov	r3, r1
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c49a:	4b34      	ldr	r3, [pc, #208]	; (800c56c <SDMMC_GetCmdResp6+0xe0>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a34      	ldr	r2, [pc, #208]	; (800c570 <SDMMC_GetCmdResp6+0xe4>)
 800c4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a4:	0a5b      	lsrs	r3, r3, #9
 800c4a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c4ae:	4623      	mov	r3, r4
 800c4b0:	1e5c      	subs	r4, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4ba:	e052      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0f0      	beq.n	800c4ae <SDMMC_GetCmdResp6+0x22>
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1eb      	bne.n	800c4ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4da:	f003 0304 	and.w	r3, r3, #4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d004      	beq.n	800c4ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2204      	movs	r2, #4
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	e03a      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e02f      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f7ff fbac 	bl	800bc60 <SDMMC_GetCommandResponse>
 800c508:	4603      	mov	r3, r0
 800c50a:	461a      	mov	r2, r3
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	4293      	cmp	r3, r2
 800c510:	d001      	beq.n	800c516 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c512:	2301      	movs	r3, #1
 800c514:	e025      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	22c5      	movs	r2, #197	; 0xc5
 800c51a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c51c:	2100      	movs	r1, #0
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7ff fbab 	bl	800bc7a <SDMMC_GetResponse>
 800c524:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d106      	bne.n	800c53e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	0c1b      	lsrs	r3, r3, #16
 800c534:	b29a      	uxth	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c53a:	2300      	movs	r3, #0
 800c53c:	e011      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c54c:	e009      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c55c:	e001      	b.n	800c562 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c55e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c562:	4618      	mov	r0, r3
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	bd90      	pop	{r4, r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000010 	.word	0x20000010
 800c570:	10624dd3 	.word	0x10624dd3

0800c574 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c574:	b490      	push	{r4, r7}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c57c:	4b21      	ldr	r3, [pc, #132]	; (800c604 <SDMMC_GetCmdResp7+0x90>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a21      	ldr	r2, [pc, #132]	; (800c608 <SDMMC_GetCmdResp7+0x94>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	0a5b      	lsrs	r3, r3, #9
 800c588:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c590:	4623      	mov	r3, r4
 800c592:	1e5c      	subs	r4, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c59c:	e02c      	b.n	800c5f8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0f0      	beq.n	800c590 <SDMMC_GetCmdResp7+0x1c>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1eb      	bne.n	800c590 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2204      	movs	r2, #4
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	e014      	b.n	800c5f8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d004      	beq.n	800c5e4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e009      	b.n	800c5f8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2240      	movs	r2, #64	; 0x40
 800c5f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c5f6:	2300      	movs	r3, #0
  
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc90      	pop	{r4, r7}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000010 	.word	0x20000010
 800c608:	10624dd3 	.word	0x10624dd3

0800c60c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c610:	4904      	ldr	r1, [pc, #16]	; (800c624 <MX_FATFS_Init+0x18>)
 800c612:	4805      	ldr	r0, [pc, #20]	; (800c628 <MX_FATFS_Init+0x1c>)
 800c614:	f000 fa96 	bl	800cb44 <FATFS_LinkDriver>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	4b03      	ldr	r3, [pc, #12]	; (800c62c <MX_FATFS_Init+0x20>)
 800c61e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c620:	bf00      	nop
 800c622:	bd80      	pop	{r7, pc}
 800c624:	2000ce88 	.word	0x2000ce88
 800c628:	0802ccdc 	.word	0x0802ccdc
 800c62c:	2000ce8c 	.word	0x2000ce8c

0800c630 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c63a:	f000 f87b 	bl	800c734 <BSP_SD_IsDetected>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b01      	cmp	r3, #1
 800c642:	d001      	beq.n	800c648 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c644:	2302      	movs	r3, #2
 800c646:	e012      	b.n	800c66e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c648:	480b      	ldr	r0, [pc, #44]	; (800c678 <BSP_SD_Init+0x48>)
 800c64a:	f7fc fae9 	bl	8008c20 <HAL_SD_Init>
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d109      	bne.n	800c66c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c65c:	4806      	ldr	r0, [pc, #24]	; (800c678 <BSP_SD_Init+0x48>)
 800c65e:	f7fc ff2b 	bl	80094b8 <HAL_SD_ConfigWideBusOperation>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c66c:	79fb      	ldrb	r3, [r7, #7]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	2000c28c 	.word	0x2000c28c

0800c67c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	68f9      	ldr	r1, [r7, #12]
 800c692:	4806      	ldr	r0, [pc, #24]	; (800c6ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800c694:	f7fc fb5c 	bl	8008d50 <HAL_SD_ReadBlocks_DMA>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	2000c28c 	.word	0x2000c28c

0800c6b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	68f9      	ldr	r1, [r7, #12]
 800c6c6:	4806      	ldr	r0, [pc, #24]	; (800c6e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c6c8:	f7fc fc2e 	bl	8008f28 <HAL_SD_WriteBlocks_DMA>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	2000c28c 	.word	0x2000c28c

0800c6e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <BSP_SD_GetCardState+0x1c>)
 800c6ea:	f7fc ff61 	bl	80095b0 <HAL_SD_GetCardState>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	bf14      	ite	ne
 800c6f4:	2301      	movne	r3, #1
 800c6f6:	2300      	moveq	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	2000c28c 	.word	0x2000c28c

0800c704 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	4803      	ldr	r0, [pc, #12]	; (800c71c <BSP_SD_GetCardInfo+0x18>)
 800c710:	f7fc fea6 	bl	8009460 <HAL_SD_GetCardInfo>
}
 800c714:	bf00      	nop
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	2000c28c 	.word	0x2000c28c

0800c720 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c728:	f000 f9b2 	bl	800ca90 <BSP_SD_ReadCpltCallback>
}
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c73a:	2301      	movs	r3, #1
 800c73c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c73e:	f000 f80b 	bl	800c758 <BSP_PlatformIsDetected>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c748:	2300      	movs	r3, #0
 800c74a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c74c:	79fb      	ldrb	r3, [r7, #7]
 800c74e:	b2db      	uxtb	r3, r3
}
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c75e:	2301      	movs	r3, #1
 800c760:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c766:	4806      	ldr	r0, [pc, #24]	; (800c780 <BSP_PlatformIsDetected+0x28>)
 800c768:	f7f9 f90e 	bl	8005988 <HAL_GPIO_ReadPin>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c772:	2300      	movs	r3, #0
 800c774:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c776:	79fb      	ldrb	r3, [r7, #7]
}  
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	40020800 	.word	0x40020800

0800c784 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c78c:	f000 fa26 	bl	800cbdc <osKernelSysTick>
 800c790:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c792:	e006      	b.n	800c7a2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c794:	f7ff ffa6 	bl	800c6e4 <BSP_SD_GetCardState>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e009      	b.n	800c7b6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c7a2:	f000 fa1b 	bl	800cbdc <osKernelSysTick>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d8f0      	bhi.n	800c794 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c7b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c7ca:	4b0b      	ldr	r3, [pc, #44]	; (800c7f8 <SD_CheckStatus+0x38>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c7d0:	f7ff ff88 	bl	800c6e4 <BSP_SD_GetCardState>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d107      	bne.n	800c7ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c7da:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <SD_CheckStatus+0x38>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	f023 0301 	bic.w	r3, r3, #1
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	4b04      	ldr	r3, [pc, #16]	; (800c7f8 <SD_CheckStatus+0x38>)
 800c7e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c7ea:	4b03      	ldr	r3, [pc, #12]	; (800c7f8 <SD_CheckStatus+0x38>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	b2db      	uxtb	r3, r3
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000019 	.word	0x20000019

0800c7fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c7fc:	b590      	push	{r4, r7, lr}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c806:	4b20      	ldr	r3, [pc, #128]	; (800c888 <SD_initialize+0x8c>)
 800c808:	2201      	movs	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c80c:	f000 f9da 	bl	800cbc4 <osKernelRunning>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d030      	beq.n	800c878 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c816:	f7ff ff0b 	bl	800c630 <BSP_SD_Init>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d107      	bne.n	800c830 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c820:	79fb      	ldrb	r3, [r7, #7]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff ffcc 	bl	800c7c0 <SD_CheckStatus>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	4b16      	ldr	r3, [pc, #88]	; (800c888 <SD_initialize+0x8c>)
 800c82e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c830:	4b15      	ldr	r3, [pc, #84]	; (800c888 <SD_initialize+0x8c>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b01      	cmp	r3, #1
 800c838:	d01e      	beq.n	800c878 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c83a:	4b14      	ldr	r3, [pc, #80]	; (800c88c <SD_initialize+0x90>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10e      	bne.n	800c860 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c842:	4b13      	ldr	r3, [pc, #76]	; (800c890 <SD_initialize+0x94>)
 800c844:	f107 0408 	add.w	r4, r7, #8
 800c848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c84a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	2100      	movs	r1, #0
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fa31 	bl	800ccbc <osMessageCreate>
 800c85a:	4602      	mov	r2, r0
 800c85c:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <SD_initialize+0x90>)
 800c85e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <SD_initialize+0x90>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d107      	bne.n	800c878 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c868:	4b07      	ldr	r3, [pc, #28]	; (800c888 <SD_initialize+0x8c>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	4b04      	ldr	r3, [pc, #16]	; (800c888 <SD_initialize+0x8c>)
 800c876:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c878:	4b03      	ldr	r3, [pc, #12]	; (800c888 <SD_initialize+0x8c>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	b2db      	uxtb	r3, r3
}
 800c87e:	4618      	mov	r0, r3
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	bd90      	pop	{r4, r7, pc}
 800c886:	bf00      	nop
 800c888:	20000019 	.word	0x20000019
 800c88c:	200003f0 	.word	0x200003f0
 800c890:	0802c360 	.word	0x0802c360

0800c894 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff ff8d 	bl	800c7c0 <SD_CheckStatus>
 800c8a6:	4603      	mov	r3, r0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08a      	sub	sp, #40	; 0x28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	603b      	str	r3, [r7, #0]
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c8c6:	f247 5030 	movw	r0, #30000	; 0x7530
 800c8ca:	f7ff ff5b 	bl	800c784 <SD_CheckStatusWithTimeout>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	da02      	bge.n	800c8da <SD_read+0x2a>
  {
    return res;
 800c8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d8:	e032      	b.n	800c940 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	6879      	ldr	r1, [r7, #4]
 800c8de:	68b8      	ldr	r0, [r7, #8]
 800c8e0:	f7ff fecc 	bl	800c67c <BSP_SD_ReadBlocks_DMA>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c8ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d124      	bne.n	800c93c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <SD_read+0x98>)
 800c8f4:	6819      	ldr	r1, [r3, #0]
 800c8f6:	f107 0314 	add.w	r3, r7, #20
 800c8fa:	f247 5230 	movw	r2, #30000	; 0x7530
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 fa46 	bl	800cd90 <osMessageGet>

    if (event.status == osEventMessage)
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b10      	cmp	r3, #16
 800c908:	d118      	bne.n	800c93c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d115      	bne.n	800c93c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c910:	f000 f964 	bl	800cbdc <osKernelSysTick>
 800c914:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c916:	e008      	b.n	800c92a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c918:	f7ff fee4 	bl	800c6e4 <BSP_SD_GetCardState>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d103      	bne.n	800c92a <SD_read+0x7a>
              {
                res = RES_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c928:	e008      	b.n	800c93c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c92a:	f000 f957 	bl	800cbdc <osKernelSysTick>
 800c92e:	4602      	mov	r2, r0
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	f247 522f 	movw	r2, #29999	; 0x752f
 800c938:	4293      	cmp	r3, r2
 800c93a:	d9ed      	bls.n	800c918 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c940:	4618      	mov	r0, r3
 800c942:	3728      	adds	r7, #40	; 0x28
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	200003f0 	.word	0x200003f0

0800c94c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08a      	sub	sp, #40	; 0x28
 800c950:	af00      	add	r7, sp, #0
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
 800c956:	603b      	str	r3, [r7, #0]
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c962:	f247 5030 	movw	r0, #30000	; 0x7530
 800c966:	f7ff ff0d 	bl	800c784 <SD_CheckStatusWithTimeout>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	da02      	bge.n	800c976 <SD_write+0x2a>
  {
    return res;
 800c970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c974:	e02e      	b.n	800c9d4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	68b8      	ldr	r0, [r7, #8]
 800c97c:	f7ff fe98 	bl	800c6b0 <BSP_SD_WriteBlocks_DMA>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d124      	bne.n	800c9d0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c986:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <SD_write+0x90>)
 800c988:	6819      	ldr	r1, [r3, #0]
 800c98a:	f107 0314 	add.w	r3, r7, #20
 800c98e:	f247 5230 	movw	r2, #30000	; 0x7530
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f9fc 	bl	800cd90 <osMessageGet>

    if (event.status == osEventMessage)
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2b10      	cmp	r3, #16
 800c99c:	d118      	bne.n	800c9d0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d115      	bne.n	800c9d0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c9a4:	f000 f91a 	bl	800cbdc <osKernelSysTick>
 800c9a8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c9aa:	e008      	b.n	800c9be <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c9ac:	f7ff fe9a 	bl	800c6e4 <BSP_SD_GetCardState>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d103      	bne.n	800c9be <SD_write+0x72>
          {
            res = RES_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c9bc:	e008      	b.n	800c9d0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c9be:	f000 f90d 	bl	800cbdc <osKernelSysTick>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d9ed      	bls.n	800c9ac <SD_write+0x60>
    }

  }
#endif

  return res;
 800c9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3728      	adds	r7, #40	; 0x28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	200003f0 	.word	0x200003f0

0800c9e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08c      	sub	sp, #48	; 0x30
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	603a      	str	r2, [r7, #0]
 800c9ea:	71fb      	strb	r3, [r7, #7]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c9f6:	4b25      	ldr	r3, [pc, #148]	; (800ca8c <SD_ioctl+0xac>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0301 	and.w	r3, r3, #1
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <SD_ioctl+0x28>
 800ca04:	2303      	movs	r3, #3
 800ca06:	e03c      	b.n	800ca82 <SD_ioctl+0xa2>

  switch (cmd)
 800ca08:	79bb      	ldrb	r3, [r7, #6]
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d834      	bhi.n	800ca78 <SD_ioctl+0x98>
 800ca0e:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <SD_ioctl+0x34>)
 800ca10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca14:	0800ca25 	.word	0x0800ca25
 800ca18:	0800ca2d 	.word	0x0800ca2d
 800ca1c:	0800ca45 	.word	0x0800ca45
 800ca20:	0800ca5f 	.word	0x0800ca5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca2a:	e028      	b.n	800ca7e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ca2c:	f107 030c 	add.w	r3, r7, #12
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff fe67 	bl	800c704 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ca36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca42:	e01c      	b.n	800ca7e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ca44:	f107 030c 	add.w	r3, r7, #12
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fe5b 	bl	800c704 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca5c:	e00f      	b.n	800ca7e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ca5e:	f107 030c 	add.w	r3, r7, #12
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fe4e 	bl	800c704 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	0a5a      	lsrs	r2, r3, #9
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ca76:	e002      	b.n	800ca7e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ca7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3730      	adds	r7, #48	; 0x30
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000019 	.word	0x20000019

0800ca90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ca94:	4b04      	ldr	r3, [pc, #16]	; (800caa8 <BSP_SD_ReadCpltCallback+0x18>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 f937 	bl	800cd10 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800caa2:	bf00      	nop
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	200003f0 	.word	0x200003f0

0800caac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800caac:	b480      	push	{r7}
 800caae:	b087      	sub	sp, #28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	4613      	mov	r3, r2
 800cab8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caba:	2301      	movs	r3, #1
 800cabc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cac2:	4b1f      	ldr	r3, [pc, #124]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cac4:	7a5b      	ldrb	r3, [r3, #9]
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d131      	bne.n	800cb30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cacc:	4b1c      	ldr	r3, [pc, #112]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cace:	7a5b      	ldrb	r3, [r3, #9]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	461a      	mov	r2, r3
 800cad4:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cad6:	2100      	movs	r1, #0
 800cad8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cada:	4b19      	ldr	r3, [pc, #100]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cadc:	7a5b      	ldrb	r3, [r3, #9]
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800caea:	4b15      	ldr	r3, [pc, #84]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800caec:	7a5b      	ldrb	r3, [r3, #9]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b13      	ldr	r3, [pc, #76]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800caf4:	4413      	add	r3, r2
 800caf6:	79fa      	ldrb	r2, [r7, #7]
 800caf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cafa:	4b11      	ldr	r3, [pc, #68]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cafc:	7a5b      	ldrb	r3, [r3, #9]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	b2d1      	uxtb	r1, r2
 800cb04:	4a0e      	ldr	r2, [pc, #56]	; (800cb40 <FATFS_LinkDriverEx+0x94>)
 800cb06:	7251      	strb	r1, [r2, #9]
 800cb08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb0a:	7dbb      	ldrb	r3, [r7, #22]
 800cb0c:	3330      	adds	r3, #48	; 0x30
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	3301      	adds	r3, #1
 800cb18:	223a      	movs	r2, #58	; 0x3a
 800cb1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	3302      	adds	r3, #2
 800cb20:	222f      	movs	r2, #47	; 0x2f
 800cb22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	3303      	adds	r3, #3
 800cb28:	2200      	movs	r2, #0
 800cb2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	200003f4 	.word	0x200003f4

0800cb44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb4e:	2200      	movs	r2, #0
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff ffaa 	bl	800caac <FATFS_LinkDriverEx>
 800cb58:	4603      	mov	r3, r0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	4603      	mov	r3, r0
 800cb6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cb70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb74:	2b84      	cmp	r3, #132	; 0x84
 800cb76:	d005      	beq.n	800cb84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cb78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	3303      	adds	r3, #3
 800cb82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cb84:	68fb      	ldr	r3, [r7, #12]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb98:	f3ef 8305 	mrs	r3, IPSR
 800cb9c:	607b      	str	r3, [r7, #4]
  return(result);
 800cb9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bf14      	ite	ne
 800cba4:	2301      	movne	r3, #1
 800cba6:	2300      	moveq	r3, #0
 800cba8:	b2db      	uxtb	r3, r3
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cbba:	f001 faff 	bl	800e1bc <vTaskStartScheduler>
  
  return osOK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cbc8:	f001 ff4a 	bl	800ea60 <xTaskGetSchedulerState>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d101      	bne.n	800cbd6 <osKernelRunning+0x12>
    return 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e000      	b.n	800cbd8 <osKernelRunning+0x14>
  else
    return 1;
 800cbd6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cbe0:	f7ff ffd7 	bl	800cb92 <inHandlerMode>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cbea:	f001 fc05 	bl	800e3f8 <xTaskGetTickCountFromISR>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	e002      	b.n	800cbf8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cbf2:	f001 fbf1 	bl	800e3d8 <xTaskGetTickCount>
 800cbf6:	4603      	mov	r3, r0
  }
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfe:	b089      	sub	sp, #36	; 0x24
 800cc00:	af04      	add	r7, sp, #16
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d020      	beq.n	800cc50 <osThreadCreate+0x54>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01c      	beq.n	800cc50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685c      	ldr	r4, [r3, #4]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681d      	ldr	r5, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691e      	ldr	r6, [r3, #16]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff ff9a 	bl	800cb62 <makeFreeRtosPriority>
 800cc2e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc38:	9202      	str	r2, [sp, #8]
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	9100      	str	r1, [sp, #0]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	4632      	mov	r2, r6
 800cc42:	4629      	mov	r1, r5
 800cc44:	4620      	mov	r0, r4
 800cc46:	f001 f8e0 	bl	800de0a <xTaskCreateStatic>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e01c      	b.n	800cc8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685c      	ldr	r4, [r3, #4]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cc5c:	b29e      	uxth	r6, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff ff7c 	bl	800cb62 <makeFreeRtosPriority>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	f107 030c 	add.w	r3, r7, #12
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	9200      	str	r2, [sp, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	4632      	mov	r2, r6
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f001 f925 	bl	800deca <xTaskCreate>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d001      	beq.n	800cc8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e000      	b.n	800cc8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <osDelay+0x16>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	e000      	b.n	800ccac <osDelay+0x18>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	4618      	mov	r0, r3
 800ccae:	f001 fa4f 	bl	800e150 <vTaskDelay>
  
  return osOK;
 800ccb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d012      	beq.n	800ccf4 <osMessageCreate+0x38>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00e      	beq.n	800ccf4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6859      	ldr	r1, [r3, #4]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689a      	ldr	r2, [r3, #8]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68dc      	ldr	r4, [r3, #12]
 800cce6:	2300      	movs	r3, #0
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	4623      	mov	r3, r4
 800ccec:	f000 f9e2 	bl	800d0b4 <xQueueGenericCreateStatic>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	e008      	b.n	800cd06 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6818      	ldr	r0, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4619      	mov	r1, r3
 800cd00:	f000 fa55 	bl	800d1ae <xQueueGenericCreate>
 800cd04:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd90      	pop	{r4, r7, pc}
	...

0800cd10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <osMessagePut+0x1e>
    ticks = 1;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cd2e:	f7ff ff30 	bl	800cb92 <inHandlerMode>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d018      	beq.n	800cd6a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cd38:	f107 0210 	add.w	r2, r7, #16
 800cd3c:	f107 0108 	add.w	r1, r7, #8
 800cd40:	2300      	movs	r3, #0
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f000 fb96 	bl	800d474 <xQueueGenericSendFromISR>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d001      	beq.n	800cd52 <osMessagePut+0x42>
      return osErrorOS;
 800cd4e:	23ff      	movs	r3, #255	; 0xff
 800cd50:	e018      	b.n	800cd84 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d014      	beq.n	800cd82 <osMessagePut+0x72>
 800cd58:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <osMessagePut+0x7c>)
 800cd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	e00b      	b.n	800cd82 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cd6a:	f107 0108 	add.w	r1, r7, #8
 800cd6e:	2300      	movs	r3, #0
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f000 fa7c 	bl	800d270 <xQueueGenericSend>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d001      	beq.n	800cd82 <osMessagePut+0x72>
      return osErrorOS;
 800cd7e:	23ff      	movs	r3, #255	; 0xff
 800cd80:	e000      	b.n	800cd84 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3718      	adds	r7, #24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	e000ed04 	.word	0xe000ed04

0800cd90 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b08b      	sub	sp, #44	; 0x2c
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cdaa:	2380      	movs	r3, #128	; 0x80
 800cdac:	617b      	str	r3, [r7, #20]
    return event;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	461c      	mov	r4, r3
 800cdb2:	f107 0314 	add.w	r3, r7, #20
 800cdb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cdbe:	e054      	b.n	800ce6a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdce:	d103      	bne.n	800cdd8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdd6:	e009      	b.n	800cdec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d006      	beq.n	800cdec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <osMessageGet+0x5c>
      ticks = 1;
 800cde8:	2301      	movs	r3, #1
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cdec:	f7ff fed1 	bl	800cb92 <inHandlerMode>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d01c      	beq.n	800ce30 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cdf6:	f107 0220 	add.w	r2, r7, #32
 800cdfa:	f107 0314 	add.w	r3, r7, #20
 800cdfe:	3304      	adds	r3, #4
 800ce00:	4619      	mov	r1, r3
 800ce02:	68b8      	ldr	r0, [r7, #8]
 800ce04:	f000 fe56 	bl	800dab4 <xQueueReceiveFromISR>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d102      	bne.n	800ce14 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ce0e:	2310      	movs	r3, #16
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	e001      	b.n	800ce18 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d01d      	beq.n	800ce5a <osMessageGet+0xca>
 800ce1e:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <osMessageGet+0xe4>)
 800ce20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	e014      	b.n	800ce5a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ce30:	f107 0314 	add.w	r3, r7, #20
 800ce34:	3304      	adds	r3, #4
 800ce36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce38:	4619      	mov	r1, r3
 800ce3a:	68b8      	ldr	r0, [r7, #8]
 800ce3c:	f000 fc48 	bl	800d6d0 <xQueueReceive>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d102      	bne.n	800ce4c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ce46:	2310      	movs	r3, #16
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e006      	b.n	800ce5a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <osMessageGet+0xc6>
 800ce52:	2300      	movs	r3, #0
 800ce54:	e000      	b.n	800ce58 <osMessageGet+0xc8>
 800ce56:	2340      	movs	r3, #64	; 0x40
 800ce58:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	461c      	mov	r4, r3
 800ce5e:	f107 0314 	add.w	r3, r7, #20
 800ce62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	372c      	adds	r7, #44	; 0x2c
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd90      	pop	{r4, r7, pc}
 800ce72:	bf00      	nop
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f103 0208 	add.w	r2, r3, #8
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f103 0208 	add.w	r2, r3, #8
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f103 0208 	add.w	r2, r3, #8
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ceac:	bf00      	nop
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ced2:	b480      	push	{r7}
 800ced4:	b085      	sub	sp, #20
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	689a      	ldr	r2, [r3, #8]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	601a      	str	r2, [r3, #0]
}
 800cf0e:	bf00      	nop
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b085      	sub	sp, #20
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf30:	d103      	bne.n	800cf3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	e00c      	b.n	800cf54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e002      	b.n	800cf48 <vListInsert+0x2e>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d2f6      	bcs.n	800cf42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	601a      	str	r2, [r3, #0]
}
 800cf80:	bf00      	nop
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6892      	ldr	r2, [r2, #8]
 800cfa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	6852      	ldr	r2, [r2, #4]
 800cfac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d103      	bne.n	800cfc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689a      	ldr	r2, [r3, #8]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	1e5a      	subs	r2, r3, #1
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10b      	bne.n	800d00c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	b672      	cpsid	i
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	b662      	cpsie	i
 800d008:	60bb      	str	r3, [r7, #8]
 800d00a:	e7fe      	b.n	800d00a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d00c:	f002 f86c 	bl	800f0e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d018:	68f9      	ldr	r1, [r7, #12]
 800d01a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d01c:	fb01 f303 	mul.w	r3, r1, r3
 800d020:	441a      	add	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03c:	3b01      	subs	r3, #1
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d042:	fb01 f303 	mul.w	r3, r1, r3
 800d046:	441a      	add	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	22ff      	movs	r2, #255	; 0xff
 800d050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	22ff      	movs	r2, #255	; 0xff
 800d058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d114      	bne.n	800d08c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d01a      	beq.n	800d0a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3310      	adds	r3, #16
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 fb36 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d012      	beq.n	800d0a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d07a:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <xQueueGenericReset+0xd0>)
 800d07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	e009      	b.n	800d0a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3310      	adds	r3, #16
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff fef1 	bl	800ce78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3324      	adds	r3, #36	; 0x24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff feec 	bl	800ce78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0a0:	f002 f854 	bl	800f14c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0a4:	2301      	movs	r3, #1
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b08e      	sub	sp, #56	; 0x38
 800d0b8:	af02      	add	r7, sp, #8
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10b      	bne.n	800d0e0 <xQueueGenericCreateStatic+0x2c>
 800d0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0cc:	b672      	cpsid	i
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	b662      	cpsie	i
 800d0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0de:	e7fe      	b.n	800d0de <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <xQueueGenericCreateStatic+0x4a>
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800d0fc:	e7fe      	b.n	800d0fc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <xQueueGenericCreateStatic+0x56>
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <xQueueGenericCreateStatic+0x5a>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <xQueueGenericCreateStatic+0x5c>
 800d10e:	2300      	movs	r3, #0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <xQueueGenericCreateStatic+0x78>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	623b      	str	r3, [r7, #32]
 800d12a:	e7fe      	b.n	800d12a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <xQueueGenericCreateStatic+0x84>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <xQueueGenericCreateStatic+0x88>
 800d138:	2301      	movs	r3, #1
 800d13a:	e000      	b.n	800d13e <xQueueGenericCreateStatic+0x8a>
 800d13c:	2300      	movs	r3, #0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10b      	bne.n	800d15a <xQueueGenericCreateStatic+0xa6>
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	b672      	cpsid	i
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	b662      	cpsie	i
 800d156:	61fb      	str	r3, [r7, #28]
 800d158:	e7fe      	b.n	800d158 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d15a:	2348      	movs	r3, #72	; 0x48
 800d15c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2b48      	cmp	r3, #72	; 0x48
 800d162:	d00b      	beq.n	800d17c <xQueueGenericCreateStatic+0xc8>
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	b672      	cpsid	i
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	b662      	cpsie	i
 800d178:	61bb      	str	r3, [r7, #24]
 800d17a:	e7fe      	b.n	800d17a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d17c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00d      	beq.n	800d1a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d190:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	4613      	mov	r3, r2
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	68b9      	ldr	r1, [r7, #8]
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f000 f846 	bl	800d230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3730      	adds	r7, #48	; 0x30
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b08a      	sub	sp, #40	; 0x28
 800d1b2:	af02      	add	r7, sp, #8
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10b      	bne.n	800d1da <xQueueGenericCreate+0x2c>
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	b672      	cpsid	i
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	b662      	cpsie	i
 800d1d6:	613b      	str	r3, [r7, #16]
 800d1d8:	e7fe      	b.n	800d1d8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]
 800d1e4:	e004      	b.n	800d1f0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	fb02 f303 	mul.w	r3, r2, r3
 800d1ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	3348      	adds	r3, #72	; 0x48
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f002 f899 	bl	800f32c <pvPortMalloc>
 800d1fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d011      	beq.n	800d226 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	3348      	adds	r3, #72	; 0x48
 800d20a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	4613      	mov	r3, r2
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 f805 	bl	800d230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d226:	69bb      	ldr	r3, [r7, #24]
	}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d103      	bne.n	800d24c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	69ba      	ldr	r2, [r7, #24]
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	e002      	b.n	800d252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d25e:	2101      	movs	r1, #1
 800d260:	69b8      	ldr	r0, [r7, #24]
 800d262:	f7ff febd 	bl	800cfe0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08e      	sub	sp, #56	; 0x38
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d27e:	2300      	movs	r3, #0
 800d280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10b      	bne.n	800d2a4 <xQueueGenericSend+0x34>
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	b672      	cpsid	i
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	b662      	cpsie	i
 800d2a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2a2:	e7fe      	b.n	800d2a2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d103      	bne.n	800d2b2 <xQueueGenericSend+0x42>
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <xQueueGenericSend+0x46>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e000      	b.n	800d2b8 <xQueueGenericSend+0x48>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10b      	bne.n	800d2d4 <xQueueGenericSend+0x64>
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	b672      	cpsid	i
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	b662      	cpsie	i
 800d2d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d2:	e7fe      	b.n	800d2d2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d103      	bne.n	800d2e2 <xQueueGenericSend+0x72>
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d101      	bne.n	800d2e6 <xQueueGenericSend+0x76>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <xQueueGenericSend+0x78>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10b      	bne.n	800d304 <xQueueGenericSend+0x94>
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	b672      	cpsid	i
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	b662      	cpsie	i
 800d300:	623b      	str	r3, [r7, #32]
 800d302:	e7fe      	b.n	800d302 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d304:	f001 fbac 	bl	800ea60 <xTaskGetSchedulerState>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d102      	bne.n	800d314 <xQueueGenericSend+0xa4>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <xQueueGenericSend+0xa8>
 800d314:	2301      	movs	r3, #1
 800d316:	e000      	b.n	800d31a <xQueueGenericSend+0xaa>
 800d318:	2300      	movs	r3, #0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10b      	bne.n	800d336 <xQueueGenericSend+0xc6>
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	b672      	cpsid	i
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	b662      	cpsie	i
 800d332:	61fb      	str	r3, [r7, #28]
 800d334:	e7fe      	b.n	800d334 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d336:	f001 fed7 	bl	800f0e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d342:	429a      	cmp	r2, r3
 800d344:	d302      	bcc.n	800d34c <xQueueGenericSend+0xdc>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d129      	bne.n	800d3a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d352:	f000 fc4a 	bl	800dbea <prvCopyDataToQueue>
 800d356:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d010      	beq.n	800d382 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	3324      	adds	r3, #36	; 0x24
 800d364:	4618      	mov	r0, r3
 800d366:	f001 f9bb 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d013      	beq.n	800d398 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d370:	4b3f      	ldr	r3, [pc, #252]	; (800d470 <xQueueGenericSend+0x200>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	e00a      	b.n	800d398 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	2b00      	cmp	r3, #0
 800d386:	d007      	beq.n	800d398 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d388:	4b39      	ldr	r3, [pc, #228]	; (800d470 <xQueueGenericSend+0x200>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d398:	f001 fed8 	bl	800f14c <vPortExitCritical>
				return pdPASS;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e063      	b.n	800d468 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d103      	bne.n	800d3ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3a6:	f001 fed1 	bl	800f14c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e05c      	b.n	800d468 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3b4:	f107 0314 	add.w	r3, r7, #20
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 f9f5 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3c2:	f001 fec3 	bl	800f14c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3c6:	f000 ff5b 	bl	800e280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ca:	f001 fe8d 	bl	800f0e8 <vPortEnterCritical>
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3d4:	b25b      	sxtb	r3, r3
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d103      	bne.n	800d3e4 <xQueueGenericSend+0x174>
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d103      	bne.n	800d3fa <xQueueGenericSend+0x18a>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3fa:	f001 fea7 	bl	800f14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3fe:	1d3a      	adds	r2, r7, #4
 800d400:	f107 0314 	add.w	r3, r7, #20
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f001 f9e4 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d124      	bne.n	800d45c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d414:	f000 fce1 	bl	800ddda <prvIsQueueFull>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d018      	beq.n	800d450 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	3310      	adds	r3, #16
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f001 f934 	bl	800e694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d42e:	f000 fc6c 	bl	800dd0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d432:	f000 ff33 	bl	800e29c <xTaskResumeAll>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f47f af7c 	bne.w	800d336 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d43e:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <xQueueGenericSend+0x200>)
 800d440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	e772      	b.n	800d336 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d452:	f000 fc5a 	bl	800dd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d456:	f000 ff21 	bl	800e29c <xTaskResumeAll>
 800d45a:	e76c      	b.n	800d336 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d45c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d45e:	f000 fc54 	bl	800dd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d462:	f000 ff1b 	bl	800e29c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3738      	adds	r7, #56	; 0x38
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	e000ed04 	.word	0xe000ed04

0800d474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b08e      	sub	sp, #56	; 0x38
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10b      	bne.n	800d4a4 <xQueueGenericSendFromISR+0x30>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	b672      	cpsid	i
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	b662      	cpsie	i
 800d4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d4a2:	e7fe      	b.n	800d4a2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d103      	bne.n	800d4b2 <xQueueGenericSendFromISR+0x3e>
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <xQueueGenericSendFromISR+0x42>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <xQueueGenericSendFromISR+0x44>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10b      	bne.n	800d4d4 <xQueueGenericSendFromISR+0x60>
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	b672      	cpsid	i
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	b662      	cpsie	i
 800d4d0:	623b      	str	r3, [r7, #32]
 800d4d2:	e7fe      	b.n	800d4d2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d103      	bne.n	800d4e2 <xQueueGenericSendFromISR+0x6e>
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d101      	bne.n	800d4e6 <xQueueGenericSendFromISR+0x72>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e000      	b.n	800d4e8 <xQueueGenericSendFromISR+0x74>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10b      	bne.n	800d504 <xQueueGenericSendFromISR+0x90>
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	b672      	cpsid	i
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	b662      	cpsie	i
 800d500:	61fb      	str	r3, [r7, #28]
 800d502:	e7fe      	b.n	800d502 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d504:	f001 fed0 	bl	800f2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d508:	f3ef 8211 	mrs	r2, BASEPRI
 800d50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d510:	b672      	cpsid	i
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	b662      	cpsie	i
 800d520:	61ba      	str	r2, [r7, #24]
 800d522:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d524:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d526:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d530:	429a      	cmp	r2, r3
 800d532:	d302      	bcc.n	800d53a <xQueueGenericSendFromISR+0xc6>
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b02      	cmp	r3, #2
 800d538:	d12c      	bne.n	800d594 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d54a:	f000 fb4e 	bl	800dbea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d54e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d112      	bne.n	800d57e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d016      	beq.n	800d58e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	3324      	adds	r3, #36	; 0x24
 800d564:	4618      	mov	r0, r3
 800d566:	f001 f8bb 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00e      	beq.n	800d58e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00b      	beq.n	800d58e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	e007      	b.n	800d58e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d57e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d582:	3301      	adds	r3, #1
 800d584:	b2db      	uxtb	r3, r3
 800d586:	b25a      	sxtb	r2, r3
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d58e:	2301      	movs	r3, #1
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d592:	e001      	b.n	800d598 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d594:	2300      	movs	r3, #0
 800d596:	637b      	str	r3, [r7, #52]	; 0x34
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3738      	adds	r7, #56	; 0x38
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08e      	sub	sp, #56	; 0x38
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	b672      	cpsid	i
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	b662      	cpsie	i
 800d5d4:	623b      	str	r3, [r7, #32]
 800d5d6:	e7fe      	b.n	800d5d6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00b      	beq.n	800d5f8 <xQueueGiveFromISR+0x4c>
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	b672      	cpsid	i
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	b662      	cpsie	i
 800d5f4:	61fb      	str	r3, [r7, #28]
 800d5f6:	e7fe      	b.n	800d5f6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d103      	bne.n	800d608 <xQueueGiveFromISR+0x5c>
 800d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <xQueueGiveFromISR+0x60>
 800d608:	2301      	movs	r3, #1
 800d60a:	e000      	b.n	800d60e <xQueueGiveFromISR+0x62>
 800d60c:	2300      	movs	r3, #0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10b      	bne.n	800d62a <xQueueGiveFromISR+0x7e>
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	b672      	cpsid	i
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	b662      	cpsie	i
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	e7fe      	b.n	800d628 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d62a:	f001 fe3d 	bl	800f2a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d62e:	f3ef 8211 	mrs	r2, BASEPRI
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	b672      	cpsid	i
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	b662      	cpsie	i
 800d646:	617a      	str	r2, [r7, #20]
 800d648:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d64a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d22b      	bcs.n	800d6b6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d678:	d112      	bne.n	800d6a0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d016      	beq.n	800d6b0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d684:	3324      	adds	r3, #36	; 0x24
 800d686:	4618      	mov	r0, r3
 800d688:	f001 f82a 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00e      	beq.n	800d6b0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2201      	movs	r2, #1
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	e007      	b.n	800d6b0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	b25a      	sxtb	r2, r3
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d6b4:	e001      	b.n	800d6ba <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3738      	adds	r7, #56	; 0x38
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08c      	sub	sp, #48	; 0x30
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <xQueueReceive+0x32>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	b672      	cpsid	i
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	b662      	cpsie	i
 800d6fe:	623b      	str	r3, [r7, #32]
 800d700:	e7fe      	b.n	800d700 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <xQueueReceive+0x40>
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <xQueueReceive+0x44>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <xQueueReceive+0x46>
 800d714:	2300      	movs	r3, #0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <xQueueReceive+0x62>
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	b672      	cpsid	i
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	b662      	cpsie	i
 800d72e:	61fb      	str	r3, [r7, #28]
 800d730:	e7fe      	b.n	800d730 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d732:	f001 f995 	bl	800ea60 <xTaskGetSchedulerState>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d102      	bne.n	800d742 <xQueueReceive+0x72>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <xQueueReceive+0x76>
 800d742:	2301      	movs	r3, #1
 800d744:	e000      	b.n	800d748 <xQueueReceive+0x78>
 800d746:	2300      	movs	r3, #0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10b      	bne.n	800d764 <xQueueReceive+0x94>
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	b672      	cpsid	i
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	b662      	cpsie	i
 800d760:	61bb      	str	r3, [r7, #24]
 800d762:	e7fe      	b.n	800d762 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d764:	f001 fcc0 	bl	800f0e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	2b00      	cmp	r3, #0
 800d772:	d01f      	beq.n	800d7b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d774:	68b9      	ldr	r1, [r7, #8]
 800d776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d778:	f000 faa1 	bl	800dcbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	1e5a      	subs	r2, r3, #1
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00f      	beq.n	800d7ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	3310      	adds	r3, #16
 800d790:	4618      	mov	r0, r3
 800d792:	f000 ffa5 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d79c:	4b3c      	ldr	r3, [pc, #240]	; (800d890 <xQueueReceive+0x1c0>)
 800d79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7ac:	f001 fcce 	bl	800f14c <vPortExitCritical>
				return pdPASS;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e069      	b.n	800d888 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d103      	bne.n	800d7c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ba:	f001 fcc7 	bl	800f14c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e062      	b.n	800d888 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7c8:	f107 0310 	add.w	r3, r7, #16
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 ffeb 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7d6:	f001 fcb9 	bl	800f14c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7da:	f000 fd51 	bl	800e280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7de:	f001 fc83 	bl	800f0e8 <vPortEnterCritical>
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7e8:	b25b      	sxtb	r3, r3
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	d103      	bne.n	800d7f8 <xQueueReceive+0x128>
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7fe:	b25b      	sxtb	r3, r3
 800d800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d804:	d103      	bne.n	800d80e <xQueueReceive+0x13e>
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d80e:	f001 fc9d 	bl	800f14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d812:	1d3a      	adds	r2, r7, #4
 800d814:	f107 0310 	add.w	r3, r7, #16
 800d818:	4611      	mov	r1, r2
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 ffda 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d123      	bne.n	800d86e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	f000 fac1 	bl	800ddae <prvIsQueueEmpty>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d017      	beq.n	800d862 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d834:	3324      	adds	r3, #36	; 0x24
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 ff2a 	bl	800e694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d842:	f000 fa62 	bl	800dd0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d846:	f000 fd29 	bl	800e29c <xTaskResumeAll>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d189      	bne.n	800d764 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d850:	4b0f      	ldr	r3, [pc, #60]	; (800d890 <xQueueReceive+0x1c0>)
 800d852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	e780      	b.n	800d764 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d864:	f000 fa51 	bl	800dd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d868:	f000 fd18 	bl	800e29c <xTaskResumeAll>
 800d86c:	e77a      	b.n	800d764 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d870:	f000 fa4b 	bl	800dd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d874:	f000 fd12 	bl	800e29c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87a:	f000 fa98 	bl	800ddae <prvIsQueueEmpty>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	f43f af6f 	beq.w	800d764 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d886:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3730      	adds	r7, #48	; 0x30
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08e      	sub	sp, #56	; 0x38
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10b      	bne.n	800d8c8 <xQueueSemaphoreTake+0x34>
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	b672      	cpsid	i
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	b662      	cpsie	i
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	e7fe      	b.n	800d8c6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <xQueueSemaphoreTake+0x54>
 800d8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d4:	b672      	cpsid	i
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	b662      	cpsie	i
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	e7fe      	b.n	800d8e6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8e8:	f001 f8ba 	bl	800ea60 <xTaskGetSchedulerState>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d102      	bne.n	800d8f8 <xQueueSemaphoreTake+0x64>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <xQueueSemaphoreTake+0x68>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e000      	b.n	800d8fe <xQueueSemaphoreTake+0x6a>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10b      	bne.n	800d91a <xQueueSemaphoreTake+0x86>
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	b672      	cpsid	i
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	b662      	cpsie	i
 800d916:	61bb      	str	r3, [r7, #24]
 800d918:	e7fe      	b.n	800d918 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d91a:	f001 fbe5 	bl	800f0e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d922:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	2b00      	cmp	r3, #0
 800d928:	d024      	beq.n	800d974 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	1e5a      	subs	r2, r3, #1
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d104      	bne.n	800d944 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d93a:	f001 fa53 	bl	800ede4 <pvTaskIncrementMutexHeldCount>
 800d93e:	4602      	mov	r2, r0
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00f      	beq.n	800d96c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	3310      	adds	r3, #16
 800d950:	4618      	mov	r0, r3
 800d952:	f000 fec5 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d007      	beq.n	800d96c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d95c:	4b54      	ldr	r3, [pc, #336]	; (800dab0 <xQueueSemaphoreTake+0x21c>)
 800d95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d96c:	f001 fbee 	bl	800f14c <vPortExitCritical>
				return pdPASS;
 800d970:	2301      	movs	r3, #1
 800d972:	e098      	b.n	800daa6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d112      	bne.n	800d9a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <xQueueSemaphoreTake+0x104>
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	b672      	cpsid	i
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	b662      	cpsie	i
 800d994:	617b      	str	r3, [r7, #20]
 800d996:	e7fe      	b.n	800d996 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d998:	f001 fbd8 	bl	800f14c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d99c:	2300      	movs	r3, #0
 800d99e:	e082      	b.n	800daa6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9a6:	f107 030c 	add.w	r3, r7, #12
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 fefc 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9b4:	f001 fbca 	bl	800f14c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9b8:	f000 fc62 	bl	800e280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9bc:	f001 fb94 	bl	800f0e8 <vPortEnterCritical>
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9c6:	b25b      	sxtb	r3, r3
 800d9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9cc:	d103      	bne.n	800d9d6 <xQueueSemaphoreTake+0x142>
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9dc:	b25b      	sxtb	r3, r3
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e2:	d103      	bne.n	800d9ec <xQueueSemaphoreTake+0x158>
 800d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9ec:	f001 fbae 	bl	800f14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9f0:	463a      	mov	r2, r7
 800d9f2:	f107 030c 	add.w	r3, r7, #12
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 feeb 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d132      	bne.n	800da6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da06:	f000 f9d2 	bl	800ddae <prvIsQueueEmpty>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d026      	beq.n	800da5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800da18:	f001 fb66 	bl	800f0e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	4618      	mov	r0, r3
 800da22:	f001 f83b 	bl	800ea9c <xTaskPriorityInherit>
 800da26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da28:	f001 fb90 	bl	800f14c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	3324      	adds	r3, #36	; 0x24
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fe2d 	bl	800e694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da3c:	f000 f965 	bl	800dd0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da40:	f000 fc2c 	bl	800e29c <xTaskResumeAll>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	f47f af67 	bne.w	800d91a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800da4c:	4b18      	ldr	r3, [pc, #96]	; (800dab0 <xQueueSemaphoreTake+0x21c>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	e75d      	b.n	800d91a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da60:	f000 f953 	bl	800dd0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da64:	f000 fc1a 	bl	800e29c <xTaskResumeAll>
 800da68:	e757      	b.n	800d91a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6c:	f000 f94d 	bl	800dd0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da70:	f000 fc14 	bl	800e29c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da76:	f000 f99a 	bl	800ddae <prvIsQueueEmpty>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f43f af4c 	beq.w	800d91a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00d      	beq.n	800daa4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800da88:	f001 fb2e 	bl	800f0e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da8e:	f000 f894 	bl	800dbba <prvGetDisinheritPriorityAfterTimeout>
 800da92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da9a:	4618      	mov	r0, r3
 800da9c:	f001 f906 	bl	800ecac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800daa0:	f001 fb54 	bl	800f14c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800daa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3738      	adds	r7, #56	; 0x38
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	e000ed04 	.word	0xe000ed04

0800dab4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b08e      	sub	sp, #56	; 0x38
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <xQueueReceiveFromISR+0x2e>
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	b672      	cpsid	i
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	b662      	cpsie	i
 800dade:	623b      	str	r3, [r7, #32]
 800dae0:	e7fe      	b.n	800dae0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d103      	bne.n	800daf0 <xQueueReceiveFromISR+0x3c>
 800dae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <xQueueReceiveFromISR+0x40>
 800daf0:	2301      	movs	r3, #1
 800daf2:	e000      	b.n	800daf6 <xQueueReceiveFromISR+0x42>
 800daf4:	2300      	movs	r3, #0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10b      	bne.n	800db12 <xQueueReceiveFromISR+0x5e>
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	b672      	cpsid	i
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	b662      	cpsie	i
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	e7fe      	b.n	800db10 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db12:	f001 fbc9 	bl	800f2a8 <vPortValidateInterruptPriority>
	__asm volatile
 800db16:	f3ef 8211 	mrs	r2, BASEPRI
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	b672      	cpsid	i
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	b662      	cpsie	i
 800db2e:	61ba      	str	r2, [r7, #24]
 800db30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d02f      	beq.n	800dba2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db50:	f000 f8b5 	bl	800dcbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	1e5a      	subs	r2, r3, #1
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db64:	d112      	bne.n	800db8c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d016      	beq.n	800db9c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	3310      	adds	r3, #16
 800db72:	4618      	mov	r0, r3
 800db74:	f000 fdb4 	bl	800e6e0 <xTaskRemoveFromEventList>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00e      	beq.n	800db9c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00b      	beq.n	800db9c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	e007      	b.n	800db9c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db90:	3301      	adds	r3, #1
 800db92:	b2db      	uxtb	r3, r3
 800db94:	b25a      	sxtb	r2, r3
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800db9c:	2301      	movs	r3, #1
 800db9e:	637b      	str	r3, [r7, #52]	; 0x34
 800dba0:	e001      	b.n	800dba6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	637b      	str	r3, [r7, #52]	; 0x34
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3738      	adds	r7, #56	; 0x38
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dbba:	b480      	push	{r7}
 800dbbc:	b085      	sub	sp, #20
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d006      	beq.n	800dbd8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f1c3 0307 	rsb	r3, r3, #7
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	e001      	b.n	800dbdc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
	}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b086      	sub	sp, #24
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	60f8      	str	r0, [r7, #12]
 800dbf2:	60b9      	str	r1, [r7, #8]
 800dbf4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10d      	bne.n	800dc24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d14d      	bne.n	800dcac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 ffc1 	bl	800eb9c <xTaskPriorityDisinherit>
 800dc1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	609a      	str	r2, [r3, #8]
 800dc22:	e043      	b.n	800dcac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d119      	bne.n	800dc5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6858      	ldr	r0, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc32:	461a      	mov	r2, r3
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	f01d fbc3 	bl	802b3c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc42:	441a      	add	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d32b      	bcc.n	800dcac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	605a      	str	r2, [r3, #4]
 800dc5c:	e026      	b.n	800dcac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	68d8      	ldr	r0, [r3, #12]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc66:	461a      	mov	r2, r3
 800dc68:	68b9      	ldr	r1, [r7, #8]
 800dc6a:	f01d fba9 	bl	802b3c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68da      	ldr	r2, [r3, #12]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc76:	425b      	negs	r3, r3
 800dc78:	441a      	add	r2, r3
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	68da      	ldr	r2, [r3, #12]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d207      	bcs.n	800dc9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	689a      	ldr	r2, [r3, #8]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc92:	425b      	negs	r3, r3
 800dc94:	441a      	add	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d105      	bne.n	800dcac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dcb4:	697b      	ldr	r3, [r7, #20]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d018      	beq.n	800dd02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd8:	441a      	add	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d303      	bcc.n	800dcf2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68d9      	ldr	r1, [r3, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f01d fb5f 	bl	802b3c0 <memcpy>
	}
}
 800dd02:	bf00      	nop
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd12:	f001 f9e9 	bl	800f0e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd1e:	e011      	b.n	800dd44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d012      	beq.n	800dd4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3324      	adds	r3, #36	; 0x24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 fcd7 	bl	800e6e0 <xTaskRemoveFromEventList>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd38:	f000 fdb0 	bl	800e89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	dce9      	bgt.n	800dd20 <prvUnlockQueue+0x16>
 800dd4c:	e000      	b.n	800dd50 <prvUnlockQueue+0x46>
					break;
 800dd4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	22ff      	movs	r2, #255	; 0xff
 800dd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd58:	f001 f9f8 	bl	800f14c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd5c:	f001 f9c4 	bl	800f0e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd68:	e011      	b.n	800dd8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d012      	beq.n	800dd98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3310      	adds	r3, #16
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 fcb2 	bl	800e6e0 <xTaskRemoveFromEventList>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd82:	f000 fd8b 	bl	800e89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	dce9      	bgt.n	800dd6a <prvUnlockQueue+0x60>
 800dd96:	e000      	b.n	800dd9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	22ff      	movs	r2, #255	; 0xff
 800dd9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dda2:	f001 f9d3 	bl	800f14c <vPortExitCritical>
}
 800dda6:	bf00      	nop
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb6:	f001 f997 	bl	800f0e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	e001      	b.n	800ddcc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddcc:	f001 f9be 	bl	800f14c <vPortExitCritical>

	return xReturn;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dde2:	f001 f981 	bl	800f0e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d102      	bne.n	800ddf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e001      	b.n	800ddfc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddfc:	f001 f9a6 	bl	800f14c <vPortExitCritical>

	return xReturn;
 800de00:	68fb      	ldr	r3, [r7, #12]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b08e      	sub	sp, #56	; 0x38
 800de0e:	af04      	add	r7, sp, #16
 800de10:	60f8      	str	r0, [r7, #12]
 800de12:	60b9      	str	r1, [r7, #8]
 800de14:	607a      	str	r2, [r7, #4]
 800de16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10b      	bne.n	800de36 <xTaskCreateStatic+0x2c>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	b672      	cpsid	i
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	b662      	cpsie	i
 800de32:	623b      	str	r3, [r7, #32]
 800de34:	e7fe      	b.n	800de34 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10b      	bne.n	800de54 <xTaskCreateStatic+0x4a>
 800de3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de40:	b672      	cpsid	i
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	b662      	cpsie	i
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e7fe      	b.n	800de52 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de54:	2358      	movs	r3, #88	; 0x58
 800de56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2b58      	cmp	r3, #88	; 0x58
 800de5c:	d00b      	beq.n	800de76 <xTaskCreateStatic+0x6c>
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	b672      	cpsid	i
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	b662      	cpsie	i
 800de72:	61bb      	str	r3, [r7, #24]
 800de74:	e7fe      	b.n	800de74 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01e      	beq.n	800debc <xTaskCreateStatic+0xb2>
 800de7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de80:	2b00      	cmp	r3, #0
 800de82:	d01b      	beq.n	800debc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	2202      	movs	r2, #2
 800de92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de96:	2300      	movs	r3, #0
 800de98:	9303      	str	r3, [sp, #12]
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	9302      	str	r3, [sp, #8]
 800de9e:	f107 0314 	add.w	r3, r7, #20
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	68b9      	ldr	r1, [r7, #8]
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 f850 	bl	800df54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deb6:	f000 f8e1 	bl	800e07c <prvAddNewTaskToReadyList>
 800deba:	e001      	b.n	800dec0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800debc:	2300      	movs	r3, #0
 800debe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dec0:	697b      	ldr	r3, [r7, #20]
	}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3728      	adds	r7, #40	; 0x28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800deca:	b580      	push	{r7, lr}
 800decc:	b08c      	sub	sp, #48	; 0x30
 800dece:	af04      	add	r7, sp, #16
 800ded0:	60f8      	str	r0, [r7, #12]
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	603b      	str	r3, [r7, #0]
 800ded6:	4613      	mov	r3, r2
 800ded8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800deda:	88fb      	ldrh	r3, [r7, #6]
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4618      	mov	r0, r3
 800dee0:	f001 fa24 	bl	800f32c <pvPortMalloc>
 800dee4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00e      	beq.n	800df0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800deec:	2058      	movs	r0, #88	; 0x58
 800deee:	f001 fa1d 	bl	800f32c <pvPortMalloc>
 800def2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	631a      	str	r2, [r3, #48]	; 0x30
 800df00:	e005      	b.n	800df0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	f001 fade 	bl	800f4c4 <vPortFree>
 800df08:	e001      	b.n	800df0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d017      	beq.n	800df44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2200      	movs	r2, #0
 800df18:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df1c:	88fa      	ldrh	r2, [r7, #6]
 800df1e:	2300      	movs	r3, #0
 800df20:	9303      	str	r3, [sp, #12]
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	9302      	str	r3, [sp, #8]
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 f80e 	bl	800df54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df38:	69f8      	ldr	r0, [r7, #28]
 800df3a:	f000 f89f 	bl	800e07c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df3e:	2301      	movs	r3, #1
 800df40:	61bb      	str	r3, [r7, #24]
 800df42:	e002      	b.n	800df4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df44:	f04f 33ff 	mov.w	r3, #4294967295
 800df48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df4a:	69bb      	ldr	r3, [r7, #24]
	}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3720      	adds	r7, #32
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	461a      	mov	r2, r3
 800df6c:	21a5      	movs	r1, #165	; 0xa5
 800df6e:	f01d fa32 	bl	802b3d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df76:	6879      	ldr	r1, [r7, #4]
 800df78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df7c:	440b      	add	r3, r1
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	f023 0307 	bic.w	r3, r3, #7
 800df8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	f003 0307 	and.w	r3, r3, #7
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00b      	beq.n	800dfae <prvInitialiseNewTask+0x5a>
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	b672      	cpsid	i
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	b662      	cpsie	i
 800dfaa:	617b      	str	r3, [r7, #20]
 800dfac:	e7fe      	b.n	800dfac <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d01f      	beq.n	800dff4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	61fb      	str	r3, [r7, #28]
 800dfb8:	e012      	b.n	800dfe0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	7819      	ldrb	r1, [r3, #0]
 800dfc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	3334      	adds	r3, #52	; 0x34
 800dfca:	460a      	mov	r2, r1
 800dfcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d006      	beq.n	800dfe8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	61fb      	str	r3, [r7, #28]
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	2b0f      	cmp	r3, #15
 800dfe4:	d9e9      	bls.n	800dfba <prvInitialiseNewTask+0x66>
 800dfe6:	e000      	b.n	800dfea <prvInitialiseNewTask+0x96>
			{
				break;
 800dfe8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dff2:	e003      	b.n	800dffc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	2200      	movs	r2, #0
 800dff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	2b06      	cmp	r3, #6
 800e000:	d901      	bls.n	800e006 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e002:	2306      	movs	r3, #6
 800e004:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e00a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e010:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	2200      	movs	r2, #0
 800e016:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	3304      	adds	r3, #4
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fe ff4b 	bl	800ceb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	3318      	adds	r3, #24
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe ff46 	bl	800ceb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e030:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	f1c3 0207 	rsb	r2, r3, #7
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e040:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e044:	2200      	movs	r2, #0
 800e046:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04a:	2200      	movs	r2, #0
 800e04c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	2200      	movs	r2, #0
 800e052:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	68f9      	ldr	r1, [r7, #12]
 800e05a:	69b8      	ldr	r0, [r7, #24]
 800e05c:	f000 ff3c 	bl	800eed8 <pxPortInitialiseStack>
 800e060:	4602      	mov	r2, r0
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e072:	bf00      	nop
 800e074:	3720      	adds	r7, #32
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
	...

0800e07c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e084:	f001 f830 	bl	800f0e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e088:	4b2a      	ldr	r3, [pc, #168]	; (800e134 <prvAddNewTaskToReadyList+0xb8>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	4a29      	ldr	r2, [pc, #164]	; (800e134 <prvAddNewTaskToReadyList+0xb8>)
 800e090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e092:	4b29      	ldr	r3, [pc, #164]	; (800e138 <prvAddNewTaskToReadyList+0xbc>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d109      	bne.n	800e0ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e09a:	4a27      	ldr	r2, [pc, #156]	; (800e138 <prvAddNewTaskToReadyList+0xbc>)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0a0:	4b24      	ldr	r3, [pc, #144]	; (800e134 <prvAddNewTaskToReadyList+0xb8>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d110      	bne.n	800e0ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0a8:	f000 fc1e 	bl	800e8e8 <prvInitialiseTaskLists>
 800e0ac:	e00d      	b.n	800e0ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0ae:	4b23      	ldr	r3, [pc, #140]	; (800e13c <prvAddNewTaskToReadyList+0xc0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d109      	bne.n	800e0ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0b6:	4b20      	ldr	r3, [pc, #128]	; (800e138 <prvAddNewTaskToReadyList+0xbc>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d802      	bhi.n	800e0ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0c4:	4a1c      	ldr	r2, [pc, #112]	; (800e138 <prvAddNewTaskToReadyList+0xbc>)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0ca:	4b1d      	ldr	r3, [pc, #116]	; (800e140 <prvAddNewTaskToReadyList+0xc4>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	4a1b      	ldr	r2, [pc, #108]	; (800e140 <prvAddNewTaskToReadyList+0xc4>)
 800e0d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d8:	2201      	movs	r2, #1
 800e0da:	409a      	lsls	r2, r3
 800e0dc:	4b19      	ldr	r3, [pc, #100]	; (800e144 <prvAddNewTaskToReadyList+0xc8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	4a18      	ldr	r2, [pc, #96]	; (800e144 <prvAddNewTaskToReadyList+0xc8>)
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4a15      	ldr	r2, [pc, #84]	; (800e148 <prvAddNewTaskToReadyList+0xcc>)
 800e0f4:	441a      	add	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	f7fe fee8 	bl	800ced2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e102:	f001 f823 	bl	800f14c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e106:	4b0d      	ldr	r3, [pc, #52]	; (800e13c <prvAddNewTaskToReadyList+0xc0>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00e      	beq.n	800e12c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e10e:	4b0a      	ldr	r3, [pc, #40]	; (800e138 <prvAddNewTaskToReadyList+0xbc>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e118:	429a      	cmp	r2, r3
 800e11a:	d207      	bcs.n	800e12c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e11c:	4b0b      	ldr	r3, [pc, #44]	; (800e14c <prvAddNewTaskToReadyList+0xd0>)
 800e11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	20000500 	.word	0x20000500
 800e138:	20000400 	.word	0x20000400
 800e13c:	2000050c 	.word	0x2000050c
 800e140:	2000051c 	.word	0x2000051c
 800e144:	20000508 	.word	0x20000508
 800e148:	20000404 	.word	0x20000404
 800e14c:	e000ed04 	.word	0xe000ed04

0800e150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e158:	2300      	movs	r3, #0
 800e15a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d018      	beq.n	800e194 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e162:	4b14      	ldr	r3, [pc, #80]	; (800e1b4 <vTaskDelay+0x64>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00b      	beq.n	800e182 <vTaskDelay+0x32>
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	b672      	cpsid	i
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	b662      	cpsie	i
 800e17e:	60bb      	str	r3, [r7, #8]
 800e180:	e7fe      	b.n	800e180 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e182:	f000 f87d 	bl	800e280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e186:	2100      	movs	r1, #0
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fe3f 	bl	800ee0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e18e:	f000 f885 	bl	800e29c <xTaskResumeAll>
 800e192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d107      	bne.n	800e1aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e19a:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <vTaskDelay+0x68>)
 800e19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20000528 	.word	0x20000528
 800e1b8:	e000ed04 	.word	0xe000ed04

0800e1bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1ca:	463a      	mov	r2, r7
 800e1cc:	1d39      	adds	r1, r7, #4
 800e1ce:	f107 0308 	add.w	r3, r7, #8
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7f2 fc9a 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	9202      	str	r2, [sp, #8]
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	460a      	mov	r2, r1
 800e1ea:	491f      	ldr	r1, [pc, #124]	; (800e268 <vTaskStartScheduler+0xac>)
 800e1ec:	481f      	ldr	r0, [pc, #124]	; (800e26c <vTaskStartScheduler+0xb0>)
 800e1ee:	f7ff fe0c 	bl	800de0a <xTaskCreateStatic>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <vTaskStartScheduler+0xb4>)
 800e1f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	; (800e270 <vTaskStartScheduler+0xb4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e200:	2301      	movs	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
 800e204:	e001      	b.n	800e20a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e206:	2300      	movs	r3, #0
 800e208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d117      	bne.n	800e240 <vTaskStartScheduler+0x84>
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e226:	4b13      	ldr	r3, [pc, #76]	; (800e274 <vTaskStartScheduler+0xb8>)
 800e228:	f04f 32ff 	mov.w	r2, #4294967295
 800e22c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e22e:	4b12      	ldr	r3, [pc, #72]	; (800e278 <vTaskStartScheduler+0xbc>)
 800e230:	2201      	movs	r2, #1
 800e232:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e234:	4b11      	ldr	r3, [pc, #68]	; (800e27c <vTaskStartScheduler+0xc0>)
 800e236:	2200      	movs	r2, #0
 800e238:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e23a:	f000 fed9 	bl	800eff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e23e:	e00f      	b.n	800e260 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d10b      	bne.n	800e260 <vTaskStartScheduler+0xa4>
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	b672      	cpsid	i
 800e24e:	f383 8811 	msr	BASEPRI, r3
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	f3bf 8f4f 	dsb	sy
 800e25a:	b662      	cpsie	i
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e7fe      	b.n	800e25e <vTaskStartScheduler+0xa2>
}
 800e260:	bf00      	nop
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	0802c370 	.word	0x0802c370
 800e26c:	0800e8b5 	.word	0x0800e8b5
 800e270:	20000524 	.word	0x20000524
 800e274:	20000520 	.word	0x20000520
 800e278:	2000050c 	.word	0x2000050c
 800e27c:	20000504 	.word	0x20000504

0800e280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e280:	b480      	push	{r7}
 800e282:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e284:	4b04      	ldr	r3, [pc, #16]	; (800e298 <vTaskSuspendAll+0x18>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3301      	adds	r3, #1
 800e28a:	4a03      	ldr	r2, [pc, #12]	; (800e298 <vTaskSuspendAll+0x18>)
 800e28c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e28e:	bf00      	nop
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	20000528 	.word	0x20000528

0800e29c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2aa:	4b42      	ldr	r3, [pc, #264]	; (800e3b4 <xTaskResumeAll+0x118>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10b      	bne.n	800e2ca <xTaskResumeAll+0x2e>
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	b672      	cpsid	i
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	b662      	cpsie	i
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	e7fe      	b.n	800e2c8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2ca:	f000 ff0d 	bl	800f0e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2ce:	4b39      	ldr	r3, [pc, #228]	; (800e3b4 <xTaskResumeAll+0x118>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	4a37      	ldr	r2, [pc, #220]	; (800e3b4 <xTaskResumeAll+0x118>)
 800e2d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2d8:	4b36      	ldr	r3, [pc, #216]	; (800e3b4 <xTaskResumeAll+0x118>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d161      	bne.n	800e3a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2e0:	4b35      	ldr	r3, [pc, #212]	; (800e3b8 <xTaskResumeAll+0x11c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d05d      	beq.n	800e3a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2e8:	e02e      	b.n	800e348 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ea:	4b34      	ldr	r3, [pc, #208]	; (800e3bc <xTaskResumeAll+0x120>)
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3318      	adds	r3, #24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe fe48 	bl	800cf8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3304      	adds	r3, #4
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fe43 	bl	800cf8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30a:	2201      	movs	r2, #1
 800e30c:	409a      	lsls	r2, r3
 800e30e:	4b2c      	ldr	r3, [pc, #176]	; (800e3c0 <xTaskResumeAll+0x124>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4313      	orrs	r3, r2
 800e314:	4a2a      	ldr	r2, [pc, #168]	; (800e3c0 <xTaskResumeAll+0x124>)
 800e316:	6013      	str	r3, [r2, #0]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4a27      	ldr	r2, [pc, #156]	; (800e3c4 <xTaskResumeAll+0x128>)
 800e326:	441a      	add	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3304      	adds	r3, #4
 800e32c:	4619      	mov	r1, r3
 800e32e:	4610      	mov	r0, r2
 800e330:	f7fe fdcf 	bl	800ced2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e338:	4b23      	ldr	r3, [pc, #140]	; (800e3c8 <xTaskResumeAll+0x12c>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	429a      	cmp	r2, r3
 800e340:	d302      	bcc.n	800e348 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e342:	4b22      	ldr	r3, [pc, #136]	; (800e3cc <xTaskResumeAll+0x130>)
 800e344:	2201      	movs	r2, #1
 800e346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e348:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <xTaskResumeAll+0x120>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1cc      	bne.n	800e2ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e356:	f000 fb63 	bl	800ea20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e35a:	4b1d      	ldr	r3, [pc, #116]	; (800e3d0 <xTaskResumeAll+0x134>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d010      	beq.n	800e388 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e366:	f000 f859 	bl	800e41c <xTaskIncrementTick>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e370:	4b16      	ldr	r3, [pc, #88]	; (800e3cc <xTaskResumeAll+0x130>)
 800e372:	2201      	movs	r2, #1
 800e374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3b01      	subs	r3, #1
 800e37a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1f1      	bne.n	800e366 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e382:	4b13      	ldr	r3, [pc, #76]	; (800e3d0 <xTaskResumeAll+0x134>)
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <xTaskResumeAll+0x130>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d009      	beq.n	800e3a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e390:	2301      	movs	r3, #1
 800e392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e394:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <xTaskResumeAll+0x138>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3a4:	f000 fed2 	bl	800f14c <vPortExitCritical>

	return xAlreadyYielded;
 800e3a8:	68bb      	ldr	r3, [r7, #8]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20000528 	.word	0x20000528
 800e3b8:	20000500 	.word	0x20000500
 800e3bc:	200004c0 	.word	0x200004c0
 800e3c0:	20000508 	.word	0x20000508
 800e3c4:	20000404 	.word	0x20000404
 800e3c8:	20000400 	.word	0x20000400
 800e3cc:	20000514 	.word	0x20000514
 800e3d0:	20000510 	.word	0x20000510
 800e3d4:	e000ed04 	.word	0xe000ed04

0800e3d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3de:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <xTaskGetTickCount+0x1c>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3e4:	687b      	ldr	r3, [r7, #4]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	20000504 	.word	0x20000504

0800e3f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3fe:	f000 ff53 	bl	800f2a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e402:	2300      	movs	r3, #0
 800e404:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e406:	4b04      	ldr	r3, [pc, #16]	; (800e418 <xTaskGetTickCountFromISR+0x20>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e40c:	683b      	ldr	r3, [r7, #0]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20000504 	.word	0x20000504

0800e41c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e422:	2300      	movs	r3, #0
 800e424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e426:	4b4f      	ldr	r3, [pc, #316]	; (800e564 <xTaskIncrementTick+0x148>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f040 8089 	bne.w	800e542 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e430:	4b4d      	ldr	r3, [pc, #308]	; (800e568 <xTaskIncrementTick+0x14c>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3301      	adds	r3, #1
 800e436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e438:	4a4b      	ldr	r2, [pc, #300]	; (800e568 <xTaskIncrementTick+0x14c>)
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d121      	bne.n	800e488 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e444:	4b49      	ldr	r3, [pc, #292]	; (800e56c <xTaskIncrementTick+0x150>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00b      	beq.n	800e466 <xTaskIncrementTick+0x4a>
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	b672      	cpsid	i
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	b662      	cpsie	i
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	e7fe      	b.n	800e464 <xTaskIncrementTick+0x48>
 800e466:	4b41      	ldr	r3, [pc, #260]	; (800e56c <xTaskIncrementTick+0x150>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	4b40      	ldr	r3, [pc, #256]	; (800e570 <xTaskIncrementTick+0x154>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a3e      	ldr	r2, [pc, #248]	; (800e56c <xTaskIncrementTick+0x150>)
 800e472:	6013      	str	r3, [r2, #0]
 800e474:	4a3e      	ldr	r2, [pc, #248]	; (800e570 <xTaskIncrementTick+0x154>)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	4b3e      	ldr	r3, [pc, #248]	; (800e574 <xTaskIncrementTick+0x158>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3301      	adds	r3, #1
 800e480:	4a3c      	ldr	r2, [pc, #240]	; (800e574 <xTaskIncrementTick+0x158>)
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	f000 facc 	bl	800ea20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e488:	4b3b      	ldr	r3, [pc, #236]	; (800e578 <xTaskIncrementTick+0x15c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d348      	bcc.n	800e524 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e492:	4b36      	ldr	r3, [pc, #216]	; (800e56c <xTaskIncrementTick+0x150>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d104      	bne.n	800e4a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e49c:	4b36      	ldr	r3, [pc, #216]	; (800e578 <xTaskIncrementTick+0x15c>)
 800e49e:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a2:	601a      	str	r2, [r3, #0]
					break;
 800e4a4:	e03e      	b.n	800e524 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4a6:	4b31      	ldr	r3, [pc, #196]	; (800e56c <xTaskIncrementTick+0x150>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d203      	bcs.n	800e4c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4be:	4a2e      	ldr	r2, [pc, #184]	; (800e578 <xTaskIncrementTick+0x15c>)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4c4:	e02e      	b.n	800e524 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fd5e 	bl	800cf8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d004      	beq.n	800e4e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	3318      	adds	r3, #24
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe fd55 	bl	800cf8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	409a      	lsls	r2, r3
 800e4ea:	4b24      	ldr	r3, [pc, #144]	; (800e57c <xTaskIncrementTick+0x160>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	4a22      	ldr	r2, [pc, #136]	; (800e57c <xTaskIncrementTick+0x160>)
 800e4f2:	6013      	str	r3, [r2, #0]
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4a1f      	ldr	r2, [pc, #124]	; (800e580 <xTaskIncrementTick+0x164>)
 800e502:	441a      	add	r2, r3
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	3304      	adds	r3, #4
 800e508:	4619      	mov	r1, r3
 800e50a:	4610      	mov	r0, r2
 800e50c:	f7fe fce1 	bl	800ced2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	4b1b      	ldr	r3, [pc, #108]	; (800e584 <xTaskIncrementTick+0x168>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d3b9      	bcc.n	800e492 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e51e:	2301      	movs	r3, #1
 800e520:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e522:	e7b6      	b.n	800e492 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e524:	4b17      	ldr	r3, [pc, #92]	; (800e584 <xTaskIncrementTick+0x168>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52a:	4915      	ldr	r1, [pc, #84]	; (800e580 <xTaskIncrementTick+0x164>)
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	440b      	add	r3, r1
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d907      	bls.n	800e54c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e53c:	2301      	movs	r3, #1
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	e004      	b.n	800e54c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e542:	4b11      	ldr	r3, [pc, #68]	; (800e588 <xTaskIncrementTick+0x16c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	4a0f      	ldr	r2, [pc, #60]	; (800e588 <xTaskIncrementTick+0x16c>)
 800e54a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <xTaskIncrementTick+0x170>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e554:	2301      	movs	r3, #1
 800e556:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e558:	697b      	ldr	r3, [r7, #20]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	20000528 	.word	0x20000528
 800e568:	20000504 	.word	0x20000504
 800e56c:	200004b8 	.word	0x200004b8
 800e570:	200004bc 	.word	0x200004bc
 800e574:	20000518 	.word	0x20000518
 800e578:	20000520 	.word	0x20000520
 800e57c:	20000508 	.word	0x20000508
 800e580:	20000404 	.word	0x20000404
 800e584:	20000400 	.word	0x20000400
 800e588:	20000510 	.word	0x20000510
 800e58c:	20000514 	.word	0x20000514

0800e590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e596:	4b3a      	ldr	r3, [pc, #232]	; (800e680 <vTaskSwitchContext+0xf0>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e59e:	4b39      	ldr	r3, [pc, #228]	; (800e684 <vTaskSwitchContext+0xf4>)
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5a4:	e067      	b.n	800e676 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e5a6:	4b37      	ldr	r3, [pc, #220]	; (800e684 <vTaskSwitchContext+0xf4>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e5ac:	4b36      	ldr	r3, [pc, #216]	; (800e688 <vTaskSwitchContext+0xf8>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b2:	61fb      	str	r3, [r7, #28]
 800e5b4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e5b8:	61bb      	str	r3, [r7, #24]
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	69ba      	ldr	r2, [r7, #24]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d111      	bne.n	800e5e8 <vTaskSwitchContext+0x58>
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d10b      	bne.n	800e5e8 <vTaskSwitchContext+0x58>
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	3308      	adds	r3, #8
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d105      	bne.n	800e5e8 <vTaskSwitchContext+0x58>
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	330c      	adds	r3, #12
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d008      	beq.n	800e5fa <vTaskSwitchContext+0x6a>
 800e5e8:	4b27      	ldr	r3, [pc, #156]	; (800e688 <vTaskSwitchContext+0xf8>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	4b26      	ldr	r3, [pc, #152]	; (800e688 <vTaskSwitchContext+0xf8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3334      	adds	r3, #52	; 0x34
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7f2 fa76 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fa:	4b24      	ldr	r3, [pc, #144]	; (800e68c <vTaskSwitchContext+0xfc>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	fab3 f383 	clz	r3, r3
 800e606:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e608:	7afb      	ldrb	r3, [r7, #11]
 800e60a:	f1c3 031f 	rsb	r3, r3, #31
 800e60e:	617b      	str	r3, [r7, #20]
 800e610:	491f      	ldr	r1, [pc, #124]	; (800e690 <vTaskSwitchContext+0x100>)
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	4613      	mov	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	440b      	add	r3, r1
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10b      	bne.n	800e63c <vTaskSwitchContext+0xac>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	b672      	cpsid	i
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	b662      	cpsie	i
 800e638:	607b      	str	r3, [r7, #4]
 800e63a:	e7fe      	b.n	800e63a <vTaskSwitchContext+0xaa>
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4a12      	ldr	r2, [pc, #72]	; (800e690 <vTaskSwitchContext+0x100>)
 800e648:	4413      	add	r3, r2
 800e64a:	613b      	str	r3, [r7, #16]
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	605a      	str	r2, [r3, #4]
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	685a      	ldr	r2, [r3, #4]
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	3308      	adds	r3, #8
 800e65e:	429a      	cmp	r2, r3
 800e660:	d104      	bne.n	800e66c <vTaskSwitchContext+0xdc>
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	605a      	str	r2, [r3, #4]
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	4a05      	ldr	r2, [pc, #20]	; (800e688 <vTaskSwitchContext+0xf8>)
 800e674:	6013      	str	r3, [r2, #0]
}
 800e676:	bf00      	nop
 800e678:	3720      	adds	r7, #32
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	20000528 	.word	0x20000528
 800e684:	20000514 	.word	0x20000514
 800e688:	20000400 	.word	0x20000400
 800e68c:	20000508 	.word	0x20000508
 800e690:	20000404 	.word	0x20000404

0800e694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10b      	bne.n	800e6bc <vTaskPlaceOnEventList+0x28>
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	b672      	cpsid	i
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	b662      	cpsie	i
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	e7fe      	b.n	800e6ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6bc:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <vTaskPlaceOnEventList+0x48>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3318      	adds	r3, #24
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7fe fc28 	bl	800cf1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6ca:	2101      	movs	r1, #1
 800e6cc:	6838      	ldr	r0, [r7, #0]
 800e6ce:	f000 fb9d 	bl	800ee0c <prvAddCurrentTaskToDelayedList>
}
 800e6d2:	bf00      	nop
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20000400 	.word	0x20000400

0800e6e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10b      	bne.n	800e70e <xTaskRemoveFromEventList+0x2e>
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	b672      	cpsid	i
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	b662      	cpsie	i
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e7fe      	b.n	800e70c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3318      	adds	r3, #24
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fc3a 	bl	800cf8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e718:	4b1d      	ldr	r3, [pc, #116]	; (800e790 <xTaskRemoveFromEventList+0xb0>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d11c      	bne.n	800e75a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	3304      	adds	r3, #4
 800e724:	4618      	mov	r0, r3
 800e726:	f7fe fc31 	bl	800cf8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	2201      	movs	r2, #1
 800e730:	409a      	lsls	r2, r3
 800e732:	4b18      	ldr	r3, [pc, #96]	; (800e794 <xTaskRemoveFromEventList+0xb4>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4313      	orrs	r3, r2
 800e738:	4a16      	ldr	r2, [pc, #88]	; (800e794 <xTaskRemoveFromEventList+0xb4>)
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e740:	4613      	mov	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4a13      	ldr	r2, [pc, #76]	; (800e798 <xTaskRemoveFromEventList+0xb8>)
 800e74a:	441a      	add	r2, r3
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	3304      	adds	r3, #4
 800e750:	4619      	mov	r1, r3
 800e752:	4610      	mov	r0, r2
 800e754:	f7fe fbbd 	bl	800ced2 <vListInsertEnd>
 800e758:	e005      	b.n	800e766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	3318      	adds	r3, #24
 800e75e:	4619      	mov	r1, r3
 800e760:	480e      	ldr	r0, [pc, #56]	; (800e79c <xTaskRemoveFromEventList+0xbc>)
 800e762:	f7fe fbb6 	bl	800ced2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76a:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <xTaskRemoveFromEventList+0xc0>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e770:	429a      	cmp	r2, r3
 800e772:	d905      	bls.n	800e780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e774:	2301      	movs	r3, #1
 800e776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <xTaskRemoveFromEventList+0xc4>)
 800e77a:	2201      	movs	r2, #1
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	e001      	b.n	800e784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e780:	2300      	movs	r3, #0
 800e782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e784:	697b      	ldr	r3, [r7, #20]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20000528 	.word	0x20000528
 800e794:	20000508 	.word	0x20000508
 800e798:	20000404 	.word	0x20000404
 800e79c:	200004c0 	.word	0x200004c0
 800e7a0:	20000400 	.word	0x20000400
 800e7a4:	20000514 	.word	0x20000514

0800e7a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7b0:	4b06      	ldr	r3, [pc, #24]	; (800e7cc <vTaskInternalSetTimeOutState+0x24>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <vTaskInternalSetTimeOutState+0x28>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	605a      	str	r2, [r3, #4]
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20000518 	.word	0x20000518
 800e7d0:	20000504 	.word	0x20000504

0800e7d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10b      	bne.n	800e7fc <xTaskCheckForTimeOut+0x28>
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	b672      	cpsid	i
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	b662      	cpsie	i
 800e7f8:	613b      	str	r3, [r7, #16]
 800e7fa:	e7fe      	b.n	800e7fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10b      	bne.n	800e81a <xTaskCheckForTimeOut+0x46>
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	b672      	cpsid	i
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	b662      	cpsie	i
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	e7fe      	b.n	800e818 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e81a:	f000 fc65 	bl	800f0e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e81e:	4b1d      	ldr	r3, [pc, #116]	; (800e894 <xTaskCheckForTimeOut+0xc0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e836:	d102      	bne.n	800e83e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e838:	2300      	movs	r3, #0
 800e83a:	61fb      	str	r3, [r7, #28]
 800e83c:	e023      	b.n	800e886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	4b15      	ldr	r3, [pc, #84]	; (800e898 <xTaskCheckForTimeOut+0xc4>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	429a      	cmp	r2, r3
 800e848:	d007      	beq.n	800e85a <xTaskCheckForTimeOut+0x86>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	429a      	cmp	r2, r3
 800e852:	d302      	bcc.n	800e85a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e854:	2301      	movs	r3, #1
 800e856:	61fb      	str	r3, [r7, #28]
 800e858:	e015      	b.n	800e886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	697a      	ldr	r2, [r7, #20]
 800e860:	429a      	cmp	r2, r3
 800e862:	d20b      	bcs.n	800e87c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	1ad2      	subs	r2, r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7ff ff99 	bl	800e7a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
 800e87a:	e004      	b.n	800e886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2200      	movs	r2, #0
 800e880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e882:	2301      	movs	r3, #1
 800e884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e886:	f000 fc61 	bl	800f14c <vPortExitCritical>

	return xReturn;
 800e88a:	69fb      	ldr	r3, [r7, #28]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20000504 	.word	0x20000504
 800e898:	20000518 	.word	0x20000518

0800e89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e89c:	b480      	push	{r7}
 800e89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8a0:	4b03      	ldr	r3, [pc, #12]	; (800e8b0 <vTaskMissedYield+0x14>)
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	601a      	str	r2, [r3, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	20000514 	.word	0x20000514

0800e8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8bc:	f000 f854 	bl	800e968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <prvIdleTask+0x2c>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d907      	bls.n	800e8d8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e8c8:	4b06      	ldr	r3, [pc, #24]	; (800e8e4 <prvIdleTask+0x30>)
 800e8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e8d8:	f7f2 f8fe 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e8dc:	e7ee      	b.n	800e8bc <prvIdleTask+0x8>
 800e8de:	bf00      	nop
 800e8e0:	20000404 	.word	0x20000404
 800e8e4:	e000ed04 	.word	0xe000ed04

0800e8e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	607b      	str	r3, [r7, #4]
 800e8f2:	e00c      	b.n	800e90e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	4a12      	ldr	r2, [pc, #72]	; (800e948 <prvInitialiseTaskLists+0x60>)
 800e900:	4413      	add	r3, r2
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fab8 	bl	800ce78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3301      	adds	r3, #1
 800e90c:	607b      	str	r3, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b06      	cmp	r3, #6
 800e912:	d9ef      	bls.n	800e8f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e914:	480d      	ldr	r0, [pc, #52]	; (800e94c <prvInitialiseTaskLists+0x64>)
 800e916:	f7fe faaf 	bl	800ce78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e91a:	480d      	ldr	r0, [pc, #52]	; (800e950 <prvInitialiseTaskLists+0x68>)
 800e91c:	f7fe faac 	bl	800ce78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e920:	480c      	ldr	r0, [pc, #48]	; (800e954 <prvInitialiseTaskLists+0x6c>)
 800e922:	f7fe faa9 	bl	800ce78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e926:	480c      	ldr	r0, [pc, #48]	; (800e958 <prvInitialiseTaskLists+0x70>)
 800e928:	f7fe faa6 	bl	800ce78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e92c:	480b      	ldr	r0, [pc, #44]	; (800e95c <prvInitialiseTaskLists+0x74>)
 800e92e:	f7fe faa3 	bl	800ce78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e932:	4b0b      	ldr	r3, [pc, #44]	; (800e960 <prvInitialiseTaskLists+0x78>)
 800e934:	4a05      	ldr	r2, [pc, #20]	; (800e94c <prvInitialiseTaskLists+0x64>)
 800e936:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e938:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <prvInitialiseTaskLists+0x7c>)
 800e93a:	4a05      	ldr	r2, [pc, #20]	; (800e950 <prvInitialiseTaskLists+0x68>)
 800e93c:	601a      	str	r2, [r3, #0]
}
 800e93e:	bf00      	nop
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	20000404 	.word	0x20000404
 800e94c:	20000490 	.word	0x20000490
 800e950:	200004a4 	.word	0x200004a4
 800e954:	200004c0 	.word	0x200004c0
 800e958:	200004d4 	.word	0x200004d4
 800e95c:	200004ec 	.word	0x200004ec
 800e960:	200004b8 	.word	0x200004b8
 800e964:	200004bc 	.word	0x200004bc

0800e968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e96e:	e019      	b.n	800e9a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e970:	f000 fbba 	bl	800f0e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e974:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <prvCheckTasksWaitingTermination+0x4c>)
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3304      	adds	r3, #4
 800e980:	4618      	mov	r0, r3
 800e982:	f7fe fb03 	bl	800cf8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e986:	4b0c      	ldr	r3, [pc, #48]	; (800e9b8 <prvCheckTasksWaitingTermination+0x50>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	4a0a      	ldr	r2, [pc, #40]	; (800e9b8 <prvCheckTasksWaitingTermination+0x50>)
 800e98e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e990:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <prvCheckTasksWaitingTermination+0x54>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	3b01      	subs	r3, #1
 800e996:	4a09      	ldr	r2, [pc, #36]	; (800e9bc <prvCheckTasksWaitingTermination+0x54>)
 800e998:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e99a:	f000 fbd7 	bl	800f14c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f80e 	bl	800e9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9a4:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <prvCheckTasksWaitingTermination+0x54>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1e1      	bne.n	800e970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9ac:	bf00      	nop
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	200004d4 	.word	0x200004d4
 800e9b8:	20000500 	.word	0x20000500
 800e9bc:	200004e8 	.word	0x200004e8

0800e9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d108      	bne.n	800e9e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fd74 	bl	800f4c4 <vPortFree>
				vPortFree( pxTCB );
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 fd71 	bl	800f4c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9e2:	e019      	b.n	800ea18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d103      	bne.n	800e9f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fd68 	bl	800f4c4 <vPortFree>
	}
 800e9f4:	e010      	b.n	800ea18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d00b      	beq.n	800ea18 <prvDeleteTCB+0x58>
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	b672      	cpsid	i
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	b662      	cpsie	i
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e7fe      	b.n	800ea16 <prvDeleteTCB+0x56>
	}
 800ea18:	bf00      	nop
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea26:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <prvResetNextTaskUnblockTime+0x38>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d104      	bne.n	800ea3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <prvResetNextTaskUnblockTime+0x3c>)
 800ea32:	f04f 32ff 	mov.w	r2, #4294967295
 800ea36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea38:	e008      	b.n	800ea4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea3a:	4b07      	ldr	r3, [pc, #28]	; (800ea58 <prvResetNextTaskUnblockTime+0x38>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	4a04      	ldr	r2, [pc, #16]	; (800ea5c <prvResetNextTaskUnblockTime+0x3c>)
 800ea4a:	6013      	str	r3, [r2, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	200004b8 	.word	0x200004b8
 800ea5c:	20000520 	.word	0x20000520

0800ea60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea66:	4b0b      	ldr	r3, [pc, #44]	; (800ea94 <xTaskGetSchedulerState+0x34>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	607b      	str	r3, [r7, #4]
 800ea72:	e008      	b.n	800ea86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea74:	4b08      	ldr	r3, [pc, #32]	; (800ea98 <xTaskGetSchedulerState+0x38>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d102      	bne.n	800ea82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	607b      	str	r3, [r7, #4]
 800ea80:	e001      	b.n	800ea86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea82:	2300      	movs	r3, #0
 800ea84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea86:	687b      	ldr	r3, [r7, #4]
	}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	2000050c 	.word	0x2000050c
 800ea98:	20000528 	.word	0x20000528

0800ea9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d069      	beq.n	800eb86 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab6:	4b36      	ldr	r3, [pc, #216]	; (800eb90 <xTaskPriorityInherit+0xf4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d259      	bcs.n	800eb74 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	db06      	blt.n	800ead6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac8:	4b31      	ldr	r3, [pc, #196]	; (800eb90 <xTaskPriorityInherit+0xf4>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	f1c3 0207 	rsb	r2, r3, #7
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	6959      	ldr	r1, [r3, #20]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4a2b      	ldr	r2, [pc, #172]	; (800eb94 <xTaskPriorityInherit+0xf8>)
 800eae8:	4413      	add	r3, r2
 800eaea:	4299      	cmp	r1, r3
 800eaec:	d13a      	bne.n	800eb64 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe fa4a 	bl	800cf8c <uxListRemove>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d115      	bne.n	800eb2a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb02:	4924      	ldr	r1, [pc, #144]	; (800eb94 <xTaskPriorityInherit+0xf8>)
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	440b      	add	r3, r1
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10a      	bne.n	800eb2a <xTaskPriorityInherit+0x8e>
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	2201      	movs	r2, #1
 800eb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1e:	43da      	mvns	r2, r3
 800eb20:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <xTaskPriorityInherit+0xfc>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4013      	ands	r3, r2
 800eb26:	4a1c      	ldr	r2, [pc, #112]	; (800eb98 <xTaskPriorityInherit+0xfc>)
 800eb28:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb2a:	4b19      	ldr	r3, [pc, #100]	; (800eb90 <xTaskPriorityInherit+0xf4>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb38:	2201      	movs	r2, #1
 800eb3a:	409a      	lsls	r2, r3
 800eb3c:	4b16      	ldr	r3, [pc, #88]	; (800eb98 <xTaskPriorityInherit+0xfc>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	4a15      	ldr	r2, [pc, #84]	; (800eb98 <xTaskPriorityInherit+0xfc>)
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4a10      	ldr	r2, [pc, #64]	; (800eb94 <xTaskPriorityInherit+0xf8>)
 800eb54:	441a      	add	r2, r3
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7fe f9b8 	bl	800ced2 <vListInsertEnd>
 800eb62:	e004      	b.n	800eb6e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb64:	4b0a      	ldr	r3, [pc, #40]	; (800eb90 <xTaskPriorityInherit+0xf4>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	e008      	b.n	800eb86 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb78:	4b05      	ldr	r3, [pc, #20]	; (800eb90 <xTaskPriorityInherit+0xf4>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d201      	bcs.n	800eb86 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb82:	2301      	movs	r3, #1
 800eb84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb86:	68fb      	ldr	r3, [r7, #12]
	}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20000400 	.word	0x20000400
 800eb94:	20000404 	.word	0x20000404
 800eb98:	20000508 	.word	0x20000508

0800eb9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d070      	beq.n	800ec94 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebb2:	4b3b      	ldr	r3, [pc, #236]	; (800eca0 <xTaskPriorityDisinherit+0x104>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	693a      	ldr	r2, [r7, #16]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d00b      	beq.n	800ebd4 <xTaskPriorityDisinherit+0x38>
 800ebbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc0:	b672      	cpsid	i
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	b662      	cpsie	i
 800ebd0:	60fb      	str	r3, [r7, #12]
 800ebd2:	e7fe      	b.n	800ebd2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10b      	bne.n	800ebf4 <xTaskPriorityDisinherit+0x58>
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	b672      	cpsid	i
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	b662      	cpsie	i
 800ebf0:	60bb      	str	r3, [r7, #8]
 800ebf2:	e7fe      	b.n	800ebf2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf8:	1e5a      	subs	r2, r3, #1
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d044      	beq.n	800ec94 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d140      	bne.n	800ec94 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	3304      	adds	r3, #4
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe f9b8 	bl	800cf8c <uxListRemove>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d115      	bne.n	800ec4e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec26:	491f      	ldr	r1, [pc, #124]	; (800eca4 <xTaskPriorityDisinherit+0x108>)
 800ec28:	4613      	mov	r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	4413      	add	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	440b      	add	r3, r1
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10a      	bne.n	800ec4e <xTaskPriorityDisinherit+0xb2>
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec42:	43da      	mvns	r2, r3
 800ec44:	4b18      	ldr	r3, [pc, #96]	; (800eca8 <xTaskPriorityDisinherit+0x10c>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4013      	ands	r3, r2
 800ec4a:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <xTaskPriorityDisinherit+0x10c>)
 800ec4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	f1c3 0207 	rsb	r2, r3, #7
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec66:	2201      	movs	r2, #1
 800ec68:	409a      	lsls	r2, r3
 800ec6a:	4b0f      	ldr	r3, [pc, #60]	; (800eca8 <xTaskPriorityDisinherit+0x10c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	4a0d      	ldr	r2, [pc, #52]	; (800eca8 <xTaskPriorityDisinherit+0x10c>)
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec78:	4613      	mov	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4413      	add	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4a08      	ldr	r2, [pc, #32]	; (800eca4 <xTaskPriorityDisinherit+0x108>)
 800ec82:	441a      	add	r2, r3
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	3304      	adds	r3, #4
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	f7fe f921 	bl	800ced2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec90:	2301      	movs	r3, #1
 800ec92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec94:	697b      	ldr	r3, [r7, #20]
	}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	20000400 	.word	0x20000400
 800eca4:	20000404 	.word	0x20000404
 800eca8:	20000508 	.word	0x20000508

0800ecac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b088      	sub	sp, #32
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 8085 	beq.w	800edd0 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10b      	bne.n	800ece6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	b672      	cpsid	i
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	b662      	cpsie	i
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	e7fe      	b.n	800ece4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d902      	bls.n	800ecf6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	61fb      	str	r3, [r7, #28]
 800ecf4:	e002      	b.n	800ecfc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d064      	beq.n	800edd0 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed0a:	697a      	ldr	r2, [r7, #20]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d15f      	bne.n	800edd0 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed10:	4b31      	ldr	r3, [pc, #196]	; (800edd8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	69ba      	ldr	r2, [r7, #24]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d10b      	bne.n	800ed32 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	b672      	cpsid	i
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	b662      	cpsie	i
 800ed2e:	60bb      	str	r3, [r7, #8]
 800ed30:	e7fe      	b.n	800ed30 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	69fa      	ldr	r2, [r7, #28]
 800ed3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db04      	blt.n	800ed50 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	f1c3 0207 	rsb	r2, r3, #7
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	6959      	ldr	r1, [r3, #20]
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4a1f      	ldr	r2, [pc, #124]	; (800eddc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ed60:	4413      	add	r3, r2
 800ed62:	4299      	cmp	r1, r3
 800ed64:	d134      	bne.n	800edd0 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe f90e 	bl	800cf8c <uxListRemove>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d115      	bne.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed7a:	4918      	ldr	r1, [pc, #96]	; (800eddc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	440b      	add	r3, r1
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10a      	bne.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed90:	2201      	movs	r2, #1
 800ed92:	fa02 f303 	lsl.w	r3, r2, r3
 800ed96:	43da      	mvns	r2, r3
 800ed98:	4b11      	ldr	r3, [pc, #68]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	4a10      	ldr	r2, [pc, #64]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eda0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda6:	2201      	movs	r2, #1
 800eda8:	409a      	lsls	r2, r3
 800edaa:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4313      	orrs	r3, r2
 800edb0:	4a0b      	ldr	r2, [pc, #44]	; (800ede0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800edb2:	6013      	str	r3, [r2, #0]
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb8:	4613      	mov	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4413      	add	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4a06      	ldr	r2, [pc, #24]	; (800eddc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800edc2:	441a      	add	r2, r3
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	3304      	adds	r3, #4
 800edc8:	4619      	mov	r1, r3
 800edca:	4610      	mov	r0, r2
 800edcc:	f7fe f881 	bl	800ced2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edd0:	bf00      	nop
 800edd2:	3720      	adds	r7, #32
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20000400 	.word	0x20000400
 800eddc:	20000404 	.word	0x20000404
 800ede0:	20000508 	.word	0x20000508

0800ede4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ede4:	b480      	push	{r7}
 800ede6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ede8:	4b07      	ldr	r3, [pc, #28]	; (800ee08 <pvTaskIncrementMutexHeldCount+0x24>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edf0:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <pvTaskIncrementMutexHeldCount+0x24>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edf6:	3201      	adds	r2, #1
 800edf8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800edfa:	4b03      	ldr	r3, [pc, #12]	; (800ee08 <pvTaskIncrementMutexHeldCount+0x24>)
 800edfc:	681b      	ldr	r3, [r3, #0]
	}
 800edfe:	4618      	mov	r0, r3
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	20000400 	.word	0x20000400

0800ee0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee16:	4b29      	ldr	r3, [pc, #164]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee1c:	4b28      	ldr	r3, [pc, #160]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe f8b2 	bl	800cf8c <uxListRemove>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10b      	bne.n	800ee46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ee2e:	4b24      	ldr	r3, [pc, #144]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee34:	2201      	movs	r2, #1
 800ee36:	fa02 f303 	lsl.w	r3, r2, r3
 800ee3a:	43da      	mvns	r2, r3
 800ee3c:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4013      	ands	r3, r2
 800ee42:	4a20      	ldr	r2, [pc, #128]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee4c:	d10a      	bne.n	800ee64 <prvAddCurrentTaskToDelayedList+0x58>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d007      	beq.n	800ee64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee54:	4b1a      	ldr	r3, [pc, #104]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3304      	adds	r3, #4
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	481a      	ldr	r0, [pc, #104]	; (800eec8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee5e:	f7fe f838 	bl	800ced2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee62:	e026      	b.n	800eeb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	4413      	add	r3, r2
 800ee6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee6c:	4b14      	ldr	r3, [pc, #80]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d209      	bcs.n	800ee90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee7c:	4b13      	ldr	r3, [pc, #76]	; (800eecc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3304      	adds	r3, #4
 800ee86:	4619      	mov	r1, r3
 800ee88:	4610      	mov	r0, r2
 800ee8a:	f7fe f846 	bl	800cf1a <vListInsert>
}
 800ee8e:	e010      	b.n	800eeb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee90:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3304      	adds	r3, #4
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	f7fe f83c 	bl	800cf1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eea2:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d202      	bcs.n	800eeb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eeac:	4a09      	ldr	r2, [pc, #36]	; (800eed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6013      	str	r3, [r2, #0]
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20000504 	.word	0x20000504
 800eec0:	20000400 	.word	0x20000400
 800eec4:	20000508 	.word	0x20000508
 800eec8:	200004ec 	.word	0x200004ec
 800eecc:	200004bc 	.word	0x200004bc
 800eed0:	200004b8 	.word	0x200004b8
 800eed4:	20000520 	.word	0x20000520

0800eed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	3b04      	subs	r3, #4
 800eee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3b04      	subs	r3, #4
 800eef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f023 0201 	bic.w	r2, r3, #1
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3b04      	subs	r3, #4
 800ef06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef08:	4a0c      	ldr	r2, [pc, #48]	; (800ef3c <pxPortInitialiseStack+0x64>)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3b14      	subs	r3, #20
 800ef12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3b04      	subs	r3, #4
 800ef1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f06f 0202 	mvn.w	r2, #2
 800ef26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	3b20      	subs	r3, #32
 800ef2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	0800ef41 	.word	0x0800ef41

0800ef40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef4a:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <prvTaskExitError+0x58>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef52:	d00b      	beq.n	800ef6c <prvTaskExitError+0x2c>
 800ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef58:	b672      	cpsid	i
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	b662      	cpsie	i
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	e7fe      	b.n	800ef6a <prvTaskExitError+0x2a>
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	b672      	cpsid	i
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	b662      	cpsie	i
 800ef80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef82:	bf00      	nop
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d0fc      	beq.n	800ef84 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef8a:	bf00      	nop
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	2000001c 	.word	0x2000001c
 800ef9c:	00000000 	.word	0x00000000

0800efa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800efa0:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <pxCurrentTCBConst2>)
 800efa2:	6819      	ldr	r1, [r3, #0]
 800efa4:	6808      	ldr	r0, [r1, #0]
 800efa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efaa:	f380 8809 	msr	PSP, r0
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f04f 0000 	mov.w	r0, #0
 800efb6:	f380 8811 	msr	BASEPRI, r0
 800efba:	4770      	bx	lr
 800efbc:	f3af 8000 	nop.w

0800efc0 <pxCurrentTCBConst2>:
 800efc0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800efc4:	bf00      	nop
 800efc6:	bf00      	nop

0800efc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800efc8:	4808      	ldr	r0, [pc, #32]	; (800efec <prvPortStartFirstTask+0x24>)
 800efca:	6800      	ldr	r0, [r0, #0]
 800efcc:	6800      	ldr	r0, [r0, #0]
 800efce:	f380 8808 	msr	MSP, r0
 800efd2:	f04f 0000 	mov.w	r0, #0
 800efd6:	f380 8814 	msr	CONTROL, r0
 800efda:	b662      	cpsie	i
 800efdc:	b661      	cpsie	f
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	df00      	svc	0
 800efe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800efea:	bf00      	nop
 800efec:	e000ed08 	.word	0xe000ed08

0800eff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eff6:	4b36      	ldr	r3, [pc, #216]	; (800f0d0 <xPortStartScheduler+0xe0>)
 800eff8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	b2db      	uxtb	r3, r3
 800f000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	22ff      	movs	r2, #255	; 0xff
 800f006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b2e      	ldr	r3, [pc, #184]	; (800f0d4 <xPortStartScheduler+0xe4>)
 800f01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f01e:	4b2e      	ldr	r3, [pc, #184]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f020:	2207      	movs	r2, #7
 800f022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f024:	e009      	b.n	800f03a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f026:	4b2c      	ldr	r3, [pc, #176]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	4a2a      	ldr	r2, [pc, #168]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f030:	78fb      	ldrb	r3, [r7, #3]
 800f032:	b2db      	uxtb	r3, r3
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	b2db      	uxtb	r3, r3
 800f038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f03a:	78fb      	ldrb	r3, [r7, #3]
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f042:	2b80      	cmp	r3, #128	; 0x80
 800f044:	d0ef      	beq.n	800f026 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f046:	4b24      	ldr	r3, [pc, #144]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f1c3 0307 	rsb	r3, r3, #7
 800f04e:	2b04      	cmp	r3, #4
 800f050:	d00b      	beq.n	800f06a <xPortStartScheduler+0x7a>
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	b672      	cpsid	i
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	b662      	cpsie	i
 800f066:	60bb      	str	r3, [r7, #8]
 800f068:	e7fe      	b.n	800f068 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f06a:	4b1b      	ldr	r3, [pc, #108]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	021b      	lsls	r3, r3, #8
 800f070:	4a19      	ldr	r2, [pc, #100]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f072:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f074:	4b18      	ldr	r3, [pc, #96]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f07c:	4a16      	ldr	r2, [pc, #88]	; (800f0d8 <xPortStartScheduler+0xe8>)
 800f07e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	b2da      	uxtb	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f088:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <xPortStartScheduler+0xec>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a13      	ldr	r2, [pc, #76]	; (800f0dc <xPortStartScheduler+0xec>)
 800f08e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f092:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f094:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <xPortStartScheduler+0xec>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a10      	ldr	r2, [pc, #64]	; (800f0dc <xPortStartScheduler+0xec>)
 800f09a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f09e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f0a0:	f000 f8d4 	bl	800f24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f0a4:	4b0e      	ldr	r3, [pc, #56]	; (800f0e0 <xPortStartScheduler+0xf0>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f0aa:	f000 f8f3 	bl	800f294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f0ae:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <xPortStartScheduler+0xf4>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4a0c      	ldr	r2, [pc, #48]	; (800f0e4 <xPortStartScheduler+0xf4>)
 800f0b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f0b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f0ba:	f7ff ff85 	bl	800efc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f0be:	f7ff fa67 	bl	800e590 <vTaskSwitchContext>
	prvTaskExitError();
 800f0c2:	f7ff ff3d 	bl	800ef40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	e000e400 	.word	0xe000e400
 800f0d4:	2000052c 	.word	0x2000052c
 800f0d8:	20000530 	.word	0x20000530
 800f0dc:	e000ed20 	.word	0xe000ed20
 800f0e0:	2000001c 	.word	0x2000001c
 800f0e4:	e000ef34 	.word	0xe000ef34

0800f0e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f2:	b672      	cpsid	i
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	b662      	cpsie	i
 800f102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f104:	4b0f      	ldr	r3, [pc, #60]	; (800f144 <vPortEnterCritical+0x5c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3301      	adds	r3, #1
 800f10a:	4a0e      	ldr	r2, [pc, #56]	; (800f144 <vPortEnterCritical+0x5c>)
 800f10c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f10e:	4b0d      	ldr	r3, [pc, #52]	; (800f144 <vPortEnterCritical+0x5c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b01      	cmp	r3, #1
 800f114:	d110      	bne.n	800f138 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f116:	4b0c      	ldr	r3, [pc, #48]	; (800f148 <vPortEnterCritical+0x60>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00b      	beq.n	800f138 <vPortEnterCritical+0x50>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	b672      	cpsid	i
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	b662      	cpsie	i
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	e7fe      	b.n	800f136 <vPortEnterCritical+0x4e>
	}
}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	2000001c 	.word	0x2000001c
 800f148:	e000ed04 	.word	0xe000ed04

0800f14c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f152:	4b12      	ldr	r3, [pc, #72]	; (800f19c <vPortExitCritical+0x50>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10b      	bne.n	800f172 <vPortExitCritical+0x26>
 800f15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15e:	b672      	cpsid	i
 800f160:	f383 8811 	msr	BASEPRI, r3
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	b662      	cpsie	i
 800f16e:	607b      	str	r3, [r7, #4]
 800f170:	e7fe      	b.n	800f170 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f172:	4b0a      	ldr	r3, [pc, #40]	; (800f19c <vPortExitCritical+0x50>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3b01      	subs	r3, #1
 800f178:	4a08      	ldr	r2, [pc, #32]	; (800f19c <vPortExitCritical+0x50>)
 800f17a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f17c:	4b07      	ldr	r3, [pc, #28]	; (800f19c <vPortExitCritical+0x50>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d104      	bne.n	800f18e <vPortExitCritical+0x42>
 800f184:	2300      	movs	r3, #0
 800f186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f18e:	bf00      	nop
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	2000001c 	.word	0x2000001c

0800f1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f1a0:	f3ef 8009 	mrs	r0, PSP
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	4b15      	ldr	r3, [pc, #84]	; (800f200 <pxCurrentTCBConst>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	f01e 0f10 	tst.w	lr, #16
 800f1b0:	bf08      	it	eq
 800f1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ba:	6010      	str	r0, [r2, #0]
 800f1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f1c4:	b672      	cpsid	i
 800f1c6:	f380 8811 	msr	BASEPRI, r0
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	b662      	cpsie	i
 800f1d4:	f7ff f9dc 	bl	800e590 <vTaskSwitchContext>
 800f1d8:	f04f 0000 	mov.w	r0, #0
 800f1dc:	f380 8811 	msr	BASEPRI, r0
 800f1e0:	bc09      	pop	{r0, r3}
 800f1e2:	6819      	ldr	r1, [r3, #0]
 800f1e4:	6808      	ldr	r0, [r1, #0]
 800f1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ea:	f01e 0f10 	tst.w	lr, #16
 800f1ee:	bf08      	it	eq
 800f1f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1f4:	f380 8809 	msr	PSP, r0
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop

0800f200 <pxCurrentTCBConst>:
 800f200:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f204:	bf00      	nop
 800f206:	bf00      	nop

0800f208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	b672      	cpsid	i
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	b662      	cpsie	i
 800f222:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f224:	f7ff f8fa 	bl	800e41c <xTaskIncrementTick>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d003      	beq.n	800f236 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f22e:	4b06      	ldr	r3, [pc, #24]	; (800f248 <SysTick_Handler+0x40>)
 800f230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	2300      	movs	r3, #0
 800f238:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f240:	bf00      	nop
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	e000ed04 	.word	0xe000ed04

0800f24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f250:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <vPortSetupTimerInterrupt+0x34>)
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f256:	4b0b      	ldr	r3, [pc, #44]	; (800f284 <vPortSetupTimerInterrupt+0x38>)
 800f258:	2200      	movs	r2, #0
 800f25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f25c:	4b0a      	ldr	r3, [pc, #40]	; (800f288 <vPortSetupTimerInterrupt+0x3c>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a0a      	ldr	r2, [pc, #40]	; (800f28c <vPortSetupTimerInterrupt+0x40>)
 800f262:	fba2 2303 	umull	r2, r3, r2, r3
 800f266:	099b      	lsrs	r3, r3, #6
 800f268:	4a09      	ldr	r2, [pc, #36]	; (800f290 <vPortSetupTimerInterrupt+0x44>)
 800f26a:	3b01      	subs	r3, #1
 800f26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f26e:	4b04      	ldr	r3, [pc, #16]	; (800f280 <vPortSetupTimerInterrupt+0x34>)
 800f270:	2207      	movs	r2, #7
 800f272:	601a      	str	r2, [r3, #0]
}
 800f274:	bf00      	nop
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	e000e010 	.word	0xe000e010
 800f284:	e000e018 	.word	0xe000e018
 800f288:	20000010 	.word	0x20000010
 800f28c:	10624dd3 	.word	0x10624dd3
 800f290:	e000e014 	.word	0xe000e014

0800f294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f2a4 <vPortEnableVFP+0x10>
 800f298:	6801      	ldr	r1, [r0, #0]
 800f29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f29e:	6001      	str	r1, [r0, #0]
 800f2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f2a2:	bf00      	nop
 800f2a4:	e000ed88 	.word	0xe000ed88

0800f2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f2ae:	f3ef 8305 	mrs	r3, IPSR
 800f2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b0f      	cmp	r3, #15
 800f2b8:	d915      	bls.n	800f2e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2ba:	4a18      	ldr	r2, [pc, #96]	; (800f31c <vPortValidateInterruptPriority+0x74>)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4413      	add	r3, r2
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2c4:	4b16      	ldr	r3, [pc, #88]	; (800f320 <vPortValidateInterruptPriority+0x78>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	7afa      	ldrb	r2, [r7, #11]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d20b      	bcs.n	800f2e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	b672      	cpsid	i
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	b662      	cpsie	i
 800f2e2:	607b      	str	r3, [r7, #4]
 800f2e4:	e7fe      	b.n	800f2e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2e6:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <vPortValidateInterruptPriority+0x7c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f2ee:	4b0e      	ldr	r3, [pc, #56]	; (800f328 <vPortValidateInterruptPriority+0x80>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d90b      	bls.n	800f30e <vPortValidateInterruptPriority+0x66>
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	b672      	cpsid	i
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	b662      	cpsie	i
 800f30a:	603b      	str	r3, [r7, #0]
 800f30c:	e7fe      	b.n	800f30c <vPortValidateInterruptPriority+0x64>
	}
 800f30e:	bf00      	nop
 800f310:	3714      	adds	r7, #20
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	e000e3f0 	.word	0xe000e3f0
 800f320:	2000052c 	.word	0x2000052c
 800f324:	e000ed0c 	.word	0xe000ed0c
 800f328:	20000530 	.word	0x20000530

0800f32c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08a      	sub	sp, #40	; 0x28
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f334:	2300      	movs	r3, #0
 800f336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f338:	f7fe ffa2 	bl	800e280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f33c:	4b5c      	ldr	r3, [pc, #368]	; (800f4b0 <pvPortMalloc+0x184>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d101      	bne.n	800f348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f344:	f000 f91a 	bl	800f57c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f348:	4b5a      	ldr	r3, [pc, #360]	; (800f4b4 <pvPortMalloc+0x188>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4013      	ands	r3, r2
 800f350:	2b00      	cmp	r3, #0
 800f352:	f040 8090 	bne.w	800f476 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01e      	beq.n	800f39a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f35c:	2208      	movs	r2, #8
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4413      	add	r3, r2
 800f362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d015      	beq.n	800f39a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f023 0307 	bic.w	r3, r3, #7
 800f374:	3308      	adds	r3, #8
 800f376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f003 0307 	and.w	r3, r3, #7
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00b      	beq.n	800f39a <pvPortMalloc+0x6e>
 800f382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f386:	b672      	cpsid	i
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	b662      	cpsie	i
 800f396:	617b      	str	r3, [r7, #20]
 800f398:	e7fe      	b.n	800f398 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d06a      	beq.n	800f476 <pvPortMalloc+0x14a>
 800f3a0:	4b45      	ldr	r3, [pc, #276]	; (800f4b8 <pvPortMalloc+0x18c>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d865      	bhi.n	800f476 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f3aa:	4b44      	ldr	r3, [pc, #272]	; (800f4bc <pvPortMalloc+0x190>)
 800f3ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f3ae:	4b43      	ldr	r3, [pc, #268]	; (800f4bc <pvPortMalloc+0x190>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3b4:	e004      	b.n	800f3c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d903      	bls.n	800f3d2 <pvPortMalloc+0xa6>
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1f1      	bne.n	800f3b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3d2:	4b37      	ldr	r3, [pc, #220]	; (800f4b0 <pvPortMalloc+0x184>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d04c      	beq.n	800f476 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3dc:	6a3b      	ldr	r3, [r7, #32]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2208      	movs	r2, #8
 800f3e2:	4413      	add	r3, r2
 800f3e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	685a      	ldr	r2, [r3, #4]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	1ad2      	subs	r2, r2, r3
 800f3f6:	2308      	movs	r3, #8
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d920      	bls.n	800f440 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4413      	add	r3, r2
 800f404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	f003 0307 	and.w	r3, r3, #7
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00b      	beq.n	800f428 <pvPortMalloc+0xfc>
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	b672      	cpsid	i
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	b662      	cpsie	i
 800f424:	613b      	str	r3, [r7, #16]
 800f426:	e7fe      	b.n	800f426 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f43a:	69b8      	ldr	r0, [r7, #24]
 800f43c:	f000 f900 	bl	800f640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f440:	4b1d      	ldr	r3, [pc, #116]	; (800f4b8 <pvPortMalloc+0x18c>)
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	4a1b      	ldr	r2, [pc, #108]	; (800f4b8 <pvPortMalloc+0x18c>)
 800f44c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f44e:	4b1a      	ldr	r3, [pc, #104]	; (800f4b8 <pvPortMalloc+0x18c>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	4b1b      	ldr	r3, [pc, #108]	; (800f4c0 <pvPortMalloc+0x194>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	429a      	cmp	r2, r3
 800f458:	d203      	bcs.n	800f462 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f45a:	4b17      	ldr	r3, [pc, #92]	; (800f4b8 <pvPortMalloc+0x18c>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a18      	ldr	r2, [pc, #96]	; (800f4c0 <pvPortMalloc+0x194>)
 800f460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	4b13      	ldr	r3, [pc, #76]	; (800f4b4 <pvPortMalloc+0x188>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	431a      	orrs	r2, r3
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f476:	f7fe ff11 	bl	800e29c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d101      	bne.n	800f484 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f480:	f7f1 fb3c 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00b      	beq.n	800f4a6 <pvPortMalloc+0x17a>
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	b672      	cpsid	i
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	b662      	cpsie	i
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	e7fe      	b.n	800f4a4 <pvPortMalloc+0x178>
	return pvReturn;
 800f4a6:	69fb      	ldr	r3, [r7, #28]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3728      	adds	r7, #40	; 0x28
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	2000853c 	.word	0x2000853c
 800f4b4:	20008548 	.word	0x20008548
 800f4b8:	20008540 	.word	0x20008540
 800f4bc:	20008534 	.word	0x20008534
 800f4c0:	20008544 	.word	0x20008544

0800f4c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d04a      	beq.n	800f56c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	425b      	negs	r3, r3
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	4413      	add	r3, r2
 800f4de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	4b22      	ldr	r3, [pc, #136]	; (800f574 <vPortFree+0xb0>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10b      	bne.n	800f50a <vPortFree+0x46>
 800f4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f6:	b672      	cpsid	i
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	b662      	cpsie	i
 800f506:	60fb      	str	r3, [r7, #12]
 800f508:	e7fe      	b.n	800f508 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00b      	beq.n	800f52a <vPortFree+0x66>
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	b672      	cpsid	i
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	b662      	cpsie	i
 800f526:	60bb      	str	r3, [r7, #8]
 800f528:	e7fe      	b.n	800f528 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	685a      	ldr	r2, [r3, #4]
 800f52e:	4b11      	ldr	r3, [pc, #68]	; (800f574 <vPortFree+0xb0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4013      	ands	r3, r2
 800f534:	2b00      	cmp	r3, #0
 800f536:	d019      	beq.n	800f56c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d115      	bne.n	800f56c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <vPortFree+0xb0>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	43db      	mvns	r3, r3
 800f54a:	401a      	ands	r2, r3
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f550:	f7fe fe96 	bl	800e280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	685a      	ldr	r2, [r3, #4]
 800f558:	4b07      	ldr	r3, [pc, #28]	; (800f578 <vPortFree+0xb4>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4413      	add	r3, r2
 800f55e:	4a06      	ldr	r2, [pc, #24]	; (800f578 <vPortFree+0xb4>)
 800f560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f562:	6938      	ldr	r0, [r7, #16]
 800f564:	f000 f86c 	bl	800f640 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f568:	f7fe fe98 	bl	800e29c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f56c:	bf00      	nop
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20008548 	.word	0x20008548
 800f578:	20008540 	.word	0x20008540

0800f57c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f588:	4b27      	ldr	r3, [pc, #156]	; (800f628 <prvHeapInit+0xac>)
 800f58a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f003 0307 	and.w	r3, r3, #7
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00c      	beq.n	800f5b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3307      	adds	r3, #7
 800f59a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f023 0307 	bic.w	r3, r3, #7
 800f5a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	4a1f      	ldr	r2, [pc, #124]	; (800f628 <prvHeapInit+0xac>)
 800f5ac:	4413      	add	r3, r2
 800f5ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5b4:	4a1d      	ldr	r2, [pc, #116]	; (800f62c <prvHeapInit+0xb0>)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5ba:	4b1c      	ldr	r3, [pc, #112]	; (800f62c <prvHeapInit+0xb0>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5c8:	2208      	movs	r2, #8
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	1a9b      	subs	r3, r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f023 0307 	bic.w	r3, r3, #7
 800f5d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	4a15      	ldr	r2, [pc, #84]	; (800f630 <prvHeapInit+0xb4>)
 800f5dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5de:	4b14      	ldr	r3, [pc, #80]	; (800f630 <prvHeapInit+0xb4>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5e6:	4b12      	ldr	r3, [pc, #72]	; (800f630 <prvHeapInit+0xb4>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	1ad2      	subs	r2, r2, r3
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5fc:	4b0c      	ldr	r3, [pc, #48]	; (800f630 <prvHeapInit+0xb4>)
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	4a0a      	ldr	r2, [pc, #40]	; (800f634 <prvHeapInit+0xb8>)
 800f60a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	4a09      	ldr	r2, [pc, #36]	; (800f638 <prvHeapInit+0xbc>)
 800f612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f614:	4b09      	ldr	r3, [pc, #36]	; (800f63c <prvHeapInit+0xc0>)
 800f616:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f61a:	601a      	str	r2, [r3, #0]
}
 800f61c:	bf00      	nop
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	20000534 	.word	0x20000534
 800f62c:	20008534 	.word	0x20008534
 800f630:	2000853c 	.word	0x2000853c
 800f634:	20008544 	.word	0x20008544
 800f638:	20008540 	.word	0x20008540
 800f63c:	20008548 	.word	0x20008548

0800f640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f648:	4b28      	ldr	r3, [pc, #160]	; (800f6ec <prvInsertBlockIntoFreeList+0xac>)
 800f64a:	60fb      	str	r3, [r7, #12]
 800f64c:	e002      	b.n	800f654 <prvInsertBlockIntoFreeList+0x14>
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	60fb      	str	r3, [r7, #12]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d8f7      	bhi.n	800f64e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	4413      	add	r3, r2
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d108      	bne.n	800f682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	685a      	ldr	r2, [r3, #4]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	441a      	add	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	441a      	add	r2, r3
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d118      	bne.n	800f6c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	4b15      	ldr	r3, [pc, #84]	; (800f6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d00d      	beq.n	800f6be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	441a      	add	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	e008      	b.n	800f6d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6be:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	e003      	b.n	800f6d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d002      	beq.n	800f6de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6de:	bf00      	nop
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	20008534 	.word	0x20008534
 800f6f0:	2000853c 	.word	0x2000853c

0800f6f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08c      	sub	sp, #48	; 0x30
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a51      	ldr	r2, [pc, #324]	; (800f844 <I2Cx_MspInit+0x150>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d14d      	bne.n	800f7a0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f704:	4b50      	ldr	r3, [pc, #320]	; (800f848 <I2Cx_MspInit+0x154>)
 800f706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f708:	4a4f      	ldr	r2, [pc, #316]	; (800f848 <I2Cx_MspInit+0x154>)
 800f70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f70e:	6313      	str	r3, [r2, #48]	; 0x30
 800f710:	4b4d      	ldr	r3, [pc, #308]	; (800f848 <I2Cx_MspInit+0x154>)
 800f712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f718:	61bb      	str	r3, [r7, #24]
 800f71a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f71c:	2380      	movs	r3, #128	; 0x80
 800f71e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f720:	2312      	movs	r3, #18
 800f722:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f724:	2300      	movs	r3, #0
 800f726:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f728:	2302      	movs	r3, #2
 800f72a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f72c:	2304      	movs	r3, #4
 800f72e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f730:	f107 031c 	add.w	r3, r7, #28
 800f734:	4619      	mov	r1, r3
 800f736:	4845      	ldr	r0, [pc, #276]	; (800f84c <I2Cx_MspInit+0x158>)
 800f738:	f7f5 ff7c 	bl	8005634 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f73c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f742:	f107 031c 	add.w	r3, r7, #28
 800f746:	4619      	mov	r1, r3
 800f748:	4840      	ldr	r0, [pc, #256]	; (800f84c <I2Cx_MspInit+0x158>)
 800f74a:	f7f5 ff73 	bl	8005634 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f74e:	4b3e      	ldr	r3, [pc, #248]	; (800f848 <I2Cx_MspInit+0x154>)
 800f750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f752:	4a3d      	ldr	r2, [pc, #244]	; (800f848 <I2Cx_MspInit+0x154>)
 800f754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f758:	6413      	str	r3, [r2, #64]	; 0x40
 800f75a:	4b3b      	ldr	r3, [pc, #236]	; (800f848 <I2Cx_MspInit+0x154>)
 800f75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f762:	617b      	str	r3, [r7, #20]
 800f764:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f766:	4b38      	ldr	r3, [pc, #224]	; (800f848 <I2Cx_MspInit+0x154>)
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	4a37      	ldr	r2, [pc, #220]	; (800f848 <I2Cx_MspInit+0x154>)
 800f76c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f770:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f772:	4b35      	ldr	r3, [pc, #212]	; (800f848 <I2Cx_MspInit+0x154>)
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	4a34      	ldr	r2, [pc, #208]	; (800f848 <I2Cx_MspInit+0x154>)
 800f778:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f77c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f77e:	2200      	movs	r2, #0
 800f780:	210f      	movs	r1, #15
 800f782:	2048      	movs	r0, #72	; 0x48
 800f784:	f7f5 f928 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f788:	2048      	movs	r0, #72	; 0x48
 800f78a:	f7f5 f941 	bl	8004a10 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f78e:	2200      	movs	r2, #0
 800f790:	210f      	movs	r1, #15
 800f792:	2049      	movs	r0, #73	; 0x49
 800f794:	f7f5 f920 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f798:	2049      	movs	r0, #73	; 0x49
 800f79a:	f7f5 f939 	bl	8004a10 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f79e:	e04d      	b.n	800f83c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f7a0:	4b29      	ldr	r3, [pc, #164]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a4:	4a28      	ldr	r2, [pc, #160]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7a6:	f043 0302 	orr.w	r3, r3, #2
 800f7aa:	6313      	str	r3, [r2, #48]	; 0x30
 800f7ac:	4b26      	ldr	r3, [pc, #152]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7b0:	f003 0302 	and.w	r3, r3, #2
 800f7b4:	613b      	str	r3, [r7, #16]
 800f7b6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f7b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7bc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f7be:	2312      	movs	r3, #18
 800f7c0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800f7ca:	2304      	movs	r3, #4
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f7ce:	f107 031c 	add.w	r3, r7, #28
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	481e      	ldr	r0, [pc, #120]	; (800f850 <I2Cx_MspInit+0x15c>)
 800f7d6:	f7f5 ff2d 	bl	8005634 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800f7da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f7e0:	f107 031c 	add.w	r3, r7, #28
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	481a      	ldr	r0, [pc, #104]	; (800f850 <I2Cx_MspInit+0x15c>)
 800f7e8:	f7f5 ff24 	bl	8005634 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800f7ec:	4b16      	ldr	r3, [pc, #88]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f0:	4a15      	ldr	r2, [pc, #84]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f7f6:	6413      	str	r3, [r2, #64]	; 0x40
 800f7f8:	4b13      	ldr	r3, [pc, #76]	; (800f848 <I2Cx_MspInit+0x154>)
 800f7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f800:	60fb      	str	r3, [r7, #12]
 800f802:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800f804:	4b10      	ldr	r3, [pc, #64]	; (800f848 <I2Cx_MspInit+0x154>)
 800f806:	6a1b      	ldr	r3, [r3, #32]
 800f808:	4a0f      	ldr	r2, [pc, #60]	; (800f848 <I2Cx_MspInit+0x154>)
 800f80a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f80e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800f810:	4b0d      	ldr	r3, [pc, #52]	; (800f848 <I2Cx_MspInit+0x154>)
 800f812:	6a1b      	ldr	r3, [r3, #32]
 800f814:	4a0c      	ldr	r2, [pc, #48]	; (800f848 <I2Cx_MspInit+0x154>)
 800f816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f81a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800f81c:	2200      	movs	r2, #0
 800f81e:	210f      	movs	r1, #15
 800f820:	201f      	movs	r0, #31
 800f822:	f7f5 f8d9 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800f826:	201f      	movs	r0, #31
 800f828:	f7f5 f8f2 	bl	8004a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800f82c:	2200      	movs	r2, #0
 800f82e:	210f      	movs	r1, #15
 800f830:	2020      	movs	r0, #32
 800f832:	f7f5 f8d1 	bl	80049d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800f836:	2020      	movs	r0, #32
 800f838:	f7f5 f8ea 	bl	8004a10 <HAL_NVIC_EnableIRQ>
}
 800f83c:	bf00      	nop
 800f83e:	3730      	adds	r7, #48	; 0x30
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	2000854c 	.word	0x2000854c
 800f848:	40023800 	.word	0x40023800
 800f84c:	40021c00 	.word	0x40021c00
 800f850:	40020400 	.word	0x40020400

0800f854 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7f6 fbc7 	bl	8005ff0 <HAL_I2C_GetState>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d125      	bne.n	800f8b4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a14      	ldr	r2, [pc, #80]	; (800f8bc <I2Cx_Init+0x68>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d103      	bne.n	800f878 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a13      	ldr	r2, [pc, #76]	; (800f8c0 <I2Cx_Init+0x6c>)
 800f874:	601a      	str	r2, [r3, #0]
 800f876:	e002      	b.n	800f87e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a12      	ldr	r2, [pc, #72]	; (800f8c4 <I2Cx_Init+0x70>)
 800f87c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4a11      	ldr	r2, [pc, #68]	; (800f8c8 <I2Cx_Init+0x74>)
 800f882:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2201      	movs	r2, #1
 800f88e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff ff23 	bl	800f6f4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f7f6 f89c 	bl	80059ec <HAL_I2C_Init>
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	2000854c 	.word	0x2000854c
 800f8c0:	40005c00 	.word	0x40005c00
 800f8c4:	40005400 	.word	0x40005400
 800f8c8:	40912732 	.word	0x40912732

0800f8cc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08a      	sub	sp, #40	; 0x28
 800f8d0:	af04      	add	r7, sp, #16
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	4608      	mov	r0, r1
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4603      	mov	r3, r0
 800f8dc:	72fb      	strb	r3, [r7, #11]
 800f8de:	460b      	mov	r3, r1
 800f8e0:	813b      	strh	r3, [r7, #8]
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f8ea:	7afb      	ldrb	r3, [r7, #11]
 800f8ec:	b299      	uxth	r1, r3
 800f8ee:	88f8      	ldrh	r0, [r7, #6]
 800f8f0:	893a      	ldrh	r2, [r7, #8]
 800f8f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8f6:	9302      	str	r3, [sp, #8]
 800f8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8fa:	9301      	str	r3, [sp, #4]
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	4603      	mov	r3, r0
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7f6 fa5a 	bl	8005dbc <HAL_I2C_Mem_Read>
 800f908:	4603      	mov	r3, r0
 800f90a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800f90c:	7dfb      	ldrb	r3, [r7, #23]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d004      	beq.n	800f91c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800f912:	7afb      	ldrb	r3, [r7, #11]
 800f914:	4619      	mov	r1, r3
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f000 f832 	bl	800f980 <I2Cx_Error>
  }
  return status;    
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b08a      	sub	sp, #40	; 0x28
 800f92a:	af04      	add	r7, sp, #16
 800f92c:	60f8      	str	r0, [r7, #12]
 800f92e:	4608      	mov	r0, r1
 800f930:	4611      	mov	r1, r2
 800f932:	461a      	mov	r2, r3
 800f934:	4603      	mov	r3, r0
 800f936:	72fb      	strb	r3, [r7, #11]
 800f938:	460b      	mov	r3, r1
 800f93a:	813b      	strh	r3, [r7, #8]
 800f93c:	4613      	mov	r3, r2
 800f93e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f944:	7afb      	ldrb	r3, [r7, #11]
 800f946:	b299      	uxth	r1, r3
 800f948:	88f8      	ldrh	r0, [r7, #6]
 800f94a:	893a      	ldrh	r2, [r7, #8]
 800f94c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	4603      	mov	r3, r0
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7f6 f919 	bl	8005b94 <HAL_I2C_Mem_Write>
 800f962:	4603      	mov	r3, r0
 800f964:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800f966:	7dfb      	ldrb	r3, [r7, #23]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d004      	beq.n	800f976 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800f96c:	7afb      	ldrb	r3, [r7, #11]
 800f96e:	4619      	mov	r1, r3
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 f805 	bl	800f980 <I2Cx_Error>
  }
  return status;
 800f976:	7dfb      	ldrb	r3, [r7, #23]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7f6 f8bd 	bl	8005b0c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff ff5e 	bl	800f854 <I2Cx_Init>
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800f9a4:	4802      	ldr	r0, [pc, #8]	; (800f9b0 <TS_IO_Init+0x10>)
 800f9a6:	f7ff ff55 	bl	800f854 <I2Cx_Init>
}
 800f9aa:	bf00      	nop
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	2000854c 	.word	0x2000854c

0800f9b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af02      	add	r7, sp, #8
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	71fb      	strb	r3, [r7, #7]
 800f9be:	460b      	mov	r3, r1
 800f9c0:	71bb      	strb	r3, [r7, #6]
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800f9c6:	79bb      	ldrb	r3, [r7, #6]
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	79f9      	ldrb	r1, [r7, #7]
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	9301      	str	r3, [sp, #4]
 800f9d0:	1d7b      	adds	r3, r7, #5
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4803      	ldr	r0, [pc, #12]	; (800f9e4 <TS_IO_Write+0x30>)
 800f9d8:	f7ff ffa5 	bl	800f926 <I2Cx_WriteMultiple>
}
 800f9dc:	bf00      	nop
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	2000854c 	.word	0x2000854c

0800f9e8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	460a      	mov	r2, r1
 800f9f2:	71fb      	strb	r3, [r7, #7]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800f9fc:	79bb      	ldrb	r3, [r7, #6]
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	79f9      	ldrb	r1, [r7, #7]
 800fa02:	2301      	movs	r3, #1
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	f107 030f 	add.w	r3, r7, #15
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	4804      	ldr	r0, [pc, #16]	; (800fa20 <TS_IO_Read+0x38>)
 800fa10:	f7ff ff5c 	bl	800f8cc <I2Cx_ReadMultiple>

  return read_value;
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	2000854c 	.word	0x2000854c

0800fa24 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7f3 fecd 	bl	80037cc <HAL_Delay>
}
 800fa32:	bf00      	nop
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	4603      	mov	r3, r0
 800fa44:	460a      	mov	r2, r1
 800fa46:	80fb      	strh	r3, [r7, #6]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fa50:	4a14      	ldr	r2, [pc, #80]	; (800faa4 <BSP_TS_Init+0x68>)
 800fa52:	88fb      	ldrh	r3, [r7, #6]
 800fa54:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fa56:	4a14      	ldr	r2, [pc, #80]	; (800faa8 <BSP_TS_Init+0x6c>)
 800fa58:	88bb      	ldrh	r3, [r7, #4]
 800fa5a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fa5c:	4b13      	ldr	r3, [pc, #76]	; (800faac <BSP_TS_Init+0x70>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2070      	movs	r0, #112	; 0x70
 800fa62:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fa64:	4b11      	ldr	r3, [pc, #68]	; (800faac <BSP_TS_Init+0x70>)
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	2070      	movs	r0, #112	; 0x70
 800fa6a:	4798      	blx	r3
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b51      	cmp	r3, #81	; 0x51
 800fa70:	d111      	bne.n	800fa96 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fa72:	4b0f      	ldr	r3, [pc, #60]	; (800fab0 <BSP_TS_Init+0x74>)
 800fa74:	4a0d      	ldr	r2, [pc, #52]	; (800faac <BSP_TS_Init+0x70>)
 800fa76:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fa78:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <BSP_TS_Init+0x78>)
 800fa7a:	2270      	movs	r2, #112	; 0x70
 800fa7c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fa7e:	4b0e      	ldr	r3, [pc, #56]	; (800fab8 <BSP_TS_Init+0x7c>)
 800fa80:	2208      	movs	r2, #8
 800fa82:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fa84:	4b0a      	ldr	r3, [pc, #40]	; (800fab0 <BSP_TS_Init+0x74>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	4a0a      	ldr	r2, [pc, #40]	; (800fab4 <BSP_TS_Init+0x78>)
 800fa8c:	7812      	ldrb	r2, [r2, #0]
 800fa8e:	b292      	uxth	r2, r2
 800fa90:	4610      	mov	r0, r2
 800fa92:	4798      	blx	r3
 800fa94:	e001      	b.n	800fa9a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fa96:	2303      	movs	r3, #3
 800fa98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	2000859c 	.word	0x2000859c
 800faa8:	2000859e 	.word	0x2000859e
 800faac:	2000005c 	.word	0x2000005c
 800fab0:	20008598 	.word	0x20008598
 800fab4:	200085a1 	.word	0x200085a1
 800fab8:	200085a0 	.word	0x200085a0

0800fabc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fabc:	b590      	push	{r4, r7, lr}
 800fabe:	b097      	sub	sp, #92	; 0x5c
 800fac0:	af02      	add	r7, sp, #8
 800fac2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fad6:	4b97      	ldr	r3, [pc, #604]	; (800fd34 <BSP_TS_GetState+0x278>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	4a96      	ldr	r2, [pc, #600]	; (800fd38 <BSP_TS_GetState+0x27c>)
 800fade:	7812      	ldrb	r2, [r2, #0]
 800fae0:	b292      	uxth	r2, r2
 800fae2:	4610      	mov	r0, r2
 800fae4:	4798      	blx	r3
 800fae6:	4603      	mov	r3, r0
 800fae8:	461a      	mov	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f000 81a8 	beq.w	800fe48 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800faf8:	2300      	movs	r3, #0
 800fafa:	64bb      	str	r3, [r7, #72]	; 0x48
 800fafc:	e197      	b.n	800fe2e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800fafe:	4b8d      	ldr	r3, [pc, #564]	; (800fd34 <BSP_TS_GetState+0x278>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	4a8c      	ldr	r2, [pc, #560]	; (800fd38 <BSP_TS_GetState+0x27c>)
 800fb06:	7812      	ldrb	r2, [r2, #0]
 800fb08:	b290      	uxth	r0, r2
 800fb0a:	f107 0120 	add.w	r1, r7, #32
 800fb0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb10:	0052      	lsls	r2, r2, #1
 800fb12:	188c      	adds	r4, r1, r2
 800fb14:	f107 0114 	add.w	r1, r7, #20
 800fb18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb1a:	0052      	lsls	r2, r2, #1
 800fb1c:	440a      	add	r2, r1
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fb22:	4b86      	ldr	r3, [pc, #536]	; (800fd3c <BSP_TS_GetState+0x280>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d11b      	bne.n	800fb62 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800fb2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb2c:	005b      	lsls	r3, r3, #1
 800fb2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fb32:	4413      	add	r3, r2
 800fb34:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fb38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb3a:	005b      	lsls	r3, r3, #1
 800fb3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fb40:	440b      	add	r3, r1
 800fb42:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fb46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fb4e:	4413      	add	r3, r2
 800fb50:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fb54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fb5c:	440b      	add	r3, r1
 800fb5e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800fb62:	4b76      	ldr	r3, [pc, #472]	; (800fd3c <BSP_TS_GetState+0x280>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0302 	and.w	r3, r3, #2
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d010      	beq.n	800fb90 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800fb6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fb76:	4413      	add	r3, r2
 800fb78:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800fb7c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fb8a:	440b      	add	r3, r1
 800fb8c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800fb90:	4b6a      	ldr	r3, [pc, #424]	; (800fd3c <BSP_TS_GetState+0x280>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	f003 0304 	and.w	r3, r3, #4
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d010      	beq.n	800fbbe <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800fb9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fba4:	4413      	add	r3, r2
 800fba6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800fbaa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fbb8:	440b      	add	r3, r1
 800fbba:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800fbbe:	4b5f      	ldr	r3, [pc, #380]	; (800fd3c <BSP_TS_GetState+0x280>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 0308 	and.w	r3, r3, #8
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d01b      	beq.n	800fc02 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800fbca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbda:	005b      	lsls	r3, r3, #1
 800fbdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fbe0:	440b      	add	r3, r1
 800fbe2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800fbe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fbee:	4413      	add	r3, r2
 800fbf0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fbfc:	440b      	add	r3, r1
 800fbfe:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc04:	005b      	lsls	r3, r3, #1
 800fc06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc0a:	4413      	add	r3, r2
 800fc0c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fc10:	4619      	mov	r1, r3
 800fc12:	4a4b      	ldr	r2, [pc, #300]	; (800fd40 <BSP_TS_GetState+0x284>)
 800fc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc1a:	4299      	cmp	r1, r3
 800fc1c:	d90e      	bls.n	800fc3c <BSP_TS_GetState+0x180>
 800fc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc26:	4413      	add	r3, r2
 800fc28:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800fc2c:	4944      	ldr	r1, [pc, #272]	; (800fd40 <BSP_TS_GetState+0x284>)
 800fc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	e00d      	b.n	800fc58 <BSP_TS_GetState+0x19c>
 800fc3c:	4a40      	ldr	r2, [pc, #256]	; (800fd40 <BSP_TS_GetState+0x284>)
 800fc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fc4e:	440b      	add	r3, r1
 800fc50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800fc5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc64:	4413      	add	r3, r2
 800fc66:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4a35      	ldr	r2, [pc, #212]	; (800fd44 <BSP_TS_GetState+0x288>)
 800fc6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc74:	4299      	cmp	r1, r3
 800fc76:	d90e      	bls.n	800fc96 <BSP_TS_GetState+0x1da>
 800fc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc80:	4413      	add	r3, r2
 800fc82:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800fc86:	492f      	ldr	r1, [pc, #188]	; (800fd44 <BSP_TS_GetState+0x288>)
 800fc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	e00d      	b.n	800fcb2 <BSP_TS_GetState+0x1f6>
 800fc96:	4a2b      	ldr	r2, [pc, #172]	; (800fd44 <BSP_TS_GetState+0x288>)
 800fc98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fca2:	005b      	lsls	r3, r3, #1
 800fca4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fca8:	440b      	add	r3, r1
 800fcaa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800fcb6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fcba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fcbe:	4413      	add	r3, r2
 800fcc0:	2b05      	cmp	r3, #5
 800fcc2:	dd17      	ble.n	800fcf4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800fcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fccc:	4413      	add	r3, r2
 800fcce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	4a1a      	ldr	r2, [pc, #104]	; (800fd40 <BSP_TS_GetState+0x284>)
 800fcd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800fcdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fce4:	4413      	add	r3, r2
 800fce6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fcea:	4619      	mov	r1, r3
 800fcec:	4a15      	ldr	r2, [pc, #84]	; (800fd44 <BSP_TS_GetState+0x288>)
 800fcee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800fcf4:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <BSP_TS_GetState+0x27c>)
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b70      	cmp	r3, #112	; 0x70
 800fcfa:	d125      	bne.n	800fd48 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800fcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd04:	4413      	add	r3, r2
 800fd06:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd0e:	005b      	lsls	r3, r3, #1
 800fd10:	4413      	add	r3, r2
 800fd12:	460a      	mov	r2, r1
 800fd14:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800fd16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd1e:	4413      	add	r3, r2
 800fd20:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd28:	3304      	adds	r3, #4
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	4413      	add	r3, r2
 800fd2e:	460a      	mov	r2, r1
 800fd30:	809a      	strh	r2, [r3, #4]
 800fd32:	e02c      	b.n	800fd8e <BSP_TS_GetState+0x2d2>
 800fd34:	20008598 	.word	0x20008598
 800fd38:	200085a1 	.word	0x200085a1
 800fd3c:	200085a0 	.word	0x200085a0
 800fd40:	200085a4 	.word	0x200085a4
 800fd44:	200085b8 	.word	0x200085b8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800fd48:	4b42      	ldr	r3, [pc, #264]	; (800fe54 <BSP_TS_GetState+0x398>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4a42      	ldr	r2, [pc, #264]	; (800fe58 <BSP_TS_GetState+0x39c>)
 800fd50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd56:	fb03 f301 	mul.w	r3, r3, r1
 800fd5a:	0b1b      	lsrs	r3, r3, #12
 800fd5c:	b299      	uxth	r1, r3
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	4413      	add	r3, r2
 800fd66:	460a      	mov	r2, r1
 800fd68:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800fd6a:	4b3c      	ldr	r3, [pc, #240]	; (800fe5c <BSP_TS_GetState+0x3a0>)
 800fd6c:	881b      	ldrh	r3, [r3, #0]
 800fd6e:	4619      	mov	r1, r3
 800fd70:	4a3b      	ldr	r2, [pc, #236]	; (800fe60 <BSP_TS_GetState+0x3a4>)
 800fd72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd78:	fb03 f301 	mul.w	r3, r3, r1
 800fd7c:	0b1b      	lsrs	r3, r3, #12
 800fd7e:	b299      	uxth	r1, r3
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd84:	3304      	adds	r3, #4
 800fd86:	005b      	lsls	r3, r3, #1
 800fd88:	4413      	add	r3, r2
 800fd8a:	460a      	mov	r2, r1
 800fd8c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800fd8e:	4b35      	ldr	r3, [pc, #212]	; (800fe64 <BSP_TS_GetState+0x3a8>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	b298      	uxth	r0, r3
 800fd94:	f107 010c 	add.w	r1, r7, #12
 800fd98:	f107 0210 	add.w	r2, r7, #16
 800fd9c:	f107 0308 	add.w	r3, r7, #8
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	460b      	mov	r3, r1
 800fda4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fda6:	f00a fd93 	bl	801a8d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	b2d9      	uxtb	r1, r3
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb2:	4413      	add	r3, r2
 800fdb4:	3316      	adds	r3, #22
 800fdb6:	460a      	mov	r2, r1
 800fdb8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	b2d9      	uxtb	r1, r3
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc2:	4413      	add	r3, r2
 800fdc4:	3320      	adds	r3, #32
 800fdc6:	460a      	mov	r2, r1
 800fdc8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d827      	bhi.n	800fe20 <BSP_TS_GetState+0x364>
 800fdd0:	a201      	add	r2, pc, #4	; (adr r2, 800fdd8 <BSP_TS_GetState+0x31c>)
 800fdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd6:	bf00      	nop
 800fdd8:	0800fde9 	.word	0x0800fde9
 800fddc:	0800fdf7 	.word	0x0800fdf7
 800fde0:	0800fe05 	.word	0x0800fe05
 800fde4:	0800fe13 	.word	0x0800fe13
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdec:	4413      	add	r3, r2
 800fdee:	331b      	adds	r3, #27
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	701a      	strb	r2, [r3, #0]
          break;
 800fdf4:	e018      	b.n	800fe28 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdfa:	4413      	add	r3, r2
 800fdfc:	331b      	adds	r3, #27
 800fdfe:	2202      	movs	r2, #2
 800fe00:	701a      	strb	r2, [r3, #0]
          break;
 800fe02:	e011      	b.n	800fe28 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe08:	4413      	add	r3, r2
 800fe0a:	331b      	adds	r3, #27
 800fe0c:	2203      	movs	r2, #3
 800fe0e:	701a      	strb	r2, [r3, #0]
          break;
 800fe10:	e00a      	b.n	800fe28 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe16:	4413      	add	r3, r2
 800fe18:	331b      	adds	r3, #27
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	701a      	strb	r2, [r3, #0]
          break;
 800fe1e:	e003      	b.n	800fe28 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800fe26:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800fe28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe36:	4293      	cmp	r3, r2
 800fe38:	f4ff ae61 	bcc.w	800fafe <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 f813 	bl	800fe68 <BSP_TS_Get_GestureId>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800fe48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3754      	adds	r7, #84	; 0x54
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd90      	pop	{r4, r7, pc}
 800fe54:	2000859c 	.word	0x2000859c
 800fe58:	200085a4 	.word	0x200085a4
 800fe5c:	2000859e 	.word	0x2000859e
 800fe60:	200085b8 	.word	0x200085b8
 800fe64:	200085a1 	.word	0x200085a1

0800fe68 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800fe70:	2300      	movs	r3, #0
 800fe72:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800fe78:	4b1f      	ldr	r3, [pc, #124]	; (800fef8 <BSP_TS_Get_GestureId+0x90>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	f107 0208 	add.w	r2, r7, #8
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f00a fd0a 	bl	801a89e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b18      	cmp	r3, #24
 800fe8e:	d01b      	beq.n	800fec8 <BSP_TS_Get_GestureId+0x60>
 800fe90:	2b18      	cmp	r3, #24
 800fe92:	d806      	bhi.n	800fea2 <BSP_TS_Get_GestureId+0x3a>
 800fe94:	2b10      	cmp	r3, #16
 800fe96:	d00f      	beq.n	800feb8 <BSP_TS_Get_GestureId+0x50>
 800fe98:	2b14      	cmp	r3, #20
 800fe9a:	d011      	beq.n	800fec0 <BSP_TS_Get_GestureId+0x58>
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d007      	beq.n	800feb0 <BSP_TS_Get_GestureId+0x48>
 800fea0:	e022      	b.n	800fee8 <BSP_TS_Get_GestureId+0x80>
 800fea2:	2b40      	cmp	r3, #64	; 0x40
 800fea4:	d018      	beq.n	800fed8 <BSP_TS_Get_GestureId+0x70>
 800fea6:	2b49      	cmp	r3, #73	; 0x49
 800fea8:	d01a      	beq.n	800fee0 <BSP_TS_Get_GestureId+0x78>
 800feaa:	2b1c      	cmp	r3, #28
 800feac:	d010      	beq.n	800fed0 <BSP_TS_Get_GestureId+0x68>
 800feae:	e01b      	b.n	800fee8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800feb6:	e01a      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800febe:	e016      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2202      	movs	r2, #2
 800fec4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fec6:	e012      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2203      	movs	r2, #3
 800fecc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fece:	e00e      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2204      	movs	r2, #4
 800fed4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fed6:	e00a      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2205      	movs	r2, #5
 800fedc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fede:	e006      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2206      	movs	r2, #6
 800fee4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fee6:	e002      	b.n	800feee <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800fee8:	2301      	movs	r3, #1
 800feea:	73fb      	strb	r3, [r7, #15]
      break;
 800feec:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800feee:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	200085a1 	.word	0x200085a1

0800fefc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ff00:	f009 fef2 	bl	8019ce8 <touchgfx_init>
}
 800ff04:	bf00      	nop
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ff0c:	f009 ff16 	bl	8019d3c <touchgfx_taskEntry>
}
 800ff10:	bf00      	nop
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
    {
 800ff1c:	4a04      	ldr	r2, [pc, #16]	; (800ff30 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	601a      	str	r2, [r3, #0]
    }
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	0802cd0c 	.word	0x0802cd0c

0800ff34 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    }
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7ff ffe9 	bl	800ff14 <_ZN8touchgfx12FontProviderD1Ev>
 800ff42:	2104      	movs	r1, #4
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f01b f992 	bl	802b26e <_ZdlPvj>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ff60:	887b      	ldrh	r3, [r7, #2]
 800ff62:	2b07      	cmp	r3, #7
 800ff64:	d83a      	bhi.n	800ffdc <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800ff66:	a201      	add	r2, pc, #4	; (adr r2, 800ff6c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800ff68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff6c:	0800ff8d 	.word	0x0800ff8d
 800ff70:	0800ff97 	.word	0x0800ff97
 800ff74:	0800ffa1 	.word	0x0800ffa1
 800ff78:	0800ffab 	.word	0x0800ffab
 800ff7c:	0800ffb5 	.word	0x0800ffb5
 800ff80:	0800ffbf 	.word	0x0800ffbf
 800ff84:	0800ffc9 	.word	0x0800ffc9
 800ff88:	0800ffd3 	.word	0x0800ffd3
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ff8c:	f007 f9f6 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ff90:	4603      	mov	r3, r0
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	e023      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ff96:	f007 f9f1 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	e01e      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ffa0:	f007 f9ec 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	e019      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ffaa:	f007 f9e7 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	e014      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800ffb4:	f007 f9e2 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	e00f      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800ffbe:	f007 f9dd 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	e00a      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800ffc8:	f007 f9d8 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	695b      	ldr	r3, [r3, #20]
 800ffd0:	e005      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800ffd2:	f007 f9d3 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	e000      	b.n	800ffde <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ffdc:	2300      	movs	r3, #0
    }
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop

0800ffe8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	4a05      	ldr	r2, [pc, #20]	; (8010008 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7ff ff8b 	bl	800ff14 <_ZN8touchgfx12FontProviderD1Ev>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	0802ccf8 	.word	0x0802ccf8

0801000c <_ZN23ApplicationFontProviderD0Ev>:
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7ff ffe7 	bl	800ffe8 <_ZN23ApplicationFontProviderD1Ev>
 801001a:	2104      	movs	r1, #4
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f01b f926 	bl	802b26e <_ZdlPvj>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	4a04      	ldr	r2, [pc, #16]	; (8010048 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	370c      	adds	r7, #12
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	0802ffbc 	.word	0x0802ffbc

0801004c <_ZN8touchgfx4FontD0Ev>:
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff ffe9 	bl	801002c <_ZN8touchgfx4FontD1Ev>
 801005a:	2110      	movs	r1, #16
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f01b f906 	bl	802b26e <_ZdlPvj>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b087      	sub	sp, #28
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3308      	adds	r3, #8
 8010086:	681c      	ldr	r4, [r3, #0]
 8010088:	f107 030f 	add.w	r3, r7, #15
 801008c:	f107 0210 	add.w	r2, r7, #16
 8010090:	8879      	ldrh	r1, [r7, #2]
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	47a0      	blx	r4
 8010096:	6178      	str	r0, [r7, #20]
        return glyph;
 8010098:	697b      	ldr	r3, [r7, #20]
    }
 801009a:	4618      	mov	r0, r3
 801009c:	371c      	adds	r7, #28
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd90      	pop	{r4, r7, pc}

080100a2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	895b      	ldrh	r3, [r3, #10]
    }
 80100ae:	4618      	mov	r0, r3
 80100b0:	370c      	adds	r7, #12
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80100ba:	b480      	push	{r7}
 80100bc:	b083      	sub	sp, #12
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	899b      	ldrh	r3, [r3, #12]
    }
 80100c6:	4618      	mov	r0, r3
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80100d2:	b480      	push	{r7}
 80100d4:	b083      	sub	sp, #12
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	889b      	ldrh	r3, [r3, #4]
    }
 80100de:	4618      	mov	r0, r3
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	889a      	ldrh	r2, [r3, #4]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	799b      	ldrb	r3, [r3, #6]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	4413      	add	r3, r2
 80100fe:	b29b      	uxth	r3, r3
    }
 8010100:	4618      	mov	r0, r3
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	79db      	ldrb	r3, [r3, #7]
 8010118:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801011c:	b2db      	uxtb	r3, r3
    }
 801011e:	4618      	mov	r0, r3
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr

0801012a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801012a:	b480      	push	{r7}
 801012c:	b083      	sub	sp, #12
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	79db      	ldrb	r3, [r3, #7]
 8010136:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801013a:	b2db      	uxtb	r3, r3
    }
 801013c:	4618      	mov	r0, r3
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	4a05      	ldr	r2, [pc, #20]	; (8010168 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ff67 	bl	801002c <_ZN8touchgfx4FontD1Ev>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	08030074 	.word	0x08030074

0801016c <_ZN8touchgfx9ConstFontD0Ev>:
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff ffe7 	bl	8010148 <_ZN8touchgfx9ConstFontD1Ev>
 801017a:	2118      	movs	r1, #24
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f01b f876 	bl	802b26e <_ZdlPvj>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	4a05      	ldr	r2, [pc, #20]	; (80101ac <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	601a      	str	r2, [r3, #0]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff ffd3 	bl	8010148 <_ZN8touchgfx9ConstFontD1Ev>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4618      	mov	r0, r3
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	0802cd50 	.word	0x0802cd50

080101b0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ffe7 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 80101be:	2124      	movs	r1, #36	; 0x24
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f01b f854 	bl	802b26e <_ZdlPvj>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f82d 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80101de:	4b08      	ldr	r3, [pc, #32]	; (8010200 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	4b08      	ldr	r3, [pc, #32]	; (8010204 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 80101e4:	6819      	ldr	r1, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	440b      	add	r3, r1
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	4413      	add	r3, r2
 80101f4:	681b      	ldr	r3, [r3, #0]
    }
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	2000c068 	.word	0x2000c068
 8010204:	2000c060 	.word	0x2000c060

08010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f811 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8010216:	4b07      	ldr	r3, [pc, #28]	; (8010234 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	4413      	add	r3, r2
 8010222:	785b      	ldrb	r3, [r3, #1]
 8010224:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010228:	b2db      	uxtb	r3, r3
    }
 801022a:	4618      	mov	r0, r3
 801022c:	3708      	adds	r7, #8
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	2000c060 	.word	0x2000c060

08010238 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010240:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d105      	bne.n	8010254 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8010248:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 801024a:	4a0c      	ldr	r2, [pc, #48]	; (801027c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 801024c:	21de      	movs	r1, #222	; 0xde
 801024e:	480c      	ldr	r0, [pc, #48]	; (8010280 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010250:	f01b f838 	bl	802b2c4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	881a      	ldrh	r2, [r3, #0]
 8010258:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	429a      	cmp	r2, r3
 801025e:	d305      	bcc.n	801026c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010260:	4b09      	ldr	r3, [pc, #36]	; (8010288 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010262:	4a06      	ldr	r2, [pc, #24]	; (801027c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010264:	21df      	movs	r1, #223	; 0xdf
 8010266:	4806      	ldr	r0, [pc, #24]	; (8010280 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010268:	f01b f82c 	bl	802b2c4 <__assert_func>
    }
 801026c:	bf00      	nop
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	2000c060 	.word	0x2000c060
 8010278:	0802c378 	.word	0x0802c378
 801027c:	0802cd18 	.word	0x0802cd18
 8010280:	0802c3bc 	.word	0x0802c3bc
 8010284:	2000c064 	.word	0x2000c064
 8010288:	0802c400 	.word	0x0802c400

0801028c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7b5b      	ldrb	r3, [r3, #13]
 8010298:	021b      	lsls	r3, r3, #8
 801029a:	b21b      	sxth	r3, r3
 801029c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80102a0:	b21a      	sxth	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	7adb      	ldrb	r3, [r3, #11]
 80102a6:	b21b      	sxth	r3, r3
 80102a8:	4313      	orrs	r3, r2
 80102aa:	b21b      	sxth	r3, r3
 80102ac:	b29b      	uxth	r3, r3
    }
 80102ae:	4618      	mov	r0, r3
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80102ba:	b480      	push	{r7}
 80102bc:	b083      	sub	sp, #12
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
    }
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
	...

080102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b08c      	sub	sp, #48	; 0x30
 80102d8:	af08      	add	r7, sp, #32
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	4611      	mov	r1, r2
 80102e0:	461a      	mov	r2, r3
 80102e2:	460b      	mov	r3, r1
 80102e4:	80fb      	strh	r3, [r7, #6]
 80102e6:	4613      	mov	r3, r2
 80102e8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	88b9      	ldrh	r1, [r7, #4]
 80102ee:	88fa      	ldrh	r2, [r7, #6]
 80102f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80102f2:	9306      	str	r3, [sp, #24]
 80102f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80102f6:	9305      	str	r3, [sp, #20]
 80102f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80102fc:	9304      	str	r3, [sp, #16]
 80102fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010302:	9303      	str	r3, [sp, #12]
 8010304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010308:	9302      	str	r3, [sp, #8]
 801030a:	7f3b      	ldrb	r3, [r7, #28]
 801030c:	9301      	str	r3, [sp, #4]
 801030e:	7e3b      	ldrb	r3, [r7, #24]
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	460b      	mov	r3, r1
 8010314:	68b9      	ldr	r1, [r7, #8]
 8010316:	f00f fc8f 	bl	801fc38 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801031a:	4a08      	ldr	r2, [pc, #32]	; (801033c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	601a      	str	r2, [r3, #0]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010324:	619a      	str	r2, [r3, #24]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801032a:	61da      	str	r2, [r3, #28]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010330:	621a      	str	r2, [r3, #32]
{
}
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	0802cd50 	.word	0x0802cd50

08010340 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010340:	b480      	push	{r7}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	699b      	ldr	r3, [r3, #24]
 801034e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	889b      	ldrh	r3, [r3, #4]
 8010354:	0adb      	lsrs	r3, r3, #11
 8010356:	b29b      	uxth	r3, r3
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	4413      	add	r3, r2
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4413      	add	r3, r2
}
 8010366:	4618      	mov	r0, r3
 8010368:	3714      	adds	r7, #20
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr

08010372 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b086      	sub	sp, #24
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	460b      	mov	r3, r1
 801037c:	607a      	str	r2, [r7, #4]
 801037e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7b1b      	ldrb	r3, [r3, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801038e:	2300      	movs	r3, #0
 8010390:	e023      	b.n	80103da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff ff7a 	bl	801028c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8010398:	4603      	mov	r3, r0
 801039a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801039c:	8abb      	ldrh	r3, [r7, #20]
 801039e:	82fb      	strh	r3, [r7, #22]
 80103a0:	8afa      	ldrh	r2, [r7, #22]
 80103a2:	8abb      	ldrh	r3, [r7, #20]
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	7b09      	ldrb	r1, [r1, #12]
 80103a8:	440b      	add	r3, r1
 80103aa:	429a      	cmp	r2, r3
 80103ac:	da14      	bge.n	80103d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	69da      	ldr	r2, [r3, #28]
 80103b2:	8afb      	ldrh	r3, [r7, #22]
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	4413      	add	r3, r2
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	897a      	ldrh	r2, [r7, #10]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d107      	bne.n	80103d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	69da      	ldr	r2, [r3, #28]
 80103c4:	8afb      	ldrh	r3, [r7, #22]
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80103ce:	e004      	b.n	80103da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80103d0:	8afb      	ldrh	r3, [r7, #22]
 80103d2:	3301      	adds	r3, #1
 80103d4:	82fb      	strh	r3, [r7, #22]
 80103d6:	e7e3      	b.n	80103a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3718      	adds	r7, #24
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
	...

080103e4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80103e4:	b580      	push	{r7, lr}
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	4801      	ldr	r0, [pc, #4]	; (80103f0 <__tcf_0+0xc>)
 80103ea:	f7ff fecf 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	200085cc 	.word	0x200085cc

080103f4 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08a      	sub	sp, #40	; 0x28
 80103f8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80103fa:	4b15      	ldr	r3, [pc, #84]	; (8010450 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	2b00      	cmp	r3, #0
 8010404:	d11f      	bne.n	8010446 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 8010406:	2300      	movs	r3, #0
 8010408:	9309      	str	r3, [sp, #36]	; 0x24
 801040a:	2300      	movs	r3, #0
 801040c:	9308      	str	r3, [sp, #32]
 801040e:	233f      	movs	r3, #63	; 0x3f
 8010410:	9307      	str	r3, [sp, #28]
 8010412:	4b10      	ldr	r3, [pc, #64]	; (8010454 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 8010414:	9306      	str	r3, [sp, #24]
 8010416:	4b10      	ldr	r3, [pc, #64]	; (8010458 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 8010418:	9305      	str	r3, [sp, #20]
 801041a:	2301      	movs	r3, #1
 801041c:	9304      	str	r3, [sp, #16]
 801041e:	2300      	movs	r3, #0
 8010420:	9303      	str	r3, [sp, #12]
 8010422:	2301      	movs	r3, #1
 8010424:	9302      	str	r3, [sp, #8]
 8010426:	2304      	movs	r3, #4
 8010428:	9301      	str	r3, [sp, #4]
 801042a:	2300      	movs	r3, #0
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	230a      	movs	r3, #10
 8010430:	2204      	movs	r2, #4
 8010432:	490a      	ldr	r1, [pc, #40]	; (801045c <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 8010434:	480a      	ldr	r0, [pc, #40]	; (8010460 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 8010436:	f7ff ff4d 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 801043c:	2201      	movs	r2, #1
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	4808      	ldr	r0, [pc, #32]	; (8010464 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 8010442:	f01a ff5d 	bl	802b300 <atexit>
    return Asap_Bold_10_4bpp;
 8010446:	4b06      	ldr	r3, [pc, #24]	; (8010460 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 8010448:	4618      	mov	r0, r3
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	200085f0 	.word	0x200085f0
 8010454:	080359cc 	.word	0x080359cc
 8010458:	0802cd9c 	.word	0x0802cd9c
 801045c:	080359f8 	.word	0x080359f8
 8010460:	200085cc 	.word	0x200085cc
 8010464:	080103e5 	.word	0x080103e5

08010468 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 12, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__tcf_0+0xc>)
 801046e:	f7ff fe8d 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010472:	bd80      	pop	{r7, pc}
 8010474:	200085f4 	.word	0x200085f4

08010478 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b08a      	sub	sp, #40	; 0x28
 801047c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 12, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801047e:	4b15      	ldr	r3, [pc, #84]	; (80104d4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d11f      	bne.n	80104ca <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801048a:	2300      	movs	r3, #0
 801048c:	9309      	str	r3, [sp, #36]	; 0x24
 801048e:	2300      	movs	r3, #0
 8010490:	9308      	str	r3, [sp, #32]
 8010492:	233f      	movs	r3, #63	; 0x3f
 8010494:	9307      	str	r3, [sp, #28]
 8010496:	4b10      	ldr	r3, [pc, #64]	; (80104d8 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 8010498:	9306      	str	r3, [sp, #24]
 801049a:	4b10      	ldr	r3, [pc, #64]	; (80104dc <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 801049c:	9305      	str	r3, [sp, #20]
 801049e:	2301      	movs	r3, #1
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	2300      	movs	r3, #0
 80104a4:	9303      	str	r3, [sp, #12]
 80104a6:	2301      	movs	r3, #1
 80104a8:	9302      	str	r3, [sp, #8]
 80104aa:	2304      	movs	r3, #4
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	2300      	movs	r3, #0
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	230c      	movs	r3, #12
 80104b4:	220c      	movs	r2, #12
 80104b6:	490a      	ldr	r1, [pc, #40]	; (80104e0 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 80104b8:	480a      	ldr	r0, [pc, #40]	; (80104e4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 80104ba:	f7ff ff0b 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80104be:	4b05      	ldr	r3, [pc, #20]	; (80104d4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 80104c0:	2201      	movs	r2, #1
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	4808      	ldr	r0, [pc, #32]	; (80104e8 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 80104c6:	f01a ff1b 	bl	802b300 <atexit>
    return Asap_Bold_12_4bpp;
 80104ca:	4b06      	ldr	r3, [pc, #24]	; (80104e4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20008618 	.word	0x20008618
 80104d8:	080359d0 	.word	0x080359d0
 80104dc:	0802cda0 	.word	0x0802cda0
 80104e0:	08035a30 	.word	0x08035a30
 80104e4:	200085f4 	.word	0x200085f4
 80104e8:	08010469 	.word	0x08010469

080104ec <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 55, 18, 4, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	4801      	ldr	r0, [pc, #4]	; (80104f8 <__tcf_0+0xc>)
 80104f2:	f7ff fe4b 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	2000861c 	.word	0x2000861c

080104fc <_Z25getFont_Asap_Bold_18_4bppv>:
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	; 0x28
 8010500:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 55, 18, 4, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 8010502:	4b15      	ldr	r3, [pc, #84]	; (8010558 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b00      	cmp	r3, #0
 801050c:	d11f      	bne.n	801054e <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 801050e:	2300      	movs	r3, #0
 8010510:	9309      	str	r3, [sp, #36]	; 0x24
 8010512:	2300      	movs	r3, #0
 8010514:	9308      	str	r3, [sp, #32]
 8010516:	2300      	movs	r3, #0
 8010518:	9307      	str	r3, [sp, #28]
 801051a:	4b10      	ldr	r3, [pc, #64]	; (801055c <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 801051c:	9306      	str	r3, [sp, #24]
 801051e:	4b10      	ldr	r3, [pc, #64]	; (8010560 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 8010520:	9305      	str	r3, [sp, #20]
 8010522:	2301      	movs	r3, #1
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	2300      	movs	r3, #0
 8010528:	9303      	str	r3, [sp, #12]
 801052a:	2301      	movs	r3, #1
 801052c:	9302      	str	r3, [sp, #8]
 801052e:	2304      	movs	r3, #4
 8010530:	9301      	str	r3, [sp, #4]
 8010532:	2304      	movs	r3, #4
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	2312      	movs	r3, #18
 8010538:	2237      	movs	r2, #55	; 0x37
 801053a:	490a      	ldr	r1, [pc, #40]	; (8010564 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 801053c:	480a      	ldr	r0, [pc, #40]	; (8010568 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 801053e:	f7ff fec9 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010542:	4b05      	ldr	r3, [pc, #20]	; (8010558 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010544:	2201      	movs	r2, #1
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	4808      	ldr	r0, [pc, #32]	; (801056c <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 801054a:	f01a fed9 	bl	802b300 <atexit>
    return Asap_Bold_18_4bpp;
 801054e:	4b06      	ldr	r3, [pc, #24]	; (8010568 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 8010550:	4618      	mov	r0, r3
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	20008640 	.word	0x20008640
 801055c:	080359d4 	.word	0x080359d4
 8010560:	0802cda4 	.word	0x0802cda4
 8010564:	08035ad8 	.word	0x08035ad8
 8010568:	2000861c 	.word	0x2000861c
 801056c:	080104ed 	.word	0x080104ed

08010570 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010570:	b580      	push	{r7, lr}
 8010572:	af00      	add	r7, sp, #0
 8010574:	4801      	ldr	r0, [pc, #4]	; (801057c <__tcf_0+0xc>)
 8010576:	f7ff fe09 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20008644 	.word	0x20008644

08010580 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b08a      	sub	sp, #40	; 0x28
 8010584:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010586:	4b15      	ldr	r3, [pc, #84]	; (80105dc <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	d11f      	bne.n	80105d2 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 8010592:	2300      	movs	r3, #0
 8010594:	9309      	str	r3, [sp, #36]	; 0x24
 8010596:	2300      	movs	r3, #0
 8010598:	9308      	str	r3, [sp, #32]
 801059a:	233f      	movs	r3, #63	; 0x3f
 801059c:	9307      	str	r3, [sp, #28]
 801059e:	4b10      	ldr	r3, [pc, #64]	; (80105e0 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 80105a0:	9306      	str	r3, [sp, #24]
 80105a2:	4b10      	ldr	r3, [pc, #64]	; (80105e4 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	2301      	movs	r3, #1
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	2300      	movs	r3, #0
 80105ac:	9303      	str	r3, [sp, #12]
 80105ae:	2301      	movs	r3, #1
 80105b0:	9302      	str	r3, [sp, #8]
 80105b2:	2304      	movs	r3, #4
 80105b4:	9301      	str	r3, [sp, #4]
 80105b6:	2300      	movs	r3, #0
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	2315      	movs	r3, #21
 80105bc:	220d      	movs	r2, #13
 80105be:	490a      	ldr	r1, [pc, #40]	; (80105e8 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 80105c0:	480a      	ldr	r0, [pc, #40]	; (80105ec <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 80105c2:	f7ff fe87 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80105c6:	4b05      	ldr	r3, [pc, #20]	; (80105dc <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	601a      	str	r2, [r3, #0]
 80105cc:	4808      	ldr	r0, [pc, #32]	; (80105f0 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 80105ce:	f01a fe97 	bl	802b300 <atexit>
    return Asap_Bold_21_4bpp;
 80105d2:	4b06      	ldr	r3, [pc, #24]	; (80105ec <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	20008668 	.word	0x20008668
 80105e0:	080359e8 	.word	0x080359e8
 80105e4:	0802cda8 	.word	0x0802cda8
 80105e8:	08035ddc 	.word	0x08035ddc
 80105ec:	20008644 	.word	0x20008644
 80105f0:	08010571 	.word	0x08010571

080105f4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 16, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	4801      	ldr	r0, [pc, #4]	; (8010600 <__tcf_0+0xc>)
 80105fa:	f7ff fdc7 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	2000866c 	.word	0x2000866c

08010604 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b08a      	sub	sp, #40	; 0x28
 8010608:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 16, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 801060a:	4b15      	ldr	r3, [pc, #84]	; (8010660 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f003 0301 	and.w	r3, r3, #1
 8010612:	2b00      	cmp	r3, #0
 8010614:	d11f      	bne.n	8010656 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 8010616:	2300      	movs	r3, #0
 8010618:	9309      	str	r3, [sp, #36]	; 0x24
 801061a:	2300      	movs	r3, #0
 801061c:	9308      	str	r3, [sp, #32]
 801061e:	233f      	movs	r3, #63	; 0x3f
 8010620:	9307      	str	r3, [sp, #28]
 8010622:	4b10      	ldr	r3, [pc, #64]	; (8010664 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 8010624:	9306      	str	r3, [sp, #24]
 8010626:	4b10      	ldr	r3, [pc, #64]	; (8010668 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 8010628:	9305      	str	r3, [sp, #20]
 801062a:	2301      	movs	r3, #1
 801062c:	9304      	str	r3, [sp, #16]
 801062e:	2300      	movs	r3, #0
 8010630:	9303      	str	r3, [sp, #12]
 8010632:	2301      	movs	r3, #1
 8010634:	9302      	str	r3, [sp, #8]
 8010636:	2304      	movs	r3, #4
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	2300      	movs	r3, #0
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	231e      	movs	r3, #30
 8010640:	2210      	movs	r2, #16
 8010642:	490a      	ldr	r1, [pc, #40]	; (801066c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 8010644:	480a      	ldr	r0, [pc, #40]	; (8010670 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 8010646:	f7ff fe45 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801064a:	4b05      	ldr	r3, [pc, #20]	; (8010660 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 801064c:	2201      	movs	r2, #1
 801064e:	601a      	str	r2, [r3, #0]
 8010650:	4808      	ldr	r0, [pc, #32]	; (8010674 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 8010652:	f01a fe55 	bl	802b300 <atexit>
    return Asap_Bold_30_4bpp;
 8010656:	4b06      	ldr	r3, [pc, #24]	; (8010670 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 8010658:	4618      	mov	r0, r3
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	20008690 	.word	0x20008690
 8010664:	080359ec 	.word	0x080359ec
 8010668:	0802cdac 	.word	0x0802cdac
 801066c:	08035e94 	.word	0x08035e94
 8010670:	2000866c 	.word	0x2000866c
 8010674:	080105f5 	.word	0x080105f5

08010678 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
 801067c:	4801      	ldr	r0, [pc, #4]	; (8010684 <__tcf_0+0xc>)
 801067e:	f7ff fd85 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010682:	bd80      	pop	{r7, pc}
 8010684:	20008694 	.word	0x20008694

08010688 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08a      	sub	sp, #40	; 0x28
 801068c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 801068e:	4b15      	ldr	r3, [pc, #84]	; (80106e4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f003 0301 	and.w	r3, r3, #1
 8010696:	2b00      	cmp	r3, #0
 8010698:	d11f      	bne.n	80106da <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 801069a:	2300      	movs	r3, #0
 801069c:	9309      	str	r3, [sp, #36]	; 0x24
 801069e:	2300      	movs	r3, #0
 80106a0:	9308      	str	r3, [sp, #32]
 80106a2:	233f      	movs	r3, #63	; 0x3f
 80106a4:	9307      	str	r3, [sp, #28]
 80106a6:	4b10      	ldr	r3, [pc, #64]	; (80106e8 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 80106a8:	9306      	str	r3, [sp, #24]
 80106aa:	4b10      	ldr	r3, [pc, #64]	; (80106ec <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	2301      	movs	r3, #1
 80106b0:	9304      	str	r3, [sp, #16]
 80106b2:	2300      	movs	r3, #0
 80106b4:	9303      	str	r3, [sp, #12]
 80106b6:	2301      	movs	r3, #1
 80106b8:	9302      	str	r3, [sp, #8]
 80106ba:	2304      	movs	r3, #4
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	2300      	movs	r3, #0
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	2328      	movs	r3, #40	; 0x28
 80106c4:	220d      	movs	r2, #13
 80106c6:	490a      	ldr	r1, [pc, #40]	; (80106f0 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 80106c8:	480a      	ldr	r0, [pc, #40]	; (80106f4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 80106ca:	f7ff fe03 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80106ce:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 80106d0:	2201      	movs	r2, #1
 80106d2:	601a      	str	r2, [r3, #0]
 80106d4:	4808      	ldr	r0, [pc, #32]	; (80106f8 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 80106d6:	f01a fe13 	bl	802b300 <atexit>
    return Asap_Bold_40_4bpp;
 80106da:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 80106dc:	4618      	mov	r0, r3
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	200086b8 	.word	0x200086b8
 80106e8:	080359f0 	.word	0x080359f0
 80106ec:	0802cdb0 	.word	0x0802cdb0
 80106f0:	08035f74 	.word	0x08035f74
 80106f4:	20008694 	.word	0x20008694
 80106f8:	08010679 	.word	0x08010679

080106fc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 80106fc:	b580      	push	{r7, lr}
 80106fe:	af00      	add	r7, sp, #0
 8010700:	4801      	ldr	r0, [pc, #4]	; (8010708 <__tcf_0+0xc>)
 8010702:	f7ff fd43 	bl	801018c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010706:	bd80      	pop	{r7, pc}
 8010708:	200086bc 	.word	0x200086bc

0801070c <_Z25getFont_Asap_Bold_60_4bppv>:
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08a      	sub	sp, #40	; 0x28
 8010710:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010712:	4b15      	ldr	r3, [pc, #84]	; (8010768 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d11f      	bne.n	801075e <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 801071e:	2300      	movs	r3, #0
 8010720:	9309      	str	r3, [sp, #36]	; 0x24
 8010722:	2300      	movs	r3, #0
 8010724:	9308      	str	r3, [sp, #32]
 8010726:	233f      	movs	r3, #63	; 0x3f
 8010728:	9307      	str	r3, [sp, #28]
 801072a:	4b10      	ldr	r3, [pc, #64]	; (801076c <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 801072c:	9306      	str	r3, [sp, #24]
 801072e:	4b10      	ldr	r3, [pc, #64]	; (8010770 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 8010730:	9305      	str	r3, [sp, #20]
 8010732:	2300      	movs	r3, #0
 8010734:	9304      	str	r3, [sp, #16]
 8010736:	2300      	movs	r3, #0
 8010738:	9303      	str	r3, [sp, #12]
 801073a:	2301      	movs	r3, #1
 801073c:	9302      	str	r3, [sp, #8]
 801073e:	2304      	movs	r3, #4
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	2300      	movs	r3, #0
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	233c      	movs	r3, #60	; 0x3c
 8010748:	220c      	movs	r2, #12
 801074a:	490a      	ldr	r1, [pc, #40]	; (8010774 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 801074c:	480a      	ldr	r0, [pc, #40]	; (8010778 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 801074e:	f7ff fdc1 	bl	80102d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010752:	4b05      	ldr	r3, [pc, #20]	; (8010768 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010754:	2201      	movs	r2, #1
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	4808      	ldr	r0, [pc, #32]	; (801077c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 801075a:	f01a fdd1 	bl	802b300 <atexit>
    return Asap_Bold_60_4bpp;
 801075e:	4b06      	ldr	r3, [pc, #24]	; (8010778 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 8010760:	4618      	mov	r0, r3
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	200086e0 	.word	0x200086e0
 801076c:	080359f4 	.word	0x080359f4
 8010770:	0802cdb4 	.word	0x0802cdb4
 8010774:	0803602c 	.word	0x0803602c
 8010778:	200086bc 	.word	0x200086bc
 801077c:	080106fd 	.word	0x080106fd

08010780 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	4618      	mov	r0, r3
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
    {
    }
 80107a2:	bf00      	nop
 80107a4:	370c      	adds	r7, #12
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr

080107ae <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80107ae:	b480      	push	{r7}
 80107b0:	b083      	sub	sp, #12
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	6039      	str	r1, [r7, #0]
    {
    }
 80107b8:	bf00      	nop
 80107ba:	370c      	adds	r7, #12
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
    {
    }
 80107ce:	bf00      	nop
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80107da:	b480      	push	{r7}
 80107dc:	b083      	sub	sp, #12
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
 80107e2:	460b      	mov	r3, r1
 80107e4:	70fb      	strb	r3, [r7, #3]
    {
    }
 80107e6:	bf00      	nop
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80107f2:	b480      	push	{r7}
 80107f4:	b083      	sub	sp, #12
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
    {
    }
 80107fa:	bf00      	nop
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010806:	b480      	push	{r7}
 8010808:	b083      	sub	sp, #12
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
    {
    }
 801080e:	bf00      	nop
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
	...

0801081c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
    {
 8010824:	4a04      	ldr	r2, [pc, #16]	; (8010838 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	601a      	str	r2, [r3, #0]
    }
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4618      	mov	r0, r3
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	0802cf40 	.word	0x0802cf40

0801083c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
    }
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f7ff ffe9 	bl	801081c <_ZN8touchgfx15UIEventListenerD1Ev>
 801084a:	2104      	movs	r1, #4
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f01a fd0e 	bl	802b26e <_ZdlPvj>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4618      	mov	r0, r3
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010864:	4a07      	ldr	r2, [pc, #28]	; (8010884 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	605a      	str	r2, [r3, #4]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	721a      	strb	r2, [r3, #8]
    {
    }
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	0802cf20 	.word	0x0802cf20

08010888 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
    {
 8010890:	4a04      	ldr	r2, [pc, #16]	; (80108a4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	601a      	str	r2, [r3, #0]
    }
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	0802cf20 	.word	0x0802cf20

080108a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
    }
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7ff ffe9 	bl	8010888 <_ZN8touchgfx10TransitionD1Ev>
 80108b6:	210c      	movs	r1, #12
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f01a fcd8 	bl	802b26e <_ZdlPvj>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	bf00      	nop
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	bf00      	nop
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	605a      	str	r2, [r3, #4]
    }
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	460b      	mov	r3, r1
 801092a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
    {
 8010940:	4a04      	ldr	r2, [pc, #16]	; (8010954 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	601a      	str	r2, [r3, #0]
    }
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr
 8010954:	0802cf08 	.word	0x0802cf08

08010958 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    }
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff ffe9 	bl	8010938 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010966:	2104      	movs	r1, #4
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f01a fc80 	bl	802b26e <_ZdlPvj>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	4608      	mov	r0, r1
 8010982:	4611      	mov	r1, r2
 8010984:	461a      	mov	r2, r3
 8010986:	4603      	mov	r3, r0
 8010988:	817b      	strh	r3, [r7, #10]
 801098a:	460b      	mov	r3, r1
 801098c:	813b      	strh	r3, [r7, #8]
 801098e:	4613      	mov	r3, r2
 8010990:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	3334      	adds	r3, #52	; 0x34
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801099e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	4798      	blx	r3
        setWidth(width);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	3338      	adds	r3, #56	; 0x38
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109b2:	4611      	mov	r1, r2
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	4798      	blx	r3
        setHeight(height);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	333c      	adds	r3, #60	; 0x3c
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80109c4:	4611      	mov	r1, r2
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	4798      	blx	r3
    }
 80109ca:	bf00      	nop
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
	...

08010a08 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010a08:	b480      	push	{r7}
 8010a0a:	af00      	add	r7, sp, #0
    {
        return instance;
 8010a0c:	4b03      	ldr	r3, [pc, #12]	; (8010a1c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
    }
 8010a10:	4618      	mov	r0, r3
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	2000bfd0 	.word	0x2000bfd0

08010a20 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010a20:	b480      	push	{r7}
 8010a22:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010a24:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d008      	beq.n	8010a42 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010a30:	4b08      	ldr	r3, [pc, #32]	; (8010a54 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d003      	beq.n	8010a42 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010a3a:	4b06      	ldr	r3, [pc, #24]	; (8010a54 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a40:	e002      	b.n	8010a48 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010a42:	4b04      	ldr	r3, [pc, #16]	; (8010a54 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010a48:	4618      	mov	r0, r3
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	2000bfd0 	.word	0x2000bfd0

08010a58 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	4a05      	ldr	r2, [pc, #20]	; (8010a78 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fed7 	bl	801081c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	0802fed4 	.word	0x0802fed4

08010a7c <_ZN8touchgfx11ApplicationD0Ev>:
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff ffe7 	bl	8010a58 <_ZN8touchgfx11ApplicationD1Ev>
 8010a8a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f01a fbed 	bl	802b26e <_ZdlPvj>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	4618      	mov	r0, r3
 8010a98:	3708      	adds	r7, #8
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
	...

08010aa0 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f00e fbfe 	bl	801f2ac <_ZN8touchgfx11ApplicationC1Ev>
 8010ab0:	4a09      	ldr	r2, [pc, #36]	; (8010ad8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4a04      	ldr	r2, [pc, #16]	; (8010adc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010aca:	6013      	str	r3, [r2, #0]
    }
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	0802cecc 	.word	0x0802cecc
 8010adc:	2000c05c 	.word	0x2000c05c

08010ae0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	4a05      	ldr	r2, [pc, #20]	; (8010b00 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff ffb1 	bl	8010a58 <_ZN8touchgfx11ApplicationD1Ev>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	0802cecc 	.word	0x0802cecc

08010b04 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f7ff ffe7 	bl	8010ae0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010b12:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f01a fba9 	bl	802b26e <_ZdlPvj>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b082      	sub	sp, #8
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f804 	bl	8010b3c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010b34:	bf00      	nop
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00f      	beq.n	8010b6e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	330c      	adds	r3, #12
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4610      	mov	r0, r2
 8010b62:	4798      	blx	r3
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e000      	b.n	8010b70 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00e      	beq.n	8010b92 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	3308      	adds	r3, #8
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4610      	mov	r0, r2
 8010b88:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b084      	sub	sp, #16
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010ba6:	f00e fb5f 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4618      	mov	r0, r3
 8010bae:	f00e fb61 	bl	801f274 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d008      	beq.n	8010bcc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	330c      	adds	r3, #12
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4610      	mov	r0, r2
 8010bca:	4798      	blx	r3
    }
    if (*currentTrans)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d007      	beq.n	8010be4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4610      	mov	r0, r2
 8010be2:	4798      	blx	r3
    }
    if (*currentScreen)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d008      	beq.n	8010bfe <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	3314      	adds	r3, #20
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d008      	beq.n	8010c18 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3304      	adds	r3, #4
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4610      	mov	r0, r2
 8010c16:	4798      	blx	r3
    }
    if (*currentScreen)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d007      	beq.n	8010c30 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d008      	beq.n	8010c4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3308      	adds	r3, #8
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4610      	mov	r0, r2
 8010c48:	4798      	blx	r3
    }
}
 8010c4a:	bf00      	nop
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	60f8      	str	r0, [r7, #12]
 8010c5a:	60b9      	str	r1, [r7, #8]
 8010c5c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	330c      	adds	r3, #12
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	4798      	blx	r3
    newPresenter->activate();
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	68b8      	ldr	r0, [r7, #8]
 8010c72:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f00f fc06 	bl	8020488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3310      	adds	r3, #16
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	4798      	blx	r3

    Application::getInstance()->draw();
 8010c88:	f00e faee 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	6813      	ldr	r3, [r2, #0]
 8010c90:	3328      	adds	r3, #40	; 0x28
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4610      	mov	r0, r2
 8010c96:	4798      	blx	r3
}
 8010c98:	bf00      	nop
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	683a      	ldr	r2, [r7, #0]
 8010cae:	601a      	str	r2, [r3, #0]
    }
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	4a08      	ldr	r2, [pc, #32]	; (8010ce8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	601a      	str	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f000 ff0d 	bl	8011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7ff ff01 	bl	8010ae0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	0802ce78 	.word	0x0802ce78

08010cec <_ZN23FrontendApplicationBaseD0Ev>:
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ff ffe1 	bl	8010cbc <_ZN23FrontendApplicationBaseD1Ev>
 8010cfa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f01a fab5 	bl	802b26e <_ZdlPvj>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
	...

08010d10 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fd9e 	bl	801085c <_ZN8touchgfx10TransitionC1Ev>
 8010d20:	4a03      	ldr	r2, [pc, #12]	; (8010d30 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	601a      	str	r2, [r3, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	0802ce58 	.word	0x0802ce58

08010d34 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	4a05      	ldr	r2, [pc, #20]	; (8010d54 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ff fd9f 	bl	8010888 <_ZN8touchgfx10TransitionD1Ev>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	0802ce58 	.word	0x0802ce58

08010d58 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7ff ffe7 	bl	8010d34 <_ZN8touchgfx12NoTransitionD1Ev>
 8010d66:	210c      	movs	r1, #12
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f01a fa80 	bl	802b26e <_ZdlPvj>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2201      	movs	r2, #1
 8010d84:	721a      	strb	r2, [r3, #8]
    }
 8010d86:	bf00      	nop
 8010d88:	370c      	adds	r7, #12
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr

08010d92 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8010d92:	b480      	push	{r7}
 8010d94:	b083      	sub	sp, #12
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	683a      	ldr	r2, [r7, #0]
 8010da0:	605a      	str	r2, [r3, #4]
    }
 8010da2:	bf00      	nop
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
	...

08010db0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fe6e 	bl	8010aa0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010dc4:	4a13      	ldr	r2, [pc, #76]	; (8010e14 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	601a      	str	r2, [r3, #0]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f000 f92b 	bl	801102c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	68ba      	ldr	r2, [r7, #8]
 8010de2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010de6:	f7ff fe0f 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 8010dea:	4602      	mov	r2, r0
 8010dec:	6813      	ldr	r3, [r2, #0]
 8010dee:	3308      	adds	r3, #8
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2100      	movs	r1, #0
 8010df4:	4610      	mov	r0, r2
 8010df6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8010df8:	2000      	movs	r0, #0
 8010dfa:	f006 fa47 	bl	801728c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010dfe:	f7ff fe0f 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 8010e02:	4603      	mov	r3, r0
 8010e04:	4618      	mov	r0, r3
 8010e06:	f013 ff40 	bl	8024c8a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0802ce78 	.word	0x0802ce78

08010e18 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4618      	mov	r0, r3
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	4611      	mov	r1, r2
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7ff ffe9 	bl	8010e18 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	685a      	ldr	r2, [r3, #4]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	683a      	ldr	r2, [r7, #0]
 8010e52:	3308      	adds	r3, #8
 8010e54:	3208      	adds	r2, #8
 8010e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8010e68:	b590      	push	{r4, r7, lr}
 8010e6a:	b089      	sub	sp, #36	; 0x24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010e76:	4b10      	ldr	r3, [pc, #64]	; (8010eb8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8010e78:	61bb      	str	r3, [r7, #24]
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	61fb      	str	r3, [r7, #28]
 8010e7e:	f107 0008 	add.w	r0, r7, #8
 8010e82:	f107 0318 	add.w	r3, r7, #24
 8010e86:	cb0c      	ldmia	r3, {r2, r3}
 8010e88:	6879      	ldr	r1, [r7, #4]
 8010e8a:	f000 f8eb 	bl	8011064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010e8e:	f107 0308 	add.w	r3, r7, #8
 8010e92:	4619      	mov	r1, r3
 8010e94:	4620      	mov	r0, r4
 8010e96:	f7ff ffcb 	bl	8010e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010e9a:	f107 0308 	add.w	r3, r7, #8
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f000 fe26 	bl	8011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010eb0:	bf00      	nop
 8010eb2:	3724      	adds	r7, #36	; 0x24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd90      	pop	{r4, r7, pc}
 8010eb8:	08010ebd 	.word	0x08010ebd

08010ebc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	4b04      	ldr	r3, [pc, #16]	; (8010eec <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010edc:	4804      	ldr	r0, [pc, #16]	; (8010ef0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010ede:	f000 f8e1 	bl	80110a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010ee2:	bf00      	nop
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	2000c050 	.word	0x2000c050
 8010ef0:	2000c04c 	.word	0x2000c04c

08010ef4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWest()
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b089      	sub	sp, #36	; 0x24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionWestImpl);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010f02:	4b10      	ldr	r3, [pc, #64]	; (8010f44 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv+0x50>)
 8010f04:	61bb      	str	r3, [r7, #24]
 8010f06:	2300      	movs	r3, #0
 8010f08:	61fb      	str	r3, [r7, #28]
 8010f0a:	f107 0008 	add.w	r0, r7, #8
 8010f0e:	f107 0318 	add.w	r3, r7, #24
 8010f12:	cb0c      	ldmia	r3, {r2, r3}
 8010f14:	6879      	ldr	r1, [r7, #4]
 8010f16:	f000 f8a5 	bl	8011064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010f1a:	f107 0308 	add.w	r3, r7, #8
 8010f1e:	4619      	mov	r1, r3
 8010f20:	4620      	mov	r0, r4
 8010f22:	f7ff ff85 	bl	8010e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010f26:	f107 0308 	add.w	r3, r7, #8
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 fde0 	bl	8011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010f3c:	bf00      	nop
 8010f3e:	3724      	adds	r7, #36	; 0x24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd90      	pop	{r4, r7, pc}
 8010f44:	08010f49 	.word	0x08010f49

08010f48 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWestImpl()
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af02      	add	r7, sp, #8
 8010f4e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	4b04      	ldr	r3, [pc, #16]	; (8010f78 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x30>)
 8010f68:	4804      	ldr	r0, [pc, #16]	; (8010f7c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x34>)
 8010f6a:	f000 f957 	bl	801121c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010f6e:	bf00      	nop
 8010f70:	3708      	adds	r7, #8
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	2000c050 	.word	0x2000c050
 8010f7c:	2000c04c 	.word	0x2000c04c

08010f80 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8010f80:	b590      	push	{r4, r7, lr}
 8010f82:	b089      	sub	sp, #36	; 0x24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010f8e:	4b10      	ldr	r3, [pc, #64]	; (8010fd0 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8010f90:	61bb      	str	r3, [r7, #24]
 8010f92:	2300      	movs	r3, #0
 8010f94:	61fb      	str	r3, [r7, #28]
 8010f96:	f107 0008 	add.w	r0, r7, #8
 8010f9a:	f107 0318 	add.w	r3, r7, #24
 8010f9e:	cb0c      	ldmia	r3, {r2, r3}
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	f000 f85f 	bl	8011064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010fa6:	f107 0308 	add.w	r3, r7, #8
 8010faa:	4619      	mov	r1, r3
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ff ff3f 	bl	8010e30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010fb2:	f107 0308 	add.w	r3, r7, #8
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 fd9a 	bl	8011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010fc8:	bf00      	nop
 8010fca:	3724      	adds	r7, #36	; 0x24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd90      	pop	{r4, r7, pc}
 8010fd0:	08010fd5 	.word	0x08010fd5

08010fd4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af02      	add	r7, sp, #8
 8010fda:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010fe8:	461a      	mov	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	4b04      	ldr	r3, [pc, #16]	; (8011004 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 8010ff4:	4804      	ldr	r0, [pc, #16]	; (8011008 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 8010ff6:	f000 f9cd 	bl	8011394 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010ffa:	bf00      	nop
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	2000c050 	.word	0x2000c050
 8011008:	2000c04c 	.word	0x2000c04c

0801100c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	4a04      	ldr	r2, [pc, #16]	; (8011028 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	0802cf08 	.word	0x0802cf08

0801102c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff ffe8 	bl	801100c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801103c:	4a08      	ldr	r2, [pc, #32]	; (8011060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	605a      	str	r2, [r3, #4]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	609a      	str	r2, [r3, #8]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	60da      	str	r2, [r3, #12]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	0802ceb4 	.word	0x0802ceb4

08011064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	4639      	mov	r1, r7
 8011070:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff ffc8 	bl	801100c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801107c:	4a08      	ldr	r2, [pc, #32]	; (80110a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	3308      	adds	r3, #8
 801108c:	463a      	mov	r2, r7
 801108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011092:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	0802ceb4 	.word	0x0802ceb4

080110a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b089      	sub	sp, #36	; 0x24
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	689a      	ldr	r2, [r3, #8]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3320      	adds	r3, #32
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4610      	mov	r0, r2
 80110c2:	4798      	blx	r3
 80110c4:	4602      	mov	r2, r0
 80110c6:	f642 130b 	movw	r3, #10507	; 0x290b
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d805      	bhi.n	80110da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80110ce:	4b4e      	ldr	r3, [pc, #312]	; (8011208 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80110d0:	4a4e      	ldr	r2, [pc, #312]	; (801120c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80110d2:	21c2      	movs	r1, #194	; 0xc2
 80110d4:	484e      	ldr	r0, [pc, #312]	; (8011210 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80110d6:	f01a f8f5 	bl	802b2c4 <__assert_func>
 80110da:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685a      	ldr	r2, [r3, #4]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	3320      	adds	r3, #32
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4610      	mov	r0, r2
 80110ec:	4798      	blx	r3
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b0f      	cmp	r3, #15
 80110f2:	d805      	bhi.n	8011100 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80110f4:	4b47      	ldr	r3, [pc, #284]	; (8011214 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80110f6:	4a45      	ldr	r2, [pc, #276]	; (801120c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80110f8:	21c3      	movs	r1, #195	; 0xc3
 80110fa:	4845      	ldr	r0, [pc, #276]	; (8011210 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80110fc:	f01a f8e2 	bl	802b2c4 <__assert_func>
 8011100:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	68da      	ldr	r2, [r3, #12]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3320      	adds	r3, #32
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	4610      	mov	r0, r2
 8011112:	4798      	blx	r3
 8011114:	4603      	mov	r3, r0
 8011116:	2b0b      	cmp	r3, #11
 8011118:	d805      	bhi.n	8011126 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801111a:	4b3f      	ldr	r3, [pc, #252]	; (8011218 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801111c:	4a3b      	ldr	r2, [pc, #236]	; (801120c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801111e:	21c4      	movs	r1, #196	; 0xc4
 8011120:	483b      	ldr	r0, [pc, #236]	; (8011210 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011122:	f01a f8cf 	bl	802b2c4 <__assert_func>
 8011126:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011128:	683a      	ldr	r2, [r7, #0]
 801112a:	68b9      	ldr	r1, [r7, #8]
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f7ff fd34 	bl	8010b9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	2100      	movs	r1, #0
 8011138:	4618      	mov	r0, r3
 801113a:	f000 f9e7 	bl	801150c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801113e:	4603      	mov	r3, r0
 8011140:	4619      	mov	r1, r3
 8011142:	200c      	movs	r0, #12
 8011144:	f7ff fb1c 	bl	8010780 <_ZnwjPv>
 8011148:	4604      	mov	r4, r0
 801114a:	2c00      	cmp	r4, #0
 801114c:	d004      	beq.n	8011158 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801114e:	4620      	mov	r0, r4
 8011150:	f7ff fdde 	bl	8010d10 <_ZN8touchgfx12NoTransitionC1Ev>
 8011154:	4623      	mov	r3, r4
 8011156:	e000      	b.n	801115a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011158:	4623      	mov	r3, r4
 801115a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	2100      	movs	r1, #0
 8011162:	4618      	mov	r0, r3
 8011164:	f000 f9e5 	bl	8011532 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011168:	4603      	mov	r3, r0
 801116a:	4619      	mov	r1, r3
 801116c:	f642 100c 	movw	r0, #10508	; 0x290c
 8011170:	f7ff fb06 	bl	8010780 <_ZnwjPv>
 8011174:	4604      	mov	r4, r0
 8011176:	2c00      	cmp	r4, #0
 8011178:	d004      	beq.n	8011184 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801117a:	4620      	mov	r0, r4
 801117c:	f006 fb3c 	bl	80177f8 <_ZN8MainViewC1Ev>
 8011180:	4623      	mov	r3, r4
 8011182:	e000      	b.n	8011186 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011184:	4623      	mov	r3, r4
 8011186:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	2100      	movs	r1, #0
 801118e:	4618      	mov	r0, r3
 8011190:	f000 f9e2 	bl	8011558 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011194:	4603      	mov	r3, r0
 8011196:	4619      	mov	r1, r3
 8011198:	2010      	movs	r0, #16
 801119a:	f7ff faf1 	bl	8010780 <_ZnwjPv>
 801119e:	4604      	mov	r4, r0
 80111a0:	2c00      	cmp	r4, #0
 80111a2:	d005      	beq.n	80111b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80111a4:	69b9      	ldr	r1, [r7, #24]
 80111a6:	4620      	mov	r0, r4
 80111a8:	f006 fa3e 	bl	8017628 <_ZN13MainPresenterC1ER8MainView>
 80111ac:	4623      	mov	r3, r4
 80111ae:	e000      	b.n	80111b2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80111b0:	4623      	mov	r3, r4
 80111b2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	69fa      	ldr	r2, [r7, #28]
 80111b8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	697a      	ldr	r2, [r7, #20]
 80111be:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	69ba      	ldr	r2, [r7, #24]
 80111c4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	3304      	adds	r3, #4
 80111d0:	e000      	b.n	80111d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80111d2:	2300      	movs	r3, #0
 80111d4:	4619      	mov	r1, r3
 80111d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111d8:	f7ff fd62 	bl	8010ca0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	3304      	adds	r3, #4
 80111e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fdd5 	bl	8010d92 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	6979      	ldr	r1, [r7, #20]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 f9c6 	bl	801157e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80111f2:	69fa      	ldr	r2, [r7, #28]
 80111f4:	6979      	ldr	r1, [r7, #20]
 80111f6:	69b8      	ldr	r0, [r7, #24]
 80111f8:	f7ff fd2b 	bl	8010c52 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80111fc:	697b      	ldr	r3, [r7, #20]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3724      	adds	r7, #36	; 0x24
 8011202:	46bd      	mov	sp, r7
 8011204:	bd90      	pop	{r4, r7, pc}
 8011206:	bf00      	nop
 8011208:	0802c454 	.word	0x0802c454
 801120c:	0802cf60 	.word	0x0802cf60
 8011210:	0802c4e4 	.word	0x0802c4e4
 8011214:	0802c528 	.word	0x0802c528
 8011218:	0802c5cc 	.word	0x0802c5cc

0801121c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	b089      	sub	sp, #36	; 0x24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	689a      	ldr	r2, [r3, #8]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	3320      	adds	r3, #32
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4610      	mov	r0, r2
 801123a:	4798      	blx	r3
 801123c:	4602      	mov	r2, r0
 801123e:	f642 130b 	movw	r3, #10507	; 0x290b
 8011242:	429a      	cmp	r2, r3
 8011244:	d805      	bhi.n	8011252 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8011246:	4b4e      	ldr	r3, [pc, #312]	; (8011380 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011248:	4a4e      	ldr	r2, [pc, #312]	; (8011384 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801124a:	21c2      	movs	r1, #194	; 0xc2
 801124c:	484e      	ldr	r0, [pc, #312]	; (8011388 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801124e:	f01a f839 	bl	802b2c4 <__assert_func>
 8011252:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685a      	ldr	r2, [r3, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	3320      	adds	r3, #32
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4610      	mov	r0, r2
 8011264:	4798      	blx	r3
 8011266:	4603      	mov	r3, r0
 8011268:	2b0f      	cmp	r3, #15
 801126a:	d805      	bhi.n	8011278 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801126c:	4b47      	ldr	r3, [pc, #284]	; (801138c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801126e:	4a45      	ldr	r2, [pc, #276]	; (8011384 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011270:	21c3      	movs	r1, #195	; 0xc3
 8011272:	4845      	ldr	r0, [pc, #276]	; (8011388 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011274:	f01a f826 	bl	802b2c4 <__assert_func>
 8011278:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	68db      	ldr	r3, [r3, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	3320      	adds	r3, #32
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4610      	mov	r0, r2
 801128a:	4798      	blx	r3
 801128c:	4603      	mov	r3, r0
 801128e:	2b53      	cmp	r3, #83	; 0x53
 8011290:	d805      	bhi.n	801129e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011292:	4b3f      	ldr	r3, [pc, #252]	; (8011390 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8011294:	4a3b      	ldr	r2, [pc, #236]	; (8011384 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011296:	21c4      	movs	r1, #196	; 0xc4
 8011298:	483b      	ldr	r0, [pc, #236]	; (8011388 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801129a:	f01a f813 	bl	802b2c4 <__assert_func>
 801129e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80112a0:	683a      	ldr	r2, [r7, #0]
 80112a2:	68b9      	ldr	r1, [r7, #8]
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f7ff fc78 	bl	8010b9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	2100      	movs	r1, #0
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 f972 	bl	801159a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 80112b6:	4603      	mov	r3, r0
 80112b8:	4619      	mov	r1, r3
 80112ba:	2054      	movs	r0, #84	; 0x54
 80112bc:	f7ff fa60 	bl	8010780 <_ZnwjPv>
 80112c0:	4604      	mov	r4, r0
 80112c2:	2c00      	cmp	r4, #0
 80112c4:	d005      	beq.n	80112d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80112c6:	2114      	movs	r1, #20
 80112c8:	4620      	mov	r0, r4
 80112ca:	f000 f99b 	bl	8011604 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 80112ce:	4623      	mov	r3, r4
 80112d0:	e000      	b.n	80112d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 80112d2:	4623      	mov	r3, r4
 80112d4:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	689b      	ldr	r3, [r3, #8]
 80112da:	2100      	movs	r1, #0
 80112dc:	4618      	mov	r0, r3
 80112de:	f000 f928 	bl	8011532 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4619      	mov	r1, r3
 80112e6:	f642 100c 	movw	r0, #10508	; 0x290c
 80112ea:	f7ff fa49 	bl	8010780 <_ZnwjPv>
 80112ee:	4604      	mov	r4, r0
 80112f0:	2c00      	cmp	r4, #0
 80112f2:	d004      	beq.n	80112fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80112f4:	4620      	mov	r0, r4
 80112f6:	f006 fa7f 	bl	80177f8 <_ZN8MainViewC1Ev>
 80112fa:	4623      	mov	r3, r4
 80112fc:	e000      	b.n	8011300 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 80112fe:	4623      	mov	r3, r4
 8011300:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	2100      	movs	r1, #0
 8011308:	4618      	mov	r0, r3
 801130a:	f000 f925 	bl	8011558 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801130e:	4603      	mov	r3, r0
 8011310:	4619      	mov	r1, r3
 8011312:	2010      	movs	r0, #16
 8011314:	f7ff fa34 	bl	8010780 <_ZnwjPv>
 8011318:	4604      	mov	r4, r0
 801131a:	2c00      	cmp	r4, #0
 801131c:	d005      	beq.n	801132a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801131e:	69b9      	ldr	r1, [r7, #24]
 8011320:	4620      	mov	r0, r4
 8011322:	f006 f981 	bl	8017628 <_ZN13MainPresenterC1ER8MainView>
 8011326:	4623      	mov	r3, r4
 8011328:	e000      	b.n	801132c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801132a:	4623      	mov	r3, r4
 801132c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	69fa      	ldr	r2, [r7, #28]
 8011332:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	69ba      	ldr	r2, [r7, #24]
 801133e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	3304      	adds	r3, #4
 801134a:	e000      	b.n	801134e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 801134c:	2300      	movs	r3, #0
 801134e:	4619      	mov	r1, r3
 8011350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011352:	f7ff fca5 	bl	8010ca0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	3304      	adds	r3, #4
 801135a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801135c:	4618      	mov	r0, r3
 801135e:	f7ff fd18 	bl	8010d92 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	6979      	ldr	r1, [r7, #20]
 8011366:	4618      	mov	r0, r3
 8011368:	f000 f909 	bl	801157e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801136c:	69fa      	ldr	r2, [r7, #28]
 801136e:	6979      	ldr	r1, [r7, #20]
 8011370:	69b8      	ldr	r0, [r7, #24]
 8011372:	f7ff fc6e 	bl	8010c52 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011376:	697b      	ldr	r3, [r7, #20]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3724      	adds	r7, #36	; 0x24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd90      	pop	{r4, r7, pc}
 8011380:	0802c454 	.word	0x0802c454
 8011384:	0802d060 	.word	0x0802d060
 8011388:	0802c4e4 	.word	0x0802c4e4
 801138c:	0802c528 	.word	0x0802c528
 8011390:	0802c5cc 	.word	0x0802c5cc

08011394 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011394:	b590      	push	{r4, r7, lr}
 8011396:	b089      	sub	sp, #36	; 0x24
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	689a      	ldr	r2, [r3, #8]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	689b      	ldr	r3, [r3, #8]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	3320      	adds	r3, #32
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4610      	mov	r0, r2
 80113b2:	4798      	blx	r3
 80113b4:	4603      	mov	r3, r0
 80113b6:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 80113ba:	d205      	bcs.n	80113c8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80113bc:	4b4e      	ldr	r3, [pc, #312]	; (80114f8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80113be:	4a4f      	ldr	r2, [pc, #316]	; (80114fc <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80113c0:	21c2      	movs	r1, #194	; 0xc2
 80113c2:	484f      	ldr	r0, [pc, #316]	; (8011500 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80113c4:	f019 ff7e 	bl	802b2c4 <__assert_func>
 80113c8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685a      	ldr	r2, [r3, #4]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3320      	adds	r3, #32
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4610      	mov	r0, r2
 80113da:	4798      	blx	r3
 80113dc:	4603      	mov	r3, r0
 80113de:	2b0f      	cmp	r3, #15
 80113e0:	d805      	bhi.n	80113ee <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80113e2:	4b48      	ldr	r3, [pc, #288]	; (8011504 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80113e4:	4a45      	ldr	r2, [pc, #276]	; (80114fc <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80113e6:	21c3      	movs	r1, #195	; 0xc3
 80113e8:	4845      	ldr	r0, [pc, #276]	; (8011500 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80113ea:	f019 ff6b 	bl	802b2c4 <__assert_func>
 80113ee:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	68da      	ldr	r2, [r3, #12]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	3320      	adds	r3, #32
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4610      	mov	r0, r2
 8011400:	4798      	blx	r3
 8011402:	4603      	mov	r3, r0
 8011404:	2b53      	cmp	r3, #83	; 0x53
 8011406:	d805      	bhi.n	8011414 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8011408:	4b3f      	ldr	r3, [pc, #252]	; (8011508 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801140a:	4a3c      	ldr	r2, [pc, #240]	; (80114fc <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801140c:	21c4      	movs	r1, #196	; 0xc4
 801140e:	483c      	ldr	r0, [pc, #240]	; (8011500 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011410:	f019 ff58 	bl	802b2c4 <__assert_func>
 8011414:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	68b9      	ldr	r1, [r7, #8]
 801141a:	68f8      	ldr	r0, [r7, #12]
 801141c:	f7ff fbbd 	bl	8010b9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	2100      	movs	r1, #0
 8011426:	4618      	mov	r0, r3
 8011428:	f000 f980 	bl	801172c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801142c:	4603      	mov	r3, r0
 801142e:	4619      	mov	r1, r3
 8011430:	2054      	movs	r0, #84	; 0x54
 8011432:	f7ff f9a5 	bl	8010780 <_ZnwjPv>
 8011436:	4604      	mov	r4, r0
 8011438:	2c00      	cmp	r4, #0
 801143a:	d005      	beq.n	8011448 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801143c:	2114      	movs	r1, #20
 801143e:	4620      	mov	r0, r4
 8011440:	f000 f9aa 	bl	8011798 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8011444:	4623      	mov	r3, r4
 8011446:	e000      	b.n	801144a <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011448:	4623      	mov	r3, r4
 801144a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	2100      	movs	r1, #0
 8011452:	4618      	mov	r0, r3
 8011454:	f000 fa34 	bl	80118c0 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011458:	4603      	mov	r3, r0
 801145a:	4619      	mov	r1, r3
 801145c:	f44f 60b9 	mov.w	r0, #1480	; 0x5c8
 8011460:	f7ff f98e 	bl	8010780 <_ZnwjPv>
 8011464:	4604      	mov	r4, r0
 8011466:	2c00      	cmp	r4, #0
 8011468:	d004      	beq.n	8011474 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801146a:	4620      	mov	r0, r4
 801146c:	f007 f872 	bl	8018554 <_ZN16SecondScreenViewC1Ev>
 8011470:	4623      	mov	r3, r4
 8011472:	e000      	b.n	8011476 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011474:	4623      	mov	r3, r4
 8011476:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	2100      	movs	r1, #0
 801147e:	4618      	mov	r0, r3
 8011480:	f000 fa31 	bl	80118e6 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011484:	4603      	mov	r3, r0
 8011486:	4619      	mov	r1, r3
 8011488:	2010      	movs	r0, #16
 801148a:	f7ff f979 	bl	8010780 <_ZnwjPv>
 801148e:	4604      	mov	r4, r0
 8011490:	2c00      	cmp	r4, #0
 8011492:	d005      	beq.n	80114a0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011494:	69b9      	ldr	r1, [r7, #24]
 8011496:	4620      	mov	r0, r4
 8011498:	f006 ff58 	bl	801834c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 801149c:	4623      	mov	r3, r4
 801149e:	e000      	b.n	80114a2 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80114a0:	4623      	mov	r3, r4
 80114a2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	69fa      	ldr	r2, [r7, #28]
 80114a8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	69ba      	ldr	r2, [r7, #24]
 80114b4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d002      	beq.n	80114c2 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	3304      	adds	r3, #4
 80114c0:	e000      	b.n	80114c4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80114c2:	2300      	movs	r3, #0
 80114c4:	4619      	mov	r1, r3
 80114c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114c8:	f7ff fbea 	bl	8010ca0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	3304      	adds	r3, #4
 80114d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ff fc5d 	bl	8010d92 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	6979      	ldr	r1, [r7, #20]
 80114dc:	4618      	mov	r0, r3
 80114de:	f000 fa15 	bl	801190c <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80114e2:	69fa      	ldr	r2, [r7, #28]
 80114e4:	6979      	ldr	r1, [r7, #20]
 80114e6:	69b8      	ldr	r0, [r7, #24]
 80114e8:	f7ff fbb3 	bl	8010c52 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80114ec:	697b      	ldr	r3, [r7, #20]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3724      	adds	r7, #36	; 0x24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd90      	pop	{r4, r7, pc}
 80114f6:	bf00      	nop
 80114f8:	0802c454 	.word	0x0802c454
 80114fc:	0802d17c 	.word	0x0802d17c
 8011500:	0802c4e4 	.word	0x0802c4e4
 8011504:	0802c528 	.word	0x0802c528
 8011508:	0802c5cc 	.word	0x0802c5cc

0801150c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	460b      	mov	r3, r1
 8011516:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3324      	adds	r3, #36	; 0x24
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	887a      	ldrh	r2, [r7, #2]
 8011522:	4611      	mov	r1, r2
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	4798      	blx	r3
 8011528:	4603      	mov	r3, r0
    }
 801152a:	4618      	mov	r0, r3
 801152c:	3708      	adds	r7, #8
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8011532:	b580      	push	{r7, lr}
 8011534:	b082      	sub	sp, #8
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	460b      	mov	r3, r1
 801153c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3324      	adds	r3, #36	; 0x24
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	887a      	ldrh	r2, [r7, #2]
 8011548:	4611      	mov	r1, r2
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	4798      	blx	r3
 801154e:	4603      	mov	r3, r0
    }
 8011550:	4618      	mov	r0, r3
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	3324      	adds	r3, #36	; 0x24
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	887a      	ldrh	r2, [r7, #2]
 801156e:	4611      	mov	r1, r2
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	4798      	blx	r3
 8011574:	4603      	mov	r3, r0
    }
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801157e:	b480      	push	{r7}
 8011580:	b083      	sub	sp, #12
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
 8011586:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	683a      	ldr	r2, [r7, #0]
 801158c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801158e:	bf00      	nop
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801159a:	b580      	push	{r7, lr}
 801159c:	b082      	sub	sp, #8
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
 80115a2:	460b      	mov	r3, r1
 80115a4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	3324      	adds	r3, #36	; 0x24
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	887a      	ldrh	r2, [r7, #2]
 80115b0:	4611      	mov	r1, r2
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	4798      	blx	r3
 80115b6:	4603      	mov	r3, r0
    }
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	4a05      	ldr	r2, [pc, #20]	; (80115e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	601a      	str	r2, [r3, #0]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f000 fa13 	bl	80119fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	0802cde8 	.word	0x0802cde8

080115e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7ff ffe7 	bl	80115c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 80115f2:	2110      	movs	r1, #16
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f019 fe3a 	bl	802b26e <_ZdlPvj>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011604:	b590      	push	{r4, r7, lr}
 8011606:	b087      	sub	sp, #28
 8011608:	af02      	add	r7, sp, #8
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	460b      	mov	r3, r1
 801160e:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4618      	mov	r0, r3
 8011614:	f7ff f922 	bl	801085c <_ZN8touchgfx10TransitionC1Ev>
 8011618:	4a3f      	ldr	r2, [pc, #252]	; (8011718 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	330c      	adds	r3, #12
 8011622:	4618      	mov	r0, r3
 8011624:	f00b ff86 	bl	801d534 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f103 020c 	add.w	r2, r3, #12
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	639a      	str	r2, [r3, #56]	; 0x38
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011638:	4a38      	ldr	r2, [pc, #224]	; (801171c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 801163a:	f107 0308 	add.w	r3, r7, #8
 801163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011642:	e883 0003 	stmia.w	r3, {r0, r1}
 8011646:	f107 0308 	add.w	r3, r7, #8
 801164a:	cb0c      	ldmia	r3, {r2, r3}
 801164c:	6879      	ldr	r1, [r7, #4]
 801164e:	4620      	mov	r0, r4
 8011650:	f000 f9b4 	bl	80119bc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2203      	movs	r2, #3
 8011658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	78fa      	ldrb	r2, [r7, #3]
 8011660:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011674:	4b2a      	ldr	r3, [pc, #168]	; (8011720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d047      	beq.n	801170c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f103 000c 	add.w	r0, r3, #12
 8011682:	4b28      	ldr	r3, [pc, #160]	; (8011724 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011684:	881b      	ldrh	r3, [r3, #0]
 8011686:	b21a      	sxth	r2, r3
 8011688:	4b27      	ldr	r3, [pc, #156]	; (8011728 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	b21b      	sxth	r3, r3
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	4613      	mov	r3, r2
 8011692:	2200      	movs	r2, #0
 8011694:	2100      	movs	r1, #0
 8011696:	f7ff f96f 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	330c      	adds	r3, #12
 801169e:	4618      	mov	r0, r3
 80116a0:	f00b fec4 	bl	801d42c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d82a      	bhi.n	8011704 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 80116ae:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 80116b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b4:	080116e5 	.word	0x080116e5
 80116b8:	080116f3 	.word	0x080116f3
 80116bc:	080116c5 	.word	0x080116c5
 80116c0:	080116d7 	.word	0x080116d7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 80116c4:	4b17      	ldr	r3, [pc, #92]	; (8011724 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 80116c6:	881b      	ldrh	r3, [r3, #0]
 80116c8:	425b      	negs	r3, r3
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	b21a      	sxth	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80116d4:	e01a      	b.n	801170c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 80116d6:	4b13      	ldr	r3, [pc, #76]	; (8011724 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 80116d8:	881b      	ldrh	r3, [r3, #0]
 80116da:	b21a      	sxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80116e2:	e013      	b.n	801170c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80116e4:	4b10      	ldr	r3, [pc, #64]	; (8011728 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	b21a      	sxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80116f0:	e00c      	b.n	801170c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80116f2:	4b0d      	ldr	r3, [pc, #52]	; (8011728 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 80116f4:	881b      	ldrh	r3, [r3, #0]
 80116f6:	425b      	negs	r3, r3
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	b21a      	sxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011702:	e003      	b.n	801170c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2201      	movs	r2, #1
 8011708:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 801170a:	bf00      	nop
            }
        }
    }
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	bd90      	pop	{r4, r7, pc}
 8011716:	bf00      	nop
 8011718:	0802cdc0 	.word	0x0802cdc0
 801171c:	0802c670 	.word	0x0802c670
 8011720:	2000bfcd 	.word	0x2000bfcd
 8011724:	2000bfc2 	.word	0x2000bfc2
 8011728:	2000bfc4 	.word	0x2000bfc4

0801172c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3324      	adds	r3, #36	; 0x24
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	887a      	ldrh	r2, [r7, #2]
 8011742:	4611      	mov	r1, r2
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	4798      	blx	r3
 8011748:	4603      	mov	r3, r0
    }
 801174a:	4618      	mov	r0, r3
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	4a05      	ldr	r2, [pc, #20]	; (8011774 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	601a      	str	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4618      	mov	r0, r3
 8011766:	f000 f949 	bl	80119fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4618      	mov	r0, r3
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	0802ce28 	.word	0x0802ce28

08011778 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7ff ffe7 	bl	8011754 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011786:	2110      	movs	r1, #16
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f019 fd70 	bl	802b26e <_ZdlPvj>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4618      	mov	r0, r3
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b087      	sub	sp, #28
 801179c:	af02      	add	r7, sp, #8
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	460b      	mov	r3, r1
 80117a2:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff f858 	bl	801085c <_ZN8touchgfx10TransitionC1Ev>
 80117ac:	4a3f      	ldr	r2, [pc, #252]	; (80118ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	601a      	str	r2, [r3, #0]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	330c      	adds	r3, #12
 80117b6:	4618      	mov	r0, r3
 80117b8:	f00b febc 	bl	801d534 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f103 020c 	add.w	r2, r3, #12
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	639a      	str	r2, [r3, #56]	; 0x38
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80117cc:	4a38      	ldr	r2, [pc, #224]	; (80118b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 80117ce:	f107 0308 	add.w	r3, r7, #8
 80117d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	cb0c      	ldmia	r3, {r2, r3}
 80117e0:	6879      	ldr	r1, [r7, #4]
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 f964 	bl	8011ab0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2202      	movs	r2, #2
 80117ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	78fa      	ldrb	r2, [r7, #3]
 80117f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 8011808:	4b2a      	ldr	r3, [pc, #168]	; (80118b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d047      	beq.n	80118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f103 000c 	add.w	r0, r3, #12
 8011816:	4b28      	ldr	r3, [pc, #160]	; (80118b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011818:	881b      	ldrh	r3, [r3, #0]
 801181a:	b21a      	sxth	r2, r3
 801181c:	4b27      	ldr	r3, [pc, #156]	; (80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	b21b      	sxth	r3, r3
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	4613      	mov	r3, r2
 8011826:	2200      	movs	r2, #0
 8011828:	2100      	movs	r1, #0
 801182a:	f7ff f8a5 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	330c      	adds	r3, #12
 8011832:	4618      	mov	r0, r3
 8011834:	f00b fdfa 	bl	801d42c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801183e:	2b03      	cmp	r3, #3
 8011840:	d82a      	bhi.n	8011898 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8011842:	a201      	add	r2, pc, #4	; (adr r2, 8011848 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8011844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011848:	08011879 	.word	0x08011879
 801184c:	08011887 	.word	0x08011887
 8011850:	08011859 	.word	0x08011859
 8011854:	0801186b 	.word	0x0801186b
                targetValue = -HAL::DISPLAY_WIDTH;
 8011858:	4b17      	ldr	r3, [pc, #92]	; (80118b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	425b      	negs	r3, r3
 801185e:	b29b      	uxth	r3, r3
 8011860:	b21a      	sxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011868:	e01a      	b.n	80118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 801186a:	4b13      	ldr	r3, [pc, #76]	; (80118b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	b21a      	sxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011876:	e013      	b.n	80118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 8011878:	4b10      	ldr	r3, [pc, #64]	; (80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801187a:	881b      	ldrh	r3, [r3, #0]
 801187c:	b21a      	sxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011884:	e00c      	b.n	80118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011886:	4b0d      	ldr	r3, [pc, #52]	; (80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	425b      	negs	r3, r3
 801188c:	b29b      	uxth	r3, r3
 801188e:	b21a      	sxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011896:	e003      	b.n	80118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2201      	movs	r2, #1
 801189c:	721a      	strb	r2, [r3, #8]
                break;
 801189e:	bf00      	nop
    }
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4618      	mov	r0, r3
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd90      	pop	{r4, r7, pc}
 80118aa:	bf00      	nop
 80118ac:	0802ce00 	.word	0x0802ce00
 80118b0:	0802c678 	.word	0x0802c678
 80118b4:	2000bfcd 	.word	0x2000bfcd
 80118b8:	2000bfc2 	.word	0x2000bfc2
 80118bc:	2000bfc4 	.word	0x2000bfc4

080118c0 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	3324      	adds	r3, #36	; 0x24
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	887a      	ldrh	r2, [r7, #2]
 80118d6:	4611      	mov	r1, r2
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	4798      	blx	r3
 80118dc:	4603      	mov	r3, r0
    }
 80118de:	4618      	mov	r0, r3
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b082      	sub	sp, #8
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	460b      	mov	r3, r1
 80118f0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	3324      	adds	r3, #36	; 0x24
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	887a      	ldrh	r2, [r7, #2]
 80118fc:	4611      	mov	r1, r2
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	4798      	blx	r3
 8011902:	4603      	mov	r3, r0
    }
 8011904:	4618      	mov	r0, r3
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801191c:	bf00      	nop
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr

08011928 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d02a      	beq.n	8011992 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011942:	2b03      	cmp	r3, #3
 8011944:	d820      	bhi.n	8011988 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011946:	a201      	add	r2, pc, #4	; (adr r2, 801194c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801194c:	08011973 	.word	0x08011973
 8011950:	08011973 	.word	0x08011973
 8011954:	0801195d 	.word	0x0801195d
 8011958:	0801195d 	.word	0x0801195d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3354      	adds	r3, #84	; 0x54
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 801196a:	2200      	movs	r2, #0
 801196c:	6838      	ldr	r0, [r7, #0]
 801196e:	4798      	blx	r3
            break;
 8011970:	e010      	b.n	8011994 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3354      	adds	r3, #84	; 0x54
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011980:	2100      	movs	r1, #0
 8011982:	6838      	ldr	r0, [r7, #0]
 8011984:	4798      	blx	r3
            break;
 8011986:	e005      	b.n	8011994 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2201      	movs	r2, #1
 801198c:	721a      	strb	r2, [r3, #8]
            break;
 801198e:	bf00      	nop
 8011990:	e000      	b.n	8011994 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011992:	bf00      	nop
        }
    }
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop

0801199c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	4a04      	ldr	r2, [pc, #16]	; (80119b8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	601a      	str	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	0802ce40 	.word	0x0802ce40

080119bc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	4639      	mov	r1, r7
 80119c8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7ff ffe4 	bl	801199c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80119d4:	4a08      	ldr	r2, [pc, #32]	; (80119f8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3308      	adds	r3, #8
 80119e4:	463a      	mov	r2, r7
 80119e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	4618      	mov	r0, r3
 80119f2:	3710      	adds	r7, #16
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	0802cde8 	.word	0x0802cde8

080119fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
    }
 8011a04:	4a04      	ldr	r2, [pc, #16]	; (8011a18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr
 8011a18:	0802ce40 	.word	0x0802ce40

08011a1c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
    }
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7ff ffe9 	bl	80119fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011a2a:	2104      	movs	r1, #4
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f019 fc1e 	bl	802b26e <_ZdlPvj>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d02a      	beq.n	8011aa6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d820      	bhi.n	8011a9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011a5a:	a201      	add	r2, pc, #4	; (adr r2, 8011a60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a60:	08011a87 	.word	0x08011a87
 8011a64:	08011a87 	.word	0x08011a87
 8011a68:	08011a71 	.word	0x08011a71
 8011a6c:	08011a71 	.word	0x08011a71
            d.moveRelative(calculatedValue, 0);
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	3354      	adds	r3, #84	; 0x54
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011a7e:	2200      	movs	r2, #0
 8011a80:	6838      	ldr	r0, [r7, #0]
 8011a82:	4798      	blx	r3
            break;
 8011a84:	e010      	b.n	8011aa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	3354      	adds	r3, #84	; 0x54
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011a94:	2100      	movs	r1, #0
 8011a96:	6838      	ldr	r0, [r7, #0]
 8011a98:	4798      	blx	r3
            break;
 8011a9a:	e005      	b.n	8011aa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	721a      	strb	r2, [r3, #8]
            break;
 8011aa2:	bf00      	nop
 8011aa4:	e000      	b.n	8011aa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011aa6:	bf00      	nop
    }
 8011aa8:	3708      	adds	r7, #8
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop

08011ab0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	4639      	mov	r1, r7
 8011abc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7ff ff6a 	bl	801199c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011ac8:	4a08      	ldr	r2, [pc, #32]	; (8011aec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	68ba      	ldr	r2, [r7, #8]
 8011ad2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	463a      	mov	r2, r7
 8011ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ade:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	0802ce28 	.word	0x0802ce28

08011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	4a05      	ldr	r2, [pc, #20]	; (8011b10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fe ff19 	bl	8010938 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	0802ceb4 	.word	0x0802ceb4

08011b14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7ff ffe7 	bl	8011af0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011b22:	2110      	movs	r1, #16
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f019 fba2 	bl	802b26e <_ZdlPvj>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
    }
 8011b3c:	4a0a      	ldr	r2, [pc, #40]	; (8011b68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	333c      	adds	r3, #60	; 0x3c
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff fd3a 	bl	80115c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	330c      	adds	r3, #12
 8011b50:	4618      	mov	r0, r3
 8011b52:	f00b fc6a 	bl	801d42a <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fe fe95 	bl	8010888 <_ZN8touchgfx10TransitionD1Ev>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	0802cdc0 	.word	0x0802cdc0

08011b6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    }
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7ff ffdd 	bl	8011b34 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8011b7a:	2154      	movs	r1, #84	; 0x54
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f019 fb76 	bl	802b26e <_ZdlPvj>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	4618      	mov	r0, r3
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011b94:	4b59      	ldr	r3, [pc, #356]	; (8011cfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	f083 0301 	eor.w	r3, r3, #1
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d003      	beq.n	8011baa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	721a      	strb	r2, [r3, #8]
            return;
 8011ba8:	e0a5      	b.n	8011cf6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fe fe8b 	bl	80108c8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011bb8:	3301      	adds	r3, #1
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d82f      	bhi.n	8011c32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011bd8:	b298      	uxth	r0, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	2100      	movs	r1, #0
 8011bea:	f00e fc64 	bl	80204b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	f003 0301 	and.w	r3, r3, #1
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d01b      	beq.n	8011c42 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011c18:	2a00      	cmp	r2, #0
 8011c1a:	dd01      	ble.n	8011c20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	e001      	b.n	8011c24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 8011c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c24:	4413      	add	r3, r2
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	b21a      	sxth	r2, r3
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011c30:	e007      	b.n	8011c42 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2201      	movs	r2, #1
 8011c36:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011c40:	e059      	b.n	8011cf6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	d845      	bhi.n	8011cd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 8011c4c:	a201      	add	r2, pc, #4	; (adr r2, 8011c54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 8011c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c52:	bf00      	nop
 8011c54:	08011c9f 	.word	0x08011c9f
 8011c58:	08011c9f 	.word	0x08011c9f
 8011c5c:	08011c65 	.word	0x08011c65
 8011c60:	08011c65 	.word	0x08011c65
            calculatedValue -= snapshot.getX();
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	330c      	adds	r3, #12
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fe feb2 	bl	80109d2 <_ZNK8touchgfx8Drawable4getXEv>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	4619      	mov	r1, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	b28b      	uxth	r3, r1
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	b21a      	sxth	r2, r3
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f103 000c 	add.w	r0, r3, #12
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011c94:	2200      	movs	r2, #0
 8011c96:	4619      	mov	r1, r3
 8011c98:	f00d ff44 	bl	801fb24 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011c9c:	e020      	b.n	8011ce0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	330c      	adds	r3, #12
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe fea2 	bl	80109ec <_ZNK8touchgfx8Drawable4getYEv>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	4619      	mov	r1, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	b28b      	uxth	r3, r1
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	b21a      	sxth	r2, r3
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f103 000c 	add.w	r0, r3, #12
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011cce:	461a      	mov	r2, r3
 8011cd0:	2100      	movs	r1, #0
 8011cd2:	f00d ff27 	bl	801fb24 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011cd6:	e003      	b.n	8011ce0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2201      	movs	r2, #1
 8011cdc:	721a      	strb	r2, [r3, #8]
            break;
 8011cde:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6858      	ldr	r0, [r3, #4]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3378      	adds	r3, #120	; 0x78
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	323c      	adds	r2, #60	; 0x3c
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	4798      	blx	r3
    }
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	2000bfcd 	.word	0x2000bfcd

08011d00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011d08:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00e      	beq.n	8011d2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00a      	beq.n	8011d2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6858      	ldr	r0, [r3, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	3364      	adds	r3, #100	; 0x64
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	320c      	adds	r2, #12
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	4798      	blx	r3
    }
 8011d2e:	bf00      	nop
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	2000bfcd 	.word	0x2000bfcd

08011d3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011d44:	4b1a      	ldr	r3, [pc, #104]	; (8011db0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d02d      	beq.n	8011da8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe fdce 	bl	80108f0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011d54:	4a17      	ldr	r2, [pc, #92]	; (8011db4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8011d56:	f107 0318 	add.w	r3, r7, #24
 8011d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d62:	f107 0008 	add.w	r0, r7, #8
 8011d66:	f107 0318 	add.w	r3, r7, #24
 8011d6a:	cb0c      	ldmia	r3, {r2, r3}
 8011d6c:	6879      	ldr	r1, [r7, #4]
 8011d6e:	f7ff fe25 	bl	80119bc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	3378      	adds	r3, #120	; 0x78
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f107 0108 	add.w	r1, r7, #8
 8011d84:	4610      	mov	r0, r2
 8011d86:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6858      	ldr	r0, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3360      	adds	r3, #96	; 0x60
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	320c      	adds	r2, #12
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011d9e:	f107 0308 	add.w	r3, r7, #8
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7ff fc0c 	bl	80115c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8011da8:	bf00      	nop
 8011daa:	3720      	adds	r7, #32
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	2000bfcd 	.word	0x2000bfcd
 8011db4:	0802c680 	.word	0x0802c680

08011db8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011dc8:	2b03      	cmp	r3, #3
 8011dca:	d83b      	bhi.n	8011e44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011dcc:	a201      	add	r2, pc, #4	; (adr r2, 8011dd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd2:	bf00      	nop
 8011dd4:	08011e15 	.word	0x08011e15
 8011dd8:	08011e2f 	.word	0x08011e2f
 8011ddc:	08011de5 	.word	0x08011de5
 8011de0:	08011dfb 	.word	0x08011dfb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	3354      	adds	r3, #84	; 0x54
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a18      	ldr	r2, [pc, #96]	; (8011e50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011dee:	8812      	ldrh	r2, [r2, #0]
 8011df0:	b211      	sxth	r1, r2
 8011df2:	2200      	movs	r2, #0
 8011df4:	6838      	ldr	r0, [r7, #0]
 8011df6:	4798      	blx	r3
            break;
 8011df8:	e025      	b.n	8011e46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3354      	adds	r3, #84	; 0x54
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4a13      	ldr	r2, [pc, #76]	; (8011e50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011e04:	8812      	ldrh	r2, [r2, #0]
 8011e06:	4252      	negs	r2, r2
 8011e08:	b292      	uxth	r2, r2
 8011e0a:	b211      	sxth	r1, r2
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	6838      	ldr	r0, [r7, #0]
 8011e10:	4798      	blx	r3
            break;
 8011e12:	e018      	b.n	8011e46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	3354      	adds	r3, #84	; 0x54
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a0d      	ldr	r2, [pc, #52]	; (8011e54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011e1e:	8812      	ldrh	r2, [r2, #0]
 8011e20:	4252      	negs	r2, r2
 8011e22:	b292      	uxth	r2, r2
 8011e24:	b212      	sxth	r2, r2
 8011e26:	2100      	movs	r1, #0
 8011e28:	6838      	ldr	r0, [r7, #0]
 8011e2a:	4798      	blx	r3
            break;
 8011e2c:	e00b      	b.n	8011e46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	3354      	adds	r3, #84	; 0x54
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	4a07      	ldr	r2, [pc, #28]	; (8011e54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011e38:	8812      	ldrh	r2, [r2, #0]
 8011e3a:	b212      	sxth	r2, r2
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	6838      	ldr	r0, [r7, #0]
 8011e40:	4798      	blx	r3
            break;
 8011e42:	e000      	b.n	8011e46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011e44:	bf00      	nop
    }
 8011e46:	bf00      	nop
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	2000bfc2 	.word	0x2000bfc2
 8011e54:	2000bfc4 	.word	0x2000bfc4

08011e58 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	68d2      	ldr	r2, [r2, #12]
 8011e6a:	1052      	asrs	r2, r2, #1
 8011e6c:	1898      	adds	r0, r3, r2
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68db      	ldr	r3, [r3, #12]
 8011e72:	f003 0301 	and.w	r3, r3, #1
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d102      	bne.n	8011e80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	e00a      	b.n	8011e96 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	68d2      	ldr	r2, [r2, #12]
 8011e88:	1052      	asrs	r2, r2, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	6892      	ldr	r2, [r2, #8]
 8011e92:	4413      	add	r3, r2
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	4798      	blx	r3
    }
 8011e9a:	bf00      	nop
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011ea2:	b480      	push	{r7}
 8011ea4:	b083      	sub	sp, #12
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d010      	beq.n	8011ed4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d107      	bne.n	8011eca <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	f003 0301 	and.w	r3, r3, #1
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d101      	bne.n	8011eca <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e000      	b.n	8011ecc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d001      	beq.n	8011ed4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e000      	b.n	8011ed6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011ed4:	2300      	movs	r3, #0
    }
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
	...

08011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
    }
 8011eec:	4a0a      	ldr	r2, [pc, #40]	; (8011f18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	601a      	str	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	333c      	adds	r3, #60	; 0x3c
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff fc2c 	bl	8011754 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	330c      	adds	r3, #12
 8011f00:	4618      	mov	r0, r3
 8011f02:	f00b fa92 	bl	801d42a <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fe fcbd 	bl	8010888 <_ZN8touchgfx10TransitionD1Ev>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	0802ce00 	.word	0x0802ce00

08011f1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    }
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ffdd 	bl	8011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011f2a:	2154      	movs	r1, #84	; 0x54
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f019 f99e 	bl	802b26e <_ZdlPvj>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011f44:	4b59      	ldr	r3, [pc, #356]	; (80120ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f083 0301 	eor.w	r3, r3, #1
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d003      	beq.n	8011f5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2201      	movs	r2, #1
 8011f56:	721a      	strb	r2, [r3, #8]
            return;
 8011f58:	e0a5      	b.n	80120a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fcb3 	bl	80108c8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011f68:	3301      	adds	r3, #1
 8011f6a:	b2da      	uxtb	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d82f      	bhi.n	8011fe2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011f88:	b298      	uxth	r0, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	2100      	movs	r1, #0
 8011f9a:	f00e fa8c 	bl	80204b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d01b      	beq.n	8011ff2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011fc8:	2a00      	cmp	r2, #0
 8011fca:	dd01      	ble.n	8011fd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011fcc:	2201      	movs	r2, #1
 8011fce:	e001      	b.n	8011fd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8011fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	b21a      	sxth	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011fe0:	e007      	b.n	8011ff2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011ff0:	e059      	b.n	80120a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	d845      	bhi.n	8012088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 8011ffc:	a201      	add	r2, pc, #4	; (adr r2, 8012004 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 8011ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012002:	bf00      	nop
 8012004:	0801204f 	.word	0x0801204f
 8012008:	0801204f 	.word	0x0801204f
 801200c:	08012015 	.word	0x08012015
 8012010:	08012015 	.word	0x08012015
            calculatedValue -= snapshot.getX();
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	330c      	adds	r3, #12
 8012018:	4618      	mov	r0, r3
 801201a:	f7fe fcda 	bl	80109d2 <_ZNK8touchgfx8Drawable4getXEv>
 801201e:	4603      	mov	r3, r0
 8012020:	4619      	mov	r1, r3
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012028:	b29a      	uxth	r2, r3
 801202a:	b28b      	uxth	r3, r1
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	b29b      	uxth	r3, r3
 8012030:	b21a      	sxth	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f103 000c 	add.w	r0, r3, #12
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012044:	2200      	movs	r2, #0
 8012046:	4619      	mov	r1, r3
 8012048:	f00d fd6c 	bl	801fb24 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801204c:	e020      	b.n	8012090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	330c      	adds	r3, #12
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe fcca 	bl	80109ec <_ZNK8touchgfx8Drawable4getYEv>
 8012058:	4603      	mov	r3, r0
 801205a:	4619      	mov	r1, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012062:	b29a      	uxth	r2, r3
 8012064:	b28b      	uxth	r3, r1
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	b29b      	uxth	r3, r3
 801206a:	b21a      	sxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f103 000c 	add.w	r0, r3, #12
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801207e:	461a      	mov	r2, r3
 8012080:	2100      	movs	r1, #0
 8012082:	f00d fd4f 	bl	801fb24 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012086:	e003      	b.n	8012090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	721a      	strb	r2, [r3, #8]
            break;
 801208e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6858      	ldr	r0, [r3, #4]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3378      	adds	r3, #120	; 0x78
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	323c      	adds	r2, #60	; 0x3c
 80120a2:	4611      	mov	r1, r2
 80120a4:	4798      	blx	r3
    }
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	2000bfcd 	.word	0x2000bfcd

080120b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80120b8:	4b0b      	ldr	r3, [pc, #44]	; (80120e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00e      	beq.n	80120de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00a      	beq.n	80120de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6858      	ldr	r0, [r3, #4]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	3364      	adds	r3, #100	; 0x64
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	320c      	adds	r2, #12
 80120da:	4611      	mov	r1, r2
 80120dc:	4798      	blx	r3
    }
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	2000bfcd 	.word	0x2000bfcd

080120ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b088      	sub	sp, #32
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80120f4:	4b1a      	ldr	r3, [pc, #104]	; (8012160 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d02d      	beq.n	8012158 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fe fbf6 	bl	80108f0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8012104:	4a17      	ldr	r2, [pc, #92]	; (8012164 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8012106:	f107 0318 	add.w	r3, r7, #24
 801210a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801210e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012112:	f107 0008 	add.w	r0, r7, #8
 8012116:	f107 0318 	add.w	r3, r7, #24
 801211a:	cb0c      	ldmia	r3, {r2, r3}
 801211c:	6879      	ldr	r1, [r7, #4]
 801211e:	f7ff fcc7 	bl	8011ab0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685a      	ldr	r2, [r3, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	3378      	adds	r3, #120	; 0x78
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f107 0108 	add.w	r1, r7, #8
 8012134:	4610      	mov	r0, r2
 8012136:	4798      	blx	r3
            screenContainer->add(snapshot);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6858      	ldr	r0, [r3, #4]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3360      	adds	r3, #96	; 0x60
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	320c      	adds	r2, #12
 801214a:	4611      	mov	r1, r2
 801214c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801214e:	f107 0308 	add.w	r3, r7, #8
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fafe 	bl	8011754 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8012158:	bf00      	nop
 801215a:	3720      	adds	r7, #32
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	2000bfcd 	.word	0x2000bfcd
 8012164:	0802c688 	.word	0x0802c688

08012168 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
        switch (direction)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012178:	2b03      	cmp	r3, #3
 801217a:	d83b      	bhi.n	80121f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801217c:	a201      	add	r2, pc, #4	; (adr r2, 8012184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012182:	bf00      	nop
 8012184:	080121c5 	.word	0x080121c5
 8012188:	080121df 	.word	0x080121df
 801218c:	08012195 	.word	0x08012195
 8012190:	080121ab 	.word	0x080121ab
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	3354      	adds	r3, #84	; 0x54
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4a18      	ldr	r2, [pc, #96]	; (8012200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801219e:	8812      	ldrh	r2, [r2, #0]
 80121a0:	b211      	sxth	r1, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	6838      	ldr	r0, [r7, #0]
 80121a6:	4798      	blx	r3
            break;
 80121a8:	e025      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	3354      	adds	r3, #84	; 0x54
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4a13      	ldr	r2, [pc, #76]	; (8012200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80121b4:	8812      	ldrh	r2, [r2, #0]
 80121b6:	4252      	negs	r2, r2
 80121b8:	b292      	uxth	r2, r2
 80121ba:	b211      	sxth	r1, r2
 80121bc:	2200      	movs	r2, #0
 80121be:	6838      	ldr	r0, [r7, #0]
 80121c0:	4798      	blx	r3
            break;
 80121c2:	e018      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	3354      	adds	r3, #84	; 0x54
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4a0d      	ldr	r2, [pc, #52]	; (8012204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80121ce:	8812      	ldrh	r2, [r2, #0]
 80121d0:	4252      	negs	r2, r2
 80121d2:	b292      	uxth	r2, r2
 80121d4:	b212      	sxth	r2, r2
 80121d6:	2100      	movs	r1, #0
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	4798      	blx	r3
            break;
 80121dc:	e00b      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	3354      	adds	r3, #84	; 0x54
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a07      	ldr	r2, [pc, #28]	; (8012204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80121e8:	8812      	ldrh	r2, [r2, #0]
 80121ea:	b212      	sxth	r2, r2
 80121ec:	2100      	movs	r1, #0
 80121ee:	6838      	ldr	r0, [r7, #0]
 80121f0:	4798      	blx	r3
            break;
 80121f2:	e000      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80121f4:	bf00      	nop
    }
 80121f6:	bf00      	nop
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	2000bfc2 	.word	0x2000bfc2
 8012204:	2000bfc4 	.word	0x2000bfc4

08012208 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	68d2      	ldr	r2, [r2, #12]
 801221a:	1052      	asrs	r2, r2, #1
 801221c:	1898      	adds	r0, r3, r2
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	2b00      	cmp	r3, #0
 8012228:	d102      	bne.n	8012230 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	e00a      	b.n	8012246 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	68d2      	ldr	r2, [r2, #12]
 8012238:	1052      	asrs	r2, r2, #1
 801223a:	4413      	add	r3, r2
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	6892      	ldr	r2, [r2, #8]
 8012242:	4413      	add	r3, r2
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	4798      	blx	r3
    }
 801224a:	bf00      	nop
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012252:	b480      	push	{r7}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d010      	beq.n	8012284 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d107      	bne.n	801227a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	f003 0301 	and.w	r3, r3, #1
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012276:	2301      	movs	r3, #1
 8012278:	e000      	b.n	801227c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801227a:	2300      	movs	r3, #0
 801227c:	2b01      	cmp	r3, #1
 801227e:	d001      	beq.n	8012284 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012280:	2301      	movs	r3, #1
 8012282:	e000      	b.n	8012286 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012284:	2300      	movs	r3, #0
    }
 8012286:	4618      	mov	r0, r3
 8012288:	370c      	adds	r7, #12
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr

08012292 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	68d2      	ldr	r2, [r2, #12]
 80122a2:	1052      	asrs	r2, r2, #1
 80122a4:	1899      	adds	r1, r3, r2
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d102      	bne.n	80122b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	689b      	ldr	r3, [r3, #8]
 80122b6:	e00a      	b.n	80122ce <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	68d2      	ldr	r2, [r2, #12]
 80122c0:	1052      	asrs	r2, r2, #1
 80122c2:	4413      	add	r3, r2
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	6892      	ldr	r2, [r2, #8]
 80122ca:	4413      	add	r3, r2
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4608      	mov	r0, r1
 80122d0:	4798      	blx	r3
    }
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}

080122da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80122da:	b480      	push	{r7}
 80122dc:	b083      	sub	sp, #12
 80122de:	af00      	add	r7, sp, #0
 80122e0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d010      	beq.n	801230c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d107      	bne.n	8012302 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	f003 0301 	and.w	r3, r3, #1
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80122fe:	2301      	movs	r3, #1
 8012300:	e000      	b.n	8012304 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8012302:	2300      	movs	r3, #0
 8012304:	2b01      	cmp	r3, #1
 8012306:	d001      	beq.n	801230c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012308:	2301      	movs	r3, #1
 801230a:	e000      	b.n	801230e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801230c:	2300      	movs	r3, #0
    }
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	601a      	str	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8012336:	b480      	push	{r7}
 8012338:	b083      	sub	sp, #12
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
 801233e:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	683a      	ldr	r2, [r7, #0]
 8012344:	601a      	str	r2, [r3, #0]
    }
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	4618      	mov	r0, r3
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2200      	movs	r2, #0
 8012360:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2200      	movs	r2, #0
 8012366:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2200      	movs	r2, #0
 8012372:	80da      	strh	r2, [r3, #6]
    }
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012382:	b480      	push	{r7}
 8012384:	b085      	sub	sp, #20
 8012386:	af00      	add	r7, sp, #0
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	4608      	mov	r0, r1
 801238c:	4611      	mov	r1, r2
 801238e:	461a      	mov	r2, r3
 8012390:	4603      	mov	r3, r0
 8012392:	817b      	strh	r3, [r7, #10]
 8012394:	460b      	mov	r3, r1
 8012396:	813b      	strh	r3, [r7, #8]
 8012398:	4613      	mov	r3, r2
 801239a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	897a      	ldrh	r2, [r7, #10]
 80123a0:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	893a      	ldrh	r2, [r7, #8]
 80123a6:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	88fa      	ldrh	r2, [r7, #6]
 80123ac:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	8b3a      	ldrh	r2, [r7, #24]
 80123b2:	80da      	strh	r2, [r3, #6]
    }
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	4618      	mov	r0, r3
 80123b8:	3714      	adds	r7, #20
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 80123c2:	b480      	push	{r7}
 80123c4:	b083      	sub	sp, #12
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
    {
        return _type;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	791b      	ldrb	r3, [r3, #4]
    }
 80123ce:	4618      	mov	r0, r3
 80123d0:	370c      	adds	r7, #12
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr

080123da <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80123da:	b480      	push	{r7}
 80123dc:	b083      	sub	sp, #12
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	460b      	mov	r3, r1
 80123e4:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	887a      	ldrh	r2, [r7, #2]
 80123ea:	801a      	strh	r2, [r3, #0]
    {
    }
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4618      	mov	r0, r3
 80123f0:	370c      	adds	r7, #12
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr
	...

080123fc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af02      	add	r7, sp, #8
 8012402:	6078      	str	r0, [r7, #4]
        visible(true)
 8012404:	4a13      	ldr	r2, [pc, #76]	; (8012454 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	1d18      	adds	r0, r3, #4
 801240e:	2300      	movs	r3, #0
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	2300      	movs	r3, #0
 8012414:	2200      	movs	r2, #0
 8012416:	2100      	movs	r1, #0
 8012418:	f7ff ffb3 	bl	8012382 <_ZN8touchgfx4RectC1Essss>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	330c      	adds	r3, #12
 8012420:	4618      	mov	r0, r3
 8012422:	f7ff ff97 	bl	8012354 <_ZN8touchgfx4RectC1Ev>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	615a      	str	r2, [r3, #20]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	619a      	str	r2, [r3, #24]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	61da      	str	r2, [r3, #28]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2201      	movs	r2, #1
 8012444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4618      	mov	r0, r3
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	0803000c 	.word	0x0803000c

08012458 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	4a04      	ldr	r2, [pc, #16]	; (8012474 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	601a      	str	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	370c      	adds	r7, #12
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr
 8012474:	0803000c 	.word	0x0803000c

08012478 <_ZN8touchgfx8DrawableD0Ev>:
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7ff ffe9 	bl	8012458 <_ZN8touchgfx8DrawableD1Ev>
 8012486:	2128      	movs	r1, #40	; 0x28
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f018 fef0 	bl	802b26e <_ZdlPvj>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	460b      	mov	r3, r1
 80124a2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	887a      	ldrh	r2, [r7, #2]
 80124a8:	809a      	strh	r2, [r3, #4]
    }
 80124aa:	bf00      	nop
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80124b6:	b480      	push	{r7}
 80124b8:	b083      	sub	sp, #12
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	460b      	mov	r3, r1
 80124c0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	887a      	ldrh	r2, [r7, #2]
 80124c6:	80da      	strh	r2, [r3, #6]
    }
 80124c8:	bf00      	nop
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	807b      	strh	r3, [r7, #2]
 80124e0:	4613      	mov	r3, r2
 80124e2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	332c      	adds	r3, #44	; 0x2c
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80124f0:	4611      	mov	r1, r2
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	4798      	blx	r3
        setY(y);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	3330      	adds	r3, #48	; 0x30
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012502:	4611      	mov	r1, r2
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	4798      	blx	r3
    }
 8012508:	bf00      	nop
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	460b      	mov	r3, r1
 801251a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	887a      	ldrh	r2, [r7, #2]
 8012520:	811a      	strh	r2, [r3, #8]
    }
 8012522:	bf00      	nop
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr

0801252e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801252e:	b480      	push	{r7}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	460b      	mov	r3, r1
 8012538:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	887a      	ldrh	r2, [r7, #2]
 801253e:	815a      	strh	r2, [r3, #10]
    }
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	bf00      	nop
 8012556:	370c      	adds	r7, #12
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr

08012560 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
 801256a:	bf00      	nop
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
 8012596:	bf00      	nop
 8012598:	370c      	adds	r7, #12
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr

080125a2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80125a2:	b480      	push	{r7}
 80125a4:	b083      	sub	sp, #12
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
 80125aa:	bf00      	nop
 80125ac:	370c      	adds	r7, #12
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr

080125b6 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80125b6:	b480      	push	{r7}
 80125b8:	b083      	sub	sp, #12
 80125ba:	af00      	add	r7, sp, #0
 80125bc:	6078      	str	r0, [r7, #4]
 80125be:	460b      	mov	r3, r1
 80125c0:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	78fa      	ldrb	r2, [r7, #3]
 80125c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80125ca:	bf00      	nop
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr

080125d6 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80125d6:	b480      	push	{r7}
 80125d8:	b083      	sub	sp, #12
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
 80125de:	460b      	mov	r3, r1
 80125e0:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	78fa      	ldrb	r2, [r7, #3]
 80125e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80125ea:	bf00      	nop
 80125ec:	370c      	adds	r7, #12
 80125ee:	46bd      	mov	sp, r7
 80125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f4:	4770      	bx	lr

080125f6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80125f6:	b480      	push	{r7}
 80125f8:	b083      	sub	sp, #12
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012604:	4618      	mov	r0, r3
 8012606:	370c      	adds	r7, #12
 8012608:	46bd      	mov	sp, r7
 801260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260e:	4770      	bx	lr

08012610 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801261e:	4618      	mov	r0, r3
 8012620:	370c      	adds	r7, #12
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr

0801262a <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801262a:	b580      	push	{r7, lr}
 801262c:	b082      	sub	sp, #8
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	460b      	mov	r3, r1
 8012634:	807b      	strh	r3, [r7, #2]
 8012636:	4613      	mov	r3, r2
 8012638:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3354      	adds	r3, #84	; 0x54
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	8879      	ldrh	r1, [r7, #2]
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801264a:	b292      	uxth	r2, r2
 801264c:	1a8a      	subs	r2, r1, r2
 801264e:	b292      	uxth	r2, r2
 8012650:	b210      	sxth	r0, r2
 8012652:	8839      	ldrh	r1, [r7, #0]
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801265a:	b292      	uxth	r2, r2
 801265c:	1a8a      	subs	r2, r1, r2
 801265e:	b292      	uxth	r2, r2
 8012660:	b212      	sxth	r2, r2
 8012662:	4601      	mov	r1, r0
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	4798      	blx	r3
    }
 8012668:	bf00      	nop
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801267e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012686:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801268e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7ff ffe1 	bl	8012670 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	601a      	str	r2, [r3, #0]
    }
 80126bc:	bf00      	nop
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
        firstChild(0)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff fe94 	bl	80123fc <_ZN8touchgfx8DrawableC1Ev>
 80126d4:	4a05      	ldr	r2, [pc, #20]	; (80126ec <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0802e6f8 	.word	0x0802e6f8

080126f0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	4a05      	ldr	r2, [pc, #20]	; (8012710 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	601a      	str	r2, [r3, #0]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff fea9 	bl	8012458 <_ZN8touchgfx8DrawableD1Ev>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	0802e6f8 	.word	0x0802e6f8

08012714 <_ZN8touchgfx9ContainerD0Ev>:
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff ffe7 	bl	80126f0 <_ZN8touchgfx9ContainerD1Ev>
 8012722:	212c      	movs	r1, #44	; 0x2c
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f018 fda2 	bl	802b26e <_ZdlPvj>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4618      	mov	r0, r3
 801272e:	3708      	adds	r7, #8
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	4a06      	ldr	r2, [pc, #24]	; (8012758 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3304      	adds	r3, #4
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff ffd2 	bl	80126f0 <_ZN8touchgfx9ContainerD1Ev>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	3708      	adds	r7, #8
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
 8012756:	bf00      	nop
 8012758:	08030104 	.word	0x08030104

0801275c <_ZN8touchgfx6ScreenD0Ev>:
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff ffe5 	bl	8012734 <_ZN8touchgfx6ScreenD1Ev>
 801276a:	213c      	movs	r1, #60	; 0x3c
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f018 fd7e 	bl	802b26e <_ZdlPvj>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4618      	mov	r0, r3
 8012776:	3708      	adds	r7, #8
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	bf00      	nop
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	bf00      	nop
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
    {
    }
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	460b      	mov	r3, r1
 80127d6:	70fb      	strb	r3, [r7, #3]
    {
    }
 80127d8:	bf00      	nop
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	3304      	adds	r3, #4
 80127f2:	6839      	ldr	r1, [r7, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f008 fdd9 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80127fa:	bf00      	nop
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
	...

08012804 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff fdf4 	bl	80123fc <_ZN8touchgfx8DrawableC1Ev>
 8012814:	4a03      	ldr	r2, [pc, #12]	; (8012824 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	601a      	str	r2, [r3, #0]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4618      	mov	r0, r3
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	0802d580 	.word	0x0802d580

08012828 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	4a05      	ldr	r2, [pc, #20]	; (8012848 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4618      	mov	r0, r3
 801283a:	f7ff fe0d 	bl	8012458 <_ZN8touchgfx8DrawableD1Ev>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	0802d580 	.word	0x0802d580

0801284c <_ZN8touchgfx6WidgetD0Ev>:
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7ff ffe7 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 801285a:	2128      	movs	r1, #40	; 0x28
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f018 fd06 	bl	802b26e <_ZdlPvj>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	607b      	str	r3, [r7, #4]
 8012876:	460b      	mov	r3, r1
 8012878:	817b      	strh	r3, [r7, #10]
 801287a:	4613      	mov	r3, r2
 801287c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	4618      	mov	r0, r3
 8012882:	f7ff feb8 	bl	80125f6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d008      	beq.n	801289e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff febe 	bl	8012610 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801289a:	2301      	movs	r3, #1
 801289c:	e000      	b.n	80128a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 801289e:	2300      	movs	r3, #0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	601a      	str	r2, [r3, #0]
        }
    }
 80128aa:	bf00      	nop
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
	...

080128b4 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7ff ffa0 	bl	8012804 <_ZN8touchgfx6WidgetC1Ev>
 80128c4:	4a0a      	ldr	r2, [pc, #40]	; (80128f0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	601a      	str	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	22ff      	movs	r2, #255	; 0xff
 80128ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3328      	adds	r3, #40	; 0x28
 80128d6:	2100      	movs	r1, #0
 80128d8:	4618      	mov	r0, r3
 80128da:	f7ff fd2c 	bl	8012336 <_ZN8touchgfx9colortypeC1Em>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	0802f994 	.word	0x0802f994

080128f4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	4a05      	ldr	r2, [pc, #20]	; (8012914 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff ff8f 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	0802f994 	.word	0x0802f994

08012918 <_ZN8touchgfx3BoxD0Ev>:
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ffe7 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8012926:	2130      	movs	r1, #48	; 0x30
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f018 fca0 	bl	802b26e <_ZdlPvj>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012948:	bf00      	nop
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	460b      	mov	r3, r1
 801295e:	807b      	strh	r3, [r7, #2]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	887a      	ldrh	r2, [r7, #2]
 8012964:	801a      	strh	r2, [r3, #0]
    }
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
        assertValid();
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7fd fc5b 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012982:	4b06      	ldr	r3, [pc, #24]	; (801299c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	881b      	ldrh	r3, [r3, #0]
 801298a:	4619      	mov	r1, r3
 801298c:	4610      	mov	r0, r2
 801298e:	f004 fcd3 	bl	8017338 <_ZNK8touchgfx5Texts7getTextEt>
 8012992:	4603      	mov	r3, r0
    }
 8012994:	4618      	mov	r0, r3
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	2000c06c 	.word	0x2000c06c

080129a0 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff ff2a 	bl	8012804 <_ZN8touchgfx6WidgetC1Ev>
 80129b0:	4a13      	ldr	r2, [pc, #76]	; (8012a00 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	601a      	str	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	3326      	adds	r3, #38	; 0x26
 80129ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff ffc8 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3328      	adds	r3, #40	; 0x28
 80129c8:	2100      	movs	r1, #0
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff fcb3 	bl	8012336 <_ZN8touchgfx9colortypeC1Em>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2200      	movs	r2, #0
 80129d4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	22ff      	movs	r2, #255	; 0xff
 80129da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2200      	movs	r2, #0
 80129e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2200      	movs	r2, #0
 80129ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2200      	movs	r2, #0
 80129f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	0802f918 	.word	0x0802f918

08012a04 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af02      	add	r7, sp, #8
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8012a0e:	2300      	movs	r3, #0
 8012a10:	9300      	str	r3, [sp, #0]
 8012a12:	2300      	movs	r3, #0
 8012a14:	2200      	movs	r2, #0
 8012a16:	2100      	movs	r1, #0
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff fcb2 	bl	8012382 <_ZN8touchgfx4RectC1Essss>
    }
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012a26:	b480      	push	{r7}
 8012a28:	b083      	sub	sp, #12
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr

08012a42 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a44:	b085      	sub	sp, #20
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8012a4e:	687e      	ldr	r6, [r7, #4]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	3330      	adds	r3, #48	; 0x30
 8012a56:	681c      	ldr	r4, [r3, #0]
 8012a58:	887d      	ldrh	r5, [r7, #2]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f000 f845 	bl	8012aea <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012a60:	4603      	mov	r3, r0
 8012a62:	81bb      	strh	r3, [r7, #12]
 8012a64:	f107 030c 	add.w	r3, r7, #12
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7fd fbb1 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	6813      	ldr	r3, [r2, #0]
 8012a72:	332c      	adds	r3, #44	; 0x2c
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	4610      	mov	r0, r2
 8012a78:	4798      	blx	r3
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	1aeb      	subs	r3, r5, r3
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	b21b      	sxth	r3, r3
 8012a82:	4619      	mov	r1, r3
 8012a84:	4630      	mov	r0, r6
 8012a86:	47a0      	blx	r4
    }
 8012a88:	bf00      	nop
 8012a8a:	3714      	adds	r7, #20
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a90 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	807b      	strh	r3, [r7, #2]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	332c      	adds	r3, #44	; 0x2c
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012aae:	4610      	mov	r0, r2
 8012ab0:	4798      	blx	r3
        setBaselineY(baselineY);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	3360      	adds	r3, #96	; 0x60
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	4798      	blx	r3
    }
 8012ac4:	bf00      	nop
 8012ac6:	3708      	adds	r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	887a      	ldrh	r2, [r7, #2]
 8012adc:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8012ade:	bf00      	nop
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8012aea:	b480      	push	{r7}
 8012aec:	b083      	sub	sp, #12
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr
	...

08012b04 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	4a05      	ldr	r2, [pc, #20]	; (8012b24 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	601a      	str	r2, [r3, #0]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7ff fe87 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	0802f918 	.word	0x0802f918

08012b28 <_ZN8touchgfx8TextAreaD0Ev>:
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff ffe7 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8012b36:	2134      	movs	r1, #52	; 0x34
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f018 fb98 	bl	802b26e <_ZdlPvj>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4618      	mov	r0, r3
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff ff24 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 8012b58:	4a03      	ldr	r2, [pc, #12]	; (8012b68 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]
    {
    }
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	0802d504 	.word	0x0802d504

08012b6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	4a05      	ldr	r2, [pc, #20]	; (8012b8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff ffc1 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0802d504 	.word	0x0802d504

08012b90 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff ffe7 	bl	8012b6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012b9e:	2134      	movs	r1, #52	; 0x34
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f018 fb64 	bl	802b26e <_ZdlPvj>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff ffc4 	bl	8012b48 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012bc0:	4a05      	ldr	r2, [pc, #20]	; (8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	0802fb24 	.word	0x0802fb24

08012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012bec:	bf00      	nop
 8012bee:	370c      	adds	r7, #12
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf6:	4770      	bx	lr

08012bf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7ff fdfd 	bl	8012804 <_ZN8touchgfx6WidgetC1Ev>
 8012c0a:	4a0b      	ldr	r2, [pc, #44]	; (8012c38 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	601a      	str	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	3326      	adds	r3, #38	; 0x26
 8012c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff fbde 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	22ff      	movs	r2, #255	; 0xff
 8012c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8012c26:	6839      	ldr	r1, [r7, #0]
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f00b f987 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0802fc08 	.word	0x0802fc08

08012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8012c3c:	b480      	push	{r7}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	683a      	ldr	r2, [r7, #0]
 8012c4a:	601a      	str	r2, [r3, #0]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	370c      	adds	r7, #12
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8012c5a:	b480      	push	{r7}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
        {
            return v;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
        }
 8012c66:	4618      	mov	r0, r3
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr

08012c72 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8012c72:	b590      	push	{r4, r7, lr}
 8012c74:	b083      	sub	sp, #12
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
 8012c7a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3340      	adds	r3, #64	; 0x40
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff ffea 	bl	8012c5a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012c86:	4604      	mov	r4, r0
 8012c88:	463b      	mov	r3, r7
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff ffe5 	bl	8012c5a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012c90:	4603      	mov	r3, r0
 8012c92:	429c      	cmp	r4, r3
 8012c94:	bf0c      	ite	eq
 8012c96:	2301      	moveq	r3, #1
 8012c98:	2300      	movne	r3, #0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d106      	bne.n	8012cae <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f00a f9bc 	bl	801d024 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8012cac:	e000      	b.n	8012cb0 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8012cae:	bf00      	nop
    }
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd90      	pop	{r4, r7, pc}
	...

08012cb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	4a05      	ldr	r2, [pc, #20]	; (8012cd8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f009 ffbf 	bl	801cc4c <_ZN8touchgfx15AbstractPainterD1Ev>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	0802f390 	.word	0x0802f390

08012cdc <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff ffe7 	bl	8012cb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012cea:	2114      	movs	r1, #20
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f018 fabe 	bl	802b26e <_ZdlPvj>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	4a05      	ldr	r2, [pc, #20]	; (8012d1c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	601a      	str	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff fd8b 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	0802fc08 	.word	0x0802fc08

08012d20 <_ZN8touchgfx5ImageD0Ev>:
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ffe7 	bl	8012cfc <_ZN8touchgfx5ImageD1Ev>
 8012d2e:	212c      	movs	r1, #44	; 0x2c
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f018 fa9c 	bl	802b26e <_ZdlPvj>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff fcba 	bl	80126c4 <_ZN8touchgfx9ContainerC1Ev>
 8012d50:	4a0b      	ldr	r2, [pc, #44]	; (8012d80 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	22ff      	movs	r2, #255	; 0xff
 8012d62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2101      	movs	r1, #1
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7ff fc30 	bl	80125d6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	0802d470 	.word	0x0802d470

08012d84 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	4a05      	ldr	r2, [pc, #20]	; (8012da4 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff fcab 	bl	80126f0 <_ZN8touchgfx9ContainerD1Ev>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	0802d470 	.word	0x0802d470

08012da8 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff ffe7 	bl	8012d84 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012db6:	2134      	movs	r1, #52	; 0x34
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f018 fa58 	bl	802b26e <_ZdlPvj>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	78fa      	ldrb	r2, [r7, #3]
 8012dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	3384      	adds	r3, #132	; 0x84
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	4798      	blx	r3
    }
 8012de8:	bf00      	nop
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012dfe:	4618      	mov	r0, r3
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr

08012e0a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
 8012e12:	460b      	mov	r3, r1
 8012e14:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	78fa      	ldrb	r2, [r7, #3]
 8012e1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	3388      	adds	r3, #136	; 0x88
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	4798      	blx	r3
    }
 8012e2a:	bf00      	nop
 8012e2c:	3708      	adds	r7, #8
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8012e32:	b480      	push	{r7}
 8012e34:	b083      	sub	sp, #12
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8012e40:	4618      	mov	r0, r3
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	683a      	ldr	r2, [r7, #0]
 8012e5a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012e5c:	bf00      	nop
 8012e5e:	370c      	adds	r7, #12
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	bf00      	nop
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr

08012e7c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	bf00      	nop
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff ff50 	bl	8012d40 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8012ea0:	4a03      	ldr	r2, [pc, #12]	; (8012eb0 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}
 8012eb0:	0802d3c4 	.word	0x0802d3c4

08012eb4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	4a05      	ldr	r2, [pc, #20]	; (8012ed4 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	601a      	str	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff ff5d 	bl	8012d84 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	0802d3c4 	.word	0x0802d3c4

08012ed8 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ffe7 	bl	8012eb4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8012ee6:	2134      	movs	r1, #52	; 0x34
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f018 f9c0 	bl	802b26e <_ZdlPvj>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7ff ff73 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8012f0e:	6838      	ldr	r0, [r7, #0]
 8012f10:	f7ff fa57 	bl	80123c2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	bf0c      	ite	eq
 8012f1a:	2301      	moveq	r3, #1
 8012f1c:	2300      	movne	r3, #0
 8012f1e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8012f20:	7bbb      	ldrb	r3, [r7, #14]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d005      	beq.n	8012f32 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
 8012f28:	f083 0301 	eor.w	r3, r3, #1
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d108      	bne.n	8012f44 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8012f32:	7bbb      	ldrb	r3, [r7, #14]
 8012f34:	f083 0301 	eor.w	r3, r3, #1
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00f      	beq.n	8012f5e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8012f3e:	7bfb      	ldrb	r3, [r7, #15]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00c      	beq.n	8012f5e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	7bba      	ldrb	r2, [r7, #14]
 8012f48:	4611      	mov	r1, r2
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff ff3c 	bl	8012dc8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	3314      	adds	r3, #20
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4610      	mov	r0, r2
 8012f5c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 8012f5e:	7bbb      	ldrb	r3, [r7, #14]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d019      	beq.n	8012f98 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d015      	beq.n	8012f98 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	330c      	adds	r3, #12
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4610      	mov	r0, r2
 8012f7c:	4798      	blx	r3
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d009      	beq.n	8012f98 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	3308      	adds	r3, #8
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6879      	ldr	r1, [r7, #4]
 8012f94:	4610      	mov	r0, r2
 8012f96:	4798      	blx	r3
            }
        }
    }
 8012f98:	bf00      	nop
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff fc2a 	bl	8012804 <_ZN8touchgfx6WidgetC1Ev>
 8012fb0:	4a0d      	ldr	r2, [pc, #52]	; (8012fe8 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	22ff      	movs	r2, #255	; 0xff
 8012fba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	3328      	adds	r3, #40	; 0x28
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff f9b6 	bl	8012336 <_ZN8touchgfx9colortypeC1Em>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	332c      	adds	r3, #44	; 0x2c
 8012fce:	2100      	movs	r1, #0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7ff f9b0 	bl	8012336 <_ZN8touchgfx9colortypeC1Em>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	0802fba0 	.word	0x0802fba0

08012fec <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	4a05      	ldr	r2, [pc, #20]	; (801300c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fc13 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	0802fba0 	.word	0x0802fba0

08013010 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7ff ffe7 	bl	8012fec <_ZN8touchgfx13BoxWithBorderD1Ev>
 801301e:	2134      	movs	r1, #52	; 0x34
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f018 f924 	bl	802b26e <_ZdlPvj>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	4618      	mov	r0, r3
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	683a      	ldr	r2, [r7, #0]
 801303e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013040:	bf00      	nop
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 801304c:	b480      	push	{r7}
 801304e:	b083      	sub	sp, #12
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	683a      	ldr	r2, [r7, #0]
 801305a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801305c:	bf00      	nop
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr

08013068 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8013068:	b480      	push	{r7}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	460b      	mov	r3, r1
 8013072:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	78fa      	ldrb	r2, [r7, #3]
 8013078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801307c:	bf00      	nop
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	460b      	mov	r3, r1
 8013092:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	78fa      	ldrb	r2, [r7, #3]
 8013098:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801309c:	bf00      	nop
 801309e:	370c      	adds	r7, #12
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr

080130a8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	4a05      	ldr	r2, [pc, #20]	; (80130c8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7ff fb3b 	bl	8012734 <_ZN8touchgfx6ScreenD1Ev>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	0802d390 	.word	0x0802d390

080130cc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7ff ffe7 	bl	80130a8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80130da:	2140      	movs	r1, #64	; 0x40
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f018 f8c6 	bl	802b26e <_ZdlPvj>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4618      	mov	r0, r3
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	4a90      	ldr	r2, [pc, #576]	; (8013338 <_ZN12MainViewBaseD1Ev+0x24c>)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 8013100:	4618      	mov	r0, r3
 8013102:	f002 fa35 	bl	8015570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 801310c:	4618      	mov	r0, r3
 801310e:	f7ff fcf9 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8013118:	4618      	mov	r0, r3
 801311a:	f002 fa4b 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8013124:	4618      	mov	r0, r3
 8013126:	f007 fd45 	bl	801abb4 <_ZN8touchgfx11BoxProgressD1Ev>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff fce7 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 801313c:	4618      	mov	r0, r3
 801313e:	f7ff fce1 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8013148:	4618      	mov	r0, r3
 801314a:	f002 fa33 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013154:	4618      	mov	r0, r3
 8013156:	f002 fa2d 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fccf 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 801316c:	4618      	mov	r0, r3
 801316e:	f7ff fcc9 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8013178:	4618      	mov	r0, r3
 801317a:	f002 fa1b 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8013184:	4618      	mov	r0, r3
 8013186:	f002 fa15 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8013190:	4618      	mov	r0, r3
 8013192:	f002 f841 	bl	8015218 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801319c:	4618      	mov	r0, r3
 801319e:	f7ff fcb1 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f603 0364 	addw	r3, r3, #2148	; 0x864
 80131a8:	4618      	mov	r0, r3
 80131aa:	f002 fa03 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7ff fca5 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80131c0:	4618      	mov	r0, r3
 80131c2:	f002 f9f7 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80131cc:	4618      	mov	r0, r3
 80131ce:	f002 f9f1 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff fc93 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f203 7354 	addw	r3, r3, #1876	; 0x754
 80131e4:	4618      	mov	r0, r3
 80131e6:	f002 f9e5 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80131f0:	4618      	mov	r0, r3
 80131f2:	f007 fddf 	bl	801adb4 <_ZN8touchgfx13ImageProgressD1Ev>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80131fc:	4618      	mov	r0, r3
 80131fe:	f002 f9d9 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8013208:	4618      	mov	r0, r3
 801320a:	f007 fcd3 	bl	801abb4 <_ZN8touchgfx11BoxProgressD1Ev>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff fc75 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013220:	4618      	mov	r0, r3
 8013222:	f002 f9c7 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801322c:	4618      	mov	r0, r3
 801322e:	f002 f9c1 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff fc63 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff fc5d 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013250:	4618      	mov	r0, r3
 8013252:	f002 f9af 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 801325c:	4618      	mov	r0, r3
 801325e:	f002 f9a9 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013268:	4618      	mov	r0, r3
 801326a:	f7ff fc4b 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8013274:	4618      	mov	r0, r3
 8013276:	f7ff fc45 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8013280:	4618      	mov	r0, r3
 8013282:	f002 f9db 	bl	801563c <_ZN8touchgfx13PainterRGB888D1Ev>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801328c:	4618      	mov	r0, r3
 801328e:	f002 f9b3 	bl	80155f8 <_ZN8touchgfx4LineD1Ev>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8013298:	4618      	mov	r0, r3
 801329a:	f002 f98b 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80132a4:	4618      	mov	r0, r3
 80132a6:	f002 f985 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80132b0:	4618      	mov	r0, r3
 80132b2:	f002 f97f 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80132bc:	4618      	mov	r0, r3
 80132be:	f002 f979 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132c8:	4618      	mov	r0, r3
 80132ca:	f002 f973 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80132d4:	4618      	mov	r0, r3
 80132d6:	f002 f96d 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80132e0:	4618      	mov	r0, r3
 80132e2:	f002 f967 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80132ec:	4618      	mov	r0, r3
 80132ee:	f002 f961 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7ff fcff 	bl	8012cfc <_ZN8touchgfx5ImageD1Ev>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	33d8      	adds	r3, #216	; 0xd8
 8013302:	4618      	mov	r0, r3
 8013304:	f002 f956 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	33a4      	adds	r3, #164	; 0xa4
 801330c:	4618      	mov	r0, r3
 801330e:	f7ff fbf9 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	3370      	adds	r3, #112	; 0x70
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff fbf4 	bl	8012b04 <_ZN8touchgfx8TextAreaD1Ev>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3340      	adds	r3, #64	; 0x40
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fae7 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	4618      	mov	r0, r3
 801332a:	f7ff febd 	bl	80130a8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	4618      	mov	r0, r3
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	0802d2b0 	.word	0x0802d2b0

0801333c <_ZN12MainViewBaseD0Ev>:
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fed1 	bl	80130ec <_ZN12MainViewBaseD1Ev>
 801334a:	f642 110c 	movw	r1, #10508	; 0x290c
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f017 ff8d 	bl	802b26e <_ZdlPvj>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801335e:	b580      	push	{r7, lr}
 8013360:	b082      	sub	sp, #8
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013366:	f00b ff7f 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801336a:	4603      	mov	r3, r0
    }
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8013374:	b590      	push	{r4, r7, lr}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]
 801337e:	460b      	mov	r3, r1
 8013380:	71bb      	strb	r3, [r7, #6]
 8013382:	4613      	mov	r3, r2
 8013384:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8013386:	f7fd fb3f 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d105      	bne.n	801339c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8013390:	4b0a      	ldr	r3, [pc, #40]	; (80133bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8013392:	4a0b      	ldr	r2, [pc, #44]	; (80133c0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8013394:	2138      	movs	r1, #56	; 0x38
 8013396:	480b      	ldr	r0, [pc, #44]	; (80133c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013398:	f017 ff94 	bl	802b2c4 <__assert_func>
 801339c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801339e:	f7fd fb3f 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 80133a2:	6803      	ldr	r3, [r0, #0]
 80133a4:	332c      	adds	r3, #44	; 0x2c
 80133a6:	681c      	ldr	r4, [r3, #0]
 80133a8:	797b      	ldrb	r3, [r7, #5]
 80133aa:	79ba      	ldrb	r2, [r7, #6]
 80133ac:	79f9      	ldrb	r1, [r7, #7]
 80133ae:	47a0      	blx	r4
 80133b0:	4603      	mov	r3, r0
    }
 80133b2:	4618      	mov	r0, r3
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd90      	pop	{r4, r7, pc}
 80133ba:	bf00      	nop
 80133bc:	0802c76c 	.word	0x0802c76c
 80133c0:	0802d5e0 	.word	0x0802d5e0
 80133c4:	0802c7b0 	.word	0x0802c7b0

080133c8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 80133c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133cc:	b0c8      	sub	sp, #288	; 0x120
 80133ce:	af02      	add	r7, sp, #8
 80133d0:	1d3b      	adds	r3, r7, #4
 80133d2:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 80133d4:	1d3b      	adds	r3, r7, #4
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4618      	mov	r0, r3
 80133da:	f001 ff45 	bl	8015268 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80133de:	4add      	ldr	r2, [pc, #884]	; (8013754 <_ZN12MainViewBaseC1Ev+0x38c>)
 80133e0:	1d3b      	adds	r3, r7, #4
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	601a      	str	r2, [r3, #0]
 80133e6:	1d3b      	adds	r3, r7, #4
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	3340      	adds	r3, #64	; 0x40
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7ff fa61 	bl	80128b4 <_ZN8touchgfx3BoxC1Ev>
 80133f2:	1d3b      	adds	r3, r7, #4
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	3370      	adds	r3, #112	; 0x70
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fad1 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 80133fe:	1d3b      	adds	r3, r7, #4
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	33a4      	adds	r3, #164	; 0xa4
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff facb 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801340a:	1d3b      	adds	r3, r7, #4
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	33d8      	adds	r3, #216	; 0xd8
 8013410:	4618      	mov	r0, r3
 8013412:	f7ff fbcd 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013416:	1d3b      	adds	r3, r7, #4
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f503 7488 	add.w	r4, r3, #272	; 0x110
 801341e:	f107 030c 	add.w	r3, r7, #12
 8013422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013426:	4618      	mov	r0, r3
 8013428:	f7fe ffd7 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 801342c:	f107 030c 	add.w	r3, r7, #12
 8013430:	4619      	mov	r1, r3
 8013432:	4620      	mov	r0, r4
 8013434:	f7ff fbe0 	bl	8012bf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013438:	1d3b      	adds	r3, r7, #4
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff fbb5 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013446:	1d3b      	adds	r3, r7, #4
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff fbae 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013454:	1d3b      	adds	r3, r7, #4
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff fba7 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013462:	1d3b      	adds	r3, r7, #4
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff fba0 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013470:	1d3b      	adds	r3, r7, #4
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8013478:	4618      	mov	r0, r3
 801347a:	f7ff fb99 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801347e:	1d3b      	adds	r3, r7, #4
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013486:	4618      	mov	r0, r3
 8013488:	f7ff fb92 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801348c:	1d3b      	adds	r3, r7, #4
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013494:	4618      	mov	r0, r3
 8013496:	f7ff fb8b 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801349a:	1d3b      	adds	r3, r7, #4
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff fb84 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80134a8:	1d3b      	adds	r3, r7, #4
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80134b0:	4618      	mov	r0, r3
 80134b2:	f009 fd97 	bl	801cfe4 <_ZN8touchgfx4LineC1Ev>
 80134b6:	1d3b      	adds	r3, r7, #4
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f503 745c 	add.w	r4, r3, #880	; 0x370
 80134be:	f107 0310 	add.w	r3, r7, #16
 80134c2:	2100      	movs	r1, #0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fe ff36 	bl	8012336 <_ZN8touchgfx9colortypeC1Em>
 80134ca:	f107 0310 	add.w	r3, r7, #16
 80134ce:	22ff      	movs	r2, #255	; 0xff
 80134d0:	6819      	ldr	r1, [r3, #0]
 80134d2:	4620      	mov	r0, r4
 80134d4:	f009 fb78 	bl	801cbc8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80134d8:	1d3b      	adds	r3, r7, #4
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff fa5d 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 80134e6:	1d3b      	adds	r3, r7, #4
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fa56 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 80134f4:	1d3b      	adds	r3, r7, #4
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fb57 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013502:	1d3b      	adds	r3, r7, #4
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801350a:	4618      	mov	r0, r3
 801350c:	f7ff fb50 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013510:	1d3b      	adds	r3, r7, #4
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff fa41 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801351e:	1d3b      	adds	r3, r7, #4
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff fa3a 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801352c:	1d3b      	adds	r3, r7, #4
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013534:	4618      	mov	r0, r3
 8013536:	f7ff fb3b 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801353a:	1d3b      	adds	r3, r7, #4
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013542:	4618      	mov	r0, r3
 8013544:	f7ff fb34 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013548:	1d3b      	adds	r3, r7, #4
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8013550:	4618      	mov	r0, r3
 8013552:	f7ff fa25 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 8013556:	1d3b      	adds	r3, r7, #4
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801355e:	4618      	mov	r0, r3
 8013560:	f007 fb3c 	bl	801abdc <_ZN8touchgfx11BoxProgressC1Ev>
 8013564:	1d3b      	adds	r3, r7, #4
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fb1f 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013572:	1d3b      	adds	r3, r7, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f203 6364 	addw	r3, r3, #1636	; 0x664
 801357a:	4618      	mov	r0, r3
 801357c:	f007 fc44 	bl	801ae08 <_ZN8touchgfx13ImageProgressC1Ev>
 8013580:	1d3b      	adds	r3, r7, #4
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f203 7354 	addw	r3, r3, #1876	; 0x754
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff fb11 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801358e:	1d3b      	adds	r3, r7, #4
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8013596:	4618      	mov	r0, r3
 8013598:	f7ff fa02 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801359c:	1d3b      	adds	r3, r7, #4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff fb03 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135aa:	1d3b      	adds	r3, r7, #4
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fafc 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135b8:	1d3b      	adds	r3, r7, #4
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7ff f9ed 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 80135c6:	1d3b      	adds	r3, r7, #4
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f603 0364 	addw	r3, r3, #2148	; 0x864
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff faee 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135d4:	1d3b      	adds	r3, r7, #4
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80135dc:	4618      	mov	r0, r3
 80135de:	f7ff f9df 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 80135e2:	1d3b      	adds	r3, r7, #4
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 80135ea:	4618      	mov	r0, r3
 80135ec:	f001 fe52 	bl	8015294 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 80135f0:	1d3b      	adds	r3, r7, #4
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7ff fad9 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135fe:	1d3b      	adds	r3, r7, #4
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff fad2 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801360c:	1d3b      	adds	r3, r7, #4
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 8013614:	4618      	mov	r0, r3
 8013616:	f7ff f9c3 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801361a:	1d3b      	adds	r3, r7, #4
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff f9bc 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 8013628:	1d3b      	adds	r3, r7, #4
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff fabd 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013636:	1d3b      	adds	r3, r7, #4
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 801363e:	4618      	mov	r0, r3
 8013640:	f7ff fab6 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013644:	1d3b      	adds	r3, r7, #4
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff f9a7 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 8013652:	1d3b      	adds	r3, r7, #4
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff f9a0 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 8013660:	1d3b      	adds	r3, r7, #4
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8013668:	4618      	mov	r0, r3
 801366a:	f007 fab7 	bl	801abdc <_ZN8touchgfx11BoxProgressC1Ev>
 801366e:	1d3b      	adds	r3, r7, #4
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff fa9a 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801367c:	1d3b      	adds	r3, r7, #4
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8013684:	4618      	mov	r0, r3
 8013686:	f7ff f98b 	bl	80129a0 <_ZN8touchgfx8TextAreaC1Ev>
 801368a:	1d3b      	adds	r3, r7, #4
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f603 40dc 	addw	r0, r3, #3292	; 0xcdc
 8013692:	f107 0314 	add.w	r3, r7, #20
 8013696:	4a30      	ldr	r2, [pc, #192]	; (8013758 <_ZN12MainViewBaseC1Ev+0x390>)
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	f107 0314 	add.w	r3, r7, #20
 801369e:	2200      	movs	r2, #0
 80136a0:	605a      	str	r2, [r3, #4]
 80136a2:	f107 0314 	add.w	r3, r7, #20
 80136a6:	1d39      	adds	r1, r7, #4
 80136a8:	cb0c      	ldmia	r3, {r2, r3}
 80136aa:	6809      	ldr	r1, [r1, #0]
 80136ac:	f001 fe3c 	bl	8015328 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80136b0:	1d3b      	adds	r3, r7, #4
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	f603 43ec 	addw	r3, r3, #3308	; 0xcec
 80136b8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80136bc:	4618      	mov	r0, r3
 80136be:	f00a fd93 	bl	801e1e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 488, 278);
 80136c2:	1d3b      	adds	r3, r7, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80136ca:	f44f 738b 	mov.w	r3, #278	; 0x116
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80136d4:	2200      	movs	r2, #0
 80136d6:	2100      	movs	r1, #0
 80136d8:	f7fd f94e 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80136dc:	1d3b      	adds	r3, r7, #4
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80136e4:	2200      	movs	r2, #0
 80136e6:	2100      	movs	r1, #0
 80136e8:	2000      	movs	r0, #0
 80136ea:	f7ff fe43 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136ee:	4603      	mov	r3, r0
 80136f0:	4619      	mov	r1, r3
 80136f2:	4620      	mov	r0, r4
 80136f4:	f7ff f920 	bl	8012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    CltDecsriptor.setXY(338, 129);
 80136f8:	1d3b      	adds	r3, r7, #4
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	3370      	adds	r3, #112	; 0x70
 80136fe:	2281      	movs	r2, #129	; 0x81
 8013700:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8013704:	4618      	mov	r0, r3
 8013706:	f7fe fee5 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801370a:	1d3b      	adds	r3, r7, #4
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013712:	2200      	movs	r2, #0
 8013714:	21dc      	movs	r1, #220	; 0xdc
 8013716:	20ff      	movs	r0, #255	; 0xff
 8013718:	f7ff fe2c 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801371c:	4603      	mov	r3, r0
 801371e:	4619      	mov	r1, r3
 8013720:	4620      	mov	r0, r4
 8013722:	f7ff f980 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8013726:	1d3b      	adds	r3, r7, #4
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	3370      	adds	r3, #112	; 0x70
 801372c:	2100      	movs	r1, #0
 801372e:	4618      	mov	r0, r3
 8013730:	f7ff f9cc 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8013734:	1d3b      	adds	r3, r7, #4
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801373c:	f107 031c 	add.w	r3, r7, #28
 8013740:	2116      	movs	r1, #22
 8013742:	4618      	mov	r0, r3
 8013744:	f7ff f906 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013748:	8bb9      	ldrh	r1, [r7, #28]
 801374a:	4620      	mov	r0, r4
 801374c:	f00a f818 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpFrDescriptor.setXY(126, 129);
 8013750:	1d3b      	adds	r3, r7, #4
 8013752:	e003      	b.n	801375c <_ZN12MainViewBaseC1Ev+0x394>
 8013754:	0802d2b0 	.word	0x0802d2b0
 8013758:	080151ed 	.word	0x080151ed
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	33a4      	adds	r3, #164	; 0xa4
 8013760:	2281      	movs	r2, #129	; 0x81
 8013762:	217e      	movs	r1, #126	; 0x7e
 8013764:	4618      	mov	r0, r3
 8013766:	f7fe feb5 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TpFrDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801376a:	1d3b      	adds	r3, r7, #4
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013772:	2200      	movs	r2, #0
 8013774:	21dc      	movs	r1, #220	; 0xdc
 8013776:	20ff      	movs	r0, #255	; 0xff
 8013778:	f7ff fdfc 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801377c:	4603      	mov	r3, r0
 801377e:	4619      	mov	r1, r3
 8013780:	4620      	mov	r0, r4
 8013782:	f7ff f950 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpFrDescriptor.setLinespacing(0);
 8013786:	1d3b      	adds	r3, r7, #4
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	33a4      	adds	r3, #164	; 0xa4
 801378c:	2100      	movs	r1, #0
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff f99c 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TpFrDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8013794:	1d3b      	adds	r3, r7, #4
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801379c:	f107 0320 	add.w	r3, r7, #32
 80137a0:	2110      	movs	r1, #16
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7ff f8d6 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80137a8:	8c39      	ldrh	r1, [r7, #32]
 80137aa:	4620      	mov	r0, r4
 80137ac:	f009 ffe8 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpFr.setPosition(102, 85, 71, 41);
 80137b0:	1d3b      	adds	r3, r7, #4
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80137b8:	2329      	movs	r3, #41	; 0x29
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	2347      	movs	r3, #71	; 0x47
 80137be:	2255      	movs	r2, #85	; 0x55
 80137c0:	2166      	movs	r1, #102	; 0x66
 80137c2:	f7fd f8d9 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpFr.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80137c6:	1d3b      	adds	r3, r7, #4
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80137ce:	22ff      	movs	r2, #255	; 0xff
 80137d0:	21ff      	movs	r1, #255	; 0xff
 80137d2:	20ff      	movs	r0, #255	; 0xff
 80137d4:	f7ff fdce 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80137d8:	4603      	mov	r3, r0
 80137da:	4619      	mov	r1, r3
 80137dc:	4620      	mov	r0, r4
 80137de:	f7ff f922 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpFr.setLinespacing(0);
 80137e2:	1d3b      	adds	r3, r7, #4
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	33d8      	adds	r3, #216	; 0xd8
 80137e8:	2100      	movs	r1, #0
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff f96e 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpFrBuffer, TPFR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80137f0:	1d3b      	adds	r3, r7, #4
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 80137f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137fc:	2101      	movs	r1, #1
 80137fe:	4618      	mov	r0, r3
 8013800:	f7ff f8a8 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013808:	4618      	mov	r0, r3
 801380a:	f7ff f8b3 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801380e:	4603      	mov	r3, r0
 8013810:	4ae2      	ldr	r2, [pc, #904]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 8013812:	2105      	movs	r1, #5
 8013814:	4620      	mov	r0, r4
 8013816:	f00d fdbd 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpFr.setWildcard(TpFrBuffer);
 801381a:	1d3b      	adds	r3, r7, #4
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8013822:	1d3b      	adds	r3, r7, #4
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 801382a:	4619      	mov	r1, r3
 801382c:	4610      	mov	r0, r2
 801382e:	f7ff f9d5 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpFr.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013832:	1d3b      	adds	r3, r7, #4
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801383a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801383e:	2100      	movs	r1, #0
 8013840:	4618      	mov	r0, r3
 8013842:	f7ff f887 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013846:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8013848:	4620      	mov	r0, r4
 801384a:	f009 ff99 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 801384e:	1d3b      	adds	r3, r7, #4
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013856:	223f      	movs	r2, #63	; 0x3f
 8013858:	21b3      	movs	r1, #179	; 0xb3
 801385a:	4618      	mov	r0, r3
 801385c:	f7fe fe3a 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013860:	1d3b      	adds	r3, r7, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013868:	2100      	movs	r1, #0
 801386a:	4618      	mov	r0, r3
 801386c:	f7fe fea3 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8013870:	1d3b      	adds	r3, r7, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 8013878:	230e      	movs	r3, #14
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	2312      	movs	r3, #18
 801387e:	223f      	movs	r2, #63	; 0x3f
 8013880:	2136      	movs	r1, #54	; 0x36
 8013882:	f7fd f879 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013886:	1d3b      	adds	r3, r7, #4
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801388e:	22ff      	movs	r2, #255	; 0xff
 8013890:	21ff      	movs	r1, #255	; 0xff
 8013892:	20ff      	movs	r0, #255	; 0xff
 8013894:	f7ff fd6e 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013898:	4603      	mov	r3, r0
 801389a:	4619      	mov	r1, r3
 801389c:	4620      	mov	r0, r4
 801389e:	f7ff f8c2 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 80138a2:	1d3b      	adds	r3, r7, #4
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80138aa:	2100      	movs	r1, #0
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7ff f90d 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 80138b2:	1d3b      	adds	r3, r7, #4
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f603 442e 	addw	r4, r3, #3118	; 0xc2e
 80138ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80138be:	211e      	movs	r1, #30
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff f847 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80138c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7ff f852 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80138d0:	4603      	mov	r3, r0
 80138d2:	4ab2      	ldr	r2, [pc, #712]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 80138d4:	2102      	movs	r1, #2
 80138d6:	4620      	mov	r0, r4
 80138d8:	f00d fd5c 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80138dc:	1d3b      	adds	r3, r7, #4
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80138e4:	1d3b      	adds	r3, r7, #4
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f603 432e 	addw	r3, r3, #3118	; 0xc2e
 80138ec:	4619      	mov	r1, r3
 80138ee:	4610      	mov	r0, r2
 80138f0:	f7ff f974 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80138f4:	1d3b      	adds	r3, r7, #4
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80138fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013900:	2102      	movs	r1, #2
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff f826 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013908:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801390a:	4620      	mov	r0, r4
 801390c:	f009 ff38 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013910:	1d3b      	adds	r3, r7, #4
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 8013918:	230e      	movs	r3, #14
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	2312      	movs	r3, #18
 801391e:	223f      	movs	r2, #63	; 0x3f
 8013920:	2173      	movs	r1, #115	; 0x73
 8013922:	f7fd f829 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013926:	1d3b      	adds	r3, r7, #4
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801392e:	22ff      	movs	r2, #255	; 0xff
 8013930:	21ff      	movs	r1, #255	; 0xff
 8013932:	20ff      	movs	r0, #255	; 0xff
 8013934:	f7ff fd1e 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013938:	4603      	mov	r3, r0
 801393a:	4619      	mov	r1, r3
 801393c:	4620      	mov	r0, r4
 801393e:	f7ff f872 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013942:	1d3b      	adds	r3, r7, #4
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801394a:	2100      	movs	r1, #0
 801394c:	4618      	mov	r0, r3
 801394e:	f7ff f8bd 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8013952:	1d3b      	adds	r3, r7, #4
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	f603 4432 	addw	r4, r3, #3122	; 0xc32
 801395a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801395e:	211f      	movs	r1, #31
 8013960:	4618      	mov	r0, r3
 8013962:	f7fe fff7 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801396a:	4618      	mov	r0, r3
 801396c:	f7ff f802 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013970:	4603      	mov	r3, r0
 8013972:	4a8a      	ldr	r2, [pc, #552]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 8013974:	2102      	movs	r1, #2
 8013976:	4620      	mov	r0, r4
 8013978:	f00d fd0c 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 801397c:	1d3b      	adds	r3, r7, #4
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8013984:	1d3b      	adds	r3, r7, #4
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f603 4332 	addw	r3, r3, #3122	; 0xc32
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f7ff f924 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8013994:	1d3b      	adds	r3, r7, #4
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801399c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80139a0:	2103      	movs	r1, #3
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fe ffd6 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80139a8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80139aa:	4620      	mov	r0, r4
 80139ac:	f009 fee8 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80139b0:	1d3b      	adds	r3, r7, #4
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80139b8:	230e      	movs	r3, #14
 80139ba:	9300      	str	r3, [sp, #0]
 80139bc:	2312      	movs	r3, #18
 80139be:	223e      	movs	r2, #62	; 0x3e
 80139c0:	21ad      	movs	r1, #173	; 0xad
 80139c2:	f7fc ffd9 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80139c6:	1d3b      	adds	r3, r7, #4
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 80139ce:	22ff      	movs	r2, #255	; 0xff
 80139d0:	21ff      	movs	r1, #255	; 0xff
 80139d2:	20ff      	movs	r0, #255	; 0xff
 80139d4:	f7ff fcce 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80139d8:	4603      	mov	r3, r0
 80139da:	4619      	mov	r1, r3
 80139dc:	4620      	mov	r0, r4
 80139de:	f7ff f822 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80139e2:	1d3b      	adds	r3, r7, #4
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80139ea:	2100      	movs	r1, #0
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ff f86d 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80139f2:	1d3b      	adds	r3, r7, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f603 4436 	addw	r4, r3, #3126	; 0xc36
 80139fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80139fe:	2120      	movs	r1, #32
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fe ffa7 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013a06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fe ffb2 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013a10:	4603      	mov	r3, r0
 8013a12:	4a62      	ldr	r2, [pc, #392]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 8013a14:	2102      	movs	r1, #2
 8013a16:	4620      	mov	r0, r4
 8013a18:	f00d fcbc 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8013a1c:	1d3b      	adds	r3, r7, #4
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8013a24:	1d3b      	adds	r3, r7, #4
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f603 4336 	addw	r3, r3, #3126	; 0xc36
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	4610      	mov	r0, r2
 8013a30:	f7ff f8d4 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8013a34:	1d3b      	adds	r3, r7, #4
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8013a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a40:	2104      	movs	r1, #4
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fe ff86 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013a48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f009 fe97 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8013a52:	1d3b      	adds	r3, r7, #4
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8013a5a:	230e      	movs	r3, #14
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	2312      	movs	r3, #18
 8013a60:	223e      	movs	r2, #62	; 0x3e
 8013a62:	21e7      	movs	r1, #231	; 0xe7
 8013a64:	f7fc ff88 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a68:	1d3b      	adds	r3, r7, #4
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8013a70:	22ff      	movs	r2, #255	; 0xff
 8013a72:	21ff      	movs	r1, #255	; 0xff
 8013a74:	20ff      	movs	r0, #255	; 0xff
 8013a76:	f7ff fc7d 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f7fe ffd1 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8013a84:	1d3b      	adds	r3, r7, #4
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff f81c 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8013a94:	1d3b      	adds	r3, r7, #4
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f603 443a 	addw	r4, r3, #3130	; 0xc3a
 8013a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013aa0:	2121      	movs	r1, #33	; 0x21
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fe ff56 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7fe ff61 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	4a39      	ldr	r2, [pc, #228]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 8013ab6:	2102      	movs	r1, #2
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f00d fc6b 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8013abe:	1d3b      	adds	r3, r7, #4
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 8013ac6:	1d3b      	adds	r3, r7, #4
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f603 433a 	addw	r3, r3, #3130	; 0xc3a
 8013ace:	4619      	mov	r1, r3
 8013ad0:	4610      	mov	r0, r2
 8013ad2:	f7ff f883 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013ad6:	1d3b      	adds	r3, r7, #4
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8013ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ae2:	2105      	movs	r1, #5
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fe ff35 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013aea:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8013aee:	4620      	mov	r0, r4
 8013af0:	f009 fe46 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8013af4:	1d3b      	adds	r3, r7, #4
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8013afc:	230e      	movs	r3, #14
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	2312      	movs	r3, #18
 8013b02:	223f      	movs	r2, #63	; 0x3f
 8013b04:	f44f 7192 	mov.w	r1, #292	; 0x124
 8013b08:	f7fc ff36 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013b0c:	1d3b      	adds	r3, r7, #4
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 8013b14:	22ff      	movs	r2, #255	; 0xff
 8013b16:	21ff      	movs	r1, #255	; 0xff
 8013b18:	20ff      	movs	r0, #255	; 0xff
 8013b1a:	f7ff fc2b 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	4619      	mov	r1, r3
 8013b22:	4620      	mov	r0, r4
 8013b24:	f7fe ff7f 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8013b28:	1d3b      	adds	r3, r7, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8013b30:	2100      	movs	r1, #0
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe ffca 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8013b38:	1d3b      	adds	r3, r7, #4
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f603 443e 	addw	r4, r3, #3134	; 0xc3e
 8013b40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b44:	2122      	movs	r1, #34	; 0x22
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fe ff04 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe ff0f 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013b56:	4603      	mov	r3, r0
 8013b58:	4a10      	ldr	r2, [pc, #64]	; (8013b9c <_ZN12MainViewBaseC1Ev+0x7d4>)
 8013b5a:	2102      	movs	r1, #2
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f00d fc19 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8013b62:	1d3b      	adds	r3, r7, #4
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8013b6a:	1d3b      	adds	r3, r7, #4
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f603 433e 	addw	r3, r3, #3134	; 0xc3e
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7ff f831 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8013b7a:	1d3b      	adds	r3, r7, #4
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 8013b82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b86:	2106      	movs	r1, #6
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7fe fee3 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013b8e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013b92:	4620      	mov	r0, r4
 8013b94:	f009 fdf4 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8013b98:	1d3b      	adds	r3, r7, #4
 8013b9a:	e001      	b.n	8013ba0 <_ZN12MainViewBaseC1Ev+0x7d8>
 8013b9c:	0802c7f0 	.word	0x0802c7f0
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8013ba6:	230e      	movs	r3, #14
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	2312      	movs	r3, #18
 8013bac:	223f      	movs	r2, #63	; 0x3f
 8013bae:	f240 115d 	movw	r1, #349	; 0x15d
 8013bb2:	f7fc fee1 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013bb6:	1d3b      	adds	r3, r7, #4
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8013bbe:	22ff      	movs	r2, #255	; 0xff
 8013bc0:	21ff      	movs	r1, #255	; 0xff
 8013bc2:	20ff      	movs	r0, #255	; 0xff
 8013bc4:	f7ff fbd6 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	4619      	mov	r1, r3
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f7fe ff2a 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8013bd2:	1d3b      	adds	r3, r7, #4
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8013bda:	2100      	movs	r1, #0
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fe ff75 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8013be2:	1d3b      	adds	r3, r7, #4
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f603 4442 	addw	r4, r3, #3138	; 0xc42
 8013bea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013bee:	2123      	movs	r1, #35	; 0x23
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fe feaf 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fe feba 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c00:	4603      	mov	r3, r0
 8013c02:	4ae5      	ldr	r2, [pc, #916]	; (8013f98 <_ZN12MainViewBaseC1Ev+0xbd0>)
 8013c04:	2102      	movs	r1, #2
 8013c06:	4620      	mov	r0, r4
 8013c08:	f00d fbc4 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8013c0c:	1d3b      	adds	r3, r7, #4
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8013c14:	1d3b      	adds	r3, r7, #4
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f603 4342 	addw	r3, r3, #3138	; 0xc42
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4610      	mov	r0, r2
 8013c20:	f7fe ffdc 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8013c24:	1d3b      	adds	r3, r7, #4
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8013c2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013c30:	2107      	movs	r1, #7
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fe fe8e 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013c38:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f009 fd9f 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8013c42:	1d3b      	adds	r3, r7, #4
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8013c4a:	230f      	movs	r3, #15
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	2312      	movs	r3, #18
 8013c50:	223e      	movs	r2, #62	; 0x3e
 8013c52:	f240 119b 	movw	r1, #411	; 0x19b
 8013c56:	f7fc fe8f 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c5a:	1d3b      	adds	r3, r7, #4
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 8013c62:	22ff      	movs	r2, #255	; 0xff
 8013c64:	21ff      	movs	r1, #255	; 0xff
 8013c66:	20ff      	movs	r0, #255	; 0xff
 8013c68:	f7ff fb84 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	4619      	mov	r1, r3
 8013c70:	4620      	mov	r0, r4
 8013c72:	f7fe fed8 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8013c76:	1d3b      	adds	r3, r7, #4
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013c7e:	2100      	movs	r1, #0
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fe ff23 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8013c86:	1d3b      	adds	r3, r7, #4
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f603 4446 	addw	r4, r3, #3142	; 0xc46
 8013c8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013c92:	2124      	movs	r1, #36	; 0x24
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7fe fe5d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013c9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fe fe68 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	4abc      	ldr	r2, [pc, #752]	; (8013f98 <_ZN12MainViewBaseC1Ev+0xbd0>)
 8013ca8:	2102      	movs	r1, #2
 8013caa:	4620      	mov	r0, r4
 8013cac:	f00d fb72 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8013cb0:	1d3b      	adds	r3, r7, #4
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f503 7223 	add.w	r2, r3, #652	; 0x28c
 8013cb8:	1d3b      	adds	r3, r7, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f603 4346 	addw	r3, r3, #3142	; 0xc46
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	4610      	mov	r0, r2
 8013cc4:	f7fe ff8a 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8013cc8:	1d3b      	adds	r3, r7, #4
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 8013cd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013cd4:	2108      	movs	r1, #8
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7fe fe3c 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013cdc:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f009 fd4d 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8013ce6:	1d3b      	adds	r3, r7, #4
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8013cee:	230e      	movs	r3, #14
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	2312      	movs	r3, #18
 8013cf4:	223e      	movs	r2, #62	; 0x3e
 8013cf6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013cfa:	f7fc fe3d 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013cfe:	1d3b      	adds	r3, r7, #4
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8013d06:	22ff      	movs	r2, #255	; 0xff
 8013d08:	21ff      	movs	r1, #255	; 0xff
 8013d0a:	20ff      	movs	r0, #255	; 0xff
 8013d0c:	f7ff fb32 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d10:	4603      	mov	r3, r0
 8013d12:	4619      	mov	r1, r3
 8013d14:	4620      	mov	r0, r4
 8013d16:	f7fe fe86 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8013d1a:	1d3b      	adds	r3, r7, #4
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8013d22:	2100      	movs	r1, #0
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7fe fed1 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8013d2a:	1d3b      	adds	r3, r7, #4
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f603 444a 	addw	r4, r3, #3146	; 0xc4a
 8013d32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d36:	2125      	movs	r1, #37	; 0x25
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe fe0b 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013d3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fe fe16 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	4a93      	ldr	r2, [pc, #588]	; (8013f98 <_ZN12MainViewBaseC1Ev+0xbd0>)
 8013d4c:	2102      	movs	r1, #2
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f00d fb20 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013d54:	1d3b      	adds	r3, r7, #4
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f503 7231 	add.w	r2, r3, #708	; 0x2c4
 8013d5c:	1d3b      	adds	r3, r7, #4
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f603 434a 	addw	r3, r3, #3146	; 0xc4a
 8013d64:	4619      	mov	r1, r3
 8013d66:	4610      	mov	r0, r2
 8013d68:	f7fe ff38 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013d6c:	1d3b      	adds	r3, r7, #4
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	f503 7431 	add.w	r4, r3, #708	; 0x2c4
 8013d74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013d78:	2109      	movs	r1, #9
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7fe fdea 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013d80:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8013d84:	4620      	mov	r0, r4
 8013d86:	f009 fcfb 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8013d8a:	1d3b      	adds	r3, r7, #4
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8013d92:	2305      	movs	r3, #5
 8013d94:	9300      	str	r3, [sp, #0]
 8013d96:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8013d9a:	223a      	movs	r2, #58	; 0x3a
 8013d9c:	f06f 0101 	mvn.w	r1, #1
 8013da0:	f7fc fdea 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013da4:	1d3b      	adds	r3, r7, #4
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8013dac:	22ff      	movs	r2, #255	; 0xff
 8013dae:	21ff      	movs	r1, #255	; 0xff
 8013db0:	20ff      	movs	r0, #255	; 0xff
 8013db2:	f7ff fadf 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013db6:	4603      	mov	r3, r0
 8013db8:	22ff      	movs	r2, #255	; 0xff
 8013dba:	4619      	mov	r1, r3
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f008 fee8 	bl	801cb92 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8013dc2:	1d3b      	adds	r3, r7, #4
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8013dca:	1d3b      	adds	r3, r7, #4
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	f008 ff45 	bl	801cc64 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013dda:	1d3b      	adds	r3, r7, #4
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013de2:	2203      	movs	r2, #3
 8013de4:	2100      	movs	r1, #0
 8013de6:	4618      	mov	r0, r3
 8013de8:	f001 fabe 	bl	8015368 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013dec:	1d3b      	adds	r3, r7, #4
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013df4:	2203      	movs	r2, #3
 8013df6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f001 fada 	bl	80153b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8013e00:	1d3b      	adds	r3, r7, #4
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013e08:	2102      	movs	r1, #2
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f001 faf8 	bl	8015400 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8013e10:	1d3b      	adds	r3, r7, #4
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013e18:	2101      	movs	r1, #1
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f009 fa3c 	bl	801d298 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    TpFrTpFrTpFlDesc.setXY(41, 129);
 8013e20:	1d3b      	adds	r3, r7, #4
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8013e28:	2281      	movs	r2, #129	; 0x81
 8013e2a:	2129      	movs	r1, #41	; 0x29
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fe fb51 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TpFrTpFrTpFlDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013e32:	1d3b      	adds	r3, r7, #4
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	21dc      	movs	r1, #220	; 0xdc
 8013e3e:	20ff      	movs	r0, #255	; 0xff
 8013e40:	f7ff fa98 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e44:	4603      	mov	r3, r0
 8013e46:	4619      	mov	r1, r3
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f7fe fdec 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpFrTpFrTpFlDesc.setLinespacing(0);
 8013e4e:	1d3b      	adds	r3, r7, #4
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8013e56:	2100      	movs	r1, #0
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe fe37 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TpFrTpFrTpFlDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8013e5e:	1d3b      	adds	r3, r7, #4
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8013e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013e6a:	210e      	movs	r1, #14
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7fe fd71 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013e72:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8013e76:	4620      	mov	r0, r4
 8013e78:	f009 fc82 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpRlDesc.setXY(40, 207);
 8013e7c:	1d3b      	adds	r3, r7, #4
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013e84:	22cf      	movs	r2, #207	; 0xcf
 8013e86:	2128      	movs	r1, #40	; 0x28
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe fb23 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TpRlDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013e8e:	1d3b      	adds	r3, r7, #4
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8013e96:	2200      	movs	r2, #0
 8013e98:	21dc      	movs	r1, #220	; 0xdc
 8013e9a:	20ff      	movs	r0, #255	; 0xff
 8013e9c:	f7ff fa6a 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f7fe fdbe 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpRlDesc.setLinespacing(0);
 8013eaa:	1d3b      	adds	r3, r7, #4
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe fe09 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TpRlDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8013eba:	1d3b      	adds	r3, r7, #4
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8013ec2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013ec6:	210f      	movs	r1, #15
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fe fd43 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013ece:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f009 fc54 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpFl.setPosition(16, 85, 75, 42);
 8013ed8:	1d3b      	adds	r3, r7, #4
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f503 707c 	add.w	r0, r3, #1008	; 0x3f0
 8013ee0:	232a      	movs	r3, #42	; 0x2a
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	234b      	movs	r3, #75	; 0x4b
 8013ee6:	2255      	movs	r2, #85	; 0x55
 8013ee8:	2110      	movs	r1, #16
 8013eea:	f7fc fd45 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpFl.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013eee:	1d3b      	adds	r3, r7, #4
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8013ef6:	22ff      	movs	r2, #255	; 0xff
 8013ef8:	21ff      	movs	r1, #255	; 0xff
 8013efa:	20ff      	movs	r0, #255	; 0xff
 8013efc:	f7ff fa3a 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f00:	4603      	mov	r3, r0
 8013f02:	4619      	mov	r1, r3
 8013f04:	4620      	mov	r0, r4
 8013f06:	f7fe fd8e 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpFl.setLinespacing(0);
 8013f0a:	1d3b      	adds	r3, r7, #4
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8013f12:	2100      	movs	r1, #0
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fe fdd9 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpFlBuffer, TPFL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8013f1a:	1d3b      	adds	r3, r7, #4
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f603 444e 	addw	r4, r3, #3150	; 0xc4e
 8013f22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013f26:	210b      	movs	r1, #11
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fe fd13 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013f2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7fe fd1e 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	4a17      	ldr	r2, [pc, #92]	; (8013f98 <_ZN12MainViewBaseC1Ev+0xbd0>)
 8013f3c:	2105      	movs	r1, #5
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f00d fa28 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpFl.setWildcard(TpFlBuffer);
 8013f44:	1d3b      	adds	r3, r7, #4
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f503 727c 	add.w	r2, r3, #1008	; 0x3f0
 8013f4c:	1d3b      	adds	r3, r7, #4
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f603 434e 	addw	r3, r3, #3150	; 0xc4e
 8013f54:	4619      	mov	r1, r3
 8013f56:	4610      	mov	r0, r2
 8013f58:	f7fe fe40 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpFl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8013f5c:	1d3b      	adds	r3, r7, #4
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 8013f64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013f68:	210a      	movs	r1, #10
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fe fcf2 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013f70:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8013f74:	4620      	mov	r0, r4
 8013f76:	f009 fc03 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpRl.setPosition(17, 165, 75, 42);
 8013f7a:	1d3b      	adds	r3, r7, #4
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	f503 6085 	add.w	r0, r3, #1064	; 0x428
 8013f82:	232a      	movs	r3, #42	; 0x2a
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	234b      	movs	r3, #75	; 0x4b
 8013f88:	22a5      	movs	r2, #165	; 0xa5
 8013f8a:	2111      	movs	r1, #17
 8013f8c:	f7fc fcf4 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpRl.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013f90:	1d3b      	adds	r3, r7, #4
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	e002      	b.n	8013f9c <_ZN12MainViewBaseC1Ev+0xbd4>
 8013f96:	bf00      	nop
 8013f98:	0802c7f0 	.word	0x0802c7f0
 8013f9c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013fa0:	22ff      	movs	r2, #255	; 0xff
 8013fa2:	21ff      	movs	r1, #255	; 0xff
 8013fa4:	20ff      	movs	r0, #255	; 0xff
 8013fa6:	f7ff f9e5 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013faa:	4603      	mov	r3, r0
 8013fac:	4619      	mov	r1, r3
 8013fae:	4620      	mov	r0, r4
 8013fb0:	f7fe fd39 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpRl.setLinespacing(0);
 8013fb4:	1d3b      	adds	r3, r7, #4
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fe fd84 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpRlBuffer, TPRL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8013fc4:	1d3b      	adds	r3, r7, #4
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f603 4458 	addw	r4, r3, #3160	; 0xc58
 8013fcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013fd0:	210d      	movs	r1, #13
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fe fcbe 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8013fd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7fe fcc9 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	4ae5      	ldr	r2, [pc, #916]	; (801437c <_ZN12MainViewBaseC1Ev+0xfb4>)
 8013fe6:	2105      	movs	r1, #5
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f00d f9d3 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpRl.setWildcard(TpRlBuffer);
 8013fee:	1d3b      	adds	r3, r7, #4
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 8013ff6:	1d3b      	adds	r3, r7, #4
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8013ffe:	4619      	mov	r1, r3
 8014000:	4610      	mov	r0, r2
 8014002:	f7fe fdeb 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpRl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8014006:	1d3b      	adds	r3, r7, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 801400e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014012:	210c      	movs	r1, #12
 8014014:	4618      	mov	r0, r3
 8014016:	f7fe fc9d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801401a:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801401e:	4620      	mov	r0, r4
 8014020:	f009 fbae 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 207);
 8014024:	1d3b      	adds	r3, r7, #4
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801402c:	22cf      	movs	r2, #207	; 0xcf
 801402e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8014032:	4618      	mov	r0, r3
 8014034:	f7fe fa4e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014038:	1d3b      	adds	r3, r7, #4
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8014040:	2200      	movs	r2, #0
 8014042:	21dc      	movs	r1, #220	; 0xdc
 8014044:	20ff      	movs	r0, #255	; 0xff
 8014046:	f7ff f995 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801404a:	4603      	mov	r3, r0
 801404c:	4619      	mov	r1, r3
 801404e:	4620      	mov	r0, r4
 8014050:	f7fe fce9 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8014054:	1d3b      	adds	r3, r7, #4
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 801405c:	2100      	movs	r1, #0
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe fd34 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8014064:	1d3b      	adds	r3, r7, #4
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 801406c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014070:	2111      	movs	r1, #17
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe fc6e 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014078:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 801407c:	4620      	mov	r0, r4
 801407e:	f009 fb7f 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 207);
 8014082:	1d3b      	adds	r3, r7, #4
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801408a:	22cf      	movs	r2, #207	; 0xcf
 801408c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8014090:	4618      	mov	r0, r3
 8014092:	f7fe fa1f 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014096:	1d3b      	adds	r3, r7, #4
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 801409e:	2200      	movs	r2, #0
 80140a0:	21dc      	movs	r1, #220	; 0xdc
 80140a2:	20ff      	movs	r0, #255	; 0xff
 80140a4:	f7ff f966 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140a8:	4603      	mov	r3, r0
 80140aa:	4619      	mov	r1, r3
 80140ac:	4620      	mov	r0, r4
 80140ae:	f7fe fcba 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 80140b2:	1d3b      	adds	r3, r7, #4
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80140ba:	2100      	movs	r1, #0
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fe fd05 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 80140c2:	1d3b      	adds	r3, r7, #4
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80140ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80140ce:	2112      	movs	r1, #18
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fe fc3f 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80140d6:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80140da:	4620      	mov	r0, r4
 80140dc:	f009 fb50 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 165, 75, 42);
 80140e0:	1d3b      	adds	r3, r7, #4
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 80140e8:	232a      	movs	r3, #42	; 0x2a
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	234b      	movs	r3, #75	; 0x4b
 80140ee:	22a5      	movs	r2, #165	; 0xa5
 80140f0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80140f4:	f7fc fc40 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80140f8:	1d3b      	adds	r3, r7, #4
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8014100:	22ff      	movs	r2, #255	; 0xff
 8014102:	21ff      	movs	r1, #255	; 0xff
 8014104:	20ff      	movs	r0, #255	; 0xff
 8014106:	f7ff f935 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801410a:	4603      	mov	r3, r0
 801410c:	4619      	mov	r1, r3
 801410e:	4620      	mov	r0, r4
 8014110:	f7fe fc89 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8014114:	1d3b      	adds	r3, r7, #4
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801411c:	2100      	movs	r1, #0
 801411e:	4618      	mov	r0, r3
 8014120:	f7fe fcd4 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8014124:	1d3b      	adds	r3, r7, #4
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	f603 4462 	addw	r4, r3, #3170	; 0xc62
 801412c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014130:	2114      	movs	r1, #20
 8014132:	4618      	mov	r0, r3
 8014134:	f7fe fc0e 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014138:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801413c:	4618      	mov	r0, r3
 801413e:	f7fe fc19 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014142:	4603      	mov	r3, r0
 8014144:	4a8d      	ldr	r2, [pc, #564]	; (801437c <_ZN12MainViewBaseC1Ev+0xfb4>)
 8014146:	2105      	movs	r1, #5
 8014148:	4620      	mov	r0, r4
 801414a:	f00d f923 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 801414e:	1d3b      	adds	r3, r7, #4
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8014156:	1d3b      	adds	r3, r7, #4
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	f603 4362 	addw	r3, r3, #3170	; 0xc62
 801415e:	4619      	mov	r1, r3
 8014160:	4610      	mov	r0, r2
 8014162:	f7fe fd3b 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8014166:	1d3b      	adds	r3, r7, #4
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801416e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014172:	2113      	movs	r1, #19
 8014174:	4618      	mov	r0, r3
 8014176:	f7fe fbed 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801417a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801417e:	4620      	mov	r0, r4
 8014180:	f009 fafe 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 165, 71, 40);
 8014184:	1d3b      	adds	r3, r7, #4
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 801418c:	2328      	movs	r3, #40	; 0x28
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	2347      	movs	r3, #71	; 0x47
 8014192:	22a5      	movs	r2, #165	; 0xa5
 8014194:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8014198:	f7fc fbee 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801419c:	1d3b      	adds	r3, r7, #4
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80141a4:	22ff      	movs	r2, #255	; 0xff
 80141a6:	21ff      	movs	r1, #255	; 0xff
 80141a8:	20ff      	movs	r0, #255	; 0xff
 80141aa:	f7ff f8e3 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80141ae:	4603      	mov	r3, r0
 80141b0:	4619      	mov	r1, r3
 80141b2:	4620      	mov	r0, r4
 80141b4:	f7fe fc37 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 80141b8:	1d3b      	adds	r3, r7, #4
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141c0:	2100      	movs	r1, #0
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7fe fc82 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 80141c8:	1d3b      	adds	r3, r7, #4
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	f603 446c 	addw	r4, r3, #3180	; 0xc6c
 80141d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80141d4:	211d      	movs	r1, #29
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fe fbbc 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80141dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fe fbc7 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80141e6:	4603      	mov	r3, r0
 80141e8:	4a64      	ldr	r2, [pc, #400]	; (801437c <_ZN12MainViewBaseC1Ev+0xfb4>)
 80141ea:	2105      	movs	r1, #5
 80141ec:	4620      	mov	r0, r4
 80141ee:	f00d f8d1 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 80141f2:	1d3b      	adds	r3, r7, #4
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 80141fa:	1d3b      	adds	r3, r7, #4
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f603 436c 	addw	r3, r3, #3180	; 0xc6c
 8014202:	4619      	mov	r1, r3
 8014204:	4610      	mov	r0, r2
 8014206:	f7fe fce9 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 801420a:	1d3b      	adds	r3, r7, #4
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8014212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014216:	2115      	movs	r1, #21
 8014218:	4618      	mov	r0, r3
 801421a:	f7fe fb9b 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801421e:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8014222:	4620      	mov	r0, r4
 8014224:	f009 faac 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSDesc.setXY(168, 240);
 8014228:	1d3b      	adds	r3, r7, #4
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8014230:	22f0      	movs	r2, #240	; 0xf0
 8014232:	21a8      	movs	r1, #168	; 0xa8
 8014234:	4618      	mov	r0, r3
 8014236:	f7fe f94d 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TPSDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801423a:	1d3b      	adds	r3, r7, #4
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 8014242:	2200      	movs	r2, #0
 8014244:	21dc      	movs	r1, #220	; 0xdc
 8014246:	20ff      	movs	r0, #255	; 0xff
 8014248:	f7ff f894 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801424c:	4603      	mov	r3, r0
 801424e:	4619      	mov	r1, r3
 8014250:	4620      	mov	r0, r4
 8014252:	f7fe fbe8 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TPSDesc.setLinespacing(0);
 8014256:	1d3b      	adds	r3, r7, #4
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801425e:	2100      	movs	r1, #0
 8014260:	4618      	mov	r0, r3
 8014262:	f7fe fc33 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TPSDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8014266:	1d3b      	adds	r3, r7, #4
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 801426e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014272:	2117      	movs	r1, #23
 8014274:	4618      	mov	r0, r3
 8014276:	f7fe fb6d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801427a:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 801427e:	4620      	mov	r0, r4
 8014280:	f009 fa7e 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(55, 243);
 8014284:	1d3b      	adds	r3, r7, #4
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801428c:	22f3      	movs	r2, #243	; 0xf3
 801428e:	2137      	movs	r1, #55	; 0x37
 8014290:	4618      	mov	r0, r3
 8014292:	f7fe f91f 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 116, 10);
 8014296:	1d3b      	adds	r3, r7, #4
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 801429e:	230a      	movs	r3, #10
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	2374      	movs	r3, #116	; 0x74
 80142a4:	2202      	movs	r2, #2
 80142a6:	2102      	movs	r1, #2
 80142a8:	f006 fcce 	bl	801ac48 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80142ac:	1d3b      	adds	r3, r7, #4
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 80142b4:	2300      	movs	r3, #0
 80142b6:	9300      	str	r3, [sp, #0]
 80142b8:	2300      	movs	r3, #0
 80142ba:	2264      	movs	r2, #100	; 0x64
 80142bc:	2100      	movs	r1, #0
 80142be:	f006 ff41 	bl	801b144 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80142c2:	1d3b      	adds	r3, r7, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80142ca:	2100      	movs	r1, #0
 80142cc:	4618      	mov	r0, r3
 80142ce:	f006 fd1b 	bl	801ad08 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 80142d2:	1d3b      	adds	r3, r7, #4
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80142da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80142de:	2102      	movs	r1, #2
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fe f87a 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80142e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80142ea:	4619      	mov	r1, r3
 80142ec:	4620      	mov	r0, r4
 80142ee:	f006 ff1e 	bl	801b12e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80142f2:	1d3b      	adds	r3, r7, #4
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80142fa:	2200      	movs	r2, #0
 80142fc:	21dc      	movs	r1, #220	; 0xdc
 80142fe:	20ff      	movs	r0, #255	; 0xff
 8014300:	f7ff f838 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014304:	4603      	mov	r3, r0
 8014306:	4619      	mov	r1, r3
 8014308:	4620      	mov	r0, r4
 801430a:	f006 fc47 	bl	801ab9c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 801430e:	1d3b      	adds	r3, r7, #4
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8014316:	213c      	movs	r1, #60	; 0x3c
 8014318:	4618      	mov	r0, r3
 801431a:	f006 fcad 	bl	801ac78 <_ZN8touchgfx11BoxProgress8setValueEi>

    TpsNumberValue.setPosition(100, 243, 19, 17);
 801431e:	1d3b      	adds	r3, r7, #4
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	f203 602c 	addw	r0, r3, #1580	; 0x62c
 8014326:	2311      	movs	r3, #17
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	2313      	movs	r3, #19
 801432c:	22f3      	movs	r2, #243	; 0xf3
 801432e:	2164      	movs	r1, #100	; 0x64
 8014330:	f7fc fb22 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8014334:	1d3b      	adds	r3, r7, #4
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f203 642c 	addw	r4, r3, #1580	; 0x62c
 801433c:	220d      	movs	r2, #13
 801433e:	210d      	movs	r1, #13
 8014340:	200d      	movs	r0, #13
 8014342:	f7ff f817 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014346:	4603      	mov	r3, r0
 8014348:	4619      	mov	r1, r3
 801434a:	4620      	mov	r0, r4
 801434c:	f7fe fb6b 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8014350:	1d3b      	adds	r3, r7, #4
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8014358:	2100      	movs	r1, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fbb6 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014360:	1d3b      	adds	r3, r7, #4
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f603 4476 	addw	r4, r3, #3190	; 0xc76
 8014368:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801436c:	212d      	movs	r1, #45	; 0x2d
 801436e:	4618      	mov	r0, r3
 8014370:	f7fe faf0 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014378:	4618      	mov	r0, r3
 801437a:	e001      	b.n	8014380 <_ZN12MainViewBaseC1Ev+0xfb8>
 801437c:	0802c7f0 	.word	0x0802c7f0
 8014380:	f7fe faf8 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014384:	4603      	mov	r3, r0
 8014386:	4ae5      	ldr	r2, [pc, #916]	; (801471c <_ZN12MainViewBaseC1Ev+0x1354>)
 8014388:	2105      	movs	r1, #5
 801438a:	4620      	mov	r0, r4
 801438c:	f00d f802 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8014390:	1d3b      	adds	r3, r7, #4
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f203 622c 	addw	r2, r3, #1580	; 0x62c
 8014398:	1d3b      	adds	r3, r7, #4
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f603 4376 	addw	r3, r3, #3190	; 0xc76
 80143a0:	4619      	mov	r1, r3
 80143a2:	4610      	mov	r0, r2
 80143a4:	f7fe fc1a 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 80143a8:	1d3b      	adds	r3, r7, #4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f203 642c 	addw	r4, r3, #1580	; 0x62c
 80143b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80143b4:	212c      	movs	r1, #44	; 0x2c
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7fe facc 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80143bc:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80143c0:	4620      	mov	r0, r4
 80143c2:	f009 f9dd 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 80143c6:	1d3b      	adds	r3, r7, #4
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80143ce:	2201      	movs	r2, #1
 80143d0:	2101      	movs	r1, #1
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe f87e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 80143d8:	1d3b      	adds	r3, r7, #4
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f203 6064 	addw	r0, r3, #1636	; 0x664
 80143e0:	2337      	movs	r3, #55	; 0x37
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80143e8:	2202      	movs	r2, #2
 80143ea:	2102      	movs	r1, #2
 80143ec:	f006 fd7c 	bl	801aee8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 80143f0:	1d3b      	adds	r3, r7, #4
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f203 6064 	addw	r0, r3, #1636	; 0x664
 80143f8:	2300      	movs	r3, #0
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	2300      	movs	r3, #0
 80143fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014402:	2100      	movs	r1, #0
 8014404:	f006 fe9e 	bl	801b144 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014408:	1d3b      	adds	r3, r7, #4
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8014410:	2100      	movs	r1, #0
 8014412:	4618      	mov	r0, r3
 8014414:	f006 fc78 	bl	801ad08 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8014418:	1d3b      	adds	r3, r7, #4
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8014420:	2103      	movs	r1, #3
 8014422:	4618      	mov	r0, r3
 8014424:	f006 fcbb 	bl	801ad9e <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8014428:	1d3b      	adds	r3, r7, #4
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8014430:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014434:	4618      	mov	r0, r3
 8014436:	f006 fd6f 	bl	801af18 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801443a:	1d3b      	adds	r3, r7, #4
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8014442:	2101      	movs	r1, #1
 8014444:	4618      	mov	r0, r3
 8014446:	f006 fc93 	bl	801ad70 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 801444a:	1d3b      	adds	r3, r7, #4
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f203 7054 	addw	r0, r3, #1876	; 0x754
 8014452:	2316      	movs	r3, #22
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	2337      	movs	r3, #55	; 0x37
 8014458:	2204      	movs	r2, #4
 801445a:	2119      	movs	r1, #25
 801445c:	f7fc fa8c 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014460:	1d3b      	adds	r3, r7, #4
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f203 7454 	addw	r4, r3, #1876	; 0x754
 8014468:	22ff      	movs	r2, #255	; 0xff
 801446a:	21ff      	movs	r1, #255	; 0xff
 801446c:	20ff      	movs	r0, #255	; 0xff
 801446e:	f7fe ff81 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014472:	4603      	mov	r3, r0
 8014474:	4619      	mov	r1, r3
 8014476:	4620      	mov	r0, r4
 8014478:	f7fe fad5 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 801447c:	1d3b      	adds	r3, r7, #4
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f203 7354 	addw	r3, r3, #1876	; 0x754
 8014484:	2100      	movs	r1, #0
 8014486:	4618      	mov	r0, r3
 8014488:	f7fe fb20 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 801448c:	1d3b      	adds	r3, r7, #4
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	f503 6448 	add.w	r4, r3, #3200	; 0xc80
 8014494:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014498:	2119      	movs	r1, #25
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe fa5a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80144a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fe fa65 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80144aa:	4603      	mov	r3, r0
 80144ac:	4a9b      	ldr	r2, [pc, #620]	; (801471c <_ZN12MainViewBaseC1Ev+0x1354>)
 80144ae:	2105      	movs	r1, #5
 80144b0:	4620      	mov	r0, r4
 80144b2:	f00c ff6f 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80144b6:	1d3b      	adds	r3, r7, #4
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	f203 7254 	addw	r2, r3, #1876	; 0x754
 80144be:	1d3b      	adds	r3, r7, #4
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80144c6:	4619      	mov	r1, r3
 80144c8:	4610      	mov	r0, r2
 80144ca:	f7fe fb87 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 80144ce:	1d3b      	adds	r3, r7, #4
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f203 7454 	addw	r4, r3, #1876	; 0x754
 80144d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80144da:	2118      	movs	r1, #24
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fe fa39 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80144e2:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80144e6:	4620      	mov	r0, r4
 80144e8:	f009 f94a 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 80144ec:	1d3b      	adds	r3, r7, #4
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80144f4:	220f      	movs	r2, #15
 80144f6:	2152      	movs	r1, #82	; 0x52
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fd ffeb 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80144fe:	1d3b      	adds	r3, r7, #4
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f203 748c 	addw	r4, r3, #1932	; 0x78c
 8014506:	22ff      	movs	r2, #255	; 0xff
 8014508:	21ff      	movs	r1, #255	; 0xff
 801450a:	20ff      	movs	r0, #255	; 0xff
 801450c:	f7fe ff32 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014510:	4603      	mov	r3, r0
 8014512:	4619      	mov	r1, r3
 8014514:	4620      	mov	r0, r4
 8014516:	f7fe fa86 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 801451a:	1d3b      	adds	r3, r7, #4
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8014522:	2100      	movs	r1, #0
 8014524:	4618      	mov	r0, r3
 8014526:	f7fe fad1 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 801452a:	1d3b      	adds	r3, r7, #4
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	f203 748c 	addw	r4, r3, #1932	; 0x78c
 8014532:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014536:	211a      	movs	r1, #26
 8014538:	4618      	mov	r0, r3
 801453a:	f7fe fa0b 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801453e:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8014542:	4620      	mov	r0, r4
 8014544:	f009 f91c 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8014548:	1d3b      	adds	r3, r7, #4
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	f503 60f8 	add.w	r0, r3, #1984	; 0x7c0
 8014550:	232a      	movs	r3, #42	; 0x2a
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	2348      	movs	r3, #72	; 0x48
 8014556:	2255      	movs	r2, #85	; 0x55
 8014558:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801455c:	f7fc fa0c 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014560:	1d3b      	adds	r3, r7, #4
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f503 64f8 	add.w	r4, r3, #1984	; 0x7c0
 8014568:	22ff      	movs	r2, #255	; 0xff
 801456a:	21ff      	movs	r1, #255	; 0xff
 801456c:	20ff      	movs	r0, #255	; 0xff
 801456e:	f7fe ff01 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014572:	4603      	mov	r3, r0
 8014574:	4619      	mov	r1, r3
 8014576:	4620      	mov	r0, r4
 8014578:	f7fe fa55 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 801457c:	1d3b      	adds	r3, r7, #4
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8014584:	2100      	movs	r1, #0
 8014586:	4618      	mov	r0, r3
 8014588:	f7fe faa0 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 801458c:	1d3b      	adds	r3, r7, #4
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f603 448a 	addw	r4, r3, #3210	; 0xc8a
 8014594:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014598:	211c      	movs	r1, #28
 801459a:	4618      	mov	r0, r3
 801459c:	f7fe f9da 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80145a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe f9e5 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80145aa:	4603      	mov	r3, r0
 80145ac:	4a5b      	ldr	r2, [pc, #364]	; (801471c <_ZN12MainViewBaseC1Ev+0x1354>)
 80145ae:	2105      	movs	r1, #5
 80145b0:	4620      	mov	r0, r4
 80145b2:	f00c feef 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 80145b6:	1d3b      	adds	r3, r7, #4
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f503 62f8 	add.w	r2, r3, #1984	; 0x7c0
 80145be:	1d3b      	adds	r3, r7, #4
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f603 438a 	addw	r3, r3, #3210	; 0xc8a
 80145c6:	4619      	mov	r1, r3
 80145c8:	4610      	mov	r0, r2
 80145ca:	f7fe fb07 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 80145ce:	1d3b      	adds	r3, r7, #4
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f503 64f8 	add.w	r4, r3, #1984	; 0x7c0
 80145d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80145da:	211b      	movs	r1, #27
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe f9b9 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80145e2:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 80145e6:	4620      	mov	r0, r4
 80145e8:	f009 f8ca 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpRr.setPosition(100, 164, 78, 42);
 80145ec:	1d3b      	adds	r3, r7, #4
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f503 60ff 	add.w	r0, r3, #2040	; 0x7f8
 80145f4:	232a      	movs	r3, #42	; 0x2a
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	234e      	movs	r3, #78	; 0x4e
 80145fa:	22a4      	movs	r2, #164	; 0xa4
 80145fc:	2164      	movs	r1, #100	; 0x64
 80145fe:	f7fc f9bb 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpRr.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014602:	1d3b      	adds	r3, r7, #4
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f503 64ff 	add.w	r4, r3, #2040	; 0x7f8
 801460a:	22ff      	movs	r2, #255	; 0xff
 801460c:	21ff      	movs	r1, #255	; 0xff
 801460e:	20ff      	movs	r0, #255	; 0xff
 8014610:	f7fe feb0 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014614:	4603      	mov	r3, r0
 8014616:	4619      	mov	r1, r3
 8014618:	4620      	mov	r0, r4
 801461a:	f7fe fa04 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpRr.setLinespacing(0);
 801461e:	1d3b      	adds	r3, r7, #4
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8014626:	2100      	movs	r1, #0
 8014628:	4618      	mov	r0, r3
 801462a:	f7fe fa4f 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpRrBuffer, TPRR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 801462e:	1d3b      	adds	r3, r7, #4
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	f603 4494 	addw	r4, r3, #3220	; 0xc94
 8014636:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801463a:	2127      	movs	r1, #39	; 0x27
 801463c:	4618      	mov	r0, r3
 801463e:	f7fe f989 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014642:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014646:	4618      	mov	r0, r3
 8014648:	f7fe f994 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801464c:	4603      	mov	r3, r0
 801464e:	4a33      	ldr	r2, [pc, #204]	; (801471c <_ZN12MainViewBaseC1Ev+0x1354>)
 8014650:	2105      	movs	r1, #5
 8014652:	4620      	mov	r0, r4
 8014654:	f00c fe9e 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpRr.setWildcard(TpRrBuffer);
 8014658:	1d3b      	adds	r3, r7, #4
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f503 62ff 	add.w	r2, r3, #2040	; 0x7f8
 8014660:	1d3b      	adds	r3, r7, #4
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f603 4394 	addw	r3, r3, #3220	; 0xc94
 8014668:	4619      	mov	r1, r3
 801466a:	4610      	mov	r0, r2
 801466c:	f7fe fab6 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpRr.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014670:	1d3b      	adds	r3, r7, #4
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f503 64ff 	add.w	r4, r3, #2040	; 0x7f8
 8014678:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801467c:	2126      	movs	r1, #38	; 0x26
 801467e:	4618      	mov	r0, r3
 8014680:	f7fe f968 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014684:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8014688:	4620      	mov	r0, r4
 801468a:	f009 f879 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpRrDesc.setXY(124, 207);
 801468e:	1d3b      	adds	r3, r7, #4
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8014696:	22cf      	movs	r2, #207	; 0xcf
 8014698:	217c      	movs	r1, #124	; 0x7c
 801469a:	4618      	mov	r0, r3
 801469c:	f7fd ff1a 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TpRrDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80146a0:	1d3b      	adds	r3, r7, #4
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f503 6403 	add.w	r4, r3, #2096	; 0x830
 80146a8:	2200      	movs	r2, #0
 80146aa:	21dc      	movs	r1, #220	; 0xdc
 80146ac:	20ff      	movs	r0, #255	; 0xff
 80146ae:	f7fe fe61 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146b2:	4603      	mov	r3, r0
 80146b4:	4619      	mov	r1, r3
 80146b6:	4620      	mov	r0, r4
 80146b8:	f7fe f9b5 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpRrDesc.setLinespacing(0);
 80146bc:	1d3b      	adds	r3, r7, #4
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 80146c4:	2100      	movs	r1, #0
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7fe fa00 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TpRrDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 80146cc:	1d3b      	adds	r3, r7, #4
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f503 6403 	add.w	r4, r3, #2096	; 0x830
 80146d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80146d8:	2128      	movs	r1, #40	; 0x28
 80146da:	4618      	mov	r0, r3
 80146dc:	f7fe f93a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80146e0:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80146e4:	4620      	mov	r0, r4
 80146e6:	f009 f84b 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    DiffT.setPosition(399, 85, 68, 42);
 80146ea:	1d3b      	adds	r3, r7, #4
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f603 0064 	addw	r0, r3, #2148	; 0x864
 80146f2:	232a      	movs	r3, #42	; 0x2a
 80146f4:	9300      	str	r3, [sp, #0]
 80146f6:	2344      	movs	r3, #68	; 0x44
 80146f8:	2255      	movs	r2, #85	; 0x55
 80146fa:	f240 118f 	movw	r1, #399	; 0x18f
 80146fe:	f7fc f93b 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    DiffT.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014702:	1d3b      	adds	r3, r7, #4
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f603 0464 	addw	r4, r3, #2148	; 0x864
 801470a:	22ff      	movs	r2, #255	; 0xff
 801470c:	21ff      	movs	r1, #255	; 0xff
 801470e:	20ff      	movs	r0, #255	; 0xff
 8014710:	f7fe fe30 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014714:	4603      	mov	r3, r0
 8014716:	4619      	mov	r1, r3
 8014718:	e002      	b.n	8014720 <_ZN12MainViewBaseC1Ev+0x1358>
 801471a:	bf00      	nop
 801471c:	0802c7f0 	.word	0x0802c7f0
 8014720:	4620      	mov	r0, r4
 8014722:	f7fe f980 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    DiffT.setLinespacing(0);
 8014726:	1d3b      	adds	r3, r7, #4
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f603 0364 	addw	r3, r3, #2148	; 0x864
 801472e:	2100      	movs	r1, #0
 8014730:	4618      	mov	r0, r3
 8014732:	f7fe f9cb 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(DiffTBuffer, DIFFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8014736:	1d3b      	adds	r3, r7, #4
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f603 449e 	addw	r4, r3, #3230	; 0xc9e
 801473e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014742:	212a      	movs	r1, #42	; 0x2a
 8014744:	4618      	mov	r0, r3
 8014746:	f7fe f905 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801474a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801474e:	4618      	mov	r0, r3
 8014750:	f7fe f910 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014754:	4603      	mov	r3, r0
 8014756:	4ae6      	ldr	r2, [pc, #920]	; (8014af0 <_ZN12MainViewBaseC1Ev+0x1728>)
 8014758:	2105      	movs	r1, #5
 801475a:	4620      	mov	r0, r4
 801475c:	f00c fe1a 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    DiffT.setWildcard(DiffTBuffer);
 8014760:	1d3b      	adds	r3, r7, #4
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f603 0264 	addw	r2, r3, #2148	; 0x864
 8014768:	1d3b      	adds	r3, r7, #4
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f603 439e 	addw	r3, r3, #3230	; 0xc9e
 8014770:	4619      	mov	r1, r3
 8014772:	4610      	mov	r0, r2
 8014774:	f7fe fa32 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    DiffT.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014778:	1d3b      	adds	r3, r7, #4
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8014780:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014784:	2129      	movs	r1, #41	; 0x29
 8014786:	4618      	mov	r0, r3
 8014788:	f7fe f8e4 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801478c:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8014790:	4620      	mov	r0, r4
 8014792:	f008 fff5 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    DiffTDescriptor.setXY(406, 129);
 8014796:	1d3b      	adds	r3, r7, #4
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801479e:	2281      	movs	r2, #129	; 0x81
 80147a0:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fd fe95 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    DiffTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80147aa:	1d3b      	adds	r3, r7, #4
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f603 049c 	addw	r4, r3, #2204	; 0x89c
 80147b2:	2200      	movs	r2, #0
 80147b4:	21dc      	movs	r1, #220	; 0xdc
 80147b6:	20ff      	movs	r0, #255	; 0xff
 80147b8:	f7fe fddc 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80147bc:	4603      	mov	r3, r0
 80147be:	4619      	mov	r1, r3
 80147c0:	4620      	mov	r0, r4
 80147c2:	f7fe f930 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    DiffTDescriptor.setLinespacing(0);
 80147c6:	1d3b      	adds	r3, r7, #4
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80147ce:	2100      	movs	r1, #0
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fe f97b 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    DiffTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 80147d6:	1d3b      	adds	r3, r7, #4
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f603 049c 	addw	r4, r3, #2204	; 0x89c
 80147de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80147e2:	212b      	movs	r1, #43	; 0x2b
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7fe f8b5 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80147ea:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80147ee:	4620      	mov	r0, r4
 80147f0:	f008 ffc6 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 80147f4:	1d3b      	adds	r3, r7, #4
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 80147fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014800:	9300      	str	r3, [sp, #0]
 8014802:	237a      	movs	r3, #122	; 0x7a
 8014804:	2200      	movs	r2, #0
 8014806:	2100      	movs	r1, #0
 8014808:	f000 fe12 	bl	8015430 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 801480c:	1d3b      	adds	r3, r7, #4
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8014814:	2105      	movs	r1, #5
 8014816:	4618      	mov	r0, r3
 8014818:	f000 fe2a 	bl	8015470 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 801481c:	1d3b      	adds	r3, r7, #4
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f503 640d 	add.w	r4, r3, #2256	; 0x8d0
 8014824:	2299      	movs	r2, #153	; 0x99
 8014826:	2166      	movs	r1, #102	; 0x66
 8014828:	2000      	movs	r0, #0
 801482a:	f7fe fda3 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801482e:	4605      	mov	r5, r0
 8014830:	22cc      	movs	r2, #204	; 0xcc
 8014832:	2199      	movs	r1, #153	; 0x99
 8014834:	2000      	movs	r0, #0
 8014836:	f7fe fd9d 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801483a:	4606      	mov	r6, r0
 801483c:	2266      	movs	r2, #102	; 0x66
 801483e:	2133      	movs	r1, #51	; 0x33
 8014840:	2000      	movs	r0, #0
 8014842:	f7fe fd97 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014846:	4680      	mov	r8, r0
 8014848:	2299      	movs	r2, #153	; 0x99
 801484a:	2166      	movs	r1, #102	; 0x66
 801484c:	2033      	movs	r0, #51	; 0x33
 801484e:	f7fe fd91 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014852:	4603      	mov	r3, r0
 8014854:	9300      	str	r3, [sp, #0]
 8014856:	4643      	mov	r3, r8
 8014858:	4632      	mov	r2, r6
 801485a:	4629      	mov	r1, r5
 801485c:	4620      	mov	r0, r4
 801485e:	f000 fe18 	bl	8015492 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 8014862:	1d3b      	adds	r3, r7, #4
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 801486a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	237a      	movs	r3, #122	; 0x7a
 8014872:	2200      	movs	r2, #0
 8014874:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014878:	f7fc f87e 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 801487c:	1d3b      	adds	r3, r7, #4
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8014884:	2100      	movs	r1, #0
 8014886:	4618      	mov	r0, r3
 8014888:	f7fe fabf 	bl	8012e0a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 801488c:	1d3b      	adds	r3, r7, #4
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8014894:	1d3b      	adds	r3, r7, #4
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f603 43dc 	addw	r3, r3, #3292	; 0xcdc
 801489c:	4619      	mov	r1, r3
 801489e:	4610      	mov	r0, r2
 80148a0:	f7fe fad4 	bl	8012e4c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    TtFl.setPosition(181, 96, 58, 40);
 80148a4:	1d3b      	adds	r3, r7, #4
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	f603 1048 	addw	r0, r3, #2376	; 0x948
 80148ac:	2328      	movs	r3, #40	; 0x28
 80148ae:	9300      	str	r3, [sp, #0]
 80148b0:	233a      	movs	r3, #58	; 0x3a
 80148b2:	2260      	movs	r2, #96	; 0x60
 80148b4:	21b5      	movs	r1, #181	; 0xb5
 80148b6:	f7fc f85f 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TtFl.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80148ba:	1d3b      	adds	r3, r7, #4
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f603 1448 	addw	r4, r3, #2376	; 0x948
 80148c2:	22ff      	movs	r2, #255	; 0xff
 80148c4:	21ff      	movs	r1, #255	; 0xff
 80148c6:	20ff      	movs	r0, #255	; 0xff
 80148c8:	f7fe fd54 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148cc:	4603      	mov	r3, r0
 80148ce:	4619      	mov	r1, r3
 80148d0:	4620      	mov	r0, r4
 80148d2:	f7fe f8a8 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtFl.setLinespacing(0);
 80148d6:	1d3b      	adds	r3, r7, #4
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80148de:	2100      	movs	r1, #0
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fe f8f3 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TtFlBuffer, TTFL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID98).getText());
 80148e6:	1d3b      	adds	r3, r7, #4
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f603 44a8 	addw	r4, r3, #3240	; 0xca8
 80148ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80148f2:	2142      	movs	r1, #66	; 0x42
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7fe f82d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80148fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80148fe:	4618      	mov	r0, r3
 8014900:	f7fe f838 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014904:	4603      	mov	r3, r0
 8014906:	4a7a      	ldr	r2, [pc, #488]	; (8014af0 <_ZN12MainViewBaseC1Ev+0x1728>)
 8014908:	2105      	movs	r1, #5
 801490a:	4620      	mov	r0, r4
 801490c:	f00c fd42 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TtFl.setWildcard(TtFlBuffer);
 8014910:	1d3b      	adds	r3, r7, #4
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8014918:	1d3b      	adds	r3, r7, #4
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8014920:	4619      	mov	r1, r3
 8014922:	4610      	mov	r0, r2
 8014924:	f7fe f95a 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TtFl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID97));
 8014928:	1d3b      	adds	r3, r7, #4
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8014930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014934:	2141      	movs	r1, #65	; 0x41
 8014936:	4618      	mov	r0, r3
 8014938:	f7fe f80c 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801493c:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8014940:	4620      	mov	r0, r4
 8014942:	f008 ff1d 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtFr.setPosition(252, 96, 58, 40);
 8014946:	1d3b      	adds	r3, r7, #4
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	f503 6018 	add.w	r0, r3, #2432	; 0x980
 801494e:	2328      	movs	r3, #40	; 0x28
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	233a      	movs	r3, #58	; 0x3a
 8014954:	2260      	movs	r2, #96	; 0x60
 8014956:	21fc      	movs	r1, #252	; 0xfc
 8014958:	f7fc f80e 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TtFr.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801495c:	1d3b      	adds	r3, r7, #4
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f503 6418 	add.w	r4, r3, #2432	; 0x980
 8014964:	22ff      	movs	r2, #255	; 0xff
 8014966:	21ff      	movs	r1, #255	; 0xff
 8014968:	20ff      	movs	r0, #255	; 0xff
 801496a:	f7fe fd03 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801496e:	4603      	mov	r3, r0
 8014970:	4619      	mov	r1, r3
 8014972:	4620      	mov	r0, r4
 8014974:	f7fe f857 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtFr.setLinespacing(0);
 8014978:	1d3b      	adds	r3, r7, #4
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8014980:	2100      	movs	r1, #0
 8014982:	4618      	mov	r0, r3
 8014984:	f7fe f8a2 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TtFrBuffer, TTFR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID100).getText());
 8014988:	1d3b      	adds	r3, r7, #4
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f603 44b2 	addw	r4, r3, #3250	; 0xcb2
 8014990:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014994:	2144      	movs	r1, #68	; 0x44
 8014996:	4618      	mov	r0, r3
 8014998:	f7fd ffdc 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801499c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fd ffe7 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80149a6:	4603      	mov	r3, r0
 80149a8:	4a51      	ldr	r2, [pc, #324]	; (8014af0 <_ZN12MainViewBaseC1Ev+0x1728>)
 80149aa:	2105      	movs	r1, #5
 80149ac:	4620      	mov	r0, r4
 80149ae:	f00c fcf1 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TtFr.setWildcard(TtFrBuffer);
 80149b2:	1d3b      	adds	r3, r7, #4
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	f503 6218 	add.w	r2, r3, #2432	; 0x980
 80149ba:	1d3b      	adds	r3, r7, #4
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f603 43b2 	addw	r3, r3, #3250	; 0xcb2
 80149c2:	4619      	mov	r1, r3
 80149c4:	4610      	mov	r0, r2
 80149c6:	f7fe f909 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TtFr.setTypedText(touchgfx::TypedText(T_SINGLEUSEID99));
 80149ca:	1d3b      	adds	r3, r7, #4
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f503 6418 	add.w	r4, r3, #2432	; 0x980
 80149d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80149d6:	2143      	movs	r1, #67	; 0x43
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fd ffbb 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80149de:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 80149e2:	4620      	mov	r0, r4
 80149e4:	f008 fecc 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtFlDesc.setXY(195, 129);
 80149e8:	1d3b      	adds	r3, r7, #4
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 80149f0:	2281      	movs	r2, #129	; 0x81
 80149f2:	21c3      	movs	r1, #195	; 0xc3
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fd fd6d 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TtFlDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80149fa:	1d3b      	adds	r3, r7, #4
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f603 14b8 	addw	r4, r3, #2488	; 0x9b8
 8014a02:	2200      	movs	r2, #0
 8014a04:	21dc      	movs	r1, #220	; 0xdc
 8014a06:	20ff      	movs	r0, #255	; 0xff
 8014a08:	f7fe fcb4 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	4619      	mov	r1, r3
 8014a10:	4620      	mov	r0, r4
 8014a12:	f7fe f808 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtFlDesc.setLinespacing(0);
 8014a16:	1d3b      	adds	r3, r7, #4
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 8014a1e:	2100      	movs	r1, #0
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7fe f853 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TtFlDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID101));
 8014a26:	1d3b      	adds	r3, r7, #4
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	f603 14b8 	addw	r4, r3, #2488	; 0x9b8
 8014a2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014a32:	2145      	movs	r1, #69	; 0x45
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fd ff8d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014a3a:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f008 fe9e 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtFRDesc.setXY(266, 129);
 8014a44:	1d3b      	adds	r3, r7, #4
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8014a4c:	2281      	movs	r2, #129	; 0x81
 8014a4e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd fd3e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TtFRDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014a58:	1d3b      	adds	r3, r7, #4
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8014a60:	2200      	movs	r2, #0
 8014a62:	21dc      	movs	r1, #220	; 0xdc
 8014a64:	20ff      	movs	r0, #255	; 0xff
 8014a66:	f7fe fc85 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4620      	mov	r0, r4
 8014a70:	f7fd ffd9 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtFRDesc.setLinespacing(0);
 8014a74:	1d3b      	adds	r3, r7, #4
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7fe f824 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TtFRDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID103));
 8014a84:	1d3b      	adds	r3, r7, #4
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8014a8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014a90:	2146      	movs	r1, #70	; 0x46
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fd ff5e 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014a98:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f008 fe6f 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtRl.setPosition(181, 152, 58, 40);
 8014aa2:	1d3b      	adds	r3, r7, #4
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	f503 6022 	add.w	r0, r3, #2592	; 0xa20
 8014aaa:	2328      	movs	r3, #40	; 0x28
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	233a      	movs	r3, #58	; 0x3a
 8014ab0:	2298      	movs	r2, #152	; 0x98
 8014ab2:	21b5      	movs	r1, #181	; 0xb5
 8014ab4:	f7fb ff60 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TtRl.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014ab8:	1d3b      	adds	r3, r7, #4
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014ac0:	22ff      	movs	r2, #255	; 0xff
 8014ac2:	21ff      	movs	r1, #255	; 0xff
 8014ac4:	20ff      	movs	r0, #255	; 0xff
 8014ac6:	f7fe fc55 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014aca:	4603      	mov	r3, r0
 8014acc:	4619      	mov	r1, r3
 8014ace:	4620      	mov	r0, r4
 8014ad0:	f7fd ffa9 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtRl.setLinespacing(0);
 8014ad4:	1d3b      	adds	r3, r7, #4
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014adc:	2100      	movs	r1, #0
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fd fff4 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TtRlBuffer, TTRL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID105).getText());
 8014ae4:	1d3b      	adds	r3, r7, #4
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f603 44bc 	addw	r4, r3, #3260	; 0xcbc
 8014aec:	e002      	b.n	8014af4 <_ZN12MainViewBaseC1Ev+0x172c>
 8014aee:	bf00      	nop
 8014af0:	0802c7f0 	.word	0x0802c7f0
 8014af4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014af8:	2148      	movs	r1, #72	; 0x48
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fd ff2a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014b00:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fd ff35 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	4ae3      	ldr	r2, [pc, #908]	; (8014e9c <_ZN12MainViewBaseC1Ev+0x1ad4>)
 8014b0e:	2105      	movs	r1, #5
 8014b10:	4620      	mov	r0, r4
 8014b12:	f00c fc3f 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TtRl.setWildcard(TtRlBuffer);
 8014b16:	1d3b      	adds	r3, r7, #4
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f503 6222 	add.w	r2, r3, #2592	; 0xa20
 8014b1e:	1d3b      	adds	r3, r7, #4
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 8014b26:	4619      	mov	r1, r3
 8014b28:	4610      	mov	r0, r2
 8014b2a:	f7fe f857 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TtRl.setTypedText(touchgfx::TypedText(T_SINGLEUSEID104));
 8014b2e:	1d3b      	adds	r3, r7, #4
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014b36:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014b3a:	2147      	movs	r1, #71	; 0x47
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7fd ff09 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014b42:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8014b46:	4620      	mov	r0, r4
 8014b48:	f008 fe1a 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtRr.setPosition(252, 152, 58, 40);
 8014b4c:	1d3b      	adds	r3, r7, #4
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f603 2058 	addw	r0, r3, #2648	; 0xa58
 8014b54:	2328      	movs	r3, #40	; 0x28
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	233a      	movs	r3, #58	; 0x3a
 8014b5a:	2298      	movs	r2, #152	; 0x98
 8014b5c:	21fc      	movs	r1, #252	; 0xfc
 8014b5e:	f7fb ff0b 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    TtRr.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014b62:	1d3b      	adds	r3, r7, #4
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f603 2458 	addw	r4, r3, #2648	; 0xa58
 8014b6a:	22ff      	movs	r2, #255	; 0xff
 8014b6c:	21ff      	movs	r1, #255	; 0xff
 8014b6e:	20ff      	movs	r0, #255	; 0xff
 8014b70:	f7fe fc00 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b74:	4603      	mov	r3, r0
 8014b76:	4619      	mov	r1, r3
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f7fd ff54 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtRr.setLinespacing(0);
 8014b7e:	1d3b      	adds	r3, r7, #4
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8014b86:	2100      	movs	r1, #0
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fd ff9f 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TtRrBuffer, TTRR_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID107).getText());
 8014b8e:	1d3b      	adds	r3, r7, #4
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f603 44c6 	addw	r4, r3, #3270	; 0xcc6
 8014b96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014b9a:	214a      	movs	r1, #74	; 0x4a
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fd fed9 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014ba2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fd fee4 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014bac:	4603      	mov	r3, r0
 8014bae:	4abb      	ldr	r2, [pc, #748]	; (8014e9c <_ZN12MainViewBaseC1Ev+0x1ad4>)
 8014bb0:	2105      	movs	r1, #5
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f00c fbee 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TtRr.setWildcard(TtRrBuffer);
 8014bb8:	1d3b      	adds	r3, r7, #4
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f603 2258 	addw	r2, r3, #2648	; 0xa58
 8014bc0:	1d3b      	adds	r3, r7, #4
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	f603 43c6 	addw	r3, r3, #3270	; 0xcc6
 8014bc8:	4619      	mov	r1, r3
 8014bca:	4610      	mov	r0, r2
 8014bcc:	f7fe f806 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TtRr.setTypedText(touchgfx::TypedText(T_SINGLEUSEID106));
 8014bd0:	1d3b      	adds	r3, r7, #4
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f603 2458 	addw	r4, r3, #2648	; 0xa58
 8014bd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8014bdc:	2149      	movs	r1, #73	; 0x49
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fd feb8 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014be4:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8014be8:	4620      	mov	r0, r4
 8014bea:	f008 fdc9 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtRlDesc.setXY(195, 185);
 8014bee:	1d3b      	adds	r3, r7, #4
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8014bf6:	22b9      	movs	r2, #185	; 0xb9
 8014bf8:	21c3      	movs	r1, #195	; 0xc3
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fd fc6a 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TtRlDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014c00:	1d3b      	adds	r3, r7, #4
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	f503 6429 	add.w	r4, r3, #2704	; 0xa90
 8014c08:	2200      	movs	r2, #0
 8014c0a:	21dc      	movs	r1, #220	; 0xdc
 8014c0c:	20ff      	movs	r0, #255	; 0xff
 8014c0e:	f7fe fbb1 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c12:	4603      	mov	r3, r0
 8014c14:	4619      	mov	r1, r3
 8014c16:	4620      	mov	r0, r4
 8014c18:	f7fd ff05 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtRlDesc.setLinespacing(0);
 8014c1c:	1d3b      	adds	r3, r7, #4
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8014c24:	2100      	movs	r1, #0
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fd ff50 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TtRlDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID108));
 8014c2c:	1d3b      	adds	r3, r7, #4
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	f503 6429 	add.w	r4, r3, #2704	; 0xa90
 8014c34:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014c38:	214b      	movs	r1, #75	; 0x4b
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fd fe8a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014c40:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8014c44:	4620      	mov	r0, r4
 8014c46:	f008 fd9b 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TtRRDesc.setXY(266, 185);
 8014c4a:	1d3b      	adds	r3, r7, #4
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8014c52:	22b9      	movs	r2, #185	; 0xb9
 8014c54:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fd fc3b 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TtRRDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014c5e:	1d3b      	adds	r3, r7, #4
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8014c66:	2200      	movs	r2, #0
 8014c68:	21dc      	movs	r1, #220	; 0xdc
 8014c6a:	20ff      	movs	r0, #255	; 0xff
 8014c6c:	f7fe fb82 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c70:	4603      	mov	r3, r0
 8014c72:	4619      	mov	r1, r3
 8014c74:	4620      	mov	r0, r4
 8014c76:	f7fd fed6 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TtRRDesc.setLinespacing(0);
 8014c7a:	1d3b      	adds	r3, r7, #4
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8014c82:	2100      	movs	r1, #0
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fd ff21 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    TtRRDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID109));
 8014c8a:	1d3b      	adds	r3, r7, #4
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8014c92:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8014c96:	214c      	movs	r1, #76	; 0x4c
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7fd fe5b 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014c9e:	f8b7 1104 	ldrh.w	r1, [r7, #260]	; 0x104
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f008 fd6c 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BrP.setXY(282, 243);
 8014ca8:	1d3b      	adds	r3, r7, #4
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014cb0:	22f3      	movs	r2, #243	; 0xf3
 8014cb2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7fd fc0c 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    BrP.setProgressIndicatorPosition(2, 2, 116, 10);
 8014cbc:	1d3b      	adds	r3, r7, #4
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014cc4:	230a      	movs	r3, #10
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	2374      	movs	r3, #116	; 0x74
 8014cca:	2202      	movs	r2, #2
 8014ccc:	2102      	movs	r1, #2
 8014cce:	f005 ffbb 	bl	801ac48 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    BrP.setRange(0, 130);
 8014cd2:	1d3b      	adds	r3, r7, #4
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	2300      	movs	r3, #0
 8014ce0:	2282      	movs	r2, #130	; 0x82
 8014ce2:	2100      	movs	r1, #0
 8014ce4:	f006 fa2e 	bl	801b144 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    BrP.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014ce8:	1d3b      	adds	r3, r7, #4
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f006 f808 	bl	801ad08 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    BrP.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8014cf8:	1d3b      	adds	r3, r7, #4
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d04:	2102      	movs	r1, #2
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fd fb67 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8014d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014d10:	4619      	mov	r1, r3
 8014d12:	4620      	mov	r0, r4
 8014d14:	f006 fa0b 	bl	801b12e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    BrP.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
 8014d18:	1d3b      	adds	r3, r7, #4
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014d20:	2200      	movs	r2, #0
 8014d22:	2100      	movs	r1, #0
 8014d24:	20ff      	movs	r0, #255	; 0xff
 8014d26:	f7fe fb25 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	4620      	mov	r0, r4
 8014d30:	f005 ff34 	bl	801ab9c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    BrP.setValue(60);
 8014d34:	1d3b      	adds	r3, r7, #4
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014d3c:	213c      	movs	r1, #60	; 0x3c
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f005 ff9a 	bl	801ac78 <_ZN8touchgfx11BoxProgress8setValueEi>

    BrPrValue.setPosition(325, 242, 19, 17);
 8014d44:	1d3b      	adds	r3, r7, #4
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8014d4c:	2311      	movs	r3, #17
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	2313      	movs	r3, #19
 8014d52:	22f2      	movs	r2, #242	; 0xf2
 8014d54:	f240 1145 	movw	r1, #325	; 0x145
 8014d58:	f7fb fe0e 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    BrPrValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8014d5c:	1d3b      	adds	r3, r7, #4
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8014d64:	220d      	movs	r2, #13
 8014d66:	210d      	movs	r1, #13
 8014d68:	200d      	movs	r0, #13
 8014d6a:	f7fe fb03 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	4619      	mov	r1, r3
 8014d72:	4620      	mov	r0, r4
 8014d74:	f7fd fe57 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BrPrValue.setLinespacing(0);
 8014d78:	1d3b      	adds	r3, r7, #4
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8014d80:	2100      	movs	r1, #0
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fd fea2 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BrPrValueBuffer, BRPRVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID113).getText());
 8014d88:	1d3b      	adds	r3, r7, #4
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 8014d90:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8014d94:	214e      	movs	r1, #78	; 0x4e
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fd fddc 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014d9c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7fd fde7 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8014da6:	4603      	mov	r3, r0
 8014da8:	4a3c      	ldr	r2, [pc, #240]	; (8014e9c <_ZN12MainViewBaseC1Ev+0x1ad4>)
 8014daa:	2105      	movs	r1, #5
 8014dac:	4620      	mov	r0, r4
 8014dae:	f00c faf1 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BrPrValue.setWildcard(BrPrValueBuffer);
 8014db2:	1d3b      	adds	r3, r7, #4
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8014dba:	1d3b      	adds	r3, r7, #4
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	4610      	mov	r0, r2
 8014dc6:	f7fd ff09 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BrPrValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID112));
 8014dca:	1d3b      	adds	r3, r7, #4
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8014dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014dd6:	214d      	movs	r1, #77	; 0x4d
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7fd fdbb 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014dde:	f8b7 1110 	ldrh.w	r1, [r7, #272]	; 0x110
 8014de2:	4620      	mov	r0, r4
 8014de4:	f008 fccc 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BrPrDesc.setXY(391, 240);
 8014de8:	1d3b      	adds	r3, r7, #4
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8014df0:	22f0      	movs	r2, #240	; 0xf0
 8014df2:	f240 1187 	movw	r1, #391	; 0x187
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7fd fb6c 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    BrPrDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 65, 0));
 8014dfc:	1d3b      	adds	r3, r7, #4
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f503 643f 	add.w	r4, r3, #3056	; 0xbf0
 8014e04:	2200      	movs	r2, #0
 8014e06:	2141      	movs	r1, #65	; 0x41
 8014e08:	20ff      	movs	r0, #255	; 0xff
 8014e0a:	f7fe fab3 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	4619      	mov	r1, r3
 8014e12:	4620      	mov	r0, r4
 8014e14:	f7fd fe07 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BrPrDesc.setLinespacing(0);
 8014e18:	1d3b      	adds	r3, r7, #4
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8014e20:	2100      	movs	r1, #0
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd fe52 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    BrPrDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID114));
 8014e28:	1d3b      	adds	r3, r7, #4
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	f503 643f 	add.w	r4, r3, #3056	; 0xbf0
 8014e30:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014e34:	214f      	movs	r1, #79	; 0x4f
 8014e36:	4618      	mov	r0, r3
 8014e38:	f7fd fd8c 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8014e3c:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8014e40:	4620      	mov	r0, r4
 8014e42:	f008 fc9d 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8014e46:	1d3b      	adds	r3, r7, #4
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	1d3b      	adds	r3, r7, #4
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	3340      	adds	r3, #64	; 0x40
 8014e50:	4619      	mov	r1, r3
 8014e52:	4610      	mov	r0, r2
 8014e54:	f7fd fcc6 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8014e58:	1d3b      	adds	r3, r7, #4
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	1d3b      	adds	r3, r7, #4
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	3370      	adds	r3, #112	; 0x70
 8014e62:	4619      	mov	r1, r3
 8014e64:	4610      	mov	r0, r2
 8014e66:	f7fd fcbd 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpFrDescriptor);
 8014e6a:	1d3b      	adds	r3, r7, #4
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	1d3b      	adds	r3, r7, #4
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	33a4      	adds	r3, #164	; 0xa4
 8014e74:	4619      	mov	r1, r3
 8014e76:	4610      	mov	r0, r2
 8014e78:	f7fd fcb4 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpFr);
 8014e7c:	1d3b      	adds	r3, r7, #4
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	1d3b      	adds	r3, r7, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	33d8      	adds	r3, #216	; 0xd8
 8014e86:	4619      	mov	r1, r3
 8014e88:	4610      	mov	r0, r2
 8014e8a:	f7fd fcab 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8014e8e:	1d3b      	adds	r3, r7, #4
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	1d3b      	adds	r3, r7, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8014e9a:	e001      	b.n	8014ea0 <_ZN12MainViewBaseC1Ev+0x1ad8>
 8014e9c:	0802c7f0 	.word	0x0802c7f0
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	f7fd fc9e 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8014ea8:	1d3b      	adds	r3, r7, #4
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	1d3b      	adds	r3, r7, #4
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	4610      	mov	r0, r2
 8014eb8:	f7fd fc94 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8014ebc:	1d3b      	adds	r3, r7, #4
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	1d3b      	adds	r3, r7, #4
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8014ec8:	4619      	mov	r1, r3
 8014eca:	4610      	mov	r0, r2
 8014ecc:	f7fd fc8a 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8014ed0:	1d3b      	adds	r3, r7, #4
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	1d3b      	adds	r3, r7, #4
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014edc:	4619      	mov	r1, r3
 8014ede:	4610      	mov	r0, r2
 8014ee0:	f7fd fc80 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8014ee4:	1d3b      	adds	r3, r7, #4
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	1d3b      	adds	r3, r7, #4
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	4610      	mov	r0, r2
 8014ef4:	f7fd fc76 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8014ef8:	1d3b      	adds	r3, r7, #4
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	1d3b      	adds	r3, r7, #4
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8014f04:	4619      	mov	r1, r3
 8014f06:	4610      	mov	r0, r2
 8014f08:	f7fd fc6c 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8014f0c:	1d3b      	adds	r3, r7, #4
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	1d3b      	adds	r3, r7, #4
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8014f18:	4619      	mov	r1, r3
 8014f1a:	4610      	mov	r0, r2
 8014f1c:	f7fd fc62 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8014f20:	1d3b      	adds	r3, r7, #4
 8014f22:	681a      	ldr	r2, [r3, #0]
 8014f24:	1d3b      	adds	r3, r7, #4
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4610      	mov	r0, r2
 8014f30:	f7fd fc58 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8014f34:	1d3b      	adds	r3, r7, #4
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	1d3b      	adds	r3, r7, #4
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8014f40:	4619      	mov	r1, r3
 8014f42:	4610      	mov	r0, r2
 8014f44:	f7fd fc4e 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8014f48:	1d3b      	adds	r3, r7, #4
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	1d3b      	adds	r3, r7, #4
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014f54:	4619      	mov	r1, r3
 8014f56:	4610      	mov	r0, r2
 8014f58:	f7fd fc44 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpFrTpFrTpFlDesc);
 8014f5c:	1d3b      	adds	r3, r7, #4
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	1d3b      	adds	r3, r7, #4
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8014f68:	4619      	mov	r1, r3
 8014f6a:	4610      	mov	r0, r2
 8014f6c:	f7fd fc3a 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpRlDesc);
 8014f70:	1d3b      	adds	r3, r7, #4
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	1d3b      	adds	r3, r7, #4
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	4610      	mov	r0, r2
 8014f80:	f7fd fc30 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpFl);
 8014f84:	1d3b      	adds	r3, r7, #4
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	1d3b      	adds	r3, r7, #4
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8014f90:	4619      	mov	r1, r3
 8014f92:	4610      	mov	r0, r2
 8014f94:	f7fd fc26 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpRl);
 8014f98:	1d3b      	adds	r3, r7, #4
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	1d3b      	adds	r3, r7, #4
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	4610      	mov	r0, r2
 8014fa8:	f7fd fc1c 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8014fac:	1d3b      	adds	r3, r7, #4
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	1d3b      	adds	r3, r7, #4
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8014fb8:	4619      	mov	r1, r3
 8014fba:	4610      	mov	r0, r2
 8014fbc:	f7fd fc12 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8014fc0:	1d3b      	adds	r3, r7, #4
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	1d3b      	adds	r3, r7, #4
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8014fcc:	4619      	mov	r1, r3
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f7fd fc08 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8014fd4:	1d3b      	adds	r3, r7, #4
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	1d3b      	adds	r3, r7, #4
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	f7fd fbfe 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8014fe8:	1d3b      	adds	r3, r7, #4
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	1d3b      	adds	r3, r7, #4
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	4610      	mov	r0, r2
 8014ff8:	f7fd fbf4 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSDesc);
 8014ffc:	1d3b      	adds	r3, r7, #4
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	1d3b      	adds	r3, r7, #4
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8015008:	4619      	mov	r1, r3
 801500a:	4610      	mov	r0, r2
 801500c:	f7fd fbea 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8015010:	1d3b      	adds	r3, r7, #4
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	1d3b      	adds	r3, r7, #4
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801501c:	4619      	mov	r1, r3
 801501e:	4610      	mov	r0, r2
 8015020:	f7fd fbe0 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8015024:	1d3b      	adds	r3, r7, #4
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	1d3b      	adds	r3, r7, #4
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8015030:	4619      	mov	r1, r3
 8015032:	4610      	mov	r0, r2
 8015034:	f7fd fbd6 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8015038:	1d3b      	adds	r3, r7, #4
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	1d3b      	adds	r3, r7, #4
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8015044:	4619      	mov	r1, r3
 8015046:	4610      	mov	r0, r2
 8015048:	f7fd fbcc 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 801504c:	1d3b      	adds	r3, r7, #4
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	1d3b      	adds	r3, r7, #4
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	f203 7354 	addw	r3, r3, #1876	; 0x754
 8015058:	4619      	mov	r1, r3
 801505a:	4610      	mov	r0, r2
 801505c:	f7fd fbc2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8015060:	1d3b      	adds	r3, r7, #4
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	1d3b      	adds	r3, r7, #4
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801506c:	4619      	mov	r1, r3
 801506e:	4610      	mov	r0, r2
 8015070:	f7fd fbb8 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8015074:	1d3b      	adds	r3, r7, #4
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	1d3b      	adds	r3, r7, #4
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8015080:	4619      	mov	r1, r3
 8015082:	4610      	mov	r0, r2
 8015084:	f7fd fbae 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpRr);
 8015088:	1d3b      	adds	r3, r7, #4
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	1d3b      	adds	r3, r7, #4
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8015094:	4619      	mov	r1, r3
 8015096:	4610      	mov	r0, r2
 8015098:	f7fd fba4 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpRrDesc);
 801509c:	1d3b      	adds	r3, r7, #4
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	1d3b      	adds	r3, r7, #4
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 80150a8:	4619      	mov	r1, r3
 80150aa:	4610      	mov	r0, r2
 80150ac:	f7fd fb9a 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(DiffT);
 80150b0:	1d3b      	adds	r3, r7, #4
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	1d3b      	adds	r3, r7, #4
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	f603 0364 	addw	r3, r3, #2148	; 0x864
 80150bc:	4619      	mov	r1, r3
 80150be:	4610      	mov	r0, r2
 80150c0:	f7fd fb90 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(DiffTDescriptor);
 80150c4:	1d3b      	adds	r3, r7, #4
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	1d3b      	adds	r3, r7, #4
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80150d0:	4619      	mov	r1, r3
 80150d2:	4610      	mov	r0, r2
 80150d4:	f7fd fb86 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 80150d8:	1d3b      	adds	r3, r7, #4
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	1d3b      	adds	r3, r7, #4
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 80150e4:	4619      	mov	r1, r3
 80150e6:	4610      	mov	r0, r2
 80150e8:	f7fd fb7c 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtFl);
 80150ec:	1d3b      	adds	r3, r7, #4
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	1d3b      	adds	r3, r7, #4
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80150f8:	4619      	mov	r1, r3
 80150fa:	4610      	mov	r0, r2
 80150fc:	f7fd fb72 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtFr);
 8015100:	1d3b      	adds	r3, r7, #4
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	1d3b      	adds	r3, r7, #4
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 801510c:	4619      	mov	r1, r3
 801510e:	4610      	mov	r0, r2
 8015110:	f7fd fb68 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtFlDesc);
 8015114:	1d3b      	adds	r3, r7, #4
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	1d3b      	adds	r3, r7, #4
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 8015120:	4619      	mov	r1, r3
 8015122:	4610      	mov	r0, r2
 8015124:	f7fd fb5e 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtFRDesc);
 8015128:	1d3b      	adds	r3, r7, #4
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	1d3b      	adds	r3, r7, #4
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8015134:	4619      	mov	r1, r3
 8015136:	4610      	mov	r0, r2
 8015138:	f7fd fb54 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtRl);
 801513c:	1d3b      	adds	r3, r7, #4
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	1d3b      	adds	r3, r7, #4
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8015148:	4619      	mov	r1, r3
 801514a:	4610      	mov	r0, r2
 801514c:	f7fd fb4a 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtRr);
 8015150:	1d3b      	adds	r3, r7, #4
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	1d3b      	adds	r3, r7, #4
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 801515c:	4619      	mov	r1, r3
 801515e:	4610      	mov	r0, r2
 8015160:	f7fd fb40 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtRlDesc);
 8015164:	1d3b      	adds	r3, r7, #4
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	1d3b      	adds	r3, r7, #4
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8015170:	4619      	mov	r1, r3
 8015172:	4610      	mov	r0, r2
 8015174:	f7fd fb36 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TtRRDesc);
 8015178:	1d3b      	adds	r3, r7, #4
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	1d3b      	adds	r3, r7, #4
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8015184:	4619      	mov	r1, r3
 8015186:	4610      	mov	r0, r2
 8015188:	f7fd fb2c 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BrP);
 801518c:	1d3b      	adds	r3, r7, #4
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	1d3b      	adds	r3, r7, #4
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8015198:	4619      	mov	r1, r3
 801519a:	4610      	mov	r0, r2
 801519c:	f7fd fb22 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BrPrValue);
 80151a0:	1d3b      	adds	r3, r7, #4
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	1d3b      	adds	r3, r7, #4
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80151ac:	4619      	mov	r1, r3
 80151ae:	4610      	mov	r0, r2
 80151b0:	f7fd fb18 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BrPrDesc);
 80151b4:	1d3b      	adds	r3, r7, #4
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	1d3b      	adds	r3, r7, #4
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80151c0:	4619      	mov	r1, r3
 80151c2:	4610      	mov	r0, r2
 80151c4:	f7fd fb0e 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80151c8:	1d3b      	adds	r3, r7, #4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	4618      	mov	r0, r3
 80151ce:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80151d2:	46bd      	mov	sp, r7
 80151d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151d8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]

}
 80151e0:	bf00      	nop
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 80151fc:	683a      	ldr	r2, [r7, #0]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d106      	bne.n	8015210 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7fe f8ab 	bl	801335e <_ZN12MainViewBase11applicationEv>
 8015208:	4603      	mov	r3, r0
 801520a:	4618      	mov	r0, r3
 801520c:	f7fb feb8 	bl	8010f80 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8015210:	bf00      	nop
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	4a08      	ldr	r2, [pc, #32]	; (8015244 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	601a      	str	r2, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	3334      	adds	r3, #52	; 0x34
 801522a:	4618      	mov	r0, r3
 801522c:	f7fd fede 	bl	8012fec <_ZN8touchgfx13BoxWithBorderD1Ev>
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	4618      	mov	r0, r3
 8015234:	f7fd fe3e 	bl	8012eb4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	4618      	mov	r0, r3
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	0802d2fc 	.word	0x0802d2fc

08015248 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7ff ffe1 	bl	8015218 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8015256:	2178      	movs	r1, #120	; 0x78
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f016 f808 	bl	802b26e <_ZdlPvj>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	4618      	mov	r0, r3
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	4618      	mov	r0, r3
 8015274:	f00a ff8e 	bl	8020194 <_ZN8touchgfx6ScreenC1Ev>
 8015278:	4a05      	ldr	r2, [pc, #20]	; (8015290 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	601a      	str	r2, [r3, #0]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2200      	movs	r2, #0
 8015282:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	4618      	mov	r0, r3
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	0802d390 	.word	0x0802d390

08015294 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	4618      	mov	r0, r3
 80152a0:	f7fd fdf6 	bl	8012e90 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 80152a4:	4a17      	ldr	r2, [pc, #92]	; (8015304 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	601a      	str	r2, [r3, #0]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	3334      	adds	r3, #52	; 0x34
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fd fe76 	bl	8012fa0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	3368      	adds	r3, #104	; 0x68
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fd f82e 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	336c      	adds	r3, #108	; 0x6c
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fd f829 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	3370      	adds	r3, #112	; 0x70
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7fd f824 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	3374      	adds	r3, #116	; 0x74
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7fd f81f 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	3334      	adds	r3, #52	; 0x34
 80152e0:	2200      	movs	r2, #0
 80152e2:	2100      	movs	r1, #0
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fd f8f5 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80152ea:	687a      	ldr	r2, [r7, #4]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	3334      	adds	r3, #52	; 0x34
 80152f0:	4619      	mov	r1, r3
 80152f2:	4610      	mov	r0, r2
 80152f4:	f006 f85a 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	0802d2fc 	.word	0x0802d2fc

08015308 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	4a04      	ldr	r2, [pc, #16]	; (8015324 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	601a      	str	r2, [r3, #0]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4618      	mov	r0, r3
 801531a:	370c      	adds	r7, #12
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr
 8015324:	0802d458 	.word	0x0802d458

08015328 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	4639      	mov	r1, r7
 8015334:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	4618      	mov	r0, r3
 801533c:	f7ff ffe4 	bl	8015308 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8015340:	4a08      	ldr	r2, [pc, #32]	; (8015364 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	68ba      	ldr	r2, [r7, #8]
 801534a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	3308      	adds	r3, #8
 8015350:	463a      	mov	r2, r7
 8015352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015356:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	4618      	mov	r0, r3
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	0802d2e4 	.word	0x0802d2e4

08015368 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8015368:	b590      	push	{r4, r7, lr}
 801536a:	b089      	sub	sp, #36	; 0x24
 801536c:	af00      	add	r7, sp, #0
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	60b9      	str	r1, [r7, #8]
 8015372:	607a      	str	r2, [r7, #4]
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	015a      	lsls	r2, r3, #5
 801537c:	f107 0314 	add.w	r3, r7, #20
 8015380:	4611      	mov	r1, r2
 8015382:	4618      	mov	r0, r3
 8015384:	f7fd fc5a 	bl	8012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	461c      	mov	r4, r3
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	61fb      	str	r3, [r7, #28]
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	015a      	lsls	r2, r3, #5
 8015394:	f107 0310 	add.w	r3, r7, #16
 8015398:	4611      	mov	r1, r2
 801539a:	4618      	mov	r0, r3
 801539c:	f7fd fc4e 	bl	8012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80153a0:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80153a2:	461a      	mov	r2, r3
 80153a4:	4621      	mov	r1, r4
 80153a6:	68f8      	ldr	r0, [r7, #12]
 80153a8:	f007 ff60 	bl	801d26c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80153ac:	bf00      	nop
 80153ae:	3724      	adds	r7, #36	; 0x24
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd90      	pop	{r4, r7, pc}

080153b4 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b089      	sub	sp, #36	; 0x24
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60f8      	str	r0, [r7, #12]
 80153bc:	60b9      	str	r1, [r7, #8]
 80153be:	607a      	str	r2, [r7, #4]
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	61bb      	str	r3, [r7, #24]
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	015a      	lsls	r2, r3, #5
 80153c8:	f107 0314 	add.w	r3, r7, #20
 80153cc:	4611      	mov	r1, r2
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fd fc34 	bl	8012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	461c      	mov	r4, r3
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	61fb      	str	r3, [r7, #28]
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	015a      	lsls	r2, r3, #5
 80153e0:	f107 0310 	add.w	r3, r7, #16
 80153e4:	4611      	mov	r1, r2
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fd fc28 	bl	8012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80153ec:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80153ee:	461a      	mov	r2, r3
 80153f0:	4621      	mov	r1, r4
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f007 ff45 	bl	801d282 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80153f8:	bf00      	nop
 80153fa:	3724      	adds	r7, #36	; 0x24
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd90      	pop	{r4, r7, pc}

08015400 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	60fb      	str	r3, [r7, #12]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	015a      	lsls	r2, r3, #5
 8015412:	f107 0308 	add.w	r3, r7, #8
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f7fd fc0f 	bl	8012c3c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801541e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8015420:	4619      	mov	r1, r3
 8015422:	6878      	ldr	r0, [r7, #4]
 8015424:	f7fd fc25 	bl	8012c72 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8015428:	bf00      	nop
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8015430:	b590      	push	{r4, r7, lr}
 8015432:	b087      	sub	sp, #28
 8015434:	af02      	add	r7, sp, #8
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	4608      	mov	r0, r1
 801543a:	4611      	mov	r1, r2
 801543c:	461a      	mov	r2, r3
 801543e:	4603      	mov	r3, r0
 8015440:	817b      	strh	r3, [r7, #10]
 8015442:	460b      	mov	r3, r1
 8015444:	813b      	strh	r3, [r7, #8]
 8015446:	4613      	mov	r3, r2
 8015448:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8015450:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015454:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015458:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801545c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015460:	9300      	str	r3, [sp, #0]
 8015462:	4623      	mov	r3, r4
 8015464:	f7fb fa88 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8015468:	bf00      	nop
 801546a:	3714      	adds	r7, #20
 801546c:	46bd      	mov	sp, r7
 801546e:	bd90      	pop	{r4, r7, pc}

08015470 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	3334      	adds	r3, #52	; 0x34
 8015480:	78fa      	ldrb	r2, [r7, #3]
 8015482:	4611      	mov	r1, r2
 8015484:	4618      	mov	r0, r3
 8015486:	f7fd fdef 	bl	8013068 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801548a:	bf00      	nop
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015492:	b580      	push	{r7, lr}
 8015494:	b084      	sub	sp, #16
 8015496:	af00      	add	r7, sp, #0
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	607a      	str	r2, [r7, #4]
 801549e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	683a      	ldr	r2, [r7, #0]
 80154b0:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	69ba      	ldr	r2, [r7, #24]
 80154b6:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	3384      	adds	r3, #132	; 0x84
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	68f8      	ldr	r0, [r7, #12]
 80154c2:	4798      	blx	r3
    }
 80154c4:	bf00      	nop
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
    }
 80154d4:	4a04      	ldr	r2, [pc, #16]	; (80154e8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	601a      	str	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr
 80154e8:	0802d458 	.word	0x0802d458

080154ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
    }
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	f7ff ffe9 	bl	80154cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80154fa:	2104      	movs	r1, #4
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f015 feb6 	bl	802b26e <_ZdlPvj>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	4618      	mov	r0, r3
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801550c:	b590      	push	{r4, r7, lr}
 801550e:	b083      	sub	sp, #12
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	4618      	mov	r0, r3
 801551e:	f7fd fc67 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	d002      	beq.n	801552e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	336c      	adds	r3, #108	; 0x6c
 801552c:	e001      	b.n	8015532 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	3368      	adds	r3, #104	; 0x68
 8015532:	6819      	ldr	r1, [r3, #0]
 8015534:	4620      	mov	r0, r4
 8015536:	f7fd fd7b 	bl	8013030 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	4618      	mov	r0, r3
 8015544:	f7fd fc54 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015548:	4603      	mov	r3, r0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	3374      	adds	r3, #116	; 0x74
 8015552:	e001      	b.n	8015558 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	3370      	adds	r3, #112	; 0x70
 8015558:	6819      	ldr	r1, [r3, #0]
 801555a:	4620      	mov	r0, r4
 801555c:	f7fd fd76 	bl	801304c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	4618      	mov	r0, r3
 8015564:	f7fd fc80 	bl	8012e68 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8015568:	bf00      	nop
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	bd90      	pop	{r4, r7, pc}

08015570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	4a05      	ldr	r2, [pc, #20]	; (8015590 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff ffa3 	bl	80154cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0802d2e4 	.word	0x0802d2e4

08015594 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f7ff ffe7 	bl	8015570 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80155a2:	2110      	movs	r1, #16
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f015 fe62 	bl	802b26e <_ZdlPvj>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	4618      	mov	r0, r3
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	4a05      	ldr	r2, [pc, #20]	; (80155d4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7fd fad1 	bl	8012b6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	4618      	mov	r0, r3
 80155ce:	3708      	adds	r7, #8
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	0802fb24 	.word	0x0802fb24

080155d8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	f7ff ffe7 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80155e6:	2138      	movs	r1, #56	; 0x38
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f015 fe40 	bl	802b26e <_ZdlPvj>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	4618      	mov	r0, r3
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	4a05      	ldr	r2, [pc, #20]	; (8015618 <_ZN8touchgfx4LineD1Ev+0x20>)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	601a      	str	r2, [r3, #0]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	f007 fc09 	bl	801ce20 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	4618      	mov	r0, r3
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	0802f750 	.word	0x0802f750

0801561c <_ZN8touchgfx4LineD0Ev>:
 801561c:	b580      	push	{r7, lr}
 801561e:	b082      	sub	sp, #8
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	f7ff ffe7 	bl	80155f8 <_ZN8touchgfx4LineD1Ev>
 801562a:	2174      	movs	r1, #116	; 0x74
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f015 fe1e 	bl	802b26e <_ZdlPvj>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	4618      	mov	r0, r3
 8015636:	3708      	adds	r7, #8
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	4a05      	ldr	r2, [pc, #20]	; (801565c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	601a      	str	r2, [r3, #0]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fb33 	bl	8012cb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4618      	mov	r0, r3
 8015656:	3708      	adds	r7, #8
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	0802f454 	.word	0x0802f454

08015660 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f7ff ffe7 	bl	801563c <_ZN8touchgfx13PainterRGB888D1Ev>
 801566e:	2118      	movs	r1, #24
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f015 fdfc 	bl	802b26e <_ZdlPvj>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	4618      	mov	r0, r3
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	68d2      	ldr	r2, [r2, #12]
 8015692:	1052      	asrs	r2, r2, #1
 8015694:	1898      	adds	r0, r3, r2
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	f003 0301 	and.w	r3, r3, #1
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d102      	bne.n	80156a8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	689b      	ldr	r3, [r3, #8]
 80156a6:	e00a      	b.n	80156be <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	68d2      	ldr	r2, [r2, #12]
 80156b0:	1052      	asrs	r2, r2, #1
 80156b2:	4413      	add	r3, r2
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	687a      	ldr	r2, [r7, #4]
 80156b8:	6892      	ldr	r2, [r2, #8]
 80156ba:	4413      	add	r3, r2
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	6839      	ldr	r1, [r7, #0]
 80156c0:	4798      	blx	r3
    }
 80156c2:	bf00      	nop
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80156ca:	b480      	push	{r7}
 80156cc:	b083      	sub	sp, #12
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d010      	beq.n	80156fc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d107      	bne.n	80156f2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	f003 0301 	and.w	r3, r3, #1
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d101      	bne.n	80156f2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80156ee:	2301      	movs	r3, #1
 80156f0:	e000      	b.n	80156f4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80156f2:	2300      	movs	r3, #0
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d001      	beq.n	80156fc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80156f8:	2301      	movs	r3, #1
 80156fa:	e000      	b.n	80156fe <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80156fc:	2300      	movs	r3, #0
    }
 80156fe:	4618      	mov	r0, r3
 8015700:	370c      	adds	r7, #12
 8015702:	46bd      	mov	sp, r7
 8015704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015708:	4770      	bx	lr

0801570a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801570a:	b590      	push	{r4, r7, lr}
 801570c:	b083      	sub	sp, #12
 801570e:	af00      	add	r7, sp, #0
 8015710:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	4618      	mov	r0, r3
 801571c:	f7fd fb89 	bl	8012e32 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015720:	4603      	mov	r3, r0
 8015722:	4619      	mov	r1, r3
 8015724:	4620      	mov	r0, r4
 8015726:	f7fd fcaf 	bl	8013088 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	4618      	mov	r0, r3
 801572e:	f7fd fba5 	bl	8012e7c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8015732:	bf00      	nop
 8015734:	370c      	adds	r7, #12
 8015736:	46bd      	mov	sp, r7
 8015738:	bd90      	pop	{r4, r7, pc}
	...

0801573c <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	4618      	mov	r0, r3
 8015748:	f7fd fafa 	bl	8012d40 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 801574c:	4a03      	ldr	r2, [pc, #12]	; (801575c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	0802d910 	.word	0x0802d910

08015760 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	4a05      	ldr	r2, [pc, #20]	; (8015780 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	601a      	str	r2, [r3, #0]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4618      	mov	r0, r3
 8015772:	f7fd fb07 	bl	8012d84 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	4618      	mov	r0, r3
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	0802d910 	.word	0x0802d910

08015784 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f7ff ffe7 	bl	8015760 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015792:	2134      	movs	r1, #52	; 0x34
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f015 fd6a 	bl	802b26e <_ZdlPvj>
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	4618      	mov	r0, r3
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fd fb1d 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80157b6:	4603      	mov	r3, r0
 80157b8:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80157ba:	6838      	ldr	r0, [r7, #0]
 80157bc:	f7fc fe01 	bl	80123c2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	bf0c      	ite	eq
 80157c6:	2301      	moveq	r3, #1
 80157c8:	2300      	movne	r3, #0
 80157ca:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80157cc:	7bbb      	ldrb	r3, [r7, #14]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d005      	beq.n	80157de <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80157d2:	7bfb      	ldrb	r3, [r7, #15]
 80157d4:	f083 0301 	eor.w	r3, r3, #1
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d108      	bne.n	80157f0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80157de:	7bbb      	ldrb	r3, [r7, #14]
 80157e0:	f083 0301 	eor.w	r3, r3, #1
 80157e4:	b2db      	uxtb	r3, r3
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d00f      	beq.n	801580a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80157ea:	7bfb      	ldrb	r3, [r7, #15]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00c      	beq.n	801580a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	7bba      	ldrb	r2, [r7, #14]
 80157f4:	4611      	mov	r1, r2
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fd fae6 	bl	8012dc8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	3314      	adds	r3, #20
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	4610      	mov	r0, r2
 8015808:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801580a:	7bfb      	ldrb	r3, [r7, #15]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d00b      	beq.n	8015828 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015810:	6838      	ldr	r0, [r7, #0]
 8015812:	f7fc fdd6 	bl	80123c2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015816:	4603      	mov	r3, r0
 8015818:	2b01      	cmp	r3, #1
 801581a:	d105      	bne.n	8015828 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015824:	2301      	movs	r3, #1
 8015826:	e000      	b.n	801582a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8015828:	2300      	movs	r3, #0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d015      	beq.n	801585a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	330c      	adds	r3, #12
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	4610      	mov	r0, r2
 801583e:	4798      	blx	r3
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d009      	beq.n	801585a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	3308      	adds	r3, #8
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	6879      	ldr	r1, [r7, #4]
 8015856:	4610      	mov	r0, r2
 8015858:	4798      	blx	r3
            }
        }
    }
 801585a:	bf00      	nop
 801585c:	3710      	adds	r7, #16
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 8015862:	b480      	push	{r7}
 8015864:	b083      	sub	sp, #12
 8015866:	af00      	add	r7, sp, #0
 8015868:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	881b      	ldrh	r3, [r3, #0]
 801586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015872:	4293      	cmp	r3, r2
 8015874:	bf14      	ite	ne
 8015876:	2301      	movne	r3, #1
 8015878:	2300      	moveq	r3, #0
 801587a:	b2db      	uxtb	r3, r3
    }
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	4618      	mov	r0, r3
 8015894:	f7fc ffb6 	bl	8012804 <_ZN8touchgfx6WidgetC1Ev>
 8015898:	4a09      	ldr	r2, [pc, #36]	; (80158c0 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	601a      	str	r2, [r3, #0]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2200      	movs	r2, #0
 80158a2:	629a      	str	r2, [r3, #40]	; 0x28
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2101      	movs	r1, #1
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fc fe90 	bl	80125d6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	0802f83c 	.word	0x0802f83c

080158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	683a      	ldr	r2, [r7, #0]
 80158d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80158d4:	bf00      	nop
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr

080158e0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 80158ee:	4618      	mov	r0, r3
 80158f0:	370c      	adds	r7, #12
 80158f2:	46bd      	mov	sp, r7
 80158f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f8:	4770      	bx	lr
	...

080158fc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	4a05      	ldr	r2, [pc, #20]	; (801591c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	601a      	str	r2, [r3, #0]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	4618      	mov	r0, r3
 801590e:	f7fc ff8b 	bl	8012828 <_ZN8touchgfx6WidgetD1Ev>
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	4618      	mov	r0, r3
 8015916:	3708      	adds	r7, #8
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	0802f83c 	.word	0x0802f83c

08015920 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f7ff ffe7 	bl	80158fc <_ZN8touchgfx14AbstractButtonD1Ev>
 801592e:	2130      	movs	r1, #48	; 0x30
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f015 fc9c 	bl	802b26e <_ZdlPvj>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4618      	mov	r0, r3
 801594c:	f7ff ff9c 	bl	8015888 <_ZN8touchgfx14AbstractButtonC1Ev>
 8015950:	4a0c      	ldr	r2, [pc, #48]	; (8015984 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	601a      	str	r2, [r3, #0]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	332e      	adds	r3, #46	; 0x2e
 801595a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801595e:	4618      	mov	r0, r3
 8015960:	f7fc fd3b 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	3330      	adds	r3, #48	; 0x30
 8015968:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801596c:	4618      	mov	r0, r3
 801596e:	f7fc fd34 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	22ff      	movs	r2, #255	; 0xff
 8015976:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4618      	mov	r0, r3
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	0802fa80 	.word	0x0802fa80

08015988 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	4a05      	ldr	r2, [pc, #20]	; (80159a8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	601a      	str	r2, [r3, #0]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	4618      	mov	r0, r3
 801599a:	f7ff ffaf 	bl	80158fc <_ZN8touchgfx14AbstractButtonD1Ev>
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	4618      	mov	r0, r3
 80159a2:	3708      	adds	r7, #8
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}
 80159a8:	0802fa80 	.word	0x0802fa80

080159ac <_ZN8touchgfx6ButtonD0Ev>:
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7ff ffe7 	bl	8015988 <_ZN8touchgfx6ButtonD1Ev>
 80159ba:	2134      	movs	r1, #52	; 0x34
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f015 fc56 	bl	802b26e <_ZdlPvj>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4618      	mov	r0, r3
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 80159cc:	b480      	push	{r7}
 80159ce:	b083      	sub	sp, #12
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	683a      	ldr	r2, [r7, #0]
 80159da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 80159de:	bf00      	nop
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 80159f8:	b29b      	uxth	r3, r3
    }
 80159fa:	4618      	mov	r0, r3
 80159fc:	370c      	adds	r7, #12
 80159fe:	46bd      	mov	sp, r7
 8015a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a04:	4770      	bx	lr

08015a06 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
 8015a06:	b480      	push	{r7}
 8015a08:	b083      	sub	sp, #12
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8015a14:	b29b      	uxth	r3, r3
    }
 8015a16:	4618      	mov	r0, r3
 8015a18:	370c      	adds	r7, #12
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr

08015a22 <_ZNK8touchgfx6Slider11getMinValueEv>:
     *
     * @return The minimum value.
     * @see setValueRange
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
 8015a22:	b480      	push	{r7}
 8015a24:	b083      	sub	sp, #12
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMin;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a2e:	b29b      	uxth	r3, r3
    }
 8015a30:	4618      	mov	r0, r3
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <_ZNK8touchgfx6Slider11getMaxValueEv>:
     *
     * @return The maximum value.
     * @see setValueRange
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMax;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a48:	b29b      	uxth	r3, r3
    }
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr

08015a56 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     *        Sets the text to display on the button. Texts with wildcards are not supported.
     *
     * @param t The text to display.
     */
    void setLabelText(TypedText t)
 8015a56:	b580      	push	{r7, lr}
 8015a58:	b082      	sub	sp, #8
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	6078      	str	r0, [r7, #4]
 8015a5e:	8039      	strh	r1, [r7, #0]
    {
        typedText = t;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	883a      	ldrh	r2, [r7, #0]
 8015a64:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f000 f834 	bl	8015ad4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8015a6c:	bf00      	nop
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
     *
     * @param col               The color with which the text label should be drawn.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColor(colortype col, bool performInvalidate = false)
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b084      	sub	sp, #16
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	4613      	mov	r3, r2
 8015a80:	71fb      	strb	r3, [r7, #7]
    {
        color = col;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	68ba      	ldr	r2, [r7, #8]
 8015a86:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 8015a88:	79fb      	ldrb	r3, [r7, #7]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d006      	beq.n	8015a9c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
        {
            invalidate();
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	3314      	adds	r3, #20
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	4610      	mov	r0, r2
 8015a9a:	4798      	blx	r3
        }
    }
 8015a9c:	bf00      	nop
 8015a9e:	3710      	adds	r7, #16
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
     * @param col               The color with which the text label should be drawn when the
     *                          button is pressed.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	4613      	mov	r3, r2
 8015ab0:	71fb      	strb	r3, [r7, #7]
    {
        colorPressed = col;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	68ba      	ldr	r2, [r7, #8]
 8015ab6:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 8015ab8:	79fb      	ldrb	r3, [r7, #7]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d006      	beq.n	8015acc <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
        {
            invalidate();
 8015abe:	68fa      	ldr	r2, [r7, #12]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	3314      	adds	r3, #20
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	4610      	mov	r0, r2
 8015aca:	4798      	blx	r3
        }
    }
 8015acc:	bf00      	nop
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     *        If the text changes due to a language change you may need to reposition the label
     *        text to stay horizontally centered.
     *
     * @note The method does not invalidate the button. This must be done manually.
     */
    void updateTextPosition()
 8015ad4:	b590      	push	{r4, r7, lr}
 8015ad6:	b085      	sub	sp, #20
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	3334      	adds	r3, #52	; 0x34
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7ff febe 	bl	8015862 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d02e      	beq.n	8015b4a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
        {
            const Font* f = typedText.getFont();
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	3334      	adds	r3, #52	; 0x34
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fa fb6d 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 8015af6:	60f8      	str	r0, [r7, #12]
            const Unicode::UnicodeChar* s = typedText.getText();
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	3334      	adds	r3, #52	; 0x34
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7fc ff39 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8015b02:	60b8      	str	r0, [r7, #8]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	3328      	adds	r3, #40	; 0x28
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	68b9      	ldr	r1, [r7, #8]
 8015b0e:	68f8      	ldr	r0, [r7, #12]
 8015b10:	4798      	blx	r3
 8015b12:	4603      	mov	r3, r0
 8015b14:	b2dc      	uxtb	r4, r3
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	3340      	adds	r3, #64	; 0x40
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	68b9      	ldr	r1, [r7, #8]
 8015b20:	68f8      	ldr	r0, [r7, #12]
 8015b22:	4798      	blx	r3
 8015b24:	4603      	mov	r3, r0
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	fb14 f303 	smulbb	r3, r4, r3
 8015b2c:	b2dc      	uxtb	r4, r3
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	3324      	adds	r3, #36	; 0x24
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	68b9      	ldr	r1, [r7, #8]
 8015b38:	68f8      	ldr	r0, [r7, #12]
 8015b3a:	4798      	blx	r3
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	4423      	add	r3, r4
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8015b48:	e003      	b.n	8015b52 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7e>
            textHeightIncludingSpacing = 0;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 8015b52:	bf00      	nop
 8015b54:	3714      	adds	r7, #20
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd90      	pop	{r4, r7, pc}

08015b5a <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8015b5a:	b580      	push	{r7, lr}
 8015b5c:	b082      	sub	sp, #8
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	6078      	str	r0, [r7, #4]
 8015b62:	6039      	str	r1, [r7, #0]
    {
        return Button::getSolidRect();
 8015b64:	683a      	ldr	r2, [r7, #0]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	4611      	mov	r1, r2
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f008 f827 	bl	801dbbe <_ZNK8touchgfx6Button12getSolidRectEv>
    }
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	4a05      	ldr	r2, [pc, #20]	; (8015b98 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	601a      	str	r2, [r3, #0]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fc fdd3 	bl	8012734 <_ZN8touchgfx6ScreenD1Ev>
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4618      	mov	r0, r3
 8015b92:	3708      	adds	r7, #8
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}
 8015b98:	0802d8ac 	.word	0x0802d8ac

08015b9c <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b082      	sub	sp, #8
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7ff ffe7 	bl	8015b78 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015baa:	2140      	movs	r1, #64	; 0x40
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f015 fb5e 	bl	802b26e <_ZdlPvj>
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}

08015bbc <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	4a3d      	ldr	r2, [pc, #244]	; (8015cbc <_ZN20SecondScreenViewBaseD1Ev+0x100>)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	601a      	str	r2, [r3, #0]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f001 f97f 	bl	8016ed4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivED1Ev>
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f001 f99b 	bl	8016f18 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8015be8:	4618      	mov	r0, r3
 8015bea:	f001 f9b7 	bl	8016f5c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7ff fcdd 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7ff fcd7 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ff fcd1 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ff fccb 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7ff fcc5 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 ff67 	bl	8016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f000 ff61 	bl	8016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f000 ff5b 	bl	8016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8015c54:	4618      	mov	r0, r3
 8015c56:	f000 ff55 	bl	8016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 ff09 	bl	8016a78 <_ZN8touchgfx13ClickListenerINS_6SliderEED1Ev>
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7ff fca1 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f7ff fc9b 	bl	80155b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7ff fe7f 	bl	8015988 <_ZN8touchgfx6ButtonD1Ev>
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	33e8      	adds	r3, #232	; 0xe8
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7ff fe7a 	bl	8015988 <_ZN8touchgfx6ButtonD1Ev>
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	3370      	adds	r3, #112	; 0x70
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 fec5 	bl	8016a28 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	3340      	adds	r3, #64	; 0x40
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7fc fe26 	bl	80128f4 <_ZN8touchgfx3BoxD1Ev>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ff ff64 	bl	8015b78 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3708      	adds	r7, #8
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	0802d644 	.word	0x0802d644

08015cc0 <_ZN20SecondScreenViewBaseD0Ev>:
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f7ff ff77 	bl	8015bbc <_ZN20SecondScreenViewBaseD1Ev>
 8015cce:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f015 facb 	bl	802b26e <_ZdlPvj>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <_ZN20SecondScreenViewBase9nextErrorEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void nextError()
 8015ce2:	b480      	push	{r7}
 8015ce4:	b083      	sub	sp, #12
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015cea:	bf00      	nop
 8015cec:	370c      	adds	r7, #12
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf4:	4770      	bx	lr

08015cf6 <_ZN20SecondScreenViewBase11clearErrorsEv>:

    virtual void clearErrors()
 8015cf6:	b480      	push	{r7}
 8015cf8:	b083      	sub	sp, #12
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015cfe:	bf00      	nop
 8015d00:	370c      	adds	r7, #12
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr

08015d0a <_ZN20SecondScreenViewBase16moveToMainScreenEv>:

    virtual void moveToMainScreen()
 8015d0a:	b480      	push	{r7}
 8015d0c:	b083      	sub	sp, #12
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015d12:	bf00      	nop
 8015d14:	370c      	adds	r7, #12
 8015d16:	46bd      	mov	sp, r7
 8015d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1c:	4770      	bx	lr

08015d1e <_ZN20SecondScreenViewBase16tpmsIndexChangesEi>:

    virtual void tpmsIndexChanges(int value)
 8015d1e:	b480      	push	{r7}
 8015d20:	b083      	sub	sp, #12
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	6078      	str	r0, [r7, #4]
 8015d26:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in SecondScreen
    }
 8015d28:	bf00      	nop
 8015d2a:	370c      	adds	r7, #12
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr

08015d34 <_ZN20SecondScreenViewBase10frSetIndexEv>:

    virtual void frSetIndex()
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015d3c:	bf00      	nop
 8015d3e:	370c      	adds	r7, #12
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <_ZN20SecondScreenViewBase10rrSetIndexEv>:

    virtual void rrSetIndex()
 8015d48:	b480      	push	{r7}
 8015d4a:	b083      	sub	sp, #12
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015d50:	bf00      	nop
 8015d52:	370c      	adds	r7, #12
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr

08015d5c <_ZN20SecondScreenViewBase10rlSetIndexEv>:

    virtual void rlSetIndex()
 8015d5c:	b480      	push	{r7}
 8015d5e:	b083      	sub	sp, #12
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015d64:	bf00      	nop
 8015d66:	370c      	adds	r7, #12
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr

08015d70 <_ZN20SecondScreenViewBase10flSetIndexEv>:

    virtual void flSetIndex()
 8015d70:	b480      	push	{r7}
 8015d72:	b083      	sub	sp, #12
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015d78:	bf00      	nop
 8015d7a:	370c      	adds	r7, #12
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr

08015d84 <_ZN20SecondScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015d8c:	f009 fa6c 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 8015d90:	4603      	mov	r3, r0
    }
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
	...

08015d9c <_ZN20SecondScreenViewBaseC1Ev>:
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

SecondScreenViewBase::SecondScreenViewBase() :
 8015d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da0:	b0ac      	sub	sp, #176	; 0xb0
 8015da2:	af02      	add	r7, sp, #8
 8015da4:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &SecondScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler),
    sliderValueChangedCallback(this, &SecondScreenViewBase::sliderValueChangedCallbackHandler)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f000 fecd 	bl	8016b48 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 8015dae:	4ad9      	ldr	r2, [pc, #868]	; (8016114 <_ZN20SecondScreenViewBaseC1Ev+0x378>)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	3340      	adds	r3, #64	; 0x40
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fc fd7b 	bl	80128b4 <_ZN8touchgfx3BoxC1Ev>
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	3370      	adds	r3, #112	; 0x70
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f000 fed6 	bl	8016b74 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	33e8      	adds	r3, #232	; 0xe8
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff fdb7 	bl	8015940 <_ZN8touchgfx6ButtonC1Ev>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7ff fdb1 	bl	8015940 <_ZN8touchgfx6ButtonC1Ev>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7fc fee3 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fc fedd 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f000 fef3 	bl	8016be8 <_ZN8touchgfx13ClickListenerINS_6SliderEEC1Ev>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 ff09 	bl	8016c20 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8015e14:	4618      	mov	r0, r3
 8015e16:	f000 ff03 	bl	8016c20 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015e20:	4618      	mov	r0, r3
 8015e22:	f000 fefd 	bl	8016c20 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev>
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f000 fef7 	bl	8016c20 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7fc feb9 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fc feb3 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7fc fead 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7fc fea7 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7fc fea1 	bl	8012bb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f503 60b3 	add.w	r0, r3, #1432	; 0x598
 8015e74:	4ba8      	ldr	r3, [pc, #672]	; (8016118 <_ZN20SecondScreenViewBaseC1Ev+0x37c>)
 8015e76:	60fb      	str	r3, [r7, #12]
 8015e78:	2300      	movs	r3, #0
 8015e7a:	613b      	str	r3, [r7, #16]
 8015e7c:	f107 030c 	add.w	r3, r7, #12
 8015e80:	cb0c      	ldmia	r3, {r2, r3}
 8015e82:	6879      	ldr	r1, [r7, #4]
 8015e84:	f000 fef6 	bl	8016c74 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f503 60b5 	add.w	r0, r3, #1448	; 0x5a8
 8015e8e:	4ba3      	ldr	r3, [pc, #652]	; (801611c <_ZN20SecondScreenViewBaseC1Ev+0x380>)
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	2300      	movs	r3, #0
 8015e94:	61bb      	str	r3, [r7, #24]
 8015e96:	f107 0314 	add.w	r3, r7, #20
 8015e9a:	cb0c      	ldmia	r3, {r2, r3}
 8015e9c:	6879      	ldr	r1, [r7, #4]
 8015e9e:	f000 ff09 	bl	8016cb4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f503 60b7 	add.w	r0, r3, #1464	; 0x5b8
 8015ea8:	4b9d      	ldr	r3, [pc, #628]	; (8016120 <_ZN20SecondScreenViewBaseC1Ev+0x384>)
 8015eaa:	61fb      	str	r3, [r7, #28]
 8015eac:	2300      	movs	r3, #0
 8015eae:	623b      	str	r3, [r7, #32]
 8015eb0:	f107 031c 	add.w	r3, r7, #28
 8015eb4:	cb0c      	ldmia	r3, {r2, r3}
 8015eb6:	6879      	ldr	r1, [r7, #4]
 8015eb8:	f000 ff2c 	bl	8016d14 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015ec2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015ecc:	2200      	movs	r2, #0
 8015ece:	2100      	movs	r1, #0
 8015ed0:	f7fa fd52 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015eda:	2200      	movs	r2, #0
 8015edc:	2100      	movs	r1, #0
 8015ede:	2000      	movs	r0, #0
 8015ee0:	f7fd fa48 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f7fc fd25 	bl	8012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015ef4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	2385      	movs	r3, #133	; 0x85
 8015efc:	2200      	movs	r2, #0
 8015efe:	2100      	movs	r1, #0
 8015f00:	f000 ff28 	bl	8016d54 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	3370      	adds	r3, #112	; 0x70
 8015f08:	2105      	movs	r1, #5
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f000 ff42 	bl	8016d94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015f16:	2299      	movs	r2, #153	; 0x99
 8015f18:	2166      	movs	r1, #102	; 0x66
 8015f1a:	2000      	movs	r0, #0
 8015f1c:	f7fd fa2a 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f20:	4605      	mov	r5, r0
 8015f22:	22cc      	movs	r2, #204	; 0xcc
 8015f24:	2199      	movs	r1, #153	; 0x99
 8015f26:	2000      	movs	r0, #0
 8015f28:	f7fd fa24 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f2c:	4606      	mov	r6, r0
 8015f2e:	2266      	movs	r2, #102	; 0x66
 8015f30:	2133      	movs	r1, #51	; 0x33
 8015f32:	2000      	movs	r0, #0
 8015f34:	f7fd fa1e 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f38:	4680      	mov	r8, r0
 8015f3a:	2299      	movs	r2, #153	; 0x99
 8015f3c:	2166      	movs	r1, #102	; 0x66
 8015f3e:	2033      	movs	r0, #51	; 0x33
 8015f40:	f7fd fa18 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f44:	4603      	mov	r3, r0
 8015f46:	9300      	str	r3, [sp, #0]
 8015f48:	4643      	mov	r3, r8
 8015f4a:	4632      	mov	r2, r6
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f000 ff31 	bl	8016db6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015f5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015f5e:	9300      	str	r3, [sp, #0]
 8015f60:	2385      	movs	r3, #133	; 0x85
 8015f62:	2200      	movs	r2, #0
 8015f64:	2100      	movs	r1, #0
 8015f66:	f7fa fd07 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	3370      	adds	r3, #112	; 0x70
 8015f6e:	2100      	movs	r1, #0
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7fc ff4a 	bl	8012e0a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8015f82:	4619      	mov	r1, r3
 8015f84:	4610      	mov	r0, r2
 8015f86:	f7fc ff61 	bl	8012e4c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    nextErrorButton.setXY(256, 226);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	33e8      	adds	r3, #232	; 0xe8
 8015f8e:	22e2      	movs	r2, #226	; 0xe2
 8015f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7fc fa9d 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    nextErrorButton.setVisible(false);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	33e8      	adds	r3, #232	; 0xe8
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7fc fb08 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>
    nextErrorButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID));
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8015fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015fb0:	2109      	movs	r1, #9
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7fc fa11 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8015fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015fbc:	2109      	movs	r1, #9
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7fc fa0b 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8015fc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015fcc:	4619      	mov	r1, r3
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f007 fde4 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    nextErrorButton.setAction(buttonCallback);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	4610      	mov	r0, r2
 8015fe4:	f7ff fc6e 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    clearErrorsBtn.setXY(193, 226);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015fee:	22e2      	movs	r2, #226	; 0xe2
 8015ff0:	21c1      	movs	r1, #193	; 0xc1
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fc fa6e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    clearErrorsBtn.setVisible(false);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015ffe:	2100      	movs	r1, #0
 8016000:	4618      	mov	r0, r3
 8016002:	f7fc fad8 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>
    clearErrorsBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID));
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 801600c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016010:	2108      	movs	r1, #8
 8016012:	4618      	mov	r0, r3
 8016014:	f7fc f9e1 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8016018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801601c:	2108      	movs	r1, #8
 801601e:	4618      	mov	r0, r3
 8016020:	f7fc f9db 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8016024:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801602c:	4619      	mov	r1, r3
 801602e:	4620      	mov	r0, r4
 8016030:	f007 fdb4 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    clearErrorsBtn.setAction(buttonCallback);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8016040:	4619      	mov	r1, r3
 8016042:	4610      	mov	r0, r2
 8016044:	f7ff fc3e 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    CheckEngCodeValue.setXY(12, 237);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801604e:	22ed      	movs	r2, #237	; 0xed
 8016050:	210c      	movs	r1, #12
 8016052:	4618      	mov	r0, r3
 8016054:	f7fc fa3e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    CheckEngCodeValue.setVisible(false);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801605e:	2100      	movs	r1, #0
 8016060:	4618      	mov	r0, r3
 8016062:	f7fc faa8 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>
    CheckEngCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 801606c:	2200      	movs	r2, #0
 801606e:	21dc      	movs	r1, #220	; 0xdc
 8016070:	20ff      	movs	r0, #255	; 0xff
 8016072:	f7fd f97f 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016076:	4603      	mov	r3, r0
 8016078:	4619      	mov	r1, r3
 801607a:	4620      	mov	r0, r4
 801607c:	f7fc fcd3 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CheckEngCodeValue.setLinespacing(0);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016086:	2100      	movs	r1, #0
 8016088:	4618      	mov	r0, r3
 801608a:	f7fc fd1f 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID94).getText());
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f503 649f 	add.w	r4, r3, #1272	; 0x4f8
 8016094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016098:	213e      	movs	r1, #62	; 0x3e
 801609a:	4618      	mov	r0, r3
 801609c:	f7fc fc5a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80160a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7fc fc65 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80160aa:	4603      	mov	r3, r0
 80160ac:	4a1d      	ldr	r2, [pc, #116]	; (8016124 <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 80160ae:	2123      	movs	r1, #35	; 0x23
 80160b0:	4620      	mov	r0, r4
 80160b2:	f00b f96f 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CheckEngCodeValue.setWildcard(CheckEngCodeValueBuffer);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80160c2:	4619      	mov	r1, r3
 80160c4:	4610      	mov	r0, r2
 80160c6:	f7fc fd89 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CheckEngCodeValue.resizeToCurrentText();
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80160d0:	4618      	mov	r0, r3
 80160d2:	f007 fb2b 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CheckEngCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID93));
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80160dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160e0:	213d      	movs	r1, #61	; 0x3d
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fc fc36 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80160e8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80160ea:	4620      	mov	r0, r4
 80160ec:	f007 fb48 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EngProtCodeValue.setXY(314, 232);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80160f6:	22e8      	movs	r2, #232	; 0xe8
 80160f8:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7fc f9e9 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    EngProtCodeValue.setVisible(false);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016108:	2100      	movs	r1, #0
 801610a:	4618      	mov	r0, r3
 801610c:	f7fc fa53 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>
    EngProtCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	e009      	b.n	8016128 <_ZN20SecondScreenViewBaseC1Ev+0x38c>
 8016114:	0802d644 	.word	0x0802d644
 8016118:	08016919 	.word	0x08016919
 801611c:	080169c3 	.word	0x080169c3
 8016120:	080169f9 	.word	0x080169f9
 8016124:	0802c954 	.word	0x0802c954
 8016128:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 801612c:	2200      	movs	r2, #0
 801612e:	21dc      	movs	r1, #220	; 0xdc
 8016130:	20ff      	movs	r0, #255	; 0xff
 8016132:	f7fd f91f 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016136:	4603      	mov	r3, r0
 8016138:	4619      	mov	r1, r3
 801613a:	4620      	mov	r0, r4
 801613c:	f7fc fc73 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EngProtCodeValue.setLinespacing(0);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016146:	2100      	movs	r1, #0
 8016148:	4618      	mov	r0, r3
 801614a:	f7fc fcbf 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID96).getText());
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f203 543e 	addw	r4, r3, #1342	; 0x53e
 8016154:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016158:	2140      	movs	r1, #64	; 0x40
 801615a:	4618      	mov	r0, r3
 801615c:	f7fc fbfa 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8016160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016164:	4618      	mov	r0, r3
 8016166:	f7fc fc05 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801616a:	4603      	mov	r3, r0
 801616c:	4ae7      	ldr	r2, [pc, #924]	; (801650c <_ZN20SecondScreenViewBaseC1Ev+0x770>)
 801616e:	2123      	movs	r1, #35	; 0x23
 8016170:	4620      	mov	r0, r4
 8016172:	f00b f90f 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EngProtCodeValue.setWildcard(EngProtCodeValueBuffer);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f203 533e 	addw	r3, r3, #1342	; 0x53e
 8016182:	4619      	mov	r1, r3
 8016184:	4610      	mov	r0, r2
 8016186:	f7fc fd29 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EngProtCodeValue.resizeToCurrentText();
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016190:	4618      	mov	r0, r3
 8016192:	f007 facb 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    EngProtCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID95));
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 801619c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80161a0:	213f      	movs	r1, #63	; 0x3f
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fc fbd6 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80161a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80161ac:	4620      	mov	r0, r4
 80161ae:	f007 fae7 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpmsIndex.setXY(418, 53);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80161b8:	2235      	movs	r2, #53	; 0x35
 80161ba:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80161be:	4618      	mov	r0, r3
 80161c0:	f7fc f988 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    TpmsIndex.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 80161ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80161ce:	2105      	movs	r1, #5
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7fc f902 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80161d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80161da:	2106      	movs	r1, #6
 80161dc:	4618      	mov	r0, r3
 80161de:	f7fc f8fc 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80161e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80161e6:	2104      	movs	r1, #4
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7fc f8f6 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80161ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80161f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80161f6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80161fa:	4620      	mov	r0, r4
 80161fc:	f005 fca0 	bl	801bb40 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    TpmsIndex.setupVerticalSlider(7, 3, 0, 0, 125);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f503 70e0 	add.w	r0, r3, #448	; 0x1c0
 8016206:	237d      	movs	r3, #125	; 0x7d
 8016208:	9301      	str	r3, [sp, #4]
 801620a:	2300      	movs	r3, #0
 801620c:	9300      	str	r3, [sp, #0]
 801620e:	2300      	movs	r3, #0
 8016210:	2203      	movs	r2, #3
 8016212:	2107      	movs	r1, #7
 8016214:	f005 fb72 	bl	801b8fc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    TpmsIndex.setValueRange(1, 4);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801621e:	2204      	movs	r2, #4
 8016220:	2101      	movs	r1, #1
 8016222:	4618      	mov	r0, r3
 8016224:	f005 fa6b 	bl	801b6fe <_ZN8touchgfx6Slider13setValueRangeEii>
    TpmsIndex.setValue(1);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801622e:	2101      	movs	r1, #1
 8016230:	4618      	mov	r0, r3
 8016232:	f005 f9f0 	bl	801b616 <_ZN8touchgfx6Slider8setValueEi>
    TpmsIndex.setNewValueCallback(sliderValueChangedCallback);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8016242:	4619      	mov	r1, r3
 8016244:	4610      	mov	r0, r2
 8016246:	f7ff fbc1 	bl	80159cc <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    FrIndex.setXY(222, 12);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8016250:	220c      	movs	r2, #12
 8016252:	21de      	movs	r1, #222	; 0xde
 8016254:	4618      	mov	r0, r3
 8016256:	f7fc f93d 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    FrIndex.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_PRESSED_ID));
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8016260:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016264:	2100      	movs	r1, #0
 8016266:	4618      	mov	r0, r3
 8016268:	f7fc f8b7 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 801626c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016270:	2101      	movs	r1, #1
 8016272:	4618      	mov	r0, r3
 8016274:	f7fc f8b1 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8016278:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801627c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016280:	4619      	mov	r1, r3
 8016282:	4620      	mov	r0, r4
 8016284:	f007 fc8a 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    FrIndex.setLabelText(touchgfx::TypedText(T_SINGLEUSEID115));
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 801628e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016292:	2150      	movs	r1, #80	; 0x50
 8016294:	4618      	mov	r0, r3
 8016296:	f7fc fb5d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801629a:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 801629e:	4620      	mov	r0, r4
 80162a0:	f7ff fbd9 	bl	8015a56 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    FrIndex.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80162aa:	22ff      	movs	r2, #255	; 0xff
 80162ac:	21ff      	movs	r1, #255	; 0xff
 80162ae:	20ff      	movs	r0, #255	; 0xff
 80162b0:	f7fd f860 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80162b4:	4603      	mov	r3, r0
 80162b6:	2200      	movs	r2, #0
 80162b8:	4619      	mov	r1, r3
 80162ba:	4620      	mov	r0, r4
 80162bc:	f7ff fbda 	bl	8015a74 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    FrIndex.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 80162c6:	22ff      	movs	r2, #255	; 0xff
 80162c8:	21ff      	movs	r1, #255	; 0xff
 80162ca:	20ff      	movs	r0, #255	; 0xff
 80162cc:	f7fd f852 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80162d0:	4603      	mov	r3, r0
 80162d2:	2200      	movs	r2, #0
 80162d4:	4619      	mov	r1, r3
 80162d6:	4620      	mov	r0, r4
 80162d8:	f7ff fbe4 	bl	8015aa4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    FrIndex.setAction(buttonCallback);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80162e8:	4619      	mov	r1, r3
 80162ea:	4610      	mov	r0, r2
 80162ec:	f7ff faea 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    RrIndex.setXY(222, 72);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80162f6:	2248      	movs	r2, #72	; 0x48
 80162f8:	21de      	movs	r1, #222	; 0xde
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7fc f8ea 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    RrIndex.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_PRESSED_ID));
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f503 7442 	add.w	r4, r3, #776	; 0x308
 8016306:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801630a:	2100      	movs	r1, #0
 801630c:	4618      	mov	r0, r3
 801630e:	f7fc f864 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 8016312:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016316:	2101      	movs	r1, #1
 8016318:	4618      	mov	r0, r3
 801631a:	f7fc f85e 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 801631e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016322:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016326:	4619      	mov	r1, r3
 8016328:	4620      	mov	r0, r4
 801632a:	f007 fc37 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    RrIndex.setLabelText(touchgfx::TypedText(T_SINGLEUSEID117));
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f503 7442 	add.w	r4, r3, #776	; 0x308
 8016334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016338:	2151      	movs	r1, #81	; 0x51
 801633a:	4618      	mov	r0, r3
 801633c:	f7fc fb0a 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8016340:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8016344:	4620      	mov	r0, r4
 8016346:	f7ff fb86 	bl	8015a56 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    RrIndex.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f503 7442 	add.w	r4, r3, #776	; 0x308
 8016350:	22ff      	movs	r2, #255	; 0xff
 8016352:	21ff      	movs	r1, #255	; 0xff
 8016354:	20ff      	movs	r0, #255	; 0xff
 8016356:	f7fd f80d 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801635a:	4603      	mov	r3, r0
 801635c:	2200      	movs	r2, #0
 801635e:	4619      	mov	r1, r3
 8016360:	4620      	mov	r0, r4
 8016362:	f7ff fb87 	bl	8015a74 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    RrIndex.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f503 7442 	add.w	r4, r3, #776	; 0x308
 801636c:	22ff      	movs	r2, #255	; 0xff
 801636e:	21ff      	movs	r1, #255	; 0xff
 8016370:	20ff      	movs	r0, #255	; 0xff
 8016372:	f7fc ffff 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016376:	4603      	mov	r3, r0
 8016378:	2200      	movs	r2, #0
 801637a:	4619      	mov	r1, r3
 801637c:	4620      	mov	r0, r4
 801637e:	f7ff fb91 	bl	8015aa4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    RrIndex.setAction(buttonCallback);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	f503 7242 	add.w	r2, r3, #776	; 0x308
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 801638e:	4619      	mov	r1, r3
 8016390:	4610      	mov	r0, r2
 8016392:	f7ff fa97 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    RlIndex.setXY(222, 132);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801639c:	2284      	movs	r2, #132	; 0x84
 801639e:	21de      	movs	r1, #222	; 0xde
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7fc f897 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    RlIndex.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_PRESSED_ID));
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f503 7454 	add.w	r4, r3, #848	; 0x350
 80163ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80163b0:	2100      	movs	r1, #0
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7fc f811 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80163b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80163bc:	2101      	movs	r1, #1
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fc f80b 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 80163c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80163c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80163cc:	4619      	mov	r1, r3
 80163ce:	4620      	mov	r0, r4
 80163d0:	f007 fbe4 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    RlIndex.setLabelText(touchgfx::TypedText(T_SINGLEUSEID118));
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f503 7454 	add.w	r4, r3, #848	; 0x350
 80163da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80163de:	2152      	movs	r1, #82	; 0x52
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fc fab7 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80163e6:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80163ea:	4620      	mov	r0, r4
 80163ec:	f7ff fb33 	bl	8015a56 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    RlIndex.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f503 7454 	add.w	r4, r3, #848	; 0x350
 80163f6:	22ff      	movs	r2, #255	; 0xff
 80163f8:	21ff      	movs	r1, #255	; 0xff
 80163fa:	20ff      	movs	r0, #255	; 0xff
 80163fc:	f7fc ffba 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016400:	4603      	mov	r3, r0
 8016402:	2200      	movs	r2, #0
 8016404:	4619      	mov	r1, r3
 8016406:	4620      	mov	r0, r4
 8016408:	f7ff fb34 	bl	8015a74 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    RlIndex.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8016412:	22ff      	movs	r2, #255	; 0xff
 8016414:	21ff      	movs	r1, #255	; 0xff
 8016416:	20ff      	movs	r0, #255	; 0xff
 8016418:	f7fc ffac 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801641c:	4603      	mov	r3, r0
 801641e:	2200      	movs	r2, #0
 8016420:	4619      	mov	r1, r3
 8016422:	4620      	mov	r0, r4
 8016424:	f7ff fb3e 	bl	8015aa4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    RlIndex.setAction(buttonCallback);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f503 7254 	add.w	r2, r3, #848	; 0x350
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8016434:	4619      	mov	r1, r3
 8016436:	4610      	mov	r0, r2
 8016438:	f7ff fa44 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    FlIndex.setXY(222, 196);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8016442:	22c4      	movs	r2, #196	; 0xc4
 8016444:	21de      	movs	r1, #222	; 0xde
 8016446:	4618      	mov	r0, r3
 8016448:	f7fc f844 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    FlIndex.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_SMALL_PRESSED_ID));
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8016452:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016456:	2100      	movs	r1, #0
 8016458:	4618      	mov	r0, r3
 801645a:	f7fb ffbe 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 801645e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016462:	2101      	movs	r1, #1
 8016464:	4618      	mov	r0, r3
 8016466:	f7fb ffb8 	bl	80123da <_ZN8touchgfx6BitmapC1Et>
 801646a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801646e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016472:	4619      	mov	r1, r3
 8016474:	4620      	mov	r0, r4
 8016476:	f007 fb91 	bl	801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    FlIndex.setLabelText(touchgfx::TypedText(T_SINGLEUSEID119));
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8016480:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016484:	2153      	movs	r1, #83	; 0x53
 8016486:	4618      	mov	r0, r3
 8016488:	f7fc fa64 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801648c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8016490:	4620      	mov	r0, r4
 8016492:	f7ff fae0 	bl	8015a56 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    FlIndex.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f503 7466 	add.w	r4, r3, #920	; 0x398
 801649c:	22ff      	movs	r2, #255	; 0xff
 801649e:	21ff      	movs	r1, #255	; 0xff
 80164a0:	20ff      	movs	r0, #255	; 0xff
 80164a2:	f7fc ff67 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2200      	movs	r2, #0
 80164aa:	4619      	mov	r1, r3
 80164ac:	4620      	mov	r0, r4
 80164ae:	f7ff fae1 	bl	8015a74 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    FlIndex.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f503 7466 	add.w	r4, r3, #920	; 0x398
 80164b8:	22ff      	movs	r2, #255	; 0xff
 80164ba:	21ff      	movs	r1, #255	; 0xff
 80164bc:	20ff      	movs	r0, #255	; 0xff
 80164be:	f7fc ff59 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2200      	movs	r2, #0
 80164c6:	4619      	mov	r1, r3
 80164c8:	4620      	mov	r0, r4
 80164ca:	f7ff faeb 	bl	8015aa4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    FlIndex.setAction(buttonCallback);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f503 7266 	add.w	r2, r3, #920	; 0x398
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80164da:	4619      	mov	r1, r3
 80164dc:	4610      	mov	r0, r2
 80164de:	f7ff f9f1 	bl	80158c4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    FrIndexValue.setXY(367, 25);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80164e8:	2219      	movs	r2, #25
 80164ea:	f240 116f 	movw	r1, #367	; 0x16f
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fb fff0 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    FrIndexValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 221, 3));
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f503 7478 	add.w	r4, r3, #992	; 0x3e0
 80164fa:	2203      	movs	r2, #3
 80164fc:	21dd      	movs	r1, #221	; 0xdd
 80164fe:	20ff      	movs	r0, #255	; 0xff
 8016500:	f7fc ff38 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016504:	4603      	mov	r3, r0
 8016506:	4619      	mov	r1, r3
 8016508:	4620      	mov	r0, r4
 801650a:	e001      	b.n	8016510 <_ZN20SecondScreenViewBaseC1Ev+0x774>
 801650c:	0802c954 	.word	0x0802c954
 8016510:	f7fc fa89 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FrIndexValue.setLinespacing(0);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801651a:	2100      	movs	r1, #0
 801651c:	4618      	mov	r0, r3
 801651e:	f7fc fad5 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FrIndexValueBuffer, FRINDEXVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID121).getText());
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f203 5484 	addw	r4, r3, #1412	; 0x584
 8016528:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801652c:	2155      	movs	r1, #85	; 0x55
 801652e:	4618      	mov	r0, r3
 8016530:	f7fc fa10 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8016534:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016538:	4618      	mov	r0, r3
 801653a:	f7fc fa1b 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801653e:	4603      	mov	r3, r0
 8016540:	4adc      	ldr	r2, [pc, #880]	; (80168b4 <_ZN20SecondScreenViewBaseC1Ev+0xb18>)
 8016542:	2102      	movs	r1, #2
 8016544:	4620      	mov	r0, r4
 8016546:	f00a ff25 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FrIndexValue.setWildcard(FrIndexValueBuffer);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8016556:	4619      	mov	r1, r3
 8016558:	4610      	mov	r0, r2
 801655a:	f7fc fb3f 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FrIndexValue.resizeToCurrentText();
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8016564:	4618      	mov	r0, r3
 8016566:	f007 f8e1 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    FrIndexValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID120));
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f503 7478 	add.w	r4, r3, #992	; 0x3e0
 8016570:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016574:	2154      	movs	r1, #84	; 0x54
 8016576:	4618      	mov	r0, r3
 8016578:	f7fc f9ec 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801657c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8016580:	4620      	mov	r0, r4
 8016582:	f007 f8fd 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RrIndexValue.setXY(367, 85);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801658c:	2255      	movs	r2, #85	; 0x55
 801658e:	f240 116f 	movw	r1, #367	; 0x16f
 8016592:	4618      	mov	r0, r3
 8016594:	f7fb ff9e 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    RrIndexValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 221, 3));
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f503 6483 	add.w	r4, r3, #1048	; 0x418
 801659e:	2203      	movs	r2, #3
 80165a0:	21dd      	movs	r1, #221	; 0xdd
 80165a2:	20ff      	movs	r0, #255	; 0xff
 80165a4:	f7fc fee6 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80165a8:	4603      	mov	r3, r0
 80165aa:	4619      	mov	r1, r3
 80165ac:	4620      	mov	r0, r4
 80165ae:	f7fc fa3a 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RrIndexValue.setLinespacing(0);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80165b8:	2100      	movs	r1, #0
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7fc fa86 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RrIndexValueBuffer, RRINDEXVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID123).getText());
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f503 64b1 	add.w	r4, r3, #1416	; 0x588
 80165c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80165ca:	2157      	movs	r1, #87	; 0x57
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7fc f9c1 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80165d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fc f9cc 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80165dc:	4603      	mov	r3, r0
 80165de:	4ab5      	ldr	r2, [pc, #724]	; (80168b4 <_ZN20SecondScreenViewBaseC1Ev+0xb18>)
 80165e0:	2102      	movs	r1, #2
 80165e2:	4620      	mov	r0, r4
 80165e4:	f00a fed6 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RrIndexValue.setWildcard(RrIndexValueBuffer);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80165f4:	4619      	mov	r1, r3
 80165f6:	4610      	mov	r0, r2
 80165f8:	f7fc faf0 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RrIndexValue.resizeToCurrentText();
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8016602:	4618      	mov	r0, r3
 8016604:	f007 f892 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    RrIndexValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID122));
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f503 6483 	add.w	r4, r3, #1048	; 0x418
 801660e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016612:	2156      	movs	r1, #86	; 0x56
 8016614:	4618      	mov	r0, r3
 8016616:	f7fc f99d 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801661a:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 801661e:	4620      	mov	r0, r4
 8016620:	f007 f8ae 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RlIndexValue.setXY(367, 149);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 801662a:	2295      	movs	r2, #149	; 0x95
 801662c:	f240 116f 	movw	r1, #367	; 0x16f
 8016630:	4618      	mov	r0, r3
 8016632:	f7fb ff4f 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    RlIndexValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 221, 3));
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 801663c:	2203      	movs	r2, #3
 801663e:	21dd      	movs	r1, #221	; 0xdd
 8016640:	20ff      	movs	r0, #255	; 0xff
 8016642:	f7fc fe97 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016646:	4603      	mov	r3, r0
 8016648:	4619      	mov	r1, r3
 801664a:	4620      	mov	r0, r4
 801664c:	f7fc f9eb 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RlIndexValue.setLinespacing(0);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8016656:	2100      	movs	r1, #0
 8016658:	4618      	mov	r0, r3
 801665a:	f7fc fa37 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RlIndexValueBuffer, RLINDEXVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID125).getText());
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f203 548c 	addw	r4, r3, #1420	; 0x58c
 8016664:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016668:	2159      	movs	r1, #89	; 0x59
 801666a:	4618      	mov	r0, r3
 801666c:	f7fc f972 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8016670:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016674:	4618      	mov	r0, r3
 8016676:	f7fc f97d 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801667a:	4603      	mov	r3, r0
 801667c:	4a8d      	ldr	r2, [pc, #564]	; (80168b4 <_ZN20SecondScreenViewBaseC1Ev+0xb18>)
 801667e:	2102      	movs	r1, #2
 8016680:	4620      	mov	r0, r4
 8016682:	f00a fe87 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RlIndexValue.setWildcard(RlIndexValueBuffer);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8016692:	4619      	mov	r1, r3
 8016694:	4610      	mov	r0, r2
 8016696:	f7fc faa1 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RlIndexValue.resizeToCurrentText();
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80166a0:	4618      	mov	r0, r3
 80166a2:	f007 f843 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    RlIndexValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID124));
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80166ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80166b0:	2158      	movs	r1, #88	; 0x58
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7fc f94e 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80166b8:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80166bc:	4620      	mov	r0, r4
 80166be:	f007 f85f 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FlIndexValue.setXY(367, 209);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80166c8:	22d1      	movs	r2, #209	; 0xd1
 80166ca:	f240 116f 	movw	r1, #367	; 0x16f
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7fb ff00 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
    FlIndexValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 221, 3));
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 80166da:	2203      	movs	r2, #3
 80166dc:	21dd      	movs	r1, #221	; 0xdd
 80166de:	20ff      	movs	r0, #255	; 0xff
 80166e0:	f7fc fe48 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80166e4:	4603      	mov	r3, r0
 80166e6:	4619      	mov	r1, r3
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7fc f99c 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FlIndexValue.setLinespacing(0);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80166f4:	2100      	movs	r1, #0
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7fc f9e8 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FlIndexValueBuffer, FLINDEXVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID127).getText());
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 8016702:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016706:	215b      	movs	r1, #91	; 0x5b
 8016708:	4618      	mov	r0, r3
 801670a:	f7fc f923 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 801670e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016712:	4618      	mov	r0, r3
 8016714:	f7fc f92e 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 8016718:	4603      	mov	r3, r0
 801671a:	4a66      	ldr	r2, [pc, #408]	; (80168b4 <_ZN20SecondScreenViewBaseC1Ev+0xb18>)
 801671c:	2102      	movs	r1, #2
 801671e:	4620      	mov	r0, r4
 8016720:	f00a fe38 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FlIndexValue.setWildcard(FlIndexValueBuffer);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8016730:	4619      	mov	r1, r3
 8016732:	4610      	mov	r0, r2
 8016734:	f7fc fa52 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FlIndexValue.resizeToCurrentText();
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 801673e:	4618      	mov	r0, r3
 8016740:	f006 fff4 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    FlIndexValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID126));
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 801674a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801674e:	215a      	movs	r1, #90	; 0x5a
 8016750:	4618      	mov	r0, r3
 8016752:	f7fc f8ff 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 8016756:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 801675a:	4620      	mov	r0, r4
 801675c:	f007 f810 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SliderIndexvalue.setPosition(427, 18, 16, 35);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f503 6098 	add.w	r0, r3, #1216	; 0x4c0
 8016766:	2323      	movs	r3, #35	; 0x23
 8016768:	9300      	str	r3, [sp, #0]
 801676a:	2310      	movs	r3, #16
 801676c:	2212      	movs	r2, #18
 801676e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8016772:	f7fa f901 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    SliderIndexvalue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 221, 3));
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f503 6498 	add.w	r4, r3, #1216	; 0x4c0
 801677c:	2203      	movs	r2, #3
 801677e:	21dd      	movs	r1, #221	; 0xdd
 8016780:	20ff      	movs	r0, #255	; 0xff
 8016782:	f7fc fdf7 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016786:	4603      	mov	r3, r0
 8016788:	4619      	mov	r1, r3
 801678a:	4620      	mov	r0, r4
 801678c:	f7fc f94b 	bl	8012a26 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SliderIndexvalue.setLinespacing(0);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8016796:	2100      	movs	r1, #0
 8016798:	4618      	mov	r0, r3
 801679a:	f7fc f997 	bl	8012acc <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(SliderIndexvalueBuffer, SLIDERINDEXVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID129).getText());
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f203 5494 	addw	r4, r3, #1428	; 0x594
 80167a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80167a8:	215d      	movs	r1, #93	; 0x5d
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7fc f8d2 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80167b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7fc f8dd 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 80167ba:	4603      	mov	r3, r0
 80167bc:	4a3d      	ldr	r2, [pc, #244]	; (80168b4 <_ZN20SecondScreenViewBaseC1Ev+0xb18>)
 80167be:	2102      	movs	r1, #2
 80167c0:	4620      	mov	r0, r4
 80167c2:	f00a fde7 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    SliderIndexvalue.setWildcard(SliderIndexvalueBuffer);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f203 5394 	addw	r3, r3, #1428	; 0x594
 80167d2:	4619      	mov	r1, r3
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7fc fa01 	bl	8012bdc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    SliderIndexvalue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID128));
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f503 6498 	add.w	r4, r3, #1216	; 0x4c0
 80167e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80167e4:	215c      	movs	r1, #92	; 0x5c
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7fc f8b4 	bl	8012954 <_ZN8touchgfx9TypedTextC1Et>
 80167ec:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80167f0:	4620      	mov	r0, r4
 80167f2:	f006 ffc5 	bl	801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	3340      	adds	r3, #64	; 0x40
 80167fc:	4619      	mov	r1, r3
 80167fe:	4610      	mov	r0, r2
 8016800:	f7fb fff0 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 8016804:	687a      	ldr	r2, [r7, #4]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	3370      	adds	r3, #112	; 0x70
 801680a:	4619      	mov	r1, r3
 801680c:	4610      	mov	r0, r2
 801680e:	f7fb ffe9 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(nextErrorButton);
 8016812:	687a      	ldr	r2, [r7, #4]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	33e8      	adds	r3, #232	; 0xe8
 8016818:	4619      	mov	r1, r3
 801681a:	4610      	mov	r0, r2
 801681c:	f7fb ffe2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(clearErrorsBtn);
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016828:	4619      	mov	r1, r3
 801682a:	4610      	mov	r0, r2
 801682c:	f7fb ffda 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CheckEngCodeValue);
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016838:	4619      	mov	r1, r3
 801683a:	4610      	mov	r0, r2
 801683c:	f7fb ffd2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EngProtCodeValue);
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016848:	4619      	mov	r1, r3
 801684a:	4610      	mov	r0, r2
 801684c:	f7fb ffca 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpmsIndex);
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016858:	4619      	mov	r1, r3
 801685a:	4610      	mov	r0, r2
 801685c:	f7fb ffc2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FrIndex);
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8016868:	4619      	mov	r1, r3
 801686a:	4610      	mov	r0, r2
 801686c:	f7fb ffba 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RrIndex);
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8016878:	4619      	mov	r1, r3
 801687a:	4610      	mov	r0, r2
 801687c:	f7fb ffb2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RlIndex);
 8016880:	687a      	ldr	r2, [r7, #4]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016888:	4619      	mov	r1, r3
 801688a:	4610      	mov	r0, r2
 801688c:	f7fb ffaa 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FlIndex);
 8016890:	687a      	ldr	r2, [r7, #4]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8016898:	4619      	mov	r1, r3
 801689a:	4610      	mov	r0, r2
 801689c:	f7fb ffa2 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FrIndexValue);
 80168a0:	687a      	ldr	r2, [r7, #4]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80168a8:	4619      	mov	r1, r3
 80168aa:	4610      	mov	r0, r2
 80168ac:	f7fb ff9a 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RrIndexValue);
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	e001      	b.n	80168b8 <_ZN20SecondScreenViewBaseC1Ev+0xb1c>
 80168b4:	0802c954 	.word	0x0802c954
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80168be:	4619      	mov	r1, r3
 80168c0:	4610      	mov	r0, r2
 80168c2:	f7fb ff8f 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RlIndexValue);
 80168c6:	687a      	ldr	r2, [r7, #4]
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80168ce:	4619      	mov	r1, r3
 80168d0:	4610      	mov	r0, r2
 80168d2:	f7fb ff87 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FlIndexValue);
 80168d6:	687a      	ldr	r2, [r7, #4]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80168de:	4619      	mov	r1, r3
 80168e0:	4610      	mov	r0, r2
 80168e2:	f7fb ff7f 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SliderIndexvalue);
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80168ee:	4619      	mov	r1, r3
 80168f0:	4610      	mov	r0, r2
 80168f2:	f7fb ff77 	bl	80127e4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	4618      	mov	r0, r3
 80168fa:	37a8      	adds	r7, #168	; 0xa8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016902:	bf00      	nop

08016904 <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 8016904:	b480      	push	{r7}
 8016906:	b083      	sub	sp, #12
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]

}
 801690c:	bf00      	nop
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void SecondScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
    if (&src == &nextErrorButton)
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	33e8      	adds	r3, #232	; 0xe8
 8016926:	683a      	ldr	r2, [r7, #0]
 8016928:	429a      	cmp	r2, r3
 801692a:	d106      	bne.n	801693a <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //DisplayNextErrorInteraction
        //When nextErrorButton clicked call virtual function
        //Call nextError
        nextError();
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	332c      	adds	r3, #44	; 0x2c
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	4798      	blx	r3
        //flSetIndex
        //When FlIndex clicked call virtual function
        //Call flSetIndex
        flSetIndex();
    }
}
 8016938:	e03f      	b.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
    else if (&src == &clearErrorsBtn)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016940:	683a      	ldr	r2, [r7, #0]
 8016942:	429a      	cmp	r2, r3
 8016944:	d106      	bne.n	8016954 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        clearErrors();
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	3330      	adds	r3, #48	; 0x30
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	4798      	blx	r3
}
 8016952:	e032      	b.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
    else if (&src == &FrIndex)
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	429a      	cmp	r2, r3
 801695e:	d106      	bne.n	801696e <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        frSetIndex();
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	333c      	adds	r3, #60	; 0x3c
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	4798      	blx	r3
}
 801696c:	e025      	b.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
    else if (&src == &RrIndex)
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8016974:	683a      	ldr	r2, [r7, #0]
 8016976:	429a      	cmp	r2, r3
 8016978:	d106      	bne.n	8016988 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        rrSetIndex();
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	3340      	adds	r3, #64	; 0x40
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	4798      	blx	r3
}
 8016986:	e018      	b.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
    else if (&src == &RlIndex)
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801698e:	683a      	ldr	r2, [r7, #0]
 8016990:	429a      	cmp	r2, r3
 8016992:	d106      	bne.n	80169a2 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
        rlSetIndex();
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	3344      	adds	r3, #68	; 0x44
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	4798      	blx	r3
}
 80169a0:	e00b      	b.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
    else if (&src == &FlIndex)
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80169a8:	683a      	ldr	r2, [r7, #0]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d105      	bne.n	80169ba <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
        flSetIndex();
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	3348      	adds	r3, #72	; 0x48
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	4798      	blx	r3
}
 80169ba:	bf00      	nop
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b082      	sub	sp, #8
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	3370      	adds	r3, #112	; 0x70
 80169d0:	683a      	ldr	r2, [r7, #0]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d10c      	bne.n	80169f0 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
    {
        //MoveToMainScreenBtnInteraction
        //When ButtonGoToMainScreen clicked call virtual function
        //Call moveToMainScreen
        moveToMainScreen();
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	3334      	adds	r3, #52	; 0x34
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	4798      	blx	r3

        //MoveToMainScreenInteraction
        //When MoveToMainScreenBtnInteraction completed change screen to Main
        //Go to Main with screen transition towards West
        application().gotoMainScreenSlideTransitionWest();
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f7ff f9ce 	bl	8015d84 <_ZN20SecondScreenViewBase11applicationEv>
 80169e8:	4603      	mov	r3, r0
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7fa fa82 	bl	8010ef4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>
    }
}
 80169f0:	bf00      	nop
 80169f2:	3708      	adds	r7, #8
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <_ZN20SecondScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void SecondScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	607a      	str	r2, [r7, #4]
    if (&src == &TpmsIndex)
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016a0a:	68ba      	ldr	r2, [r7, #8]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d106      	bne.n	8016a1e <_ZN20SecondScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //tmpsIndexChangeInteraction
        //When TpmsIndex value changed call virtual function
        //Call tpmsIndexChanges
        tpmsIndexChanges(value);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	3338      	adds	r3, #56	; 0x38
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	6879      	ldr	r1, [r7, #4]
 8016a1a:	68f8      	ldr	r0, [r7, #12]
 8016a1c:	4798      	blx	r3
    }
}
 8016a1e:	bf00      	nop
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
	...

08016a28 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	4a08      	ldr	r2, [pc, #32]	; (8016a54 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	601a      	str	r2, [r3, #0]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	3334      	adds	r3, #52	; 0x34
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7fc fad6 	bl	8012fec <_ZN8touchgfx13BoxWithBorderD1Ev>
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7fe fe8c 	bl	8015760 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3708      	adds	r7, #8
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	0802d818 	.word	0x0802d818

08016a58 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7ff ffe1 	bl	8016a28 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8016a66:	2178      	movs	r1, #120	; 0x78
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f014 fc00 	bl	802b26e <_ZdlPvj>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4618      	mov	r0, r3
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <_ZN8touchgfx13ClickListenerINS_6SliderEED1Ev>:
    /**
     * @fn virtual ClickListener::~ClickListener()
     *
     * @brief Destructor.
     */
    virtual ~ClickListener() { }
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	4a05      	ldr	r2, [pc, #20]	; (8016a98 <_ZN8touchgfx13ClickListenerINS_6SliderEED1Ev+0x20>)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	601a      	str	r2, [r3, #0]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f004 fdc3 	bl	801b614 <_ZN8touchgfx6SliderD1Ev>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	4618      	mov	r0, r3
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	0802d750 	.word	0x0802d750

08016a9c <_ZN8touchgfx13ClickListenerINS_6SliderEED0Ev>:
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f7ff ffe7 	bl	8016a78 <_ZN8touchgfx13ClickListenerINS_6SliderEED1Ev>
 8016aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f014 fbdd 	bl	802b26e <_ZdlPvj>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	4a05      	ldr	r2, [pc, #20]	; (8016ae0 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	601a      	str	r2, [r3, #0]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7fe ff59 	bl	8015988 <_ZN8touchgfx6ButtonD1Ev>
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	0802fc74 	.word	0x0802fc74

08016ae4 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f7ff ffe7 	bl	8016ac0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8016af2:	2144      	movs	r1, #68	; 0x44
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f014 fbba 	bl	802b26e <_ZdlPvj>
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	4618      	mov	r0, r3
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>:
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	4a05      	ldr	r2, [pc, #20]	; (8016b24 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev+0x20>)
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	601a      	str	r2, [r3, #0]
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7ff ffd3 	bl	8016ac0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3708      	adds	r7, #8
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}
 8016b24:	0802d6e0 	.word	0x0802d6e0

08016b28 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED0Ev>:
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7ff ffe7 	bl	8016b04 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEED1Ev>
 8016b36:	2148      	movs	r1, #72	; 0x48
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f014 fb98 	bl	802b26e <_ZdlPvj>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	4618      	mov	r0, r3
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	4618      	mov	r0, r3
 8016b54:	f009 fb1e 	bl	8020194 <_ZN8touchgfx6ScreenC1Ev>
 8016b58:	4a05      	ldr	r2, [pc, #20]	; (8016b70 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	601a      	str	r2, [r3, #0]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2200      	movs	r2, #0
 8016b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	4618      	mov	r0, r3
 8016b68:	3708      	adds	r7, #8
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
 8016b6e:	bf00      	nop
 8016b70:	0802d8ac 	.word	0x0802d8ac

08016b74 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7fe fddc 	bl	801573c <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8016b84:	4a17      	ldr	r2, [pc, #92]	; (8016be4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	601a      	str	r2, [r3, #0]
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	3334      	adds	r3, #52	; 0x34
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fc fa06 	bl	8012fa0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	3368      	adds	r3, #104	; 0x68
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7fb fbbe 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	336c      	adds	r3, #108	; 0x6c
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7fb fbb9 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	3370      	adds	r3, #112	; 0x70
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7fb fbb4 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	3374      	adds	r3, #116	; 0x74
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7fb fbaf 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	3334      	adds	r3, #52	; 0x34
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7fb fc85 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	3334      	adds	r3, #52	; 0x34
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	4610      	mov	r0, r2
 8016bd4:	f004 fbea 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	0802d818 	.word	0x0802d818

08016be8 <_ZN8touchgfx13ClickListenerINS_6SliderEEC1Ev>:
    ClickListener() : T(), clickAction(0)
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f004 ff50 	bl	801ba98 <_ZN8touchgfx6SliderC1Ev>
 8016bf8:	4a08      	ldr	r2, [pc, #32]	; (8016c1c <_ZN8touchgfx13ClickListenerINS_6SliderEEC1Ev+0x34>)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	601a      	str	r2, [r3, #0]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2200      	movs	r2, #0
 8016c02:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        T::setTouchable(true);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2101      	movs	r1, #1
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7fb fce3 	bl	80125d6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	4618      	mov	r0, r3
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	0802d750 	.word	0x0802d750

08016c20 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev>:
    ClickListener() : T(), clickAction(0)
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f007 fab4 	bl	801e198 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8016c30:	4a07      	ldr	r2, [pc, #28]	; (8016c50 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEEC1Ev+0x30>)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	601a      	str	r2, [r3, #0]
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	645a      	str	r2, [r3, #68]	; 0x44
        T::setTouchable(true);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2101      	movs	r1, #1
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7fb fcc8 	bl	80125d6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	0802d6e0 	.word	0x0802d6e0

08016c54 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8016c54:	b480      	push	{r7}
 8016c56:	b083      	sub	sp, #12
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	4a04      	ldr	r2, [pc, #16]	; (8016c70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	601a      	str	r2, [r3, #0]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	4618      	mov	r0, r3
 8016c66:	370c      	adds	r7, #12
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6e:	4770      	bx	lr
 8016c70:	0802d8f8 	.word	0x0802d8f8

08016c74 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	60b9      	str	r1, [r7, #8]
 8016c7e:	4639      	mov	r1, r7
 8016c80:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7ff ffe4 	bl	8016c54 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8016c8c:	4a08      	ldr	r2, [pc, #32]	; (8016cb0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	68ba      	ldr	r2, [r7, #8]
 8016c96:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	3308      	adds	r3, #8
 8016c9c:	463a      	mov	r2, r7
 8016c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ca2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3710      	adds	r7, #16
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	0802d6c8 	.word	0x0802d6c8

08016cb4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	4639      	mov	r1, r7
 8016cc0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7fe fb1e 	bl	8015308 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8016ccc:	4a08      	ldr	r2, [pc, #32]	; (8016cf0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	68ba      	ldr	r2, [r7, #8]
 8016cd6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	3308      	adds	r3, #8
 8016cdc:	463a      	mov	r2, r7
 8016cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ce2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3710      	adds	r7, #16
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}
 8016cf0:	0802d6b0 	.word	0x0802d6b0

08016cf4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8016cf4:	b480      	push	{r7}
 8016cf6:	b083      	sub	sp, #12
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	4a04      	ldr	r2, [pc, #16]	; (8016d10 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4618      	mov	r0, r3
 8016d06:	370c      	adds	r7, #12
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr
 8016d10:	0802d8e0 	.word	0x0802d8e0

08016d14 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	60f8      	str	r0, [r7, #12]
 8016d1c:	60b9      	str	r1, [r7, #8]
 8016d1e:	4639      	mov	r1, r7
 8016d20:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff ffe4 	bl	8016cf4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8016d2c:	4a08      	ldr	r2, [pc, #32]	; (8016d50 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	68ba      	ldr	r2, [r7, #8]
 8016d36:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	3308      	adds	r3, #8
 8016d3c:	463a      	mov	r2, r7
 8016d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	0802d698 	.word	0x0802d698

08016d54 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8016d54:	b590      	push	{r4, r7, lr}
 8016d56:	b087      	sub	sp, #28
 8016d58:	af02      	add	r7, sp, #8
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	4608      	mov	r0, r1
 8016d5e:	4611      	mov	r1, r2
 8016d60:	461a      	mov	r2, r3
 8016d62:	4603      	mov	r3, r0
 8016d64:	817b      	strh	r3, [r7, #10]
 8016d66:	460b      	mov	r3, r1
 8016d68:	813b      	strh	r3, [r7, #8]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8016d74:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8016d78:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016d7c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8016d80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d84:	9300      	str	r3, [sp, #0]
 8016d86:	4623      	mov	r3, r4
 8016d88:	f7f9 fdf6 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8016d8c:	bf00      	nop
 8016d8e:	3714      	adds	r7, #20
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd90      	pop	{r4, r7, pc}

08016d94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b082      	sub	sp, #8
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	3334      	adds	r3, #52	; 0x34
 8016da4:	78fa      	ldrb	r2, [r7, #3]
 8016da6:	4611      	mov	r1, r2
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fc f95d 	bl	8013068 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8016dae:	bf00      	nop
 8016db0:	3708      	adds	r7, #8
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b084      	sub	sp, #16
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	60f8      	str	r0, [r7, #12]
 8016dbe:	60b9      	str	r1, [r7, #8]
 8016dc0:	607a      	str	r2, [r7, #4]
 8016dc2:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	68ba      	ldr	r2, [r7, #8]
 8016dc8:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	683a      	ldr	r2, [r7, #0]
 8016dd4:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	69ba      	ldr	r2, [r7, #24]
 8016dda:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	3384      	adds	r3, #132	; 0x84
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	68f8      	ldr	r0, [r7, #12]
 8016de6:	4798      	blx	r3
    }
 8016de8:	bf00      	nop
 8016dea:	3710      	adds	r7, #16
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8016df0:	b480      	push	{r7}
 8016df2:	b083      	sub	sp, #12
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
    }
 8016df8:	4a04      	ldr	r2, [pc, #16]	; (8016e0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	601a      	str	r2, [r3, #0]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	4618      	mov	r0, r3
 8016e02:	370c      	adds	r7, #12
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr
 8016e0c:	0802d8f8 	.word	0x0802d8f8

08016e10 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
    }
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f7ff ffe9 	bl	8016df0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016e1e:	2104      	movs	r1, #4
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f014 fa24 	bl	802b26e <_ZdlPvj>
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8016e30:	b480      	push	{r7}
 8016e32:	b083      	sub	sp, #12
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
    }
 8016e38:	4a04      	ldr	r2, [pc, #16]	; (8016e4c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	601a      	str	r2, [r3, #0]
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	4618      	mov	r0, r3
 8016e42:	370c      	adds	r7, #12
 8016e44:	46bd      	mov	sp, r7
 8016e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4a:	4770      	bx	lr
 8016e4c:	0802d8e0 	.word	0x0802d8e0

08016e50 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
    }
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f7ff ffe9 	bl	8016e30 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8016e5e:	2104      	movs	r1, #4
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f014 fa04 	bl	802b26e <_ZdlPvj>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3708      	adds	r7, #8
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}

08016e70 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8016e70:	b590      	push	{r4, r7, lr}
 8016e72:	b083      	sub	sp, #12
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7fb ffb5 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d002      	beq.n	8016e92 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	336c      	adds	r3, #108	; 0x6c
 8016e90:	e001      	b.n	8016e96 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	3368      	adds	r3, #104	; 0x68
 8016e96:	6819      	ldr	r1, [r3, #0]
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f7fc f8c9 	bl	8013030 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fb ffa2 	bl	8012df0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d002      	beq.n	8016eb8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	3374      	adds	r3, #116	; 0x74
 8016eb6:	e001      	b.n	8016ebc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	3370      	adds	r3, #112	; 0x70
 8016ebc:	6819      	ldr	r1, [r3, #0]
 8016ebe:	4620      	mov	r0, r4
 8016ec0:	f7fc f8c4 	bl	801304c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7fb ffce 	bl	8012e68 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8016ecc:	bf00      	nop
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd90      	pop	{r4, r7, pc}

08016ed4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b082      	sub	sp, #8
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	4a05      	ldr	r2, [pc, #20]	; (8016ef4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	601a      	str	r2, [r3, #0]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7ff ffa3 	bl	8016e30 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	4618      	mov	r0, r3
 8016eee:	3708      	adds	r7, #8
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	0802d698 	.word	0x0802d698

08016ef8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivED0Ev>:
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b082      	sub	sp, #8
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f7ff ffe7 	bl	8016ed4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivED1Ev>
 8016f06:	2110      	movs	r1, #16
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f014 f9b0 	bl	802b26e <_ZdlPvj>
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	4618      	mov	r0, r3
 8016f12:	3708      	adds	r7, #8
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	4a05      	ldr	r2, [pc, #20]	; (8016f38 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	601a      	str	r2, [r3, #0]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7fe facf 	bl	80154cc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	4618      	mov	r0, r3
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	0802d6b0 	.word	0x0802d6b0

08016f3c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b082      	sub	sp, #8
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f7ff ffe7 	bl	8016f18 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8016f4a:	2110      	movs	r1, #16
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f014 f98e 	bl	802b26e <_ZdlPvj>
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	4618      	mov	r0, r3
 8016f56:	3708      	adds	r7, #8
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}

08016f5c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	4a05      	ldr	r2, [pc, #20]	; (8016f7c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	601a      	str	r2, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7ff ff3f 	bl	8016df0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	4618      	mov	r0, r3
 8016f76:	3708      	adds	r7, #8
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	0802d6c8 	.word	0x0802d6c8

08016f80 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f7ff ffe7 	bl	8016f5c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8016f8e:	2110      	movs	r1, #16
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f014 f96c 	bl	802b26e <_ZdlPvj>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3708      	adds	r7, #8
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b084      	sub	sp, #16
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	68fa      	ldr	r2, [r7, #12]
 8016fb2:	68d2      	ldr	r2, [r2, #12]
 8016fb4:	1052      	asrs	r2, r2, #1
 8016fb6:	1898      	adds	r0, r3, r2
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	68db      	ldr	r3, [r3, #12]
 8016fbc:	f003 0301 	and.w	r3, r3, #1
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d102      	bne.n	8016fca <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	e00a      	b.n	8016fe0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	68fa      	ldr	r2, [r7, #12]
 8016fd0:	68d2      	ldr	r2, [r2, #12]
 8016fd2:	1052      	asrs	r2, r2, #1
 8016fd4:	4413      	add	r3, r2
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	68fa      	ldr	r2, [r7, #12]
 8016fda:	6892      	ldr	r2, [r2, #8]
 8016fdc:	4413      	add	r3, r2
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	68b9      	ldr	r1, [r7, #8]
 8016fe4:	4798      	blx	r3
    }
 8016fe6:	bf00      	nop
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}

08016fee <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8016fee:	b480      	push	{r7}
 8016ff0:	b083      	sub	sp, #12
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d010      	beq.n	8017020 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d107      	bne.n	8017016 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	68db      	ldr	r3, [r3, #12]
 801700a:	f003 0301 	and.w	r3, r3, #1
 801700e:	2b00      	cmp	r3, #0
 8017010:	d101      	bne.n	8017016 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8017012:	2301      	movs	r3, #1
 8017014:	e000      	b.n	8017018 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8017016:	2300      	movs	r3, #0
 8017018:	2b01      	cmp	r3, #1
 801701a:	d001      	beq.n	8017020 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 801701c:	2301      	movs	r3, #1
 801701e:	e000      	b.n	8017022 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8017020:	2300      	movs	r3, #0
    }
 8017022:	4618      	mov	r0, r3
 8017024:	370c      	adds	r7, #12
 8017026:	46bd      	mov	sp, r7
 8017028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702c:	4770      	bx	lr

0801702e <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801702e:	b580      	push	{r7, lr}
 8017030:	b082      	sub	sp, #8
 8017032:	af00      	add	r7, sp, #0
 8017034:	6078      	str	r0, [r7, #4]
 8017036:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	687a      	ldr	r2, [r7, #4]
 801703e:	68d2      	ldr	r2, [r2, #12]
 8017040:	1052      	asrs	r2, r2, #1
 8017042:	1898      	adds	r0, r3, r2
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	f003 0301 	and.w	r3, r3, #1
 801704c:	2b00      	cmp	r3, #0
 801704e:	d102      	bne.n	8017056 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	689b      	ldr	r3, [r3, #8]
 8017054:	e00a      	b.n	801706c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	687a      	ldr	r2, [r7, #4]
 801705c:	68d2      	ldr	r2, [r2, #12]
 801705e:	1052      	asrs	r2, r2, #1
 8017060:	4413      	add	r3, r2
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	6892      	ldr	r2, [r2, #8]
 8017068:	4413      	add	r3, r2
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	6839      	ldr	r1, [r7, #0]
 801706e:	4798      	blx	r3
    }
 8017070:	bf00      	nop
 8017072:	3708      	adds	r7, #8
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8017078:	b480      	push	{r7}
 801707a:	b083      	sub	sp, #12
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	685b      	ldr	r3, [r3, #4]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d010      	beq.n	80170aa <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	689b      	ldr	r3, [r3, #8]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d107      	bne.n	80170a0 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	f003 0301 	and.w	r3, r3, #1
 8017098:	2b00      	cmp	r3, #0
 801709a:	d101      	bne.n	80170a0 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801709c:	2301      	movs	r3, #1
 801709e:	e000      	b.n	80170a2 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80170a0:	2300      	movs	r3, #0
 80170a2:	2b01      	cmp	r3, #1
 80170a4:	d001      	beq.n	80170aa <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80170a6:	2301      	movs	r3, #1
 80170a8:	e000      	b.n	80170ac <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80170aa:	2300      	movs	r3, #0
    }
 80170ac:	4618      	mov	r0, r3
 80170ae:	370c      	adds	r7, #12
 80170b0:	46bd      	mov	sp, r7
 80170b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b6:	4770      	bx	lr

080170b8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	687a      	ldr	r2, [r7, #4]
 80170c8:	68d2      	ldr	r2, [r2, #12]
 80170ca:	1052      	asrs	r2, r2, #1
 80170cc:	1898      	adds	r0, r3, r2
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	f003 0301 	and.w	r3, r3, #1
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d102      	bne.n	80170e0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	689b      	ldr	r3, [r3, #8]
 80170de:	e00a      	b.n	80170f6 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	687a      	ldr	r2, [r7, #4]
 80170e6:	68d2      	ldr	r2, [r2, #12]
 80170e8:	1052      	asrs	r2, r2, #1
 80170ea:	4413      	add	r3, r2
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	6892      	ldr	r2, [r2, #8]
 80170f2:	4413      	add	r3, r2
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	6839      	ldr	r1, [r7, #0]
 80170f8:	4798      	blx	r3
    }
 80170fa:	bf00      	nop
 80170fc:	3708      	adds	r7, #8
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8017102:	b480      	push	{r7}
 8017104:	b083      	sub	sp, #12
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d010      	beq.n	8017134 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	689b      	ldr	r3, [r3, #8]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d107      	bne.n	801712a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	68db      	ldr	r3, [r3, #12]
 801711e:	f003 0301 	and.w	r3, r3, #1
 8017122:	2b00      	cmp	r3, #0
 8017124:	d101      	bne.n	801712a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8017126:	2301      	movs	r3, #1
 8017128:	e000      	b.n	801712c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801712a:	2300      	movs	r3, #0
 801712c:	2b01      	cmp	r3, #1
 801712e:	d001      	beq.n	8017134 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8017130:	2301      	movs	r3, #1
 8017132:	e000      	b.n	8017136 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8017134:	2300      	movs	r3, #0
    }
 8017136:	4618      	mov	r0, r3
 8017138:	370c      	adds	r7, #12
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	4770      	bx	lr

08017142 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEE16handleClickEventERKNS_10ClickEventE>:
     *
     * @param event Information about the click.
     *
     * @see Drawable::handleClickEvent()
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8017142:	b580      	push	{r7, lr}
 8017144:	b082      	sub	sp, #8
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
 801714a:	6039      	str	r1, [r7, #0]
    {
        T::handleClickEvent(event);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6839      	ldr	r1, [r7, #0]
 8017150:	4618      	mov	r0, r3
 8017152:	f006 f944 	bl	801d3de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00d      	beq.n	801717a <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEE16handleClickEventERKNS_10ClickEventE+0x38>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	330c      	adds	r3, #12
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	4610      	mov	r0, r2
 801716e:	4798      	blx	r3
 8017170:	4603      	mov	r3, r0
 8017172:	2b00      	cmp	r3, #0
 8017174:	d001      	beq.n	801717a <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEE16handleClickEventERKNS_10ClickEventE+0x38>
 8017176:	2301      	movs	r3, #1
 8017178:	e000      	b.n	801717c <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEE16handleClickEventERKNS_10ClickEventE+0x3a>
 801717a:	2300      	movs	r3, #0
 801717c:	2b00      	cmp	r3, #0
 801717e:	d009      	beq.n	8017194 <_ZN8touchgfx13ClickListenerINS_15ButtonWithLabelEE16handleClickEventERKNS_10ClickEventE+0x52>
        {
            clickAction->execute(*this, event);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	3308      	adds	r3, #8
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	6879      	ldr	r1, [r7, #4]
 8017190:	683a      	ldr	r2, [r7, #0]
 8017192:	4798      	blx	r3
        }
    }
 8017194:	bf00      	nop
 8017196:	3708      	adds	r7, #8
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <_ZN8touchgfx13ClickListenerINS_6SliderEE16handleClickEventERKNS_10ClickEventE>:
    virtual void handleClickEvent(const ClickEvent& event)
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	6039      	str	r1, [r7, #0]
        T::handleClickEvent(event);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6839      	ldr	r1, [r7, #0]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f004 fc1e 	bl	801b9ec <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d00f      	beq.n	80171da <_ZN8touchgfx13ClickListenerINS_6SliderEE16handleClickEventERKNS_10ClickEventE+0x3e>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	330c      	adds	r3, #12
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	4610      	mov	r0, r2
 80171ce:	4798      	blx	r3
 80171d0:	4603      	mov	r3, r0
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d001      	beq.n	80171da <_ZN8touchgfx13ClickListenerINS_6SliderEE16handleClickEventERKNS_10ClickEventE+0x3e>
 80171d6:	2301      	movs	r3, #1
 80171d8:	e000      	b.n	80171dc <_ZN8touchgfx13ClickListenerINS_6SliderEE16handleClickEventERKNS_10ClickEventE+0x40>
 80171da:	2300      	movs	r3, #0
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00b      	beq.n	80171f8 <_ZN8touchgfx13ClickListenerINS_6SliderEE16handleClickEventERKNS_10ClickEventE+0x5c>
            clickAction->execute(*this, event);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	3308      	adds	r3, #8
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	6879      	ldr	r1, [r7, #4]
 80171f4:	683a      	ldr	r2, [r7, #0]
 80171f6:	4798      	blx	r3
    }
 80171f8:	bf00      	nop
 80171fa:	3708      	adds	r7, #8
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8017200:	b590      	push	{r4, r7, lr}
 8017202:	b083      	sub	sp, #12
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	4618      	mov	r0, r3
 8017212:	f7fb fe0e 	bl	8012e32 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8017216:	4603      	mov	r3, r0
 8017218:	4619      	mov	r1, r3
 801721a:	4620      	mov	r0, r4
 801721c:	f7fb ff34 	bl	8013088 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	4618      	mov	r0, r3
 8017224:	f7fb fe2a 	bl	8012e7c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8017228:	bf00      	nop
 801722a:	370c      	adds	r7, #12
 801722c:	46bd      	mov	sp, r7
 801722e:	bd90      	pop	{r4, r7, pc}

08017230 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8017230:	b480      	push	{r7}
 8017232:	af00      	add	r7, sp, #0
    return bitmap_database;
 8017234:	4b02      	ldr	r3, [pc, #8]	; (8017240 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8017236:	4618      	mov	r0, r3
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr
 8017240:	0802d99c 	.word	0x0802d99c

08017244 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8017244:	b480      	push	{r7}
 8017246:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8017248:	230a      	movs	r3, #10
}
 801724a:	4618      	mov	r0, r3
 801724c:	46bd      	mov	sp, r7
 801724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017252:	4770      	bx	lr

08017254 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	4613      	mov	r3, r2
 8017260:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8017262:	4a07      	ldr	r2, [pc, #28]	; (8017280 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	6013      	str	r3, [r2, #0]
        fonts = f;
 8017268:	4a06      	ldr	r2, [pc, #24]	; (8017284 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801726e:	4a06      	ldr	r2, [pc, #24]	; (8017288 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8017270:	88fb      	ldrh	r3, [r7, #6]
 8017272:	8013      	strh	r3, [r2, #0]
    }
 8017274:	bf00      	nop
 8017276:	3714      	adds	r7, #20
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr
 8017280:	2000c060 	.word	0x2000c060
 8017284:	2000c068 	.word	0x2000c068
 8017288:	2000c064 	.word	0x2000c064

0801728c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801728c:	b590      	push	{r4, r7, lr}
 801728e:	b085      	sub	sp, #20
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8017296:	2300      	movs	r3, #0
 8017298:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801729a:	88fb      	ldrh	r3, [r7, #6]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d127      	bne.n	80172f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80172a0:	88fb      	ldrh	r3, [r7, #6]
 80172a2:	4a1e      	ldr	r2, [pc, #120]	; (801731c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80172a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d016      	beq.n	80172da <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80172ac:	88fb      	ldrh	r3, [r7, #6]
 80172ae:	4a1b      	ldr	r2, [pc, #108]	; (801731c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80172b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172b4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	68ba      	ldr	r2, [r7, #8]
 80172bc:	4413      	add	r3, r2
 80172be:	4a18      	ldr	r2, [pc, #96]	; (8017320 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80172c0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	685b      	ldr	r3, [r3, #4]
 80172c6:	68ba      	ldr	r2, [r7, #8]
 80172c8:	4413      	add	r3, r2
 80172ca:	4a16      	ldr	r2, [pc, #88]	; (8017324 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80172cc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	689b      	ldr	r3, [r3, #8]
 80172d2:	68ba      	ldr	r2, [r7, #8]
 80172d4:	4413      	add	r3, r2
 80172d6:	60fb      	str	r3, [r7, #12]
 80172d8:	e00a      	b.n	80172f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80172da:	4b11      	ldr	r3, [pc, #68]	; (8017320 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80172dc:	4a12      	ldr	r2, [pc, #72]	; (8017328 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80172de:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80172e0:	4a12      	ldr	r2, [pc, #72]	; (801732c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80172e2:	4b10      	ldr	r3, [pc, #64]	; (8017324 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80172e4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80172e6:	88fb      	ldrh	r3, [r7, #6]
 80172e8:	4a11      	ldr	r2, [pc, #68]	; (8017330 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80172ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172ee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d00d      	beq.n	8017312 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80172f6:	4a0f      	ldr	r2, [pc, #60]	; (8017334 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80172f8:	88fb      	ldrh	r3, [r7, #6]
 80172fa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80172fc:	f000 f83e 	bl	801737c <_ZN17TypedTextDatabase8getFontsEv>
 8017300:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8017302:	f000 f833 	bl	801736c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8017306:	4603      	mov	r3, r0
 8017308:	461a      	mov	r2, r3
 801730a:	4621      	mov	r1, r4
 801730c:	68f8      	ldr	r0, [r7, #12]
 801730e:	f7ff ffa1 	bl	8017254 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8017312:	bf00      	nop
 8017314:	3714      	adds	r7, #20
 8017316:	46bd      	mov	sp, r7
 8017318:	bd90      	pop	{r4, r7, pc}
 801731a:	bf00      	nop
 801731c:	200086f4 	.word	0x200086f4
 8017320:	200086fc 	.word	0x200086fc
 8017324:	20008700 	.word	0x20008700
 8017328:	08087e34 	.word	0x08087e34
 801732c:	08087cbc 	.word	0x08087cbc
 8017330:	080882a8 	.word	0x080882a8
 8017334:	200086f8 	.word	0x200086f8

08017338 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8017338:	b480      	push	{r7}
 801733a:	b083      	sub	sp, #12
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	460b      	mov	r3, r1
 8017342:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8017344:	4b07      	ldr	r3, [pc, #28]	; (8017364 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	4b07      	ldr	r3, [pc, #28]	; (8017368 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801734a:	6819      	ldr	r1, [r3, #0]
 801734c:	887b      	ldrh	r3, [r7, #2]
 801734e:	009b      	lsls	r3, r3, #2
 8017350:	440b      	add	r3, r1
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	005b      	lsls	r3, r3, #1
 8017356:	4413      	add	r3, r2
}
 8017358:	4618      	mov	r0, r3
 801735a:	370c      	adds	r7, #12
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr
 8017364:	200086fc 	.word	0x200086fc
 8017368:	20008700 	.word	0x20008700

0801736c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801736c:	b480      	push	{r7}
 801736e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8017370:	235e      	movs	r3, #94	; 0x5e
}
 8017372:	4618      	mov	r0, r3
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr

0801737c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801737c:	b480      	push	{r7}
 801737e:	af00      	add	r7, sp, #0
    return _fonts;
 8017380:	4b02      	ldr	r3, [pc, #8]	; (801738c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8017382:	4618      	mov	r0, r3
 8017384:	46bd      	mov	sp, r7
 8017386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738a:	4770      	bx	lr
 801738c:	20008704 	.word	0x20008704

08017390 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8017390:	b580      	push	{r7, lr}
 8017392:	b082      	sub	sp, #8
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
 8017398:	6039      	str	r1, [r7, #0]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2b01      	cmp	r3, #1
 801739e:	d127      	bne.n	80173f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d122      	bne.n	80173f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80173aa:	f7f9 f8a7 	bl	80104fc <_Z25getFont_Asap_Bold_18_4bppv>
 80173ae:	4602      	mov	r2, r0
};
 80173b0:	4b11      	ldr	r3, [pc, #68]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173b2:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80173b4:	f7f9 f968 	bl	8010688 <_Z25getFont_Asap_Bold_40_4bppv>
 80173b8:	4602      	mov	r2, r0
};
 80173ba:	4b0f      	ldr	r3, [pc, #60]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173bc:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80173be:	f7f9 f921 	bl	8010604 <_Z25getFont_Asap_Bold_30_4bppv>
 80173c2:	4602      	mov	r2, r0
};
 80173c4:	4b0c      	ldr	r3, [pc, #48]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173c6:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80173c8:	f7f9 f856 	bl	8010478 <_Z25getFont_Asap_Bold_12_4bppv>
 80173cc:	4602      	mov	r2, r0
};
 80173ce:	4b0a      	ldr	r3, [pc, #40]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173d0:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80173d2:	f7f9 f99b 	bl	801070c <_Z25getFont_Asap_Bold_60_4bppv>
 80173d6:	4602      	mov	r2, r0
};
 80173d8:	4b07      	ldr	r3, [pc, #28]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173da:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80173dc:	f7f9 f8d0 	bl	8010580 <_Z25getFont_Asap_Bold_21_4bppv>
 80173e0:	4602      	mov	r2, r0
};
 80173e2:	4b05      	ldr	r3, [pc, #20]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173e4:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80173e6:	f7f9 f805 	bl	80103f4 <_Z25getFont_Asap_Bold_10_4bppv>
 80173ea:	4602      	mov	r2, r0
};
 80173ec:	4b02      	ldr	r3, [pc, #8]	; (80173f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80173ee:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 80173f0:	bf00      	nop
 80173f2:	3708      	adds	r7, #8
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	20008704 	.word	0x20008704

080173fc <_GLOBAL__sub_I__fonts>:
 80173fc:	b580      	push	{r7, lr}
 80173fe:	af00      	add	r7, sp, #0
 8017400:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017404:	2001      	movs	r0, #1
 8017406:	f7ff ffc3 	bl	8017390 <_Z41__static_initialization_and_destruction_0ii>
 801740a:	bd80      	pop	{r7, pc}

0801740c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	4a05      	ldr	r2, [pc, #20]	; (801742c <_ZN19FrontendApplicationD1Ev+0x20>)
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	601a      	str	r2, [r3, #0]
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	4618      	mov	r0, r3
 801741e:	f7f9 fc4d 	bl	8010cbc <_ZN23FrontendApplicationBaseD1Ev>
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	4618      	mov	r0, r3
 8017426:	3708      	adds	r7, #8
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	0802da6c 	.word	0x0802da6c

08017430 <_ZN19FrontendApplicationD0Ev>:
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7ff ffe7 	bl	801740c <_ZN19FrontendApplicationD1Ev>
 801743e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f013 ff13 	bl	802b26e <_ZdlPvj>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	4618      	mov	r0, r3
 801744c:	3708      	adds	r7, #8
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}

08017452 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8017452:	b580      	push	{r7, lr}
 8017454:	b082      	sub	sp, #8
 8017456:	af00      	add	r7, sp, #0
 8017458:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017460:	4618      	mov	r0, r3
 8017462:	f000 fe65 	bl	8018130 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	4618      	mov	r0, r3
 801746a:	f007 fe17 	bl	801f09c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801746e:	bf00      	nop
 8017470:	3708      	adds	r7, #8
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
	...

08017478 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	68b9      	ldr	r1, [r7, #8]
 801748a:	4618      	mov	r0, r3
 801748c:	f7f9 fc90 	bl	8010db0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8017490:	4a03      	ldr	r2, [pc, #12]	; (80174a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	601a      	str	r2, [r3, #0]
{
}
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	0802da6c 	.word	0x0802da6c

080174a4 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80174a4:	b480      	push	{r7}
 80174a6:	b083      	sub	sp, #12
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
    {
    }
 80174ac:	bf00      	nop
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr

080174b8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80174b8:	b480      	push	{r7}
 80174ba:	b083      	sub	sp, #12
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
    {
    }
 80174c0:	bf00      	nop
 80174c2:	370c      	adds	r7, #12
 80174c4:	46bd      	mov	sp, r7
 80174c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ca:	4770      	bx	lr

080174cc <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
    {
 80174d4:	4a04      	ldr	r2, [pc, #16]	; (80174e8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	601a      	str	r2, [r3, #0]
    }
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	4618      	mov	r0, r3
 80174de:	370c      	adds	r7, #12
 80174e0:	46bd      	mov	sp, r7
 80174e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e6:	4770      	bx	lr
 80174e8:	0802daf8 	.word	0x0802daf8

080174ec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b082      	sub	sp, #8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
    }
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7ff ffe9 	bl	80174cc <_ZN8touchgfx9PresenterD1Ev>
 80174fa:	2104      	movs	r1, #4
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f013 feb6 	bl	802b26e <_ZdlPvj>
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	4618      	mov	r0, r3
 8017506:	3708      	adds	r7, #8
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801750c:	b480      	push	{r7}
 801750e:	b083      	sub	sp, #12
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
    {
 8017514:	4a04      	ldr	r2, [pc, #16]	; (8017528 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	601a      	str	r2, [r3, #0]
    }
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	4618      	mov	r0, r3
 801751e:	370c      	adds	r7, #12
 8017520:	46bd      	mov	sp, r7
 8017522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017526:	4770      	bx	lr
 8017528:	0802daf8 	.word	0x0802daf8

0801752c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	4a06      	ldr	r2, [pc, #24]	; (8017550 <_ZN13ModelListenerC1Ev+0x24>)
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	601a      	str	r2, [r3, #0]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2200      	movs	r2, #0
 801753e:	605a      	str	r2, [r3, #4]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	4618      	mov	r0, r3
 8017544:	370c      	adds	r7, #12
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	0802dae0 	.word	0x0802dae0

08017554 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	4a04      	ldr	r2, [pc, #16]	; (8017570 <_ZN13ModelListenerD1Ev+0x1c>)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	601a      	str	r2, [r3, #0]
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	4618      	mov	r0, r3
 8017566:	370c      	adds	r7, #12
 8017568:	46bd      	mov	sp, r7
 801756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756e:	4770      	bx	lr
 8017570:	0802dae0 	.word	0x0802dae0

08017574 <_ZN13ModelListenerD0Ev>:
 8017574:	b580      	push	{r7, lr}
 8017576:	b082      	sub	sp, #8
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f7ff ffe9 	bl	8017554 <_ZN13ModelListenerD1Ev>
 8017582:	2108      	movs	r1, #8
 8017584:	6878      	ldr	r0, [r7, #4]
 8017586:	f013 fe72 	bl	802b26e <_ZdlPvj>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	4618      	mov	r0, r3
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8017594:	b480      	push	{r7}
 8017596:	b083      	sub	sp, #12
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
 801759e:	bf00      	nop
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr

080175aa <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80175aa:	b480      	push	{r7}
 80175ac:	b083      	sub	sp, #12
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
 80175b2:	6039      	str	r1, [r7, #0]
 80175b4:	bf00      	nop
 80175b6:	370c      	adds	r7, #12
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <_ZN13MainPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~MainPresenter() {
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	4a09      	ldr	r2, [pc, #36]	; (80175f0 <_ZN13MainPresenterD1Ev+0x30>)
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	601a      	str	r2, [r3, #0]
 80175ce:	4a09      	ldr	r2, [pc, #36]	; (80175f4 <_ZN13MainPresenterD1Ev+0x34>)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	605a      	str	r2, [r3, #4]
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3304      	adds	r3, #4
 80175d8:	4618      	mov	r0, r3
 80175da:	f7ff ffbb 	bl	8017554 <_ZN13ModelListenerD1Ev>
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7ff ff73 	bl	80174cc <_ZN8touchgfx9PresenterD1Ev>
	}
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	4618      	mov	r0, r3
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	0802daa8 	.word	0x0802daa8
 80175f4:	0802dac8 	.word	0x0802dac8

080175f8 <_ZThn4_N13MainPresenterD1Ev>:
	virtual ~MainPresenter() {
 80175f8:	f1a0 0004 	sub.w	r0, r0, #4
 80175fc:	e7e0      	b.n	80175c0 <_ZN13MainPresenterD1Ev>
 80175fe:	bf00      	nop

08017600 <_ZN13MainPresenterD0Ev>:
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
	}
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f7ff ffd9 	bl	80175c0 <_ZN13MainPresenterD1Ev>
 801760e:	2110      	movs	r1, #16
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f013 fe2c 	bl	802b26e <_ZdlPvj>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	4618      	mov	r0, r3
 801761a:	3708      	adds	r7, #8
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <_ZThn4_N13MainPresenterD0Ev>:
	virtual ~MainPresenter() {
 8017620:	f1a0 0004 	sub.w	r0, r0, #4
 8017624:	e7ec      	b.n	8017600 <_ZN13MainPresenterD0Ev>
	...

08017628 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	6039      	str	r1, [r7, #0]
    : view(v)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	4618      	mov	r0, r3
 8017636:	f7ff ff69 	bl	801750c <_ZN8touchgfx9PresenterC1Ev>
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	3304      	adds	r3, #4
 801763e:	4618      	mov	r0, r3
 8017640:	f7ff ff74 	bl	801752c <_ZN13ModelListenerC1Ev>
 8017644:	4a06      	ldr	r2, [pc, #24]	; (8017660 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	601a      	str	r2, [r3, #0]
 801764a:	4a06      	ldr	r2, [pc, #24]	; (8017664 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	605a      	str	r2, [r3, #4]
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	683a      	ldr	r2, [r7, #0]
 8017654:	60da      	str	r2, [r3, #12]
{
}
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	4618      	mov	r0, r3
 801765a:	3708      	adds	r7, #8
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	0802daa8 	.word	0x0802daa8
 8017664:	0802dac8 	.word	0x0802dac8

08017668 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
	 model -> saveCurrentScreenIndex(1);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	689b      	ldr	r3, [r3, #8]
 8017674:	2101      	movs	r1, #1
 8017676:	4618      	mov	r0, r3
 8017678:	f000 fd9c 	bl	80181b4 <_ZN5Model22saveCurrentScreenIndexEi>
}
 801767c:	bf00      	nop
 801767e:	3708      	adds	r7, #8
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}

08017684 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8017684:	b480      	push	{r7}
 8017686:	b083      	sub	sp, #12
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
}
 801768c:	bf00      	nop
 801768e:	370c      	adds	r7, #12
 8017690:	46bd      	mov	sp, r7
 8017692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017696:	4770      	bx	lr

08017698 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
 80176a0:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	68db      	ldr	r3, [r3, #12]
 80176a6:	6839      	ldr	r1, [r7, #0]
 80176a8:	4618      	mov	r0, r3
 80176aa:	f000 fa35 	bl	8017b18 <_ZN8MainView9updateValEPh>
}
 80176ae:	bf00      	nop
 80176b0:	3708      	adds	r7, #8
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}

080176b6 <_ZThn4_N13MainPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 80176b6:	f1a0 0004 	sub.w	r0, r0, #4
 80176ba:	f7ff bfed 	b.w	8017698 <_ZN13MainPresenter11setNewValueEPh>

080176be <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b082      	sub	sp, #8
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	6839      	ldr	r1, [r7, #0]
 80176ce:	4618      	mov	r0, r3
 80176d0:	f000 f940 	bl	8017954 <_ZN8MainView14updateSettingsEPh>
}
 80176d4:	bf00      	nop
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}

080176dc <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
	void updateDisplaySettings(uint8_t *settings);
 80176dc:	f1a0 0004 	sub.w	r0, r0, #4
 80176e0:	f7ff bfed 	b.w	80176be <_ZN13MainPresenter21updateDisplaySettingsEPh>

080176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	460b      	mov	r3, r1
 80176ee:	607a      	str	r2, [r7, #4]
 80176f0:	ed87 0a00 	vstr	s0, [r7]
 80176f4:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80176f6:	463b      	mov	r3, r7
 80176f8:	8979      	ldrh	r1, [r7, #10]
 80176fa:	687a      	ldr	r2, [r7, #4]
 80176fc:	68f8      	ldr	r0, [r7, #12]
 80176fe:	f009 ffa3 	bl	8021648 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8017702:	4603      	mov	r3, r0
    }
 8017704:	4618      	mov	r0, r3
 8017706:	3710      	adds	r7, #16
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
        return rect.width;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801771a:	4618      	mov	r0, r3
 801771c:	370c      	adds	r7, #12
 801771e:	46bd      	mov	sp, r7
 8017720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017724:	4770      	bx	lr

08017726 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8017726:	b480      	push	{r7}
 8017728:	b083      	sub	sp, #12
 801772a:	af00      	add	r7, sp, #0
 801772c:	6078      	str	r0, [r7, #4]
        return rect.height;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8017734:	4618      	mov	r0, r3
 8017736:	370c      	adds	r7, #12
 8017738:	46bd      	mov	sp, r7
 801773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773e:	4770      	bx	lr

08017740 <_ZN13MainPresenter11getTpmsIdFrEv>:

	bool getManualErrorChangeScreen() {
		return model->getManualErrorChangeScreen();
	}

	int getTpmsIdFr() {
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
		return model->getTpmsIdFr();
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	689b      	ldr	r3, [r3, #8]
 801774c:	4618      	mov	r0, r3
 801774e:	f000 fd41 	bl	80181d4 <_ZN5Model11getTpmsIdFrEv>
 8017752:	4603      	mov	r3, r0
	}
 8017754:	4618      	mov	r0, r3
 8017756:	3708      	adds	r7, #8
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <_ZN13MainPresenter11getTpmsIdRrEv>:

	int getTpmsIdRr() {
 801775c:	b580      	push	{r7, lr}
 801775e:	b082      	sub	sp, #8
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
		return model->getTpmsIdRr();
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	689b      	ldr	r3, [r3, #8]
 8017768:	4618      	mov	r0, r3
 801776a:	f000 fd41 	bl	80181f0 <_ZN5Model11getTpmsIdRrEv>
 801776e:	4603      	mov	r3, r0
	}
 8017770:	4618      	mov	r0, r3
 8017772:	3708      	adds	r7, #8
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}

08017778 <_ZN13MainPresenter11getTpmsIdRlEv>:

	int getTpmsIdRl() {
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
		return model->getTpmsIdRl();
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	4618      	mov	r0, r3
 8017786:	f000 fd41 	bl	801820c <_ZN5Model11getTpmsIdRlEv>
 801778a:	4603      	mov	r3, r0
	}
 801778c:	4618      	mov	r0, r3
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <_ZN13MainPresenter11getTpmsIdFlEv>:

	int getTpmsIdFl() {
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
		return model->getTpmsIdFl();
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	689b      	ldr	r3, [r3, #8]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f000 fd41 	bl	8018228 <_ZN5Model11getTpmsIdFlEv>
 80177a6:	4603      	mov	r3, r0
	}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}

080177b0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b082      	sub	sp, #8
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	4a05      	ldr	r2, [pc, #20]	; (80177d0 <_ZN8MainViewD1Ev+0x20>)
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	601a      	str	r2, [r3, #0]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7fb fc93 	bl	80130ec <_ZN12MainViewBaseD1Ev>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	4618      	mov	r0, r3
 80177ca:	3708      	adds	r7, #8
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	0802db10 	.word	0x0802db10

080177d4 <_ZN8MainViewD0Ev>:
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f7ff ffe7 	bl	80177b0 <_ZN8MainViewD1Ev>
 80177e2:	f642 110c 	movw	r1, #10508	; 0x290c
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f013 fd41 	bl	802b26e <_ZdlPvj>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	4618      	mov	r0, r3
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
	...

080177f8 <_ZN8MainViewC1Ev>:
static int prev_tpms_p_fr = 0;
static int prev_tpms_p_fl = 0;
static int prev_tpms_p_rr = 0;
static int prev_tpms_p_rl = 0;

MainView::MainView() {
 80177f8:	b590      	push	{r4, r7, lr}
 80177fa:	b083      	sub	sp, #12
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	4618      	mov	r0, r3
 8017804:	f7fb fde0 	bl	80133c8 <_ZN12MainViewBaseC1Ev>
 8017808:	4a15      	ldr	r2, [pc, #84]	; (8017860 <_ZN8MainViewC1Ev+0x68>)
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	601a      	str	r2, [r3, #0]
	// Support of larger displays for this example
	// is handled by showing a black box in the
	// unused part of the display.
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 801780e:	4b15      	ldr	r3, [pc, #84]	; (8017864 <_ZN8MainViewC1Ev+0x6c>)
 8017810:	881b      	ldrh	r3, [r3, #0]
 8017812:	461c      	mov	r4, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801781a:	4618      	mov	r0, r3
 801781c:	f7ff ff76 	bl	801770c <_ZNK8touchgfx8Drawable8getWidthEv>
 8017820:	4603      	mov	r3, r0
			|| HAL::DISPLAY_HEIGHT > backgroundImage.getHeight()) {
 8017822:	429c      	cmp	r4, r3
 8017824:	dc0b      	bgt.n	801783e <_ZN8MainViewC1Ev+0x46>
 8017826:	4b10      	ldr	r3, [pc, #64]	; (8017868 <_ZN8MainViewC1Ev+0x70>)
 8017828:	881b      	ldrh	r3, [r3, #0]
 801782a:	461c      	mov	r4, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8017832:	4618      	mov	r0, r3
 8017834:	f7ff ff77 	bl	8017726 <_ZNK8touchgfx8Drawable9getHeightEv>
 8017838:	4603      	mov	r3, r0
 801783a:	429c      	cmp	r4, r3
 801783c:	dd01      	ble.n	8017842 <_ZN8MainViewC1Ev+0x4a>
 801783e:	2301      	movs	r3, #1
 8017840:	e000      	b.n	8017844 <_ZN8MainViewC1Ev+0x4c>
 8017842:	2300      	movs	r3, #0
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 8017844:	2b00      	cmp	r3, #0
 8017846:	d005      	beq.n	8017854 <_ZN8MainViewC1Ev+0x5c>
		backgroundBox.setVisible(true);
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	3340      	adds	r3, #64	; 0x40
 801784c:	2101      	movs	r1, #1
 801784e:	4618      	mov	r0, r3
 8017850:	f7fa feb1 	bl	80125b6 <_ZN8touchgfx8Drawable10setVisibleEb>
	}
}
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	4618      	mov	r0, r3
 8017858:	370c      	adds	r7, #12
 801785a:	46bd      	mov	sp, r7
 801785c:	bd90      	pop	{r4, r7, pc}
 801785e:	bf00      	nop
 8017860:	0802db10 	.word	0x0802db10
 8017864:	2000bfc2 	.word	0x2000bfc2
 8017868:	2000bfc4 	.word	0x2000bfc4

0801786c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen() {
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
}
 8017874:	bf00      	nop
 8017876:	370c      	adds	r7, #12
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr

08017880 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen() {
 8017880:	b480      	push	{r7}
 8017882:	b083      	sub	sp, #12
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
}
 8017888:	bf00      	nop
 801788a:	370c      	adds	r7, #12
 801788c:	46bd      	mov	sp, r7
 801788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017892:	4770      	bx	lr

08017894 <_ZL14getYellowColorv>:

static colortype getYellowColor() {
 8017894:	b580      	push	{r7, lr}
 8017896:	b082      	sub	sp, #8
 8017898:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 255, 0);
 801789a:	2200      	movs	r2, #0
 801789c:	21ff      	movs	r1, #255	; 0xff
 801789e:	20ff      	movs	r0, #255	; 0xff
 80178a0:	f7fb fd68 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80178a4:	4603      	mov	r3, r0
 80178a6:	607b      	str	r3, [r7, #4]
	return black_color;
 80178a8:	687b      	ldr	r3, [r7, #4]
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <_ZL13getBlackColorv>:
static colortype getRedColor() {
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
	return black_color;
}

static colortype getBlackColor() {
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80178b8:	2200      	movs	r2, #0
 80178ba:	2100      	movs	r1, #0
 80178bc:	2000      	movs	r0, #0
 80178be:	f7fb fd59 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80178c2:	4603      	mov	r3, r0
 80178c4:	607b      	str	r3, [r7, #4]
	return black_color;
 80178c6:	687b      	ldr	r3, [r7, #4]
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit() {
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b084      	sub	sp, #16
 80178d4:	af00      	add	r7, sp, #0

	color_index++;
 80178d6:	4b1e      	ldr	r3, [pc, #120]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	3301      	adds	r3, #1
 80178dc:	4a1c      	ldr	r2, [pc, #112]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 80178de:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 80178e0:	4b1b      	ldr	r3, [pc, #108]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2b02      	cmp	r3, #2
 80178e6:	dd02      	ble.n	80178ee <_ZL20getColorFromRevLimitv+0x1e>
		color_index = 0;
 80178e8:	4b19      	ldr	r3, [pc, #100]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 80178ea:	2200      	movs	r2, #0
 80178ec:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 80178ee:	2200      	movs	r2, #0
 80178f0:	2100      	movs	r1, #0
 80178f2:	20ff      	movs	r0, #255	; 0xff
 80178f4:	f7fb fd3e 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80178f8:	4603      	mov	r3, r0
 80178fa:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80178fc:	2200      	movs	r2, #0
 80178fe:	2100      	movs	r1, #0
 8017900:	2000      	movs	r0, #0
 8017902:	f7fb fd37 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017906:	4603      	mov	r3, r0
 8017908:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 801790a:	22ff      	movs	r2, #255	; 0xff
 801790c:	21ff      	movs	r1, #255	; 0xff
 801790e:	20ff      	movs	r0, #255	; 0xff
 8017910:	f7fb fd30 	bl	8013374 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017914:	4603      	mov	r3, r0
 8017916:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8017918:	463b      	mov	r3, r7
 801791a:	4618      	mov	r0, r3
 801791c:	f7fa fcfd 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8017920:	4b0b      	ldr	r3, [pc, #44]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d101      	bne.n	801792c <_ZL20getColorFromRevLimitv+0x5c>
		color_to_set = red_color;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 801792c:	4b08      	ldr	r3, [pc, #32]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b01      	cmp	r3, #1
 8017932:	d101      	bne.n	8017938 <_ZL20getColorFromRevLimitv+0x68>
		color_to_set = black_color;
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8017938:	4b05      	ldr	r3, [pc, #20]	; (8017950 <_ZL20getColorFromRevLimitv+0x80>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	2b02      	cmp	r3, #2
 801793e:	d101      	bne.n	8017944 <_ZL20getColorFromRevLimitv+0x74>
		color_to_set = white_color;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8017944:	683b      	ldr	r3, [r7, #0]
}
 8017946:	4618      	mov	r0, r3
 8017948:	3710      	adds	r7, #16
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}
 801794e:	bf00      	nop
 8017950:	20008720 	.word	0x20008720

08017954 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t *settings) {
 8017954:	b580      	push	{r7, lr}
 8017956:	b086      	sub	sp, #24
 8017958:	af02      	add	r7, sp, #8
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
	settings_message *new_settings = (settings_message*) settings;
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	60fb      	str	r3, [r7, #12]

	rev_limit_warning = (int) new_settings->rpm_limit_warning;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	4a68      	ldr	r2, [pc, #416]	; (8017b08 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017968:	6013      	str	r3, [r2, #0]
	rev_limit = (int) new_settings->rpm_limit;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	4a67      	ldr	r2, [pc, #412]	; (8017b0c <_ZN8MainView14updateSettingsEPh+0x1b8>)
 8017970:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int) (new_settings->rpm8 * 1000.0f), 0, 0);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f203 6064 	addw	r0, r3, #1636	; 0x664
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801797c:	ee07 3a90 	vmov	s15, r3
 8017980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017984:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8017b10 <_ZN8MainView14updateSettingsEPh+0x1bc>
 8017988:	ee67 7a87 	vmul.f32	s15, s15, s14
 801798c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017990:	ee17 3a90 	vmov	r3, s15
 8017994:	b21a      	sxth	r2, r3
 8017996:	2300      	movs	r3, #0
 8017998:	9300      	str	r3, [sp, #0]
 801799a:	2300      	movs	r3, #0
 801799c:	2100      	movs	r1, #0
 801799e:	f003 fbd1 	bl	801b144 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80179a8:	4618      	mov	r0, r3
 80179aa:	f008 f88b 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f603 402e 	addw	r0, r3, #3118	; 0xc2e
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	689b      	ldr	r3, [r3, #8]
 80179b8:	4a56      	ldr	r2, [pc, #344]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 80179ba:	2102      	movs	r1, #2
 80179bc:	f009 fcea 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80179c6:	4618      	mov	r0, r3
 80179c8:	f005 feb0 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80179d2:	4618      	mov	r0, r3
 80179d4:	f008 f876 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f603 4032 	addw	r0, r3, #3122	; 0xc32
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	68db      	ldr	r3, [r3, #12]
 80179e2:	4a4c      	ldr	r2, [pc, #304]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 80179e4:	2102      	movs	r1, #2
 80179e6:	f009 fcd5 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80179f0:	4618      	mov	r0, r3
 80179f2:	f005 fe9b 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80179fc:	4618      	mov	r0, r3
 80179fe:	f008 f861 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	f603 4036 	addw	r0, r3, #3126	; 0xc36
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	691b      	ldr	r3, [r3, #16]
 8017a0c:	4a41      	ldr	r2, [pc, #260]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017a0e:	2102      	movs	r1, #2
 8017a10:	f009 fcc0 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f005 fe86 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017a26:	4618      	mov	r0, r3
 8017a28:	f008 f84c 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f603 403a 	addw	r0, r3, #3130	; 0xc3a
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	695b      	ldr	r3, [r3, #20]
 8017a36:	4a37      	ldr	r2, [pc, #220]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017a38:	2102      	movs	r1, #2
 8017a3a:	f009 fcab 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017a44:	4618      	mov	r0, r3
 8017a46:	f005 fe71 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017a50:	4618      	mov	r0, r3
 8017a52:	f008 f837 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	f603 403e 	addw	r0, r3, #3134	; 0xc3e
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	699b      	ldr	r3, [r3, #24]
 8017a60:	4a2c      	ldr	r2, [pc, #176]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017a62:	2102      	movs	r1, #2
 8017a64:	f009 fc96 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f005 fe5c 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f008 f822 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f603 4042 	addw	r0, r3, #3138	; 0xc42
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	69db      	ldr	r3, [r3, #28]
 8017a8a:	4a22      	ldr	r2, [pc, #136]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017a8c:	2102      	movs	r1, #2
 8017a8e:	f009 fc81 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f005 fe47 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f008 f80d 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	f603 4046 	addw	r0, r3, #3142	; 0xc46
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	6a1b      	ldr	r3, [r3, #32]
 8017ab4:	4a17      	ldr	r2, [pc, #92]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017ab6:	2102      	movs	r1, #2
 8017ab8:	f009 fc6c 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f005 fe32 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f007 fff8 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f603 404a 	addw	r0, r3, #3146	; 0xc4a
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ade:	4a0d      	ldr	r2, [pc, #52]	; (8017b14 <_ZN8MainView14updateSettingsEPh+0x1c0>)
 8017ae0:	2102      	movs	r1, #2
 8017ae2:	f009 fc57 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8017aec:	4618      	mov	r0, r3
 8017aee:	f005 fe1d 	bl	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8017af8:	4618      	mov	r0, r3
 8017afa:	f007 ffe3 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8017afe:	bf00      	nop
 8017b00:	3710      	adds	r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	20000030 	.word	0x20000030
 8017b0c:	20000034 	.word	0x20000034
 8017b10:	447a0000 	.word	0x447a0000
 8017b14:	0802cab8 	.word	0x0802cab8

08017b18 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t *newValue) {
 8017b18:	b590      	push	{r4, r7, lr}
 8017b1a:	b085      	sub	sp, #20
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
	static bool background_is_black = false;
	display_values *values = (display_values*) newValue;
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	60fb      	str	r3, [r7, #12]

	bool on_rev_limit_warning = values->rpm >= rev_limit_warning;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	681a      	ldr	r2, [r3, #0]
 8017b2a:	4b9c      	ldr	r3, [pc, #624]	; (8017d9c <_ZN8MainView9updateValEPh+0x284>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	bfac      	ite	ge
 8017b32:	2301      	movge	r3, #1
 8017b34:	2300      	movlt	r3, #0
 8017b36:	72fb      	strb	r3, [r7, #11]
	bool on_rev_limiter = values->rpm >= rev_limit;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	4b98      	ldr	r3, [pc, #608]	; (8017da0 <_ZN8MainView9updateValEPh+0x288>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	bfac      	ite	ge
 8017b44:	2301      	movge	r3, #1
 8017b46:	2300      	movlt	r3, #0
 8017b48:	72bb      	strb	r3, [r7, #10]
//			|| ((int) values->check_eng_code) > 0 || ((int) values->eng_protection_code) > 0;
//	if (has_error) {
//		backgroundBox.setColor(getRedColor());
//		backgroundBox.invalidate();
//	} else
	if(on_rev_limit_warning && !on_rev_limiter) {
 8017b4a:	7afb      	ldrb	r3, [r7, #11]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d018      	beq.n	8017b82 <_ZN8MainView9updateValEPh+0x6a>
 8017b50:	7abb      	ldrb	r3, [r7, #10]
 8017b52:	f083 0301 	eor.w	r3, r3, #1
 8017b56:	b2db      	uxtb	r3, r3
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d012      	beq.n	8017b82 <_ZN8MainView9updateValEPh+0x6a>
		background_is_black = false;
 8017b5c:	4b91      	ldr	r3, [pc, #580]	; (8017da4 <_ZN8MainView9updateValEPh+0x28c>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getYellowColor());
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017b68:	f7ff fe94 	bl	8017894 <_ZL14getYellowColorv>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	4619      	mov	r1, r3
 8017b70:	4620      	mov	r0, r4
 8017b72:	f7fa fee1 	bl	8012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	3340      	adds	r3, #64	; 0x40
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f007 ffa2 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017b80:	e02e      	b.n	8017be0 <_ZN8MainView9updateValEPh+0xc8>
	} else if (on_rev_limiter) {
 8017b82:	7abb      	ldrb	r3, [r7, #10]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d012      	beq.n	8017bae <_ZN8MainView9updateValEPh+0x96>
		background_is_black = false;
 8017b88:	4b86      	ldr	r3, [pc, #536]	; (8017da4 <_ZN8MainView9updateValEPh+0x28c>)
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017b94:	f7ff fe9c 	bl	80178d0 <_ZL20getColorFromRevLimitv>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	4619      	mov	r1, r3
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7fa fecb 	bl	8012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	3340      	adds	r3, #64	; 0x40
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f007 ff8c 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017bac:	e018      	b.n	8017be0 <_ZN8MainView9updateValEPh+0xc8>
	} else if (!background_is_black) {
 8017bae:	4b7d      	ldr	r3, [pc, #500]	; (8017da4 <_ZN8MainView9updateValEPh+0x28c>)
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	f083 0301 	eor.w	r3, r3, #1
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d011      	beq.n	8017be0 <_ZN8MainView9updateValEPh+0xc8>
		backgroundBox.setColor(getBlackColor());
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017bc2:	f7ff fe76 	bl	80178b2 <_ZL13getBlackColorv>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7fa feb4 	bl	8012938 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	3340      	adds	r3, #64	; 0x40
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f007 ff75 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8017bda:	4b72      	ldr	r3, [pc, #456]	; (8017da4 <_ZN8MainView9updateValEPh+0x28c>)
 8017bdc:	2201      	movs	r2, #1
 8017bde:	701a      	strb	r2, [r3, #0]
	}

	if (values->rpm != prev_rpm) {
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	681a      	ldr	r2, [r3, #0]
 8017be4:	4b70      	ldr	r3, [pc, #448]	; (8017da8 <_ZN8MainView9updateValEPh+0x290>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d021      	beq.n	8017c30 <_ZN8MainView9updateValEPh+0x118>
		prev_rpm = values->rpm;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	4a6d      	ldr	r2, [pc, #436]	; (8017da8 <_ZN8MainView9updateValEPh+0x290>)
 8017bf2:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f203 6264 	addw	r2, r3, #1636	; 0x664
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	4619      	mov	r1, r3
 8017c00:	4610      	mov	r0, r2
 8017c02:	f003 f989 	bl	801af18 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f007 ff59 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	f503 6048 	add.w	r0, r3, #3200	; 0xc80
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	4a63      	ldr	r2, [pc, #396]	; (8017dac <_ZN8MainView9updateValEPh+0x294>)
 8017c1e:	2105      	movs	r1, #5
 8017c20:	f009 fbb8 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f203 7354 	addw	r3, r3, #1876	; 0x754
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f007 ff4a 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->clt != prev_clt) {
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	685a      	ldr	r2, [r3, #4]
 8017c34:	4b5e      	ldr	r3, [pc, #376]	; (8017db0 <_ZN8MainView9updateValEPh+0x298>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d012      	beq.n	8017c62 <_ZN8MainView9updateValEPh+0x14a>
		prev_clt = values->clt;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	685b      	ldr	r3, [r3, #4]
 8017c40:	4a5b      	ldr	r2, [pc, #364]	; (8017db0 <_ZN8MainView9updateValEPh+0x298>)
 8017c42:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f603 408a 	addw	r0, r3, #3210	; 0xc8a
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	4a57      	ldr	r2, [pc, #348]	; (8017dac <_ZN8MainView9updateValEPh+0x294>)
 8017c50:	2105      	movs	r1, #5
 8017c52:	f009 fb9f 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f007 ff31 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdFr() && values->tpms_press != prev_tpms_p_fr) {
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	6a1c      	ldr	r4, [r3, #32]
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7ff fd68 	bl	8017740 <_ZN13MainPresenter11getTpmsIdFrEv>
 8017c70:	4603      	mov	r3, r0
 8017c72:	429c      	cmp	r4, r3
 8017c74:	d107      	bne.n	8017c86 <_ZN8MainView9updateValEPh+0x16e>
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c7a:	4b4e      	ldr	r3, [pc, #312]	; (8017db4 <_ZN8MainView9updateValEPh+0x29c>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d001      	beq.n	8017c86 <_ZN8MainView9updateValEPh+0x16e>
 8017c82:	2301      	movs	r3, #1
 8017c84:	e000      	b.n	8017c88 <_ZN8MainView9updateValEPh+0x170>
 8017c86:	2300      	movs	r3, #0
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d01b      	beq.n	8017cc4 <_ZN8MainView9updateValEPh+0x1ac>
		prev_tpms_p_fr = values->tpms_press;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c90:	4a48      	ldr	r2, [pc, #288]	; (8017db4 <_ZN8MainView9updateValEPh+0x29c>)
 8017c92:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TpFrBuffer, TPFR_SIZE, "%.2f",
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f603 4024 	addw	r0, r3, #3108	; 0xc24
				(float)(values->tpms_press / (float)100));
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		Unicode::snprintfFloat(TpFrBuffer, TPFR_SIZE, "%.2f",
 8017c9e:	ee07 3a90 	vmov	s15, r3
 8017ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ca6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8017db8 <_ZN8MainView9updateValEPh+0x2a0>
 8017caa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017cae:	eeb0 0a66 	vmov.f32	s0, s13
 8017cb2:	4a42      	ldr	r2, [pc, #264]	; (8017dbc <_ZN8MainView9updateValEPh+0x2a4>)
 8017cb4:	2105      	movs	r1, #5
 8017cb6:	f7ff fd15 	bl	80176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TpFr.invalidate();
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	33d8      	adds	r3, #216	; 0xd8
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f007 ff00 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdFr() && values->tpms_temp != prev_tpms_t_fr) {
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	6a1c      	ldr	r4, [r3, #32]
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7ff fd37 	bl	8017740 <_ZN13MainPresenter11getTpmsIdFrEv>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	429c      	cmp	r4, r3
 8017cd6:	d107      	bne.n	8017ce8 <_ZN8MainView9updateValEPh+0x1d0>
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cdc:	4b38      	ldr	r3, [pc, #224]	; (8017dc0 <_ZN8MainView9updateValEPh+0x2a8>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d001      	beq.n	8017ce8 <_ZN8MainView9updateValEPh+0x1d0>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e000      	b.n	8017cea <_ZN8MainView9updateValEPh+0x1d2>
 8017ce8:	2300      	movs	r3, #0
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d012      	beq.n	8017d14 <_ZN8MainView9updateValEPh+0x1fc>
		prev_tpms_t_fr = values->tpms_temp;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cf2:	4a33      	ldr	r2, [pc, #204]	; (8017dc0 <_ZN8MainView9updateValEPh+0x2a8>)
 8017cf4:	6013      	str	r3, [r2, #0]
			Unicode::snprintf(TtFrBuffer, TTFR_SIZE, "%d", values->tpms_temp);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f603 40b2 	addw	r0, r3, #3250	; 0xcb2
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d00:	4a2a      	ldr	r2, [pc, #168]	; (8017dac <_ZN8MainView9updateValEPh+0x294>)
 8017d02:	2105      	movs	r1, #5
 8017d04:	f009 fb46 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TtFr.invalidate();
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f007 fed8 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdRr() && values->tpms_press != prev_tpms_p_rr) {
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	6a1c      	ldr	r4, [r3, #32]
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ff fd1d 	bl	801775c <_ZN13MainPresenter11getTpmsIdRrEv>
 8017d22:	4603      	mov	r3, r0
 8017d24:	429c      	cmp	r4, r3
 8017d26:	d107      	bne.n	8017d38 <_ZN8MainView9updateValEPh+0x220>
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017d2c:	4b25      	ldr	r3, [pc, #148]	; (8017dc4 <_ZN8MainView9updateValEPh+0x2ac>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d001      	beq.n	8017d38 <_ZN8MainView9updateValEPh+0x220>
 8017d34:	2301      	movs	r3, #1
 8017d36:	e000      	b.n	8017d3a <_ZN8MainView9updateValEPh+0x222>
 8017d38:	2300      	movs	r3, #0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d01c      	beq.n	8017d78 <_ZN8MainView9updateValEPh+0x260>
		prev_tpms_p_rr = values->tpms_press;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d42:	4a20      	ldr	r2, [pc, #128]	; (8017dc4 <_ZN8MainView9updateValEPh+0x2ac>)
 8017d44:	6013      	str	r3, [r2, #0]
			Unicode::snprintfFloat(TpRrBuffer, TPRR_SIZE, "%.2f",
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	f603 4094 	addw	r0, r3, #3220	; 0xc94
					(float)(values->tpms_press / (float)100));
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			Unicode::snprintfFloat(TpRrBuffer, TPRR_SIZE, "%.2f",
 8017d50:	ee07 3a90 	vmov	s15, r3
 8017d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d58:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8017db8 <_ZN8MainView9updateValEPh+0x2a0>
 8017d5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017d60:	eeb0 0a66 	vmov.f32	s0, s13
 8017d64:	4a15      	ldr	r2, [pc, #84]	; (8017dbc <_ZN8MainView9updateValEPh+0x2a4>)
 8017d66:	2105      	movs	r1, #5
 8017d68:	f7ff fcbc 	bl	80176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TpRr.invalidate();
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8017d72:	4618      	mov	r0, r3
 8017d74:	f007 fea6 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdRr() && values->tpms_temp != prev_tpms_t_rr) {
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6a1c      	ldr	r4, [r3, #32]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7ff fceb 	bl	801775c <_ZN13MainPresenter11getTpmsIdRrEv>
 8017d86:	4603      	mov	r3, r0
 8017d88:	429c      	cmp	r4, r3
 8017d8a:	d11f      	bne.n	8017dcc <_ZN8MainView9updateValEPh+0x2b4>
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d90:	4b0d      	ldr	r3, [pc, #52]	; (8017dc8 <_ZN8MainView9updateValEPh+0x2b0>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d019      	beq.n	8017dcc <_ZN8MainView9updateValEPh+0x2b4>
 8017d98:	2301      	movs	r3, #1
 8017d9a:	e018      	b.n	8017dce <_ZN8MainView9updateValEPh+0x2b6>
 8017d9c:	20000030 	.word	0x20000030
 8017da0:	20000034 	.word	0x20000034
 8017da4:	20008758 	.word	0x20008758
 8017da8:	20000038 	.word	0x20000038
 8017dac:	0802cab8 	.word	0x0802cab8
 8017db0:	2000003c 	.word	0x2000003c
 8017db4:	20008748 	.word	0x20008748
 8017db8:	42c80000 	.word	0x42c80000
 8017dbc:	0802cabc 	.word	0x0802cabc
 8017dc0:	20008738 	.word	0x20008738
 8017dc4:	20008750 	.word	0x20008750
 8017dc8:	20008740 	.word	0x20008740
 8017dcc:	2300      	movs	r3, #0
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d012      	beq.n	8017df8 <_ZN8MainView9updateValEPh+0x2e0>
		prev_tpms_t_rr = values->tpms_temp;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dd6:	4a57      	ldr	r2, [pc, #348]	; (8017f34 <_ZN8MainView9updateValEPh+0x41c>)
 8017dd8:	6013      	str	r3, [r2, #0]
			Unicode::snprintf(TtRrBuffer, TTRR_SIZE, "%d", values->tpms_temp);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	f603 40c6 	addw	r0, r3, #3270	; 0xcc6
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017de4:	4a54      	ldr	r2, [pc, #336]	; (8017f38 <_ZN8MainView9updateValEPh+0x420>)
 8017de6:	2105      	movs	r1, #5
 8017de8:	f009 fad4 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TtRr.invalidate();
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8017df2:	4618      	mov	r0, r3
 8017df4:	f007 fe66 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdRl() && values->tpms_press != prev_tpms_p_rl) {
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	6a1c      	ldr	r4, [r3, #32]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7ff fcb9 	bl	8017778 <_ZN13MainPresenter11getTpmsIdRlEv>
 8017e06:	4603      	mov	r3, r0
 8017e08:	429c      	cmp	r4, r3
 8017e0a:	d107      	bne.n	8017e1c <_ZN8MainView9updateValEPh+0x304>
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e10:	4b4a      	ldr	r3, [pc, #296]	; (8017f3c <_ZN8MainView9updateValEPh+0x424>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d001      	beq.n	8017e1c <_ZN8MainView9updateValEPh+0x304>
 8017e18:	2301      	movs	r3, #1
 8017e1a:	e000      	b.n	8017e1e <_ZN8MainView9updateValEPh+0x306>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d01c      	beq.n	8017e5c <_ZN8MainView9updateValEPh+0x344>
		prev_tpms_p_rl = values->tpms_press;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e26:	4a45      	ldr	r2, [pc, #276]	; (8017f3c <_ZN8MainView9updateValEPh+0x424>)
 8017e28:	6013      	str	r3, [r2, #0]
				Unicode::snprintfFloat(TpRlBuffer, TPRL_SIZE, "%.2f",
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	f603 4058 	addw	r0, r3, #3160	; 0xc58
						(float)(values->tpms_press / (float)100));
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				Unicode::snprintfFloat(TpRlBuffer, TPRL_SIZE, "%.2f",
 8017e34:	ee07 3a90 	vmov	s15, r3
 8017e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e3c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8017f40 <_ZN8MainView9updateValEPh+0x428>
 8017e40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017e44:	eeb0 0a66 	vmov.f32	s0, s13
 8017e48:	4a3e      	ldr	r2, [pc, #248]	; (8017f44 <_ZN8MainView9updateValEPh+0x42c>)
 8017e4a:	2105      	movs	r1, #5
 8017e4c:	f7ff fc4a 	bl	80176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TpRl.invalidate();
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8017e56:	4618      	mov	r0, r3
 8017e58:	f007 fe34 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdRl() && values->tpms_temp != prev_tpms_t_rl) {
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	6a1c      	ldr	r4, [r3, #32]
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7ff fc87 	bl	8017778 <_ZN13MainPresenter11getTpmsIdRlEv>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	429c      	cmp	r4, r3
 8017e6e:	d107      	bne.n	8017e80 <_ZN8MainView9updateValEPh+0x368>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e74:	4b34      	ldr	r3, [pc, #208]	; (8017f48 <_ZN8MainView9updateValEPh+0x430>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d001      	beq.n	8017e80 <_ZN8MainView9updateValEPh+0x368>
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e000      	b.n	8017e82 <_ZN8MainView9updateValEPh+0x36a>
 8017e80:	2300      	movs	r3, #0
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d012      	beq.n	8017eac <_ZN8MainView9updateValEPh+0x394>
			prev_tpms_t_rl = values->tpms_temp;
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e8a:	4a2f      	ldr	r2, [pc, #188]	; (8017f48 <_ZN8MainView9updateValEPh+0x430>)
 8017e8c:	6013      	str	r3, [r2, #0]
				Unicode::snprintf(TtRlBuffer, TTRL_SIZE, "%d", values->tpms_temp);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f603 40bc 	addw	r0, r3, #3260	; 0xcbc
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e98:	4a27      	ldr	r2, [pc, #156]	; (8017f38 <_ZN8MainView9updateValEPh+0x420>)
 8017e9a:	2105      	movs	r1, #5
 8017e9c:	f009 fa7a 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			TtRl.invalidate();
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f007 fe0c 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
		}

	if (values->tpms_id == presenter->getTpmsIdFl() && values->tpms_press != prev_tpms_p_fl) {
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	6a1c      	ldr	r4, [r3, #32]
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7ff fc6d 	bl	8017794 <_ZN13MainPresenter11getTpmsIdFlEv>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	429c      	cmp	r4, r3
 8017ebe:	d107      	bne.n	8017ed0 <_ZN8MainView9updateValEPh+0x3b8>
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ec4:	4b21      	ldr	r3, [pc, #132]	; (8017f4c <_ZN8MainView9updateValEPh+0x434>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d001      	beq.n	8017ed0 <_ZN8MainView9updateValEPh+0x3b8>
 8017ecc:	2301      	movs	r3, #1
 8017ece:	e000      	b.n	8017ed2 <_ZN8MainView9updateValEPh+0x3ba>
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d01c      	beq.n	8017f10 <_ZN8MainView9updateValEPh+0x3f8>
		prev_tpms_p_fl = values->tpms_press;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017eda:	4a1c      	ldr	r2, [pc, #112]	; (8017f4c <_ZN8MainView9updateValEPh+0x434>)
 8017edc:	6013      	str	r3, [r2, #0]
					Unicode::snprintfFloat(TpFlBuffer, TPFL_SIZE, "%.2f",
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	f603 404e 	addw	r0, r3, #3150	; 0xc4e
							(float)(values->tpms_press / (float)100));
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
					Unicode::snprintfFloat(TpFlBuffer, TPFL_SIZE, "%.2f",
 8017ee8:	ee07 3a90 	vmov	s15, r3
 8017eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ef0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8017f40 <_ZN8MainView9updateValEPh+0x428>
 8017ef4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017ef8:	eeb0 0a66 	vmov.f32	s0, s13
 8017efc:	4a11      	ldr	r2, [pc, #68]	; (8017f44 <_ZN8MainView9updateValEPh+0x42c>)
 8017efe:	2105      	movs	r1, #5
 8017f00:	f7ff fbf0 	bl	80176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TpFl.invalidate();
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f007 fdda 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tpms_id == presenter->getTpmsIdFl() && values->tpms_temp != prev_tpms_t_fl) {
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	6a1c      	ldr	r4, [r3, #32]
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7ff fc3b 	bl	8017794 <_ZN13MainPresenter11getTpmsIdFlEv>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	429c      	cmp	r4, r3
 8017f22:	d117      	bne.n	8017f54 <_ZN8MainView9updateValEPh+0x43c>
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f28:	4b09      	ldr	r3, [pc, #36]	; (8017f50 <_ZN8MainView9updateValEPh+0x438>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d011      	beq.n	8017f54 <_ZN8MainView9updateValEPh+0x43c>
 8017f30:	2301      	movs	r3, #1
 8017f32:	e010      	b.n	8017f56 <_ZN8MainView9updateValEPh+0x43e>
 8017f34:	20008740 	.word	0x20008740
 8017f38:	0802cab8 	.word	0x0802cab8
 8017f3c:	20008754 	.word	0x20008754
 8017f40:	42c80000 	.word	0x42c80000
 8017f44:	0802cabc 	.word	0x0802cabc
 8017f48:	20008744 	.word	0x20008744
 8017f4c:	2000874c 	.word	0x2000874c
 8017f50:	2000873c 	.word	0x2000873c
 8017f54:	2300      	movs	r3, #0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d012      	beq.n	8017f80 <_ZN8MainView9updateValEPh+0x468>
		prev_tpms_t_fl = values->tpms_temp;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f5e:	4a5c      	ldr	r2, [pc, #368]	; (80180d0 <_ZN8MainView9updateValEPh+0x5b8>)
 8017f60:	6013      	str	r3, [r2, #0]
			Unicode::snprintf(TtFlBuffer, TTFL_SIZE, "%d", (values->tpms_temp));
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f603 40a8 	addw	r0, r3, #3240	; 0xca8
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f6c:	4a59      	ldr	r2, [pc, #356]	; (80180d4 <_ZN8MainView9updateValEPh+0x5bc>)
 8017f6e:	2105      	movs	r1, #5
 8017f70:	f009 fa10 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TtFl.invalidate();
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f007 fda2 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_press != prev_oil_press) {
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	ed93 7a05 	vldr	s14, [r3, #20]
 8017f86:	4b54      	ldr	r3, [pc, #336]	; (80180d8 <_ZN8MainView9updateValEPh+0x5c0>)
 8017f88:	edd3 7a00 	vldr	s15, [r3]
 8017f8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8017f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f94:	d015      	beq.n	8017fc2 <_ZN8MainView9updateValEPh+0x4aa>
		prev_oil_press = values->oil_press;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	695b      	ldr	r3, [r3, #20]
 8017f9a:	4a4f      	ldr	r2, [pc, #316]	; (80180d8 <_ZN8MainView9updateValEPh+0x5c0>)
 8017f9c:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE,
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f603 406c 	addw	r0, r3, #3180	; 0xc6c
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	edd3 7a05 	vldr	s15, [r3, #20]
 8017faa:	eeb0 0a67 	vmov.f32	s0, s15
 8017fae:	4a4b      	ldr	r2, [pc, #300]	; (80180dc <_ZN8MainView9updateValEPh+0x5c4>)
 8017fb0:	2105      	movs	r1, #5
 8017fb2:	f7ff fb97 	bl	80176e4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->oil_press);
		OILPressureValue.invalidate();
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f007 fd81 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->diff_tmp != prev_diff_t) {
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	691a      	ldr	r2, [r3, #16]
 8017fc6:	4b46      	ldr	r3, [pc, #280]	; (80180e0 <_ZN8MainView9updateValEPh+0x5c8>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d012      	beq.n	8017ff4 <_ZN8MainView9updateValEPh+0x4dc>
		prev_diff_t = values->diff_tmp;
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	691b      	ldr	r3, [r3, #16]
 8017fd2:	4a43      	ldr	r2, [pc, #268]	; (80180e0 <_ZN8MainView9updateValEPh+0x5c8>)
 8017fd4:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(DiffTBuffer, DIFFT_SIZE, "%d",
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f603 409e 	addw	r0, r3, #3230	; 0xc9e
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	691b      	ldr	r3, [r3, #16]
 8017fe0:	4a3c      	ldr	r2, [pc, #240]	; (80180d4 <_ZN8MainView9updateValEPh+0x5bc>)
 8017fe2:	2105      	movs	r1, #5
 8017fe4:	f009 f9d6 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->diff_tmp);
		DiffT.invalidate();
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f007 fd68 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_tmp != prev_oil_tmp) {
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	68da      	ldr	r2, [r3, #12]
 8017ff8:	4b3a      	ldr	r3, [pc, #232]	; (80180e4 <_ZN8MainView9updateValEPh+0x5cc>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d012      	beq.n	8018026 <_ZN8MainView9updateValEPh+0x50e>
		prev_oil_tmp = values->oil_tmp;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	68db      	ldr	r3, [r3, #12]
 8018004:	4a37      	ldr	r2, [pc, #220]	; (80180e4 <_ZN8MainView9updateValEPh+0x5cc>)
 8018006:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f603 4062 	addw	r0, r3, #3170	; 0xc62
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	4a30      	ldr	r2, [pc, #192]	; (80180d4 <_ZN8MainView9updateValEPh+0x5bc>)
 8018014:	2105      	movs	r1, #5
 8018016:	f009 f9bd 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->oil_tmp);
		OILTempValue.invalidate();
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8018020:	4618      	mov	r0, r3
 8018022:	f007 fd4f 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}



	if (values->tps != prev_tps) {
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	699a      	ldr	r2, [r3, #24]
 801802a:	4b2f      	ldr	r3, [pc, #188]	; (80180e8 <_ZN8MainView9updateValEPh+0x5d0>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	429a      	cmp	r2, r3
 8018030:	d021      	beq.n	8018076 <_ZN8MainView9updateValEPh+0x55e>
		prev_tps = values->tps;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	699b      	ldr	r3, [r3, #24]
 8018036:	4a2c      	ldr	r2, [pc, #176]	; (80180e8 <_ZN8MainView9updateValEPh+0x5d0>)
 8018038:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	699b      	ldr	r3, [r3, #24]
 8018044:	4619      	mov	r1, r3
 8018046:	4610      	mov	r0, r2
 8018048:	f002 fe16 	bl	801ac78 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f203 6364 	addw	r3, r3, #1636	; 0x664
 8018052:	4618      	mov	r0, r3
 8018054:	f007 fd36 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f603 4076 	addw	r0, r3, #3190	; 0xc76
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	699b      	ldr	r3, [r3, #24]
 8018062:	4a1c      	ldr	r2, [pc, #112]	; (80180d4 <_ZN8MainView9updateValEPh+0x5bc>)
 8018064:	2105      	movs	r1, #5
 8018066:	f009 f995 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->tps);
		TpsNumberValue.invalidate();
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8018070:	4618      	mov	r0, r3
 8018072:	f007 fd27 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->br_p != prev_br_p) {
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	69da      	ldr	r2, [r3, #28]
 801807a:	4b1c      	ldr	r3, [pc, #112]	; (80180ec <_ZN8MainView9updateValEPh+0x5d4>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	429a      	cmp	r2, r3
 8018080:	d021      	beq.n	80180c6 <_ZN8MainView9updateValEPh+0x5ae>
		prev_br_p = values->br_p;
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	69db      	ldr	r3, [r3, #28]
 8018086:	4a19      	ldr	r2, [pc, #100]	; (80180ec <_ZN8MainView9updateValEPh+0x5d4>)
 8018088:	6013      	str	r3, [r2, #0]
		BrP.setValue(values->br_p);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	69db      	ldr	r3, [r3, #28]
 8018094:	4619      	mov	r1, r3
 8018096:	4610      	mov	r0, r2
 8018098:	f002 fdee 	bl	801ac78 <_ZN8touchgfx11BoxProgress8setValueEi>
		BrP.invalidate();
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80180a2:	4618      	mov	r0, r3
 80180a4:	f007 fd0e 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(BrPrValueBuffer, BRPRVALUE_SIZE, "%d", values->br_p);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f503 604d 	add.w	r0, r3, #3280	; 0xcd0
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	69db      	ldr	r3, [r3, #28]
 80180b2:	4a08      	ldr	r2, [pc, #32]	; (80180d4 <_ZN8MainView9updateValEPh+0x5bc>)
 80180b4:	2105      	movs	r1, #5
 80180b6:	f009 f96d 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		BrPrValue.invalidate();
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80180c0:	4618      	mov	r0, r3
 80180c2:	f007 fcff 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Commented because of strange behavior of EMU error codes. Need USB to CAN to trace the problem.
//	if (has_error && !presenter->getManualErrorChangeScreen()) {
//		static_cast<FrontendApplication*>(Application::getInstance())->gotoSecondScreenScreenSlideTransitionEast();
//	}
}
 80180c6:	bf00      	nop
 80180c8:	3714      	adds	r7, #20
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd90      	pop	{r4, r7, pc}
 80180ce:	bf00      	nop
 80180d0:	2000873c 	.word	0x2000873c
 80180d4:	0802cab8 	.word	0x0802cab8
 80180d8:	20008728 	.word	0x20008728
 80180dc:	0802cac4 	.word	0x0802cac4
 80180e0:	20008734 	.word	0x20008734
 80180e4:	20008724 	.word	0x20008724
 80180e8:	2000872c 	.word	0x2000872c
 80180ec:	20008730 	.word	0x20008730

080180f0 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	2200      	movs	r2, #0
 80180fc:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 80180fe:	2200      	movs	r2, #0
 8018100:	212c      	movs	r1, #44	; 0x2c
 8018102:	2001      	movs	r0, #1
 8018104:	f7f5 f853 	bl	800d1ae <xQueueGenericCreate>
 8018108:	4602      	mov	r2, r0
 801810a:	4b07      	ldr	r3, [pc, #28]	; (8018128 <_ZN5ModelC1Ev+0x38>)
 801810c:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801810e:	2200      	movs	r2, #0
 8018110:	212c      	movs	r1, #44	; 0x2c
 8018112:	2001      	movs	r0, #1
 8018114:	f7f5 f84b 	bl	800d1ae <xQueueGenericCreate>
 8018118:	4602      	mov	r2, r0
 801811a:	4b04      	ldr	r3, [pc, #16]	; (801812c <_ZN5ModelC1Ev+0x3c>)
 801811c:	601a      	str	r2, [r3, #0]
}
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	4618      	mov	r0, r3
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	200087bc 	.word	0x200087bc
 801812c:	200087c0 	.word	0x200087c0

08018130 <_ZN5Model4tickEv>:

void Model::tick()
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8018138:	4b1a      	ldr	r3, [pc, #104]	; (80181a4 <_ZN5Model4tickEv+0x74>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2200      	movs	r2, #0
 801813e:	491a      	ldr	r1, [pc, #104]	; (80181a8 <_ZN5Model4tickEv+0x78>)
 8018140:	4618      	mov	r0, r3
 8018142:	f7f5 fac5 	bl	800d6d0 <xQueueReceive>
 8018146:	4603      	mov	r3, r0
 8018148:	2b01      	cmp	r3, #1
 801814a:	bf0c      	ite	eq
 801814c:	2301      	moveq	r3, #1
 801814e:	2300      	movne	r3, #0
 8018150:	b2db      	uxtb	r3, r3
 8018152:	2b00      	cmp	r3, #0
 8018154:	d009      	beq.n	801816a <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681a      	ldr	r2, [r3, #0]
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	3308      	adds	r3, #8
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	4910      	ldr	r1, [pc, #64]	; (80181a8 <_ZN5Model4tickEv+0x78>)
 8018166:	4610      	mov	r0, r2
 8018168:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 801816a:	4b10      	ldr	r3, [pc, #64]	; (80181ac <_ZN5Model4tickEv+0x7c>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2200      	movs	r2, #0
 8018170:	490f      	ldr	r1, [pc, #60]	; (80181b0 <_ZN5Model4tickEv+0x80>)
 8018172:	4618      	mov	r0, r3
 8018174:	f7f5 faac 	bl	800d6d0 <xQueueReceive>
 8018178:	4603      	mov	r3, r0
 801817a:	2b01      	cmp	r3, #1
 801817c:	bf0c      	ite	eq
 801817e:	2301      	moveq	r3, #1
 8018180:	2300      	movne	r3, #0
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b00      	cmp	r3, #0
 8018186:	d009      	beq.n	801819c <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681a      	ldr	r2, [r3, #0]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	330c      	adds	r3, #12
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	4906      	ldr	r1, [pc, #24]	; (80181b0 <_ZN5Model4tickEv+0x80>)
 8018198:	4610      	mov	r0, r2
 801819a:	4798      	blx	r3
	}
}
 801819c:	bf00      	nop
 801819e:	3708      	adds	r7, #8
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}
 80181a4:	200087bc 	.word	0x200087bc
 80181a8:	2000875c 	.word	0x2000875c
 80181ac:	200087c0 	.word	0x200087c0
 80181b0:	20008788 	.word	0x20008788

080181b4 <_ZN5Model22saveCurrentScreenIndexEi>:

void Model::saveCurrentScreenIndex(int cScreen)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
	currentScreenIndex = cScreen;
 80181be:	4a04      	ldr	r2, [pc, #16]	; (80181d0 <_ZN5Model22saveCurrentScreenIndexEi+0x1c>)
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	6013      	str	r3, [r2, #0]
}
 80181c4:	bf00      	nop
 80181c6:	370c      	adds	r7, #12
 80181c8:	46bd      	mov	sp, r7
 80181ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ce:	4770      	bx	lr
 80181d0:	200087b4 	.word	0x200087b4

080181d4 <_ZN5Model11getTpmsIdFrEv>:
{
	return currentScreenIndex;
}

int Model::getTpmsIdFr()
{
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
	return tpmsIdFr;
 80181dc:	4b03      	ldr	r3, [pc, #12]	; (80181ec <_ZN5Model11getTpmsIdFrEv+0x18>)
 80181de:	681b      	ldr	r3, [r3, #0]
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	370c      	adds	r7, #12
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr
 80181ec:	20000040 	.word	0x20000040

080181f0 <_ZN5Model11getTpmsIdRrEv>:

int Model::getTpmsIdRr()
{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
	return tpmsIdRr;
 80181f8:	4b03      	ldr	r3, [pc, #12]	; (8018208 <_ZN5Model11getTpmsIdRrEv+0x18>)
 80181fa:	681b      	ldr	r3, [r3, #0]
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	370c      	adds	r7, #12
 8018200:	46bd      	mov	sp, r7
 8018202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018206:	4770      	bx	lr
 8018208:	20000044 	.word	0x20000044

0801820c <_ZN5Model11getTpmsIdRlEv>:

int Model::getTpmsIdRl()
{
 801820c:	b480      	push	{r7}
 801820e:	b083      	sub	sp, #12
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
	return tpmsIdRl;
 8018214:	4b03      	ldr	r3, [pc, #12]	; (8018224 <_ZN5Model11getTpmsIdRlEv+0x18>)
 8018216:	681b      	ldr	r3, [r3, #0]
}
 8018218:	4618      	mov	r0, r3
 801821a:	370c      	adds	r7, #12
 801821c:	46bd      	mov	sp, r7
 801821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018222:	4770      	bx	lr
 8018224:	20000048 	.word	0x20000048

08018228 <_ZN5Model11getTpmsIdFlEv>:

int Model::getTpmsIdFl()
{
 8018228:	b480      	push	{r7}
 801822a:	b083      	sub	sp, #12
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
	return tpmsIdFl;
 8018230:	4b03      	ldr	r3, [pc, #12]	; (8018240 <_ZN5Model11getTpmsIdFlEv+0x18>)
 8018232:	681b      	ldr	r3, [r3, #0]
}
 8018234:	4618      	mov	r0, r3
 8018236:	370c      	adds	r7, #12
 8018238:	46bd      	mov	sp, r7
 801823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823e:	4770      	bx	lr
 8018240:	2000004c 	.word	0x2000004c

08018244 <_ZN5Model11setTpmsIdFrEi>:


void Model::setTpmsIdFr(int newTpmsIdFr)
{
 8018244:	b480      	push	{r7}
 8018246:	b083      	sub	sp, #12
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
 801824c:	6039      	str	r1, [r7, #0]
	tpmsIdFr = newTpmsIdFr;
 801824e:	4a04      	ldr	r2, [pc, #16]	; (8018260 <_ZN5Model11setTpmsIdFrEi+0x1c>)
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	6013      	str	r3, [r2, #0]
}
 8018254:	bf00      	nop
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825e:	4770      	bx	lr
 8018260:	20000040 	.word	0x20000040

08018264 <_ZN5Model11setTpmsIdRrEi>:

void Model::setTpmsIdRr(int newTpmsIdRr)
{
 8018264:	b480      	push	{r7}
 8018266:	b083      	sub	sp, #12
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
 801826c:	6039      	str	r1, [r7, #0]
	tpmsIdRr = newTpmsIdRr;
 801826e:	4a04      	ldr	r2, [pc, #16]	; (8018280 <_ZN5Model11setTpmsIdRrEi+0x1c>)
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	6013      	str	r3, [r2, #0]
}
 8018274:	bf00      	nop
 8018276:	370c      	adds	r7, #12
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr
 8018280:	20000044 	.word	0x20000044

08018284 <_ZN5Model11setTpmsIdRlEi>:

void Model::setTpmsIdRl(int newTpmsIdRl)
{
 8018284:	b480      	push	{r7}
 8018286:	b083      	sub	sp, #12
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	6039      	str	r1, [r7, #0]
	tpmsIdRl = newTpmsIdRl;
 801828e:	4a04      	ldr	r2, [pc, #16]	; (80182a0 <_ZN5Model11setTpmsIdRlEi+0x1c>)
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	6013      	str	r3, [r2, #0]
}
 8018294:	bf00      	nop
 8018296:	370c      	adds	r7, #12
 8018298:	46bd      	mov	sp, r7
 801829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829e:	4770      	bx	lr
 80182a0:	20000048 	.word	0x20000048

080182a4 <_ZN5Model11setTpmsIdFlEi>:

void Model::setTpmsIdFl(int newTpmsIdFl)
{
 80182a4:	b480      	push	{r7}
 80182a6:	b083      	sub	sp, #12
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	6039      	str	r1, [r7, #0]
	tpmsIdFl = newTpmsIdFl;
 80182ae:	4a04      	ldr	r2, [pc, #16]	; (80182c0 <_ZN5Model11setTpmsIdFlEi+0x1c>)
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	6013      	str	r3, [r2, #0]
}
 80182b4:	bf00      	nop
 80182b6:	370c      	adds	r7, #12
 80182b8:	46bd      	mov	sp, r7
 80182ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182be:	4770      	bx	lr
 80182c0:	2000004c 	.word	0x2000004c

080182c4 <_ZN5Model26setManualErrorChangeScreenEv>:


void Model::setManualErrorChangeScreen() {
 80182c4:	b480      	push	{r7}
 80182c6:	b083      	sub	sp, #12
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
	manualErrorScreenChange = true;
 80182cc:	4b04      	ldr	r3, [pc, #16]	; (80182e0 <_ZN5Model26setManualErrorChangeScreenEv+0x1c>)
 80182ce:	2201      	movs	r2, #1
 80182d0:	701a      	strb	r2, [r3, #0]
}
 80182d2:	bf00      	nop
 80182d4:	370c      	adds	r7, #12
 80182d6:	46bd      	mov	sp, r7
 80182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop
 80182e0:	200087b8 	.word	0x200087b8

080182e4 <_ZN21SecondScreenPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~SecondScreenPresenter() {
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	4a09      	ldr	r2, [pc, #36]	; (8018314 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	601a      	str	r2, [r3, #0]
 80182f2:	4a09      	ldr	r2, [pc, #36]	; (8018318 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	605a      	str	r2, [r3, #4]
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	3304      	adds	r3, #4
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ff f929 	bl	8017554 <_ZN13ModelListenerD1Ev>
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	4618      	mov	r0, r3
 8018306:	f7ff f8e1 	bl	80174cc <_ZN8touchgfx9PresenterD1Ev>
	}
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	4618      	mov	r0, r3
 801830e:	3708      	adds	r7, #8
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}
 8018314:	0802db44 	.word	0x0802db44
 8018318:	0802db64 	.word	0x0802db64

0801831c <_ZThn4_N21SecondScreenPresenterD1Ev>:
	virtual ~SecondScreenPresenter() {
 801831c:	f1a0 0004 	sub.w	r0, r0, #4
 8018320:	e7e0      	b.n	80182e4 <_ZN21SecondScreenPresenterD1Ev>
 8018322:	bf00      	nop

08018324 <_ZN21SecondScreenPresenterD0Ev>:
 8018324:	b580      	push	{r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
	}
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f7ff ffd9 	bl	80182e4 <_ZN21SecondScreenPresenterD1Ev>
 8018332:	2110      	movs	r1, #16
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f012 ff9a 	bl	802b26e <_ZdlPvj>
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	4618      	mov	r0, r3
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <_ZThn4_N21SecondScreenPresenterD0Ev>:
	virtual ~SecondScreenPresenter() {
 8018344:	f1a0 0004 	sub.w	r0, r0, #4
 8018348:	e7ec      	b.n	8018324 <_ZN21SecondScreenPresenterD0Ev>
	...

0801834c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 801834c:	b580      	push	{r7, lr}
 801834e:	b082      	sub	sp, #8
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	6039      	str	r1, [r7, #0]
    : view(v)
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	4618      	mov	r0, r3
 801835a:	f7ff f8d7 	bl	801750c <_ZN8touchgfx9PresenterC1Ev>
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	3304      	adds	r3, #4
 8018362:	4618      	mov	r0, r3
 8018364:	f7ff f8e2 	bl	801752c <_ZN13ModelListenerC1Ev>
 8018368:	4a06      	ldr	r2, [pc, #24]	; (8018384 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	601a      	str	r2, [r3, #0]
 801836e:	4a06      	ldr	r2, [pc, #24]	; (8018388 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	605a      	str	r2, [r3, #4]
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	683a      	ldr	r2, [r7, #0]
 8018378:	60da      	str	r2, [r3, #12]
{

}
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	4618      	mov	r0, r3
 801837e:	3708      	adds	r7, #8
 8018380:	46bd      	mov	sp, r7
 8018382:	bd80      	pop	{r7, pc}
 8018384:	0802db44 	.word	0x0802db44
 8018388:	0802db64 	.word	0x0802db64

0801838c <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
	model -> saveCurrentScreenIndex(2);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	689b      	ldr	r3, [r3, #8]
 8018398:	2102      	movs	r1, #2
 801839a:	4618      	mov	r0, r3
 801839c:	f7ff ff0a 	bl	80181b4 <_ZN5Model22saveCurrentScreenIndexEi>
}
 80183a0:	bf00      	nop
 80183a2:	3708      	adds	r7, #8
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}

080183a8 <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 80183a8:	b480      	push	{r7}
 80183aa:	b083      	sub	sp, #12
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]

}
 80183b0:	bf00      	nop
 80183b2:	370c      	adds	r7, #12
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <_ZN21SecondScreenPresenter11setNewValueEPh>:

void SecondScreenPresenter::setNewValue(uint8_t* newValue)
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	6839      	ldr	r1, [r7, #0]
 80183cc:	4618      	mov	r0, r3
 80183ce:	f000 f8f7 	bl	80185c0 <_ZN16SecondScreenView9updateValEPh>
}
 80183d2:	bf00      	nop
 80183d4:	3708      	adds	r7, #8
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bd80      	pop	{r7, pc}

080183da <_ZThn4_N21SecondScreenPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 80183da:	f1a0 0004 	sub.w	r0, r0, #4
 80183de:	f7ff bfed 	b.w	80183bc <_ZN21SecondScreenPresenter11setNewValueEPh>

080183e2 <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>:

void SecondScreenPresenter::updateDisplaySettings(uint8_t* settings)
{
 80183e2:	b580      	push	{r7, lr}
 80183e4:	b082      	sub	sp, #8
 80183e6:	af00      	add	r7, sp, #0
 80183e8:	6078      	str	r0, [r7, #4]
 80183ea:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	68db      	ldr	r3, [r3, #12]
 80183f0:	6839      	ldr	r1, [r7, #0]
 80183f2:	4618      	mov	r0, r3
 80183f4:	f000 f8d8 	bl	80185a8 <_ZN16SecondScreenView14updateSettingsEPh>
}
 80183f8:	bf00      	nop
 80183fa:	3708      	adds	r7, #8
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <_ZThn4_N21SecondScreenPresenter21updateDisplaySettingsEPh>:

	void updateDisplaySettings(uint8_t *settings);
 8018400:	f1a0 0004 	sub.w	r0, r0, #4
 8018404:	f7ff bfed 	b.w	80183e2 <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>

08018408 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>:

	void setManualErrorChangeScreen() {
 8018408:	b580      	push	{r7, lr}
 801840a:	b082      	sub	sp, #8
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
		model->setManualErrorChangeScreen();
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	689b      	ldr	r3, [r3, #8]
 8018414:	4618      	mov	r0, r3
 8018416:	f7ff ff55 	bl	80182c4 <_ZN5Model26setManualErrorChangeScreenEv>
	}
 801841a:	bf00      	nop
 801841c:	3708      	adds	r7, #8
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}

08018422 <_ZN21SecondScreenPresenter11getTpmsIdFrEv>:

	int getTpmsIdFr()
 8018422:	b580      	push	{r7, lr}
 8018424:	b082      	sub	sp, #8
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
	{
		model->getTpmsIdFr();
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	689b      	ldr	r3, [r3, #8]
 801842e:	4618      	mov	r0, r3
 8018430:	f7ff fed0 	bl	80181d4 <_ZN5Model11getTpmsIdFrEv>
	}
 8018434:	bf00      	nop
 8018436:	4618      	mov	r0, r3
 8018438:	3708      	adds	r7, #8
 801843a:	46bd      	mov	sp, r7
 801843c:	bd80      	pop	{r7, pc}

0801843e <_ZN21SecondScreenPresenter11getTpmsIdRrEv>:

	int getTpmsIdRr()
 801843e:	b580      	push	{r7, lr}
 8018440:	b082      	sub	sp, #8
 8018442:	af00      	add	r7, sp, #0
 8018444:	6078      	str	r0, [r7, #4]
	{
		model->getTpmsIdRr();
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	689b      	ldr	r3, [r3, #8]
 801844a:	4618      	mov	r0, r3
 801844c:	f7ff fed0 	bl	80181f0 <_ZN5Model11getTpmsIdRrEv>
	}
 8018450:	bf00      	nop
 8018452:	4618      	mov	r0, r3
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <_ZN21SecondScreenPresenter11getTpmsIdRlEv>:

	int getTpmsIdRl()
 801845a:	b580      	push	{r7, lr}
 801845c:	b082      	sub	sp, #8
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
	{
		model->getTpmsIdRl();
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	689b      	ldr	r3, [r3, #8]
 8018466:	4618      	mov	r0, r3
 8018468:	f7ff fed0 	bl	801820c <_ZN5Model11getTpmsIdRlEv>
	}
 801846c:	bf00      	nop
 801846e:	4618      	mov	r0, r3
 8018470:	3708      	adds	r7, #8
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}

08018476 <_ZN21SecondScreenPresenter11getTpmsIdFlEv>:

	int getTpmsIdFl()
 8018476:	b580      	push	{r7, lr}
 8018478:	b082      	sub	sp, #8
 801847a:	af00      	add	r7, sp, #0
 801847c:	6078      	str	r0, [r7, #4]
	{
		model->getTpmsIdFl();
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	689b      	ldr	r3, [r3, #8]
 8018482:	4618      	mov	r0, r3
 8018484:	f7ff fed0 	bl	8018228 <_ZN5Model11getTpmsIdFlEv>
	}
 8018488:	bf00      	nop
 801848a:	4618      	mov	r0, r3
 801848c:	3708      	adds	r7, #8
 801848e:	46bd      	mov	sp, r7
 8018490:	bd80      	pop	{r7, pc}

08018492 <_ZN21SecondScreenPresenter11setTpmsIdFrEi>:


	void setTpmsIdFr(int newTpmsIdFr)
 8018492:	b580      	push	{r7, lr}
 8018494:	b082      	sub	sp, #8
 8018496:	af00      	add	r7, sp, #0
 8018498:	6078      	str	r0, [r7, #4]
 801849a:	6039      	str	r1, [r7, #0]
	{
		model->setTpmsIdFr(newTpmsIdFr);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	689b      	ldr	r3, [r3, #8]
 80184a0:	6839      	ldr	r1, [r7, #0]
 80184a2:	4618      	mov	r0, r3
 80184a4:	f7ff fece 	bl	8018244 <_ZN5Model11setTpmsIdFrEi>
	}
 80184a8:	bf00      	nop
 80184aa:	3708      	adds	r7, #8
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <_ZN21SecondScreenPresenter11setTpmsIdRrEi>:

	void setTpmsIdRr(int newTpmsIdRr)
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
	{
		model->setTpmsIdRr(newTpmsIdRr);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	689b      	ldr	r3, [r3, #8]
 80184be:	6839      	ldr	r1, [r7, #0]
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7ff fecf 	bl	8018264 <_ZN5Model11setTpmsIdRrEi>
	}
 80184c6:	bf00      	nop
 80184c8:	3708      	adds	r7, #8
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}

080184ce <_ZN21SecondScreenPresenter11setTpmsIdRlEi>:

	void setTpmsIdRl(int newTpmsIdRl)
 80184ce:	b580      	push	{r7, lr}
 80184d0:	b082      	sub	sp, #8
 80184d2:	af00      	add	r7, sp, #0
 80184d4:	6078      	str	r0, [r7, #4]
 80184d6:	6039      	str	r1, [r7, #0]
	{
		model->setTpmsIdRl(newTpmsIdRl);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	689b      	ldr	r3, [r3, #8]
 80184dc:	6839      	ldr	r1, [r7, #0]
 80184de:	4618      	mov	r0, r3
 80184e0:	f7ff fed0 	bl	8018284 <_ZN5Model11setTpmsIdRlEi>
	}
 80184e4:	bf00      	nop
 80184e6:	3708      	adds	r7, #8
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}

080184ec <_ZN21SecondScreenPresenter11setTpmsIdFlEi>:

	void setTpmsIdFl(int newTpmsIdFl)
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
 80184f4:	6039      	str	r1, [r7, #0]
	{
		model->setTpmsIdFl(newTpmsIdFl);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	689b      	ldr	r3, [r3, #8]
 80184fa:	6839      	ldr	r1, [r7, #0]
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7ff fed1 	bl	80182a4 <_ZN5Model11setTpmsIdFlEi>
	}
 8018502:	bf00      	nop
 8018504:	3708      	adds	r7, #8
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}
	...

0801850c <_ZN16SecondScreenViewD1Ev>:
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

class SecondScreenView: public SecondScreenViewBase {
public:
	SecondScreenView();
	virtual ~SecondScreenView() {
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	4a05      	ldr	r2, [pc, #20]	; (801852c <_ZN16SecondScreenViewD1Ev+0x20>)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	601a      	str	r2, [r3, #0]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	4618      	mov	r0, r3
 801851e:	f7fd fb4d 	bl	8015bbc <_ZN20SecondScreenViewBaseD1Ev>
	}
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4618      	mov	r0, r3
 8018526:	3708      	adds	r7, #8
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}
 801852c:	0802db7c 	.word	0x0802db7c

08018530 <_ZN16SecondScreenViewD0Ev>:
	virtual ~SecondScreenView() {
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
	}
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ff ffe7 	bl	801850c <_ZN16SecondScreenViewD1Ev>
 801853e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	f012 fe93 	bl	802b26e <_ZdlPvj>
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	4618      	mov	r0, r3
 801854c:	3708      	adds	r7, #8
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}
	...

08018554 <_ZN16SecondScreenViewC1Ev>:



static int current_slider_index = 1;

SecondScreenView::SecondScreenView() {
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	4618      	mov	r0, r3
 8018560:	f7fd fc1c 	bl	8015d9c <_ZN20SecondScreenViewBaseC1Ev>
 8018564:	4a03      	ldr	r2, [pc, #12]	; (8018574 <_ZN16SecondScreenViewC1Ev+0x20>)
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	601a      	str	r2, [r3, #0]

}
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	4618      	mov	r0, r3
 801856e:	3708      	adds	r7, #8
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	0802db7c 	.word	0x0802db7c

08018578 <_ZN16SecondScreenView11setupScreenEv>:


void SecondScreenView::setupScreen() {
 8018578:	b580      	push	{r7, lr}
 801857a:	b082      	sub	sp, #8
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::setupScreen();
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	4618      	mov	r0, r3
 8018584:	f7fe f9be 	bl	8016904 <_ZN20SecondScreenViewBase11setupScreenEv>
}
 8018588:	bf00      	nop
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen() {
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::tearDownScreen();
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	4618      	mov	r0, r3
 801859c:	f7fa f902 	bl	80127a4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80185a0:	bf00      	nop
 80185a2:	3708      	adds	r7, #8
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}

080185a8 <_ZN16SecondScreenView14updateSettingsEPh>:

void SecondScreenView::updateSettings(uint8_t *settings) {
 80185a8:	b480      	push	{r7}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
 80185b0:	6039      	str	r1, [r7, #0]
}
 80185b2:	bf00      	nop
 80185b4:	370c      	adds	r7, #12
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr
	...

080185c0 <_ZN16SecondScreenView9updateValEPh>:
	}
}



void SecondScreenView::updateVal(uint8_t *newValue) {
 80185c0:	b590      	push	{r4, r7, lr}
 80185c2:	b085      	sub	sp, #20
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(FrIndexValueBuffer, FRINDEXVALUE_SIZE, "%d", presenter->getTpmsIdFr());
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f203 5484 	addw	r4, r3, #1412	; 0x584
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185d4:	4618      	mov	r0, r3
 80185d6:	f7ff ff24 	bl	8018422 <_ZN21SecondScreenPresenter11getTpmsIdFrEv>
 80185da:	4603      	mov	r3, r0
 80185dc:	4a2d      	ldr	r2, [pc, #180]	; (8018694 <_ZN16SecondScreenView9updateValEPh+0xd4>)
 80185de:	2102      	movs	r1, #2
 80185e0:	4620      	mov	r0, r4
 80185e2:	f008 fed7 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	FrIndexValue.invalidate();
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80185ec:	4618      	mov	r0, r3
 80185ee:	f007 fa69 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RrIndexValueBuffer, RRINDEXVALUE_SIZE, "%d", presenter->getTpmsIdRr());
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	f503 64b1 	add.w	r4, r3, #1416	; 0x588
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7ff ff1e 	bl	801843e <_ZN21SecondScreenPresenter11getTpmsIdRrEv>
 8018602:	4603      	mov	r3, r0
 8018604:	4a23      	ldr	r2, [pc, #140]	; (8018694 <_ZN16SecondScreenView9updateValEPh+0xd4>)
 8018606:	2102      	movs	r1, #2
 8018608:	4620      	mov	r0, r4
 801860a:	f008 fec3 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RrIndexValue.invalidate();
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8018614:	4618      	mov	r0, r3
 8018616:	f007 fa55 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RlIndexValueBuffer, RLINDEXVALUE_SIZE, "%d", presenter->getTpmsIdRl());
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f203 548c 	addw	r4, r3, #1420	; 0x58c
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018624:	4618      	mov	r0, r3
 8018626:	f7ff ff18 	bl	801845a <_ZN21SecondScreenPresenter11getTpmsIdRlEv>
 801862a:	4603      	mov	r3, r0
 801862c:	4a19      	ldr	r2, [pc, #100]	; (8018694 <_ZN16SecondScreenView9updateValEPh+0xd4>)
 801862e:	2102      	movs	r1, #2
 8018630:	4620      	mov	r0, r4
 8018632:	f008 feaf 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RlIndexValue.invalidate();
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 801863c:	4618      	mov	r0, r3
 801863e:	f007 fa41 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(FlIndexValueBuffer, FLINDEXVALUE_SIZE, "%d", presenter->getTpmsIdFl());
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801864c:	4618      	mov	r0, r3
 801864e:	f7ff ff12 	bl	8018476 <_ZN21SecondScreenPresenter11getTpmsIdFlEv>
 8018652:	4603      	mov	r3, r0
 8018654:	4a0f      	ldr	r2, [pc, #60]	; (8018694 <_ZN16SecondScreenView9updateValEPh+0xd4>)
 8018656:	2102      	movs	r1, #2
 8018658:	4620      	mov	r0, r4
 801865a:	f008 fe9b 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	FlIndexValue.invalidate();
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8018664:	4618      	mov	r0, r3
 8018666:	f007 fa2d 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>

	display_values *values = (display_values*) newValue;
 801866a:	683b      	ldr	r3, [r7, #0]
 801866c:	60fb      	str	r3, [r7, #12]

	Unicode::snprintf(SliderIndexvalueBuffer, SLIDERINDEXVALUE_SIZE, "%d", current_slider_index);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	f203 5094 	addw	r0, r3, #1428	; 0x594
 8018674:	4b08      	ldr	r3, [pc, #32]	; (8018698 <_ZN16SecondScreenView9updateValEPh+0xd8>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	4a06      	ldr	r2, [pc, #24]	; (8018694 <_ZN16SecondScreenView9updateValEPh+0xd4>)
 801867a:	2102      	movs	r1, #2
 801867c:	f008 fe8a 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	SliderIndexvalue.invalidate();
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8018686:	4618      	mov	r0, r3
 8018688:	f007 fa1c 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>


}
 801868c:	bf00      	nop
 801868e:	3714      	adds	r7, #20
 8018690:	46bd      	mov	sp, r7
 8018692:	bd90      	pop	{r4, r7, pc}
 8018694:	0802cba8 	.word	0x0802cba8
 8018698:	20000050 	.word	0x20000050

0801869c <_ZN16SecondScreenView16moveToMainScreenEv>:



void SecondScreenView::moveToMainScreen() {
 801869c:	b580      	push	{r7, lr}
 801869e:	b082      	sub	sp, #8
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
	presenter->setManualErrorChangeScreen();
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7ff fead 	bl	8018408 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>
}
 80186ae:	bf00      	nop
 80186b0:	3708      	adds	r7, #8
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}
	...

080186b8 <_ZN16SecondScreenView16tpmsIndexChangesEi>:

void SecondScreenView::tpmsIndexChanges(int value) {
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	6039      	str	r1, [r7, #0]
	current_slider_index = value;
 80186c2:	4a04      	ldr	r2, [pc, #16]	; (80186d4 <_ZN16SecondScreenView16tpmsIndexChangesEi+0x1c>)
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	6013      	str	r3, [r2, #0]
}
 80186c8:	bf00      	nop
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr
 80186d4:	20000050 	.word	0x20000050

080186d8 <_ZN16SecondScreenView10frSetIndexEv>:

void SecondScreenView::frSetIndex() {
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
	presenter->setTpmsIdFr(current_slider_index);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80186e4:	4b0c      	ldr	r3, [pc, #48]	; (8018718 <_ZN16SecondScreenView10frSetIndexEv+0x40>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	4619      	mov	r1, r3
 80186ea:	4610      	mov	r0, r2
 80186ec:	f7ff fed1 	bl	8018492 <_ZN21SecondScreenPresenter11setTpmsIdFrEi>
	Unicode::snprintf(FrIndexValueBuffer, FRINDEXVALUE_SIZE, "%d", current_slider_index);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f203 5084 	addw	r0, r3, #1412	; 0x584
 80186f6:	4b08      	ldr	r3, [pc, #32]	; (8018718 <_ZN16SecondScreenView10frSetIndexEv+0x40>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	4a08      	ldr	r2, [pc, #32]	; (801871c <_ZN16SecondScreenView10frSetIndexEv+0x44>)
 80186fc:	2102      	movs	r1, #2
 80186fe:	f008 fe49 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	FrIndexValue.invalidate();
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8018708:	4618      	mov	r0, r3
 801870a:	f007 f9db 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801870e:	bf00      	nop
 8018710:	3708      	adds	r7, #8
 8018712:	46bd      	mov	sp, r7
 8018714:	bd80      	pop	{r7, pc}
 8018716:	bf00      	nop
 8018718:	20000050 	.word	0x20000050
 801871c:	0802cba8 	.word	0x0802cba8

08018720 <_ZN16SecondScreenView10rrSetIndexEv>:

void SecondScreenView::rrSetIndex() {
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
	presenter->setTpmsIdRr(current_slider_index);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801872c:	4b0c      	ldr	r3, [pc, #48]	; (8018760 <_ZN16SecondScreenView10rrSetIndexEv+0x40>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	4619      	mov	r1, r3
 8018732:	4610      	mov	r0, r2
 8018734:	f7ff febc 	bl	80184b0 <_ZN21SecondScreenPresenter11setTpmsIdRrEi>
	Unicode::snprintf(RrIndexValueBuffer, RRINDEXVALUE_SIZE, "%d", current_slider_index);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	f503 60b1 	add.w	r0, r3, #1416	; 0x588
 801873e:	4b08      	ldr	r3, [pc, #32]	; (8018760 <_ZN16SecondScreenView10rrSetIndexEv+0x40>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	4a08      	ldr	r2, [pc, #32]	; (8018764 <_ZN16SecondScreenView10rrSetIndexEv+0x44>)
 8018744:	2102      	movs	r1, #2
 8018746:	f008 fe25 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RrIndexValue.invalidate();
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8018750:	4618      	mov	r0, r3
 8018752:	f007 f9b7 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8018756:	bf00      	nop
 8018758:	3708      	adds	r7, #8
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}
 801875e:	bf00      	nop
 8018760:	20000050 	.word	0x20000050
 8018764:	0802cba8 	.word	0x0802cba8

08018768 <_ZN16SecondScreenView10rlSetIndexEv>:

void SecondScreenView::rlSetIndex() {
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
	presenter->setTpmsIdRl(current_slider_index);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018774:	4b0c      	ldr	r3, [pc, #48]	; (80187a8 <_ZN16SecondScreenView10rlSetIndexEv+0x40>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	4619      	mov	r1, r3
 801877a:	4610      	mov	r0, r2
 801877c:	f7ff fea7 	bl	80184ce <_ZN21SecondScreenPresenter11setTpmsIdRlEi>
	Unicode::snprintf(RlIndexValueBuffer, RLINDEXVALUE_SIZE, "%d", current_slider_index);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f203 508c 	addw	r0, r3, #1420	; 0x58c
 8018786:	4b08      	ldr	r3, [pc, #32]	; (80187a8 <_ZN16SecondScreenView10rlSetIndexEv+0x40>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	4a08      	ldr	r2, [pc, #32]	; (80187ac <_ZN16SecondScreenView10rlSetIndexEv+0x44>)
 801878c:	2102      	movs	r1, #2
 801878e:	f008 fe01 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RlIndexValue.invalidate();
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8018798:	4618      	mov	r0, r3
 801879a:	f007 f993 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801879e:	bf00      	nop
 80187a0:	3708      	adds	r7, #8
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}
 80187a6:	bf00      	nop
 80187a8:	20000050 	.word	0x20000050
 80187ac:	0802cba8 	.word	0x0802cba8

080187b0 <_ZN16SecondScreenView10flSetIndexEv>:

void SecondScreenView::flSetIndex() {
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
	presenter->setTpmsIdFl(current_slider_index);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80187bc:	4b0c      	ldr	r3, [pc, #48]	; (80187f0 <_ZN16SecondScreenView10flSetIndexEv+0x40>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4619      	mov	r1, r3
 80187c2:	4610      	mov	r0, r2
 80187c4:	f7ff fe92 	bl	80184ec <_ZN21SecondScreenPresenter11setTpmsIdFlEi>
	Unicode::snprintf(FlIndexValueBuffer, FLINDEXVALUE_SIZE, "%d", current_slider_index);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	f503 60b2 	add.w	r0, r3, #1424	; 0x590
 80187ce:	4b08      	ldr	r3, [pc, #32]	; (80187f0 <_ZN16SecondScreenView10flSetIndexEv+0x40>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	4a08      	ldr	r2, [pc, #32]	; (80187f4 <_ZN16SecondScreenView10flSetIndexEv+0x44>)
 80187d4:	2102      	movs	r1, #2
 80187d6:	f008 fddd 	bl	8021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	FlIndexValue.invalidate();
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80187e0:	4618      	mov	r0, r3
 80187e2:	f007 f96f 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80187e6:	bf00      	nop
 80187e8:	3708      	adds	r7, #8
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	20000050 	.word	0x20000050
 80187f4:	0802cba8 	.word	0x0802cba8

080187f8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80187f8:	b480      	push	{r7}
 80187fa:	b083      	sub	sp, #12
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
    {
 8018800:	4a04      	ldr	r2, [pc, #16]	; (8018814 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	601a      	str	r2, [r3, #0]
    }
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4618      	mov	r0, r3
 801880a:	370c      	adds	r7, #12
 801880c:	46bd      	mov	sp, r7
 801880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018812:	4770      	bx	lr
 8018814:	0802dbe8 	.word	0x0802dbe8

08018818 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8018818:	b580      	push	{r7, lr}
 801881a:	b082      	sub	sp, #8
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
    }
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f7ff ffe9 	bl	80187f8 <_ZN8touchgfx15TouchControllerD1Ev>
 8018826:	2104      	movs	r1, #4
 8018828:	6878      	ldr	r0, [r7, #4]
 801882a:	f012 fd20 	bl	802b26e <_ZdlPvj>
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	4618      	mov	r0, r3
 8018832:	3708      	adds	r7, #8
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}

08018838 <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8018840:	f44f 7188 	mov.w	r1, #272	; 0x110
 8018844:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8018848:	f7f7 f8f8 	bl	800fa3c <BSP_TS_Init>
}
 801884c:	bf00      	nop
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b090      	sub	sp, #64	; 0x40
 8018858:	af00      	add	r7, sp, #0
 801885a:	60f8      	str	r0, [r7, #12]
 801885c:	60b9      	str	r1, [r7, #8]
 801885e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8018860:	f107 0314 	add.w	r3, r7, #20
 8018864:	222c      	movs	r2, #44	; 0x2c
 8018866:	2100      	movs	r1, #0
 8018868:	4618      	mov	r0, r3
 801886a:	f012 fdb4 	bl	802b3d6 <memset>
	    BSP_TS_GetState(&state);
 801886e:	f107 0314 	add.w	r3, r7, #20
 8018872:	4618      	mov	r0, r3
 8018874:	f7f7 f922 	bl	800fabc <BSP_TS_GetState>
	    if (state.touchDetected)
 8018878:	7d3b      	ldrb	r3, [r7, #20]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d009      	beq.n	8018892 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 801887e:	8afb      	ldrh	r3, [r7, #22]
 8018880:	461a      	mov	r2, r3
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 8018886:	8c3b      	ldrh	r3, [r7, #32]
 8018888:	461a      	mov	r2, r3
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	601a      	str	r2, [r3, #0]

	        return true;
 801888e:	2301      	movs	r3, #1
 8018890:	e000      	b.n	8018894 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 8018892:	2300      	movs	r3, #0
}
 8018894:	4618      	mov	r0, r3
 8018896:	3740      	adds	r7, #64	; 0x40
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}

0801889c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801889c:	b580      	push	{r7, lr}
 801889e:	b082      	sub	sp, #8
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
 80188a4:	4a05      	ldr	r2, [pc, #20]	; (80188bc <_ZN20STM32TouchControllerD1Ev+0x20>)
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	601a      	str	r2, [r3, #0]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7ff ffa3 	bl	80187f8 <_ZN8touchgfx15TouchControllerD1Ev>
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	4618      	mov	r0, r3
 80188b6:	3708      	adds	r7, #8
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	0802dbd0 	.word	0x0802dbd0

080188c0 <_ZN20STM32TouchControllerD0Ev>:
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f7ff ffe7 	bl	801889c <_ZN20STM32TouchControllerD1Ev>
 80188ce:	2104      	movs	r1, #4
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f012 fccc 	bl	802b26e <_ZdlPvj>
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	4618      	mov	r0, r3
 80188da:	3708      	adds	r7, #8
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80188e0:	b480      	push	{r7}
 80188e2:	b083      	sub	sp, #12
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	4603      	mov	r3, r0
 80188e8:	71fb      	strb	r3, [r7, #7]

}
 80188ea:	bf00      	nop
 80188ec:	370c      	adds	r7, #12
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr

080188f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80188f6:	b480      	push	{r7}
 80188f8:	b083      	sub	sp, #12
 80188fa:	af00      	add	r7, sp, #0
 80188fc:	4603      	mov	r3, r0
 80188fe:	71fb      	strb	r3, [r7, #7]

}
 8018900:	bf00      	nop
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801890c:	b480      	push	{r7}
 801890e:	b083      	sub	sp, #12
 8018910:	af00      	add	r7, sp, #0
 8018912:	4603      	mov	r3, r0
 8018914:	71fb      	strb	r3, [r7, #7]

}
 8018916:	bf00      	nop
 8018918:	370c      	adds	r7, #12
 801891a:	46bd      	mov	sp, r7
 801891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018920:	4770      	bx	lr
	...

08018924 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    {
 801892c:	4a04      	ldr	r2, [pc, #16]	; (8018940 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	601a      	str	r2, [r3, #0]
    }
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	4618      	mov	r0, r3
 8018936:	370c      	adds	r7, #12
 8018938:	46bd      	mov	sp, r7
 801893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893e:	4770      	bx	lr
 8018940:	0802ee28 	.word	0x0802ee28

08018944 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
    }
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7ff ffe9 	bl	8018924 <_ZN8touchgfx3HALD1Ev>
 8018952:	2178      	movs	r1, #120	; 0x78
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f012 fc8a 	bl	802b26e <_ZdlPvj>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	4618      	mov	r0, r3
 801895e:	3708      	adds	r7, #8
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
 801896c:	460b      	mov	r3, r1
 801896e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	78fa      	ldrb	r2, [r7, #3]
 8018974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	2201      	movs	r2, #1
 801897c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8018980:	bf00      	nop
 8018982:	370c      	adds	r7, #12
 8018984:	46bd      	mov	sp, r7
 8018986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898a:	4770      	bx	lr

0801898c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	685a      	ldr	r2, [r3, #4]
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	4610      	mov	r0, r2
 80189a2:	4798      	blx	r3
 80189a4:	4603      	mov	r3, r0
    }
 80189a6:	4618      	mov	r0, r3
 80189a8:	3708      	adds	r7, #8
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b082      	sub	sp, #8
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f003 fe8c 	bl	801c6d4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	3390      	adds	r3, #144	; 0x90
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	6878      	ldr	r0, [r7, #4]
 80189c6:	4798      	blx	r3
    }
 80189c8:	bf00      	nop
 80189ca:	3708      	adds	r7, #8
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}

080189d0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80189d0:	b480      	push	{r7}
 80189d2:	b083      	sub	sp, #12
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
 80189d8:	6039      	str	r1, [r7, #0]
    {
        return false;
 80189da:	2300      	movs	r3, #0
    }
 80189dc:	4618      	mov	r0, r3
 80189de:	370c      	adds	r7, #12
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr

080189e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80189e8:	b590      	push	{r4, r7, lr}
 80189ea:	b08b      	sub	sp, #44	; 0x2c
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	60f8      	str	r0, [r7, #12]
 80189f0:	60b9      	str	r1, [r7, #8]
 80189f2:	4611      	mov	r1, r2
 80189f4:	461a      	mov	r2, r3
 80189f6:	460b      	mov	r3, r1
 80189f8:	80fb      	strh	r3, [r7, #6]
 80189fa:	4613      	mov	r3, r2
 80189fc:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80189fe:	f7f8 f80f 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 8018a02:	4602      	mov	r2, r0
 8018a04:	6813      	ldr	r3, [r2, #0]
 8018a06:	3328      	adds	r3, #40	; 0x28
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4610      	mov	r0, r2
 8018a0c:	4798      	blx	r3
 8018a0e:	4603      	mov	r3, r0
 8018a10:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8018a12:	8b7b      	ldrh	r3, [r7, #26]
 8018a14:	4a3d      	ldr	r2, [pc, #244]	; (8018b0c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8018a16:	8812      	ldrh	r2, [r2, #0]
 8018a18:	fb02 f303 	mul.w	r3, r2, r3
 8018a1c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8018a22:	2300      	movs	r3, #0
 8018a24:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8018a26:	2300      	movs	r3, #0
 8018a28:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8018a2a:	797b      	ldrb	r3, [r7, #5]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d005      	beq.n	8018a3c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8018a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	4413      	add	r3, r2
 8018a36:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8018a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a3a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8018a3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d005      	beq.n	8018a50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8018a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	4413      	add	r3, r2
 8018a4a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8018a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a4e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8018a50:	88fb      	ldrh	r3, [r7, #6]
 8018a52:	3b01      	subs	r3, #1
 8018a54:	2b1f      	cmp	r3, #31
 8018a56:	d84d      	bhi.n	8018af4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8018a58:	a201      	add	r2, pc, #4	; (adr r2, 8018a60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8018a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a5e:	bf00      	nop
 8018a60:	08018ae1 	.word	0x08018ae1
 8018a64:	08018ae1 	.word	0x08018ae1
 8018a68:	08018af5 	.word	0x08018af5
 8018a6c:	08018ae1 	.word	0x08018ae1
 8018a70:	08018af5 	.word	0x08018af5
 8018a74:	08018af5 	.word	0x08018af5
 8018a78:	08018af5 	.word	0x08018af5
 8018a7c:	08018ae1 	.word	0x08018ae1
 8018a80:	08018af5 	.word	0x08018af5
 8018a84:	08018af5 	.word	0x08018af5
 8018a88:	08018af5 	.word	0x08018af5
 8018a8c:	08018af5 	.word	0x08018af5
 8018a90:	08018af5 	.word	0x08018af5
 8018a94:	08018af5 	.word	0x08018af5
 8018a98:	08018af5 	.word	0x08018af5
 8018a9c:	08018ae1 	.word	0x08018ae1
 8018aa0:	08018af5 	.word	0x08018af5
 8018aa4:	08018af5 	.word	0x08018af5
 8018aa8:	08018af5 	.word	0x08018af5
 8018aac:	08018af5 	.word	0x08018af5
 8018ab0:	08018af5 	.word	0x08018af5
 8018ab4:	08018af5 	.word	0x08018af5
 8018ab8:	08018af5 	.word	0x08018af5
 8018abc:	08018ae1 	.word	0x08018ae1
 8018ac0:	08018af5 	.word	0x08018af5
 8018ac4:	08018af5 	.word	0x08018af5
 8018ac8:	08018af5 	.word	0x08018af5
 8018acc:	08018af5 	.word	0x08018af5
 8018ad0:	08018af5 	.word	0x08018af5
 8018ad4:	08018af5 	.word	0x08018af5
 8018ad8:	08018af5 	.word	0x08018af5
 8018adc:	08018ae1 	.word	0x08018ae1
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	3374      	adds	r3, #116	; 0x74
 8018ae6:	681c      	ldr	r4, [r3, #0]
 8018ae8:	69fb      	ldr	r3, [r7, #28]
 8018aea:	6a3a      	ldr	r2, [r7, #32]
 8018aec:	68b9      	ldr	r1, [r7, #8]
 8018aee:	68f8      	ldr	r0, [r7, #12]
 8018af0:	47a0      	blx	r4
            break;
 8018af2:	e006      	b.n	8018b02 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8018af4:	4b06      	ldr	r3, [pc, #24]	; (8018b10 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8018af6:	4a07      	ldr	r2, [pc, #28]	; (8018b14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8018af8:	f240 3125 	movw	r1, #805	; 0x325
 8018afc:	4806      	ldr	r0, [pc, #24]	; (8018b18 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8018afe:	f012 fbe1 	bl	802b2c4 <__assert_func>
            break;
        }
    }
 8018b02:	bf00      	nop
 8018b04:	372c      	adds	r7, #44	; 0x2c
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd90      	pop	{r4, r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	2000bfca 	.word	0x2000bfca
 8018b10:	0802cbac 	.word	0x0802cbac
 8018b14:	0802dcfc 	.word	0x0802dcfc
 8018b18:	0802cbcc 	.word	0x0802cbcc

08018b1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	60f8      	str	r0, [r7, #12]
 8018b24:	60b9      	str	r1, [r7, #8]
 8018b26:	607a      	str	r2, [r7, #4]
 8018b28:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8018b2a:	68bb      	ldr	r3, [r7, #8]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d106      	bne.n	8018b3e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8018b30:	4b11      	ldr	r3, [pc, #68]	; (8018b78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8018b32:	4a12      	ldr	r2, [pc, #72]	; (8018b7c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8018b34:	f240 3137 	movw	r1, #823	; 0x337
 8018b38:	4811      	ldr	r0, [pc, #68]	; (8018b80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8018b3a:	f012 fbc3 	bl	802b2c4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	68ba      	ldr	r2, [r7, #8]
 8018b42:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	687a      	ldr	r2, [r7, #4]
 8018b48:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	683a      	ldr	r2, [r7, #0]
 8018b4e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	bf14      	ite	ne
 8018b56:	2301      	movne	r3, #1
 8018b58:	2300      	moveq	r3, #0
 8018b5a:	b2da      	uxtb	r2, r3
 8018b5c:	4b09      	ldr	r3, [pc, #36]	; (8018b84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8018b5e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	bf14      	ite	ne
 8018b66:	2301      	movne	r3, #1
 8018b68:	2300      	moveq	r3, #0
 8018b6a:	b2da      	uxtb	r2, r3
 8018b6c:	4b06      	ldr	r3, [pc, #24]	; (8018b88 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8018b6e:	701a      	strb	r2, [r3, #0]
    }
 8018b70:	bf00      	nop
 8018b72:	3710      	adds	r7, #16
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bd80      	pop	{r7, pc}
 8018b78:	0802cc10 	.word	0x0802cc10
 8018b7c:	0802dcac 	.word	0x0802dcac
 8018b80:	0802cbcc 	.word	0x0802cbcc
 8018b84:	2000bfcc 	.word	0x2000bfcc
 8018b88:	2000bfcd 	.word	0x2000bfcd

08018b8c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	460b      	mov	r3, r1
 8018b96:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d004      	beq.n	8018baa <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ba4:	887a      	ldrh	r2, [r7, #2]
 8018ba6:	4610      	mov	r0, r2
 8018ba8:	4798      	blx	r3
        }
    }
 8018baa:	bf00      	nop
 8018bac:	3708      	adds	r7, #8
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}

08018bb2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8018bb2:	b580      	push	{r7, lr}
 8018bb4:	b082      	sub	sp, #8
 8018bb6:	af00      	add	r7, sp, #0
 8018bb8:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	685a      	ldr	r2, [r3, #4]
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	3318      	adds	r3, #24
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4610      	mov	r0, r2
 8018bca:	4798      	blx	r3
 8018bcc:	4603      	mov	r3, r0
    }
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3708      	adds	r7, #8
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
	...

08018bd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8018bd8:	b480      	push	{r7}
 8018bda:	b083      	sub	sp, #12
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d017      	beq.n	8018c20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8018bf0:	4b1a      	ldr	r3, [pc, #104]	; (8018c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018bf2:	781b      	ldrb	r3, [r3, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d12a      	bne.n	8018c4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8018bf8:	4b19      	ldr	r3, [pc, #100]	; (8018c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018bfa:	881a      	ldrh	r2, [r3, #0]
 8018bfc:	4b19      	ldr	r3, [pc, #100]	; (8018c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018bfe:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018c00:	4b19      	ldr	r3, [pc, #100]	; (8018c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018c02:	881a      	ldrh	r2, [r3, #0]
 8018c04:	4b19      	ldr	r3, [pc, #100]	; (8018c6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018c06:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8018c08:	4b16      	ldr	r3, [pc, #88]	; (8018c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018c0a:	881a      	ldrh	r2, [r3, #0]
 8018c0c:	4b16      	ldr	r3, [pc, #88]	; (8018c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018c0e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8018c10:	4b16      	ldr	r3, [pc, #88]	; (8018c6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018c12:	881a      	ldrh	r2, [r3, #0]
 8018c14:	4b12      	ldr	r3, [pc, #72]	; (8018c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018c16:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8018c18:	4b10      	ldr	r3, [pc, #64]	; (8018c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018c1a:	2201      	movs	r2, #1
 8018c1c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8018c1e:	e016      	b.n	8018c4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8018c20:	4b0e      	ldr	r3, [pc, #56]	; (8018c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018c22:	781b      	ldrb	r3, [r3, #0]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d012      	beq.n	8018c4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8018c28:	4b0f      	ldr	r3, [pc, #60]	; (8018c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018c2a:	881a      	ldrh	r2, [r3, #0]
 8018c2c:	4b0d      	ldr	r3, [pc, #52]	; (8018c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018c2e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8018c30:	4b0b      	ldr	r3, [pc, #44]	; (8018c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018c32:	881a      	ldrh	r2, [r3, #0]
 8018c34:	4b0d      	ldr	r3, [pc, #52]	; (8018c6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018c36:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8018c38:	4b0c      	ldr	r3, [pc, #48]	; (8018c6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018c3a:	881a      	ldrh	r2, [r3, #0]
 8018c3c:	4b0a      	ldr	r3, [pc, #40]	; (8018c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018c3e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8018c40:	4b08      	ldr	r3, [pc, #32]	; (8018c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018c42:	881a      	ldrh	r2, [r3, #0]
 8018c44:	4b06      	ldr	r3, [pc, #24]	; (8018c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018c46:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8018c48:	4b04      	ldr	r3, [pc, #16]	; (8018c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	701a      	strb	r2, [r3, #0]
    }
 8018c4e:	bf00      	nop
 8018c50:	370c      	adds	r7, #12
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop
 8018c5c:	2000bfc6 	.word	0x2000bfc6
 8018c60:	2000bfc2 	.word	0x2000bfc2
 8018c64:	2000bfc8 	.word	0x2000bfc8
 8018c68:	2000bfc4 	.word	0x2000bfc4
 8018c6c:	2000bfca 	.word	0x2000bfca

08018c70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b082      	sub	sp, #8
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f002 ffac 	bl	801bbd8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8018c80:	bf00      	nop
 8018c82:	3708      	adds	r7, #8
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}

08018c88 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	4a05      	ldr	r2, [pc, #20]	; (8018ca8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	601a      	str	r2, [r3, #0]
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7ff fe43 	bl	8018924 <_ZN8touchgfx3HALD1Ev>
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3708      	adds	r7, #8
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}
 8018ca8:	0802ded4 	.word	0x0802ded4

08018cac <_ZN20TouchGFXGeneratedHALD0Ev>:
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	6878      	ldr	r0, [r7, #4]
 8018cb6:	f7ff ffe7 	bl	8018c88 <_ZN20TouchGFXGeneratedHALD1Ev>
 8018cba:	2178      	movs	r1, #120	; 0x78
 8018cbc:	6878      	ldr	r0, [r7, #4]
 8018cbe:	f012 fad6 	bl	802b26e <_ZdlPvj>
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}

08018ccc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b082      	sub	sp, #8
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7ff ffca 	bl	8018c70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8018cdc:	bf00      	nop
 8018cde:	3708      	adds	r7, #8
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b082      	sub	sp, #8
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f001 fb04 	bl	801a2fc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8018cf4:	bf00      	nop
 8018cf6:	3708      	adds	r7, #8
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}

08018cfc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b082      	sub	sp, #8
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	4618      	mov	r0, r3
 8018d08:	f001 fb84 	bl	801a414 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8018d0c:	4603      	mov	r3, r0
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3708      	adds	r7, #8
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}

08018d16 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b082      	sub	sp, #8
 8018d1a:	af00      	add	r7, sp, #0
 8018d1c:	6078      	str	r0, [r7, #4]
 8018d1e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	6839      	ldr	r1, [r7, #0]
 8018d24:	4618      	mov	r0, r3
 8018d26:	f001 fb83 	bl	801a430 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8018d2a:	bf00      	nop
 8018d2c:	3708      	adds	r7, #8
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}

08018d32 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8018d32:	b580      	push	{r7, lr}
 8018d34:	b082      	sub	sp, #8
 8018d36:	af00      	add	r7, sp, #0
 8018d38:	6078      	str	r0, [r7, #4]
 8018d3a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6839      	ldr	r1, [r7, #0]
 8018d40:	4618      	mov	r0, r3
 8018d42:	f001 fb8b 	bl	801a45c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8018d46:	bf00      	nop
 8018d48:	3708      	adds	r7, #8
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}

08018d4e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8018d4e:	b580      	push	{r7, lr}
 8018d50:	b082      	sub	sp, #8
 8018d52:	af00      	add	r7, sp, #0
 8018d54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	4618      	mov	r0, r3
 8018d5a:	f001 fb01 	bl	801a360 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8018d5e:	bf00      	nop
 8018d60:	3708      	adds	r7, #8
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}

08018d66 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8018d66:	b580      	push	{r7, lr}
 8018d68:	b082      	sub	sp, #8
 8018d6a:	af00      	add	r7, sp, #0
 8018d6c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	4618      	mov	r0, r3
 8018d72:	f001 fb05 	bl	801a380 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8018d76:	bf00      	nop
 8018d78:	3708      	adds	r7, #8
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}

08018d7e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8018d7e:	b580      	push	{r7, lr}
 8018d80:	b082      	sub	sp, #8
 8018d82:	af00      	add	r7, sp, #0
 8018d84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f001 fb07 	bl	801a39c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8018d8e:	bf00      	nop
 8018d90:	3708      	adds	r7, #8
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}

08018d96 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8018d96:	b580      	push	{r7, lr}
 8018d98:	b082      	sub	sp, #8
 8018d9a:	af00      	add	r7, sp, #0
 8018d9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	4618      	mov	r0, r3
 8018da2:	f001 fb09 	bl	801a3b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8018da6:	bf00      	nop
 8018da8:	3708      	adds	r7, #8
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
	...

08018db0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b082      	sub	sp, #8
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	4a05      	ldr	r2, [pc, #20]	; (8018dd0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	601a      	str	r2, [r3, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7ff ff61 	bl	8018c88 <_ZN20TouchGFXGeneratedHALD1Ev>
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	4618      	mov	r0, r3
 8018dca:	3708      	adds	r7, #8
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}
 8018dd0:	0802dc00 	.word	0x0802dc00

08018dd4 <_ZN11TouchGFXHALD0Ev>:
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	6878      	ldr	r0, [r7, #4]
 8018dde:	f7ff ffe7 	bl	8018db0 <_ZN11TouchGFXHALD1Ev>
 8018de2:	2178      	movs	r1, #120	; 0x78
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f012 fa42 	bl	802b26e <_ZdlPvj>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	4618      	mov	r0, r3
 8018dee:	3708      	adds	r7, #8
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8018df8:	2203      	movs	r2, #3
 8018dfa:	2100      	movs	r1, #0
 8018dfc:	2001      	movs	r0, #1
 8018dfe:	f7f4 f9d6 	bl	800d1ae <xQueueGenericCreate>
 8018e02:	4602      	mov	r2, r0
 8018e04:	4b0b      	ldr	r3, [pc, #44]	; (8018e34 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018e06:	601a      	str	r2, [r3, #0]
 8018e08:	4b0a      	ldr	r3, [pc, #40]	; (8018e34 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d006      	beq.n	8018e1e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8018e10:	4b08      	ldr	r3, [pc, #32]	; (8018e34 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018e12:	6818      	ldr	r0, [r3, #0]
 8018e14:	2300      	movs	r3, #0
 8018e16:	2200      	movs	r2, #0
 8018e18:	2100      	movs	r1, #0
 8018e1a:	f7f4 fa29 	bl	800d270 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8018e1e:	2200      	movs	r2, #0
 8018e20:	2101      	movs	r1, #1
 8018e22:	2001      	movs	r0, #1
 8018e24:	f7f4 f9c3 	bl	800d1ae <xQueueGenericCreate>
 8018e28:	4602      	mov	r2, r0
 8018e2a:	4b03      	ldr	r3, [pc, #12]	; (8018e38 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8018e2c:	601a      	str	r2, [r3, #0]
}
 8018e2e:	bf00      	nop
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	200087c4 	.word	0x200087c4
 8018e38:	200087c8 	.word	0x200087c8

08018e3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8018e40:	4b04      	ldr	r3, [pc, #16]	; (8018e54 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	f04f 31ff 	mov.w	r1, #4294967295
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7f4 fd23 	bl	800d894 <xQueueSemaphoreTake>
}
 8018e4e:	bf00      	nop
 8018e50:	bd80      	pop	{r7, pc}
 8018e52:	bf00      	nop
 8018e54:	200087c4 	.word	0x200087c4

08018e58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8018e5c:	4b04      	ldr	r3, [pc, #16]	; (8018e70 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8018e5e:	6818      	ldr	r0, [r3, #0]
 8018e60:	2300      	movs	r3, #0
 8018e62:	2200      	movs	r2, #0
 8018e64:	2100      	movs	r1, #0
 8018e66:	f7f4 fa03 	bl	800d270 <xQueueGenericSend>
}
 8018e6a:	bf00      	nop
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	200087c4 	.word	0x200087c4

08018e74 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8018e78:	4b03      	ldr	r3, [pc, #12]	; (8018e88 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f7f4 fd08 	bl	800d894 <xQueueSemaphoreTake>
}
 8018e84:	bf00      	nop
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	200087c4 	.word	0x200087c4

08018e8c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b082      	sub	sp, #8
 8018e90:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8018e92:	2300      	movs	r3, #0
 8018e94:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8018e96:	4b0b      	ldr	r3, [pc, #44]	; (8018ec4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	1d3a      	adds	r2, r7, #4
 8018e9c:	4611      	mov	r1, r2
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f7f4 fb84 	bl	800d5ac <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d007      	beq.n	8018eba <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8018eaa:	4b07      	ldr	r3, [pc, #28]	; (8018ec8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8018eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018eb0:	601a      	str	r2, [r3, #0]
 8018eb2:	f3bf 8f4f 	dsb	sy
 8018eb6:	f3bf 8f6f 	isb	sy
}
 8018eba:	bf00      	nop
 8018ebc:	3708      	adds	r7, #8
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	200087c4 	.word	0x200087c4
 8018ec8:	e000ed04 	.word	0xe000ed04

08018ecc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b082      	sub	sp, #8
 8018ed0:	af00      	add	r7, sp, #0
    if (vsync_q)
 8018ed2:	4b0e      	ldr	r3, [pc, #56]	; (8018f0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d013      	beq.n	8018f02 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8018eda:	2300      	movs	r3, #0
 8018edc:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8018ede:	4b0b      	ldr	r3, [pc, #44]	; (8018f0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018ee0:	6818      	ldr	r0, [r3, #0]
 8018ee2:	1d3a      	adds	r2, r7, #4
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	490a      	ldr	r1, [pc, #40]	; (8018f10 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8018ee8:	f7f4 fac4 	bl	800d474 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d007      	beq.n	8018f02 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8018ef2:	4b08      	ldr	r3, [pc, #32]	; (8018f14 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8018ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ef8:	601a      	str	r2, [r3, #0]
 8018efa:	f3bf 8f4f 	dsb	sy
 8018efe:	f3bf 8f6f 	isb	sy
    }
}
 8018f02:	bf00      	nop
 8018f04:	3708      	adds	r7, #8
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}
 8018f0a:	bf00      	nop
 8018f0c:	200087c8 	.word	0x200087c8
 8018f10:	20000054 	.word	0x20000054
 8018f14:	e000ed04 	.word	0xe000ed04

08018f18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8018f1c:	4b08      	ldr	r3, [pc, #32]	; (8018f40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2200      	movs	r2, #0
 8018f22:	4908      	ldr	r1, [pc, #32]	; (8018f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f4 fbd3 	bl	800d6d0 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8018f2a:	4b05      	ldr	r3, [pc, #20]	; (8018f40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8018f32:	4904      	ldr	r1, [pc, #16]	; (8018f44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7f4 fbcb 	bl	800d6d0 <xQueueReceive>
}
 8018f3a:	bf00      	nop
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	200087c8 	.word	0x200087c8
 8018f44:	20000054 	.word	0x20000054

08018f48 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	4603      	mov	r3, r0
 8018f50:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8018f52:	88fb      	ldrh	r3, [r7, #6]
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7f5 f8fb 	bl	800e150 <vTaskDelay>
}
 8018f5a:	bf00      	nop
 8018f5c:	3708      	adds	r7, #8
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}
	...

08018f64 <__NVIC_EnableIRQ>:
{
 8018f64:	b480      	push	{r7}
 8018f66:	b083      	sub	sp, #12
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	db0d      	blt.n	8018f92 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f7a:	b2db      	uxtb	r3, r3
 8018f7c:	f003 021f 	and.w	r2, r3, #31
 8018f80:	4907      	ldr	r1, [pc, #28]	; (8018fa0 <__NVIC_EnableIRQ+0x3c>)
 8018f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f86:	095b      	lsrs	r3, r3, #5
 8018f88:	2001      	movs	r0, #1
 8018f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8018f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018f92:	bf00      	nop
 8018f94:	370c      	adds	r7, #12
 8018f96:	46bd      	mov	sp, r7
 8018f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9c:	4770      	bx	lr
 8018f9e:	bf00      	nop
 8018fa0:	e000e100 	.word	0xe000e100

08018fa4 <__NVIC_DisableIRQ>:
{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b083      	sub	sp, #12
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	4603      	mov	r3, r0
 8018fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	db12      	blt.n	8018fdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	f003 021f 	and.w	r2, r3, #31
 8018fc0:	4909      	ldr	r1, [pc, #36]	; (8018fe8 <__NVIC_DisableIRQ+0x44>)
 8018fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018fc6:	095b      	lsrs	r3, r3, #5
 8018fc8:	2001      	movs	r0, #1
 8018fca:	fa00 f202 	lsl.w	r2, r0, r2
 8018fce:	3320      	adds	r3, #32
 8018fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018fd8:	f3bf 8f6f 	isb	sy
}
 8018fdc:	bf00      	nop
 8018fde:	370c      	adds	r7, #12
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe6:	4770      	bx	lr
 8018fe8:	e000e100 	.word	0xe000e100

08018fec <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8018fec:	b480      	push	{r7}
 8018fee:	b083      	sub	sp, #12
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
        return color;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
    }
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	370c      	adds	r7, #12
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019002:	4770      	bx	lr

08019004 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	b29b      	uxth	r3, r3
    }
 8019012:	4618      	mov	r0, r3
 8019014:	370c      	adds	r7, #12
 8019016:	46bd      	mov	sp, r7
 8019018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901c:	4770      	bx	lr
	...

08019020 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8019020:	b480      	push	{r7}
 8019022:	b083      	sub	sp, #12
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
    {
 8019028:	4a04      	ldr	r2, [pc, #16]	; (801903c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	601a      	str	r2, [r3, #0]
    }
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	4618      	mov	r0, r3
 8019032:	370c      	adds	r7, #12
 8019034:	46bd      	mov	sp, r7
 8019036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903a:	4770      	bx	lr
 801903c:	0802dda8 	.word	0x0802dda8

08019040 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
    }
 8019048:	6878      	ldr	r0, [r7, #4]
 801904a:	f7ff ffe9 	bl	8019020 <_ZN8touchgfx9DMA_QueueD1Ev>
 801904e:	2104      	movs	r1, #4
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f012 f90c 	bl	802b26e <_ZdlPvj>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	4618      	mov	r0, r3
 801905a:	3708      	adds	r7, #8
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}

08019060 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8019060:	b580      	push	{r7, lr}
 8019062:	b082      	sub	sp, #8
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	3344      	adds	r3, #68	; 0x44
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	6878      	ldr	r0, [r7, #4]
 8019072:	4798      	blx	r3
    }
 8019074:	bf00      	nop
 8019076:	3708      	adds	r7, #8
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 801907c:	b480      	push	{r7}
 801907e:	b083      	sub	sp, #12
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8019084:	2300      	movs	r3, #0
    }
 8019086:	4618      	mov	r0, r3
 8019088:	370c      	adds	r7, #12
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr
	...

08019094 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8019094:	b480      	push	{r7}
 8019096:	b083      	sub	sp, #12
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
    {
 801909c:	4a04      	ldr	r2, [pc, #16]	; (80190b0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	601a      	str	r2, [r3, #0]
    }
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	4618      	mov	r0, r3
 80190a6:	370c      	adds	r7, #12
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr
 80190b0:	0802f26c 	.word	0x0802f26c

080190b4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
    }
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f7ff ffe9 	bl	8019094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80190c2:	210c      	movs	r1, #12
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f012 f8d2 	bl	802b26e <_ZdlPvj>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	4618      	mov	r0, r3
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80190d4:	b480      	push	{r7}
 80190d6:	b083      	sub	sp, #12
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80190de:	4a09      	ldr	r2, [pc, #36]	; (8019104 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	601a      	str	r2, [r3, #0]
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	683a      	ldr	r2, [r7, #0]
 80190e8:	605a      	str	r2, [r3, #4]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2200      	movs	r2, #0
 80190ee:	721a      	strb	r2, [r3, #8]
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2200      	movs	r2, #0
 80190f4:	725a      	strb	r2, [r3, #9]
    {
    }
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	4618      	mov	r0, r3
 80190fa:	370c      	adds	r7, #12
 80190fc:	46bd      	mov	sp, r7
 80190fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019102:	4770      	bx	lr
 8019104:	0802f26c 	.word	0x0802f26c

08019108 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8019108:	b580      	push	{r7, lr}
 801910a:	b082      	sub	sp, #8
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	685a      	ldr	r2, [r3, #4]
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	685b      	ldr	r3, [r3, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	3314      	adds	r3, #20
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	4610      	mov	r0, r2
 8019120:	4798      	blx	r3
    }
 8019122:	bf00      	nop
 8019124:	3708      	adds	r7, #8
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}

0801912a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801912a:	b580      	push	{r7, lr}
 801912c:	b082      	sub	sp, #8
 801912e:	af00      	add	r7, sp, #0
 8019130:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8019132:	687a      	ldr	r2, [r7, #4]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	3328      	adds	r3, #40	; 0x28
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4610      	mov	r0, r2
 801913e:	4798      	blx	r3
    }
 8019140:	bf00      	nop
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}

08019148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8019148:	b480      	push	{r7}
 801914a:	b085      	sub	sp, #20
 801914c:	af00      	add	r7, sp, #0
 801914e:	60f8      	str	r0, [r7, #12]
 8019150:	60b9      	str	r1, [r7, #8]
 8019152:	607a      	str	r2, [r7, #4]
 8019154:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8019160:	68ba      	ldr	r2, [r7, #8]
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	430a      	orrs	r2, r1
 8019168:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019170:	f023 0107 	bic.w	r1, r3, #7
 8019174:	687a      	ldr	r2, [r7, #4]
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	430a      	orrs	r2, r1
 801917c:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019184:	4b06      	ldr	r3, [pc, #24]	; (80191a0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8019186:	4013      	ands	r3, r2
 8019188:	6839      	ldr	r1, [r7, #0]
 801918a:	68fa      	ldr	r2, [r7, #12]
 801918c:	6812      	ldr	r2, [r2, #0]
 801918e:	430b      	orrs	r3, r1
 8019190:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8019192:	2300      	movs	r3, #0
}
 8019194:	4618      	mov	r0, r3
 8019196:	3714      	adds	r7, #20
 8019198:	46bd      	mov	sp, r7
 801919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919e:	4770      	bx	lr
 80191a0:	ffffc000 	.word	0xffffc000

080191a4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80191ac:	f7f7 fc2c 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 80191b0:	4603      	mov	r3, r0
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7ff ffa8 	bl	8019108 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80191b8:	bf00      	nop
 80191ba:	3708      	adds	r7, #8
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b082      	sub	sp, #8
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
    assert(0);
 80191c8:	4b02      	ldr	r3, [pc, #8]	; (80191d4 <DMA2D_XferErrorCallback+0x14>)
 80191ca:	4a03      	ldr	r2, [pc, #12]	; (80191d8 <DMA2D_XferErrorCallback+0x18>)
 80191cc:	213e      	movs	r1, #62	; 0x3e
 80191ce:	4803      	ldr	r0, [pc, #12]	; (80191dc <DMA2D_XferErrorCallback+0x1c>)
 80191d0:	f012 f878 	bl	802b2c4 <__assert_func>
 80191d4:	0802cc48 	.word	0x0802cc48
 80191d8:	0802ddc4 	.word	0x0802ddc4
 80191dc:	0802cc4c 	.word	0x0802cc4c

080191e0 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b082      	sub	sp, #8
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	3318      	adds	r3, #24
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7f9 f894 	bl	801231a <_ZN8touchgfx9colortypeC1Ev>
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	4618      	mov	r0, r3
 80191f6:	3708      	adds	r7, #8
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80191fc:	b5b0      	push	{r4, r5, r7, lr}
 80191fe:	b082      	sub	sp, #8
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	330c      	adds	r3, #12
 801920a:	4619      	mov	r1, r3
 801920c:	4610      	mov	r0, r2
 801920e:	f7ff ff61 	bl	80190d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8019212:	4a0e      	ldr	r2, [pc, #56]	; (801924c <_ZN10STM32F7DMAC1Ev+0x50>)
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	601a      	str	r2, [r3, #0]
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	f103 000c 	add.w	r0, r3, #12
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	3320      	adds	r3, #32
 8019222:	2260      	movs	r2, #96	; 0x60
 8019224:	4619      	mov	r1, r3
 8019226:	f003 fb7b 	bl	801c920 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	3320      	adds	r3, #32
 801922e:	245f      	movs	r4, #95	; 0x5f
 8019230:	461d      	mov	r5, r3
 8019232:	2c00      	cmp	r4, #0
 8019234:	db05      	blt.n	8019242 <_ZN10STM32F7DMAC1Ev+0x46>
 8019236:	4628      	mov	r0, r5
 8019238:	f7ff ffd2 	bl	80191e0 <_ZN8touchgfx6BlitOpC1Ev>
 801923c:	3520      	adds	r5, #32
 801923e:	3c01      	subs	r4, #1
 8019240:	e7f7      	b.n	8019232 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	4618      	mov	r0, r3
 8019246:	3708      	adds	r7, #8
 8019248:	46bd      	mov	sp, r7
 801924a:	bdb0      	pop	{r4, r5, r7, pc}
 801924c:	0802dd58 	.word	0x0802dd58

08019250 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	4a0b      	ldr	r2, [pc, #44]	; (8019288 <_ZN10STM32F7DMAD1Ev+0x38>)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801925e:	480b      	ldr	r0, [pc, #44]	; (801928c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8019260:	f7eb fe3a 	bl	8004ed8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8019264:	205a      	movs	r0, #90	; 0x5a
 8019266:	f7ff fe9d 	bl	8018fa4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	330c      	adds	r3, #12
 801926e:	4618      	mov	r0, r3
 8019270:	f000 faa0 	bl	80197b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	4618      	mov	r0, r3
 8019278:	f7ff ff0c 	bl	8019094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	4618      	mov	r0, r3
 8019280:	3708      	adds	r7, #8
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	0802dd58 	.word	0x0802dd58
 801928c:	2000c43c 	.word	0x2000c43c

08019290 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
}
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7ff ffd9 	bl	8019250 <_ZN10STM32F7DMAD1Ev>
 801929e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f011 ffe3 	bl	802b26e <_ZdlPvj>
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	4618      	mov	r0, r3
 80192ac:	3708      	adds	r7, #8
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
	...

080192b4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80192bc:	4b09      	ldr	r3, [pc, #36]	; (80192e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80192be:	4a0a      	ldr	r2, [pc, #40]	; (80192e8 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80192c0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80192c2:	4808      	ldr	r0, [pc, #32]	; (80192e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80192c4:	f7eb fdbe 	bl	8004e44 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80192c8:	4b06      	ldr	r3, [pc, #24]	; (80192e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80192ca:	4a08      	ldr	r2, [pc, #32]	; (80192ec <_ZN10STM32F7DMA10initializeEv+0x38>)
 80192cc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80192ce:	4b05      	ldr	r3, [pc, #20]	; (80192e4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80192d0:	4a07      	ldr	r2, [pc, #28]	; (80192f0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80192d2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80192d4:	205a      	movs	r0, #90	; 0x5a
 80192d6:	f7ff fe45 	bl	8018f64 <__NVIC_EnableIRQ>
}
 80192da:	bf00      	nop
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}
 80192e2:	bf00      	nop
 80192e4:	2000c43c 	.word	0x2000c43c
 80192e8:	4002b000 	.word	0x4002b000
 80192ec:	080191a5 	.word	0x080191a5
 80192f0:	080191c1 	.word	0x080191c1

080192f4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80192f4:	b480      	push	{r7}
 80192f6:	b083      	sub	sp, #12
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80192fc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8019300:	4618      	mov	r0, r3
 8019302:	370c      	adds	r7, #12
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr

0801930c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801930c:	b590      	push	{r4, r7, lr}
 801930e:	b08d      	sub	sp, #52	; 0x34
 8019310:	af02      	add	r7, sp, #8
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8019316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801931a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801931c:	2300      	movs	r3, #0
 801931e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8019324:	2b20      	cmp	r3, #32
 8019326:	d007      	beq.n	8019338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8019328:	683b      	ldr	r3, [r7, #0]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	2b40      	cmp	r3, #64	; 0x40
 801932e:	d003      	beq.n	8019338 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	2b04      	cmp	r3, #4
 8019336:	d101      	bne.n	801933c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8019338:	2301      	movs	r3, #1
 801933a:	e000      	b.n	801933e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801933c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801933e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8019344:	2b80      	cmp	r3, #128	; 0x80
 8019346:	d004      	beq.n	8019352 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019350:	d101      	bne.n	8019356 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8019352:	2301      	movs	r3, #1
 8019354:	e000      	b.n	8019358 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8019356:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8019358:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801935a:	f7f7 fb61 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801935e:	4602      	mov	r2, r0
 8019360:	6813      	ldr	r3, [r2, #0]
 8019362:	3320      	adds	r3, #32
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	4610      	mov	r0, r2
 8019368:	4798      	blx	r3
 801936a:	4603      	mov	r3, r0
 801936c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	2b40      	cmp	r3, #64	; 0x40
 8019374:	d01d      	beq.n	80193b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8019376:	2b40      	cmp	r3, #64	; 0x40
 8019378:	d804      	bhi.n	8019384 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801937a:	2b04      	cmp	r3, #4
 801937c:	d00e      	beq.n	801939c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801937e:	2b20      	cmp	r3, #32
 8019380:	d017      	beq.n	80193b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8019382:	e019      	b.n	80193b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8019384:	2b80      	cmp	r3, #128	; 0x80
 8019386:	d003      	beq.n	8019390 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8019388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801938c:	d003      	beq.n	8019396 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801938e:	e013      	b.n	80193b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8019390:	230a      	movs	r3, #10
 8019392:	623b      	str	r3, [r7, #32]
        break;
 8019394:	e01a      	b.n	80193cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8019396:	2309      	movs	r3, #9
 8019398:	623b      	str	r3, [r7, #32]
        break;
 801939a:	e017      	b.n	80193cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801939c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80193a0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80193a2:	7f7b      	ldrb	r3, [r7, #29]
 80193a4:	2b10      	cmp	r3, #16
 80193a6:	d101      	bne.n	80193ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80193a8:	2302      	movs	r3, #2
 80193aa:	e000      	b.n	80193ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80193ac:	2301      	movs	r3, #1
 80193ae:	623b      	str	r3, [r7, #32]
        break;
 80193b0:	e00c      	b.n	80193cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80193b2:	2300      	movs	r3, #0
 80193b4:	623b      	str	r3, [r7, #32]
        break;
 80193b6:	e009      	b.n	80193cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80193b8:	2300      	movs	r3, #0
 80193ba:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80193bc:	7f7b      	ldrb	r3, [r7, #29]
 80193be:	2b10      	cmp	r3, #16
 80193c0:	d101      	bne.n	80193c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80193c2:	2302      	movs	r3, #2
 80193c4:	e000      	b.n	80193c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80193c6:	2301      	movs	r3, #1
 80193c8:	623b      	str	r3, [r7, #32]
        break;
 80193ca:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80193cc:	4a76      	ldr	r2, [pc, #472]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80193ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d0:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80193d2:	7f7b      	ldrb	r3, [r7, #29]
 80193d4:	2b10      	cmp	r3, #16
 80193d6:	d101      	bne.n	80193dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80193d8:	2302      	movs	r3, #2
 80193da:	e000      	b.n	80193de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80193dc:	2301      	movs	r3, #1
 80193de:	4a72      	ldr	r2, [pc, #456]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80193e0:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	8adb      	ldrh	r3, [r3, #22]
 80193e6:	461a      	mov	r2, r3
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	8a1b      	ldrh	r3, [r3, #16]
 80193ec:	1ad3      	subs	r3, r2, r3
 80193ee:	461a      	mov	r2, r3
 80193f0:	4b6d      	ldr	r3, [pc, #436]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80193f2:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80193f4:	7f7b      	ldrb	r3, [r7, #29]
 80193f6:	2b10      	cmp	r3, #16
 80193f8:	d101      	bne.n	80193fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80193fa:	2202      	movs	r2, #2
 80193fc:	e000      	b.n	8019400 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80193fe:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	8adb      	ldrh	r3, [r3, #22]
 8019404:	4619      	mov	r1, r3
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	8a1b      	ldrh	r3, [r3, #16]
 801940a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801940c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801940e:	4866      	ldr	r0, [pc, #408]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019410:	f7ff fe9a 	bl	8019148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8019414:	4a64      	ldr	r2, [pc, #400]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019416:	6a3b      	ldr	r3, [r7, #32]
 8019418:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	8a9b      	ldrh	r3, [r3, #20]
 801941e:	461a      	mov	r2, r3
 8019420:	683b      	ldr	r3, [r7, #0]
 8019422:	8a1b      	ldrh	r3, [r3, #16]
 8019424:	1ad3      	subs	r3, r2, r3
 8019426:	461a      	mov	r2, r3
 8019428:	4b5f      	ldr	r3, [pc, #380]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801942a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801942c:	7ffb      	ldrb	r3, [r7, #31]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d103      	bne.n	801943a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8019432:	7fbb      	ldrb	r3, [r7, #30]
 8019434:	2b00      	cmp	r3, #0
 8019436:	f000 8082 	beq.w	801953e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	7f1b      	ldrb	r3, [r3, #28]
 801943e:	2bff      	cmp	r3, #255	; 0xff
 8019440:	d008      	beq.n	8019454 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8019442:	4b59      	ldr	r3, [pc, #356]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019444:	2202      	movs	r2, #2
 8019446:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	7f1b      	ldrb	r3, [r3, #28]
 801944c:	461a      	mov	r2, r3
 801944e:	4b56      	ldr	r3, [pc, #344]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019450:	635a      	str	r2, [r3, #52]	; 0x34
 8019452:	e002      	b.n	801945a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8019454:	4b54      	ldr	r3, [pc, #336]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019456:	2200      	movs	r2, #0
 8019458:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801945a:	7fbb      	ldrb	r3, [r7, #30]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d059      	beq.n	8019514 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8019460:	7f7b      	ldrb	r3, [r7, #29]
 8019462:	2b10      	cmp	r3, #16
 8019464:	d14a      	bne.n	80194fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	3318      	adds	r3, #24
 801946a:	4618      	mov	r0, r3
 801946c:	f7ff fdca 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 8019470:	4603      	mov	r3, r0
 8019472:	12db      	asrs	r3, r3, #11
 8019474:	f003 021f 	and.w	r2, r3, #31
 8019478:	4613      	mov	r3, r2
 801947a:	021b      	lsls	r3, r3, #8
 801947c:	1a9b      	subs	r3, r3, r2
 801947e:	4a4b      	ldr	r2, [pc, #300]	; (80195ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8019480:	fb82 1203 	smull	r1, r2, r2, r3
 8019484:	441a      	add	r2, r3
 8019486:	1112      	asrs	r2, r2, #4
 8019488:	17db      	asrs	r3, r3, #31
 801948a:	1ad3      	subs	r3, r2, r3
 801948c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	3318      	adds	r3, #24
 8019492:	4618      	mov	r0, r3
 8019494:	f7ff fdb6 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 8019498:	4603      	mov	r3, r0
 801949a:	115b      	asrs	r3, r3, #5
 801949c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80194a0:	4613      	mov	r3, r2
 80194a2:	021b      	lsls	r3, r3, #8
 80194a4:	1a9b      	subs	r3, r3, r2
 80194a6:	4a42      	ldr	r2, [pc, #264]	; (80195b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80194a8:	fb82 1203 	smull	r1, r2, r2, r3
 80194ac:	441a      	add	r2, r3
 80194ae:	1152      	asrs	r2, r2, #5
 80194b0:	17db      	asrs	r3, r3, #31
 80194b2:	1ad3      	subs	r3, r2, r3
 80194b4:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	3318      	adds	r3, #24
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7ff fda2 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 80194c0:	4603      	mov	r3, r0
 80194c2:	f003 021f 	and.w	r2, r3, #31
 80194c6:	4613      	mov	r3, r2
 80194c8:	021b      	lsls	r3, r3, #8
 80194ca:	1a9b      	subs	r3, r3, r2
 80194cc:	4a37      	ldr	r2, [pc, #220]	; (80195ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80194ce:	fb82 1203 	smull	r1, r2, r2, r3
 80194d2:	441a      	add	r2, r3
 80194d4:	1112      	asrs	r2, r2, #4
 80194d6:	17db      	asrs	r3, r3, #31
 80194d8:	1ad3      	subs	r3, r2, r3
 80194da:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	7f1b      	ldrb	r3, [r3, #28]
 80194e0:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	061a      	lsls	r2, r3, #24
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	041b      	lsls	r3, r3, #16
 80194ea:	431a      	orrs	r2, r3
 80194ec:	697b      	ldr	r3, [r7, #20]
 80194ee:	021b      	lsls	r3, r3, #8
 80194f0:	431a      	orrs	r2, r3
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	4313      	orrs	r3, r2
 80194f6:	4a2c      	ldr	r2, [pc, #176]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80194f8:	6353      	str	r3, [r2, #52]	; 0x34
 80194fa:	e00b      	b.n	8019514 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	3318      	adds	r3, #24
 8019500:	4618      	mov	r0, r3
 8019502:	f7ff fd73 	bl	8018fec <_ZNK8touchgfx9colortype10getColor32Ev>
 8019506:	4602      	mov	r2, r0
 8019508:	683b      	ldr	r3, [r7, #0]
 801950a:	7f1b      	ldrb	r3, [r3, #28]
 801950c:	061b      	lsls	r3, r3, #24
 801950e:	4313      	orrs	r3, r2
 8019510:	4a25      	ldr	r2, [pc, #148]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019512:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	8adb      	ldrh	r3, [r3, #22]
 8019518:	461a      	mov	r2, r3
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	8a1b      	ldrh	r3, [r3, #16]
 801951e:	1ad3      	subs	r3, r2, r3
 8019520:	461a      	mov	r2, r3
 8019522:	4b21      	ldr	r3, [pc, #132]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019524:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019526:	7f7b      	ldrb	r3, [r7, #29]
 8019528:	2b10      	cmp	r3, #16
 801952a:	d101      	bne.n	8019530 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801952c:	2302      	movs	r3, #2
 801952e:	e000      	b.n	8019532 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8019530:	2301      	movs	r3, #1
 8019532:	4a1d      	ldr	r2, [pc, #116]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019534:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8019536:	2100      	movs	r1, #0
 8019538:	481b      	ldr	r0, [pc, #108]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801953a:	f7eb ff4d 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801953e:	2101      	movs	r1, #1
 8019540:	4819      	ldr	r0, [pc, #100]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019542:	f7eb ff49 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8019546:	7ffb      	ldrb	r3, [r7, #31]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d102      	bne.n	8019552 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 801954c:	7fbb      	ldrb	r3, [r7, #30]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d015      	beq.n	801957e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8019552:	683b      	ldr	r3, [r7, #0]
 8019554:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019556:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801955c:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801955e:	683b      	ldr	r3, [r7, #0]
 8019560:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019562:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019568:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801956e:	9301      	str	r3, [sp, #4]
 8019570:	9200      	str	r2, [sp, #0]
 8019572:	4623      	mov	r3, r4
 8019574:	4602      	mov	r2, r0
 8019576:	480c      	ldr	r0, [pc, #48]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019578:	f7eb fd51 	bl	800501e <HAL_DMA2D_BlendingStart_IT>
 801957c:	e00f      	b.n	801959e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019582:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019588:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 801958e:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019594:	9300      	str	r3, [sp, #0]
 8019596:	4603      	mov	r3, r0
 8019598:	4803      	ldr	r0, [pc, #12]	; (80195a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801959a:	f7eb fd0d 	bl	8004fb8 <HAL_DMA2D_Start_IT>
    }
}
 801959e:	bf00      	nop
 80195a0:	372c      	adds	r7, #44	; 0x2c
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd90      	pop	{r4, r7, pc}
 80195a6:	bf00      	nop
 80195a8:	2000c43c 	.word	0x2000c43c
 80195ac:	84210843 	.word	0x84210843
 80195b0:	82082083 	.word	0x82082083

080195b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80195b4:	b590      	push	{r4, r7, lr}
 80195b6:	b08d      	sub	sp, #52	; 0x34
 80195b8:	af02      	add	r7, sp, #8
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80195be:	f7f7 fa2f 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 80195c2:	4602      	mov	r2, r0
 80195c4:	6813      	ldr	r3, [r2, #0]
 80195c6:	3320      	adds	r3, #32
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	4610      	mov	r0, r2
 80195cc:	4798      	blx	r3
 80195ce:	4603      	mov	r3, r0
 80195d0:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80195d2:	7ffb      	ldrb	r3, [r7, #31]
 80195d4:	2b10      	cmp	r3, #16
 80195d6:	d101      	bne.n	80195dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80195d8:	2302      	movs	r3, #2
 80195da:	e000      	b.n	80195de <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80195dc:	2301      	movs	r3, #1
 80195de:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80195e0:	2300      	movs	r3, #0
 80195e2:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80195e4:	7ffb      	ldrb	r3, [r7, #31]
 80195e6:	2b10      	cmp	r3, #16
 80195e8:	d149      	bne.n	801967e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	3318      	adds	r3, #24
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7ff fd08 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 80195f4:	4603      	mov	r3, r0
 80195f6:	12db      	asrs	r3, r3, #11
 80195f8:	f003 021f 	and.w	r2, r3, #31
 80195fc:	4613      	mov	r3, r2
 80195fe:	021b      	lsls	r3, r3, #8
 8019600:	1a9b      	subs	r3, r3, r2
 8019602:	4a69      	ldr	r2, [pc, #420]	; (80197a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8019604:	fb82 1203 	smull	r1, r2, r2, r3
 8019608:	441a      	add	r2, r3
 801960a:	1112      	asrs	r2, r2, #4
 801960c:	17db      	asrs	r3, r3, #31
 801960e:	1ad3      	subs	r3, r2, r3
 8019610:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8019612:	683b      	ldr	r3, [r7, #0]
 8019614:	3318      	adds	r3, #24
 8019616:	4618      	mov	r0, r3
 8019618:	f7ff fcf4 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 801961c:	4603      	mov	r3, r0
 801961e:	115b      	asrs	r3, r3, #5
 8019620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019624:	4613      	mov	r3, r2
 8019626:	021b      	lsls	r3, r3, #8
 8019628:	1a9b      	subs	r3, r3, r2
 801962a:	4a60      	ldr	r2, [pc, #384]	; (80197ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801962c:	fb82 1203 	smull	r1, r2, r2, r3
 8019630:	441a      	add	r2, r3
 8019632:	1152      	asrs	r2, r2, #5
 8019634:	17db      	asrs	r3, r3, #31
 8019636:	1ad3      	subs	r3, r2, r3
 8019638:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	3318      	adds	r3, #24
 801963e:	4618      	mov	r0, r3
 8019640:	f7ff fce0 	bl	8019004 <_ZNK8touchgfx9colortypecvtEv>
 8019644:	4603      	mov	r3, r0
 8019646:	f003 021f 	and.w	r2, r3, #31
 801964a:	4613      	mov	r3, r2
 801964c:	021b      	lsls	r3, r3, #8
 801964e:	1a9b      	subs	r3, r3, r2
 8019650:	4a55      	ldr	r2, [pc, #340]	; (80197a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8019652:	fb82 1203 	smull	r1, r2, r2, r3
 8019656:	441a      	add	r2, r3
 8019658:	1112      	asrs	r2, r2, #4
 801965a:	17db      	asrs	r3, r3, #31
 801965c:	1ad3      	subs	r3, r2, r3
 801965e:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	7f1b      	ldrb	r3, [r3, #28]
 8019664:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	061a      	lsls	r2, r3, #24
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	041b      	lsls	r3, r3, #16
 801966e:	431a      	orrs	r2, r3
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	021b      	lsls	r3, r3, #8
 8019674:	4313      	orrs	r3, r2
 8019676:	68fa      	ldr	r2, [r7, #12]
 8019678:	4313      	orrs	r3, r2
 801967a:	623b      	str	r3, [r7, #32]
 801967c:	e00b      	b.n	8019696 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	7f1b      	ldrb	r3, [r3, #28]
 8019682:	061b      	lsls	r3, r3, #24
 8019684:	461c      	mov	r4, r3
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	3318      	adds	r3, #24
 801968a:	4618      	mov	r0, r3
 801968c:	f7ff fcae 	bl	8018fec <_ZNK8touchgfx9colortype10getColor32Ev>
 8019690:	4603      	mov	r3, r0
 8019692:	4323      	orrs	r3, r4
 8019694:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	2b08      	cmp	r3, #8
 801969c:	d103      	bne.n	80196a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801969e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80196a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80196a4:	e003      	b.n	80196ae <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80196a6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80196aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80196ac:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80196ae:	4a40      	ldr	r2, [pc, #256]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80196b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b2:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80196b4:	7ffb      	ldrb	r3, [r7, #31]
 80196b6:	2b10      	cmp	r3, #16
 80196b8:	d101      	bne.n	80196be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80196ba:	2302      	movs	r3, #2
 80196bc:	e000      	b.n	80196c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80196be:	2301      	movs	r3, #1
 80196c0:	4a3b      	ldr	r2, [pc, #236]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80196c2:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	8adb      	ldrh	r3, [r3, #22]
 80196c8:	461a      	mov	r2, r3
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	8a1b      	ldrh	r3, [r3, #16]
 80196ce:	1ad3      	subs	r3, r2, r3
 80196d0:	461a      	mov	r2, r3
 80196d2:	4b37      	ldr	r3, [pc, #220]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80196d4:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80196d6:	7ffb      	ldrb	r3, [r7, #31]
 80196d8:	2b10      	cmp	r3, #16
 80196da:	d101      	bne.n	80196e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80196dc:	2202      	movs	r2, #2
 80196de:	e000      	b.n	80196e2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80196e0:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	8adb      	ldrh	r3, [r3, #22]
 80196e6:	4619      	mov	r1, r3
 80196e8:	683b      	ldr	r3, [r7, #0]
 80196ea:	8a1b      	ldrh	r3, [r3, #16]
 80196ec:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80196ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196f0:	482f      	ldr	r0, [pc, #188]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80196f2:	f7ff fd29 	bl	8019148 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80196f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80196fc:	d11e      	bne.n	801973c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80196fe:	4b2c      	ldr	r3, [pc, #176]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019700:	2201      	movs	r2, #1
 8019702:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8019704:	4a2a      	ldr	r2, [pc, #168]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019706:	6a3b      	ldr	r3, [r7, #32]
 8019708:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801970a:	4b29      	ldr	r3, [pc, #164]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801970c:	2209      	movs	r2, #9
 801970e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	8adb      	ldrh	r3, [r3, #22]
 8019714:	461a      	mov	r2, r3
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	8a1b      	ldrh	r3, [r3, #16]
 801971a:	1ad3      	subs	r3, r2, r3
 801971c:	461a      	mov	r2, r3
 801971e:	4b24      	ldr	r3, [pc, #144]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019720:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019722:	7ffb      	ldrb	r3, [r7, #31]
 8019724:	2b10      	cmp	r3, #16
 8019726:	d101      	bne.n	801972c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8019728:	2302      	movs	r3, #2
 801972a:	e000      	b.n	801972e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 801972c:	2301      	movs	r3, #1
 801972e:	4a20      	ldr	r2, [pc, #128]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019730:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8019732:	2100      	movs	r1, #0
 8019734:	481e      	ldr	r0, [pc, #120]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019736:	f7eb fe4f 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
 801973a:	e005      	b.n	8019748 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801973c:	4a1c      	ldr	r2, [pc, #112]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801973e:	69bb      	ldr	r3, [r7, #24]
 8019740:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8019742:	4b1b      	ldr	r3, [pc, #108]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019744:	2200      	movs	r2, #0
 8019746:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8019748:	2101      	movs	r1, #1
 801974a:	4819      	ldr	r0, [pc, #100]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801974c:	f7eb fe44 	bl	80053d8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8019750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8019756:	d115      	bne.n	8019784 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801975c:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019762:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8019764:	683b      	ldr	r3, [r7, #0]
 8019766:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019768:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801976e:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8019770:	683b      	ldr	r3, [r7, #0]
 8019772:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8019774:	9301      	str	r3, [sp, #4]
 8019776:	9200      	str	r2, [sp, #0]
 8019778:	4623      	mov	r3, r4
 801977a:	4602      	mov	r2, r0
 801977c:	480c      	ldr	r0, [pc, #48]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801977e:	f7eb fc4e 	bl	800501e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8019782:	e00d      	b.n	80197a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019784:	683b      	ldr	r3, [r7, #0]
 8019786:	68db      	ldr	r3, [r3, #12]
 8019788:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801978e:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019794:	9300      	str	r3, [sp, #0]
 8019796:	460b      	mov	r3, r1
 8019798:	6a39      	ldr	r1, [r7, #32]
 801979a:	4805      	ldr	r0, [pc, #20]	; (80197b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801979c:	f7eb fc0c 	bl	8004fb8 <HAL_DMA2D_Start_IT>
}
 80197a0:	bf00      	nop
 80197a2:	372c      	adds	r7, #44	; 0x2c
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bd90      	pop	{r4, r7, pc}
 80197a8:	84210843 	.word	0x84210843
 80197ac:	82082083 	.word	0x82082083
 80197b0:	2000c43c 	.word	0x2000c43c

080197b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b082      	sub	sp, #8
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	4a05      	ldr	r2, [pc, #20]	; (80197d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	601a      	str	r2, [r3, #0]
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7ff fc2b 	bl	8019020 <_ZN8touchgfx9DMA_QueueD1Ev>
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	4618      	mov	r0, r3
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	0802f2bc 	.word	0x0802f2bc

080197d8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	6878      	ldr	r0, [r7, #4]
 80197e2:	f7ff ffe7 	bl	80197b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80197e6:	2114      	movs	r1, #20
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	f011 fd40 	bl	802b26e <_ZdlPvj>
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	4618      	mov	r0, r3
 80197f2:	3708      	adds	r7, #8
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}

080197f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80197f8:	b480      	push	{r7}
 80197fa:	b083      	sub	sp, #12
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
        texts = t;
 8019800:	4a04      	ldr	r2, [pc, #16]	; (8019814 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	6013      	str	r3, [r2, #0]
    }
 8019806:	bf00      	nop
 8019808:	370c      	adds	r7, #12
 801980a:	46bd      	mov	sp, r7
 801980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019810:	4770      	bx	lr
 8019812:	bf00      	nop
 8019814:	2000c06c 	.word	0x2000c06c

08019818 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8019818:	b480      	push	{r7}
 801981a:	b085      	sub	sp, #20
 801981c:	af00      	add	r7, sp, #0
 801981e:	60f8      	str	r0, [r7, #12]
 8019820:	60b9      	str	r1, [r7, #8]
 8019822:	607a      	str	r2, [r7, #4]
 8019824:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8019826:	4a0b      	ldr	r2, [pc, #44]	; (8019854 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	601a      	str	r2, [r3, #0]
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	68ba      	ldr	r2, [r7, #8]
 8019830:	605a      	str	r2, [r3, #4]
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	609a      	str	r2, [r3, #8]
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	683a      	ldr	r2, [r7, #0]
 801983c:	60da      	str	r2, [r3, #12]
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	69ba      	ldr	r2, [r7, #24]
 8019842:	611a      	str	r2, [r3, #16]
    {
    }
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	4618      	mov	r0, r3
 8019848:	3714      	adds	r7, #20
 801984a:	46bd      	mov	sp, r7
 801984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019850:	4770      	bx	lr
 8019852:	bf00      	nop
 8019854:	0802dec4 	.word	0x0802dec4

08019858 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8019858:	b480      	push	{r7}
 801985a:	b083      	sub	sp, #12
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
    {
 8019860:	4a04      	ldr	r2, [pc, #16]	; (8019874 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	601a      	str	r2, [r3, #0]
    }
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	4618      	mov	r0, r3
 801986a:	370c      	adds	r7, #12
 801986c:	46bd      	mov	sp, r7
 801986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019872:	4770      	bx	lr
 8019874:	0802dec4 	.word	0x0802dec4

08019878 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
    }
 8019880:	6878      	ldr	r0, [r7, #4]
 8019882:	f7ff ffe9 	bl	8019858 <_ZN8touchgfx7MVPHeapD1Ev>
 8019886:	2114      	movs	r1, #20
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f011 fcf0 	bl	802b26e <_ZdlPvj>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	4618      	mov	r0, r3
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
    {
 80198a0:	4a04      	ldr	r2, [pc, #16]	; (80198b4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	601a      	str	r2, [r3, #0]
    }
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	4618      	mov	r0, r3
 80198aa:	370c      	adds	r7, #12
 80198ac:	46bd      	mov	sp, r7
 80198ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b2:	4770      	bx	lr
 80198b4:	0802fdf8 	.word	0x0802fdf8

080198b8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b082      	sub	sp, #8
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
    }
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f7ff ffe9 	bl	8019898 <_ZN8touchgfx3LCDD1Ev>
 80198c6:	2108      	movs	r1, #8
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f011 fcd0 	bl	802b26e <_ZdlPvj>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	4618      	mov	r0, r3
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}

080198d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80198d8:	b480      	push	{r7}
 80198da:	b083      	sub	sp, #12
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2200      	movs	r2, #0
 80198e4:	801a      	strh	r2, [r3, #0]
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2200      	movs	r2, #0
 80198ea:	805a      	strh	r2, [r3, #2]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2200      	movs	r2, #0
 80198f0:	809a      	strh	r2, [r3, #4]
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	80da      	strh	r2, [r3, #6]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2200      	movs	r2, #0
 80198fc:	811a      	strh	r2, [r3, #8]
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	2200      	movs	r2, #0
 8019902:	815a      	strh	r2, [r3, #10]
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2200      	movs	r2, #0
 8019908:	819a      	strh	r2, [r3, #12]
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	2200      	movs	r2, #0
 801990e:	739a      	strb	r2, [r3, #14]
        {
        }
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	4618      	mov	r0, r3
 8019914:	370c      	adds	r7, #12
 8019916:	46bd      	mov	sp, r7
 8019918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991c:	4770      	bx	lr

0801991e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801991e:	b580      	push	{r7, lr}
 8019920:	b082      	sub	sp, #8
 8019922:	af00      	add	r7, sp, #0
 8019924:	6078      	str	r0, [r7, #4]
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	4618      	mov	r0, r3
 801992a:	f7ff ffd5 	bl	80198d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2200      	movs	r2, #0
 8019932:	611a      	str	r2, [r3, #16]
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	2200      	movs	r2, #0
 8019938:	829a      	strh	r2, [r3, #20]
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	4618      	mov	r0, r3
 801993e:	3708      	adds	r7, #8
 8019940:	46bd      	mov	sp, r7
 8019942:	bd80      	pop	{r7, pc}

08019944 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8019944:	b580      	push	{r7, lr}
 8019946:	b084      	sub	sp, #16
 8019948:	af00      	add	r7, sp, #0
 801994a:	60f8      	str	r0, [r7, #12]
 801994c:	60b9      	str	r1, [r7, #8]
 801994e:	607a      	str	r2, [r7, #4]
 8019950:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8019952:	4a44      	ldr	r2, [pc, #272]	; (8019a64 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	601a      	str	r2, [r3, #0]
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	68ba      	ldr	r2, [r7, #8]
 801995c:	605a      	str	r2, [r3, #4]
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	687a      	ldr	r2, [r7, #4]
 8019962:	609a      	str	r2, [r3, #8]
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	683a      	ldr	r2, [r7, #0]
 8019968:	60da      	str	r2, [r3, #12]
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	2200      	movs	r2, #0
 801996e:	611a      	str	r2, [r3, #16]
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	2200      	movs	r2, #0
 8019974:	615a      	str	r2, [r3, #20]
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2200      	movs	r2, #0
 801997a:	619a      	str	r2, [r3, #24]
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	331c      	adds	r3, #28
 8019980:	4618      	mov	r0, r3
 8019982:	f7ff ffcc 	bl	801991e <_ZN8touchgfx8GesturesC1Ev>
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	2200      	movs	r2, #0
 801998a:	639a      	str	r2, [r3, #56]	; 0x38
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	2200      	movs	r2, #0
 8019990:	63da      	str	r2, [r3, #60]	; 0x3c
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	2200      	movs	r2, #0
 8019996:	641a      	str	r2, [r3, #64]	; 0x40
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	2200      	movs	r2, #0
 801999c:	645a      	str	r2, [r3, #68]	; 0x44
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	2200      	movs	r2, #0
 80199a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	2201      	movs	r2, #1
 80199aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	2201      	movs	r2, #1
 80199b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	2200      	movs	r2, #0
 80199ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	3350      	adds	r3, #80	; 0x50
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f8 fcc7 	bl	8012354 <_ZN8touchgfx4RectC1Ev>
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	2201      	movs	r2, #1
 80199ca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	2200      	movs	r2, #0
 80199d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	2200      	movs	r2, #0
 80199da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	2201      	movs	r2, #1
 80199e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2200      	movs	r2, #0
 80199ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2200      	movs	r2, #0
 80199f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	2200      	movs	r2, #0
 80199fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2200      	movs	r2, #0
 8019a02:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	2200      	movs	r2, #0
 8019a12:	671a      	str	r2, [r3, #112]	; 0x70
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	2200      	movs	r2, #0
 8019a18:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8019a1c:	4a12      	ldr	r2, [pc, #72]	; (8019a68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8019a22:	4a12      	ldr	r2, [pc, #72]	; (8019a6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8019a24:	8b3b      	ldrh	r3, [r7, #24]
 8019a26:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8019a28:	4a11      	ldr	r2, [pc, #68]	; (8019a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8019a2a:	8bbb      	ldrh	r3, [r7, #28]
 8019a2c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8019a2e:	4b11      	ldr	r3, [pc, #68]	; (8019a74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8019a30:	2200      	movs	r2, #0
 8019a32:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8019a34:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8019a36:	881a      	ldrh	r2, [r3, #0]
 8019a38:	4b0f      	ldr	r3, [pc, #60]	; (8019a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8019a3a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8019a3c:	4b0c      	ldr	r3, [pc, #48]	; (8019a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8019a3e:	881a      	ldrh	r2, [r3, #0]
 8019a40:	4b0e      	ldr	r3, [pc, #56]	; (8019a7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8019a42:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8019a44:	8b3a      	ldrh	r2, [r7, #24]
 8019a46:	8bbb      	ldrh	r3, [r7, #28]
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d301      	bcc.n	8019a50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	e000      	b.n	8019a52 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8019a50:	2201      	movs	r2, #1
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3710      	adds	r7, #16
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	bf00      	nop
 8019a64:	0802ee28 	.word	0x0802ee28
 8019a68:	2000bfd0 	.word	0x2000bfd0
 8019a6c:	2000bfc2 	.word	0x2000bfc2
 8019a70:	2000bfc4 	.word	0x2000bfc4
 8019a74:	2000bfc6 	.word	0x2000bfc6
 8019a78:	2000bfc8 	.word	0x2000bfc8
 8019a7c:	2000bfca 	.word	0x2000bfca

08019a80 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7f7 f9eb 	bl	8010e68 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8019a92:	bf00      	nop
 8019a94:	3708      	adds	r7, #8
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
	...

08019a9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b086      	sub	sp, #24
 8019aa0:	af02      	add	r7, sp, #8
 8019aa2:	60f8      	str	r0, [r7, #12]
 8019aa4:	60b9      	str	r1, [r7, #8]
 8019aa6:	607a      	str	r2, [r7, #4]
 8019aa8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8019aaa:	68f8      	ldr	r0, [r7, #12]
 8019aac:	69bb      	ldr	r3, [r7, #24]
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	68b9      	ldr	r1, [r7, #8]
 8019ab6:	f7ff feaf 	bl	8019818 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8019aba:	4a04      	ldr	r2, [pc, #16]	; (8019acc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	601a      	str	r2, [r3, #0]
    {

    }
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3710      	adds	r7, #16
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	0802deb0 	.word	0x0802deb0

08019ad0 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	4801      	ldr	r0, [pc, #4]	; (8019adc <__tcf_0+0xc>)
 8019ad6:	f000 f9d9 	bl	8019e8c <_ZN12FrontendHeapD1Ev>
 8019ada:	bd80      	pop	{r7, pc}
 8019adc:	200087cc 	.word	0x200087cc

08019ae0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8019ae4:	4b08      	ldr	r3, [pc, #32]	; (8019b08 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	f003 0301 	and.w	r3, r3, #1
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d108      	bne.n	8019b02 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8019af0:	4806      	ldr	r0, [pc, #24]	; (8019b0c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8019af2:	f000 f831 	bl	8019b58 <_ZN12FrontendHeapC1Ev>
 8019af6:	4b04      	ldr	r3, [pc, #16]	; (8019b08 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019af8:	2201      	movs	r2, #1
 8019afa:	601a      	str	r2, [r3, #0]
 8019afc:	4804      	ldr	r0, [pc, #16]	; (8019b10 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8019afe:	f011 fbff 	bl	802b300 <atexit>
        return instance;
 8019b02:	4b02      	ldr	r3, [pc, #8]	; (8019b0c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8019b04:	4618      	mov	r0, r3
 8019b06:	bd80      	pop	{r7, pc}
 8019b08:	2000b2bc 	.word	0x2000b2bc
 8019b0c:	200087cc 	.word	0x200087cc
 8019b10:	08019ad1 	.word	0x08019ad1

08019b14 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
 8019b1c:	4a05      	ldr	r2, [pc, #20]	; (8019b34 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	601a      	str	r2, [r3, #0]
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	4618      	mov	r0, r3
 8019b26:	f7ff fe97 	bl	8019858 <_ZN8touchgfx7MVPHeapD1Ev>
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	3708      	adds	r7, #8
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd80      	pop	{r7, pc}
 8019b34:	0802deb0 	.word	0x0802deb0

08019b38 <_ZN16FrontendHeapBaseD0Ev>:
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b082      	sub	sp, #8
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	f7ff ffe7 	bl	8019b14 <_ZN16FrontendHeapBaseD1Ev>
 8019b46:	2114      	movs	r1, #20
 8019b48:	6878      	ldr	r0, [r7, #4]
 8019b4a:	f011 fb90 	bl	802b26e <_ZdlPvj>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	4618      	mov	r0, r3
 8019b52:	3708      	adds	r7, #8
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8019b58:	b5b0      	push	{r4, r5, r7, lr}
 8019b5a:	b084      	sub	sp, #16
 8019b5c:	af02      	add	r7, sp, #8
 8019b5e:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8019b60:	6878      	ldr	r0, [r7, #4]
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	f103 0114 	add.w	r1, r3, #20
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f503 5525 	add.w	r5, r3, #10560	; 0x2940
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	f642 139c 	movw	r3, #10652	; 0x299c
 8019b7a:	4413      	add	r3, r2
 8019b7c:	9300      	str	r3, [sp, #0]
 8019b7e:	462b      	mov	r3, r5
 8019b80:	4622      	mov	r2, r4
 8019b82:	f7ff ff8b 	bl	8019a9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8019b86:	4a19      	ldr	r2, [pc, #100]	; (8019bec <_ZN12FrontendHeapC1Ev+0x94>)
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	601a      	str	r2, [r3, #0]
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	3314      	adds	r3, #20
 8019b90:	4618      	mov	r0, r3
 8019b92:	f000 f8dd 	bl	8019d50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	332c      	adds	r3, #44	; 0x2c
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f000 f90c 	bl	8019db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	f000 f93c 	bl	8019e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8019bac:	687a      	ldr	r2, [r7, #4]
 8019bae:	f642 139c 	movw	r3, #10652	; 0x299c
 8019bb2:	4413      	add	r3, r2
 8019bb4:	687a      	ldr	r2, [r7, #4]
 8019bb6:	f642 21ec 	movw	r1, #10988	; 0x2aec
 8019bba:	4411      	add	r1, r2
 8019bbc:	687a      	ldr	r2, [r7, #4]
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f7fd fc5a 	bl	8017478 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8019bc4:	687a      	ldr	r2, [r7, #4]
 8019bc6:	f642 23ec 	movw	r3, #10988	; 0x2aec
 8019bca:	4413      	add	r3, r2
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7fe fa8f 	bl	80180f0 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	687a      	ldr	r2, [r7, #4]
 8019bd6:	f642 139c 	movw	r3, #10652	; 0x299c
 8019bda:	4413      	add	r3, r2
 8019bdc:	4619      	mov	r1, r3
 8019bde:	f7ff ff4f 	bl	8019a80 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	4618      	mov	r0, r3
 8019be6:	3708      	adds	r7, #8
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bdb0      	pop	{r4, r5, r7, pc}
 8019bec:	0802de00 	.word	0x0802de00

08019bf0 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b082      	sub	sp, #8
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
    {
 8019bf8:	4a05      	ldr	r2, [pc, #20]	; (8019c10 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	601a      	str	r2, [r3, #0]
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	4618      	mov	r0, r3
 8019c02:	f7ff fe49 	bl	8019898 <_ZN8touchgfx3LCDD1Ev>
    }
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	4618      	mov	r0, r3
 8019c0a:	3708      	adds	r7, #8
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}
 8019c10:	080311d4 	.word	0x080311d4

08019c14 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    }
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f7ff ffe7 	bl	8019bf0 <_ZN8touchgfx8LCD24bppD1Ev>
 8019c22:	2158      	movs	r1, #88	; 0x58
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f011 fb22 	bl	802b26e <_ZdlPvj>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b086      	sub	sp, #24
 8019c38:	af02      	add	r7, sp, #8
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	607a      	str	r2, [r7, #4]
 8019c40:	603b      	str	r3, [r7, #0]
 8019c42:	68f8      	ldr	r0, [r7, #12]
 8019c44:	8bbb      	ldrh	r3, [r7, #28]
 8019c46:	9301      	str	r3, [sp, #4]
 8019c48:	8b3b      	ldrh	r3, [r7, #24]
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	68b9      	ldr	r1, [r7, #8]
 8019c52:	f7ff fe77 	bl	8019944 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8019c56:	4a04      	ldr	r2, [pc, #16]	; (8019c68 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	601a      	str	r2, [r3, #0]
    }
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3710      	adds	r7, #16
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	0802ded4 	.word	0x0802ded4

08019c6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b086      	sub	sp, #24
 8019c70:	af02      	add	r7, sp, #8
 8019c72:	60f8      	str	r0, [r7, #12]
 8019c74:	60b9      	str	r1, [r7, #8]
 8019c76:	607a      	str	r2, [r7, #4]
 8019c78:	603b      	str	r3, [r7, #0]
 8019c7a:	68f8      	ldr	r0, [r7, #12]
 8019c7c:	8bbb      	ldrh	r3, [r7, #28]
 8019c7e:	9301      	str	r3, [sp, #4]
 8019c80:	8b3b      	ldrh	r3, [r7, #24]
 8019c82:	9300      	str	r3, [sp, #0]
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	687a      	ldr	r2, [r7, #4]
 8019c88:	68b9      	ldr	r1, [r7, #8]
 8019c8a:	f7ff ffd3 	bl	8019c34 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8019c8e:	4a04      	ldr	r2, [pc, #16]	; (8019ca0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	601a      	str	r2, [r3, #0]
    }
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	4618      	mov	r0, r3
 8019c98:	3710      	adds	r7, #16
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	0802dc00 	.word	0x0802dc00

08019ca4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8019ca4:	b480      	push	{r7}
 8019ca6:	b083      	sub	sp, #12
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	4a04      	ldr	r2, [pc, #16]	; (8019cc0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	601a      	str	r2, [r3, #0]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	370c      	adds	r7, #12
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbe:	4770      	bx	lr
 8019cc0:	0802dbe8 	.word	0x0802dbe8

08019cc4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b082      	sub	sp, #8
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7ff ffe8 	bl	8019ca4 <_ZN8touchgfx15TouchControllerC1Ev>
 8019cd4:	4a03      	ldr	r2, [pc, #12]	; (8019ce4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	601a      	str	r2, [r3, #0]
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3708      	adds	r7, #8
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	0802dbd0 	.word	0x0802dbd0

08019ce8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8019ce8:	b590      	push	{r4, r7, lr}
 8019cea:	b085      	sub	sp, #20
 8019cec:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8019cee:	f7fd fa9f 	bl	8017230 <_ZN14BitmapDatabase11getInstanceEv>
 8019cf2:	4604      	mov	r4, r0
 8019cf4:	f7fd faa6 	bl	8017244 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	4619      	mov	r1, r3
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	9300      	str	r3, [sp, #0]
 8019d00:	2300      	movs	r3, #0
 8019d02:	2200      	movs	r2, #0
 8019d04:	4620      	mov	r0, r4
 8019d06:	f007 fd77 	bl	80217f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8019d0a:	4809      	ldr	r0, [pc, #36]	; (8019d30 <touchgfx_init+0x48>)
 8019d0c:	f7ff fd74 	bl	80197f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8019d10:	2000      	movs	r0, #0
 8019d12:	f7fd fabb 	bl	801728c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8019d16:	4807      	ldr	r0, [pc, #28]	; (8019d34 <touchgfx_init+0x4c>)
 8019d18:	f007 fcbc 	bl	8021694 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8019d1c:	f7ff fee0 	bl	8019ae0 <_ZN12FrontendHeap11getInstanceEv>
 8019d20:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8019d22:	4805      	ldr	r0, [pc, #20]	; (8019d38 <touchgfx_init+0x50>)
 8019d24:	f7fe ffde 	bl	8018ce4 <_ZN11TouchGFXHAL10initializeEv>
}
 8019d28:	bf00      	nop
 8019d2a:	370c      	adds	r7, #12
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd90      	pop	{r4, r7, pc}
 8019d30:	2000bf3c 	.word	0x2000bf3c
 8019d34:	20000058 	.word	0x20000058
 8019d38:	2000bf40 	.word	0x2000bf40

08019d3c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8019d40:	4802      	ldr	r0, [pc, #8]	; (8019d4c <touchgfx_taskEntry+0x10>)
 8019d42:	f001 ff7a 	bl	801bc3a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8019d46:	bf00      	nop
 8019d48:	bd80      	pop	{r7, pc}
 8019d4a:	bf00      	nop
 8019d4c:	2000bf40 	.word	0x2000bf40

08019d50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f000 ff16 	bl	801ab8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019d60:	4a03      	ldr	r2, [pc, #12]	; (8019d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	601a      	str	r2, [r3, #0]
    {
    }
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3708      	adds	r7, #8
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	0802de7c 	.word	0x0802de7c

08019d74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b082      	sub	sp, #8
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
    {
    }
 8019d7c:	4a05      	ldr	r2, [pc, #20]	; (8019d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	601a      	str	r2, [r3, #0]
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	4618      	mov	r0, r3
 8019d86:	f000 feff 	bl	801ab88 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3708      	adds	r7, #8
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}
 8019d94:	0802de7c 	.word	0x0802de7c

08019d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
    }
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f7ff ffe7 	bl	8019d74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019da6:	2118      	movs	r1, #24
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f011 fa60 	bl	802b26e <_ZdlPvj>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	4618      	mov	r0, r3
 8019db2:	3708      	adds	r7, #8
 8019db4:	46bd      	mov	sp, r7
 8019db6:	bd80      	pop	{r7, pc}

08019db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f000 fee2 	bl	801ab8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019dc8:	4a03      	ldr	r2, [pc, #12]	; (8019dd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	601a      	str	r2, [r3, #0]
    }
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3708      	adds	r7, #8
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}
 8019dd8:	0802de48 	.word	0x0802de48

08019ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
    }
 8019de4:	4a05      	ldr	r2, [pc, #20]	; (8019dfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	601a      	str	r2, [r3, #0]
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	4618      	mov	r0, r3
 8019dee:	f000 fecb 	bl	801ab88 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	4618      	mov	r0, r3
 8019df6:	3708      	adds	r7, #8
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	0802de48 	.word	0x0802de48

08019e00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
    }
 8019e08:	6878      	ldr	r0, [r7, #4]
 8019e0a:	f7ff ffe7 	bl	8019ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019e0e:	f642 1114 	movw	r1, #10516	; 0x2914
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f011 fa2b 	bl	802b26e <_ZdlPvj>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	3708      	adds	r7, #8
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}
	...

08019e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f000 feac 	bl	801ab8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019e34:	4a03      	ldr	r2, [pc, #12]	; (8019e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	601a      	str	r2, [r3, #0]
    }
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	3708      	adds	r7, #8
 8019e40:	46bd      	mov	sp, r7
 8019e42:	bd80      	pop	{r7, pc}
 8019e44:	0802de14 	.word	0x0802de14

08019e48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b082      	sub	sp, #8
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
    }
 8019e50:	4a05      	ldr	r2, [pc, #20]	; (8019e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	601a      	str	r2, [r3, #0]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f000 fe95 	bl	801ab88 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	4618      	mov	r0, r3
 8019e62:	3708      	adds	r7, #8
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}
 8019e68:	0802de14 	.word	0x0802de14

08019e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b082      	sub	sp, #8
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
    }
 8019e74:	6878      	ldr	r0, [r7, #4]
 8019e76:	f7ff ffe7 	bl	8019e48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019e7a:	215c      	movs	r1, #92	; 0x5c
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	f011 f9f6 	bl	802b26e <_ZdlPvj>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	4618      	mov	r0, r3
 8019e86:	3708      	adds	r7, #8
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}

08019e8c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b082      	sub	sp, #8
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	4a11      	ldr	r2, [pc, #68]	; (8019edc <_ZN12FrontendHeapD1Ev+0x50>)
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	601a      	str	r2, [r3, #0]
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	f642 139c 	movw	r3, #10652	; 0x299c
 8019ea0:	4413      	add	r3, r2
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7fd fab2 	bl	801740c <_ZN19FrontendApplicationD1Ev>
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7ff ffca 	bl	8019e48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	332c      	adds	r3, #44	; 0x2c
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7ff ff8f 	bl	8019ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	3314      	adds	r3, #20
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7ff ff56 	bl	8019d74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	4618      	mov	r0, r3
 8019ecc:	f7ff fe22 	bl	8019b14 <_ZN16FrontendHeapBaseD1Ev>
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
 8019eda:	bf00      	nop
 8019edc:	0802de00 	.word	0x0802de00

08019ee0 <_ZN12FrontendHeapD0Ev>:
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b082      	sub	sp, #8
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	f7ff ffcf 	bl	8019e8c <_ZN12FrontendHeapD1Ev>
 8019eee:	f642 21f0 	movw	r1, #10992	; 0x2af0
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f011 f9bb 	bl	802b26e <_ZdlPvj>
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	4618      	mov	r0, r3
 8019efc:	3708      	adds	r7, #8
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}
	...

08019f04 <_Z41__static_initialization_and_destruction_0ii>:
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b084      	sub	sp, #16
 8019f08:	af02      	add	r7, sp, #8
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	6039      	str	r1, [r7, #0]
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	2b01      	cmp	r3, #1
 8019f12:	d119      	bne.n	8019f48 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d114      	bne.n	8019f48 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8019f1e:	4818      	ldr	r0, [pc, #96]	; (8019f80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019f20:	f7ff fed0 	bl	8019cc4 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8019f24:	4817      	ldr	r0, [pc, #92]	; (8019f84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019f26:	f7ff f969 	bl	80191fc <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8019f2a:	4817      	ldr	r0, [pc, #92]	; (8019f88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019f2c:	f009 fe8a 	bl	8023c44 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8019f30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019f34:	9301      	str	r3, [sp, #4]
 8019f36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8019f3a:	9300      	str	r3, [sp, #0]
 8019f3c:	4b10      	ldr	r3, [pc, #64]	; (8019f80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019f3e:	4a12      	ldr	r2, [pc, #72]	; (8019f88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019f40:	4910      	ldr	r1, [pc, #64]	; (8019f84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019f42:	4812      	ldr	r0, [pc, #72]	; (8019f8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8019f44:	f7ff fe92 	bl	8019c6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d113      	bne.n	8019f76 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d10e      	bne.n	8019f76 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8019f58:	480c      	ldr	r0, [pc, #48]	; (8019f8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8019f5a:	f7fe ff29 	bl	8018db0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8019f5e:	480c      	ldr	r0, [pc, #48]	; (8019f90 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8019f60:	f7f6 f842 	bl	800ffe8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8019f64:	4808      	ldr	r0, [pc, #32]	; (8019f88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019f66:	f7ff fe43 	bl	8019bf0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8019f6a:	4806      	ldr	r0, [pc, #24]	; (8019f84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019f6c:	f7ff f970 	bl	8019250 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8019f70:	4803      	ldr	r0, [pc, #12]	; (8019f80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019f72:	f7fe fc93 	bl	801889c <_ZN20STM32TouchControllerD1Ev>
}
 8019f76:	bf00      	nop
 8019f78:	3708      	adds	r7, #8
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	2000b2c0 	.word	0x2000b2c0
 8019f84:	2000b2c4 	.word	0x2000b2c4
 8019f88:	2000bee4 	.word	0x2000bee4
 8019f8c:	2000bf40 	.word	0x2000bf40
 8019f90:	20000058 	.word	0x20000058

08019f94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8019f94:	b480      	push	{r7}
 8019f96:	b083      	sub	sp, #12
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8019f9c:	2301      	movs	r3, #1
    }
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	370c      	adds	r7, #12
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa8:	4770      	bx	lr

08019faa <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8019faa:	b480      	push	{r7}
 8019fac:	b083      	sub	sp, #12
 8019fae:	af00      	add	r7, sp, #0
 8019fb0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8019fb2:	2354      	movs	r3, #84	; 0x54
    }
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	370c      	adds	r7, #12
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fbe:	4770      	bx	lr

08019fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8019fc0:	b480      	push	{r7}
 8019fc2:	b083      	sub	sp, #12
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
 8019fc8:	460b      	mov	r3, r1
 8019fca:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019fcc:	887b      	ldrh	r3, [r7, #2]
 8019fce:	2254      	movs	r2, #84	; 0x54
 8019fd0:	fb02 f303 	mul.w	r3, r2, r3
 8019fd4:	3308      	adds	r3, #8
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	4413      	add	r3, r2
    }
 8019fda:	4618      	mov	r0, r3
 8019fdc:	370c      	adds	r7, #12
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr

08019fe6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8019fe6:	b480      	push	{r7}
 8019fe8:	b083      	sub	sp, #12
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
 8019fee:	460b      	mov	r3, r1
 8019ff0:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019ff2:	887b      	ldrh	r3, [r7, #2]
 8019ff4:	2254      	movs	r2, #84	; 0x54
 8019ff6:	fb02 f303 	mul.w	r3, r2, r3
 8019ffa:	3308      	adds	r3, #8
 8019ffc:	687a      	ldr	r2, [r7, #4]
 8019ffe:	4413      	add	r3, r2
    }
 801a000:	4618      	mov	r0, r3
 801a002:	370c      	adds	r7, #12
 801a004:	46bd      	mov	sp, r7
 801a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00a:	4770      	bx	lr

0801a00c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801a00c:	b480      	push	{r7}
 801a00e:	b083      	sub	sp, #12
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801a014:	2301      	movs	r3, #1
    }
 801a016:	4618      	mov	r0, r3
 801a018:	370c      	adds	r7, #12
 801a01a:	46bd      	mov	sp, r7
 801a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a020:	4770      	bx	lr

0801a022 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801a022:	b480      	push	{r7}
 801a024:	b083      	sub	sp, #12
 801a026:	af00      	add	r7, sp, #0
 801a028:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801a02a:	f642 130c 	movw	r3, #10508	; 0x290c
    }
 801a02e:	4618      	mov	r0, r3
 801a030:	370c      	adds	r7, #12
 801a032:	46bd      	mov	sp, r7
 801a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a038:	4770      	bx	lr

0801a03a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801a03a:	b480      	push	{r7}
 801a03c:	b083      	sub	sp, #12
 801a03e:	af00      	add	r7, sp, #0
 801a040:	6078      	str	r0, [r7, #4]
 801a042:	460b      	mov	r3, r1
 801a044:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a046:	887b      	ldrh	r3, [r7, #2]
 801a048:	f642 120c 	movw	r2, #10508	; 0x290c
 801a04c:	fb02 f303 	mul.w	r3, r2, r3
 801a050:	3308      	adds	r3, #8
 801a052:	687a      	ldr	r2, [r7, #4]
 801a054:	4413      	add	r3, r2
    }
 801a056:	4618      	mov	r0, r3
 801a058:	370c      	adds	r7, #12
 801a05a:	46bd      	mov	sp, r7
 801a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a060:	4770      	bx	lr

0801a062 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801a062:	b480      	push	{r7}
 801a064:	b083      	sub	sp, #12
 801a066:	af00      	add	r7, sp, #0
 801a068:	6078      	str	r0, [r7, #4]
 801a06a:	460b      	mov	r3, r1
 801a06c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a06e:	887b      	ldrh	r3, [r7, #2]
 801a070:	f642 120c 	movw	r2, #10508	; 0x290c
 801a074:	fb02 f303 	mul.w	r3, r2, r3
 801a078:	3308      	adds	r3, #8
 801a07a:	687a      	ldr	r2, [r7, #4]
 801a07c:	4413      	add	r3, r2
    }
 801a07e:	4618      	mov	r0, r3
 801a080:	370c      	adds	r7, #12
 801a082:	46bd      	mov	sp, r7
 801a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a088:	4770      	bx	lr

0801a08a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801a08a:	b480      	push	{r7}
 801a08c:	b083      	sub	sp, #12
 801a08e:	af00      	add	r7, sp, #0
 801a090:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801a092:	2301      	movs	r3, #1
    }
 801a094:	4618      	mov	r0, r3
 801a096:	370c      	adds	r7, #12
 801a098:	46bd      	mov	sp, r7
 801a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09e:	4770      	bx	lr

0801a0a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801a0a0:	b480      	push	{r7}
 801a0a2:	b083      	sub	sp, #12
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801a0a8:	2310      	movs	r3, #16
    }
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	370c      	adds	r7, #12
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b4:	4770      	bx	lr

0801a0b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801a0b6:	b480      	push	{r7}
 801a0b8:	b083      	sub	sp, #12
 801a0ba:	af00      	add	r7, sp, #0
 801a0bc:	6078      	str	r0, [r7, #4]
 801a0be:	460b      	mov	r3, r1
 801a0c0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a0c2:	887b      	ldrh	r3, [r7, #2]
 801a0c4:	011b      	lsls	r3, r3, #4
 801a0c6:	3308      	adds	r3, #8
 801a0c8:	687a      	ldr	r2, [r7, #4]
 801a0ca:	4413      	add	r3, r2
    }
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	370c      	adds	r7, #12
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr

0801a0d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801a0d8:	b480      	push	{r7}
 801a0da:	b083      	sub	sp, #12
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
 801a0e0:	460b      	mov	r3, r1
 801a0e2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801a0e4:	887b      	ldrh	r3, [r7, #2]
 801a0e6:	011b      	lsls	r3, r3, #4
 801a0e8:	3308      	adds	r3, #8
 801a0ea:	687a      	ldr	r2, [r7, #4]
 801a0ec:	4413      	add	r3, r2
    }
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	370c      	adds	r7, #12
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f8:	4770      	bx	lr

0801a0fa <_GLOBAL__sub_I_touchgfx_init>:
 801a0fa:	b580      	push	{r7, lr}
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a102:	2001      	movs	r0, #1
 801a104:	f7ff fefe 	bl	8019f04 <_Z41__static_initialization_and_destruction_0ii>
 801a108:	bd80      	pop	{r7, pc}

0801a10a <_GLOBAL__sub_D_touchgfx_init>:
 801a10a:	b580      	push	{r7, lr}
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a112:	2000      	movs	r0, #0
 801a114:	f7ff fef6 	bl	8019f04 <_Z41__static_initialization_and_destruction_0ii>
 801a118:	bd80      	pop	{r7, pc}

0801a11a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801a11a:	b580      	push	{r7, lr}
 801a11c:	b082      	sub	sp, #8
 801a11e:	af00      	add	r7, sp, #0
 801a120:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	3318      	adds	r3, #24
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	4798      	blx	r3
    }
 801a12e:	bf00      	nop
 801a130:	3708      	adds	r7, #8
 801a132:	46bd      	mov	sp, r7
 801a134:	bd80      	pop	{r7, pc}

0801a136 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801a136:	b480      	push	{r7}
 801a138:	b083      	sub	sp, #12
 801a13a:	af00      	add	r7, sp, #0
 801a13c:	6078      	str	r0, [r7, #4]
 801a13e:	460b      	mov	r3, r1
 801a140:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	78fa      	ldrb	r2, [r7, #3]
 801a146:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801a14a:	bf00      	nop
 801a14c:	370c      	adds	r7, #12
 801a14e:	46bd      	mov	sp, r7
 801a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a154:	4770      	bx	lr

0801a156 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801a156:	b480      	push	{r7}
 801a158:	b083      	sub	sp, #12
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801a164:	3301      	adds	r3, #1
 801a166:	b2da      	uxtb	r2, r3
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801a16e:	bf00      	nop
 801a170:	370c      	adds	r7, #12
 801a172:	46bd      	mov	sp, r7
 801a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a178:	4770      	bx	lr
	...

0801a17c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b082      	sub	sp, #8
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
 801a184:	460b      	mov	r3, r1
 801a186:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801a188:	78fb      	ldrb	r3, [r7, #3]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d002      	beq.n	801a194 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801a18e:	78fb      	ldrb	r3, [r7, #3]
 801a190:	2b02      	cmp	r3, #2
 801a192:	d105      	bne.n	801a1a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	78fa      	ldrb	r2, [r7, #3]
 801a198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801a19c:	2301      	movs	r3, #1
 801a19e:	e027      	b.n	801a1f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801a1a0:	78fb      	ldrb	r3, [r7, #3]
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	d123      	bne.n	801a1ee <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d014      	beq.n	801a1d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	3380      	adds	r3, #128	; 0x80
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	4798      	blx	r3
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	461a      	mov	r2, r3
 801a1be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	d008      	beq.n	801a1d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a1c6:	4b0c      	ldr	r3, [pc, #48]	; (801a1f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801a1c8:	781b      	ldrb	r3, [r3, #0]
 801a1ca:	f083 0301 	eor.w	r3, r3, #1
 801a1ce:	b2db      	uxtb	r3, r3
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d001      	beq.n	801a1d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801a1d4:	2301      	movs	r3, #1
 801a1d6:	e000      	b.n	801a1da <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d005      	beq.n	801a1ea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	78fa      	ldrb	r2, [r7, #3]
 801a1e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	e002      	b.n	801a1f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	e000      	b.n	801a1f0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801a1ee:	2300      	movs	r3, #0
    }
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	3708      	adds	r7, #8
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	2000bfcc 	.word	0x2000bfcc

0801a1fc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801a1fc:	b480      	push	{r7}
 801a1fe:	b083      	sub	sp, #12
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	683a      	ldr	r2, [r7, #0]
 801a20a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801a20c:	bf00      	nop
 801a20e:	370c      	adds	r7, #12
 801a210:	46bd      	mov	sp, r7
 801a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a216:	4770      	bx	lr

0801a218 <__NVIC_EnableIRQ>:
{
 801a218:	b480      	push	{r7}
 801a21a:	b083      	sub	sp, #12
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	4603      	mov	r3, r0
 801a220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a226:	2b00      	cmp	r3, #0
 801a228:	db0d      	blt.n	801a246 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a22e:	b2db      	uxtb	r3, r3
 801a230:	f003 021f 	and.w	r2, r3, #31
 801a234:	4907      	ldr	r1, [pc, #28]	; (801a254 <__NVIC_EnableIRQ+0x3c>)
 801a236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a23a:	095b      	lsrs	r3, r3, #5
 801a23c:	2001      	movs	r0, #1
 801a23e:	fa00 f202 	lsl.w	r2, r0, r2
 801a242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a246:	bf00      	nop
 801a248:	370c      	adds	r7, #12
 801a24a:	46bd      	mov	sp, r7
 801a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a250:	4770      	bx	lr
 801a252:	bf00      	nop
 801a254:	e000e100 	.word	0xe000e100

0801a258 <__NVIC_DisableIRQ>:
{
 801a258:	b480      	push	{r7}
 801a25a:	b083      	sub	sp, #12
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	4603      	mov	r3, r0
 801a260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a266:	2b00      	cmp	r3, #0
 801a268:	db12      	blt.n	801a290 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a26a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a26e:	b2db      	uxtb	r3, r3
 801a270:	f003 021f 	and.w	r2, r3, #31
 801a274:	4909      	ldr	r1, [pc, #36]	; (801a29c <__NVIC_DisableIRQ+0x44>)
 801a276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a27a:	095b      	lsrs	r3, r3, #5
 801a27c:	2001      	movs	r0, #1
 801a27e:	fa00 f202 	lsl.w	r2, r0, r2
 801a282:	3320      	adds	r3, #32
 801a284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801a288:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a28c:	f3bf 8f6f 	isb	sy
}
 801a290:	bf00      	nop
 801a292:	370c      	adds	r7, #12
 801a294:	46bd      	mov	sp, r7
 801a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29a:	4770      	bx	lr
 801a29c:	e000e100 	.word	0xe000e100

0801a2a0 <__NVIC_SetPriority>:
{
 801a2a0:	b480      	push	{r7}
 801a2a2:	b083      	sub	sp, #12
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	6039      	str	r1, [r7, #0]
 801a2aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a2ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	db0c      	blt.n	801a2ce <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	b2db      	uxtb	r3, r3
 801a2b8:	4a0e      	ldr	r2, [pc, #56]	; (801a2f4 <__NVIC_SetPriority+0x54>)
 801a2ba:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a2be:	4608      	mov	r0, r1
 801a2c0:	011b      	lsls	r3, r3, #4
 801a2c2:	b2d9      	uxtb	r1, r3
 801a2c4:	1813      	adds	r3, r2, r0
 801a2c6:	460a      	mov	r2, r1
 801a2c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a2cc:	e00c      	b.n	801a2e8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	b2da      	uxtb	r2, r3
 801a2d2:	4909      	ldr	r1, [pc, #36]	; (801a2f8 <__NVIC_SetPriority+0x58>)
 801a2d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a2d8:	b2db      	uxtb	r3, r3
 801a2da:	f003 030f 	and.w	r3, r3, #15
 801a2de:	3b04      	subs	r3, #4
 801a2e0:	0112      	lsls	r2, r2, #4
 801a2e2:	b2d2      	uxtb	r2, r2
 801a2e4:	440b      	add	r3, r1
 801a2e6:	761a      	strb	r2, [r3, #24]
}
 801a2e8:	bf00      	nop
 801a2ea:	370c      	adds	r7, #12
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f2:	4770      	bx	lr
 801a2f4:	e000e100 	.word	0xe000e100
 801a2f8:	e000ed00 	.word	0xe000ed00

0801a2fc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801a2fc:	b5b0      	push	{r4, r5, r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	4618      	mov	r0, r3
 801a308:	f001 ff5c 	bl	801c1c4 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 801a30c:	687d      	ldr	r5, [r7, #4]
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	334c      	adds	r3, #76	; 0x4c
 801a314:	681c      	ldr	r4, [r3, #0]
 801a316:	f004 ffa7 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801a31a:	4603      	mov	r3, r0
 801a31c:	4619      	mov	r1, r3
 801a31e:	4628      	mov	r0, r5
 801a320:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	490d      	ldr	r1, [pc, #52]	; (801a35c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801a326:	4618      	mov	r0, r3
 801a328:	f7ff ff68 	bl	801a1fc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2101      	movs	r1, #1
 801a330:	4618      	mov	r0, r3
 801a332:	f7ff ff23 	bl	801a17c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	3374      	adds	r3, #116	; 0x74
 801a33e:	681c      	ldr	r4, [r3, #0]
 801a340:	2300      	movs	r3, #0
 801a342:	2200      	movs	r2, #0
 801a344:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801a348:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	2101      	movs	r1, #1
 801a34e:	4618      	mov	r0, r3
 801a350:	f7ff fef1 	bl	801a136 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 801a354:	bf00      	nop
 801a356:	3708      	adds	r7, #8
 801a358:	46bd      	mov	sp, r7
 801a35a:	bdb0      	pop	{r4, r5, r7, pc}
 801a35c:	08018f49 	.word	0x08018f49

0801a360 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801a368:	2109      	movs	r1, #9
 801a36a:	205a      	movs	r0, #90	; 0x5a
 801a36c:	f7ff ff98 	bl	801a2a0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801a370:	2109      	movs	r1, #9
 801a372:	2058      	movs	r0, #88	; 0x58
 801a374:	f7ff ff94 	bl	801a2a0 <__NVIC_SetPriority>
}
 801a378:	bf00      	nop
 801a37a:	3708      	adds	r7, #8
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}

0801a380 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801a388:	205a      	movs	r0, #90	; 0x5a
 801a38a:	f7ff ff45 	bl	801a218 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801a38e:	2058      	movs	r0, #88	; 0x58
 801a390:	f7ff ff42 	bl	801a218 <__NVIC_EnableIRQ>
}
 801a394:	bf00      	nop
 801a396:	3708      	adds	r7, #8
 801a398:	46bd      	mov	sp, r7
 801a39a:	bd80      	pop	{r7, pc}

0801a39c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801a39c:	b580      	push	{r7, lr}
 801a39e:	b082      	sub	sp, #8
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801a3a4:	205a      	movs	r0, #90	; 0x5a
 801a3a6:	f7ff ff57 	bl	801a258 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801a3aa:	2058      	movs	r0, #88	; 0x58
 801a3ac:	f7ff ff54 	bl	801a258 <__NVIC_DisableIRQ>
}
 801a3b0:	bf00      	nop
 801a3b2:	3708      	adds	r7, #8
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}

0801a3b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801a3b8:	b480      	push	{r7}
 801a3ba:	b083      	sub	sp, #12
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801a3c0:	4b11      	ldr	r3, [pc, #68]	; (801a408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a3c2:	68db      	ldr	r3, [r3, #12]
 801a3c4:	b29b      	uxth	r3, r3
 801a3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a3ca:	b29b      	uxth	r3, r3
 801a3cc:	3b01      	subs	r3, #1
 801a3ce:	b29a      	uxth	r2, r3
 801a3d0:	4b0e      	ldr	r3, [pc, #56]	; (801a40c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a3d2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801a3d4:	4b0c      	ldr	r3, [pc, #48]	; (801a408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a3d6:	691b      	ldr	r3, [r3, #16]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a3de:	b29b      	uxth	r3, r3
 801a3e0:	3b01      	subs	r3, #1
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	4b0a      	ldr	r3, [pc, #40]	; (801a410 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801a3e6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801a3e8:	4b08      	ldr	r3, [pc, #32]	; (801a40c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a3ea:	881a      	ldrh	r2, [r3, #0]
 801a3ec:	4b06      	ldr	r3, [pc, #24]	; (801a408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a3ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801a3f0:	4b05      	ldr	r3, [pc, #20]	; (801a408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a3f4:	4a04      	ldr	r2, [pc, #16]	; (801a408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a3f6:	f043 0301 	orr.w	r3, r3, #1
 801a3fa:	6353      	str	r3, [r2, #52]	; 0x34
}
 801a3fc:	bf00      	nop
 801a3fe:	370c      	adds	r7, #12
 801a400:	46bd      	mov	sp, r7
 801a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a406:	4770      	bx	lr
 801a408:	40016800 	.word	0x40016800
 801a40c:	2000bfb8 	.word	0x2000bfb8
 801a410:	2000bfba 	.word	0x2000bfba

0801a414 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801a414:	b480      	push	{r7}
 801a416:	b083      	sub	sp, #12
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801a41c:	4b03      	ldr	r3, [pc, #12]	; (801a42c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801a420:	4618      	mov	r0, r3
 801a422:	370c      	adds	r7, #12
 801a424:	46bd      	mov	sp, r7
 801a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42a:	4770      	bx	lr
 801a42c:	40016884 	.word	0x40016884

0801a430 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801a430:	b480      	push	{r7}
 801a432:	b083      	sub	sp, #12
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
 801a438:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801a43a:	4a06      	ldr	r2, [pc, #24]	; (801a454 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801a440:	4b05      	ldr	r3, [pc, #20]	; (801a458 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801a442:	2201      	movs	r2, #1
 801a444:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a446:	bf00      	nop
 801a448:	370c      	adds	r7, #12
 801a44a:	46bd      	mov	sp, r7
 801a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a450:	4770      	bx	lr
 801a452:	bf00      	nop
 801a454:	40016884 	.word	0x40016884
 801a458:	40016800 	.word	0x40016800

0801a45c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
 801a464:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	6839      	ldr	r1, [r7, #0]
 801a46a:	4618      	mov	r0, r3
 801a46c:	f001 fbba 	bl	801bbe4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801a470:	bf00      	nop
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}

0801a478 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801a478:	b480      	push	{r7}
 801a47a:	b085      	sub	sp, #20
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801a480:	4b0d      	ldr	r3, [pc, #52]	; (801a4b8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a484:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801a486:	4b0c      	ldr	r3, [pc, #48]	; (801a4b8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a488:	68db      	ldr	r3, [r3, #12]
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a490:	b29b      	uxth	r3, r3
 801a492:	3301      	adds	r3, #1
 801a494:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801a496:	89fa      	ldrh	r2, [r7, #14]
 801a498:	89bb      	ldrh	r3, [r7, #12]
 801a49a:	429a      	cmp	r2, r3
 801a49c:	d201      	bcs.n	801a4a2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	e003      	b.n	801a4aa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801a4a2:	89fa      	ldrh	r2, [r7, #14]
 801a4a4:	89bb      	ldrh	r3, [r7, #12]
 801a4a6:	1ad3      	subs	r3, r2, r3
 801a4a8:	b29b      	uxth	r3, r3
    }
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3714      	adds	r7, #20
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b4:	4770      	bx	lr
 801a4b6:	bf00      	nop
 801a4b8:	40016800 	.word	0x40016800

0801a4bc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b082      	sub	sp, #8
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801a4c4:	4b1a      	ldr	r3, [pc, #104]	; (801a530 <HAL_LTDC_LineEventCallback+0x74>)
 801a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4c8:	4a1a      	ldr	r2, [pc, #104]	; (801a534 <HAL_LTDC_LineEventCallback+0x78>)
 801a4ca:	8812      	ldrh	r2, [r2, #0]
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	bf0c      	ite	eq
 801a4d0:	2301      	moveq	r3, #1
 801a4d2:	2300      	movne	r3, #0
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d017      	beq.n	801a50a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801a4da:	4b17      	ldr	r3, [pc, #92]	; (801a538 <HAL_LTDC_LineEventCallback+0x7c>)
 801a4dc:	881b      	ldrh	r3, [r3, #0]
 801a4de:	4619      	mov	r1, r3
 801a4e0:	6878      	ldr	r0, [r7, #4]
 801a4e2:	f7ec f975 	bl	80067d0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801a4e6:	f7f6 fa8f 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7ff fe32 	bl	801a156 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801a4f2:	f7fe fceb 	bl	8018ecc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801a4f6:	f7f6 fa87 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	f002 f8e9 	bl	801c6d4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801a502:	2000      	movs	r0, #0
 801a504:	f7fe f9ec 	bl	80188e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801a508:	e00e      	b.n	801a528 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801a50a:	4b0a      	ldr	r3, [pc, #40]	; (801a534 <HAL_LTDC_LineEventCallback+0x78>)
 801a50c:	881b      	ldrh	r3, [r3, #0]
 801a50e:	4619      	mov	r1, r3
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f7ec f95d 	bl	80067d0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801a516:	2000      	movs	r0, #0
 801a518:	f7fe f9ed 	bl	80188f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801a51c:	f7f6 fa74 	bl	8010a08 <_ZN8touchgfx3HAL11getInstanceEv>
 801a520:	4603      	mov	r3, r0
 801a522:	4618      	mov	r0, r3
 801a524:	f7ff fdf9 	bl	801a11a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801a528:	bf00      	nop
 801a52a:	3708      	adds	r7, #8
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd80      	pop	{r7, pc}
 801a530:	40016800 	.word	0x40016800
 801a534:	2000bfb8 	.word	0x2000bfb8
 801a538:	2000bfba 	.word	0x2000bfba

0801a53c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b082      	sub	sp, #8
 801a540:	af00      	add	r7, sp, #0
 801a542:	4603      	mov	r3, r0
 801a544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 801a546:	20c8      	movs	r0, #200	; 0xc8
 801a548:	f7f5 fa6c 	bl	800fa24 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a54c:	f000 fa7a 	bl	801aa44 <ft5336_I2C_InitializeIfRequired>
}
 801a550:	bf00      	nop
 801a552:	3708      	adds	r7, #8
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}

0801a558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 801a558:	b480      	push	{r7}
 801a55a:	b083      	sub	sp, #12
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	4603      	mov	r3, r0
 801a560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801a562:	bf00      	nop
 801a564:	370c      	adds	r7, #12
 801a566:	46bd      	mov	sp, r7
 801a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56c:	4770      	bx	lr

0801a56e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 801a56e:	b580      	push	{r7, lr}
 801a570:	b084      	sub	sp, #16
 801a572:	af00      	add	r7, sp, #0
 801a574:	4603      	mov	r3, r0
 801a576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 801a578:	2300      	movs	r3, #0
 801a57a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 801a57c:	2300      	movs	r3, #0
 801a57e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 801a580:	2300      	movs	r3, #0
 801a582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a584:	f000 fa5e 	bl	801aa44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a588:	2300      	movs	r3, #0
 801a58a:	73fb      	strb	r3, [r7, #15]
 801a58c:	e010      	b.n	801a5b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 801a58e:	88fb      	ldrh	r3, [r7, #6]
 801a590:	b2db      	uxtb	r3, r3
 801a592:	21a8      	movs	r1, #168	; 0xa8
 801a594:	4618      	mov	r0, r3
 801a596:	f7f5 fa27 	bl	800f9e8 <TS_IO_Read>
 801a59a:	4603      	mov	r3, r0
 801a59c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 801a59e:	7b7b      	ldrb	r3, [r7, #13]
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	2b51      	cmp	r3, #81	; 0x51
 801a5a4:	d101      	bne.n	801a5aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a5aa:	7bfb      	ldrb	r3, [r7, #15]
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	73fb      	strb	r3, [r7, #15]
 801a5b0:	7bfb      	ldrb	r3, [r7, #15]
 801a5b2:	2b02      	cmp	r3, #2
 801a5b4:	d802      	bhi.n	801a5bc <ft5336_ReadID+0x4e>
 801a5b6:	7bbb      	ldrb	r3, [r7, #14]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d0e8      	beq.n	801a58e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 801a5bc:	7b7b      	ldrb	r3, [r7, #13]
 801a5be:	b2db      	uxtb	r3, r3
 801a5c0:	b29b      	uxth	r3, r3
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	3710      	adds	r7, #16
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}

0801a5ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801a5ca:	b580      	push	{r7, lr}
 801a5cc:	b082      	sub	sp, #8
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 801a5d4:	88fb      	ldrh	r3, [r7, #6]
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f000 fa44 	bl	801aa64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 801a5dc:	88fb      	ldrh	r3, [r7, #6]
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f000 f932 	bl	801a848 <ft5336_TS_DisableIT>
}
 801a5e4:	bf00      	nop
 801a5e6:	3708      	adds	r7, #8
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	bd80      	pop	{r7, pc}

0801a5ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b084      	sub	sp, #16
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 801a5fa:	88fb      	ldrh	r3, [r7, #6]
 801a5fc:	b2db      	uxtb	r3, r3
 801a5fe:	2102      	movs	r1, #2
 801a600:	4618      	mov	r0, r3
 801a602:	f7f5 f9f1 	bl	800f9e8 <TS_IO_Read>
 801a606:	4603      	mov	r3, r0
 801a608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 801a60a:	7bfb      	ldrb	r3, [r7, #15]
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	f003 030f 	and.w	r3, r3, #15
 801a612:	b2db      	uxtb	r3, r3
 801a614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801a616:	7bfb      	ldrb	r3, [r7, #15]
 801a618:	b2db      	uxtb	r3, r3
 801a61a:	2b05      	cmp	r3, #5
 801a61c:	d901      	bls.n	801a622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801a622:	7bfb      	ldrb	r3, [r7, #15]
 801a624:	b2da      	uxtb	r2, r3
 801a626:	4b05      	ldr	r3, [pc, #20]	; (801a63c <ft5336_TS_DetectTouch+0x50>)
 801a628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 801a62a:	4b04      	ldr	r3, [pc, #16]	; (801a63c <ft5336_TS_DetectTouch+0x50>)
 801a62c:	2200      	movs	r2, #0
 801a62e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 801a630:	7bfb      	ldrb	r3, [r7, #15]
 801a632:	b2db      	uxtb	r3, r3
}
 801a634:	4618      	mov	r0, r3
 801a636:	3710      	adds	r7, #16
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	2000bfbc 	.word	0x2000bfbc

0801a640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b086      	sub	sp, #24
 801a644:	af00      	add	r7, sp, #0
 801a646:	4603      	mov	r3, r0
 801a648:	60b9      	str	r1, [r7, #8]
 801a64a:	607a      	str	r2, [r7, #4]
 801a64c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a64e:	2300      	movs	r3, #0
 801a650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801a652:	2300      	movs	r3, #0
 801a654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801a656:	2300      	movs	r3, #0
 801a658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801a65a:	2300      	movs	r3, #0
 801a65c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801a65e:	2300      	movs	r3, #0
 801a660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801a662:	4b6d      	ldr	r3, [pc, #436]	; (801a818 <ft5336_TS_GetXY+0x1d8>)
 801a664:	789a      	ldrb	r2, [r3, #2]
 801a666:	4b6c      	ldr	r3, [pc, #432]	; (801a818 <ft5336_TS_GetXY+0x1d8>)
 801a668:	785b      	ldrb	r3, [r3, #1]
 801a66a:	429a      	cmp	r2, r3
 801a66c:	f080 80cf 	bcs.w	801a80e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 801a670:	4b69      	ldr	r3, [pc, #420]	; (801a818 <ft5336_TS_GetXY+0x1d8>)
 801a672:	789b      	ldrb	r3, [r3, #2]
 801a674:	2b09      	cmp	r3, #9
 801a676:	d871      	bhi.n	801a75c <ft5336_TS_GetXY+0x11c>
 801a678:	a201      	add	r2, pc, #4	; (adr r2, 801a680 <ft5336_TS_GetXY+0x40>)
 801a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a67e:	bf00      	nop
 801a680:	0801a6a9 	.word	0x0801a6a9
 801a684:	0801a6bb 	.word	0x0801a6bb
 801a688:	0801a6cd 	.word	0x0801a6cd
 801a68c:	0801a6df 	.word	0x0801a6df
 801a690:	0801a6f1 	.word	0x0801a6f1
 801a694:	0801a703 	.word	0x0801a703
 801a698:	0801a715 	.word	0x0801a715
 801a69c:	0801a727 	.word	0x0801a727
 801a6a0:	0801a739 	.word	0x0801a739
 801a6a4:	0801a74b 	.word	0x0801a74b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 801a6a8:	2304      	movs	r3, #4
 801a6aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 801a6ac:	2303      	movs	r3, #3
 801a6ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 801a6b0:	2306      	movs	r3, #6
 801a6b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 801a6b4:	2305      	movs	r3, #5
 801a6b6:	753b      	strb	r3, [r7, #20]
      break;
 801a6b8:	e051      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801a6ba:	230a      	movs	r3, #10
 801a6bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 801a6be:	2309      	movs	r3, #9
 801a6c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 801a6c2:	230c      	movs	r3, #12
 801a6c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801a6c6:	230b      	movs	r3, #11
 801a6c8:	753b      	strb	r3, [r7, #20]
      break;
 801a6ca:	e048      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 801a6cc:	2310      	movs	r3, #16
 801a6ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 801a6d0:	230f      	movs	r3, #15
 801a6d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 801a6d4:	2312      	movs	r3, #18
 801a6d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 801a6d8:	2311      	movs	r3, #17
 801a6da:	753b      	strb	r3, [r7, #20]
      break;
 801a6dc:	e03f      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 801a6de:	2316      	movs	r3, #22
 801a6e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 801a6e2:	2315      	movs	r3, #21
 801a6e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801a6e6:	2318      	movs	r3, #24
 801a6e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 801a6ea:	2317      	movs	r3, #23
 801a6ec:	753b      	strb	r3, [r7, #20]
      break;
 801a6ee:	e036      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 801a6f0:	231c      	movs	r3, #28
 801a6f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 801a6f4:	231b      	movs	r3, #27
 801a6f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 801a6f8:	231e      	movs	r3, #30
 801a6fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 801a6fc:	231d      	movs	r3, #29
 801a6fe:	753b      	strb	r3, [r7, #20]
      break;
 801a700:	e02d      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801a702:	2322      	movs	r3, #34	; 0x22
 801a704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801a706:	2321      	movs	r3, #33	; 0x21
 801a708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 801a70a:	2324      	movs	r3, #36	; 0x24
 801a70c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 801a70e:	2323      	movs	r3, #35	; 0x23
 801a710:	753b      	strb	r3, [r7, #20]
      break;
 801a712:	e024      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801a714:	2328      	movs	r3, #40	; 0x28
 801a716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 801a718:	2327      	movs	r3, #39	; 0x27
 801a71a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 801a71c:	232a      	movs	r3, #42	; 0x2a
 801a71e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 801a720:	2329      	movs	r3, #41	; 0x29
 801a722:	753b      	strb	r3, [r7, #20]
      break;
 801a724:	e01b      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801a726:	232e      	movs	r3, #46	; 0x2e
 801a728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 801a72a:	232d      	movs	r3, #45	; 0x2d
 801a72c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 801a72e:	2330      	movs	r3, #48	; 0x30
 801a730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801a732:	232f      	movs	r3, #47	; 0x2f
 801a734:	753b      	strb	r3, [r7, #20]
      break;
 801a736:	e012      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 801a738:	2334      	movs	r3, #52	; 0x34
 801a73a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 801a73c:	2333      	movs	r3, #51	; 0x33
 801a73e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 801a740:	2336      	movs	r3, #54	; 0x36
 801a742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 801a744:	2335      	movs	r3, #53	; 0x35
 801a746:	753b      	strb	r3, [r7, #20]
      break;
 801a748:	e009      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 801a74a:	233a      	movs	r3, #58	; 0x3a
 801a74c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801a74e:	2339      	movs	r3, #57	; 0x39
 801a750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801a752:	233c      	movs	r3, #60	; 0x3c
 801a754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801a756:	233b      	movs	r3, #59	; 0x3b
 801a758:	753b      	strb	r3, [r7, #20]
      break;
 801a75a:	e000      	b.n	801a75e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 801a75c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801a75e:	89fb      	ldrh	r3, [r7, #14]
 801a760:	b2db      	uxtb	r3, r3
 801a762:	7dfa      	ldrb	r2, [r7, #23]
 801a764:	4611      	mov	r1, r2
 801a766:	4618      	mov	r0, r3
 801a768:	f7f5 f93e 	bl	800f9e8 <TS_IO_Read>
 801a76c:	4603      	mov	r3, r0
 801a76e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a770:	7cfb      	ldrb	r3, [r7, #19]
 801a772:	b2db      	uxtb	r3, r3
 801a774:	b29a      	uxth	r2, r3
 801a776:	4b29      	ldr	r3, [pc, #164]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801a77a:	89fb      	ldrh	r3, [r7, #14]
 801a77c:	b2db      	uxtb	r3, r3
 801a77e:	7dba      	ldrb	r2, [r7, #22]
 801a780:	4611      	mov	r1, r2
 801a782:	4618      	mov	r0, r3
 801a784:	f7f5 f930 	bl	800f9e8 <TS_IO_Read>
 801a788:	4603      	mov	r3, r0
 801a78a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a78c:	7cfb      	ldrb	r3, [r7, #19]
 801a78e:	b2db      	uxtb	r3, r3
 801a790:	021b      	lsls	r3, r3, #8
 801a792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a796:	b21a      	sxth	r2, r3
 801a798:	4b20      	ldr	r3, [pc, #128]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a79a:	881b      	ldrh	r3, [r3, #0]
 801a79c:	b21b      	sxth	r3, r3
 801a79e:	4313      	orrs	r3, r2
 801a7a0:	b21b      	sxth	r3, r3
 801a7a2:	b29a      	uxth	r2, r3
 801a7a4:	4b1d      	ldr	r3, [pc, #116]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 801a7a8:	4b1c      	ldr	r3, [pc, #112]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7aa:	881a      	ldrh	r2, [r3, #0]
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801a7b0:	89fb      	ldrh	r3, [r7, #14]
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	7d7a      	ldrb	r2, [r7, #21]
 801a7b6:	4611      	mov	r1, r2
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7f5 f915 	bl	800f9e8 <TS_IO_Read>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a7c2:	7cfb      	ldrb	r3, [r7, #19]
 801a7c4:	b2db      	uxtb	r3, r3
 801a7c6:	b29a      	uxth	r2, r3
 801a7c8:	4b14      	ldr	r3, [pc, #80]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801a7cc:	89fb      	ldrh	r3, [r7, #14]
 801a7ce:	b2db      	uxtb	r3, r3
 801a7d0:	7d3a      	ldrb	r2, [r7, #20]
 801a7d2:	4611      	mov	r1, r2
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f7f5 f907 	bl	800f9e8 <TS_IO_Read>
 801a7da:	4603      	mov	r3, r0
 801a7dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a7de:	7cfb      	ldrb	r3, [r7, #19]
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	021b      	lsls	r3, r3, #8
 801a7e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a7e8:	b21a      	sxth	r2, r3
 801a7ea:	4b0c      	ldr	r3, [pc, #48]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7ec:	881b      	ldrh	r3, [r3, #0]
 801a7ee:	b21b      	sxth	r3, r3
 801a7f0:	4313      	orrs	r3, r2
 801a7f2:	b21b      	sxth	r3, r3
 801a7f4:	b29a      	uxth	r2, r3
 801a7f6:	4b09      	ldr	r3, [pc, #36]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 801a7fa:	4b08      	ldr	r3, [pc, #32]	; (801a81c <ft5336_TS_GetXY+0x1dc>)
 801a7fc:	881a      	ldrh	r2, [r3, #0]
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801a802:	4b05      	ldr	r3, [pc, #20]	; (801a818 <ft5336_TS_GetXY+0x1d8>)
 801a804:	789b      	ldrb	r3, [r3, #2]
 801a806:	3301      	adds	r3, #1
 801a808:	b2da      	uxtb	r2, r3
 801a80a:	4b03      	ldr	r3, [pc, #12]	; (801a818 <ft5336_TS_GetXY+0x1d8>)
 801a80c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 801a80e:	bf00      	nop
 801a810:	3718      	adds	r7, #24
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}
 801a816:	bf00      	nop
 801a818:	2000bfbc 	.word	0x2000bfbc
 801a81c:	2000bfc0 	.word	0x2000bfc0

0801a820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	4603      	mov	r3, r0
 801a828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 801a82a:	2300      	movs	r3, #0
 801a82c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a82e:	2301      	movs	r3, #1
 801a830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a832:	88fb      	ldrh	r3, [r7, #6]
 801a834:	b2db      	uxtb	r3, r3
 801a836:	7bfa      	ldrb	r2, [r7, #15]
 801a838:	21a4      	movs	r1, #164	; 0xa4
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7f5 f8ba 	bl	800f9b4 <TS_IO_Write>
}
 801a840:	bf00      	nop
 801a842:	3710      	adds	r7, #16
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	b084      	sub	sp, #16
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	4603      	mov	r3, r0
 801a850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801a852:	2300      	movs	r3, #0
 801a854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a856:	2300      	movs	r3, #0
 801a858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a85a:	88fb      	ldrh	r3, [r7, #6]
 801a85c:	b2db      	uxtb	r3, r3
 801a85e:	7bfa      	ldrb	r2, [r7, #15]
 801a860:	21a4      	movs	r1, #164	; 0xa4
 801a862:	4618      	mov	r0, r3
 801a864:	f7f5 f8a6 	bl	800f9b4 <TS_IO_Write>
}
 801a868:	bf00      	nop
 801a86a:	3710      	adds	r7, #16
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}

0801a870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 801a870:	b480      	push	{r7}
 801a872:	b083      	sub	sp, #12
 801a874:	af00      	add	r7, sp, #0
 801a876:	4603      	mov	r3, r0
 801a878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801a87a:	2300      	movs	r3, #0
}
 801a87c:	4618      	mov	r0, r3
 801a87e:	370c      	adds	r7, #12
 801a880:	46bd      	mov	sp, r7
 801a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a886:	4770      	bx	lr

0801a888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 801a888:	b480      	push	{r7}
 801a88a:	b083      	sub	sp, #12
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	4603      	mov	r3, r0
 801a890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 801a892:	bf00      	nop
 801a894:	370c      	adds	r7, #12
 801a896:	46bd      	mov	sp, r7
 801a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a89c:	4770      	bx	lr

0801a89e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	b084      	sub	sp, #16
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	6039      	str	r1, [r7, #0]
 801a8a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801a8ae:	88fb      	ldrh	r3, [r7, #6]
 801a8b0:	b2db      	uxtb	r3, r3
 801a8b2:	2101      	movs	r1, #1
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f7f5 f897 	bl	800f9e8 <TS_IO_Read>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 801a8be:	7bfb      	ldrb	r3, [r7, #15]
 801a8c0:	b2db      	uxtb	r3, r3
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	683b      	ldr	r3, [r7, #0]
 801a8c6:	601a      	str	r2, [r3, #0]
}
 801a8c8:	bf00      	nop
 801a8ca:	3710      	adds	r7, #16
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}

0801a8d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	60b9      	str	r1, [r7, #8]
 801a8d8:	607a      	str	r2, [r7, #4]
 801a8da:	603b      	str	r3, [r7, #0]
 801a8dc:	4603      	mov	r3, r0
 801a8de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 801a8e4:	2300      	movs	r3, #0
 801a8e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801a8f0:	4b4d      	ldr	r3, [pc, #308]	; (801aa28 <ft5336_TS_GetTouchInfo+0x158>)
 801a8f2:	785b      	ldrb	r3, [r3, #1]
 801a8f4:	461a      	mov	r2, r3
 801a8f6:	68bb      	ldr	r3, [r7, #8]
 801a8f8:	4293      	cmp	r3, r2
 801a8fa:	f080 8090 	bcs.w	801aa1e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	2b09      	cmp	r3, #9
 801a902:	d85d      	bhi.n	801a9c0 <ft5336_TS_GetTouchInfo+0xf0>
 801a904:	a201      	add	r2, pc, #4	; (adr r2, 801a90c <ft5336_TS_GetTouchInfo+0x3c>)
 801a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a90a:	bf00      	nop
 801a90c:	0801a935 	.word	0x0801a935
 801a910:	0801a943 	.word	0x0801a943
 801a914:	0801a951 	.word	0x0801a951
 801a918:	0801a95f 	.word	0x0801a95f
 801a91c:	0801a96d 	.word	0x0801a96d
 801a920:	0801a97b 	.word	0x0801a97b
 801a924:	0801a989 	.word	0x0801a989
 801a928:	0801a997 	.word	0x0801a997
 801a92c:	0801a9a5 	.word	0x0801a9a5
 801a930:	0801a9b3 	.word	0x0801a9b3
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801a934:	2303      	movs	r3, #3
 801a936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 801a938:	2307      	movs	r3, #7
 801a93a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 801a93c:	2308      	movs	r3, #8
 801a93e:	757b      	strb	r3, [r7, #21]
      break;
 801a940:	e03f      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801a942:	2309      	movs	r3, #9
 801a944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 801a946:	230d      	movs	r3, #13
 801a948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801a94a:	230e      	movs	r3, #14
 801a94c:	757b      	strb	r3, [r7, #21]
      break;
 801a94e:	e038      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 801a950:	230f      	movs	r3, #15
 801a952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801a954:	2313      	movs	r3, #19
 801a956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 801a958:	2314      	movs	r3, #20
 801a95a:	757b      	strb	r3, [r7, #21]
      break;
 801a95c:	e031      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801a95e:	2315      	movs	r3, #21
 801a960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801a962:	2319      	movs	r3, #25
 801a964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801a966:	231a      	movs	r3, #26
 801a968:	757b      	strb	r3, [r7, #21]
      break;
 801a96a:	e02a      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 801a96c:	231b      	movs	r3, #27
 801a96e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801a970:	231f      	movs	r3, #31
 801a972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801a974:	2320      	movs	r3, #32
 801a976:	757b      	strb	r3, [r7, #21]
      break;
 801a978:	e023      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 801a97a:	2321      	movs	r3, #33	; 0x21
 801a97c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801a97e:	2325      	movs	r3, #37	; 0x25
 801a980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801a982:	2326      	movs	r3, #38	; 0x26
 801a984:	757b      	strb	r3, [r7, #21]
      break;
 801a986:	e01c      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 801a988:	2327      	movs	r3, #39	; 0x27
 801a98a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 801a98c:	232b      	movs	r3, #43	; 0x2b
 801a98e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 801a990:	232c      	movs	r3, #44	; 0x2c
 801a992:	757b      	strb	r3, [r7, #21]
      break;
 801a994:	e015      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 801a996:	232d      	movs	r3, #45	; 0x2d
 801a998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801a99a:	2331      	movs	r3, #49	; 0x31
 801a99c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801a99e:	2332      	movs	r3, #50	; 0x32
 801a9a0:	757b      	strb	r3, [r7, #21]
      break;
 801a9a2:	e00e      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 801a9a4:	2333      	movs	r3, #51	; 0x33
 801a9a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 801a9a8:	2337      	movs	r3, #55	; 0x37
 801a9aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 801a9ac:	2338      	movs	r3, #56	; 0x38
 801a9ae:	757b      	strb	r3, [r7, #21]
      break;
 801a9b0:	e007      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 801a9b2:	2339      	movs	r3, #57	; 0x39
 801a9b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 801a9b6:	233d      	movs	r3, #61	; 0x3d
 801a9b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801a9ba:	233e      	movs	r3, #62	; 0x3e
 801a9bc:	757b      	strb	r3, [r7, #21]
      break;
 801a9be:	e000      	b.n	801a9c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 801a9c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801a9c2:	89fb      	ldrh	r3, [r7, #14]
 801a9c4:	b2db      	uxtb	r3, r3
 801a9c6:	7dfa      	ldrb	r2, [r7, #23]
 801a9c8:	4611      	mov	r1, r2
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f7f5 f80c 	bl	800f9e8 <TS_IO_Read>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801a9d4:	7d3b      	ldrb	r3, [r7, #20]
 801a9d6:	b2db      	uxtb	r3, r3
 801a9d8:	119b      	asrs	r3, r3, #6
 801a9da:	f003 0203 	and.w	r2, r3, #3
 801a9de:	6a3b      	ldr	r3, [r7, #32]
 801a9e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801a9e2:	89fb      	ldrh	r3, [r7, #14]
 801a9e4:	b2db      	uxtb	r3, r3
 801a9e6:	7dba      	ldrb	r2, [r7, #22]
 801a9e8:	4611      	mov	r1, r2
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7f4 fffc 	bl	800f9e8 <TS_IO_Read>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801a9f4:	7d3b      	ldrb	r3, [r7, #20]
 801a9f6:	b2db      	uxtb	r3, r3
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 801a9fe:	89fb      	ldrh	r3, [r7, #14]
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	7d7a      	ldrb	r2, [r7, #21]
 801aa04:	4611      	mov	r1, r2
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7f4 ffee 	bl	800f9e8 <TS_IO_Read>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801aa10:	7d3b      	ldrb	r3, [r7, #20]
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	111b      	asrs	r3, r3, #4
 801aa16:	f003 0204 	and.w	r2, r3, #4
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 801aa1e:	bf00      	nop
 801aa20:	3718      	adds	r7, #24
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}
 801aa26:	bf00      	nop
 801aa28:	2000bfbc 	.word	0x2000bfbc

0801aa2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 801aa2c:	b480      	push	{r7}
 801aa2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 801aa30:	4b03      	ldr	r3, [pc, #12]	; (801aa40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801aa32:	781b      	ldrb	r3, [r3, #0]
}
 801aa34:	4618      	mov	r0, r3
 801aa36:	46bd      	mov	sp, r7
 801aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3c:	4770      	bx	lr
 801aa3e:	bf00      	nop
 801aa40:	2000bfbc 	.word	0x2000bfbc

0801aa44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 801aa48:	f7ff fff0 	bl	801aa2c <ft5336_Get_I2C_InitializedStatus>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d104      	bne.n	801aa5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801aa52:	f7f4 ffa5 	bl	800f9a0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801aa56:	4b02      	ldr	r3, [pc, #8]	; (801aa60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 801aa58:	2201      	movs	r2, #1
 801aa5a:	701a      	strb	r2, [r3, #0]
  }
}
 801aa5c:	bf00      	nop
 801aa5e:	bd80      	pop	{r7, pc}
 801aa60:	2000bfbc 	.word	0x2000bfbc

0801aa64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b085      	sub	sp, #20
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801aa72:	68fb      	ldr	r3, [r7, #12]
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3714      	adds	r7, #20
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7e:	4770      	bx	lr

0801aa80 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801aa80:	8880      	ldrh	r0, [r0, #4]
 801aa82:	4770      	bx	lr

0801aa84 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801aa84:	2300      	movs	r3, #0
 801aa86:	8083      	strh	r3, [r0, #4]
 801aa88:	4770      	bx	lr
	...

0801aa8c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa8e:	6803      	ldr	r3, [r0, #0]
 801aa90:	460e      	mov	r6, r1
 801aa92:	2100      	movs	r1, #0
 801aa94:	4605      	mov	r5, r0
 801aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa98:	4798      	blx	r3
 801aa9a:	4604      	mov	r4, r0
 801aa9c:	682b      	ldr	r3, [r5, #0]
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	1b34      	subs	r4, r6, r4
 801aaa2:	6a1b      	ldr	r3, [r3, #32]
 801aaa4:	b2a4      	uxth	r4, r4
 801aaa6:	4798      	blx	r3
 801aaa8:	88ab      	ldrh	r3, [r5, #4]
 801aaaa:	fbb4 f4f0 	udiv	r4, r4, r0
 801aaae:	42a3      	cmp	r3, r4
 801aab0:	d805      	bhi.n	801aabe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801aab2:	4b0e      	ldr	r3, [pc, #56]	; (801aaec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801aab4:	211e      	movs	r1, #30
 801aab6:	4a0e      	ldr	r2, [pc, #56]	; (801aaf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801aab8:	480e      	ldr	r0, [pc, #56]	; (801aaf4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801aaba:	f010 fc03 	bl	802b2c4 <__assert_func>
 801aabe:	682b      	ldr	r3, [r5, #0]
 801aac0:	2100      	movs	r1, #0
 801aac2:	4628      	mov	r0, r5
 801aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aac6:	4798      	blx	r3
 801aac8:	682b      	ldr	r3, [r5, #0]
 801aaca:	4607      	mov	r7, r0
 801aacc:	4628      	mov	r0, r5
 801aace:	6a1b      	ldr	r3, [r3, #32]
 801aad0:	4798      	blx	r3
 801aad2:	1bf3      	subs	r3, r6, r7
 801aad4:	b29b      	uxth	r3, r3
 801aad6:	fbb3 f2f0 	udiv	r2, r3, r0
 801aada:	fb02 3010 	mls	r0, r2, r0, r3
 801aade:	b118      	cbz	r0, 801aae8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801aae0:	4b05      	ldr	r3, [pc, #20]	; (801aaf8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801aae2:	211f      	movs	r1, #31
 801aae4:	4a02      	ldr	r2, [pc, #8]	; (801aaf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801aae6:	e7e7      	b.n	801aab8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801aae8:	4620      	mov	r0, r4
 801aaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aaec:	0802df80 	.word	0x0802df80
 801aaf0:	0802e0ee 	.word	0x0802e0ee
 801aaf4:	0802df95 	.word	0x0802df95
 801aaf8:	0802dfc3 	.word	0x0802dfc3

0801aafc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801aafc:	b538      	push	{r3, r4, r5, lr}
 801aafe:	6803      	ldr	r3, [r0, #0]
 801ab00:	460d      	mov	r5, r1
 801ab02:	4604      	mov	r4, r0
 801ab04:	6a1b      	ldr	r3, [r3, #32]
 801ab06:	4798      	blx	r3
 801ab08:	4285      	cmp	r5, r0
 801ab0a:	d905      	bls.n	801ab18 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801ab0c:	4b0c      	ldr	r3, [pc, #48]	; (801ab40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801ab0e:	212f      	movs	r1, #47	; 0x2f
 801ab10:	4a0c      	ldr	r2, [pc, #48]	; (801ab44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ab12:	480d      	ldr	r0, [pc, #52]	; (801ab48 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801ab14:	f010 fbd6 	bl	802b2c4 <__assert_func>
 801ab18:	6823      	ldr	r3, [r4, #0]
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	88a5      	ldrh	r5, [r4, #4]
 801ab1e:	69db      	ldr	r3, [r3, #28]
 801ab20:	4798      	blx	r3
 801ab22:	4285      	cmp	r5, r0
 801ab24:	d303      	bcc.n	801ab2e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801ab26:	4b09      	ldr	r3, [pc, #36]	; (801ab4c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801ab28:	2130      	movs	r1, #48	; 0x30
 801ab2a:	4a06      	ldr	r2, [pc, #24]	; (801ab44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ab2c:	e7f1      	b.n	801ab12 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801ab2e:	6823      	ldr	r3, [r4, #0]
 801ab30:	4620      	mov	r0, r4
 801ab32:	88a1      	ldrh	r1, [r4, #4]
 801ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab36:	4798      	blx	r3
 801ab38:	88a3      	ldrh	r3, [r4, #4]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	80a3      	strh	r3, [r4, #4]
 801ab3e:	bd38      	pop	{r3, r4, r5, pc}
 801ab40:	0802e03d 	.word	0x0802e03d
 801ab44:	0802e131 	.word	0x0802e131
 801ab48:	0802df95 	.word	0x0802df95
 801ab4c:	0802e054 	.word	0x0802e054

0801ab50 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801ab50:	b570      	push	{r4, r5, r6, lr}
 801ab52:	6803      	ldr	r3, [r0, #0]
 801ab54:	4616      	mov	r6, r2
 801ab56:	4604      	mov	r4, r0
 801ab58:	460d      	mov	r5, r1
 801ab5a:	6a1b      	ldr	r3, [r3, #32]
 801ab5c:	4798      	blx	r3
 801ab5e:	4286      	cmp	r6, r0
 801ab60:	d905      	bls.n	801ab6e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801ab62:	4b06      	ldr	r3, [pc, #24]	; (801ab7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801ab64:	2139      	movs	r1, #57	; 0x39
 801ab66:	4a06      	ldr	r2, [pc, #24]	; (801ab80 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801ab68:	4806      	ldr	r0, [pc, #24]	; (801ab84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801ab6a:	f010 fbab 	bl	802b2c4 <__assert_func>
 801ab6e:	6823      	ldr	r3, [r4, #0]
 801ab70:	4629      	mov	r1, r5
 801ab72:	4620      	mov	r0, r4
 801ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab7a:	4718      	bx	r3
 801ab7c:	0802e03d 	.word	0x0802e03d
 801ab80:	0802e0a4 	.word	0x0802e0a4
 801ab84:	0802df95 	.word	0x0802df95

0801ab88 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801ab88:	4770      	bx	lr
	...

0801ab8c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801ab8c:	4a02      	ldr	r2, [pc, #8]	; (801ab98 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801ab8e:	6002      	str	r2, [r0, #0]
 801ab90:	2200      	movs	r2, #0
 801ab92:	8082      	strh	r2, [r0, #4]
 801ab94:	4770      	bx	lr
 801ab96:	bf00      	nop
 801ab98:	0802e078 	.word	0x0802e078

0801ab9c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 801ab9c:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801aba0:	4770      	bx	lr

0801aba2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801aba2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801aba6:	4770      	bx	lr

0801aba8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 801aba8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 801abac:	4770      	bx	lr

0801abae <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801abae:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801abb2:	4770      	bx	lr

0801abb4 <_ZN8touchgfx11BoxProgressD1Ev>:
 801abb4:	4b03      	ldr	r3, [pc, #12]	; (801abc4 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 801abb6:	b510      	push	{r4, lr}
 801abb8:	4604      	mov	r4, r0
 801abba:	6003      	str	r3, [r0, #0]
 801abbc:	f000 f8b6 	bl	801ad2c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801abc0:	4620      	mov	r0, r4
 801abc2:	bd10      	pop	{r4, pc}
 801abc4:	0802e178 	.word	0x0802e178

0801abc8 <_ZN8touchgfx11BoxProgressD0Ev>:
 801abc8:	b510      	push	{r4, lr}
 801abca:	4604      	mov	r4, r0
 801abcc:	f7ff fff2 	bl	801abb4 <_ZN8touchgfx11BoxProgressD1Ev>
 801abd0:	21c0      	movs	r1, #192	; 0xc0
 801abd2:	4620      	mov	r0, r4
 801abd4:	f010 fb4b 	bl	802b26e <_ZdlPvj>
 801abd8:	4620      	mov	r0, r4
 801abda:	bd10      	pop	{r4, pc}

0801abdc <_ZN8touchgfx11BoxProgressC1Ev>:
 801abdc:	b510      	push	{r4, lr}
 801abde:	4604      	mov	r4, r0
 801abe0:	f000 f8b8 	bl	801ad54 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801abe4:	2201      	movs	r2, #1
 801abe6:	4b16      	ldr	r3, [pc, #88]	; (801ac40 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801abe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801abec:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801abf0:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 801abf4:	4a13      	ldr	r2, [pc, #76]	; (801ac44 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801abf6:	6023      	str	r3, [r4, #0]
 801abf8:	2300      	movs	r3, #0
 801abfa:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801abfe:	22ff      	movs	r2, #255	; 0xff
 801ac00:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 801ac04:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801ac08:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 801ac0c:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801ac10:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 801ac14:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801ac18:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801ac1c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801ac20:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801ac24:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801ac28:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801ac2c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801ac30:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801ac34:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801ac38:	f000 fbb8 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ac3c:	4620      	mov	r0, r4
 801ac3e:	bd10      	pop	{r4, pc}
 801ac40:	0802e178 	.word	0x0802e178
 801ac44:	0802f994 	.word	0x0802f994

0801ac48 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 801ac48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ac4c:	4617      	mov	r7, r2
 801ac4e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801ac52:	2200      	movs	r2, #0
 801ac54:	4604      	mov	r4, r0
 801ac56:	460e      	mov	r6, r1
 801ac58:	4698      	mov	r8, r3
 801ac5a:	4611      	mov	r1, r2
 801ac5c:	9500      	str	r5, [sp, #0]
 801ac5e:	3090      	adds	r0, #144	; 0x90
 801ac60:	f7f5 fe8a 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac64:	4643      	mov	r3, r8
 801ac66:	463a      	mov	r2, r7
 801ac68:	4631      	mov	r1, r6
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	9508      	str	r5, [sp, #32]
 801ac6e:	b002      	add	sp, #8
 801ac70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac74:	f000 b9fa 	b.w	801b06c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801ac78 <_ZN8touchgfx11BoxProgress8setValueEi>:
 801ac78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac7a:	4604      	mov	r4, r0
 801ac7c:	f000 fa40 	bl	801b100 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801ac80:	f104 0590 	add.w	r5, r4, #144	; 0x90
 801ac84:	4628      	mov	r0, r5
 801ac86:	f004 ff1d 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801ac8a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801ac8e:	2b03      	cmp	r3, #3
 801ac90:	d814      	bhi.n	801acbc <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801ac92:	e8df f003 	tbb	[pc, r3]
 801ac96:	0202      	.short	0x0202
 801ac98:	1010      	.short	0x1010
 801ac9a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f000 fa88 	bl	801b1b4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801aca4:	b200      	sxth	r0, r0
 801aca6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801acaa:	2b03      	cmp	r3, #3
 801acac:	d81a      	bhi.n	801ace4 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801acae:	e8df f003 	tbb	[pc, r3]
 801acb2:	0e07      	.short	0x0e07
 801acb4:	231f      	.short	0x231f
 801acb6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 801acba:	e7f0      	b.n	801ac9e <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 801acbc:	2000      	movs	r0, #0
 801acbe:	e7f2      	b.n	801aca6 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801acc0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801acc4:	9300      	str	r3, [sp, #0]
 801acc6:	4603      	mov	r3, r0
 801acc8:	2200      	movs	r2, #0
 801acca:	2100      	movs	r1, #0
 801accc:	e007      	b.n	801acde <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801acce:	8921      	ldrh	r1, [r4, #8]
 801acd0:	2200      	movs	r2, #0
 801acd2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801acd6:	1a09      	subs	r1, r1, r0
 801acd8:	9300      	str	r3, [sp, #0]
 801acda:	4603      	mov	r3, r0
 801acdc:	b209      	sxth	r1, r1
 801acde:	4628      	mov	r0, r5
 801ace0:	f7f5 fe4a 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ace4:	4628      	mov	r0, r5
 801ace6:	b003      	add	sp, #12
 801ace8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acec:	f004 beea 	b.w	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801acf0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801acf4:	9000      	str	r0, [sp, #0]
 801acf6:	e7e7      	b.n	801acc8 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 801acf8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801acfc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ad00:	1a12      	subs	r2, r2, r0
 801ad02:	9000      	str	r0, [sp, #0]
 801ad04:	b212      	sxth	r2, r2
 801ad06:	e7e0      	b.n	801acca <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

0801ad08 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801ad08:	b570      	push	{r4, r5, r6, lr}
 801ad0a:	6803      	ldr	r3, [r0, #0]
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801ad12:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801ad16:	4798      	blx	r3
 801ad18:	4601      	mov	r1, r0
 801ad1a:	462b      	mov	r3, r5
 801ad1c:	4620      	mov	r0, r4
 801ad1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad22:	4718      	bx	r3

0801ad24 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801ad24:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801ad28:	4770      	bx	lr
	...

0801ad2c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 801ad2c:	4b03      	ldr	r3, [pc, #12]	; (801ad3c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801ad2e:	b510      	push	{r4, lr}
 801ad30:	4604      	mov	r4, r0
 801ad32:	6003      	str	r3, [r0, #0]
 801ad34:	f000 f999 	bl	801b06a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801ad38:	4620      	mov	r0, r4
 801ad3a:	bd10      	pop	{r4, pc}
 801ad3c:	0802e250 	.word	0x0802e250

0801ad40 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801ad40:	b510      	push	{r4, lr}
 801ad42:	4604      	mov	r4, r0
 801ad44:	f7ff fff2 	bl	801ad2c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801ad48:	2190      	movs	r1, #144	; 0x90
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f010 fa8f 	bl	802b26e <_ZdlPvj>
 801ad50:	4620      	mov	r0, r4
 801ad52:	bd10      	pop	{r4, pc}

0801ad54 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801ad54:	b510      	push	{r4, lr}
 801ad56:	4604      	mov	r4, r0
 801ad58:	f000 fa4c 	bl	801b1f4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801ad5c:	4b03      	ldr	r3, [pc, #12]	; (801ad6c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801ad5e:	2100      	movs	r1, #0
 801ad60:	4620      	mov	r0, r4
 801ad62:	6023      	str	r3, [r4, #0]
 801ad64:	f7ff ffd0 	bl	801ad08 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 801ad68:	4620      	mov	r0, r4
 801ad6a:	bd10      	pop	{r4, pc}
 801ad6c:	0802e250 	.word	0x0802e250

0801ad70 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801ad70:	b570      	push	{r4, r5, r6, lr}
 801ad72:	6803      	ldr	r3, [r0, #0]
 801ad74:	4604      	mov	r4, r0
 801ad76:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801ad7a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801ad7e:	4798      	blx	r3
 801ad80:	4601      	mov	r1, r0
 801ad82:	462b      	mov	r3, r5
 801ad84:	4620      	mov	r0, r4
 801ad86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad8a:	4718      	bx	r3

0801ad8c <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 801ad8c:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801ad90:	4770      	bx	lr

0801ad92 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801ad92:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801ad96:	4770      	bx	lr

0801ad98 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801ad98:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 801ad9c:	4770      	bx	lr

0801ad9e <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801ad9e:	b507      	push	{r0, r1, r2, lr}
 801ada0:	ab02      	add	r3, sp, #8
 801ada2:	30bc      	adds	r0, #188	; 0xbc
 801ada4:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801ada8:	4619      	mov	r1, r3
 801adaa:	f002 fd45 	bl	801d838 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801adae:	b003      	add	sp, #12
 801adb0:	f85d fb04 	ldr.w	pc, [sp], #4

0801adb4 <_ZN8touchgfx13ImageProgressD1Ev>:
 801adb4:	4b03      	ldr	r3, [pc, #12]	; (801adc4 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801adb6:	b510      	push	{r4, lr}
 801adb8:	4604      	mov	r4, r0
 801adba:	6003      	str	r3, [r0, #0]
 801adbc:	f7ff ffb6 	bl	801ad2c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801adc0:	4620      	mov	r0, r4
 801adc2:	bd10      	pop	{r4, pc}
 801adc4:	0802e37c 	.word	0x0802e37c

0801adc8 <_ZN8touchgfx13ImageProgressD0Ev>:
 801adc8:	b510      	push	{r4, lr}
 801adca:	4604      	mov	r4, r0
 801adcc:	f7ff fff2 	bl	801adb4 <_ZN8touchgfx13ImageProgressD1Ev>
 801add0:	21f0      	movs	r1, #240	; 0xf0
 801add2:	4620      	mov	r0, r4
 801add4:	f010 fa4b 	bl	802b26e <_ZdlPvj>
 801add8:	4620      	mov	r0, r4
 801adda:	bd10      	pop	{r4, pc}

0801addc <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 801addc:	b508      	push	{r3, lr}
 801adde:	4b06      	ldr	r3, [pc, #24]	; (801adf8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	b92b      	cbnz	r3, 801adf0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 801ade4:	4b05      	ldr	r3, [pc, #20]	; (801adfc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801ade6:	21b8      	movs	r1, #184	; 0xb8
 801ade8:	4a05      	ldr	r2, [pc, #20]	; (801ae00 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801adea:	4806      	ldr	r0, [pc, #24]	; (801ae04 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 801adec:	f010 fa6a 	bl	802b2c4 <__assert_func>
 801adf0:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 801adf4:	bd08      	pop	{r3, pc}
 801adf6:	bf00      	nop
 801adf8:	2000c098 	.word	0x2000c098
 801adfc:	0802e310 	.word	0x0802e310
 801ae00:	0802e454 	.word	0x0802e454
 801ae04:	0802e34c 	.word	0x0802e34c

0801ae08 <_ZN8touchgfx13ImageProgressC1Ev>:
 801ae08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae0c:	4604      	mov	r4, r0
 801ae0e:	f7ff ffa1 	bl	801ad54 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801ae12:	4b31      	ldr	r3, [pc, #196]	; (801aed8 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 801ae14:	a902      	add	r1, sp, #8
 801ae16:	4626      	mov	r6, r4
 801ae18:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 801ae1c:	2500      	movs	r5, #0
 801ae1e:	4a2f      	ldr	r2, [pc, #188]	; (801aedc <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801ae20:	f846 3b90 	str.w	r3, [r6], #144
 801ae24:	2701      	movs	r7, #1
 801ae26:	4b2e      	ldr	r3, [pc, #184]	; (801aee0 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 801ae28:	4640      	mov	r0, r8
 801ae2a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801ae2e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801ae32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae36:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801ae3a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801ae3e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801ae42:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 801ae46:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801ae4a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801ae4e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 801ae52:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 801ae56:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801ae5a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801ae5e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801ae62:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 801ae66:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801ae6a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801ae6e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801ae72:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 801ae76:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801ae7a:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801ae7e:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801ae82:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 801ae86:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801ae8a:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801ae8e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801ae92:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 801ae96:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801ae9a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801ae9e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 801aea2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801aea6:	f003 f849 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801aeaa:	4b0e      	ldr	r3, [pc, #56]	; (801aee4 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 801aeac:	4641      	mov	r1, r8
 801aeae:	4630      	mov	r0, r6
 801aeb0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 801aeb4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801aeb8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 801aebc:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801aec0:	f000 fa74 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aec8:	4631      	mov	r1, r6
 801aeca:	f000 fa6f 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aece:	4620      	mov	r0, r4
 801aed0:	b002      	add	sp, #8
 801aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aed6:	bf00      	nop
 801aed8:	0802e37c 	.word	0x0802e37c
 801aedc:	0802fc08 	.word	0x0802fc08
 801aee0:	0802e6f8 	.word	0x0802e6f8
 801aee4:	0802f9fc 	.word	0x0802f9fc

0801aee8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801aee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801aeec:	4617      	mov	r7, r2
 801aeee:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801aef2:	2200      	movs	r2, #0
 801aef4:	4604      	mov	r4, r0
 801aef6:	460e      	mov	r6, r1
 801aef8:	4698      	mov	r8, r3
 801aefa:	4611      	mov	r1, r2
 801aefc:	9500      	str	r5, [sp, #0]
 801aefe:	3090      	adds	r0, #144	; 0x90
 801af00:	f7f5 fd3a 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801af04:	4643      	mov	r3, r8
 801af06:	463a      	mov	r2, r7
 801af08:	4631      	mov	r1, r6
 801af0a:	4620      	mov	r0, r4
 801af0c:	9508      	str	r5, [sp, #32]
 801af0e:	b002      	add	sp, #8
 801af10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af14:	f000 b8aa 	b.w	801b06c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801af18 <_ZN8touchgfx13ImageProgress8setValueEi>:
 801af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af1a:	4604      	mov	r4, r0
 801af1c:	f000 f8f0 	bl	801b100 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801af20:	f104 0790 	add.w	r7, r4, #144	; 0x90
 801af24:	4638      	mov	r0, r7
 801af26:	f004 fdcd 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801af2a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801af2e:	4620      	mov	r0, r4
 801af30:	2b01      	cmp	r3, #1
 801af32:	bf94      	ite	ls
 801af34:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801af38:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 801af3c:	f000 f93a 	bl	801b1b4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801af40:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 801af44:	4606      	mov	r6, r0
 801af46:	b205      	sxth	r5, r0
 801af48:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801af4c:	2a00      	cmp	r2, #0
 801af4e:	d056      	beq.n	801affe <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 801af50:	2b03      	cmp	r3, #3
 801af52:	d82c      	bhi.n	801afae <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801af54:	e8df f003 	tbb	[pc, r3]
 801af58:	3d311202 	.word	0x3d311202
 801af5c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801af60:	2200      	movs	r2, #0
 801af62:	9300      	str	r3, [sp, #0]
 801af64:	4611      	mov	r1, r2
 801af66:	462b      	mov	r3, r5
 801af68:	4638      	mov	r0, r7
 801af6a:	f7f5 fd05 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801af6e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801af72:	9300      	str	r3, [sp, #0]
 801af74:	462b      	mov	r3, r5
 801af76:	2200      	movs	r2, #0
 801af78:	4611      	mov	r1, r2
 801af7a:	e014      	b.n	801afa6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801af7c:	8921      	ldrh	r1, [r4, #8]
 801af7e:	2200      	movs	r2, #0
 801af80:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801af84:	1a09      	subs	r1, r1, r0
 801af86:	4638      	mov	r0, r7
 801af88:	9300      	str	r3, [sp, #0]
 801af8a:	462b      	mov	r3, r5
 801af8c:	b209      	sxth	r1, r1
 801af8e:	f7f5 fcf3 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801af92:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801af96:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801af9a:	4249      	negs	r1, r1
 801af9c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801afa0:	9200      	str	r2, [sp, #0]
 801afa2:	b209      	sxth	r1, r1
 801afa4:	2200      	movs	r2, #0
 801afa6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801afaa:	f7f5 fce5 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801afae:	4638      	mov	r0, r7
 801afb0:	b003      	add	sp, #12
 801afb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801afb6:	f004 bd85 	b.w	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801afba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801afbe:	2200      	movs	r2, #0
 801afc0:	9500      	str	r5, [sp, #0]
 801afc2:	2100      	movs	r1, #0
 801afc4:	4638      	mov	r0, r7
 801afc6:	f7f5 fcd7 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801afca:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801afce:	9500      	str	r5, [sp, #0]
 801afd0:	e7d1      	b.n	801af76 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801afd2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801afd6:	2100      	movs	r1, #0
 801afd8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801afdc:	1a12      	subs	r2, r2, r0
 801afde:	9500      	str	r5, [sp, #0]
 801afe0:	4638      	mov	r0, r7
 801afe2:	b212      	sxth	r2, r2
 801afe4:	f7f5 fcc8 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801afe8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 801afec:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801aff0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801aff4:	4252      	negs	r2, r2
 801aff6:	9100      	str	r1, [sp, #0]
 801aff8:	b212      	sxth	r2, r2
 801affa:	2100      	movs	r1, #0
 801affc:	e7d3      	b.n	801afa6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801affe:	2b03      	cmp	r3, #3
 801b000:	d8d5      	bhi.n	801afae <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801b002:	e8df f003 	tbb	[pc, r3]
 801b006:	1102      	.short	0x1102
 801b008:	2a1b      	.short	0x2a1b
 801b00a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b00e:	2200      	movs	r2, #0
 801b010:	4638      	mov	r0, r7
 801b012:	4611      	mov	r1, r2
 801b014:	9300      	str	r3, [sp, #0]
 801b016:	462b      	mov	r3, r5
 801b018:	f7f5 fcae 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b01c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b020:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801b024:	1af1      	subs	r1, r6, r3
 801b026:	e7bb      	b.n	801afa0 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 801b028:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801b02c:	2200      	movs	r2, #0
 801b02e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801b032:	1a09      	subs	r1, r1, r0
 801b034:	9300      	str	r3, [sp, #0]
 801b036:	462b      	mov	r3, r5
 801b038:	b209      	sxth	r1, r1
 801b03a:	e795      	b.n	801af68 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 801b03c:	2200      	movs	r2, #0
 801b03e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b042:	4638      	mov	r0, r7
 801b044:	9500      	str	r5, [sp, #0]
 801b046:	4611      	mov	r1, r2
 801b048:	f7f5 fc96 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b04c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 801b050:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b054:	1a32      	subs	r2, r6, r0
 801b056:	9000      	str	r0, [sp, #0]
 801b058:	e7ce      	b.n	801aff8 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801b05a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801b05e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801b062:	1a12      	subs	r2, r2, r0
 801b064:	9500      	str	r5, [sp, #0]
 801b066:	b212      	sxth	r2, r2
 801b068:	e7ab      	b.n	801afc2 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801b06a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801b06a:	4770      	bx	lr

0801b06c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801b06c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b070:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 801b074:	4604      	mov	r4, r0
 801b076:	460e      	mov	r6, r1
 801b078:	4698      	mov	r8, r3
 801b07a:	9700      	str	r7, [sp, #0]
 801b07c:	3058      	adds	r0, #88	; 0x58
 801b07e:	4615      	mov	r5, r2
 801b080:	f7f5 fc7a 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b084:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801b088:	eb06 0308 	add.w	r3, r6, r8
 801b08c:	429a      	cmp	r2, r3
 801b08e:	eb05 0207 	add.w	r2, r5, r7
 801b092:	bfb8      	it	lt
 801b094:	8123      	strhlt	r3, [r4, #8]
 801b096:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b09a:	4293      	cmp	r3, r2
 801b09c:	bfb8      	it	lt
 801b09e:	8162      	strhlt	r2, [r4, #10]
 801b0a0:	b002      	add	sp, #8
 801b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0a6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801b0a6:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801b0aa:	4770      	bx	lr

0801b0ac <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801b0ac:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801b0b0:	4770      	bx	lr

0801b0b2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801b0b2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801b0b6:	4770      	bx	lr

0801b0b8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801b0b8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801b0bc:	4770      	bx	lr

0801b0be <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801b0be:	b510      	push	{r4, lr}
 801b0c0:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801b0c4:	800c      	strh	r4, [r1, #0]
 801b0c6:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801b0ca:	8011      	strh	r1, [r2, #0]
 801b0cc:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801b0d0:	801a      	strh	r2, [r3, #0]
 801b0d2:	9b02      	ldr	r3, [sp, #8]
 801b0d4:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801b0d8:	801a      	strh	r2, [r3, #0]
 801b0da:	bd10      	pop	{r4, pc}

0801b0dc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801b0dc:	b510      	push	{r4, lr}
 801b0de:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801b0e2:	800c      	strh	r4, [r1, #0]
 801b0e4:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801b0e8:	8011      	strh	r1, [r2, #0]
 801b0ea:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801b0ee:	801a      	strh	r2, [r3, #0]
 801b0f0:	bd10      	pop	{r4, pc}

0801b0f2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801b0f2:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801b0f6:	800b      	strh	r3, [r1, #0]
 801b0f8:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801b0fc:	8013      	strh	r3, [r2, #0]
 801b0fe:	4770      	bx	lr

0801b100 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801b100:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801b104:	4299      	cmp	r1, r3
 801b106:	bfb8      	it	lt
 801b108:	4619      	movlt	r1, r3
 801b10a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801b10e:	4299      	cmp	r1, r3
 801b110:	bfa8      	it	ge
 801b112:	4619      	movge	r1, r3
 801b114:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801b118:	4770      	bx	lr

0801b11a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801b11a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801b11e:	4770      	bx	lr

0801b120 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801b120:	b510      	push	{r4, lr}
 801b122:	4604      	mov	r4, r0
 801b124:	2190      	movs	r1, #144	; 0x90
 801b126:	f010 f8a2 	bl	802b26e <_ZdlPvj>
 801b12a:	4620      	mov	r0, r4
 801b12c:	bd10      	pop	{r4, pc}

0801b12e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801b12e:	b510      	push	{r4, lr}
 801b130:	4604      	mov	r4, r0
 801b132:	302c      	adds	r0, #44	; 0x2c
 801b134:	f002 ff02 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b138:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b13a:	8123      	strh	r3, [r4, #8]
 801b13c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b13e:	8163      	strh	r3, [r4, #10]
 801b140:	bd10      	pop	{r4, pc}
	...

0801b144 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 801b144:	4291      	cmp	r1, r2
 801b146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b14a:	4604      	mov	r4, r0
 801b14c:	460e      	mov	r6, r1
 801b14e:	4615      	mov	r5, r2
 801b150:	4698      	mov	r8, r3
 801b152:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801b156:	db05      	blt.n	801b164 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801b158:	4b12      	ldr	r3, [pc, #72]	; (801b1a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801b15a:	214d      	movs	r1, #77	; 0x4d
 801b15c:	4a12      	ldr	r2, [pc, #72]	; (801b1a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801b15e:	4813      	ldr	r0, [pc, #76]	; (801b1ac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801b160:	f010 f8b0 	bl	802b2c4 <__assert_func>
 801b164:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801b168:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801b16c:	6803      	ldr	r3, [r0, #0]
 801b16e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801b172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b176:	4798      	blx	r3
 801b178:	f1b8 0f00 	cmp.w	r8, #0
 801b17c:	d10c      	bne.n	801b198 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801b17e:	1bad      	subs	r5, r5, r6
 801b180:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 801b184:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801b188:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 801b18c:	42bb      	cmp	r3, r7
 801b18e:	d806      	bhi.n	801b19e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801b190:	4b07      	ldr	r3, [pc, #28]	; (801b1b0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801b192:	215a      	movs	r1, #90	; 0x5a
 801b194:	4a04      	ldr	r2, [pc, #16]	; (801b1a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801b196:	e7e2      	b.n	801b15e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801b198:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 801b19c:	e7f2      	b.n	801b184 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1a2:	bf00      	nop
 801b1a4:	0802e487 	.word	0x0802e487
 801b1a8:	0802e5c4 	.word	0x0802e5c4
 801b1ac:	0802e491 	.word	0x0802e491
 801b1b0:	0802e4e8 	.word	0x0802e4e8

0801b1b4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801b1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	460d      	mov	r5, r1
 801b1ba:	b1b9      	cbz	r1, 801b1ec <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 801b1bc:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801b1c0:	ab01      	add	r3, sp, #4
 801b1c2:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801b1c6:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801b1ca:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801b1ce:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801b1d2:	1a12      	subs	r2, r2, r0
 801b1d4:	1b89      	subs	r1, r1, r6
 801b1d6:	1a38      	subs	r0, r7, r0
 801b1d8:	f004 fdb5 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801b1dc:	4629      	mov	r1, r5
 801b1de:	ab01      	add	r3, sp, #4
 801b1e0:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 801b1e4:	4430      	add	r0, r6
 801b1e6:	f004 fdae 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801b1ea:	b285      	uxth	r5, r0
 801b1ec:	4628      	mov	r0, r5
 801b1ee:	b003      	add	sp, #12
 801b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b1f4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801b1f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b1f8:	4604      	mov	r4, r0
 801b1fa:	2600      	movs	r6, #0
 801b1fc:	f7f7 f8fe 	bl	80123fc <_ZN8touchgfx8DrawableC1Ev>
 801b200:	4b1b      	ldr	r3, [pc, #108]	; (801b270 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801b202:	4625      	mov	r5, r4
 801b204:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b208:	af02      	add	r7, sp, #8
 801b20a:	62a6      	str	r6, [r4, #40]	; 0x28
 801b20c:	f845 3b2c 	str.w	r3, [r5], #44
 801b210:	4628      	mov	r0, r5
 801b212:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801b216:	f7f7 f8f1 	bl	80123fc <_ZN8touchgfx8DrawableC1Ev>
 801b21a:	4b16      	ldr	r3, [pc, #88]	; (801b274 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801b21c:	4639      	mov	r1, r7
 801b21e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801b222:	4628      	mov	r0, r5
 801b224:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b226:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801b22a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801b22e:	f002 fe85 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b232:	4638      	mov	r0, r7
 801b234:	f7f7 f8e2 	bl	80123fc <_ZN8touchgfx8DrawableC1Ev>
 801b238:	4b0f      	ldr	r3, [pc, #60]	; (801b278 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801b23a:	4632      	mov	r2, r6
 801b23c:	4631      	mov	r1, r6
 801b23e:	65a3      	str	r3, [r4, #88]	; 0x58
 801b240:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801b244:	4628      	mov	r0, r5
 801b246:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801b24a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801b24e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 801b252:	f7f7 f93f 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b256:	4629      	mov	r1, r5
 801b258:	4620      	mov	r0, r4
 801b25a:	f000 f8a7 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b25e:	4620      	mov	r0, r4
 801b260:	4639      	mov	r1, r7
 801b262:	f000 f8a3 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b266:	4620      	mov	r0, r4
 801b268:	b002      	add	sp, #8
 801b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b26e:	bf00      	nop
 801b270:	0802e50c 	.word	0x0802e50c
 801b274:	0802fc08 	.word	0x0802fc08
 801b278:	0802e6f8 	.word	0x0802e6f8

0801b27c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801b27c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b27e:	2000      	movs	r0, #0
 801b280:	b12b      	cbz	r3, 801b28e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801b282:	b920      	cbnz	r0, 801b28e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801b284:	1a5a      	subs	r2, r3, r1
 801b286:	699b      	ldr	r3, [r3, #24]
 801b288:	4250      	negs	r0, r2
 801b28a:	4150      	adcs	r0, r2
 801b28c:	e7f8      	b.n	801b280 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801b28e:	4770      	bx	lr

0801b290 <_ZN8touchgfx9Container9removeAllEv>:
 801b290:	2200      	movs	r2, #0
 801b292:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b294:	b123      	cbz	r3, 801b2a0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801b296:	6999      	ldr	r1, [r3, #24]
 801b298:	6281      	str	r1, [r0, #40]	; 0x28
 801b29a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801b29e:	e7f8      	b.n	801b292 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801b2a0:	4770      	bx	lr

0801b2a2 <_ZN8touchgfx9Container6unlinkEv>:
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	6283      	str	r3, [r0, #40]	; 0x28
 801b2a6:	4770      	bx	lr

0801b2a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ac:	461f      	mov	r7, r3
 801b2ae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801b2b2:	460d      	mov	r5, r1
 801b2b4:	4616      	mov	r6, r2
 801b2b6:	b103      	cbz	r3, 801b2ba <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801b2b8:	6038      	str	r0, [r7, #0]
 801b2ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b2bc:	b314      	cbz	r4, 801b304 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801b2be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b2c2:	b1eb      	cbz	r3, 801b300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b2c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b2c8:	428d      	cmp	r5, r1
 801b2ca:	db19      	blt.n	801b300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b2cc:	b289      	uxth	r1, r1
 801b2ce:	8923      	ldrh	r3, [r4, #8]
 801b2d0:	440b      	add	r3, r1
 801b2d2:	b21b      	sxth	r3, r3
 801b2d4:	429d      	cmp	r5, r3
 801b2d6:	da13      	bge.n	801b300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b2d8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b2dc:	4296      	cmp	r6, r2
 801b2de:	db0f      	blt.n	801b300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b2e0:	b292      	uxth	r2, r2
 801b2e2:	8963      	ldrh	r3, [r4, #10]
 801b2e4:	4413      	add	r3, r2
 801b2e6:	b21b      	sxth	r3, r3
 801b2e8:	429e      	cmp	r6, r3
 801b2ea:	da09      	bge.n	801b300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801b2ec:	6823      	ldr	r3, [r4, #0]
 801b2ee:	1ab2      	subs	r2, r6, r2
 801b2f0:	1a69      	subs	r1, r5, r1
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b2f8:	b212      	sxth	r2, r2
 801b2fa:	463b      	mov	r3, r7
 801b2fc:	b209      	sxth	r1, r1
 801b2fe:	47c0      	blx	r8
 801b300:	69a4      	ldr	r4, [r4, #24]
 801b302:	e7db      	b.n	801b2bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b308 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801b308:	2200      	movs	r2, #0
 801b30a:	8002      	strh	r2, [r0, #0]
 801b30c:	8042      	strh	r2, [r0, #2]
 801b30e:	8082      	strh	r2, [r0, #4]
 801b310:	80c2      	strh	r2, [r0, #6]
 801b312:	4770      	bx	lr

0801b314 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801b314:	b570      	push	{r4, r5, r6, lr}
 801b316:	460d      	mov	r5, r1
 801b318:	4616      	mov	r6, r2
 801b31a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b31c:	b13c      	cbz	r4, 801b32e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801b31e:	6823      	ldr	r3, [r4, #0]
 801b320:	4620      	mov	r0, r4
 801b322:	4632      	mov	r2, r6
 801b324:	4629      	mov	r1, r5
 801b326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b328:	4798      	blx	r3
 801b32a:	69a4      	ldr	r4, [r4, #24]
 801b32c:	e7f6      	b.n	801b31c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801b32e:	bd70      	pop	{r4, r5, r6, pc}

0801b330 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801b330:	b538      	push	{r3, r4, r5, lr}
 801b332:	460d      	mov	r5, r1
 801b334:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b336:	b134      	cbz	r4, 801b346 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801b338:	682b      	ldr	r3, [r5, #0]
 801b33a:	4621      	mov	r1, r4
 801b33c:	4628      	mov	r0, r5
 801b33e:	689b      	ldr	r3, [r3, #8]
 801b340:	4798      	blx	r3
 801b342:	69a4      	ldr	r4, [r4, #24]
 801b344:	e7f7      	b.n	801b336 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801b346:	bd38      	pop	{r3, r4, r5, pc}

0801b348 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801b348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b34a:	b19b      	cbz	r3, 801b374 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801b34c:	428b      	cmp	r3, r1
 801b34e:	d109      	bne.n	801b364 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801b350:	699a      	ldr	r2, [r3, #24]
 801b352:	2100      	movs	r1, #0
 801b354:	6159      	str	r1, [r3, #20]
 801b356:	6282      	str	r2, [r0, #40]	; 0x28
 801b358:	b902      	cbnz	r2, 801b35c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801b35a:	4770      	bx	lr
 801b35c:	6199      	str	r1, [r3, #24]
 801b35e:	4770      	bx	lr
 801b360:	4613      	mov	r3, r2
 801b362:	b13a      	cbz	r2, 801b374 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801b364:	699a      	ldr	r2, [r3, #24]
 801b366:	428a      	cmp	r2, r1
 801b368:	d1fa      	bne.n	801b360 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801b36a:	698a      	ldr	r2, [r1, #24]
 801b36c:	619a      	str	r2, [r3, #24]
 801b36e:	2300      	movs	r3, #0
 801b370:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801b374:	4770      	bx	lr

0801b376 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801b376:	b410      	push	{r4}
 801b378:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b37a:	4604      	mov	r4, r0
 801b37c:	b92b      	cbnz	r3, 801b38a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801b37e:	6803      	ldr	r3, [r0, #0]
 801b380:	4611      	mov	r1, r2
 801b382:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b388:	4718      	bx	r3
 801b38a:	b941      	cbnz	r1, 801b39e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801b38c:	6193      	str	r3, [r2, #24]
 801b38e:	6282      	str	r2, [r0, #40]	; 0x28
 801b390:	6154      	str	r4, [r2, #20]
 801b392:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b396:	4770      	bx	lr
 801b398:	4603      	mov	r3, r0
 801b39a:	2800      	cmp	r0, #0
 801b39c:	d0f9      	beq.n	801b392 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801b39e:	4299      	cmp	r1, r3
 801b3a0:	6998      	ldr	r0, [r3, #24]
 801b3a2:	d1f9      	bne.n	801b398 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801b3a4:	6190      	str	r0, [r2, #24]
 801b3a6:	618a      	str	r2, [r1, #24]
 801b3a8:	e7f2      	b.n	801b390 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801b3ac:	4288      	cmp	r0, r1
 801b3ae:	b508      	push	{r3, lr}
 801b3b0:	d105      	bne.n	801b3be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801b3b2:	4b11      	ldr	r3, [pc, #68]	; (801b3f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801b3b4:	2123      	movs	r1, #35	; 0x23
 801b3b6:	4a11      	ldr	r2, [pc, #68]	; (801b3fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b3b8:	4811      	ldr	r0, [pc, #68]	; (801b400 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801b3ba:	f00f ff83 	bl	802b2c4 <__assert_func>
 801b3be:	694b      	ldr	r3, [r1, #20]
 801b3c0:	b11b      	cbz	r3, 801b3ca <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801b3c2:	4b10      	ldr	r3, [pc, #64]	; (801b404 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801b3c4:	2124      	movs	r1, #36	; 0x24
 801b3c6:	4a0d      	ldr	r2, [pc, #52]	; (801b3fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b3c8:	e7f6      	b.n	801b3b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b3ca:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801b3ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b3d0:	b913      	cbnz	r3, 801b3d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801b3d2:	6281      	str	r1, [r0, #40]	; 0x28
 801b3d4:	bd08      	pop	{r3, pc}
 801b3d6:	4613      	mov	r3, r2
 801b3d8:	699a      	ldr	r2, [r3, #24]
 801b3da:	b12a      	cbz	r2, 801b3e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801b3dc:	428b      	cmp	r3, r1
 801b3de:	d1fa      	bne.n	801b3d6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801b3e0:	4b09      	ldr	r3, [pc, #36]	; (801b408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b3e2:	2135      	movs	r1, #53	; 0x35
 801b3e4:	4a05      	ldr	r2, [pc, #20]	; (801b3fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b3e6:	e7e7      	b.n	801b3b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b3e8:	428b      	cmp	r3, r1
 801b3ea:	d103      	bne.n	801b3f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801b3ec:	4b06      	ldr	r3, [pc, #24]	; (801b408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b3ee:	2138      	movs	r1, #56	; 0x38
 801b3f0:	4a02      	ldr	r2, [pc, #8]	; (801b3fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b3f2:	e7e1      	b.n	801b3b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b3f4:	6199      	str	r1, [r3, #24]
 801b3f6:	e7ed      	b.n	801b3d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801b3f8:	0802e625 	.word	0x0802e625
 801b3fc:	0802e77c 	.word	0x0802e77c
 801b400:	0802e651 	.word	0x0802e651
 801b404:	0802e684 	.word	0x0802e684
 801b408:	0802e6ba 	.word	0x0802e6ba

0801b40c <_ZN8touchgfx4RectaNERKS0_>:
 801b40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b410:	888b      	ldrh	r3, [r1, #4]
 801b412:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b416:	f9b0 a000 	ldrsh.w	sl, [r0]
 801b41a:	444b      	add	r3, r9
 801b41c:	b29b      	uxth	r3, r3
 801b41e:	fa0f f883 	sxth.w	r8, r3
 801b422:	45c2      	cmp	sl, r8
 801b424:	da30      	bge.n	801b488 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b426:	8882      	ldrh	r2, [r0, #4]
 801b428:	4452      	add	r2, sl
 801b42a:	b292      	uxth	r2, r2
 801b42c:	fa0f fe82 	sxth.w	lr, r2
 801b430:	45f1      	cmp	r9, lr
 801b432:	da29      	bge.n	801b488 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b434:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b438:	88cc      	ldrh	r4, [r1, #6]
 801b43a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801b43e:	442c      	add	r4, r5
 801b440:	b224      	sxth	r4, r4
 801b442:	42a6      	cmp	r6, r4
 801b444:	da20      	bge.n	801b488 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b446:	88c7      	ldrh	r7, [r0, #6]
 801b448:	4437      	add	r7, r6
 801b44a:	b2bf      	uxth	r7, r7
 801b44c:	fa0f fc87 	sxth.w	ip, r7
 801b450:	4565      	cmp	r5, ip
 801b452:	da19      	bge.n	801b488 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b454:	45ca      	cmp	sl, r9
 801b456:	4654      	mov	r4, sl
 801b458:	bfb8      	it	lt
 801b45a:	464c      	movlt	r4, r9
 801b45c:	42b5      	cmp	r5, r6
 801b45e:	bfb8      	it	lt
 801b460:	4635      	movlt	r5, r6
 801b462:	45f0      	cmp	r8, lr
 801b464:	bfc8      	it	gt
 801b466:	4613      	movgt	r3, r2
 801b468:	1b1b      	subs	r3, r3, r4
 801b46a:	8083      	strh	r3, [r0, #4]
 801b46c:	88ca      	ldrh	r2, [r1, #6]
 801b46e:	884b      	ldrh	r3, [r1, #2]
 801b470:	8004      	strh	r4, [r0, #0]
 801b472:	4413      	add	r3, r2
 801b474:	8045      	strh	r5, [r0, #2]
 801b476:	b29b      	uxth	r3, r3
 801b478:	b21a      	sxth	r2, r3
 801b47a:	4594      	cmp	ip, r2
 801b47c:	bfb8      	it	lt
 801b47e:	463b      	movlt	r3, r7
 801b480:	1b5b      	subs	r3, r3, r5
 801b482:	80c3      	strh	r3, [r0, #6]
 801b484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b488:	2300      	movs	r3, #0
 801b48a:	8003      	strh	r3, [r0, #0]
 801b48c:	8043      	strh	r3, [r0, #2]
 801b48e:	8083      	strh	r3, [r0, #4]
 801b490:	80c3      	strh	r3, [r0, #6]
 801b492:	e7f7      	b.n	801b484 <_ZN8touchgfx4RectaNERKS0_+0x78>

0801b494 <_ZNK8touchgfx4Rect7isEmptyEv>:
 801b494:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b498:	b12b      	cbz	r3, 801b4a6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801b49a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801b49e:	fab0 f080 	clz	r0, r0
 801b4a2:	0940      	lsrs	r0, r0, #5
 801b4a4:	4770      	bx	lr
 801b4a6:	2001      	movs	r0, #1
 801b4a8:	4770      	bx	lr

0801b4aa <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b4b4:	8003      	strh	r3, [r0, #0]
 801b4b6:	8043      	strh	r3, [r0, #2]
 801b4b8:	8083      	strh	r3, [r0, #4]
 801b4ba:	80c3      	strh	r3, [r0, #6]
 801b4bc:	2d00      	cmp	r5, #0
 801b4be:	d040      	beq.n	801b542 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801b4c0:	1d28      	adds	r0, r5, #4
 801b4c2:	f7ff ffe7 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4c6:	b988      	cbnz	r0, 801b4ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f7ff ffe3 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4ce:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b4d2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b4d6:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801b4da:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801b4de:	b138      	cbz	r0, 801b4f0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801b4e0:	8022      	strh	r2, [r4, #0]
 801b4e2:	8063      	strh	r3, [r4, #2]
 801b4e4:	f8a4 e004 	strh.w	lr, [r4, #4]
 801b4e8:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b4ec:	69ad      	ldr	r5, [r5, #24]
 801b4ee:	e7e5      	b.n	801b4bc <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801b4f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b4f4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b4f8:	4290      	cmp	r0, r2
 801b4fa:	4607      	mov	r7, r0
 801b4fc:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801b500:	460e      	mov	r6, r1
 801b502:	bfa8      	it	ge
 801b504:	4617      	movge	r7, r2
 801b506:	4299      	cmp	r1, r3
 801b508:	4472      	add	r2, lr
 801b50a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801b50e:	bfa8      	it	ge
 801b510:	461e      	movge	r6, r3
 801b512:	4440      	add	r0, r8
 801b514:	4471      	add	r1, lr
 801b516:	4463      	add	r3, ip
 801b518:	b200      	sxth	r0, r0
 801b51a:	8027      	strh	r7, [r4, #0]
 801b51c:	b212      	sxth	r2, r2
 801b51e:	8066      	strh	r6, [r4, #2]
 801b520:	b209      	sxth	r1, r1
 801b522:	b21b      	sxth	r3, r3
 801b524:	4290      	cmp	r0, r2
 801b526:	bfac      	ite	ge
 801b528:	ebc7 0200 	rsbge	r2, r7, r0
 801b52c:	ebc7 0202 	rsblt	r2, r7, r2
 801b530:	4299      	cmp	r1, r3
 801b532:	bfac      	ite	ge
 801b534:	ebc6 0301 	rsbge	r3, r6, r1
 801b538:	ebc6 0303 	rsblt	r3, r6, r3
 801b53c:	80a2      	strh	r2, [r4, #4]
 801b53e:	80e3      	strh	r3, [r4, #6]
 801b540:	e7d4      	b.n	801b4ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b542:	4620      	mov	r0, r4
 801b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b548 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801b548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b54c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b550:	b383      	cbz	r3, 801b5b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b552:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b554:	b374      	cbz	r4, 801b5b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b556:	f9b1 5000 	ldrsh.w	r5, [r1]
 801b55a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801b55e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801b562:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801b566:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b56a:	b303      	cbz	r3, 801b5ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b56c:	4668      	mov	r0, sp
 801b56e:	1d21      	adds	r1, r4, #4
 801b570:	f8ad 5000 	strh.w	r5, [sp]
 801b574:	f8ad 6002 	strh.w	r6, [sp, #2]
 801b578:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b57c:	f8ad 8006 	strh.w	r8, [sp, #6]
 801b580:	f7ff ff44 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801b584:	4668      	mov	r0, sp
 801b586:	f7ff ff85 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b58a:	b980      	cbnz	r0, 801b5ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b58c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b590:	4669      	mov	r1, sp
 801b592:	88a2      	ldrh	r2, [r4, #4]
 801b594:	4620      	mov	r0, r4
 801b596:	1a9b      	subs	r3, r3, r2
 801b598:	88e2      	ldrh	r2, [r4, #6]
 801b59a:	f8ad 3000 	strh.w	r3, [sp]
 801b59e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b5a2:	1a9b      	subs	r3, r3, r2
 801b5a4:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b5a8:	6823      	ldr	r3, [r4, #0]
 801b5aa:	689b      	ldr	r3, [r3, #8]
 801b5ac:	4798      	blx	r3
 801b5ae:	69a4      	ldr	r4, [r4, #24]
 801b5b0:	2c00      	cmp	r4, #0
 801b5b2:	d1d8      	bne.n	801b566 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801b5b4:	b002      	add	sp, #8
 801b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b5ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801b5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b5bc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b5c0:	460d      	mov	r5, r1
 801b5c2:	4616      	mov	r6, r2
 801b5c4:	b323      	cbz	r3, 801b610 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b5c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b5c8:	b314      	cbz	r4, 801b610 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b5ca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b5ce:	b1eb      	cbz	r3, 801b60c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b5d0:	6828      	ldr	r0, [r5, #0]
 801b5d2:	466b      	mov	r3, sp
 801b5d4:	6869      	ldr	r1, [r5, #4]
 801b5d6:	c303      	stmia	r3!, {r0, r1}
 801b5d8:	4668      	mov	r0, sp
 801b5da:	1d21      	adds	r1, r4, #4
 801b5dc:	f7ff ff16 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801b5e0:	4668      	mov	r0, sp
 801b5e2:	f7ff ff57 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5e6:	b988      	cbnz	r0, 801b60c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b5e8:	f8bd 3000 	ldrh.w	r3, [sp]
 801b5ec:	4669      	mov	r1, sp
 801b5ee:	88a2      	ldrh	r2, [r4, #4]
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	1a9b      	subs	r3, r3, r2
 801b5f4:	88e2      	ldrh	r2, [r4, #6]
 801b5f6:	f8ad 3000 	strh.w	r3, [sp]
 801b5fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b5fe:	1a9b      	subs	r3, r3, r2
 801b600:	4632      	mov	r2, r6
 801b602:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b606:	6823      	ldr	r3, [r4, #0]
 801b608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b60a:	4798      	blx	r3
 801b60c:	69a4      	ldr	r4, [r4, #24]
 801b60e:	e7db      	b.n	801b5c8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801b610:	b002      	add	sp, #8
 801b612:	bd70      	pop	{r4, r5, r6, pc}

0801b614 <_ZN8touchgfx6SliderD1Ev>:
 801b614:	4770      	bx	lr

0801b616 <_ZN8touchgfx6Slider8setValueEi>:
 801b616:	b570      	push	{r4, r5, r6, lr}
 801b618:	6803      	ldr	r3, [r0, #0]
 801b61a:	4604      	mov	r4, r0
 801b61c:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801b620:	4798      	blx	r3
 801b622:	4601      	mov	r1, r0
 801b624:	462b      	mov	r3, r5
 801b626:	4620      	mov	r0, r4
 801b628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b62c:	4718      	bx	r3

0801b62e <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801b62e:	b538      	push	{r3, r4, r5, lr}
 801b630:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 801b634:	4605      	mov	r5, r0
 801b636:	428c      	cmp	r4, r1
 801b638:	bfa8      	it	ge
 801b63a:	460c      	movge	r4, r1
 801b63c:	429c      	cmp	r4, r3
 801b63e:	bfac      	ite	ge
 801b640:	ebc3 0404 	rsbge	r4, r3, r4
 801b644:	ebc3 0403 	rsblt	r4, r3, r3
 801b648:	6803      	ldr	r3, [r0, #0]
 801b64a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b64e:	4798      	blx	r3
 801b650:	682b      	ldr	r3, [r5, #0]
 801b652:	fb00 4404 	mla	r4, r0, r4, r4
 801b656:	4628      	mov	r0, r5
 801b658:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b65c:	4798      	blx	r3
 801b65e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801b662:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 801b666:	2a01      	cmp	r2, #1
 801b668:	fb94 f0f0 	sdiv	r0, r4, r0
 801b66c:	bf08      	it	eq
 801b66e:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801b672:	4418      	add	r0, r3
 801b674:	bf04      	itt	eq
 801b676:	1a10      	subeq	r0, r2, r0
 801b678:	18c0      	addeq	r0, r0, r3
 801b67a:	b200      	sxth	r0, r0
 801b67c:	bd38      	pop	{r3, r4, r5, pc}

0801b67e <_ZNK8touchgfx6Slider15positionToValueEs>:
 801b67e:	b570      	push	{r4, r5, r6, lr}
 801b680:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 801b684:	4605      	mov	r5, r0
 801b686:	460c      	mov	r4, r1
 801b688:	428b      	cmp	r3, r1
 801b68a:	d109      	bne.n	801b6a0 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801b68c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b68e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801b692:	2b01      	cmp	r3, #1
 801b694:	bf01      	itttt	eq
 801b696:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 801b698:	1a18      	subeq	r0, r3, r0
 801b69a:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 801b69c:	18c0      	addeq	r0, r0, r3
 801b69e:	bd70      	pop	{r4, r5, r6, pc}
 801b6a0:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 801b6a4:	428b      	cmp	r3, r1
 801b6a6:	d101      	bne.n	801b6ac <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 801b6a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b6aa:	e7f0      	b.n	801b68e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801b6ac:	6803      	ldr	r3, [r0, #0]
 801b6ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b6b2:	4798      	blx	r3
 801b6b4:	682b      	ldr	r3, [r5, #0]
 801b6b6:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801b6ba:	4606      	mov	r6, r0
 801b6bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	1a64      	subs	r4, r4, r1
 801b6c4:	4798      	blx	r3
 801b6c6:	2102      	movs	r1, #2
 801b6c8:	682b      	ldr	r3, [r5, #0]
 801b6ca:	fb96 f6f1 	sdiv	r6, r6, r1
 801b6ce:	fb00 6404 	mla	r4, r0, r4, r6
 801b6d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	4798      	blx	r3
 801b6da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b6dc:	fb94 f0f0 	sdiv	r0, r4, r0
 801b6e0:	4418      	add	r0, r3
 801b6e2:	e7d4      	b.n	801b68e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

0801b6e4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 801b6e4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801b6e8:	2302      	movs	r3, #2
 801b6ea:	b92a      	cbnz	r2, 801b6f8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801b6ec:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801b6f0:	fb90 f0f3 	sdiv	r0, r0, r3
 801b6f4:	b280      	uxth	r0, r0
 801b6f6:	4770      	bx	lr
 801b6f8:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 801b6fc:	e7f8      	b.n	801b6f0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801b6fe <_ZN8touchgfx6Slider13setValueRangeEii>:
 801b6fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b700:	428b      	cmp	r3, r1
 801b702:	b410      	push	{r4}
 801b704:	db09      	blt.n	801b71a <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 801b706:	4293      	cmp	r3, r2
 801b708:	bfa8      	it	ge
 801b70a:	4613      	movge	r3, r2
 801b70c:	6804      	ldr	r4, [r0, #0]
 801b70e:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801b712:	46a4      	mov	ip, r4
 801b714:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b718:	4760      	bx	ip
 801b71a:	460b      	mov	r3, r1
 801b71c:	e7f6      	b.n	801b70c <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801b71e <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801b71e:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801b722:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 801b726:	1a10      	subs	r0, r2, r0
 801b728:	4770      	bx	lr

0801b72a <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801b72a:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801b72e:	1a10      	subs	r0, r2, r0
 801b730:	4770      	bx	lr

0801b732 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801b732:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b736:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 801b73a:	4604      	mov	r4, r0
 801b73c:	3094      	adds	r0, #148	; 0x94
 801b73e:	428e      	cmp	r6, r1
 801b740:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801b744:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 801b748:	bfb8      	it	lt
 801b74a:	460e      	movlt	r6, r1
 801b74c:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 801b750:	428e      	cmp	r6, r1
 801b752:	bfa8      	it	ge
 801b754:	460e      	movge	r6, r1
 801b756:	fa1f f886 	uxth.w	r8, r6
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d132      	bne.n	801b7c4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 801b75e:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801b762:	4631      	mov	r1, r6
 801b764:	f7f6 ff61 	bl	801262a <_ZN8touchgfx8Drawable6moveToEss>
 801b768:	4638      	mov	r0, r7
 801b76a:	f004 f9ab 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b76e:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 801b772:	6823      	ldr	r3, [r4, #0]
 801b774:	4620      	mov	r0, r4
 801b776:	eba8 0802 	sub.w	r8, r8, r2
 801b77a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b77e:	fa1f f888 	uxth.w	r8, r8
 801b782:	4798      	blx	r3
 801b784:	4480      	add	r8, r0
 801b786:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 801b78a:	4638      	mov	r0, r7
 801b78c:	f004 f99a 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b790:	6823      	ldr	r3, [r4, #0]
 801b792:	4631      	mov	r1, r6
 801b794:	4620      	mov	r0, r4
 801b796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b79a:	4798      	blx	r3
 801b79c:	6320      	str	r0, [r4, #48]	; 0x30
 801b79e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d03c      	beq.n	801b820 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b7a6:	6803      	ldr	r3, [r0, #0]
 801b7a8:	68db      	ldr	r3, [r3, #12]
 801b7aa:	4798      	blx	r3
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d037      	beq.n	801b820 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801b7b0:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801b7b4:	4621      	mov	r1, r4
 801b7b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b7b8:	6803      	ldr	r3, [r0, #0]
 801b7ba:	689b      	ldr	r3, [r3, #8]
 801b7bc:	b003      	add	sp, #12
 801b7be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7c2:	4718      	bx	r3
 801b7c4:	4632      	mov	r2, r6
 801b7c6:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 801b7ca:	f7f6 ff2e 	bl	801262a <_ZN8touchgfx8Drawable6moveToEss>
 801b7ce:	4638      	mov	r0, r7
 801b7d0:	f004 f978 	bl	801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>
 801b7d4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 801b7d8:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 801b7dc:	6823      	ldr	r3, [r4, #0]
 801b7de:	4405      	add	r5, r0
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b7e6:	b2ad      	uxth	r5, r5
 801b7e8:	4798      	blx	r3
 801b7ea:	6823      	ldr	r3, [r4, #0]
 801b7ec:	eba5 0508 	sub.w	r5, r5, r8
 801b7f0:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 801b7f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b7f8:	1a2d      	subs	r5, r5, r0
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	4798      	blx	r3
 801b7fe:	4440      	add	r0, r8
 801b800:	b2ad      	uxth	r5, r5
 801b802:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 801b806:	4649      	mov	r1, r9
 801b808:	b22a      	sxth	r2, r5
 801b80a:	9200      	str	r2, [sp, #0]
 801b80c:	b202      	sxth	r2, r0
 801b80e:	4638      	mov	r0, r7
 801b810:	f7f5 f8b2 	bl	8010978 <_ZN8touchgfx8Drawable11setPositionEssss>
 801b814:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 801b818:	1a2d      	subs	r5, r5, r0
 801b81a:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801b81e:	e7b4      	b.n	801b78a <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 801b820:	b003      	add	sp, #12
 801b822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b826 <_ZN8touchgfx6SliderD0Ev>:
 801b826:	b510      	push	{r4, lr}
 801b828:	4604      	mov	r4, r0
 801b82a:	21fc      	movs	r1, #252	; 0xfc
 801b82c:	f00f fd1f 	bl	802b26e <_ZdlPvj>
 801b830:	4620      	mov	r0, r4
 801b832:	bd10      	pop	{r4, pc}

0801b834 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 801b834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b838:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 801b83c:	4604      	mov	r4, r0
 801b83e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 801b842:	4689      	mov	r9, r1
 801b844:	4616      	mov	r6, r2
 801b846:	461d      	mov	r5, r3
 801b848:	45b8      	cmp	r8, r7
 801b84a:	d305      	bcc.n	801b858 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 801b84c:	4b28      	ldr	r3, [pc, #160]	; (801b8f0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 801b84e:	2147      	movs	r1, #71	; 0x47
 801b850:	4a28      	ldr	r2, [pc, #160]	; (801b8f4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 801b852:	4829      	ldr	r0, [pc, #164]	; (801b8f8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 801b854:	f00f fd36 	bl	802b2c4 <__assert_func>
 801b858:	f04f 0a00 	mov.w	sl, #0
 801b85c:	b213      	sxth	r3, r2
 801b85e:	fa0f fb81 	sxth.w	fp, r1
 801b862:	303c      	adds	r0, #60	; 0x3c
 801b864:	f800 ac10 	strb.w	sl, [r0, #-16]
 801b868:	461a      	mov	r2, r3
 801b86a:	4659      	mov	r1, fp
 801b86c:	9301      	str	r3, [sp, #4]
 801b86e:	f7f6 fe31 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b872:	9b01      	ldr	r3, [sp, #4]
 801b874:	4659      	mov	r1, fp
 801b876:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b87a:	461a      	mov	r2, r3
 801b87c:	f7f6 fe2a 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b880:	4652      	mov	r2, sl
 801b882:	4651      	mov	r1, sl
 801b884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b888:	f7f6 fe24 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b88c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b890:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801b894:	4620      	mov	r0, r4
 801b896:	4449      	add	r1, r9
 801b898:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 801b89c:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 801b8a0:	b28b      	uxth	r3, r1
 801b8a2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b8a6:	4439      	add	r1, r7
 801b8a8:	b289      	uxth	r1, r1
 801b8aa:	428b      	cmp	r3, r1
 801b8ac:	bf88      	it	hi
 801b8ae:	b219      	sxthhi	r1, r3
 801b8b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801b8b4:	bf98      	it	ls
 801b8b6:	b209      	sxthls	r1, r1
 801b8b8:	441e      	add	r6, r3
 801b8ba:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 801b8be:	441d      	add	r5, r3
 801b8c0:	b2b6      	uxth	r6, r6
 801b8c2:	6823      	ldr	r3, [r4, #0]
 801b8c4:	b2ad      	uxth	r5, r5
 801b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8c8:	42ae      	cmp	r6, r5
 801b8ca:	bf8c      	ite	hi
 801b8cc:	b235      	sxthhi	r5, r6
 801b8ce:	b22d      	sxthls	r5, r5
 801b8d0:	4798      	blx	r3
 801b8d2:	6823      	ldr	r3, [r4, #0]
 801b8d4:	4629      	mov	r1, r5
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8da:	4798      	blx	r3
 801b8dc:	6823      	ldr	r3, [r4, #0]
 801b8de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b8e0:	4620      	mov	r0, r4
 801b8e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b8e6:	b003      	add	sp, #12
 801b8e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ec:	4718      	bx	r3
 801b8ee:	bf00      	nop
 801b8f0:	0802e960 	.word	0x0802e960
 801b8f4:	0802ebda 	.word	0x0802ebda
 801b8f8:	0802e9d4 	.word	0x0802e9d4

0801b8fc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 801b8fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801b904:	4604      	mov	r4, r0
 801b906:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801b90a:	4689      	mov	r9, r1
 801b90c:	4690      	mov	r8, r2
 801b90e:	461d      	mov	r5, r3
 801b910:	42b7      	cmp	r7, r6
 801b912:	d305      	bcc.n	801b920 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 801b914:	4b25      	ldr	r3, [pc, #148]	; (801b9ac <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 801b916:	2163      	movs	r1, #99	; 0x63
 801b918:	4a25      	ldr	r2, [pc, #148]	; (801b9b0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 801b91a:	4826      	ldr	r0, [pc, #152]	; (801b9b4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 801b91c:	f00f fcd2 	bl	802b2c4 <__assert_func>
 801b920:	2301      	movs	r3, #1
 801b922:	fa0f fa81 	sxth.w	sl, r1
 801b926:	fa0f fb82 	sxth.w	fp, r2
 801b92a:	303c      	adds	r0, #60	; 0x3c
 801b92c:	f800 3c10 	strb.w	r3, [r0, #-16]
 801b930:	4651      	mov	r1, sl
 801b932:	465a      	mov	r2, fp
 801b934:	f7f6 fdce 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b938:	465a      	mov	r2, fp
 801b93a:	4651      	mov	r1, sl
 801b93c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801b940:	f7f6 fdc8 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 801b944:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801b948:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801b94c:	4620      	mov	r0, r4
 801b94e:	4489      	add	r9, r1
 801b950:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801b954:	6823      	ldr	r3, [r4, #0]
 801b956:	4429      	add	r1, r5
 801b958:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 801b95c:	fa1f f989 	uxth.w	r9, r9
 801b960:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801b964:	44a8      	add	r8, r5
 801b966:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 801b96a:	b289      	uxth	r1, r1
 801b96c:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801b970:	4435      	add	r5, r6
 801b972:	fa1f f888 	uxth.w	r8, r8
 801b976:	4589      	cmp	r9, r1
 801b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b97a:	b2ad      	uxth	r5, r5
 801b97c:	bf8c      	ite	hi
 801b97e:	fa0f f189 	sxthhi.w	r1, r9
 801b982:	b209      	sxthls	r1, r1
 801b984:	45a8      	cmp	r8, r5
 801b986:	bf8c      	ite	hi
 801b988:	fa0f f588 	sxthhi.w	r5, r8
 801b98c:	b22d      	sxthls	r5, r5
 801b98e:	4798      	blx	r3
 801b990:	6823      	ldr	r3, [r4, #0]
 801b992:	4629      	mov	r1, r5
 801b994:	4620      	mov	r0, r4
 801b996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b998:	4798      	blx	r3
 801b99a:	6823      	ldr	r3, [r4, #0]
 801b99c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b9a4:	b001      	add	sp, #4
 801b9a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9aa:	4718      	bx	r3
 801b9ac:	0802e8ee 	.word	0x0802e8ee
 801b9b0:	0802eb75 	.word	0x0802eb75
 801b9b4:	0802e9d4 	.word	0x0802e9d4

0801b9b8 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 801b9b8:	4291      	cmp	r1, r2
 801b9ba:	b510      	push	{r4, lr}
 801b9bc:	db06      	blt.n	801b9cc <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 801b9be:	4b08      	ldr	r3, [pc, #32]	; (801b9e0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 801b9c0:	f240 110b 	movw	r1, #267	; 0x10b
 801b9c4:	4a07      	ldr	r2, [pc, #28]	; (801b9e4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 801b9c6:	4808      	ldr	r0, [pc, #32]	; (801b9e8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 801b9c8:	f00f fc7c 	bl	802b2c4 <__assert_func>
 801b9cc:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801b9d0:	6802      	ldr	r2, [r0, #0]
 801b9d2:	4619      	mov	r1, r3
 801b9d4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9dc:	4710      	bx	r2
 801b9de:	bf00      	nop
 801b9e0:	0802e896 	.word	0x0802e896
 801b9e4:	0802eb39 	.word	0x0802eb39
 801b9e8:	0802e9d4 	.word	0x0802e9d4

0801b9ec <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 801b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9f0:	790b      	ldrb	r3, [r1, #4]
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	460d      	mov	r5, r1
 801b9f6:	b323      	cbz	r3, 801ba42 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 801b9f8:	2b01      	cmp	r3, #1
 801b9fa:	d135      	bne.n	801ba68 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801b9fc:	6823      	ldr	r3, [r4, #0]
 801b9fe:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801ba02:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 801ba06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801ba0a:	2a00      	cmp	r2, #0
 801ba0c:	d12a      	bne.n	801ba64 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801ba0e:	88ee      	ldrh	r6, [r5, #6]
 801ba10:	4620      	mov	r0, r4
 801ba12:	4798      	blx	r3
 801ba14:	1a31      	subs	r1, r6, r0
 801ba16:	4620      	mov	r0, r4
 801ba18:	b209      	sxth	r1, r1
 801ba1a:	47b8      	blx	r7
 801ba1c:	792b      	ldrb	r3, [r5, #4]
 801ba1e:	2b01      	cmp	r3, #1
 801ba20:	d122      	bne.n	801ba68 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801ba22:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801ba26:	b1f8      	cbz	r0, 801ba68 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801ba28:	6803      	ldr	r3, [r0, #0]
 801ba2a:	68db      	ldr	r3, [r3, #12]
 801ba2c:	4798      	blx	r3
 801ba2e:	b1d8      	cbz	r0, 801ba68 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801ba30:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801ba34:	4621      	mov	r1, r4
 801ba36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ba38:	6803      	ldr	r3, [r0, #0]
 801ba3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba3e:	689b      	ldr	r3, [r3, #8]
 801ba40:	4718      	bx	r3
 801ba42:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801ba46:	2800      	cmp	r0, #0
 801ba48:	d0d8      	beq.n	801b9fc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801ba4a:	6803      	ldr	r3, [r0, #0]
 801ba4c:	68db      	ldr	r3, [r3, #12]
 801ba4e:	4798      	blx	r3
 801ba50:	2800      	cmp	r0, #0
 801ba52:	d0d3      	beq.n	801b9fc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801ba54:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 801ba58:	4621      	mov	r1, r4
 801ba5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ba5c:	6803      	ldr	r3, [r0, #0]
 801ba5e:	689b      	ldr	r3, [r3, #8]
 801ba60:	4798      	blx	r3
 801ba62:	e7cb      	b.n	801b9fc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801ba64:	892e      	ldrh	r6, [r5, #8]
 801ba66:	e7d3      	b.n	801ba10 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 801ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba6c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 801ba6c:	b570      	push	{r4, r5, r6, lr}
 801ba6e:	6803      	ldr	r3, [r0, #0]
 801ba70:	4604      	mov	r4, r0
 801ba72:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801ba76:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801ba7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801ba7e:	b942      	cbnz	r2, 801ba92 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 801ba80:	894d      	ldrh	r5, [r1, #10]
 801ba82:	4798      	blx	r3
 801ba84:	1a29      	subs	r1, r5, r0
 801ba86:	4633      	mov	r3, r6
 801ba88:	4620      	mov	r0, r4
 801ba8a:	b209      	sxth	r1, r1
 801ba8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba90:	4718      	bx	r3
 801ba92:	898d      	ldrh	r5, [r1, #12]
 801ba94:	e7f5      	b.n	801ba82 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

0801ba98 <_ZN8touchgfx6SliderC1Ev>:
 801ba98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	4604      	mov	r4, r0
 801ba9e:	2500      	movs	r5, #0
 801baa0:	f7f6 fe10 	bl	80126c4 <_ZN8touchgfx9ContainerC1Ev>
 801baa4:	ae02      	add	r6, sp, #8
 801baa6:	4b25      	ldr	r3, [pc, #148]	; (801bb3c <_ZN8touchgfx6SliderC1Ev+0xa4>)
 801baa8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801baac:	f04f 0b01 	mov.w	fp, #1
 801bab0:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801bab4:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 801bab8:	6023      	str	r3, [r4, #0]
 801baba:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801babe:	4648      	mov	r0, r9
 801bac0:	4631      	mov	r1, r6
 801bac2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 801bac6:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 801baca:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801bace:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801bad2:	f7f7 f891 	bl	8012bf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801bad6:	4631      	mov	r1, r6
 801bad8:	4650      	mov	r0, sl
 801bada:	f8ad 7004 	strh.w	r7, [sp, #4]
 801bade:	f7f7 f88b 	bl	8012bf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801bae2:	4631      	mov	r1, r6
 801bae4:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801bae8:	4640      	mov	r0, r8
 801baea:	f8ad 7004 	strh.w	r7, [sp, #4]
 801baee:	f7f7 f883 	bl	8012bf8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801baf2:	4630      	mov	r0, r6
 801baf4:	f7f6 fde6 	bl	80126c4 <_ZN8touchgfx9ContainerC1Ev>
 801baf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801bafc:	4651      	mov	r1, sl
 801bafe:	4630      	mov	r0, r6
 801bb00:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 801bb04:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801bb08:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 801bb0c:	f7ff fc4e 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bb10:	4649      	mov	r1, r9
 801bb12:	4620      	mov	r0, r4
 801bb14:	f7ff fc4a 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bb18:	4631      	mov	r1, r6
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	f7ff fc46 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bb20:	4641      	mov	r1, r8
 801bb22:	4620      	mov	r0, r4
 801bb24:	f7ff fc42 	bl	801b3ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801bb28:	4620      	mov	r0, r4
 801bb2a:	2264      	movs	r2, #100	; 0x64
 801bb2c:	4629      	mov	r1, r5
 801bb2e:	f7ff fde6 	bl	801b6fe <_ZN8touchgfx6Slider13setValueRangeEii>
 801bb32:	4620      	mov	r0, r4
 801bb34:	b003      	add	sp, #12
 801bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb3a:	bf00      	nop
 801bb3c:	0802ea0c 	.word	0x0802ea0c

0801bb40 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb44:	4615      	mov	r5, r2
 801bb46:	4604      	mov	r4, r0
 801bb48:	4608      	mov	r0, r1
 801bb4a:	460e      	mov	r6, r1
 801bb4c:	461f      	mov	r7, r3
 801bb4e:	f005 fe67 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb52:	4680      	mov	r8, r0
 801bb54:	4628      	mov	r0, r5
 801bb56:	f005 fe63 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb5a:	4580      	cmp	r8, r0
 801bb5c:	d005      	beq.n	801bb6a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 801bb5e:	4b14      	ldr	r3, [pc, #80]	; (801bbb0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 801bb60:	2137      	movs	r1, #55	; 0x37
 801bb62:	4a14      	ldr	r2, [pc, #80]	; (801bbb4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801bb64:	4814      	ldr	r0, [pc, #80]	; (801bbb8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801bb66:	f00f fbad 	bl	802b2c4 <__assert_func>
 801bb6a:	4630      	mov	r0, r6
 801bb6c:	f005 fe92 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb70:	4680      	mov	r8, r0
 801bb72:	4628      	mov	r0, r5
 801bb74:	f005 fe8e 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb78:	4580      	cmp	r8, r0
 801bb7a:	d1f0      	bne.n	801bb5e <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 801bb7c:	4631      	mov	r1, r6
 801bb7e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801bb82:	f002 f9db 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801bb86:	4629      	mov	r1, r5
 801bb88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bb8c:	f002 f9d6 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801bb90:	4639      	mov	r1, r7
 801bb92:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801bb96:	f002 f9d1 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801bb9a:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 801bb9e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 801bba2:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 801bba6:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 801bbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbae:	bf00      	nop
 801bbb0:	0802e7b7 	.word	0x0802e7b7
 801bbb4:	0802eacc 	.word	0x0802eacc
 801bbb8:	0802e9d4 	.word	0x0802e9d4

0801bbbc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801bbbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bbc0:	4770      	bx	lr

0801bbc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801bbc2:	6803      	ldr	r3, [r0, #0]
 801bbc4:	b513      	push	{r0, r1, r4, lr}
 801bbc6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801bbca:	2300      	movs	r3, #0
 801bbcc:	e9cd 3300 	strd	r3, r3, [sp]
 801bbd0:	466b      	mov	r3, sp
 801bbd2:	47a0      	blx	r4
 801bbd4:	b002      	add	sp, #8
 801bbd6:	bd10      	pop	{r4, pc}

0801bbd8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801bbd8:	2301      	movs	r3, #1
 801bbda:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801bbde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801bbe2:	4770      	bx	lr

0801bbe4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801bbe4:	2301      	movs	r3, #1
 801bbe6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801bbea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801bbee:	4770      	bx	lr

0801bbf0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801bbf0:	6843      	ldr	r3, [r0, #4]
 801bbf2:	2201      	movs	r2, #1
 801bbf4:	725a      	strb	r2, [r3, #9]
 801bbf6:	6840      	ldr	r0, [r0, #4]
 801bbf8:	6803      	ldr	r3, [r0, #0]
 801bbfa:	691b      	ldr	r3, [r3, #16]
 801bbfc:	4718      	bx	r3

0801bbfe <_ZN8touchgfx3HAL8flushDMAEv>:
 801bbfe:	6840      	ldr	r0, [r0, #4]
 801bc00:	6803      	ldr	r3, [r0, #0]
 801bc02:	689b      	ldr	r3, [r3, #8]
 801bc04:	4718      	bx	r3
	...

0801bc08 <_ZN8touchgfx3HAL10beginFrameEv>:
 801bc08:	4b04      	ldr	r3, [pc, #16]	; (801bc1c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	b123      	cbz	r3, 801bc18 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801bc0e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801bc12:	f080 0001 	eor.w	r0, r0, #1
 801bc16:	4770      	bx	lr
 801bc18:	2001      	movs	r0, #1
 801bc1a:	4770      	bx	lr
 801bc1c:	2000bfcc 	.word	0x2000bfcc

0801bc20 <_ZN8touchgfx3HAL8endFrameEv>:
 801bc20:	b510      	push	{r4, lr}
 801bc22:	4604      	mov	r4, r0
 801bc24:	6840      	ldr	r0, [r0, #4]
 801bc26:	6803      	ldr	r3, [r0, #0]
 801bc28:	689b      	ldr	r3, [r3, #8]
 801bc2a:	4798      	blx	r3
 801bc2c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801bc30:	b113      	cbz	r3, 801bc38 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801bc32:	2301      	movs	r3, #1
 801bc34:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801bc38:	bd10      	pop	{r4, pc}

0801bc3a <_ZN8touchgfx3HAL9taskEntryEv>:
 801bc3a:	b508      	push	{r3, lr}
 801bc3c:	6803      	ldr	r3, [r0, #0]
 801bc3e:	4604      	mov	r4, r0
 801bc40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801bc42:	4798      	blx	r3
 801bc44:	6823      	ldr	r3, [r4, #0]
 801bc46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bc48:	4620      	mov	r0, r4
 801bc4a:	4798      	blx	r3
 801bc4c:	f7fd f964 	bl	8018f18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801bc50:	6823      	ldr	r3, [r4, #0]
 801bc52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bc54:	e7f8      	b.n	801bc48 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801bc58 <_ZN8touchgfx3HAL4tickEv>:
 801bc58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bc5a:	6803      	ldr	r3, [r0, #0]
 801bc5c:	4604      	mov	r4, r0
 801bc5e:	4d5c      	ldr	r5, [pc, #368]	; (801bdd0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801bc60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bc64:	4798      	blx	r3
 801bc66:	2800      	cmp	r0, #0
 801bc68:	f000 8097 	beq.w	801bd9a <_ZN8touchgfx3HAL4tickEv+0x142>
 801bc6c:	2001      	movs	r0, #1
 801bc6e:	2600      	movs	r6, #0
 801bc70:	f7fc fe36 	bl	80188e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801bc74:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801bc78:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801bc7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801bc80:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801bc84:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801bc88:	b133      	cbz	r3, 801bc98 <_ZN8touchgfx3HAL4tickEv+0x40>
 801bc8a:	6823      	ldr	r3, [r4, #0]
 801bc8c:	4620      	mov	r0, r4
 801bc8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bc92:	4798      	blx	r3
 801bc94:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801bc98:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801bc9c:	2601      	movs	r6, #1
 801bc9e:	6862      	ldr	r2, [r4, #4]
 801bca0:	f083 0301 	eor.w	r3, r3, #1
 801bca4:	702e      	strb	r6, [r5, #0]
 801bca6:	7253      	strb	r3, [r2, #9]
 801bca8:	f003 fade 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801bcac:	6803      	ldr	r3, [r0, #0]
 801bcae:	4631      	mov	r1, r6
 801bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcb2:	4798      	blx	r3
 801bcb4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801bcb8:	b90b      	cbnz	r3, 801bcbe <_ZN8touchgfx3HAL4tickEv+0x66>
 801bcba:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801bcbe:	f003 fad3 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801bcc2:	6803      	ldr	r3, [r0, #0]
 801bcc4:	695b      	ldr	r3, [r3, #20]
 801bcc6:	4798      	blx	r3
 801bcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcca:	6803      	ldr	r3, [r0, #0]
 801bccc:	691b      	ldr	r3, [r3, #16]
 801bcce:	4798      	blx	r3
 801bcd0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801bcd4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801bcd8:	3b01      	subs	r3, #1
 801bcda:	b2db      	uxtb	r3, r3
 801bcdc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801bce0:	b10a      	cbz	r2, 801bce6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d1eb      	bne.n	801bcbe <_ZN8touchgfx3HAL4tickEv+0x66>
 801bce6:	4a3b      	ldr	r2, [pc, #236]	; (801bdd4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801bce8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801bcec:	7813      	ldrb	r3, [r2, #0]
 801bcee:	3301      	adds	r3, #1
 801bcf0:	b25b      	sxtb	r3, r3
 801bcf2:	4299      	cmp	r1, r3
 801bcf4:	7013      	strb	r3, [r2, #0]
 801bcf6:	dc10      	bgt.n	801bd1a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	68e0      	ldr	r0, [r4, #12]
 801bcfc:	a902      	add	r1, sp, #8
 801bcfe:	7013      	strb	r3, [r2, #0]
 801bd00:	aa03      	add	r2, sp, #12
 801bd02:	6803      	ldr	r3, [r0, #0]
 801bd04:	68db      	ldr	r3, [r3, #12]
 801bd06:	4798      	blx	r3
 801bd08:	6823      	ldr	r3, [r4, #0]
 801bd0a:	2800      	cmp	r0, #0
 801bd0c:	d051      	beq.n	801bdb2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801bd0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801bd12:	4620      	mov	r0, r4
 801bd14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801bd18:	4798      	blx	r3
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	6960      	ldr	r0, [r4, #20]
 801bd1e:	f88d 3007 	strb.w	r3, [sp, #7]
 801bd22:	b158      	cbz	r0, 801bd3c <_ZN8touchgfx3HAL4tickEv+0xe4>
 801bd24:	6803      	ldr	r3, [r0, #0]
 801bd26:	f10d 0107 	add.w	r1, sp, #7
 801bd2a:	68db      	ldr	r3, [r3, #12]
 801bd2c:	4798      	blx	r3
 801bd2e:	b128      	cbz	r0, 801bd3c <_ZN8touchgfx3HAL4tickEv+0xe4>
 801bd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd32:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801bd36:	6803      	ldr	r3, [r0, #0]
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	4798      	blx	r3
 801bd3c:	f104 001c 	add.w	r0, r4, #28
 801bd40:	f00d fdf4 	bl	802992c <_ZN8touchgfx8Gestures4tickEv>
 801bd44:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801bd48:	b30b      	cbz	r3, 801bd8e <_ZN8touchgfx3HAL4tickEv+0x136>
 801bd4a:	6920      	ldr	r0, [r4, #16]
 801bd4c:	6803      	ldr	r3, [r0, #0]
 801bd4e:	691b      	ldr	r3, [r3, #16]
 801bd50:	4798      	blx	r3
 801bd52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd54:	4606      	mov	r6, r0
 801bd56:	b903      	cbnz	r3, 801bd5a <_ZN8touchgfx3HAL4tickEv+0x102>
 801bd58:	6720      	str	r0, [r4, #112]	; 0x70
 801bd5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd5c:	4a1e      	ldr	r2, [pc, #120]	; (801bdd8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801bd5e:	1af3      	subs	r3, r6, r3
 801bd60:	4293      	cmp	r3, r2
 801bd62:	d914      	bls.n	801bd8e <_ZN8touchgfx3HAL4tickEv+0x136>
 801bd64:	6920      	ldr	r0, [r4, #16]
 801bd66:	6803      	ldr	r3, [r0, #0]
 801bd68:	699b      	ldr	r3, [r3, #24]
 801bd6a:	4798      	blx	r3
 801bd6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd6e:	2264      	movs	r2, #100	; 0x64
 801bd70:	1af3      	subs	r3, r6, r3
 801bd72:	fbb3 f3f2 	udiv	r3, r3, r2
 801bd76:	fbb0 f0f3 	udiv	r0, r0, r3
 801bd7a:	2800      	cmp	r0, #0
 801bd7c:	dc1e      	bgt.n	801bdbc <_ZN8touchgfx3HAL4tickEv+0x164>
 801bd7e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801bd82:	6920      	ldr	r0, [r4, #16]
 801bd84:	2100      	movs	r1, #0
 801bd86:	6803      	ldr	r3, [r0, #0]
 801bd88:	69db      	ldr	r3, [r3, #28]
 801bd8a:	4798      	blx	r3
 801bd8c:	6726      	str	r6, [r4, #112]	; 0x70
 801bd8e:	f003 fa6b 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801bd92:	6803      	ldr	r3, [r0, #0]
 801bd94:	2100      	movs	r1, #0
 801bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd98:	4798      	blx	r3
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bda2:	4798      	blx	r3
 801bda4:	2001      	movs	r0, #1
 801bda6:	f7fc fda6 	bl	80188f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801bdaa:	2300      	movs	r3, #0
 801bdac:	702b      	strb	r3, [r5, #0]
 801bdae:	b004      	add	sp, #16
 801bdb0:	bd70      	pop	{r4, r5, r6, pc}
 801bdb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	4798      	blx	r3
 801bdba:	e7ae      	b.n	801bd1a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801bdbc:	2863      	cmp	r0, #99	; 0x63
 801bdbe:	bfcb      	itete	gt
 801bdc0:	2300      	movgt	r3, #0
 801bdc2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801bdc6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801bdca:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801bdce:	e7d8      	b.n	801bd82 <_ZN8touchgfx3HAL4tickEv+0x12a>
 801bdd0:	2000bfd4 	.word	0x2000bfd4
 801bdd4:	2000bfd5 	.word	0x2000bfd5
 801bdd8:	05f5e100 	.word	0x05f5e100

0801bddc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801bddc:	f7fd b83c 	b.w	8018e58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801bde0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801bde0:	6581      	str	r1, [r0, #88]	; 0x58
 801bde2:	301c      	adds	r0, #28
 801bde4:	f00d bda0 	b.w	8029928 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801bde8 <_ZN8touchgfx3HAL5touchEll>:
 801bde8:	b530      	push	{r4, r5, lr}
 801bdea:	b087      	sub	sp, #28
 801bdec:	4604      	mov	r4, r0
 801bdee:	a804      	add	r0, sp, #16
 801bdf0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801bdf4:	f003 f83c 	bl	801ee70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801bdf8:	9b04      	ldr	r3, [sp, #16]
 801bdfa:	a906      	add	r1, sp, #24
 801bdfc:	a803      	add	r0, sp, #12
 801bdfe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be02:	9b05      	ldr	r3, [sp, #20]
 801be04:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801be08:	f003 f880 	bl	801ef0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801be0c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801be10:	f104 001c 	add.w	r0, r4, #28
 801be14:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801be18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801be1c:	b189      	cbz	r1, 801be42 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801be1e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801be22:	9300      	str	r3, [sp, #0]
 801be24:	4613      	mov	r3, r2
 801be26:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801be2a:	462a      	mov	r2, r5
 801be2c:	f00d fd8c 	bl	8029948 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801be30:	b128      	cbz	r0, 801be3e <_ZN8touchgfx3HAL5touchEll+0x56>
 801be32:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801be36:	65e3      	str	r3, [r4, #92]	; 0x5c
 801be38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801be3c:	6623      	str	r3, [r4, #96]	; 0x60
 801be3e:	b007      	add	sp, #28
 801be40:	bd30      	pop	{r4, r5, pc}
 801be42:	f00d fdc5 	bl	80299d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801be46:	2301      	movs	r3, #1
 801be48:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801be4c:	e7f1      	b.n	801be32 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801be4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801be4e:	b570      	push	{r4, r5, r6, lr}
 801be50:	2b00      	cmp	r3, #0
 801be52:	d050      	beq.n	801bef6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801be54:	ea81 0002 	eor.w	r0, r1, r2
 801be58:	07c6      	lsls	r6, r0, #31
 801be5a:	d508      	bpl.n	801be6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801be5c:	3a01      	subs	r2, #1
 801be5e:	18cc      	adds	r4, r1, r3
 801be60:	42a1      	cmp	r1, r4
 801be62:	d048      	beq.n	801bef6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801be64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801be68:	f801 0b01 	strb.w	r0, [r1], #1
 801be6c:	e7f8      	b.n	801be60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801be6e:	07d5      	lsls	r5, r2, #31
 801be70:	bf42      	ittt	mi
 801be72:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801be76:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801be7a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801be7e:	2b01      	cmp	r3, #1
 801be80:	d915      	bls.n	801beae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801be82:	ea82 0001 	eor.w	r0, r2, r1
 801be86:	0784      	lsls	r4, r0, #30
 801be88:	d02d      	beq.n	801bee6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801be8a:	1e94      	subs	r4, r2, #2
 801be8c:	4608      	mov	r0, r1
 801be8e:	18ce      	adds	r6, r1, r3
 801be90:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801be94:	f820 5b02 	strh.w	r5, [r0], #2
 801be98:	1a35      	subs	r5, r6, r0
 801be9a:	2d01      	cmp	r5, #1
 801be9c:	d8f8      	bhi.n	801be90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801be9e:	1e98      	subs	r0, r3, #2
 801bea0:	f003 0301 	and.w	r3, r3, #1
 801bea4:	f020 0001 	bic.w	r0, r0, #1
 801bea8:	3002      	adds	r0, #2
 801beaa:	4401      	add	r1, r0
 801beac:	4402      	add	r2, r0
 801beae:	1f14      	subs	r4, r2, #4
 801beb0:	4608      	mov	r0, r1
 801beb2:	18ce      	adds	r6, r1, r3
 801beb4:	1a35      	subs	r5, r6, r0
 801beb6:	2d03      	cmp	r5, #3
 801beb8:	d810      	bhi.n	801bedc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801beba:	089c      	lsrs	r4, r3, #2
 801bebc:	00a0      	lsls	r0, r4, #2
 801bebe:	4401      	add	r1, r0
 801bec0:	3801      	subs	r0, #1
 801bec2:	4402      	add	r2, r0
 801bec4:	f06f 0003 	mvn.w	r0, #3
 801bec8:	fb00 3404 	mla	r4, r0, r4, r3
 801becc:	440c      	add	r4, r1
 801bece:	42a1      	cmp	r1, r4
 801bed0:	d011      	beq.n	801bef6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801bed2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801bed6:	f801 3b01 	strb.w	r3, [r1], #1
 801beda:	e7f8      	b.n	801bece <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801bedc:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801bee0:	f840 5b04 	str.w	r5, [r0], #4
 801bee4:	e7e6      	b.n	801beb4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801bee6:	0790      	lsls	r0, r2, #30
 801bee8:	d0e1      	beq.n	801beae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801beea:	f832 0b02 	ldrh.w	r0, [r2], #2
 801beee:	3b02      	subs	r3, #2
 801bef0:	f821 0b02 	strh.w	r0, [r1], #2
 801bef4:	e7db      	b.n	801beae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801bef6:	2001      	movs	r0, #1
 801bef8:	bd70      	pop	{r4, r5, r6, pc}

0801befa <_ZN8touchgfx3HAL7noTouchEv>:
 801befa:	b510      	push	{r4, lr}
 801befc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801bf00:	4604      	mov	r4, r0
 801bf02:	b153      	cbz	r3, 801bf1a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801bf04:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801bf08:	2101      	movs	r1, #1
 801bf0a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801bf0e:	301c      	adds	r0, #28
 801bf10:	f00d fd5e 	bl	80299d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bf14:	2300      	movs	r3, #0
 801bf16:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801bf1a:	bd10      	pop	{r4, pc}

0801bf1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801bf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf20:	4605      	mov	r5, r0
 801bf22:	6980      	ldr	r0, [r0, #24]
 801bf24:	b085      	sub	sp, #20
 801bf26:	460f      	mov	r7, r1
 801bf28:	4690      	mov	r8, r2
 801bf2a:	4699      	mov	r9, r3
 801bf2c:	b930      	cbnz	r0, 801bf3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801bf2e:	4b1f      	ldr	r3, [pc, #124]	; (801bfac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801bf30:	f44f 7198 	mov.w	r1, #304	; 0x130
 801bf34:	4a1e      	ldr	r2, [pc, #120]	; (801bfb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801bf36:	481f      	ldr	r0, [pc, #124]	; (801bfb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801bf38:	f00f f9c4 	bl	802b2c4 <__assert_func>
 801bf3c:	ac04      	add	r4, sp, #16
 801bf3e:	2600      	movs	r6, #0
 801bf40:	f844 6d04 	str.w	r6, [r4, #-4]!
 801bf44:	6806      	ldr	r6, [r0, #0]
 801bf46:	9401      	str	r4, [sp, #4]
 801bf48:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801bf4c:	9400      	str	r4, [sp, #0]
 801bf4e:	6834      	ldr	r4, [r6, #0]
 801bf50:	47a0      	blx	r4
 801bf52:	4c19      	ldr	r4, [pc, #100]	; (801bfb8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801bf54:	4606      	mov	r6, r0
 801bf56:	f8a4 9000 	strh.w	r9, [r4]
 801bf5a:	f7f4 fd61 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801bf5e:	6803      	ldr	r3, [r0, #0]
 801bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf62:	4798      	blx	r3
 801bf64:	280c      	cmp	r0, #12
 801bf66:	d80f      	bhi.n	801bf88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801bf68:	e8df f000 	tbb	[pc, r0]
 801bf6c:	1b1b1207 	.word	0x1b1b1207
 801bf70:	1b1b1b1b 	.word	0x1b1b1b1b
 801bf74:	1b1b1b1b 	.word	0x1b1b1b1b
 801bf78:	1b          	.byte	0x1b
 801bf79:	00          	.byte	0x00
 801bf7a:	8823      	ldrh	r3, [r4, #0]
 801bf7c:	fb08 7203 	mla	r2, r8, r3, r7
 801bf80:	9b03      	ldr	r3, [sp, #12]
 801bf82:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801bf86:	63eb      	str	r3, [r5, #60]	; 0x3c
 801bf88:	4630      	mov	r0, r6
 801bf8a:	b005      	add	sp, #20
 801bf8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf90:	8822      	ldrh	r2, [r4, #0]
 801bf92:	9b03      	ldr	r3, [sp, #12]
 801bf94:	fb08 7202 	mla	r2, r8, r2, r7
 801bf98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf9c:	1a9a      	subs	r2, r3, r2
 801bf9e:	63ea      	str	r2, [r5, #60]	; 0x3c
 801bfa0:	e7f2      	b.n	801bf88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801bfa2:	4b06      	ldr	r3, [pc, #24]	; (801bfbc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801bfa4:	f240 114d 	movw	r1, #333	; 0x14d
 801bfa8:	4a01      	ldr	r2, [pc, #4]	; (801bfb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801bfaa:	e7c4      	b.n	801bf36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801bfac:	0802ecaf 	.word	0x0802ecaf
 801bfb0:	0802efbe 	.word	0x0802efbe
 801bfb4:	0802ecf4 	.word	0x0802ecf4
 801bfb8:	2000bfc8 	.word	0x2000bfc8
 801bfbc:	0802ed1a 	.word	0x0802ed1a

0801bfc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801bfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfc4:	4698      	mov	r8, r3
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	b087      	sub	sp, #28
 801bfca:	460e      	mov	r6, r1
 801bfcc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801bfce:	4617      	mov	r7, r2
 801bfd0:	4b0d      	ldr	r3, [pc, #52]	; (801c008 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801bfd2:	4604      	mov	r4, r0
 801bfd4:	f8b3 9000 	ldrh.w	r9, [r3]
 801bfd8:	f7f4 fd22 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801bfdc:	6803      	ldr	r3, [r0, #0]
 801bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfe0:	4798      	blx	r3
 801bfe2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801bfe6:	463a      	mov	r2, r7
 801bfe8:	4631      	mov	r1, r6
 801bfea:	9302      	str	r3, [sp, #8]
 801bfec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801bff0:	9301      	str	r3, [sp, #4]
 801bff2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bff6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801bffa:	9300      	str	r3, [sp, #0]
 801bffc:	4620      	mov	r0, r4
 801bffe:	4643      	mov	r3, r8
 801c000:	47a8      	blx	r5
 801c002:	b007      	add	sp, #28
 801c004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c008:	2000bfc8 	.word	0x2000bfc8

0801c00c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c010:	4606      	mov	r6, r0
 801c012:	b089      	sub	sp, #36	; 0x24
 801c014:	4610      	mov	r0, r2
 801c016:	460c      	mov	r4, r1
 801c018:	4691      	mov	r9, r2
 801c01a:	4698      	mov	r8, r3
 801c01c:	f005 fb40 	bl	80216a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801c020:	2800      	cmp	r0, #0
 801c022:	f000 8092 	beq.w	801c14a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801c026:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801c164 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801c02a:	ad08      	add	r5, sp, #32
 801c02c:	f8df b138 	ldr.w	fp, [pc, #312]	; 801c168 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801c030:	f8da 0000 	ldr.w	r0, [sl]
 801c034:	4f4a      	ldr	r7, [pc, #296]	; (801c160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801c036:	6802      	ldr	r2, [r0, #0]
 801c038:	6a12      	ldr	r2, [r2, #32]
 801c03a:	4790      	blx	r2
 801c03c:	f8da 0000 	ldr.w	r0, [sl]
 801c040:	6802      	ldr	r2, [r0, #0]
 801c042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c044:	4790      	blx	r2
 801c046:	f8bb 3000 	ldrh.w	r3, [fp]
 801c04a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801c04e:	4628      	mov	r0, r5
 801c050:	9300      	str	r3, [sp, #0]
 801c052:	883b      	ldrh	r3, [r7, #0]
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	f005 fbe3 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c05a:	f8ab 0000 	strh.w	r0, [fp]
 801c05e:	4628      	mov	r0, r5
 801c060:	f005 fc18 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c064:	f8da b000 	ldr.w	fp, [sl]
 801c068:	8038      	strh	r0, [r7, #0]
 801c06a:	4648      	mov	r0, r9
 801c06c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801c070:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801c074:	9302      	str	r3, [sp, #8]
 801c076:	f005 fb13 	bl	80216a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801c07a:	f8da 2000 	ldr.w	r2, [sl]
 801c07e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801c082:	63d0      	str	r0, [r2, #60]	; 0x3c
 801c084:	4620      	mov	r0, r4
 801c086:	6822      	ldr	r2, [r4, #0]
 801c088:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801c08c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c08e:	2200      	movs	r2, #0
 801c090:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801c094:	4611      	mov	r1, r2
 801c096:	4798      	blx	r3
 801c098:	2201      	movs	r2, #1
 801c09a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801c09e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801c0a2:	1d22      	adds	r2, r4, #4
 801c0a4:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801c0a8:	2900      	cmp	r1, #0
 801c0aa:	d051      	beq.n	801c150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801c0ac:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801c0b0:	2900      	cmp	r1, #0
 801c0b2:	d04d      	beq.n	801c150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801c0b4:	6810      	ldr	r0, [r2, #0]
 801c0b6:	f10d 0c18 	add.w	ip, sp, #24
 801c0ba:	6851      	ldr	r1, [r2, #4]
 801c0bc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c0c0:	4641      	mov	r1, r8
 801c0c2:	a806      	add	r0, sp, #24
 801c0c4:	f7ff f9a2 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801c0c8:	4628      	mov	r0, r5
 801c0ca:	f005 fd35 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c0ce:	4680      	mov	r8, r0
 801c0d0:	f7f4 fca6 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c0d4:	6802      	ldr	r2, [r0, #0]
 801c0d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c0d8:	4790      	blx	r2
 801c0da:	4580      	cmp	r8, r0
 801c0dc:	d03d      	beq.n	801c15a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801c0de:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801c0e0:	b150      	cbz	r0, 801c0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	f005 fd28 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c0e8:	4605      	mov	r5, r0
 801c0ea:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801c0ec:	6803      	ldr	r3, [r0, #0]
 801c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0f0:	4798      	blx	r3
 801c0f2:	1a2b      	subs	r3, r5, r0
 801c0f4:	4258      	negs	r0, r3
 801c0f6:	4158      	adcs	r0, r3
 801c0f8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801c0fc:	2500      	movs	r5, #0
 801c0fe:	6963      	ldr	r3, [r4, #20]
 801c100:	4620      	mov	r0, r4
 801c102:	6822      	ldr	r2, [r4, #0]
 801c104:	a906      	add	r1, sp, #24
 801c106:	6165      	str	r5, [r4, #20]
 801c108:	9303      	str	r3, [sp, #12]
 801c10a:	6892      	ldr	r2, [r2, #8]
 801c10c:	4790      	blx	r2
 801c10e:	9b03      	ldr	r3, [sp, #12]
 801c110:	4620      	mov	r0, r4
 801c112:	4652      	mov	r2, sl
 801c114:	6163      	str	r3, [r4, #20]
 801c116:	4649      	mov	r1, r9
 801c118:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801c11c:	6823      	ldr	r3, [r4, #0]
 801c11e:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801c122:	4c10      	ldr	r4, [pc, #64]	; (801c164 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801c124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c126:	4798      	blx	r3
 801c128:	6820      	ldr	r0, [r4, #0]
 801c12a:	9b02      	ldr	r3, [sp, #8]
 801c12c:	9a00      	ldr	r2, [sp, #0]
 801c12e:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801c132:	4b0d      	ldr	r3, [pc, #52]	; (801c168 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801c134:	801a      	strh	r2, [r3, #0]
 801c136:	4b0a      	ldr	r3, [pc, #40]	; (801c160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801c138:	9a01      	ldr	r2, [sp, #4]
 801c13a:	801a      	strh	r2, [r3, #0]
 801c13c:	6803      	ldr	r3, [r0, #0]
 801c13e:	6a1b      	ldr	r3, [r3, #32]
 801c140:	4798      	blx	r3
 801c142:	6820      	ldr	r0, [r4, #0]
 801c144:	6803      	ldr	r3, [r0, #0]
 801c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c148:	4798      	blx	r3
 801c14a:	b009      	add	sp, #36	; 0x24
 801c14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c150:	ab06      	add	r3, sp, #24
 801c152:	6810      	ldr	r0, [r2, #0]
 801c154:	6851      	ldr	r1, [r2, #4]
 801c156:	c303      	stmia	r3!, {r0, r1}
 801c158:	e7b6      	b.n	801c0c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801c15a:	2000      	movs	r0, #0
 801c15c:	e7cc      	b.n	801c0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801c15e:	bf00      	nop
 801c160:	2000bfca 	.word	0x2000bfca
 801c164:	2000bfd0 	.word	0x2000bfd0
 801c168:	2000bfc8 	.word	0x2000bfc8

0801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801c16c:	4b07      	ldr	r3, [pc, #28]	; (801c18c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801c16e:	b510      	push	{r4, lr}
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	4604      	mov	r4, r0
 801c174:	b13b      	cbz	r3, 801c186 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801c176:	6803      	ldr	r3, [r0, #0]
 801c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c17a:	4798      	blx	r3
 801c17c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c17e:	4283      	cmp	r3, r0
 801c180:	d101      	bne.n	801c186 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801c182:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c184:	bd10      	pop	{r4, pc}
 801c186:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801c188:	e7fc      	b.n	801c184 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801c18a:	bf00      	nop
 801c18c:	2000bfcc 	.word	0x2000bfcc

0801c190 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801c190:	4b0b      	ldr	r3, [pc, #44]	; (801c1c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801c192:	b510      	push	{r4, lr}
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	4604      	mov	r4, r0
 801c198:	b95b      	cbnz	r3, 801c1b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c19a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801c19e:	2b02      	cmp	r3, #2
 801c1a0:	d007      	beq.n	801c1b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c1a2:	6840      	ldr	r0, [r0, #4]
 801c1a4:	f000 fbc8 	bl	801c938 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801c1a8:	b118      	cbz	r0, 801c1b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801c1aa:	6862      	ldr	r2, [r4, #4]
 801c1ac:	7a53      	ldrb	r3, [r2, #9]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d0fc      	beq.n	801c1ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801c1b2:	f7fc fe43 	bl	8018e3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f7ff ffd8 	bl	801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c1bc:	bd10      	pop	{r4, pc}
 801c1be:	bf00      	nop
 801c1c0:	2000bfcc 	.word	0x2000bfcc

0801c1c4 <_ZN8touchgfx3HAL10initializeEv>:
 801c1c4:	b510      	push	{r4, lr}
 801c1c6:	4604      	mov	r4, r0
 801c1c8:	f7fc fe14 	bl	8018df4 <_ZN8touchgfx10OSWrappers10initializeEv>
 801c1cc:	6860      	ldr	r0, [r4, #4]
 801c1ce:	6803      	ldr	r3, [r0, #0]
 801c1d0:	68db      	ldr	r3, [r3, #12]
 801c1d2:	4798      	blx	r3
 801c1d4:	68e0      	ldr	r0, [r4, #12]
 801c1d6:	6803      	ldr	r3, [r0, #0]
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	4798      	blx	r3
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	4620      	mov	r0, r4
 801c1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1e6:	4718      	bx	r3

0801c1e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801c1e8:	b508      	push	{r3, lr}
 801c1ea:	290c      	cmp	r1, #12
 801c1ec:	d817      	bhi.n	801c21e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801c1ee:	e8df f001 	tbb	[pc, r1]
 801c1f2:	090b      	.short	0x090b
 801c1f4:	0d0d0d07 	.word	0x0d0d0d07
 801c1f8:	1414140d 	.word	0x1414140d
 801c1fc:	1414      	.short	0x1414
 801c1fe:	0d          	.byte	0x0d
 801c1ff:	00          	.byte	0x00
 801c200:	2020      	movs	r0, #32
 801c202:	bd08      	pop	{r3, pc}
 801c204:	2018      	movs	r0, #24
 801c206:	e7fc      	b.n	801c202 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c208:	2010      	movs	r0, #16
 801c20a:	e7fa      	b.n	801c202 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c20c:	4b05      	ldr	r3, [pc, #20]	; (801c224 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801c20e:	f44f 710c 	mov.w	r1, #560	; 0x230
 801c212:	4a05      	ldr	r2, [pc, #20]	; (801c228 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801c214:	4805      	ldr	r0, [pc, #20]	; (801c22c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801c216:	f00f f855 	bl	802b2c4 <__assert_func>
 801c21a:	2008      	movs	r0, #8
 801c21c:	e7f1      	b.n	801c202 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c21e:	2000      	movs	r0, #0
 801c220:	e7ef      	b.n	801c202 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801c222:	bf00      	nop
 801c224:	0802eded 	.word	0x0802eded
 801c228:	0802f180 	.word	0x0802f180
 801c22c:	0802ecf4 	.word	0x0802ecf4

0801c230 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801c230:	b570      	push	{r4, r5, r6, lr}
 801c232:	460d      	mov	r5, r1
 801c234:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801c238:	4616      	mov	r6, r2
 801c23a:	461c      	mov	r4, r3
 801c23c:	f7ff ffd4 	bl	801c1e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801c240:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801c244:	10c0      	asrs	r0, r0, #3
 801c246:	fb06 5101 	mla	r1, r6, r1, r5
 801c24a:	fb00 4001 	mla	r0, r0, r1, r4
 801c24e:	bd70      	pop	{r4, r5, r6, pc}

0801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c254:	b08a      	sub	sp, #40	; 0x28
 801c256:	f04f 0c00 	mov.w	ip, #0
 801c25a:	4604      	mov	r4, r0
 801c25c:	469a      	mov	sl, r3
 801c25e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801c262:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801c266:	f1b8 0f02 	cmp.w	r8, #2
 801c26a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801c26e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801c272:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801c276:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801c27a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801c27e:	f8cd c020 	str.w	ip, [sp, #32]
 801c282:	d030      	beq.n	801c2e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801c284:	2bff      	cmp	r3, #255	; 0xff
 801c286:	d12c      	bne.n	801c2e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801c288:	4560      	cmp	r0, ip
 801c28a:	bf14      	ite	ne
 801c28c:	2004      	movne	r0, #4
 801c28e:	2001      	moveq	r0, #1
 801c290:	9204      	str	r2, [sp, #16]
 801c292:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801c296:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c29a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c29e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801c2a2:	f8ad 501a 	strh.w	r5, [sp, #26]
 801c2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c2aa:	4620      	mov	r0, r4
 801c2ac:	f7ff ff5e 	bl	801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c2b0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	4651      	mov	r1, sl
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	e9cd 9700 	strd	r9, r7, [sp]
 801c2be:	f7ff ffb7 	bl	801c230 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c2c2:	f8ad 901e 	strh.w	r9, [sp, #30]
 801c2c6:	9005      	str	r0, [sp, #20]
 801c2c8:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801c2cc:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801c2d0:	b106      	cbz	r6, 801c2d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801c2d2:	b98d      	cbnz	r5, 801c2f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801c2d4:	4b12      	ldr	r3, [pc, #72]	; (801c320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801c2d6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801c2da:	4a12      	ldr	r2, [pc, #72]	; (801c324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801c2dc:	4812      	ldr	r0, [pc, #72]	; (801c328 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801c2de:	f00e fff1 	bl	802b2c4 <__assert_func>
 801c2e2:	2004      	movs	r0, #4
 801c2e4:	e7d4      	b.n	801c290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801c2e6:	2bff      	cmp	r3, #255	; 0xff
 801c2e8:	d104      	bne.n	801c2f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801c2ea:	2800      	cmp	r0, #0
 801c2ec:	bf14      	ite	ne
 801c2ee:	2040      	movne	r0, #64	; 0x40
 801c2f0:	2020      	moveq	r0, #32
 801c2f2:	e7cd      	b.n	801c290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801c2f4:	2040      	movs	r0, #64	; 0x40
 801c2f6:	e7cb      	b.n	801c290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801c2f8:	6823      	ldr	r3, [r4, #0]
 801c2fa:	4620      	mov	r0, r4
 801c2fc:	9d02      	ldr	r5, [sp, #8]
 801c2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c300:	4798      	blx	r3
 801c302:	4228      	tst	r0, r5
 801c304:	d104      	bne.n	801c310 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801c306:	4b09      	ldr	r3, [pc, #36]	; (801c32c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801c308:	f240 11b1 	movw	r1, #433	; 0x1b1
 801c30c:	4a05      	ldr	r2, [pc, #20]	; (801c324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801c30e:	e7e5      	b.n	801c2dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801c310:	6860      	ldr	r0, [r4, #4]
 801c312:	a902      	add	r1, sp, #8
 801c314:	6803      	ldr	r3, [r0, #0]
 801c316:	685b      	ldr	r3, [r3, #4]
 801c318:	4798      	blx	r3
 801c31a:	b00a      	add	sp, #40	; 0x28
 801c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c320:	0802ed70 	.word	0x0802ed70
 801c324:	0802f022 	.word	0x0802f022
 801c328:	0802ecf4 	.word	0x0802ecf4
 801c32c:	0802eda8 	.word	0x0802eda8

0801c330 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801c330:	b510      	push	{r4, lr}
 801c332:	b08a      	sub	sp, #40	; 0x28
 801c334:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c338:	9408      	str	r4, [sp, #32]
 801c33a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801c33e:	9407      	str	r4, [sp, #28]
 801c340:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801c344:	9406      	str	r4, [sp, #24]
 801c346:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801c34a:	9405      	str	r4, [sp, #20]
 801c34c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801c350:	9404      	str	r4, [sp, #16]
 801c352:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801c356:	9403      	str	r4, [sp, #12]
 801c358:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801c35c:	9402      	str	r4, [sp, #8]
 801c35e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801c362:	e9cd 3400 	strd	r3, r4, [sp]
 801c366:	4613      	mov	r3, r2
 801c368:	2200      	movs	r2, #0
 801c36a:	f7ff ff71 	bl	801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c36e:	b00a      	add	sp, #40	; 0x28
 801c370:	bd10      	pop	{r4, pc}
	...

0801c374 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801c374:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c376:	b08b      	sub	sp, #44	; 0x2c
 801c378:	4616      	mov	r6, r2
 801c37a:	460d      	mov	r5, r1
 801c37c:	461f      	mov	r7, r3
 801c37e:	4604      	mov	r4, r0
 801c380:	f7f4 fb4e 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c384:	6803      	ldr	r3, [r0, #0]
 801c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c388:	4798      	blx	r3
 801c38a:	4b0e      	ldr	r3, [pc, #56]	; (801c3c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801c38c:	2200      	movs	r2, #0
 801c38e:	4629      	mov	r1, r5
 801c390:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c394:	881b      	ldrh	r3, [r3, #0]
 801c396:	4620      	mov	r0, r4
 801c398:	9306      	str	r3, [sp, #24]
 801c39a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801c39e:	9305      	str	r3, [sp, #20]
 801c3a0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c3a4:	9304      	str	r3, [sp, #16]
 801c3a6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801c3aa:	9303      	str	r3, [sp, #12]
 801c3ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c3b0:	9302      	str	r3, [sp, #8]
 801c3b2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c3b6:	e9cd 7300 	strd	r7, r3, [sp]
 801c3ba:	4633      	mov	r3, r6
 801c3bc:	f7ff ff48 	bl	801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c3c0:	b00b      	add	sp, #44	; 0x2c
 801c3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3c4:	2000bfc8 	.word	0x2000bfc8

0801c3c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801c3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3cc:	461f      	mov	r7, r3
 801c3ce:	4b14      	ldr	r3, [pc, #80]	; (801c420 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801c3d0:	b08a      	sub	sp, #40	; 0x28
 801c3d2:	4616      	mov	r6, r2
 801c3d4:	f8b3 8000 	ldrh.w	r8, [r3]
 801c3d8:	460d      	mov	r5, r1
 801c3da:	4604      	mov	r4, r0
 801c3dc:	f7f4 fb20 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c3e0:	6803      	ldr	r3, [r0, #0]
 801c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3e4:	4798      	blx	r3
 801c3e6:	2302      	movs	r3, #2
 801c3e8:	9008      	str	r0, [sp, #32]
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	4629      	mov	r1, r5
 801c3ee:	4620      	mov	r0, r4
 801c3f0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801c3f4:	2301      	movs	r3, #1
 801c3f6:	9305      	str	r3, [sp, #20]
 801c3f8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c3fc:	9304      	str	r3, [sp, #16]
 801c3fe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801c402:	9303      	str	r3, [sp, #12]
 801c404:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c408:	9302      	str	r3, [sp, #8]
 801c40a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c40e:	e9cd 7300 	strd	r7, r3, [sp]
 801c412:	4633      	mov	r3, r6
 801c414:	f7ff ff1c 	bl	801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c418:	b00a      	add	sp, #40	; 0x28
 801c41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c41e:	bf00      	nop
 801c420:	2000bfc8 	.word	0x2000bfc8

0801c424 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c428:	b08b      	sub	sp, #44	; 0x2c
 801c42a:	469b      	mov	fp, r3
 801c42c:	4604      	mov	r4, r0
 801c42e:	4692      	mov	sl, r2
 801c430:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c434:	2600      	movs	r6, #0
 801c436:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801c43a:	4689      	mov	r9, r1
 801c43c:	2fff      	cmp	r7, #255	; 0xff
 801c43e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801c442:	9608      	str	r6, [sp, #32]
 801c444:	bf14      	ite	ne
 801c446:	2308      	movne	r3, #8
 801c448:	2302      	moveq	r3, #2
 801c44a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801c44e:	f7ff fe8d 	bl	801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c452:	465a      	mov	r2, fp
 801c454:	4603      	mov	r3, r0
 801c456:	4651      	mov	r1, sl
 801c458:	4620      	mov	r0, r4
 801c45a:	e9cd 8500 	strd	r8, r5, [sp]
 801c45e:	f7ff fee7 	bl	801c230 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c462:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c466:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801c46a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c46e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801c472:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801c476:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c47a:	6823      	ldr	r3, [r4, #0]
 801c47c:	9d02      	ldr	r5, [sp, #8]
 801c47e:	9005      	str	r0, [sp, #20]
 801c480:	4620      	mov	r0, r4
 801c482:	f8ad 601c 	strh.w	r6, [sp, #28]
 801c486:	f8ad 801e 	strh.w	r8, [sp, #30]
 801c48a:	f8cd 9020 	str.w	r9, [sp, #32]
 801c48e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c494:	4798      	blx	r3
 801c496:	4228      	tst	r0, r5
 801c498:	d106      	bne.n	801c4a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801c49a:	4b07      	ldr	r3, [pc, #28]	; (801c4b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801c49c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801c4a0:	4a06      	ldr	r2, [pc, #24]	; (801c4bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801c4a2:	4807      	ldr	r0, [pc, #28]	; (801c4c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801c4a4:	f00e ff0e 	bl	802b2c4 <__assert_func>
 801c4a8:	6860      	ldr	r0, [r4, #4]
 801c4aa:	a902      	add	r1, sp, #8
 801c4ac:	6803      	ldr	r3, [r0, #0]
 801c4ae:	685b      	ldr	r3, [r3, #4]
 801c4b0:	4798      	blx	r3
 801c4b2:	b00b      	add	sp, #44	; 0x2c
 801c4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b8:	0802eda8 	.word	0x0802eda8
 801c4bc:	0802f0eb 	.word	0x0802f0eb
 801c4c0:	0802ecf4 	.word	0x0802ecf4

0801c4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801c4c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801c4c8:	461f      	mov	r7, r3
 801c4ca:	4b0b      	ldr	r3, [pc, #44]	; (801c4f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801c4cc:	460d      	mov	r5, r1
 801c4ce:	4616      	mov	r6, r2
 801c4d0:	f8b3 8000 	ldrh.w	r8, [r3]
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	f7f4 faa3 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c4da:	6803      	ldr	r3, [r0, #0]
 801c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4de:	4798      	blx	r3
 801c4e0:	463b      	mov	r3, r7
 801c4e2:	4632      	mov	r2, r6
 801c4e4:	4629      	mov	r1, r5
 801c4e6:	e9cd 8000 	strd	r8, r0, [sp]
 801c4ea:	4620      	mov	r0, r4
 801c4ec:	f7ff fea0 	bl	801c230 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801c4f0:	b002      	add	sp, #8
 801c4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4f6:	bf00      	nop
 801c4f8:	2000bfc8 	.word	0x2000bfc8

0801c4fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801c4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c500:	4698      	mov	r8, r3
 801c502:	b088      	sub	sp, #32
 801c504:	2300      	movs	r3, #0
 801c506:	4617      	mov	r7, r2
 801c508:	4604      	mov	r4, r0
 801c50a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801c50e:	9306      	str	r3, [sp, #24]
 801c510:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801c514:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801c518:	f8ad 6010 	strh.w	r6, [sp, #16]
 801c51c:	f8ad 5012 	strh.w	r5, [sp, #18]
 801c520:	e9cd 3100 	strd	r3, r1, [sp]
 801c524:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c528:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c52c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c530:	f88d 301c 	strb.w	r3, [sp, #28]
 801c534:	f7ff fe1a 	bl	801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c538:	4642      	mov	r2, r8
 801c53a:	4603      	mov	r3, r0
 801c53c:	4639      	mov	r1, r7
 801c53e:	4620      	mov	r0, r4
 801c540:	f7ff ffc0 	bl	801c4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c544:	4b16      	ldr	r3, [pc, #88]	; (801c5a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801c546:	9003      	str	r0, [sp, #12]
 801c548:	881b      	ldrh	r3, [r3, #0]
 801c54a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c54e:	f7f4 fa67 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c552:	6803      	ldr	r3, [r0, #0]
 801c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c556:	4798      	blx	r3
 801c558:	f88d 001e 	strb.w	r0, [sp, #30]
 801c55c:	f88d 001d 	strb.w	r0, [sp, #29]
 801c560:	b106      	cbz	r6, 801c564 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801c562:	b935      	cbnz	r5, 801c572 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801c564:	4b0f      	ldr	r3, [pc, #60]	; (801c5a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801c566:	f240 11cd 	movw	r1, #461	; 0x1cd
 801c56a:	4a0f      	ldr	r2, [pc, #60]	; (801c5a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801c56c:	480f      	ldr	r0, [pc, #60]	; (801c5ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801c56e:	f00e fea9 	bl	802b2c4 <__assert_func>
 801c572:	6823      	ldr	r3, [r4, #0]
 801c574:	4620      	mov	r0, r4
 801c576:	9d00      	ldr	r5, [sp, #0]
 801c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c57a:	4798      	blx	r3
 801c57c:	4228      	tst	r0, r5
 801c57e:	d104      	bne.n	801c58a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801c580:	4b0b      	ldr	r3, [pc, #44]	; (801c5b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801c582:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801c586:	4a08      	ldr	r2, [pc, #32]	; (801c5a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801c588:	e7f0      	b.n	801c56c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801c58a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c58c:	4669      	mov	r1, sp
 801c58e:	6860      	ldr	r0, [r4, #4]
 801c590:	9306      	str	r3, [sp, #24]
 801c592:	6803      	ldr	r3, [r0, #0]
 801c594:	685b      	ldr	r3, [r3, #4]
 801c596:	4798      	blx	r3
 801c598:	b008      	add	sp, #32
 801c59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c59e:	bf00      	nop
 801c5a0:	2000bfc8 	.word	0x2000bfc8
 801c5a4:	0802ed70 	.word	0x0802ed70
 801c5a8:	0802eed4 	.word	0x0802eed4
 801c5ac:	0802ecf4 	.word	0x0802ecf4
 801c5b0:	0802eda8 	.word	0x0802eda8

0801c5b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801c5b4:	b570      	push	{r4, r5, r6, lr}
 801c5b6:	b08a      	sub	sp, #40	; 0x28
 801c5b8:	4604      	mov	r4, r0
 801c5ba:	466b      	mov	r3, sp
 801c5bc:	e883 0006 	stmia.w	r3, {r1, r2}
 801c5c0:	4b1f      	ldr	r3, [pc, #124]	; (801c640 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801c5c2:	781b      	ldrb	r3, [r3, #0]
 801c5c4:	b933      	cbnz	r3, 801c5d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801c5c6:	4b1f      	ldr	r3, [pc, #124]	; (801c644 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801c5c8:	f240 11f9 	movw	r1, #505	; 0x1f9
 801c5cc:	4a1e      	ldr	r2, [pc, #120]	; (801c648 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801c5ce:	481f      	ldr	r0, [pc, #124]	; (801c64c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801c5d0:	f00e fe78 	bl	802b2c4 <__assert_func>
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	f8bd 5000 	ldrh.w	r5, [sp]
 801c5da:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801c5de:	9308      	str	r3, [sp, #32]
 801c5e0:	2301      	movs	r3, #1
 801c5e2:	9302      	str	r3, [sp, #8]
 801c5e4:	6803      	ldr	r3, [r0, #0]
 801c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5e8:	4798      	blx	r3
 801c5ea:	4632      	mov	r2, r6
 801c5ec:	4629      	mov	r1, r5
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	4620      	mov	r0, r4
 801c5f2:	f7ff ff67 	bl	801c4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c5f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c5f8:	9003      	str	r0, [sp, #12]
 801c5fa:	9305      	str	r3, [sp, #20]
 801c5fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c600:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c604:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c608:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c60c:	4b10      	ldr	r3, [pc, #64]	; (801c650 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801c60e:	881b      	ldrh	r3, [r3, #0]
 801c610:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c614:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c618:	f7f4 fa02 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c61c:	6803      	ldr	r3, [r0, #0]
 801c61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c620:	4798      	blx	r3
 801c622:	23ff      	movs	r3, #255	; 0xff
 801c624:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801c628:	a902      	add	r1, sp, #8
 801c62a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801c62e:	6860      	ldr	r0, [r4, #4]
 801c630:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c634:	6803      	ldr	r3, [r0, #0]
 801c636:	685b      	ldr	r3, [r3, #4]
 801c638:	4798      	blx	r3
 801c63a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801c63c:	b00a      	add	sp, #40	; 0x28
 801c63e:	bd70      	pop	{r4, r5, r6, pc}
 801c640:	2000bfcd 	.word	0x2000bfcd
 801c644:	0802ec41 	.word	0x0802ec41
 801c648:	0802ef78 	.word	0x0802ef78
 801c64c:	0802ecf4 	.word	0x0802ecf4
 801c650:	2000bfc8 	.word	0x2000bfc8

0801c654 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801c654:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c656:	b08b      	sub	sp, #44	; 0x2c
 801c658:	4604      	mov	r4, r0
 801c65a:	466d      	mov	r5, sp
 801c65c:	e885 0006 	stmia.w	r5, {r1, r2}
 801c660:	461d      	mov	r5, r3
 801c662:	2300      	movs	r3, #0
 801c664:	f8bd 6000 	ldrh.w	r6, [sp]
 801c668:	9308      	str	r3, [sp, #32]
 801c66a:	2301      	movs	r3, #1
 801c66c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801c670:	9302      	str	r3, [sp, #8]
 801c672:	6803      	ldr	r3, [r0, #0]
 801c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c676:	4798      	blx	r3
 801c678:	463a      	mov	r2, r7
 801c67a:	4631      	mov	r1, r6
 801c67c:	4603      	mov	r3, r0
 801c67e:	4620      	mov	r0, r4
 801c680:	f7ff ff20 	bl	801c4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c684:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c688:	9003      	str	r0, [sp, #12]
 801c68a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c68e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c692:	9505      	str	r5, [sp, #20]
 801c694:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c698:	4b0d      	ldr	r3, [pc, #52]	; (801c6d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801c69a:	881b      	ldrh	r3, [r3, #0]
 801c69c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c6a6:	f7f4 f9bb 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801c6aa:	6803      	ldr	r3, [r0, #0]
 801c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6ae:	4798      	blx	r3
 801c6b0:	23ff      	movs	r3, #255	; 0xff
 801c6b2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801c6b6:	a902      	add	r1, sp, #8
 801c6b8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801c6bc:	6860      	ldr	r0, [r4, #4]
 801c6be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c6c2:	6803      	ldr	r3, [r0, #0]
 801c6c4:	685b      	ldr	r3, [r3, #4]
 801c6c6:	4798      	blx	r3
 801c6c8:	4628      	mov	r0, r5
 801c6ca:	b00b      	add	sp, #44	; 0x2c
 801c6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	2000bfc8 	.word	0x2000bfc8

0801c6d4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801c6d4:	b570      	push	{r4, r5, r6, lr}
 801c6d6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801c6da:	4604      	mov	r4, r0
 801c6dc:	b19b      	cbz	r3, 801c706 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801c6de:	2002      	movs	r0, #2
 801c6e0:	f7fc f914 	bl	801890c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801c6ec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801c6f0:	6823      	ldr	r3, [r4, #0]
 801c6f2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801c6f6:	f7ff fd39 	bl	801c16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c6fa:	4601      	mov	r1, r0
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	462b      	mov	r3, r5
 801c700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c704:	4718      	bx	r3
 801c706:	bd70      	pop	{r4, r5, r6, pc}

0801c708 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801c708:	4770      	bx	lr

0801c70a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801c70a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801c70e:	1a13      	subs	r3, r2, r0
 801c710:	4258      	negs	r0, r3
 801c712:	4158      	adcs	r0, r3
 801c714:	4770      	bx	lr

0801c716 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801c716:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801c71a:	1a9b      	subs	r3, r3, r2
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	bfdc      	itt	le
 801c720:	6882      	ldrle	r2, [r0, #8]
 801c722:	189b      	addle	r3, r3, r2
 801c724:	2b01      	cmp	r3, #1
 801c726:	bfcc      	ite	gt
 801c728:	2000      	movgt	r0, #0
 801c72a:	2001      	movle	r0, #1
 801c72c:	4770      	bx	lr

0801c72e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801c72e:	6902      	ldr	r2, [r0, #16]
 801c730:	6840      	ldr	r0, [r0, #4]
 801c732:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801c736:	4770      	bx	lr

0801c738 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801c738:	6803      	ldr	r3, [r0, #0]
 801c73a:	691b      	ldr	r3, [r3, #16]
 801c73c:	4718      	bx	r3

0801c73e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801c73e:	4770      	bx	lr

0801c740 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801c740:	4770      	bx	lr
	...

0801c744 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801c744:	2301      	movs	r3, #1
 801c746:	b570      	push	{r4, r5, r6, lr}
 801c748:	7203      	strb	r3, [r0, #8]
 801c74a:	4604      	mov	r4, r0
 801c74c:	6840      	ldr	r0, [r0, #4]
 801c74e:	6803      	ldr	r3, [r0, #0]
 801c750:	699b      	ldr	r3, [r3, #24]
 801c752:	4798      	blx	r3
 801c754:	6803      	ldr	r3, [r0, #0]
 801c756:	4605      	mov	r5, r0
 801c758:	2b08      	cmp	r3, #8
 801c75a:	d01e      	beq.n	801c79a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801c75c:	d80b      	bhi.n	801c776 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801c75e:	2b02      	cmp	r3, #2
 801c760:	d027      	beq.n	801c7b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801c762:	2b04      	cmp	r3, #4
 801c764:	d011      	beq.n	801c78a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801c766:	2b01      	cmp	r3, #1
 801c768:	d028      	beq.n	801c7bc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c76a:	4b17      	ldr	r3, [pc, #92]	; (801c7c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801c76c:	218b      	movs	r1, #139	; 0x8b
 801c76e:	4a17      	ldr	r2, [pc, #92]	; (801c7cc <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801c770:	4817      	ldr	r0, [pc, #92]	; (801c7d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801c772:	f00e fda7 	bl	802b2c4 <__assert_func>
 801c776:	2b40      	cmp	r3, #64	; 0x40
 801c778:	d020      	beq.n	801c7bc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c77a:	d801      	bhi.n	801c780 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801c77c:	2b20      	cmp	r3, #32
 801c77e:	e7f3      	b.n	801c768 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c780:	2b80      	cmp	r3, #128	; 0x80
 801c782:	d01b      	beq.n	801c7bc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c788:	e7ee      	b.n	801c768 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c78a:	6823      	ldr	r3, [r4, #0]
 801c78c:	7f01      	ldrb	r1, [r0, #28]
 801c78e:	4620      	mov	r0, r4
 801c790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c792:	4798      	blx	r3
 801c794:	6823      	ldr	r3, [r4, #0]
 801c796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c798:	e006      	b.n	801c7a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801c79a:	6823      	ldr	r3, [r4, #0]
 801c79c:	7f01      	ldrb	r1, [r0, #28]
 801c79e:	4620      	mov	r0, r4
 801c7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7a2:	4798      	blx	r3
 801c7a4:	6823      	ldr	r3, [r4, #0]
 801c7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c7a8:	4629      	mov	r1, r5
 801c7aa:	4620      	mov	r0, r4
 801c7ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7b0:	4718      	bx	r3
 801c7b2:	6823      	ldr	r3, [r4, #0]
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7b8:	4798      	blx	r3
 801c7ba:	e7f3      	b.n	801c7a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801c7bc:	6823      	ldr	r3, [r4, #0]
 801c7be:	4620      	mov	r0, r4
 801c7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7c2:	4798      	blx	r3
 801c7c4:	e7e6      	b.n	801c794 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801c7c6:	bf00      	nop
 801c7c8:	0802f1c9 	.word	0x0802f1c9
 801c7cc:	0802f2d8 	.word	0x0802f2d8
 801c7d0:	0802f1ee 	.word	0x0802f1ee

0801c7d4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801c7d4:	b570      	push	{r4, r5, r6, lr}
 801c7d6:	4604      	mov	r4, r0
 801c7d8:	460e      	mov	r6, r1
 801c7da:	6860      	ldr	r0, [r4, #4]
 801c7dc:	6803      	ldr	r3, [r0, #0]
 801c7de:	685b      	ldr	r3, [r3, #4]
 801c7e0:	4798      	blx	r3
 801c7e2:	2800      	cmp	r0, #0
 801c7e4:	d1f9      	bne.n	801c7da <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801c7e6:	4d0b      	ldr	r5, [pc, #44]	; (801c814 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801c7e8:	6828      	ldr	r0, [r5, #0]
 801c7ea:	6803      	ldr	r3, [r0, #0]
 801c7ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c7ee:	4798      	blx	r3
 801c7f0:	f7fc fb40 	bl	8018e74 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801c7f4:	6860      	ldr	r0, [r4, #4]
 801c7f6:	4631      	mov	r1, r6
 801c7f8:	6803      	ldr	r3, [r0, #0]
 801c7fa:	689b      	ldr	r3, [r3, #8]
 801c7fc:	4798      	blx	r3
 801c7fe:	6823      	ldr	r3, [r4, #0]
 801c800:	4620      	mov	r0, r4
 801c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c804:	4798      	blx	r3
 801c806:	6828      	ldr	r0, [r5, #0]
 801c808:	6803      	ldr	r3, [r0, #0]
 801c80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c80e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c810:	4718      	bx	r3
 801c812:	bf00      	nop
 801c814:	2000bfd0 	.word	0x2000bfd0

0801c818 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801c818:	b508      	push	{r3, lr}
 801c81a:	f7fc fb0f 	bl	8018e3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c81e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c822:	f7fc bb19 	b.w	8018e58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801c826 <_ZN8touchgfx13DMA_Interface5startEv>:
 801c826:	b510      	push	{r4, lr}
 801c828:	4604      	mov	r4, r0
 801c82a:	6840      	ldr	r0, [r0, #4]
 801c82c:	6803      	ldr	r3, [r0, #0]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	4798      	blx	r3
 801c832:	b948      	cbnz	r0, 801c848 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c834:	7a63      	ldrb	r3, [r4, #9]
 801c836:	b13b      	cbz	r3, 801c848 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c838:	7a23      	ldrb	r3, [r4, #8]
 801c83a:	b92b      	cbnz	r3, 801c848 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c83c:	6823      	ldr	r3, [r4, #0]
 801c83e:	4620      	mov	r0, r4
 801c840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c846:	4718      	bx	r3
 801c848:	bd10      	pop	{r4, pc}
	...

0801c84c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801c84c:	b510      	push	{r4, lr}
 801c84e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801c852:	1b12      	subs	r2, r2, r4
 801c854:	2a00      	cmp	r2, #0
 801c856:	bfdc      	itt	le
 801c858:	6883      	ldrle	r3, [r0, #8]
 801c85a:	18d2      	addle	r2, r2, r3
 801c85c:	2a01      	cmp	r2, #1
 801c85e:	dd18      	ble.n	801c892 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801c860:	6843      	ldr	r3, [r0, #4]
 801c862:	f101 021c 	add.w	r2, r1, #28
 801c866:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801c86a:	f851 4b04 	ldr.w	r4, [r1], #4
 801c86e:	4291      	cmp	r1, r2
 801c870:	f843 4b04 	str.w	r4, [r3], #4
 801c874:	d1f9      	bne.n	801c86a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801c876:	880a      	ldrh	r2, [r1, #0]
 801c878:	801a      	strh	r2, [r3, #0]
 801c87a:	788a      	ldrb	r2, [r1, #2]
 801c87c:	709a      	strb	r2, [r3, #2]
 801c87e:	68c3      	ldr	r3, [r0, #12]
 801c880:	6882      	ldr	r2, [r0, #8]
 801c882:	f3bf 8f5b 	dmb	ish
 801c886:	3301      	adds	r3, #1
 801c888:	429a      	cmp	r2, r3
 801c88a:	bfd8      	it	le
 801c88c:	1a9b      	suble	r3, r3, r2
 801c88e:	60c3      	str	r3, [r0, #12]
 801c890:	bd10      	pop	{r4, pc}
 801c892:	4b03      	ldr	r3, [pc, #12]	; (801c8a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801c894:	2139      	movs	r1, #57	; 0x39
 801c896:	4a03      	ldr	r2, [pc, #12]	; (801c8a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801c898:	4803      	ldr	r0, [pc, #12]	; (801c8a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801c89a:	f00e fd13 	bl	802b2c4 <__assert_func>
 801c89e:	bf00      	nop
 801c8a0:	0802f214 	.word	0x0802f214
 801c8a4:	0802f308 	.word	0x0802f308
 801c8a8:	0802f1ee 	.word	0x0802f1ee

0801c8ac <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801c8ac:	b510      	push	{r4, lr}
 801c8ae:	6803      	ldr	r3, [r0, #0]
 801c8b0:	4604      	mov	r4, r0
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	4798      	blx	r3
 801c8b6:	b128      	cbz	r0, 801c8c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801c8b8:	4b07      	ldr	r3, [pc, #28]	; (801c8d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801c8ba:	213f      	movs	r1, #63	; 0x3f
 801c8bc:	4a07      	ldr	r2, [pc, #28]	; (801c8dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801c8be:	4808      	ldr	r0, [pc, #32]	; (801c8e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801c8c0:	f00e fd00 	bl	802b2c4 <__assert_func>
 801c8c4:	6923      	ldr	r3, [r4, #16]
 801c8c6:	68a2      	ldr	r2, [r4, #8]
 801c8c8:	f3bf 8f5b 	dmb	ish
 801c8cc:	3301      	adds	r3, #1
 801c8ce:	429a      	cmp	r2, r3
 801c8d0:	bfd8      	it	le
 801c8d2:	1a9b      	suble	r3, r3, r2
 801c8d4:	6123      	str	r3, [r4, #16]
 801c8d6:	bd10      	pop	{r4, pc}
 801c8d8:	0802f237 	.word	0x0802f237
 801c8dc:	0802f356 	.word	0x0802f356
 801c8e0:	0802f1ee 	.word	0x0802f1ee

0801c8e4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801c8e4:	b570      	push	{r4, r5, r6, lr}
 801c8e6:	4604      	mov	r4, r0
 801c8e8:	6840      	ldr	r0, [r0, #4]
 801c8ea:	6803      	ldr	r3, [r0, #0]
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	4798      	blx	r3
 801c8f0:	4605      	mov	r5, r0
 801c8f2:	b930      	cbnz	r0, 801c902 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801c8f4:	7a23      	ldrb	r3, [r4, #8]
 801c8f6:	b123      	cbz	r3, 801c902 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801c8f8:	6860      	ldr	r0, [r4, #4]
 801c8fa:	6803      	ldr	r3, [r0, #0]
 801c8fc:	695b      	ldr	r3, [r3, #20]
 801c8fe:	4798      	blx	r3
 801c900:	7225      	strb	r5, [r4, #8]
 801c902:	6860      	ldr	r0, [r4, #4]
 801c904:	6803      	ldr	r3, [r0, #0]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4798      	blx	r3
 801c90a:	b928      	cbnz	r0, 801c918 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801c90c:	6823      	ldr	r3, [r4, #0]
 801c90e:	4620      	mov	r0, r4
 801c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c916:	4718      	bx	r3
 801c918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c91c:	f7fc bab6 	b.w	8018e8c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801c920 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801c920:	b510      	push	{r4, lr}
 801c922:	6082      	str	r2, [r0, #8]
 801c924:	2200      	movs	r2, #0
 801c926:	4c03      	ldr	r4, [pc, #12]	; (801c934 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801c928:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c92c:	e9c0 4100 	strd	r4, r1, [r0]
 801c930:	bd10      	pop	{r4, pc}
 801c932:	bf00      	nop
 801c934:	0802f2bc 	.word	0x0802f2bc

0801c938 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801c938:	6840      	ldr	r0, [r0, #4]
 801c93a:	6803      	ldr	r3, [r0, #0]
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	4718      	bx	r3

0801c940 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801c940:	2001      	movs	r0, #1
 801c942:	4770      	bx	lr

0801c944 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801c944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c948:	460d      	mov	r5, r1
 801c94a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c94e:	b085      	sub	sp, #20
 801c950:	4690      	mov	r8, r2
 801c952:	4411      	add	r1, r2
 801c954:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801c958:	4699      	mov	r9, r3
 801c95a:	6803      	ldr	r3, [r0, #0]
 801c95c:	60c1      	str	r1, [r0, #12]
 801c95e:	4604      	mov	r4, r0
 801c960:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c962:	440a      	add	r2, r1
 801c964:	6102      	str	r2, [r0, #16]
 801c966:	68db      	ldr	r3, [r3, #12]
 801c968:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801c96c:	4798      	blx	r3
 801c96e:	2800      	cmp	r0, #0
 801c970:	d039      	beq.n	801c9e6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801c972:	44c8      	add	r8, r9
 801c974:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c978:	4445      	add	r5, r8
 801c97a:	6823      	ldr	r3, [r4, #0]
 801c97c:	f10d 020f 	add.w	r2, sp, #15
 801c980:	a903      	add	r1, sp, #12
 801c982:	4620      	mov	r0, r4
 801c984:	9200      	str	r2, [sp, #0]
 801c986:	f10d 020d 	add.w	r2, sp, #13
 801c98a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801c98e:	f10d 030e 	add.w	r3, sp, #14
 801c992:	47c0      	blx	r8
 801c994:	b1f8      	cbz	r0, 801c9d6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801c996:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801c99a:	7a20      	ldrb	r0, [r4, #8]
 801c99c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801c9a0:	4358      	muls	r0, r3
 801c9a2:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801c9a6:	1c43      	adds	r3, r0, #1
 801c9a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c9ac:	f817 0b01 	ldrb.w	r0, [r7], #1
 801c9b0:	121b      	asrs	r3, r3, #8
 801c9b2:	fb10 f003 	smulbb	r0, r0, r3
 801c9b6:	b283      	uxth	r3, r0
 801c9b8:	1c58      	adds	r0, r3, #1
 801c9ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c9be:	6823      	ldr	r3, [r4, #0]
 801c9c0:	1200      	asrs	r0, r0, #8
 801c9c2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801c9c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801c9ca:	28ff      	cmp	r0, #255	; 0xff
 801c9cc:	d10e      	bne.n	801c9ec <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801c9ce:	9100      	str	r1, [sp, #0]
 801c9d0:	4629      	mov	r1, r5
 801c9d2:	4620      	mov	r0, r4
 801c9d4:	47c0      	blx	r8
 801c9d6:	68e3      	ldr	r3, [r4, #12]
 801c9d8:	3e01      	subs	r6, #1
 801c9da:	f105 0503 	add.w	r5, r5, #3
 801c9de:	f103 0301 	add.w	r3, r3, #1
 801c9e2:	60e3      	str	r3, [r4, #12]
 801c9e4:	d1c9      	bne.n	801c97a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801c9e6:	b005      	add	sp, #20
 801c9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9ec:	fa1f fc80 	uxth.w	ip, r0
 801c9f0:	43c0      	mvns	r0, r0
 801c9f2:	f895 e002 	ldrb.w	lr, [r5, #2]
 801c9f6:	fb12 f20c 	smulbb	r2, r2, ip
 801c9fa:	b2c0      	uxtb	r0, r0
 801c9fc:	fb13 f30c 	smulbb	r3, r3, ip
 801ca00:	fb0e 2200 	mla	r2, lr, r0, r2
 801ca04:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ca08:	fb11 f10c 	smulbb	r1, r1, ip
 801ca0c:	fb0e 3300 	mla	r3, lr, r0, r3
 801ca10:	f895 e000 	ldrb.w	lr, [r5]
 801ca14:	b292      	uxth	r2, r2
 801ca16:	b29b      	uxth	r3, r3
 801ca18:	fb0e 1000 	mla	r0, lr, r0, r1
 801ca1c:	1c59      	adds	r1, r3, #1
 801ca1e:	b280      	uxth	r0, r0
 801ca20:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ca24:	1c51      	adds	r1, r2, #1
 801ca26:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ca2a:	1c41      	adds	r1, r0, #1
 801ca2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ca30:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801ca34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ca38:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ca3c:	9000      	str	r0, [sp, #0]
 801ca3e:	e7c7      	b.n	801c9d0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801ca40 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801ca40:	f89d 0000 	ldrb.w	r0, [sp]
 801ca44:	704b      	strb	r3, [r1, #1]
 801ca46:	7008      	strb	r0, [r1, #0]
 801ca48:	708a      	strb	r2, [r1, #2]
 801ca4a:	4770      	bx	lr

0801ca4c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801ca4c:	4413      	add	r3, r2
 801ca4e:	7dc2      	ldrb	r2, [r0, #23]
 801ca50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca54:	4419      	add	r1, r3
 801ca56:	7a03      	ldrb	r3, [r0, #8]
 801ca58:	435a      	muls	r2, r3
 801ca5a:	1c53      	adds	r3, r2, #1
 801ca5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ca60:	121b      	asrs	r3, r3, #8
 801ca62:	2bff      	cmp	r3, #255	; 0xff
 801ca64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca66:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801ca6a:	d13e      	bne.n	801caea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801ca6c:	4427      	add	r7, r4
 801ca6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ca72:	3103      	adds	r1, #3
 801ca74:	7d86      	ldrb	r6, [r0, #22]
 801ca76:	2bff      	cmp	r3, #255	; 0xff
 801ca78:	d10a      	bne.n	801ca90 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801ca7a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801ca7e:	7d43      	ldrb	r3, [r0, #21]
 801ca80:	f801 3c02 	strb.w	r3, [r1, #-2]
 801ca84:	7d03      	ldrb	r3, [r0, #20]
 801ca86:	f801 3c01 	strb.w	r3, [r1, #-1]
 801ca8a:	42a7      	cmp	r7, r4
 801ca8c:	d1ef      	bne.n	801ca6e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca90:	b29a      	uxth	r2, r3
 801ca92:	43db      	mvns	r3, r3
 801ca94:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801ca98:	fb16 f602 	smulbb	r6, r6, r2
 801ca9c:	b2db      	uxtb	r3, r3
 801ca9e:	fb05 6503 	mla	r5, r5, r3, r6
 801caa2:	b2ad      	uxth	r5, r5
 801caa4:	1c6e      	adds	r6, r5, #1
 801caa6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801caaa:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801caae:	fb16 f603 	smulbb	r6, r6, r3
 801cab2:	122d      	asrs	r5, r5, #8
 801cab4:	f801 5c03 	strb.w	r5, [r1, #-3]
 801cab8:	7d45      	ldrb	r5, [r0, #21]
 801caba:	fb05 6502 	mla	r5, r5, r2, r6
 801cabe:	b2ad      	uxth	r5, r5
 801cac0:	1c6e      	adds	r6, r5, #1
 801cac2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801cac6:	122d      	asrs	r5, r5, #8
 801cac8:	f801 5c02 	strb.w	r5, [r1, #-2]
 801cacc:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801cad0:	7d06      	ldrb	r6, [r0, #20]
 801cad2:	fb15 f303 	smulbb	r3, r5, r3
 801cad6:	fb06 3202 	mla	r2, r6, r2, r3
 801cada:	b292      	uxth	r2, r2
 801cadc:	1c53      	adds	r3, r2, #1
 801cade:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cae2:	1212      	asrs	r2, r2, #8
 801cae4:	f801 2c01 	strb.w	r2, [r1, #-1]
 801cae8:	e7cf      	b.n	801ca8a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801caea:	b2de      	uxtb	r6, r3
 801caec:	2b00      	cmp	r3, #0
 801caee:	d0ce      	beq.n	801ca8e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801caf0:	3103      	adds	r1, #3
 801caf2:	4427      	add	r7, r4
 801caf4:	f814 2b01 	ldrb.w	r2, [r4], #1
 801caf8:	3103      	adds	r1, #3
 801cafa:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801cafe:	fb02 f306 	mul.w	r3, r2, r6
 801cb02:	42bc      	cmp	r4, r7
 801cb04:	f103 0201 	add.w	r2, r3, #1
 801cb08:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cb0c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801cb10:	b295      	uxth	r5, r2
 801cb12:	ea6f 0202 	mvn.w	r2, r2
 801cb16:	b2d3      	uxtb	r3, r2
 801cb18:	7d82      	ldrb	r2, [r0, #22]
 801cb1a:	fb1c fc03 	smulbb	ip, ip, r3
 801cb1e:	fb02 c205 	mla	r2, r2, r5, ip
 801cb22:	b292      	uxth	r2, r2
 801cb24:	f102 0c01 	add.w	ip, r2, #1
 801cb28:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cb2c:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801cb30:	fb1c fc03 	smulbb	ip, ip, r3
 801cb34:	ea4f 2222 	mov.w	r2, r2, asr #8
 801cb38:	f801 2c06 	strb.w	r2, [r1, #-6]
 801cb3c:	7d42      	ldrb	r2, [r0, #21]
 801cb3e:	fb02 c205 	mla	r2, r2, r5, ip
 801cb42:	b292      	uxth	r2, r2
 801cb44:	f102 0c01 	add.w	ip, r2, #1
 801cb48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cb4c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801cb50:	f801 2c05 	strb.w	r2, [r1, #-5]
 801cb54:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801cb58:	f890 c014 	ldrb.w	ip, [r0, #20]
 801cb5c:	fb12 f303 	smulbb	r3, r2, r3
 801cb60:	fb0c 3305 	mla	r3, ip, r5, r3
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	f103 0201 	add.w	r2, r3, #1
 801cb6a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cb6e:	ea4f 2323 	mov.w	r3, r3, asr #8
 801cb72:	f801 3c04 	strb.w	r3, [r1, #-4]
 801cb76:	d1bd      	bne.n	801caf4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801cb78:	e789      	b.n	801ca8e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801cb7a <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801cb7a:	b510      	push	{r4, lr}
 801cb7c:	7d04      	ldrb	r4, [r0, #20]
 801cb7e:	700c      	strb	r4, [r1, #0]
 801cb80:	7d41      	ldrb	r1, [r0, #21]
 801cb82:	7011      	strb	r1, [r2, #0]
 801cb84:	7d82      	ldrb	r2, [r0, #22]
 801cb86:	701a      	strb	r2, [r3, #0]
 801cb88:	9b02      	ldr	r3, [sp, #8]
 801cb8a:	7dc2      	ldrb	r2, [r0, #23]
 801cb8c:	2001      	movs	r0, #1
 801cb8e:	701a      	strb	r2, [r3, #0]
 801cb90:	bd10      	pop	{r4, pc}

0801cb92 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801cb92:	b570      	push	{r4, r5, r6, lr}
 801cb94:	4616      	mov	r6, r2
 801cb96:	4604      	mov	r4, r0
 801cb98:	460d      	mov	r5, r1
 801cb9a:	f7f3 ff41 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801cb9e:	6803      	ldr	r3, [r0, #0]
 801cba0:	4629      	mov	r1, r5
 801cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cba4:	4798      	blx	r3
 801cba6:	7520      	strb	r0, [r4, #20]
 801cba8:	f7f3 ff3a 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801cbac:	6803      	ldr	r3, [r0, #0]
 801cbae:	4629      	mov	r1, r5
 801cbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cbb2:	4798      	blx	r3
 801cbb4:	7560      	strb	r0, [r4, #21]
 801cbb6:	f7f3 ff33 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801cbba:	6803      	ldr	r3, [r0, #0]
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbc0:	4798      	blx	r3
 801cbc2:	75e6      	strb	r6, [r4, #23]
 801cbc4:	75a0      	strb	r0, [r4, #22]
 801cbc6:	bd70      	pop	{r4, r5, r6, pc}

0801cbc8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbca:	460e      	mov	r6, r1
 801cbcc:	4617      	mov	r7, r2
 801cbce:	4604      	mov	r4, r0
 801cbd0:	f000 f832 	bl	801cc38 <_ZN8touchgfx15AbstractPainterC1Ev>
 801cbd4:	4b12      	ldr	r3, [pc, #72]	; (801cc20 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801cbd6:	6023      	str	r3, [r4, #0]
 801cbd8:	f7f3 ff22 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801cbdc:	6803      	ldr	r3, [r0, #0]
 801cbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbe0:	4798      	blx	r3
 801cbe2:	1e43      	subs	r3, r0, #1
 801cbe4:	425d      	negs	r5, r3
 801cbe6:	415d      	adcs	r5, r3
 801cbe8:	4b0e      	ldr	r3, [pc, #56]	; (801cc24 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cbee:	b130      	cbz	r0, 801cbfe <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801cbf0:	6803      	ldr	r3, [r0, #0]
 801cbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbf4:	4798      	blx	r3
 801cbf6:	2801      	cmp	r0, #1
 801cbf8:	bf08      	it	eq
 801cbfa:	f045 0501 	orreq.w	r5, r5, #1
 801cbfe:	b92d      	cbnz	r5, 801cc0c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801cc00:	4b09      	ldr	r3, [pc, #36]	; (801cc28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801cc02:	2129      	movs	r1, #41	; 0x29
 801cc04:	4a09      	ldr	r2, [pc, #36]	; (801cc2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801cc06:	480a      	ldr	r0, [pc, #40]	; (801cc30 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801cc08:	f00e fb5c 	bl	802b2c4 <__assert_func>
 801cc0c:	4b09      	ldr	r3, [pc, #36]	; (801cc34 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801cc0e:	4620      	mov	r0, r4
 801cc10:	463a      	mov	r2, r7
 801cc12:	4631      	mov	r1, r6
 801cc14:	6023      	str	r3, [r4, #0]
 801cc16:	f7ff ffbc 	bl	801cb92 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc1e:	bf00      	nop
 801cc20:	0802f390 	.word	0x0802f390
 801cc24:	2000bfd0 	.word	0x2000bfd0
 801cc28:	0802f3a8 	.word	0x0802f3a8
 801cc2c:	0802f46c 	.word	0x0802f46c
 801cc30:	0802f406 	.word	0x0802f406
 801cc34:	0802f454 	.word	0x0802f454

0801cc38 <_ZN8touchgfx15AbstractPainterC1Ev>:
 801cc38:	4a03      	ldr	r2, [pc, #12]	; (801cc48 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801cc3a:	6002      	str	r2, [r0, #0]
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	6042      	str	r2, [r0, #4]
 801cc40:	22ff      	movs	r2, #255	; 0xff
 801cc42:	7202      	strb	r2, [r0, #8]
 801cc44:	4770      	bx	lr
 801cc46:	bf00      	nop
 801cc48:	0802f4b0 	.word	0x0802f4b0

0801cc4c <_ZN8touchgfx15AbstractPainterD1Ev>:
 801cc4c:	4770      	bx	lr

0801cc4e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801cc4e:	8081      	strh	r1, [r0, #4]
 801cc50:	80c2      	strh	r2, [r0, #6]
 801cc52:	4770      	bx	lr

0801cc54 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801cc54:	7201      	strb	r1, [r0, #8]
 801cc56:	4770      	bx	lr

0801cc58 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801cc58:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801cc5c:	4770      	bx	lr

0801cc5e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801cc5e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801cc62:	4770      	bx	lr

0801cc64 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801cc64:	6281      	str	r1, [r0, #40]	; 0x28
 801cc66:	4770      	bx	lr

0801cc68 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801cc68:	b513      	push	{r0, r1, r4, lr}
 801cc6a:	6803      	ldr	r3, [r0, #0]
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	4601      	mov	r1, r0
 801cc70:	4668      	mov	r0, sp
 801cc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc74:	4798      	blx	r3
 801cc76:	6823      	ldr	r3, [r4, #0]
 801cc78:	4669      	mov	r1, sp
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	691b      	ldr	r3, [r3, #16]
 801cc7e:	4798      	blx	r3
 801cc80:	b002      	add	sp, #8
 801cc82:	bd10      	pop	{r4, pc}

0801cc84 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801cc84:	b510      	push	{r4, lr}
 801cc86:	2200      	movs	r2, #0
 801cc88:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801cc8c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801cc90:	8002      	strh	r2, [r0, #0]
 801cc92:	8042      	strh	r2, [r0, #2]
 801cc94:	8084      	strh	r4, [r0, #4]
 801cc96:	80c1      	strh	r1, [r0, #6]
 801cc98:	bd10      	pop	{r4, pc}

0801cc9a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	8002      	strh	r2, [r0, #0]
 801cc9e:	8042      	strh	r2, [r0, #2]
 801cca0:	8082      	strh	r2, [r0, #4]
 801cca2:	80c2      	strh	r2, [r0, #6]
 801cca4:	4770      	bx	lr
	...

0801cca8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801cca8:	b508      	push	{r3, lr}
 801ccaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ccac:	b928      	cbnz	r0, 801ccba <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801ccae:	4b03      	ldr	r3, [pc, #12]	; (801ccbc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801ccb0:	2127      	movs	r1, #39	; 0x27
 801ccb2:	4a03      	ldr	r2, [pc, #12]	; (801ccc0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801ccb4:	4803      	ldr	r0, [pc, #12]	; (801ccc4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801ccb6:	f00e fb05 	bl	802b2c4 <__assert_func>
 801ccba:	bd08      	pop	{r3, pc}
 801ccbc:	0802f4bc 	.word	0x0802f4bc
 801ccc0:	0802f5a0 	.word	0x0802f5a0
 801ccc4:	0802f4e3 	.word	0x0802f4e3

0801ccc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cccc:	b089      	sub	sp, #36	; 0x24
 801ccce:	4604      	mov	r4, r0
 801ccd0:	6808      	ldr	r0, [r1, #0]
 801ccd2:	f04f 0a00 	mov.w	sl, #0
 801ccd6:	6849      	ldr	r1, [r1, #4]
 801ccd8:	ab02      	add	r3, sp, #8
 801ccda:	f04f 0b01 	mov.w	fp, #1
 801ccde:	c303      	stmia	r3!, {r0, r1}
 801cce0:	4b3f      	ldr	r3, [pc, #252]	; (801cde0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801cce2:	4621      	mov	r1, r4
 801cce4:	a804      	add	r0, sp, #16
 801cce6:	781b      	ldrb	r3, [r3, #0]
 801cce8:	2b01      	cmp	r3, #1
 801ccea:	6823      	ldr	r3, [r4, #0]
 801ccec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ccee:	bf1f      	itttt	ne
 801ccf0:	f10d 0906 	addne.w	r9, sp, #6
 801ccf4:	ae03      	addne	r6, sp, #12
 801ccf6:	f10d 050e 	addne.w	r5, sp, #14
 801ccfa:	f10d 080a 	addne.w	r8, sp, #10
 801ccfe:	bf01      	itttt	eq
 801cd00:	f10d 090e 	addeq.w	r9, sp, #14
 801cd04:	f10d 0606 	addeq.w	r6, sp, #6
 801cd08:	ad03      	addeq	r5, sp, #12
 801cd0a:	f10d 0808 	addeq.w	r8, sp, #8
 801cd0e:	4798      	blx	r3
 801cd10:	f9b5 3000 	ldrsh.w	r3, [r5]
 801cd14:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d056      	beq.n	801cdca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801cd1c:	4293      	cmp	r3, r2
 801cd1e:	bfa8      	it	ge
 801cd20:	4613      	movge	r3, r2
 801cd22:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cd26:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801cd2a:	2f00      	cmp	r7, #0
 801cd2c:	dd34      	ble.n	801cd98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801cd2e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801cd32:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801cd36:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cd3a:	4484      	add	ip, r0
 801cd3c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801cd40:	f9b6 e000 	ldrsh.w	lr, [r6]
 801cd44:	fa0f fc8c 	sxth.w	ip, ip
 801cd48:	f9b9 1000 	ldrsh.w	r1, [r9]
 801cd4c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cd50:	4562      	cmp	r2, ip
 801cd52:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cd56:	f8ad e01c 	strh.w	lr, [sp, #28]
 801cd5a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801cd5e:	da29      	bge.n	801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd60:	4472      	add	r2, lr
 801cd62:	b212      	sxth	r2, r2
 801cd64:	4290      	cmp	r0, r2
 801cd66:	da25      	bge.n	801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd68:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801cd6c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801cd70:	4402      	add	r2, r0
 801cd72:	b212      	sxth	r2, r2
 801cd74:	4293      	cmp	r3, r2
 801cd76:	da1d      	bge.n	801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd78:	440b      	add	r3, r1
 801cd7a:	b21b      	sxth	r3, r3
 801cd7c:	4298      	cmp	r0, r3
 801cd7e:	da19      	bge.n	801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd80:	6823      	ldr	r3, [r4, #0]
 801cd82:	a906      	add	r1, sp, #24
 801cd84:	4620      	mov	r0, r4
 801cd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd88:	4798      	blx	r3
 801cd8a:	b998      	cbnz	r0, 801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd8c:	107f      	asrs	r7, r7, #1
 801cd8e:	f04f 0a01 	mov.w	sl, #1
 801cd92:	f8ad 7006 	strh.w	r7, [sp, #6]
 801cd96:	e7c6      	b.n	801cd26 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801cd98:	d10c      	bne.n	801cdb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801cd9a:	f8ad b006 	strh.w	fp, [sp, #6]
 801cd9e:	f8b8 2000 	ldrh.w	r2, [r8]
 801cda2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801cda6:	440a      	add	r2, r1
 801cda8:	f8a8 2000 	strh.w	r2, [r8]
 801cdac:	882b      	ldrh	r3, [r5, #0]
 801cdae:	1a5b      	subs	r3, r3, r1
 801cdb0:	802b      	strh	r3, [r5, #0]
 801cdb2:	e7ad      	b.n	801cd10 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801cdb4:	f1ba 0f00 	cmp.w	sl, #0
 801cdb8:	d0f1      	beq.n	801cd9e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801cdba:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801cdbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cdc2:	429a      	cmp	r2, r3
 801cdc4:	bf08      	it	eq
 801cdc6:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801cdc8:	e7e9      	b.n	801cd9e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801cdca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cdce:	429a      	cmp	r2, r3
 801cdd0:	bf04      	itt	eq
 801cdd2:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801cdd6:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801cdd8:	b009      	add	sp, #36	; 0x24
 801cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdde:	bf00      	nop
 801cde0:	2000bfc6 	.word	0x2000bfc6

0801cde4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801cde4:	2200      	movs	r2, #0
 801cde6:	2101      	movs	r1, #1
 801cde8:	8082      	strh	r2, [r0, #4]
 801cdea:	80c2      	strh	r2, [r0, #6]
 801cdec:	8102      	strh	r2, [r0, #8]
 801cdee:	8142      	strh	r2, [r0, #10]
 801cdf0:	8182      	strh	r2, [r0, #12]
 801cdf2:	81c2      	strh	r2, [r0, #14]
 801cdf4:	8202      	strh	r2, [r0, #16]
 801cdf6:	8242      	strh	r2, [r0, #18]
 801cdf8:	61c2      	str	r2, [r0, #28]
 801cdfa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801cdfe:	6282      	str	r2, [r0, #40]	; 0x28
 801ce00:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801ce04:	4905      	ldr	r1, [pc, #20]	; (801ce1c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801ce06:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ce0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ce0e:	6001      	str	r1, [r0, #0]
 801ce10:	8582      	strh	r2, [r0, #44]	; 0x2c
 801ce12:	22ff      	movs	r2, #255	; 0xff
 801ce14:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801ce18:	4770      	bx	lr
 801ce1a:	bf00      	nop
 801ce1c:	0802f528 	.word	0x0802f528

0801ce20 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801ce20:	4770      	bx	lr

0801ce22 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801ce22:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801ce26:	4602      	mov	r2, r0
 801ce28:	cb03      	ldmia	r3!, {r0, r1}
 801ce2a:	6010      	str	r0, [r2, #0]
 801ce2c:	4610      	mov	r0, r2
 801ce2e:	6051      	str	r1, [r2, #4]
 801ce30:	4770      	bx	lr

0801ce32 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ce32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce36:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801ce3a:	b395      	cbz	r5, 801cea2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801ce3c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801ce40:	f1bc 0f00 	cmp.w	ip, #0
 801ce44:	d02d      	beq.n	801cea2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801ce46:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ce4a:	f9b1 e000 	ldrsh.w	lr, [r1]
 801ce4e:	b354      	cbz	r4, 801cea6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801ce50:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801ce54:	b33f      	cbz	r7, 801cea6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801ce56:	f9b0 8000 	ldrsh.w	r8, [r0]
 801ce5a:	4475      	add	r5, lr
 801ce5c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801ce60:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ce64:	45f0      	cmp	r8, lr
 801ce66:	4646      	mov	r6, r8
 801ce68:	4444      	add	r4, r8
 801ce6a:	bfa8      	it	ge
 801ce6c:	4676      	movge	r6, lr
 801ce6e:	4293      	cmp	r3, r2
 801ce70:	4619      	mov	r1, r3
 801ce72:	443b      	add	r3, r7
 801ce74:	bfa8      	it	ge
 801ce76:	4611      	movge	r1, r2
 801ce78:	4462      	add	r2, ip
 801ce7a:	b22d      	sxth	r5, r5
 801ce7c:	8006      	strh	r6, [r0, #0]
 801ce7e:	b224      	sxth	r4, r4
 801ce80:	8041      	strh	r1, [r0, #2]
 801ce82:	b212      	sxth	r2, r2
 801ce84:	b21b      	sxth	r3, r3
 801ce86:	42a5      	cmp	r5, r4
 801ce88:	bfac      	ite	ge
 801ce8a:	ebc6 0405 	rsbge	r4, r6, r5
 801ce8e:	ebc6 0404 	rsblt	r4, r6, r4
 801ce92:	429a      	cmp	r2, r3
 801ce94:	bfac      	ite	ge
 801ce96:	ebc1 0302 	rsbge	r3, r1, r2
 801ce9a:	ebc1 0303 	rsblt	r3, r1, r3
 801ce9e:	8084      	strh	r4, [r0, #4]
 801cea0:	80c3      	strh	r3, [r0, #6]
 801cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cea6:	f8a0 e000 	strh.w	lr, [r0]
 801ceaa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ceae:	8043      	strh	r3, [r0, #2]
 801ceb0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ceb4:	8083      	strh	r3, [r0, #4]
 801ceb6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ceba:	e7f1      	b.n	801cea0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801cebc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801cebc:	b507      	push	{r0, r1, r2, lr}
 801cebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801cec2:	ab01      	add	r3, sp, #4
 801cec4:	6809      	ldr	r1, [r1, #0]
 801cec6:	6800      	ldr	r0, [r0, #0]
 801cec8:	f002 ff3d 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801cecc:	b003      	add	sp, #12
 801cece:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ced4 <_ZN8touchgfx7CWRUtil4sineEi>:
 801ced4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ced8:	fb90 f3f2 	sdiv	r3, r0, r2
 801cedc:	fb03 0312 	mls	r3, r3, r2, r0
 801cee0:	4413      	add	r3, r2
 801cee2:	fb93 f0f2 	sdiv	r0, r3, r2
 801cee6:	fb02 3010 	mls	r0, r2, r0, r3
 801ceea:	4b0a      	ldr	r3, [pc, #40]	; (801cf14 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801ceec:	285a      	cmp	r0, #90	; 0x5a
 801ceee:	dc02      	bgt.n	801cef6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801cef0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801cef4:	4770      	bx	lr
 801cef6:	28b4      	cmp	r0, #180	; 0xb4
 801cef8:	dc02      	bgt.n	801cf00 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801cefa:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801cefe:	e7f7      	b.n	801cef0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801cf00:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801cf04:	bfd4      	ite	le
 801cf06:	38b4      	suble	r0, #180	; 0xb4
 801cf08:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801cf0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801cf10:	4240      	negs	r0, r0
 801cf12:	4770      	bx	lr
 801cf14:	0802f64a 	.word	0x0802f64a

0801cf18 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801cf18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801cf1c:	f04f 0300 	mov.w	r3, #0
 801cf20:	bf2c      	ite	cs
 801cf22:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801cf26:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801cf2a:	1899      	adds	r1, r3, r2
 801cf2c:	4288      	cmp	r0, r1
 801cf2e:	bf24      	itt	cs
 801cf30:	1853      	addcs	r3, r2, r1
 801cf32:	1a40      	subcs	r0, r0, r1
 801cf34:	0892      	lsrs	r2, r2, #2
 801cf36:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801cf3a:	d1f6      	bne.n	801cf2a <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	4770      	bx	lr

0801cf40 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801cf40:	2800      	cmp	r0, #0
 801cf42:	b508      	push	{r3, lr}
 801cf44:	da05      	bge.n	801cf52 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801cf46:	4240      	negs	r0, r0
 801cf48:	f7ff fffa 	bl	801cf40 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801cf4c:	4240      	negs	r0, r0
 801cf4e:	b240      	sxtb	r0, r0
 801cf50:	bd08      	pop	{r3, pc}
 801cf52:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801cf56:	dc11      	bgt.n	801cf7c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801cf58:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801cf5c:	dd09      	ble.n	801cf72 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801cf5e:	4340      	muls	r0, r0
 801cf60:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801cf64:	f7ff ffd8 	bl	801cf18 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801cf68:	f7ff ffea 	bl	801cf40 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801cf6c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801cf70:	e7ed      	b.n	801cf4e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801cf72:	3003      	adds	r0, #3
 801cf74:	4b02      	ldr	r3, [pc, #8]	; (801cf80 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801cf76:	10c0      	asrs	r0, r0, #3
 801cf78:	5618      	ldrsb	r0, [r3, r0]
 801cf7a:	e7e9      	b.n	801cf50 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801cf7c:	2000      	movs	r0, #0
 801cf7e:	e7e7      	b.n	801cf50 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801cf80:	0802f5ee 	.word	0x0802f5ee

0801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801cf84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf86:	460c      	mov	r4, r1
 801cf88:	1e01      	subs	r1, r0, #0
 801cf8a:	4615      	mov	r5, r2
 801cf8c:	db01      	blt.n	801cf92 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801cf8e:	2c00      	cmp	r4, #0
 801cf90:	da06      	bge.n	801cfa0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801cf92:	4b11      	ldr	r3, [pc, #68]	; (801cfd8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801cf94:	f240 3197 	movw	r1, #919	; 0x397
 801cf98:	4a10      	ldr	r2, [pc, #64]	; (801cfdc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801cf9a:	4811      	ldr	r0, [pc, #68]	; (801cfe0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801cf9c:	f00e f992 	bl	802b2c4 <__assert_func>
 801cfa0:	428c      	cmp	r4, r1
 801cfa2:	dd06      	ble.n	801cfb2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	f7ff ffed 	bl	801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801cfaa:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801cfae:	b003      	add	sp, #12
 801cfb0:	bd30      	pop	{r4, r5, pc}
 801cfb2:	4349      	muls	r1, r1
 801cfb4:	fb04 1004 	mla	r0, r4, r4, r1
 801cfb8:	f7ff ffae 	bl	801cf18 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801cfbc:	6028      	str	r0, [r5, #0]
 801cfbe:	2800      	cmp	r0, #0
 801cfc0:	d0f5      	beq.n	801cfae <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801cfc2:	4602      	mov	r2, r0
 801cfc4:	ab01      	add	r3, sp, #4
 801cfc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801cfca:	4620      	mov	r0, r4
 801cfcc:	f002 febb 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801cfd0:	f7ff ffb6 	bl	801cf40 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801cfd4:	e7eb      	b.n	801cfae <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801cfd6:	bf00      	nop
 801cfd8:	0802f700 	.word	0x0802f700
 801cfdc:	0802f7c8 	.word	0x0802f7c8
 801cfe0:	0802f711 	.word	0x0802f711

0801cfe4 <_ZN8touchgfx4LineC1Ev>:
 801cfe4:	b510      	push	{r4, lr}
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	f7ff fefc 	bl	801cde4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801cfec:	4b0c      	ldr	r3, [pc, #48]	; (801d020 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801cfee:	2220      	movs	r2, #32
 801cff0:	4620      	mov	r0, r4
 801cff2:	6023      	str	r3, [r4, #0]
 801cff4:	2300      	movs	r3, #0
 801cff6:	6422      	str	r2, [r4, #64]	; 0x40
 801cff8:	2212      	movs	r2, #18
 801cffa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cffe:	6722      	str	r2, [r4, #112]	; 0x70
 801d000:	60a3      	str	r3, [r4, #8]
 801d002:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801d006:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801d00a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d00e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801d012:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801d016:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801d01a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801d01e:	bd10      	pop	{r4, pc}
 801d020:	0802f750 	.word	0x0802f750

0801d024 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d028:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801d02a:	b085      	sub	sp, #20
 801d02c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d02e:	4604      	mov	r4, r0
 801d030:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d032:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801d034:	1af6      	subs	r6, r6, r3
 801d036:	eba5 0502 	sub.w	r5, r5, r2
 801d03a:	f040 809b 	bne.w	801d174 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801d03e:	b955      	cbnz	r5, 801d056 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801d040:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801d044:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801d048:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d04c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d050:	b005      	add	sp, #20
 801d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d056:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801d05a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801d05e:	f04f 0802 	mov.w	r8, #2
 801d062:	463a      	mov	r2, r7
 801d064:	4629      	mov	r1, r5
 801d066:	ab03      	add	r3, sp, #12
 801d068:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d06a:	f002 fe6c 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801d06e:	ab03      	add	r3, sp, #12
 801d070:	463a      	mov	r2, r7
 801d072:	4631      	mov	r1, r6
 801d074:	fb90 f5f8 	sdiv	r5, r0, r8
 801d078:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d07a:	f002 fe64 	bl	801fd46 <_ZN8touchgfx6muldivElllRl>
 801d07e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801d082:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801d086:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801d08a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801d08c:	fb90 f0f8 	sdiv	r0, r0, r8
 801d090:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801d094:	eba8 0305 	sub.w	r3, r8, r5
 801d098:	f1ba 0f00 	cmp.w	sl, #0
 801d09c:	f040 80c3 	bne.w	801d226 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801d0a0:	64a3      	str	r3, [r4, #72]	; 0x48
 801d0a2:	19c3      	adds	r3, r0, r7
 801d0a4:	65a3      	str	r3, [r4, #88]	; 0x58
 801d0a6:	ebae 0305 	sub.w	r3, lr, r5
 801d0aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d0ac:	eb00 030c 	add.w	r3, r0, ip
 801d0b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801d0b2:	eb05 030e 	add.w	r3, r5, lr
 801d0b6:	6523      	str	r3, [r4, #80]	; 0x50
 801d0b8:	ebac 0300 	sub.w	r3, ip, r0
 801d0bc:	6623      	str	r3, [r4, #96]	; 0x60
 801d0be:	eb05 0308 	add.w	r3, r5, r8
 801d0c2:	6563      	str	r3, [r4, #84]	; 0x54
 801d0c4:	1a3b      	subs	r3, r7, r0
 801d0c6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801d0c8:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801d0cc:	6663      	str	r3, [r4, #100]	; 0x64
 801d0ce:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801d0d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d0d4:	4632      	mov	r2, r6
 801d0d6:	9301      	str	r3, [sp, #4]
 801d0d8:	9100      	str	r1, [sp, #0]
 801d0da:	f859 bb04 	ldr.w	fp, [r9], #4
 801d0de:	9b00      	ldr	r3, [sp, #0]
 801d0e0:	455e      	cmp	r6, fp
 801d0e2:	bfa8      	it	ge
 801d0e4:	465e      	movge	r6, fp
 801d0e6:	455a      	cmp	r2, fp
 801d0e8:	bfb8      	it	lt
 801d0ea:	465a      	movlt	r2, fp
 801d0ec:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801d0f0:	4559      	cmp	r1, fp
 801d0f2:	bfa8      	it	ge
 801d0f4:	4659      	movge	r1, fp
 801d0f6:	455b      	cmp	r3, fp
 801d0f8:	bfb8      	it	lt
 801d0fa:	465b      	movlt	r3, fp
 801d0fc:	9300      	str	r3, [sp, #0]
 801d0fe:	9b01      	ldr	r3, [sp, #4]
 801d100:	454b      	cmp	r3, r9
 801d102:	d1ea      	bne.n	801d0da <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801d104:	f04f 0b20 	mov.w	fp, #32
 801d108:	b209      	sxth	r1, r1
 801d10a:	b212      	sxth	r2, r2
 801d10c:	f1ba 0f01 	cmp.w	sl, #1
 801d110:	b236      	sxth	r6, r6
 801d112:	fb91 f9fb 	sdiv	r9, r1, fp
 801d116:	f9bd 1000 	ldrsh.w	r1, [sp]
 801d11a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801d11e:	fb92 f2fb 	sdiv	r2, r2, fp
 801d122:	fb91 f1fb 	sdiv	r1, r1, fp
 801d126:	fb96 f6fb 	sdiv	r6, r6, fp
 801d12a:	f102 0201 	add.w	r2, r2, #1
 801d12e:	f101 0101 	add.w	r1, r1, #1
 801d132:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801d136:	eba1 0109 	sub.w	r1, r1, r9
 801d13a:	eba2 0606 	sub.w	r6, r2, r6
 801d13e:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801d142:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801d146:	d183      	bne.n	801d050 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801d148:	eba8 0305 	sub.w	r3, r8, r5
 801d14c:	64a3      	str	r3, [r4, #72]	; 0x48
 801d14e:	19c3      	adds	r3, r0, r7
 801d150:	65a3      	str	r3, [r4, #88]	; 0x58
 801d152:	ebae 0305 	sub.w	r3, lr, r5
 801d156:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d158:	eb00 030c 	add.w	r3, r0, ip
 801d15c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801d15e:	eb05 030e 	add.w	r3, r5, lr
 801d162:	4445      	add	r5, r8
 801d164:	6523      	str	r3, [r4, #80]	; 0x50
 801d166:	ebac 0300 	sub.w	r3, ip, r0
 801d16a:	1a38      	subs	r0, r7, r0
 801d16c:	6565      	str	r5, [r4, #84]	; 0x54
 801d16e:	6623      	str	r3, [r4, #96]	; 0x60
 801d170:	6660      	str	r0, [r4, #100]	; 0x64
 801d172:	e76d      	b.n	801d050 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801d174:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801d178:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801d17c:	2d00      	cmp	r5, #0
 801d17e:	f43f af6e 	beq.w	801d05e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801d182:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801d186:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801d18a:	fb93 f2f7 	sdiv	r2, r3, r7
 801d18e:	fb07 3312 	mls	r3, r7, r2, r3
 801d192:	b34b      	cbz	r3, 801d1e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801d194:	fb97 f2f3 	sdiv	r2, r7, r3
 801d198:	fb03 7712 	mls	r7, r3, r2, r7
 801d19c:	2f00      	cmp	r7, #0
 801d19e:	d1f4      	bne.n	801d18a <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801d1a0:	2b01      	cmp	r3, #1
 801d1a2:	f24b 5204 	movw	r2, #46340	; 0xb504
 801d1a6:	bf18      	it	ne
 801d1a8:	fb96 f6f3 	sdivne	r6, r6, r3
 801d1ac:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801d1b0:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801d1b4:	bf18      	it	ne
 801d1b6:	fb95 f5f3 	sdivne	r5, r5, r3
 801d1ba:	4291      	cmp	r1, r2
 801d1bc:	dd16      	ble.n	801d1ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801d1be:	2d00      	cmp	r5, #0
 801d1c0:	da4d      	bge.n	801d25e <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801d1c2:	4b29      	ldr	r3, [pc, #164]	; (801d268 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801d1c4:	429d      	cmp	r5, r3
 801d1c6:	da27      	bge.n	801d218 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801d1c8:	426a      	negs	r2, r5
 801d1ca:	f24b 5304 	movw	r3, #46340	; 0xb504
 801d1ce:	fb91 f1f3 	sdiv	r1, r1, r3
 801d1d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1d6:	4299      	cmp	r1, r3
 801d1d8:	bfcc      	ite	gt
 801d1da:	1c4b      	addgt	r3, r1, #1
 801d1dc:	3301      	addle	r3, #1
 801d1de:	fb96 f6f3 	sdiv	r6, r6, r3
 801d1e2:	fb95 f5f3 	sdiv	r5, r5, r3
 801d1e6:	e00f      	b.n	801d208 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801d1e8:	463b      	mov	r3, r7
 801d1ea:	e7d9      	b.n	801d1a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801d1ec:	2d00      	cmp	r5, #0
 801d1ee:	fb92 f2f1 	sdiv	r2, r2, r1
 801d1f2:	da13      	bge.n	801d21c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801d1f4:	4269      	negs	r1, r5
 801d1f6:	f24b 5304 	movw	r3, #46340	; 0xb504
 801d1fa:	fb93 f3f1 	sdiv	r3, r3, r1
 801d1fe:	429a      	cmp	r2, r3
 801d200:	bfa8      	it	ge
 801d202:	461a      	movge	r2, r3
 801d204:	4356      	muls	r6, r2
 801d206:	4355      	muls	r5, r2
 801d208:	fb05 f005 	mul.w	r0, r5, r5
 801d20c:	fb06 0006 	mla	r0, r6, r6, r0
 801d210:	f7ff fe82 	bl	801cf18 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801d214:	4607      	mov	r7, r0
 801d216:	e722      	b.n	801d05e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801d218:	2200      	movs	r2, #0
 801d21a:	e7eb      	b.n	801d1f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801d21c:	4629      	mov	r1, r5
 801d21e:	e7ea      	b.n	801d1f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801d220:	4629      	mov	r1, r5
 801d222:	2200      	movs	r2, #0
 801d224:	e7e7      	b.n	801d1f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801d226:	1a1b      	subs	r3, r3, r0
 801d228:	64a3      	str	r3, [r4, #72]	; 0x48
 801d22a:	19c3      	adds	r3, r0, r7
 801d22c:	1b5b      	subs	r3, r3, r5
 801d22e:	65a3      	str	r3, [r4, #88]	; 0x58
 801d230:	ebae 0305 	sub.w	r3, lr, r5
 801d234:	4403      	add	r3, r0
 801d236:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d238:	eb00 030c 	add.w	r3, r0, ip
 801d23c:	442b      	add	r3, r5
 801d23e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801d240:	eb05 030e 	add.w	r3, r5, lr
 801d244:	4403      	add	r3, r0
 801d246:	6523      	str	r3, [r4, #80]	; 0x50
 801d248:	ebac 0300 	sub.w	r3, ip, r0
 801d24c:	442b      	add	r3, r5
 801d24e:	6623      	str	r3, [r4, #96]	; 0x60
 801d250:	eb05 0308 	add.w	r3, r5, r8
 801d254:	1a1b      	subs	r3, r3, r0
 801d256:	6563      	str	r3, [r4, #84]	; 0x54
 801d258:	1a3b      	subs	r3, r7, r0
 801d25a:	1b5b      	subs	r3, r3, r5
 801d25c:	e733      	b.n	801d0c6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801d25e:	4295      	cmp	r5, r2
 801d260:	ddde      	ble.n	801d220 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801d262:	462a      	mov	r2, r5
 801d264:	e7b1      	b.n	801d1ca <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801d266:	bf00      	nop
 801d268:	ffff4afc 	.word	0xffff4afc

0801d26c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801d26c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d26e:	428b      	cmp	r3, r1
 801d270:	d102      	bne.n	801d278 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801d272:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801d274:	4293      	cmp	r3, r2
 801d276:	d003      	beq.n	801d280 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801d278:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801d27c:	f7ff bed2 	b.w	801d024 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801d280:	4770      	bx	lr

0801d282 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801d282:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d284:	428b      	cmp	r3, r1
 801d286:	d102      	bne.n	801d28e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801d288:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d28a:	4293      	cmp	r3, r2
 801d28c:	d003      	beq.n	801d296 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801d28e:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801d292:	f7ff bec7 	b.w	801d024 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801d296:	4770      	bx	lr

0801d298 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801d298:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801d29c:	f7ff bec2 	b.w	801d024 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801d2a0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801d2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2a4:	b0b3      	sub	sp, #204	; 0xcc
 801d2a6:	4604      	mov	r4, r0
 801d2a8:	460a      	mov	r2, r1
 801d2aa:	4601      	mov	r1, r0
 801d2ac:	a804      	add	r0, sp, #16
 801d2ae:	ad32      	add	r5, sp, #200	; 0xc8
 801d2b0:	f00c fc3c 	bl	8029b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d2b8:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801d2bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d2be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d2c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d2c2:	1ac0      	subs	r0, r0, r3
 801d2c4:	eba1 0102 	sub.w	r1, r1, r2
 801d2c8:	d43c      	bmi.n	801d344 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801d2ca:	2900      	cmp	r1, #0
 801d2cc:	462a      	mov	r2, r5
 801d2ce:	db33      	blt.n	801d338 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801d2d0:	f7ff fe58 	bl	801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801d2d4:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801d2d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801d2da:	a804      	add	r0, sp, #16
 801d2dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d2de:	f00c fdee 	bl	8029ebe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801d2e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801d2e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801d2e6:	a804      	add	r0, sp, #16
 801d2e8:	f00c fd78 	bl	8029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801d2ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801d2f0:	2b01      	cmp	r3, #1
 801d2f2:	d137      	bne.n	801d364 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801d2f4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801d2f6:	2eb3      	cmp	r6, #179	; 0xb3
 801d2f8:	dc34      	bgt.n	801d364 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801d2fa:	eba7 0906 	sub.w	r9, r7, r6
 801d2fe:	4648      	mov	r0, r9
 801d300:	f7ff fde8 	bl	801ced4 <_ZN8touchgfx7CWRUtil4sineEi>
 801d304:	a902      	add	r1, sp, #8
 801d306:	9002      	str	r0, [sp, #8]
 801d308:	4628      	mov	r0, r5
 801d30a:	f7ff fdd7 	bl	801cebc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801d30e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d310:	eb00 0801 	add.w	r8, r0, r1
 801d314:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801d318:	f7ff fddc 	bl	801ced4 <_ZN8touchgfx7CWRUtil4sineEi>
 801d31c:	a903      	add	r1, sp, #12
 801d31e:	9003      	str	r0, [sp, #12]
 801d320:	4628      	mov	r0, r5
 801d322:	f7ff fdcb 	bl	801cebc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801d326:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d328:	4641      	mov	r1, r8
 801d32a:	1a12      	subs	r2, r2, r0
 801d32c:	a804      	add	r0, sp, #16
 801d32e:	f00c fd55 	bl	8029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801d332:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d334:	441e      	add	r6, r3
 801d336:	e7de      	b.n	801d2f6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801d338:	4249      	negs	r1, r1
 801d33a:	f7ff fe23 	bl	801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801d33e:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801d342:	e7c9      	b.n	801d2d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801d344:	2900      	cmp	r1, #0
 801d346:	f1c0 0000 	rsb	r0, r0, #0
 801d34a:	462a      	mov	r2, r5
 801d34c:	db04      	blt.n	801d358 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801d34e:	f7ff fe19 	bl	801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801d352:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801d356:	e7bf      	b.n	801d2d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801d358:	4249      	negs	r1, r1
 801d35a:	f7ff fe13 	bl	801cf84 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801d35e:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801d362:	e7b9      	b.n	801d2d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801d364:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801d366:	a804      	add	r0, sp, #16
 801d368:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d36a:	f00c fd37 	bl	8029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801d36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d370:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801d372:	a804      	add	r0, sp, #16
 801d374:	f00c fd32 	bl	8029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801d378:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801d37c:	2b01      	cmp	r3, #1
 801d37e:	d123      	bne.n	801d3c8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801d380:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801d382:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801d386:	2e00      	cmp	r6, #0
 801d388:	dd1e      	ble.n	801d3c8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801d38a:	eb06 0907 	add.w	r9, r6, r7
 801d38e:	4648      	mov	r0, r9
 801d390:	f7ff fda0 	bl	801ced4 <_ZN8touchgfx7CWRUtil4sineEi>
 801d394:	a902      	add	r1, sp, #8
 801d396:	9002      	str	r0, [sp, #8]
 801d398:	4628      	mov	r0, r5
 801d39a:	f7ff fd8f 	bl	801cebc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801d39e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d3a0:	eb00 0801 	add.w	r8, r0, r1
 801d3a4:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801d3a8:	f7ff fd94 	bl	801ced4 <_ZN8touchgfx7CWRUtil4sineEi>
 801d3ac:	a903      	add	r1, sp, #12
 801d3ae:	9003      	str	r0, [sp, #12]
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	f7ff fd83 	bl	801cebc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801d3b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d3b8:	4641      	mov	r1, r8
 801d3ba:	1a12      	subs	r2, r2, r0
 801d3bc:	a804      	add	r0, sp, #16
 801d3be:	f00c fd0d 	bl	8029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801d3c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d3c4:	1af6      	subs	r6, r6, r3
 801d3c6:	e7de      	b.n	801d386 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801d3c8:	a804      	add	r0, sp, #16
 801d3ca:	f00c fe7c 	bl	802a0c6 <_ZN8touchgfx6Canvas6renderEv>
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	a804      	add	r0, sp, #16
 801d3d2:	f00c feb9 	bl	802a148 <_ZN8touchgfx6CanvasD1Ev>
 801d3d6:	4620      	mov	r0, r4
 801d3d8:	b033      	add	sp, #204	; 0xcc
 801d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d3de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801d3de:	b570      	push	{r4, r5, r6, lr}
 801d3e0:	790b      	ldrb	r3, [r1, #4]
 801d3e2:	4604      	mov	r4, r0
 801d3e4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801d3e8:	460e      	mov	r6, r1
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	bf0c      	ite	eq
 801d3ee:	2301      	moveq	r3, #1
 801d3f0:	2300      	movne	r3, #0
 801d3f2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801d3f6:	d110      	bne.n	801d41a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801d3f8:	b185      	cbz	r5, 801d41c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801d3fa:	7933      	ldrb	r3, [r6, #4]
 801d3fc:	2b01      	cmp	r3, #1
 801d3fe:	d113      	bne.n	801d428 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d400:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d402:	b188      	cbz	r0, 801d428 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d404:	6803      	ldr	r3, [r0, #0]
 801d406:	68db      	ldr	r3, [r3, #12]
 801d408:	4798      	blx	r3
 801d40a:	b168      	cbz	r0, 801d428 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d40c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d40e:	4621      	mov	r1, r4
 801d410:	6803      	ldr	r3, [r0, #0]
 801d412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d416:	689b      	ldr	r3, [r3, #8]
 801d418:	4718      	bx	r3
 801d41a:	b12d      	cbz	r5, 801d428 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801d41c:	6823      	ldr	r3, [r4, #0]
 801d41e:	4620      	mov	r0, r4
 801d420:	695b      	ldr	r3, [r3, #20]
 801d422:	4798      	blx	r3
 801d424:	2d00      	cmp	r5, #0
 801d426:	d1e8      	bne.n	801d3fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801d428:	bd70      	pop	{r4, r5, r6, pc}

0801d42a <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801d42a:	4770      	bx	lr

0801d42c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801d42c:	6803      	ldr	r3, [r0, #0]
 801d42e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801d432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d434:	4718      	bx	r3

0801d436 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801d436:	b510      	push	{r4, lr}
 801d438:	4604      	mov	r4, r0
 801d43a:	212c      	movs	r1, #44	; 0x2c
 801d43c:	f00d ff17 	bl	802b26e <_ZdlPvj>
 801d440:	4620      	mov	r0, r4
 801d442:	bd10      	pop	{r4, pc}

0801d444 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801d444:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d448:	2bff      	cmp	r3, #255	; 0xff
 801d44a:	b510      	push	{r4, lr}
 801d44c:	d104      	bne.n	801d458 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801d44e:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801d450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d454:	429a      	cmp	r2, r3
 801d456:	d105      	bne.n	801d464 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801d458:	2300      	movs	r3, #0
 801d45a:	8003      	strh	r3, [r0, #0]
 801d45c:	8043      	strh	r3, [r0, #2]
 801d45e:	8083      	strh	r3, [r0, #4]
 801d460:	80c3      	strh	r3, [r0, #6]
 801d462:	bd10      	pop	{r4, pc}
 801d464:	2300      	movs	r3, #0
 801d466:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801d46a:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801d46e:	8003      	strh	r3, [r0, #0]
 801d470:	8043      	strh	r3, [r0, #2]
 801d472:	8084      	strh	r4, [r0, #4]
 801d474:	80c2      	strh	r2, [r0, #6]
 801d476:	e7f4      	b.n	801d462 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801d478 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801d478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d47c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801d480:	b087      	sub	sp, #28
 801d482:	4604      	mov	r4, r0
 801d484:	4689      	mov	r9, r1
 801d486:	b363      	cbz	r3, 801d4e2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d488:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d48a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d48e:	429a      	cmp	r2, r3
 801d490:	d027      	beq.n	801d4e2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801d492:	ad06      	add	r5, sp, #24
 801d494:	2700      	movs	r7, #0
 801d496:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801d49a:	4628      	mov	r0, r5
 801d49c:	f004 f9c0 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d4a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801d4a4:	a904      	add	r1, sp, #16
 801d4a6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d4aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	6823      	ldr	r3, [r4, #0]
 801d4b2:	9704      	str	r7, [sp, #16]
 801d4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4b6:	4798      	blx	r3
 801d4b8:	f7f3 fab2 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801d4bc:	6803      	ldr	r3, [r0, #0]
 801d4be:	4606      	mov	r6, r0
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801d4c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d4c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d4cc:	f004 fab0 	bl	8021a30 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d4d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d4d4:	4601      	mov	r1, r0
 801d4d6:	9701      	str	r7, [sp, #4]
 801d4d8:	aa04      	add	r2, sp, #16
 801d4da:	9300      	str	r3, [sp, #0]
 801d4dc:	4630      	mov	r0, r6
 801d4de:	464b      	mov	r3, r9
 801d4e0:	47c0      	blx	r8
 801d4e2:	b007      	add	sp, #28
 801d4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d4e8 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801d4e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d4ea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d4ee:	460d      	mov	r5, r1
 801d4f0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d4f4:	2100      	movs	r1, #0
 801d4f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d4fa:	4604      	mov	r4, r0
 801d4fc:	6803      	ldr	r3, [r0, #0]
 801d4fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d502:	6a1b      	ldr	r3, [r3, #32]
 801d504:	9100      	str	r1, [sp, #0]
 801d506:	4669      	mov	r1, sp
 801d508:	4798      	blx	r3
 801d50a:	4621      	mov	r1, r4
 801d50c:	a802      	add	r0, sp, #8
 801d50e:	f002 fb80 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d512:	f7f3 fa85 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801d516:	6803      	ldr	r3, [r0, #0]
 801d518:	aa02      	add	r2, sp, #8
 801d51a:	4669      	mov	r1, sp
 801d51c:	699e      	ldr	r6, [r3, #24]
 801d51e:	462b      	mov	r3, r5
 801d520:	47b0      	blx	r6
 801d522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d526:	2800      	cmp	r0, #0
 801d528:	bf08      	it	eq
 801d52a:	461d      	moveq	r5, r3
 801d52c:	84e5      	strh	r5, [r4, #38]	; 0x26
 801d52e:	b004      	add	sp, #16
 801d530:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d534 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801d534:	2200      	movs	r2, #0
 801d536:	8082      	strh	r2, [r0, #4]
 801d538:	80c2      	strh	r2, [r0, #6]
 801d53a:	8102      	strh	r2, [r0, #8]
 801d53c:	8142      	strh	r2, [r0, #10]
 801d53e:	8182      	strh	r2, [r0, #12]
 801d540:	81c2      	strh	r2, [r0, #14]
 801d542:	8202      	strh	r2, [r0, #16]
 801d544:	8242      	strh	r2, [r0, #18]
 801d546:	61c2      	str	r2, [r0, #28]
 801d548:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801d54c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d550:	2201      	movs	r2, #1
 801d552:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801d556:	4a04      	ldr	r2, [pc, #16]	; (801d568 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801d558:	6002      	str	r2, [r0, #0]
 801d55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d55e:	84c2      	strh	r2, [r0, #38]	; 0x26
 801d560:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d564:	4770      	bx	lr
 801d566:	bf00      	nop
 801d568:	0802f8a8 	.word	0x0802f8a8

0801d56c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801d56c:	b570      	push	{r4, r5, r6, lr}
 801d56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d572:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d574:	4604      	mov	r4, r0
 801d576:	429a      	cmp	r2, r3
 801d578:	d00c      	beq.n	801d594 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801d57a:	f850 3b26 	ldr.w	r3, [r0], #38
 801d57e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801d580:	f7f5 f9f8 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801d584:	2300      	movs	r3, #0
 801d586:	4601      	mov	r1, r0
 801d588:	46ac      	mov	ip, r5
 801d58a:	4620      	mov	r0, r4
 801d58c:	461a      	mov	r2, r3
 801d58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d592:	4760      	bx	ip
 801d594:	2000      	movs	r0, #0
 801d596:	bd70      	pop	{r4, r5, r6, pc}

0801d598 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801d598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d59a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d59e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d5a0:	429a      	cmp	r2, r3
 801d5a2:	d016      	beq.n	801d5d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801d5a4:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	f7f2 fe11 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d5ae:	6803      	ldr	r3, [r0, #0]
 801d5b0:	4605      	mov	r5, r0
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	69de      	ldr	r6, [r3, #28]
 801d5b6:	f7f2 fe27 	bl	8010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d5ba:	4607      	mov	r7, r0
 801d5bc:	4620      	mov	r0, r4
 801d5be:	f7f5 f9d9 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	4602      	mov	r2, r0
 801d5c6:	4639      	mov	r1, r7
 801d5c8:	9300      	str	r3, [sp, #0]
 801d5ca:	4628      	mov	r0, r5
 801d5cc:	47b0      	blx	r6
 801d5ce:	b003      	add	sp, #12
 801d5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	e7fb      	b.n	801d5ce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801d5d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801d5d6:	b40e      	push	{r1, r2, r3}
 801d5d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5e0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d5e2:	b09b      	sub	sp, #108	; 0x6c
 801d5e4:	4604      	mov	r4, r0
 801d5e6:	429a      	cmp	r2, r3
 801d5e8:	d03f      	beq.n	801d66a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801d5ea:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801d5ee:	ab22      	add	r3, sp, #136	; 0x88
 801d5f0:	4638      	mov	r0, r7
 801d5f2:	9303      	str	r3, [sp, #12]
 801d5f4:	f7f2 fdec 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d5f8:	6803      	ldr	r3, [r0, #0]
 801d5fa:	4680      	mov	r8, r0
 801d5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5fe:	4798      	blx	r3
 801d600:	4606      	mov	r6, r0
 801d602:	b205      	sxth	r5, r0
 801d604:	a804      	add	r0, sp, #16
 801d606:	f003 f9df 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801d60a:	f8d8 3000 	ldr.w	r3, [r8]
 801d60e:	4640      	mov	r0, r8
 801d610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d612:	4798      	blx	r3
 801d614:	9a03      	ldr	r2, [sp, #12]
 801d616:	4603      	mov	r3, r0
 801d618:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d61a:	a804      	add	r0, sp, #16
 801d61c:	f003 f9f1 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d620:	4638      	mov	r0, r7
 801d622:	f7f2 fdf1 	bl	8010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d626:	4680      	mov	r8, r0
 801d628:	4638      	mov	r0, r7
 801d62a:	f7f2 fdd1 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d62e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801d632:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801d636:	4642      	mov	r2, r8
 801d638:	9300      	str	r3, [sp, #0]
 801d63a:	4603      	mov	r3, r0
 801d63c:	a804      	add	r0, sp, #16
 801d63e:	f001 fa3c 	bl	801eaba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801d642:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801d646:	b203      	sxth	r3, r0
 801d648:	18a9      	adds	r1, r5, r2
 801d64a:	2900      	cmp	r1, #0
 801d64c:	dd0b      	ble.n	801d666 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801d64e:	3b01      	subs	r3, #1
 801d650:	fb13 f302 	smulbb	r3, r3, r2
 801d654:	fb16 3300 	smlabb	r3, r6, r0, r3
 801d658:	b21d      	sxth	r5, r3
 801d65a:	4628      	mov	r0, r5
 801d65c:	b01b      	add	sp, #108	; 0x6c
 801d65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d662:	b003      	add	sp, #12
 801d664:	4770      	bx	lr
 801d666:	2b00      	cmp	r3, #0
 801d668:	dcf7      	bgt.n	801d65a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801d66a:	2500      	movs	r5, #0
 801d66c:	e7f5      	b.n	801d65a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801d670 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d678:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801d67a:	b08d      	sub	sp, #52	; 0x34
 801d67c:	4604      	mov	r4, r0
 801d67e:	429e      	cmp	r6, r3
 801d680:	4688      	mov	r8, r1
 801d682:	d04b      	beq.n	801d71c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801d684:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801d688:	4628      	mov	r0, r5
 801d68a:	f7f2 fda1 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801d68e:	4607      	mov	r7, r0
 801d690:	2800      	cmp	r0, #0
 801d692:	d043      	beq.n	801d71c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801d694:	4628      	mov	r0, r5
 801d696:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801d69a:	f7f2 fdcd 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801d69e:	4b21      	ldr	r3, [pc, #132]	; (801d724 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801d6a0:	4628      	mov	r0, r5
 801d6a2:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801d6ac:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801d6b0:	785e      	ldrb	r6, [r3, #1]
 801d6b2:	f7f2 fda9 	bl	8010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d6b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d6b8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801d6bc:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801d6c0:	9309      	str	r3, [sp, #36]	; 0x24
 801d6c2:	4b19      	ldr	r3, [pc, #100]	; (801d728 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801d6c4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801d6ce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d6d2:	9707      	str	r7, [sp, #28]
 801d6d4:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801d6d8:	f88d 6020 	strb.w	r6, [sp, #32]
 801d6dc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801d6e0:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801d6e4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d6e8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801d6ec:	b10a      	cbz	r2, 801d6f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801d6ee:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801d6f0:	b906      	cbnz	r6, 801d6f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801d6f2:	689e      	ldr	r6, [r3, #8]
 801d6f4:	af05      	add	r7, sp, #20
 801d6f6:	4621      	mov	r1, r4
 801d6f8:	4638      	mov	r0, r7
 801d6fa:	f002 fa8a 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d6fe:	4628      	mov	r0, r5
 801d700:	f7f5 f938 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801d704:	2300      	movs	r3, #0
 801d706:	9001      	str	r0, [sp, #4]
 801d708:	4630      	mov	r0, r6
 801d70a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d70e:	ab07      	add	r3, sp, #28
 801d710:	9300      	str	r3, [sp, #0]
 801d712:	4643      	mov	r3, r8
 801d714:	e897 0006 	ldmia.w	r7, {r1, r2}
 801d718:	f000 ff9c 	bl	801e654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d71c:	b00d      	add	sp, #52	; 0x34
 801d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d722:	bf00      	nop
 801d724:	2000c060 	.word	0x2000c060
 801d728:	2000bfd0 	.word	0x2000bfd0

0801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801d72c:	b570      	push	{r4, r5, r6, lr}
 801d72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d732:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d734:	4604      	mov	r4, r0
 801d736:	429a      	cmp	r2, r3
 801d738:	d021      	beq.n	801d77e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801d73a:	6803      	ldr	r3, [r0, #0]
 801d73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d73e:	4798      	blx	r3
 801d740:	6823      	ldr	r3, [r4, #0]
 801d742:	4605      	mov	r5, r0
 801d744:	4620      	mov	r0, r4
 801d746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d748:	4798      	blx	r3
 801d74a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801d74e:	4606      	mov	r6, r0
 801d750:	b22d      	sxth	r5, r5
 801d752:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801d756:	6823      	ldr	r3, [r4, #0]
 801d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d75a:	d109      	bne.n	801d770 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801d75c:	4629      	mov	r1, r5
 801d75e:	4620      	mov	r0, r4
 801d760:	4798      	blx	r3
 801d762:	6823      	ldr	r3, [r4, #0]
 801d764:	4631      	mov	r1, r6
 801d766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d768:	4620      	mov	r0, r4
 801d76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d76e:	4718      	bx	r3
 801d770:	4601      	mov	r1, r0
 801d772:	4620      	mov	r0, r4
 801d774:	4798      	blx	r3
 801d776:	6823      	ldr	r3, [r4, #0]
 801d778:	4629      	mov	r1, r5
 801d77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d77c:	e7f4      	b.n	801d768 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801d77e:	bd70      	pop	{r4, r5, r6, pc}

0801d780 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801d780:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801d784:	84c1      	strh	r1, [r0, #38]	; 0x26
 801d786:	b922      	cbnz	r2, 801d792 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801d788:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d78c:	b90b      	cbnz	r3, 801d792 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801d78e:	f7ff bfcd 	b.w	801d72c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801d792:	4770      	bx	lr

0801d794 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801d794:	2300      	movs	r3, #0
 801d796:	8003      	strh	r3, [r0, #0]
 801d798:	8043      	strh	r3, [r0, #2]
 801d79a:	8083      	strh	r3, [r0, #4]
 801d79c:	80c3      	strh	r3, [r0, #6]
 801d79e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d7a2:	b91b      	cbnz	r3, 801d7ac <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801d7a4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801d7a8:	2bff      	cmp	r3, #255	; 0xff
 801d7aa:	d103      	bne.n	801d7b4 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801d7ac:	890b      	ldrh	r3, [r1, #8]
 801d7ae:	8083      	strh	r3, [r0, #4]
 801d7b0:	894b      	ldrh	r3, [r1, #10]
 801d7b2:	80c3      	strh	r3, [r0, #6]
 801d7b4:	4770      	bx	lr
	...

0801d7b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801d7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7ba:	4604      	mov	r4, r0
 801d7bc:	466b      	mov	r3, sp
 801d7be:	6808      	ldr	r0, [r1, #0]
 801d7c0:	6849      	ldr	r1, [r1, #4]
 801d7c2:	c303      	stmia	r3!, {r0, r1}
 801d7c4:	6823      	ldr	r3, [r4, #0]
 801d7c6:	4669      	mov	r1, sp
 801d7c8:	4620      	mov	r0, r4
 801d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7cc:	4798      	blx	r3
 801d7ce:	4b08      	ldr	r3, [pc, #32]	; (801d7f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d7d6:	b10a      	cbz	r2, 801d7dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801d7d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d7da:	b900      	cbnz	r0, 801d7de <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801d7dc:	6898      	ldr	r0, [r3, #8]
 801d7de:	6803      	ldr	r3, [r0, #0]
 801d7e0:	4669      	mov	r1, sp
 801d7e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d7e4:	69dd      	ldr	r5, [r3, #28]
 801d7e6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801d7ea:	47a8      	blx	r5
 801d7ec:	b003      	add	sp, #12
 801d7ee:	bd30      	pop	{r4, r5, pc}
 801d7f0:	2000bfd0 	.word	0x2000bfd0

0801d7f4 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801d7f4:	b570      	push	{r4, r5, r6, lr}
 801d7f6:	6803      	ldr	r3, [r0, #0]
 801d7f8:	4604      	mov	r4, r0
 801d7fa:	4615      	mov	r5, r2
 801d7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d7fe:	4798      	blx	r3
 801d800:	6823      	ldr	r3, [r4, #0]
 801d802:	4629      	mov	r1, r5
 801d804:	4620      	mov	r0, r4
 801d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d80c:	4718      	bx	r3

0801d80e <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801d80e:	b570      	push	{r4, r5, r6, lr}
 801d810:	6803      	ldr	r3, [r0, #0]
 801d812:	4604      	mov	r4, r0
 801d814:	460e      	mov	r6, r1
 801d816:	4615      	mov	r5, r2
 801d818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d81a:	4798      	blx	r3
 801d81c:	8030      	strh	r0, [r6, #0]
 801d81e:	6823      	ldr	r3, [r4, #0]
 801d820:	4620      	mov	r0, r4
 801d822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d824:	4798      	blx	r3
 801d826:	8028      	strh	r0, [r5, #0]
 801d828:	bd70      	pop	{r4, r5, r6, pc}

0801d82a <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801d82a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801d82e:	4770      	bx	lr

0801d830 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801d830:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801d834:	4770      	bx	lr

0801d836 <_ZN8touchgfx10TiledImageD1Ev>:
 801d836:	4770      	bx	lr

0801d838 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801d838:	b510      	push	{r4, lr}
 801d83a:	4604      	mov	r4, r0
 801d83c:	f000 fb7e 	bl	801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801d840:	6823      	ldr	r3, [r4, #0]
 801d842:	4620      	mov	r0, r4
 801d844:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801d848:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801d84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d852:	4718      	bx	r3

0801d854 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d856:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801d85a:	4605      	mov	r5, r0
 801d85c:	8541      	strh	r1, [r0, #42]	; 0x2a
 801d85e:	4630      	mov	r0, r6
 801d860:	f003 ffde 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d864:	b1a0      	cbz	r0, 801d890 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801d866:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801d86a:	4630      	mov	r0, r6
 801d86c:	f003 ffd8 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d870:	fb97 f4f0 	sdiv	r4, r7, r0
 801d874:	fb04 7410 	mls	r4, r4, r0, r7
 801d878:	4630      	mov	r0, r6
 801d87a:	f003 ffd1 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d87e:	4404      	add	r4, r0
 801d880:	4630      	mov	r0, r6
 801d882:	f003 ffcd 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d886:	fb94 f3f0 	sdiv	r3, r4, r0
 801d88a:	fb03 4010 	mls	r0, r3, r0, r4
 801d88e:	8568      	strh	r0, [r5, #42]	; 0x2a
 801d890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d892 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801d892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d894:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801d898:	4605      	mov	r5, r0
 801d89a:	8581      	strh	r1, [r0, #44]	; 0x2c
 801d89c:	4630      	mov	r0, r6
 801d89e:	f003 fff9 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d8a2:	b1a0      	cbz	r0, 801d8ce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801d8a4:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801d8a8:	4630      	mov	r0, r6
 801d8aa:	f003 fff3 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d8ae:	fb97 f4f0 	sdiv	r4, r7, r0
 801d8b2:	fb04 7410 	mls	r4, r4, r0, r7
 801d8b6:	4630      	mov	r0, r6
 801d8b8:	f003 ffec 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d8bc:	4404      	add	r4, r0
 801d8be:	4630      	mov	r0, r6
 801d8c0:	f003 ffe8 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d8c4:	fb94 f3f0 	sdiv	r3, r4, r0
 801d8c8:	fb03 4010 	mls	r0, r3, r0, r4
 801d8cc:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801d8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d8d0 <_ZN8touchgfx10TiledImageD0Ev>:
 801d8d0:	b510      	push	{r4, lr}
 801d8d2:	4604      	mov	r4, r0
 801d8d4:	2130      	movs	r1, #48	; 0x30
 801d8d6:	f00d fcca 	bl	802b26e <_ZdlPvj>
 801d8da:	4620      	mov	r0, r4
 801d8dc:	bd10      	pop	{r4, pc}
	...

0801d8e0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e4:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801d8e8:	b093      	sub	sp, #76	; 0x4c
 801d8ea:	4607      	mov	r7, r0
 801d8ec:	460e      	mov	r6, r1
 801d8ee:	4658      	mov	r0, fp
 801d8f0:	f003 ff96 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d8f4:	4605      	mov	r5, r0
 801d8f6:	4658      	mov	r0, fp
 801d8f8:	f003 ffcc 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d8fc:	4680      	mov	r8, r0
 801d8fe:	2d00      	cmp	r5, #0
 801d900:	f000 80c5 	beq.w	801da8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d904:	2800      	cmp	r0, #0
 801d906:	f000 80c2 	beq.w	801da8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d90a:	2300      	movs	r3, #0
 801d90c:	a90e      	add	r1, sp, #56	; 0x38
 801d90e:	4638      	mov	r0, r7
 801d910:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d918:	4798      	blx	r3
 801d91a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801d91e:	f9b6 3000 	ldrsh.w	r3, [r6]
 801d922:	88b1      	ldrh	r1, [r6, #4]
 801d924:	189c      	adds	r4, r3, r2
 801d926:	440b      	add	r3, r1
 801d928:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801d92c:	fa02 f383 	sxtah	r3, r2, r3
 801d930:	3b01      	subs	r3, #1
 801d932:	fb93 f3f5 	sdiv	r3, r3, r5
 801d936:	fb94 f4f5 	sdiv	r4, r4, r5
 801d93a:	fb13 f305 	smulbb	r3, r3, r5
 801d93e:	fb14 f405 	smulbb	r4, r4, r5
 801d942:	b21b      	sxth	r3, r3
 801d944:	1aa4      	subs	r4, r4, r2
 801d946:	930b      	str	r3, [sp, #44]	; 0x2c
 801d948:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801d94c:	b2a4      	uxth	r4, r4
 801d94e:	185a      	adds	r2, r3, r1
 801d950:	fb92 f2f8 	sdiv	r2, r2, r8
 801d954:	fb12 f208 	smulbb	r2, r2, r8
 801d958:	1a52      	subs	r2, r2, r1
 801d95a:	b212      	sxth	r2, r2
 801d95c:	920c      	str	r2, [sp, #48]	; 0x30
 801d95e:	88f2      	ldrh	r2, [r6, #6]
 801d960:	4413      	add	r3, r2
 801d962:	fa01 f383 	sxtah	r3, r1, r3
 801d966:	3b01      	subs	r3, #1
 801d968:	fb93 f3f8 	sdiv	r3, r3, r8
 801d96c:	fb13 f308 	smulbb	r3, r3, r8
 801d970:	b21b      	sxth	r3, r3
 801d972:	930d      	str	r3, [sp, #52]	; 0x34
 801d974:	1963      	adds	r3, r4, r5
 801d976:	fa1f fa83 	uxth.w	sl, r3
 801d97a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d97c:	b223      	sxth	r3, r4
 801d97e:	4293      	cmp	r3, r2
 801d980:	9305      	str	r3, [sp, #20]
 801d982:	f300 8084 	bgt.w	801da8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d986:	fa0f f38a 	sxth.w	r3, sl
 801d98a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d98e:	9309      	str	r3, [sp, #36]	; 0x24
 801d990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d992:	4599      	cmp	r9, r3
 801d994:	dd04      	ble.n	801d9a0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801d996:	442c      	add	r4, r5
 801d998:	eb05 030a 	add.w	r3, r5, sl
 801d99c:	b2a4      	uxth	r4, r4
 801d99e:	e7ea      	b.n	801d976 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801d9a0:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d9a4:	88b2      	ldrh	r2, [r6, #4]
 801d9a6:	4462      	add	r2, ip
 801d9a8:	b292      	uxth	r2, r2
 801d9aa:	b213      	sxth	r3, r2
 801d9ac:	9308      	str	r3, [sp, #32]
 801d9ae:	fa1f f389 	uxth.w	r3, r9
 801d9b2:	eb08 0103 	add.w	r1, r8, r3
 801d9b6:	9307      	str	r3, [sp, #28]
 801d9b8:	b289      	uxth	r1, r1
 801d9ba:	b208      	sxth	r0, r1
 801d9bc:	9006      	str	r0, [sp, #24]
 801d9be:	9805      	ldr	r0, [sp, #20]
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	9808      	ldr	r0, [sp, #32]
 801d9c4:	4283      	cmp	r3, r0
 801d9c6:	da5e      	bge.n	801da86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9ca:	4584      	cmp	ip, r0
 801d9cc:	da5b      	bge.n	801da86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d9ce:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801d9d2:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801d9d6:	4486      	add	lr, r0
 801d9d8:	fa1f fe8e 	uxth.w	lr, lr
 801d9dc:	fa0f f38e 	sxth.w	r3, lr
 801d9e0:	4599      	cmp	r9, r3
 801d9e2:	930a      	str	r3, [sp, #40]	; 0x28
 801d9e4:	da4f      	bge.n	801da86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d9e6:	9b06      	ldr	r3, [sp, #24]
 801d9e8:	4298      	cmp	r0, r3
 801d9ea:	da4c      	bge.n	801da86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d9ec:	9b05      	ldr	r3, [sp, #20]
 801d9ee:	459c      	cmp	ip, r3
 801d9f0:	bfb8      	it	lt
 801d9f2:	469c      	movlt	ip, r3
 801d9f4:	4548      	cmp	r0, r9
 801d9f6:	9b08      	ldr	r3, [sp, #32]
 801d9f8:	bfb8      	it	lt
 801d9fa:	4648      	movlt	r0, r9
 801d9fc:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801da00:	4699      	mov	r9, r3
 801da02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da04:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801da08:	4599      	cmp	r9, r3
 801da0a:	bfc8      	it	gt
 801da0c:	4652      	movgt	r2, sl
 801da0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da10:	eba2 020c 	sub.w	r2, r2, ip
 801da14:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801da18:	9a06      	ldr	r2, [sp, #24]
 801da1a:	4293      	cmp	r3, r2
 801da1c:	bfd8      	it	le
 801da1e:	4671      	movle	r1, lr
 801da20:	1a09      	subs	r1, r1, r0
 801da22:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801da26:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801da2a:	9b07      	ldr	r3, [sp, #28]
 801da2c:	1b12      	subs	r2, r2, r4
 801da2e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801da32:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801da36:	1ad2      	subs	r2, r2, r3
 801da38:	4b16      	ldr	r3, [pc, #88]	; (801da94 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801da3a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801da3e:	681a      	ldr	r2, [r3, #0]
 801da40:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801da44:	b109      	cbz	r1, 801da4a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801da46:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801da48:	b900      	cbnz	r0, 801da4c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801da4a:	6890      	ldr	r0, [r2, #8]
 801da4c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801da50:	f04f 0c01 	mov.w	ip, #1
 801da54:	9b07      	ldr	r3, [sp, #28]
 801da56:	6801      	ldr	r1, [r0, #0]
 801da58:	4413      	add	r3, r2
 801da5a:	f8cd c008 	str.w	ip, [sp, #8]
 801da5e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801da62:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801da66:	b21b      	sxth	r3, r3
 801da68:	4422      	add	r2, r4
 801da6a:	f8cd c004 	str.w	ip, [sp, #4]
 801da6e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801da72:	b212      	sxth	r2, r2
 801da74:	f8cd c000 	str.w	ip, [sp]
 801da78:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801da7c:	4659      	mov	r1, fp
 801da7e:	47c8      	blx	r9
 801da80:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801da84:	e784      	b.n	801d990 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801da86:	2300      	movs	r3, #0
 801da88:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801da8c:	e7cb      	b.n	801da26 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801da8e:	b013      	add	sp, #76	; 0x4c
 801da90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da94:	2000bfd0 	.word	0x2000bfd0

0801da98 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801da98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da9c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801daa0:	4606      	mov	r6, r0
 801daa2:	4689      	mov	r9, r1
 801daa4:	2bff      	cmp	r3, #255	; 0xff
 801daa6:	d008      	beq.n	801daba <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801daa8:	2300      	movs	r3, #0
 801daaa:	8003      	strh	r3, [r0, #0]
 801daac:	8043      	strh	r3, [r0, #2]
 801daae:	8083      	strh	r3, [r0, #4]
 801dab0:	4630      	mov	r0, r6
 801dab2:	80f3      	strh	r3, [r6, #6]
 801dab4:	b003      	add	sp, #12
 801dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daba:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801dabe:	4668      	mov	r0, sp
 801dac0:	4659      	mov	r1, fp
 801dac2:	f003 ff21 	bl	8021908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dac6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801daca:	4658      	mov	r0, fp
 801dacc:	f9bd 7000 	ldrsh.w	r7, [sp]
 801dad0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801dad4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801dad8:	f003 fea2 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dadc:	4284      	cmp	r4, r0
 801dade:	d10d      	bne.n	801dafc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801dae0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801dae4:	4658      	mov	r0, fp
 801dae6:	f003 fed5 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801daea:	4580      	cmp	r8, r0
 801daec:	d12a      	bne.n	801db44 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801daee:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801daf2:	8037      	strh	r7, [r6, #0]
 801daf4:	f8a6 a002 	strh.w	sl, [r6, #2]
 801daf8:	80b5      	strh	r5, [r6, #4]
 801dafa:	e7d9      	b.n	801dab0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801dafc:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801db00:	4658      	mov	r0, fp
 801db02:	f003 fe8d 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801db06:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801db0a:	1b7f      	subs	r7, r7, r5
 801db0c:	b2a3      	uxth	r3, r4
 801db0e:	b2bd      	uxth	r5, r7
 801db10:	b22f      	sxth	r7, r5
 801db12:	4428      	add	r0, r5
 801db14:	2f00      	cmp	r7, #0
 801db16:	b280      	uxth	r0, r0
 801db18:	bfb8      	it	lt
 801db1a:	18ed      	addlt	r5, r5, r3
 801db1c:	4403      	add	r3, r0
 801db1e:	bfac      	ite	ge
 801db20:	4625      	movge	r5, r4
 801db22:	2700      	movlt	r7, #0
 801db24:	b29b      	uxth	r3, r3
 801db26:	bfb8      	it	lt
 801db28:	b22d      	sxthlt	r5, r5
 801db2a:	b219      	sxth	r1, r3
 801db2c:	bfb8      	it	lt
 801db2e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801db32:	4291      	cmp	r1, r2
 801db34:	bfc4      	itt	gt
 801db36:	1a9c      	subgt	r4, r3, r2
 801db38:	b224      	sxthgt	r4, r4
 801db3a:	42ac      	cmp	r4, r5
 801db3c:	bfc4      	itt	gt
 801db3e:	b207      	sxthgt	r7, r0
 801db40:	4625      	movgt	r5, r4
 801db42:	e7cf      	b.n	801dae4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801db44:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801db48:	4658      	mov	r0, fp
 801db4a:	f003 fea3 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801db4e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801db52:	ebaa 0404 	sub.w	r4, sl, r4
 801db56:	fa1f f288 	uxth.w	r2, r8
 801db5a:	b2a4      	uxth	r4, r4
 801db5c:	fa0f fa84 	sxth.w	sl, r4
 801db60:	4420      	add	r0, r4
 801db62:	f1ba 0f00 	cmp.w	sl, #0
 801db66:	b280      	uxth	r0, r0
 801db68:	bfb8      	it	lt
 801db6a:	18a3      	addlt	r3, r4, r2
 801db6c:	4402      	add	r2, r0
 801db6e:	bfac      	ite	ge
 801db70:	4643      	movge	r3, r8
 801db72:	f04f 0a00 	movlt.w	sl, #0
 801db76:	b292      	uxth	r2, r2
 801db78:	bfb8      	it	lt
 801db7a:	b21b      	sxthlt	r3, r3
 801db7c:	b214      	sxth	r4, r2
 801db7e:	bfb8      	it	lt
 801db80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801db84:	428c      	cmp	r4, r1
 801db86:	bfc4      	itt	gt
 801db88:	eba2 0801 	subgt.w	r8, r2, r1
 801db8c:	fa0f f888 	sxthgt.w	r8, r8
 801db90:	4543      	cmp	r3, r8
 801db92:	bfbc      	itt	lt
 801db94:	fa0f fa80 	sxthlt.w	sl, r0
 801db98:	4643      	movlt	r3, r8
 801db9a:	e7aa      	b.n	801daf2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801db9c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801db9c:	b538      	push	{r3, r4, r5, lr}
 801db9e:	880b      	ldrh	r3, [r1, #0]
 801dba0:	4605      	mov	r5, r0
 801dba2:	4604      	mov	r4, r0
 801dba4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dba6:	8813      	ldrh	r3, [r2, #0]
 801dba8:	f825 3f30 	strh.w	r3, [r5, #48]!
 801dbac:	4628      	mov	r0, r5
 801dbae:	f003 fe37 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbb2:	8120      	strh	r0, [r4, #8]
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	f003 fe6d 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbba:	8160      	strh	r0, [r4, #10]
 801dbbc:	bd38      	pop	{r3, r4, r5, pc}

0801dbbe <_ZNK8touchgfx6Button12getSolidRectEv>:
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801dbc4:	4604      	mov	r4, r0
 801dbc6:	2bff      	cmp	r3, #255	; 0xff
 801dbc8:	d006      	beq.n	801dbd8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801dbca:	2300      	movs	r3, #0
 801dbcc:	8003      	strh	r3, [r0, #0]
 801dbce:	8043      	strh	r3, [r0, #2]
 801dbd0:	8083      	strh	r3, [r0, #4]
 801dbd2:	80c3      	strh	r3, [r0, #6]
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	bd10      	pop	{r4, pc}
 801dbd8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801dbdc:	b11b      	cbz	r3, 801dbe6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801dbde:	3130      	adds	r1, #48	; 0x30
 801dbe0:	f003 fe92 	bl	8021908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dbe4:	e7f6      	b.n	801dbd4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801dbe6:	312e      	adds	r1, #46	; 0x2e
 801dbe8:	e7fa      	b.n	801dbe0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801dbec <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801dbec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbf0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801dbf4:	b08b      	sub	sp, #44	; 0x2c
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	4689      	mov	r9, r1
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d043      	beq.n	801dc86 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801dbfe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801dc00:	a805      	add	r0, sp, #20
 801dc02:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dc06:	f003 fe0b 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc0a:	4607      	mov	r7, r0
 801dc0c:	fa0f f880 	sxth.w	r8, r0
 801dc10:	a805      	add	r0, sp, #20
 801dc12:	f003 fe3f 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc16:	f9b9 6000 	ldrsh.w	r6, [r9]
 801dc1a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801dc1e:	2300      	movs	r3, #0
 801dc20:	fa0f fc80 	sxth.w	ip, r0
 801dc24:	4432      	add	r2, r6
 801dc26:	9306      	str	r3, [sp, #24]
 801dc28:	b292      	uxth	r2, r2
 801dc2a:	fa0f fe82 	sxth.w	lr, r2
 801dc2e:	459e      	cmp	lr, r3
 801dc30:	dd2b      	ble.n	801dc8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801dc32:	45b0      	cmp	r8, r6
 801dc34:	dd29      	ble.n	801dc8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801dc36:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801dc3a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801dc3e:	442b      	add	r3, r5
 801dc40:	b29b      	uxth	r3, r3
 801dc42:	b219      	sxth	r1, r3
 801dc44:	2900      	cmp	r1, #0
 801dc46:	dd20      	ble.n	801dc8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801dc48:	45ac      	cmp	ip, r5
 801dc4a:	dd1e      	ble.n	801dc8a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801dc4c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801dc50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801dc54:	45f0      	cmp	r8, lr
 801dc56:	bfb8      	it	lt
 801dc58:	463a      	movlt	r2, r7
 801dc5a:	458c      	cmp	ip, r1
 801dc5c:	bfb8      	it	lt
 801dc5e:	4603      	movlt	r3, r0
 801dc60:	f8ad 6018 	strh.w	r6, [sp, #24]
 801dc64:	1b92      	subs	r2, r2, r6
 801dc66:	1b5b      	subs	r3, r3, r5
 801dc68:	f8ad 501a 	strh.w	r5, [sp, #26]
 801dc6c:	f8ad 201c 	strh.w	r2, [sp, #28]
 801dc70:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dc74:	4b1d      	ldr	r3, [pc, #116]	; (801dcec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	b953      	cbnz	r3, 801dc90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801dc7a:	4b1d      	ldr	r3, [pc, #116]	; (801dcf0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801dc7c:	21b8      	movs	r1, #184	; 0xb8
 801dc7e:	4a1d      	ldr	r2, [pc, #116]	; (801dcf4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801dc80:	481d      	ldr	r0, [pc, #116]	; (801dcf8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801dc82:	f00d fb1f 	bl	802b2c4 <__assert_func>
 801dc86:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dc88:	e7ba      	b.n	801dc00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801dc8a:	2300      	movs	r3, #0
 801dc8c:	9307      	str	r3, [sp, #28]
 801dc8e:	e7f1      	b.n	801dc74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 801dc90:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dc98:	429a      	cmp	r2, r3
 801dc9a:	d024      	beq.n	801dce6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801dc9c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dca0:	b30b      	cbz	r3, 801dce6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801dca2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801dca6:	b1f3      	cbz	r3, 801dce6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	a908      	add	r1, sp, #32
 801dcac:	4620      	mov	r0, r4
 801dcae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dcb2:	6823      	ldr	r3, [r4, #0]
 801dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcb6:	4798      	blx	r3
 801dcb8:	4b10      	ldr	r3, [pc, #64]	; (801dcfc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dcc0:	b10a      	cbz	r2, 801dcc6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801dcc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dcc4:	b900      	cbnz	r0, 801dcc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801dcc6:	6898      	ldr	r0, [r3, #8]
 801dcc8:	2501      	movs	r5, #1
 801dcca:	6801      	ldr	r1, [r0, #0]
 801dccc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dcd0:	9502      	str	r5, [sp, #8]
 801dcd2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801dcd6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dcda:	9401      	str	r4, [sp, #4]
 801dcdc:	ac06      	add	r4, sp, #24
 801dcde:	9400      	str	r4, [sp, #0]
 801dce0:	68cc      	ldr	r4, [r1, #12]
 801dce2:	a905      	add	r1, sp, #20
 801dce4:	47a0      	blx	r4
 801dce6:	b00b      	add	sp, #44	; 0x2c
 801dce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcec:	2000c098 	.word	0x2000c098
 801dcf0:	0802e310 	.word	0x0802e310
 801dcf4:	0802fae8 	.word	0x0802fae8
 801dcf8:	0802e34c 	.word	0x0802e34c
 801dcfc:	2000bfd0 	.word	0x2000bfd0

0801dd00 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801dd00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801dd04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd08:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d018      	beq.n	801dd42 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801dd10:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801dd14:	4628      	mov	r0, r5
 801dd16:	f7f2 fa5b 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801dd1a:	6803      	ldr	r3, [r0, #0]
 801dd1c:	4606      	mov	r6, r0
 801dd1e:	4628      	mov	r0, r5
 801dd20:	69df      	ldr	r7, [r3, #28]
 801dd22:	f7f2 fa71 	bl	8010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801dd26:	4680      	mov	r8, r0
 801dd28:	4628      	mov	r0, r5
 801dd2a:	f7f4 fe23 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801dd2e:	2300      	movs	r3, #0
 801dd30:	4602      	mov	r2, r0
 801dd32:	4641      	mov	r1, r8
 801dd34:	9300      	str	r3, [sp, #0]
 801dd36:	4630      	mov	r0, r6
 801dd38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dd3a:	47b8      	blx	r7
 801dd3c:	b002      	add	sp, #8
 801dd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd42:	2000      	movs	r0, #0
 801dd44:	e7fa      	b.n	801dd3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801dd46 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801dd46:	b570      	push	{r4, r5, r6, lr}
 801dd48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd4c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801dd4e:	4604      	mov	r4, r0
 801dd50:	429a      	cmp	r2, r3
 801dd52:	d00c      	beq.n	801dd6e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801dd54:	f850 3b26 	ldr.w	r3, [r0], #38
 801dd58:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801dd5a:	f7f4 fe0b 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801dd5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801dd60:	4601      	mov	r1, r0
 801dd62:	46ac      	mov	ip, r5
 801dd64:	4620      	mov	r0, r4
 801dd66:	2300      	movs	r3, #0
 801dd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dd6c:	4760      	bx	ip
 801dd6e:	2000      	movs	r0, #0
 801dd70:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dd74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd7c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801dd7e:	b08d      	sub	sp, #52	; 0x34
 801dd80:	4604      	mov	r4, r0
 801dd82:	429e      	cmp	r6, r3
 801dd84:	460f      	mov	r7, r1
 801dd86:	d048      	beq.n	801de1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801dd88:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	f7f2 fa1f 	bl	80101d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801dd92:	4680      	mov	r8, r0
 801dd94:	2800      	cmp	r0, #0
 801dd96:	d040      	beq.n	801de1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801dd98:	4628      	mov	r0, r5
 801dd9a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801dd9e:	f7f2 fa4b 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801dda2:	4b1f      	ldr	r3, [pc, #124]	; (801de20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801dda4:	4628      	mov	r0, r5
 801dda6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801ddb0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801ddb4:	785e      	ldrb	r6, [r3, #1]
 801ddb6:	f7f2 fa27 	bl	8010208 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ddba:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801ddbe:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801ddc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ddc4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801ddc8:	f88d 6020 	strb.w	r6, [sp, #32]
 801ddcc:	ae05      	add	r6, sp, #20
 801ddce:	9309      	str	r3, [sp, #36]	; 0x24
 801ddd0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801ddd4:	f8cd 801c 	str.w	r8, [sp, #28]
 801ddd8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801dddc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801dde0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801dde4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801dde8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ddec:	f7f2 fe18 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801ddf0:	4621      	mov	r1, r4
 801ddf2:	4680      	mov	r8, r0
 801ddf4:	4630      	mov	r0, r6
 801ddf6:	f001 ff0c 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ddfa:	4628      	mov	r0, r5
 801ddfc:	f7f4 fdba 	bl	8012974 <_ZNK8touchgfx9TypedText7getTextEv>
 801de00:	2300      	movs	r3, #0
 801de02:	9303      	str	r3, [sp, #12]
 801de04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de06:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801de0a:	ab07      	add	r3, sp, #28
 801de0c:	4640      	mov	r0, r8
 801de0e:	9300      	str	r3, [sp, #0]
 801de10:	463b      	mov	r3, r7
 801de12:	e896 0006 	ldmia.w	r6, {r1, r2}
 801de16:	f000 fc1d 	bl	801e654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801de1a:	b00d      	add	sp, #52	; 0x34
 801de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de20:	2000c060 	.word	0x2000c060

0801de24 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801de24:	2300      	movs	r3, #0
 801de26:	8083      	strh	r3, [r0, #4]
 801de28:	80c3      	strh	r3, [r0, #6]
 801de2a:	8003      	strh	r3, [r0, #0]
 801de2c:	8043      	strh	r3, [r0, #2]
 801de2e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801de32:	2bff      	cmp	r3, #255	; 0xff
 801de34:	bf01      	itttt	eq
 801de36:	890b      	ldrheq	r3, [r1, #8]
 801de38:	8083      	strheq	r3, [r0, #4]
 801de3a:	894b      	ldrheq	r3, [r1, #10]
 801de3c:	80c3      	strheq	r3, [r0, #6]
 801de3e:	4770      	bx	lr

0801de40 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de44:	4604      	mov	r4, r0
 801de46:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801de4a:	460e      	mov	r6, r1
 801de4c:	b08c      	sub	sp, #48	; 0x30
 801de4e:	8962      	ldrh	r2, [r4, #10]
 801de50:	b218      	sxth	r0, r3
 801de52:	8921      	ldrh	r1, [r4, #8]
 801de54:	005b      	lsls	r3, r3, #1
 801de56:	f8ad 0010 	strh.w	r0, [sp, #16]
 801de5a:	1ac9      	subs	r1, r1, r3
 801de5c:	1ad3      	subs	r3, r2, r3
 801de5e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801de62:	f8ad 1014 	strh.w	r1, [sp, #20]
 801de66:	6830      	ldr	r0, [r6, #0]
 801de68:	6871      	ldr	r1, [r6, #4]
 801de6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801de6e:	466b      	mov	r3, sp
 801de70:	c303      	stmia	r3!, {r0, r1}
 801de72:	a904      	add	r1, sp, #16
 801de74:	4668      	mov	r0, sp
 801de76:	f7fd fac9 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801de7a:	6823      	ldr	r3, [r4, #0]
 801de7c:	4669      	mov	r1, sp
 801de7e:	4620      	mov	r0, r4
 801de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de82:	4798      	blx	r3
 801de84:	f7f2 fdcc 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801de88:	6803      	ldr	r3, [r0, #0]
 801de8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801de8c:	4669      	mov	r1, sp
 801de8e:	69dd      	ldr	r5, [r3, #28]
 801de90:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801de94:	47a8      	blx	r5
 801de96:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801de9a:	2a00      	cmp	r2, #0
 801de9c:	d04b      	beq.n	801df36 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801de9e:	b211      	sxth	r1, r2
 801dea0:	8963      	ldrh	r3, [r4, #10]
 801dea2:	b292      	uxth	r2, r2
 801dea4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801dea8:	2500      	movs	r5, #0
 801deaa:	f8ad 1016 	strh.w	r1, [sp, #22]
 801deae:	1a9f      	subs	r7, r3, r2
 801deb0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801deb4:	1a82      	subs	r2, r0, r2
 801deb6:	9504      	str	r5, [sp, #16]
 801deb8:	b21b      	sxth	r3, r3
 801deba:	f8ad 701a 	strh.w	r7, [sp, #26]
 801debe:	af02      	add	r7, sp, #8
 801dec0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801dec4:	f8ad 5018 	strh.w	r5, [sp, #24]
 801dec8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801decc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ded0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801ded4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801ded8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801dedc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801dee0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dee4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801dee8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801deec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801def0:	ab04      	add	r3, sp, #16
 801def2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801def6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801defa:	e887 0003 	stmia.w	r7, {r0, r1}
 801defe:	4631      	mov	r1, r6
 801df00:	4638      	mov	r0, r7
 801df02:	f7fd fa83 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801df06:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801df0a:	b18b      	cbz	r3, 801df30 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801df0c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801df10:	b173      	cbz	r3, 801df30 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801df12:	6823      	ldr	r3, [r4, #0]
 801df14:	4639      	mov	r1, r7
 801df16:	4620      	mov	r0, r4
 801df18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df1a:	4798      	blx	r3
 801df1c:	f7f2 fd80 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 801df20:	6803      	ldr	r3, [r0, #0]
 801df22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801df24:	4639      	mov	r1, r7
 801df26:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801df2a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801df2e:	47c0      	blx	r8
 801df30:	3501      	adds	r5, #1
 801df32:	2d04      	cmp	r5, #4
 801df34:	d1dc      	bne.n	801def0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801df36:	b00c      	add	sp, #48	; 0x30
 801df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801df3c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801df3c:	b570      	push	{r4, r5, r6, lr}
 801df3e:	4605      	mov	r5, r0
 801df40:	880b      	ldrh	r3, [r1, #0]
 801df42:	4604      	mov	r4, r0
 801df44:	84c3      	strh	r3, [r0, #38]	; 0x26
 801df46:	f855 3b26 	ldr.w	r3, [r5], #38
 801df4a:	4628      	mov	r0, r5
 801df4c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801df4e:	f003 fc67 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801df52:	b201      	sxth	r1, r0
 801df54:	4620      	mov	r0, r4
 801df56:	47b0      	blx	r6
 801df58:	6823      	ldr	r3, [r4, #0]
 801df5a:	4628      	mov	r0, r5
 801df5c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801df5e:	f003 fc99 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df62:	b201      	sxth	r1, r0
 801df64:	4620      	mov	r0, r4
 801df66:	47b0      	blx	r6
 801df68:	4628      	mov	r0, r5
 801df6a:	f003 fd27 	bl	80219bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801df6e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801df72:	bd70      	pop	{r4, r5, r6, pc}

0801df74 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801df74:	b510      	push	{r4, lr}
 801df76:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801df7a:	4604      	mov	r4, r0
 801df7c:	2bff      	cmp	r3, #255	; 0xff
 801df7e:	d006      	beq.n	801df8e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801df80:	2300      	movs	r3, #0
 801df82:	8003      	strh	r3, [r0, #0]
 801df84:	8043      	strh	r3, [r0, #2]
 801df86:	8083      	strh	r3, [r0, #4]
 801df88:	80c3      	strh	r3, [r0, #6]
 801df8a:	4620      	mov	r0, r4
 801df8c:	bd10      	pop	{r4, pc}
 801df8e:	3126      	adds	r1, #38	; 0x26
 801df90:	f003 fcba 	bl	8021908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801df94:	e7f9      	b.n	801df8a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801df98 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df9c:	4604      	mov	r4, r0
 801df9e:	b088      	sub	sp, #32
 801dfa0:	2500      	movs	r5, #0
 801dfa2:	460f      	mov	r7, r1
 801dfa4:	f854 3b26 	ldr.w	r3, [r4], #38
 801dfa8:	a904      	add	r1, sp, #16
 801dfaa:	4606      	mov	r6, r0
 801dfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801dfb2:	4798      	blx	r3
 801dfb4:	4620      	mov	r0, r4
 801dfb6:	f003 fc33 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dfba:	4680      	mov	r8, r0
 801dfbc:	4620      	mov	r0, r4
 801dfbe:	f003 fc69 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dfc2:	9506      	str	r5, [sp, #24]
 801dfc4:	ad06      	add	r5, sp, #24
 801dfc6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dfca:	4639      	mov	r1, r7
 801dfcc:	f8ad 801c 	strh.w	r8, [sp, #28]
 801dfd0:	4628      	mov	r0, r5
 801dfd2:	f7fd fa1b 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801dfd6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dfda:	b1c3      	cbz	r3, 801e00e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801dfdc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801dfe0:	b1ab      	cbz	r3, 801e00e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801dfe2:	4b0c      	ldr	r3, [pc, #48]	; (801e014 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801dfea:	b10a      	cbz	r2, 801dff0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801dfec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dfee:	b900      	cbnz	r0, 801dff2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801dff0:	6898      	ldr	r0, [r3, #8]
 801dff2:	2701      	movs	r7, #1
 801dff4:	6801      	ldr	r1, [r0, #0]
 801dff6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dffa:	9702      	str	r7, [sp, #8]
 801dffc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801e000:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e004:	e9cd 5600 	strd	r5, r6, [sp]
 801e008:	68cd      	ldr	r5, [r1, #12]
 801e00a:	4621      	mov	r1, r4
 801e00c:	47a8      	blx	r5
 801e00e:	b008      	add	sp, #32
 801e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e014:	2000bfd0 	.word	0x2000bfd0

0801e018 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e01c:	4604      	mov	r4, r0
 801e01e:	b08f      	sub	sp, #60	; 0x3c
 801e020:	4688      	mov	r8, r1
 801e022:	f7ff fde3 	bl	801dbec <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801e026:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801e028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e02c:	429f      	cmp	r7, r3
 801e02e:	f000 809a 	beq.w	801e166 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801e032:	f104 0534 	add.w	r5, r4, #52	; 0x34
 801e036:	4e54      	ldr	r6, [pc, #336]	; (801e188 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801e038:	4628      	mov	r0, r5
 801e03a:	f7f2 f8fd 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801e03e:	6833      	ldr	r3, [r6, #0]
 801e040:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
 801e044:	f04f 0c02 	mov.w	ip, #2
 801e048:	f813 2017 	ldrb.w	r2, [r3, r7, lsl #1]
 801e04c:	4b4f      	ldr	r3, [pc, #316]	; (801e18c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801e04e:	f1be 0f01 	cmp.w	lr, #1
 801e052:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	b208      	sxth	r0, r1
 801e05a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801e05e:	f04f 0300 	mov.w	r3, #0
 801e062:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801e066:	9305      	str	r3, [sp, #20]
 801e068:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801e06c:	d07e      	beq.n	801e16c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801e06e:	f1be 0f03 	cmp.w	lr, #3
 801e072:	d07b      	beq.n	801e16c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801e074:	1a52      	subs	r2, r2, r1
 801e076:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e07a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e07e:	fb92 f2fc 	sdiv	r2, r2, ip
 801e082:	f8ad 2016 	strh.w	r2, [sp, #22]
 801e086:	f10d 0914 	add.w	r9, sp, #20
 801e08a:	f10d 0a1c 	add.w	sl, sp, #28
 801e08e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801e092:	e88a 0003 	stmia.w	sl, {r0, r1}
 801e096:	4641      	mov	r1, r8
 801e098:	4650      	mov	r0, sl
 801e09a:	f7fd f9b7 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801e09e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d05f      	beq.n	801e166 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801e0a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d05b      	beq.n	801e166 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801e0ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e0b2:	4649      	mov	r1, r9
 801e0b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e0b8:	4620      	mov	r0, r4
 801e0ba:	1a9b      	subs	r3, r3, r2
 801e0bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e0c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e0c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e0c8:	1a9b      	subs	r3, r3, r2
 801e0ca:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e0ce:	6823      	ldr	r3, [r4, #0]
 801e0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0d2:	4798      	blx	r3
 801e0d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d051      	beq.n	801e180 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801e0dc:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 801e0e0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 801e0e4:	4628      	mov	r0, r5
 801e0e6:	9303      	str	r3, [sp, #12]
 801e0e8:	f7f2 f8a6 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801e0ec:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801e0f0:	4628      	mov	r0, r5
 801e0f2:	6832      	ldr	r2, [r6, #0]
 801e0f4:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 801e0f8:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 801e0fc:	7856      	ldrb	r6, [r2, #1]
 801e0fe:	f3c6 0201 	ubfx	r2, r6, #0, #2
 801e102:	f3c6 0681 	ubfx	r6, r6, #2, #2
 801e106:	9202      	str	r2, [sp, #8]
 801e108:	f7f2 f896 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801e10c:	9b03      	ldr	r3, [sp, #12]
 801e10e:	9a02      	ldr	r2, [sp, #8]
 801e110:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 801e114:	2300      	movs	r3, #0
 801e116:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 801e11a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801e11e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801e122:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801e126:	4b1a      	ldr	r3, [pc, #104]	; (801e190 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801e128:	9709      	str	r7, [sp, #36]	; 0x24
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801e130:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801e134:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 801e138:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
 801e13c:	b10a      	cbz	r2, 801e142 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12a>
 801e13e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801e140:	b904      	cbnz	r4, 801e144 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12c>
 801e142:	689c      	ldr	r4, [r3, #8]
 801e144:	4628      	mov	r0, r5
 801e146:	f7f2 f877 	bl	8010238 <_ZNK8touchgfx9TypedText11assertValidEv>
 801e14a:	4b12      	ldr	r3, [pc, #72]	; (801e194 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801e14c:	4641      	mov	r1, r8
 801e14e:	6818      	ldr	r0, [r3, #0]
 801e150:	f7f9 f8f2 	bl	8017338 <_ZNK8touchgfx5Texts7getTextEt>
 801e154:	ab09      	add	r3, sp, #36	; 0x24
 801e156:	9001      	str	r0, [sp, #4]
 801e158:	4620      	mov	r0, r4
 801e15a:	9300      	str	r3, [sp, #0]
 801e15c:	4653      	mov	r3, sl
 801e15e:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e162:	f000 fa77 	bl	801e654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801e166:	b00f      	add	sp, #60	; 0x3c
 801e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e16c:	1a5b      	subs	r3, r3, r1
 801e16e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e172:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e176:	fb93 f3fc 	sdiv	r3, r3, ip
 801e17a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e17e:	e782      	b.n	801e086 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x6e>
 801e180:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
 801e184:	e7ac      	b.n	801e0e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xc8>
 801e186:	bf00      	nop
 801e188:	2000c060 	.word	0x2000c060
 801e18c:	2000c068 	.word	0x2000c068
 801e190:	2000bfd0 	.word	0x2000bfd0
 801e194:	2000c06c 	.word	0x2000c06c

0801e198 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801e198:	2101      	movs	r1, #1
 801e19a:	2200      	movs	r2, #0
 801e19c:	b510      	push	{r4, lr}
 801e19e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801e1a2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801e1a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e1aa:	4c0e      	ldr	r4, [pc, #56]	; (801e1e4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x4c>)
 801e1ac:	8082      	strh	r2, [r0, #4]
 801e1ae:	80c2      	strh	r2, [r0, #6]
 801e1b0:	8102      	strh	r2, [r0, #8]
 801e1b2:	8142      	strh	r2, [r0, #10]
 801e1b4:	8182      	strh	r2, [r0, #12]
 801e1b6:	81c2      	strh	r2, [r0, #14]
 801e1b8:	8202      	strh	r2, [r0, #16]
 801e1ba:	8242      	strh	r2, [r0, #18]
 801e1bc:	61c2      	str	r2, [r0, #28]
 801e1be:	6282      	str	r2, [r0, #40]	; 0x28
 801e1c0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801e1c4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801e1c6:	8601      	strh	r1, [r0, #48]	; 0x30
 801e1c8:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801e1cc:	6004      	str	r4, [r0, #0]
 801e1ce:	8681      	strh	r1, [r0, #52]	; 0x34
 801e1d0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 801e1d4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 801e1d8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801e1dc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e1e0:	bd10      	pop	{r4, pc}
 801e1e2:	bf00      	nop
 801e1e4:	0802fc74 	.word	0x0802fc74

0801e1e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801e1e8:	4b02      	ldr	r3, [pc, #8]	; (801e1f4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801e1ea:	6018      	str	r0, [r3, #0]
 801e1ec:	4b02      	ldr	r3, [pc, #8]	; (801e1f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801e1ee:	6019      	str	r1, [r3, #0]
 801e1f0:	4770      	bx	lr
 801e1f2:	bf00      	nop
 801e1f4:	2000bfd8 	.word	0x2000bfd8
 801e1f8:	2000bfec 	.word	0x2000bfec

0801e1fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801e1fc:	b538      	push	{r3, r4, r5, lr}
 801e1fe:	4c2b      	ldr	r4, [pc, #172]	; (801e2ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801e200:	4b2b      	ldr	r3, [pc, #172]	; (801e2b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801e202:	6821      	ldr	r1, [r4, #0]
 801e204:	681a      	ldr	r2, [r3, #0]
 801e206:	4281      	cmp	r1, r0
 801e208:	4d2a      	ldr	r5, [pc, #168]	; (801e2b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801e20a:	492b      	ldr	r1, [pc, #172]	; (801e2b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801e20c:	d108      	bne.n	801e220 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801e20e:	682b      	ldr	r3, [r5, #0]
 801e210:	4293      	cmp	r3, r2
 801e212:	d105      	bne.n	801e220 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801e214:	6808      	ldr	r0, [r1, #0]
 801e216:	280f      	cmp	r0, #15
 801e218:	bf94      	ite	ls
 801e21a:	2000      	movls	r0, #0
 801e21c:	2001      	movhi	r0, #1
 801e21e:	bd38      	pop	{r3, r4, r5, pc}
 801e220:	4b26      	ldr	r3, [pc, #152]	; (801e2bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801e222:	6020      	str	r0, [r4, #0]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	602a      	str	r2, [r5, #0]
 801e228:	4298      	cmp	r0, r3
 801e22a:	d905      	bls.n	801e238 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801e22c:	4b24      	ldr	r3, [pc, #144]	; (801e2c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801e22e:	2137      	movs	r1, #55	; 0x37
 801e230:	4a24      	ldr	r2, [pc, #144]	; (801e2c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801e232:	4825      	ldr	r0, [pc, #148]	; (801e2c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801e234:	f00d f846 	bl	802b2c4 <__assert_func>
 801e238:	f010 0403 	ands.w	r4, r0, #3
 801e23c:	bf1f      	itttt	ne
 801e23e:	f1c4 0504 	rsbne	r5, r4, #4
 801e242:	3b04      	subne	r3, #4
 801e244:	1952      	addne	r2, r2, r5
 801e246:	191b      	addne	r3, r3, r4
 801e248:	4d20      	ldr	r5, [pc, #128]	; (801e2cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801e24a:	4402      	add	r2, r0
 801e24c:	1a1b      	subs	r3, r3, r0
 801e24e:	3001      	adds	r0, #1
 801e250:	602a      	str	r2, [r5, #0]
 801e252:	f020 0401 	bic.w	r4, r0, #1
 801e256:	42a3      	cmp	r3, r4
 801e258:	d203      	bcs.n	801e262 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801e25a:	4b19      	ldr	r3, [pc, #100]	; (801e2c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801e25c:	214a      	movs	r1, #74	; 0x4a
 801e25e:	4a19      	ldr	r2, [pc, #100]	; (801e2c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801e260:	e7e7      	b.n	801e232 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801e262:	f010 0002 	ands.w	r0, r0, #2
 801e266:	bf1f      	itttt	ne
 801e268:	f1c0 0504 	rsbne	r5, r0, #4
 801e26c:	1952      	addne	r2, r2, r5
 801e26e:	1f05      	subne	r5, r0, #4
 801e270:	195b      	addne	r3, r3, r5
 801e272:	4422      	add	r2, r4
 801e274:	4d16      	ldr	r5, [pc, #88]	; (801e2d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801e276:	1b1b      	subs	r3, r3, r4
 801e278:	602a      	str	r2, [r5, #0]
 801e27a:	429c      	cmp	r4, r3
 801e27c:	d903      	bls.n	801e286 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801e27e:	4b10      	ldr	r3, [pc, #64]	; (801e2c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801e280:	215d      	movs	r1, #93	; 0x5d
 801e282:	4a10      	ldr	r2, [pc, #64]	; (801e2c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801e284:	e7d5      	b.n	801e232 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801e286:	b120      	cbz	r0, 801e292 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801e288:	f1c0 0504 	rsb	r5, r0, #4
 801e28c:	3804      	subs	r0, #4
 801e28e:	442a      	add	r2, r5
 801e290:	4403      	add	r3, r0
 801e292:	1b1b      	subs	r3, r3, r4
 801e294:	4422      	add	r2, r4
 801e296:	480f      	ldr	r0, [pc, #60]	; (801e2d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801e298:	2b0f      	cmp	r3, #15
 801e29a:	600b      	str	r3, [r1, #0]
 801e29c:	6002      	str	r2, [r0, #0]
 801e29e:	d803      	bhi.n	801e2a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801e2a0:	4b0d      	ldr	r3, [pc, #52]	; (801e2d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801e2a2:	2170      	movs	r1, #112	; 0x70
 801e2a4:	4a07      	ldr	r2, [pc, #28]	; (801e2c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801e2a6:	e7c4      	b.n	801e232 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801e2a8:	2001      	movs	r0, #1
 801e2aa:	e7b8      	b.n	801e21e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801e2ac:	2000bfe0 	.word	0x2000bfe0
 801e2b0:	2000bfd8 	.word	0x2000bfd8
 801e2b4:	2000bfe8 	.word	0x2000bfe8
 801e2b8:	2000bff0 	.word	0x2000bff0
 801e2bc:	2000bfec 	.word	0x2000bfec
 801e2c0:	0802fcdc 	.word	0x0802fcdc
 801e2c4:	0802fda4 	.word	0x0802fda4
 801e2c8:	0802fd15 	.word	0x0802fd15
 801e2cc:	2000bff4 	.word	0x2000bff4
 801e2d0:	2000bfe4 	.word	0x2000bfe4
 801e2d4:	2000bfdc 	.word	0x2000bfdc
 801e2d8:	0802fd5f 	.word	0x0802fd5f

0801e2dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801e2dc:	4b04      	ldr	r3, [pc, #16]	; (801e2f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801e2de:	6818      	ldr	r0, [r3, #0]
 801e2e0:	b120      	cbz	r0, 801e2ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801e2e2:	4b04      	ldr	r3, [pc, #16]	; (801e2f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801e2e4:	6818      	ldr	r0, [r3, #0]
 801e2e6:	3000      	adds	r0, #0
 801e2e8:	bf18      	it	ne
 801e2ea:	2001      	movne	r0, #1
 801e2ec:	4770      	bx	lr
 801e2ee:	bf00      	nop
 801e2f0:	2000bfd8 	.word	0x2000bfd8
 801e2f4:	2000bfec 	.word	0x2000bfec

0801e2f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801e2f8:	4b01      	ldr	r3, [pc, #4]	; (801e300 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801e2fa:	6818      	ldr	r0, [r3, #0]
 801e2fc:	4770      	bx	lr
 801e2fe:	bf00      	nop
 801e300:	2000bfe0 	.word	0x2000bfe0

0801e304 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801e304:	4b01      	ldr	r3, [pc, #4]	; (801e30c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801e306:	6818      	ldr	r0, [r3, #0]
 801e308:	4770      	bx	lr
 801e30a:	bf00      	nop
 801e30c:	2000bfe8 	.word	0x2000bfe8

0801e310 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801e310:	4b01      	ldr	r3, [pc, #4]	; (801e318 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801e312:	6818      	ldr	r0, [r3, #0]
 801e314:	4770      	bx	lr
 801e316:	bf00      	nop
 801e318:	2000bff4 	.word	0x2000bff4

0801e31c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801e31c:	4b01      	ldr	r3, [pc, #4]	; (801e324 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801e31e:	6818      	ldr	r0, [r3, #0]
 801e320:	4770      	bx	lr
 801e322:	bf00      	nop
 801e324:	2000bfe4 	.word	0x2000bfe4

0801e328 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801e328:	4b01      	ldr	r3, [pc, #4]	; (801e330 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801e32a:	6818      	ldr	r0, [r3, #0]
 801e32c:	4770      	bx	lr
 801e32e:	bf00      	nop
 801e330:	2000bfdc 	.word	0x2000bfdc

0801e334 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801e334:	4b01      	ldr	r3, [pc, #4]	; (801e33c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801e336:	6818      	ldr	r0, [r3, #0]
 801e338:	4770      	bx	lr
 801e33a:	bf00      	nop
 801e33c:	2000bff0 	.word	0x2000bff0

0801e340 <_ZN8touchgfx3LCD4initEv>:
 801e340:	4770      	bx	lr

0801e342 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e342:	2000      	movs	r0, #0
 801e344:	4770      	bx	lr

0801e346 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801e346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e34a:	b091      	sub	sp, #68	; 0x44
 801e34c:	4699      	mov	r9, r3
 801e34e:	4617      	mov	r7, r2
 801e350:	2500      	movs	r5, #0
 801e352:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801e356:	4680      	mov	r8, r0
 801e358:	a80e      	add	r0, sp, #56	; 0x38
 801e35a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801e35c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801e360:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801e364:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e368:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e36c:	910d      	str	r1, [sp, #52]	; 0x34
 801e36e:	950e      	str	r5, [sp, #56]	; 0x38
 801e370:	f000 fe3a 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e374:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e376:	f8d9 6000 	ldr.w	r6, [r9]
 801e37a:	6818      	ldr	r0, [r3, #0]
 801e37c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e37e:	f9b4 b000 	ldrsh.w	fp, [r4]
 801e382:	1b80      	subs	r0, r0, r6
 801e384:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e388:	eb02 0c06 	add.w	ip, r2, r6
 801e38c:	ebab 0e0c 	sub.w	lr, fp, ip
 801e390:	4570      	cmp	r0, lr
 801e392:	f340 80bc 	ble.w	801e50e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801e396:	88a1      	ldrh	r1, [r4, #4]
 801e398:	4459      	add	r1, fp
 801e39a:	b209      	sxth	r1, r1
 801e39c:	458c      	cmp	ip, r1
 801e39e:	f300 80b6 	bgt.w	801e50e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801e3a2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e3a6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801e3aa:	4283      	cmp	r3, r0
 801e3ac:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801e3b0:	edd9 6a07 	vldr	s13, [r9, #28]
 801e3b4:	bfa8      	it	ge
 801e3b6:	4603      	movge	r3, r0
 801e3b8:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801e3bc:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801e3c0:	45e3      	cmp	fp, ip
 801e3c2:	ee07 3a90 	vmov	s15, r3
 801e3c6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801e3ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e3ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 801e3d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801e3d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801e3da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e3de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801e3e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 801e3e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e3ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 801e3ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e3f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e3f6:	f340 808d 	ble.w	801e514 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801e3fa:	fb9e f5f3 	sdiv	r5, lr, r3
 801e3fe:	ee07 5a10 	vmov	s14, r5
 801e402:	2d00      	cmp	r5, #0
 801e404:	fb03 e415 	mls	r4, r3, r5, lr
 801e408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e40c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801e410:	eee7 0a24 	vfma.f32	s1, s14, s9
 801e414:	eea7 1a05 	vfma.f32	s2, s14, s10
 801e418:	dd12      	ble.n	801e440 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801e41a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801e41e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801e422:	ee31 2a45 	vsub.f32	s4, s2, s10
 801e426:	eef5 6a40 	vcmp.f32	s13, #0.0
 801e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e42e:	bf14      	ite	ne
 801e430:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801e434:	eeb0 7a67 	vmoveq.f32	s14, s15
 801e438:	ee61 1a87 	vmul.f32	s3, s3, s14
 801e43c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801e440:	fb05 f703 	mul.w	r7, r5, r3
 801e444:	1bc0      	subs	r0, r0, r7
 801e446:	443e      	add	r6, r7
 801e448:	1997      	adds	r7, r2, r6
 801e44a:	4407      	add	r7, r0
 801e44c:	42b9      	cmp	r1, r7
 801e44e:	bfbc      	itt	lt
 801e450:	1a88      	sublt	r0, r1, r2
 801e452:	1b80      	sublt	r0, r0, r6
 801e454:	2800      	cmp	r0, #0
 801e456:	dd5a      	ble.n	801e50e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801e458:	fb90 f1f3 	sdiv	r1, r0, r3
 801e45c:	fb03 0211 	mls	r2, r3, r1, r0
 801e460:	b90a      	cbnz	r2, 801e466 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801e462:	3901      	subs	r1, #1
 801e464:	461a      	mov	r2, r3
 801e466:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801e46a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e46e:	44a4      	add	ip, r4
 801e470:	2900      	cmp	r1, #0
 801e472:	bfcc      	ite	gt
 801e474:	469e      	movgt	lr, r3
 801e476:	4696      	movle	lr, r2
 801e478:	fb03 c505 	mla	r5, r3, r5, ip
 801e47c:	eef0 6a42 	vmov.f32	s13, s4
 801e480:	eeb0 7a61 	vmov.f32	s14, s3
 801e484:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e488:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e48c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801e490:	ee21 3a23 	vmul.f32	s6, s2, s7
 801e494:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801e498:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e49c:	ee17 0a90 	vmov	r0, s15
 801e4a0:	ee73 7a42 	vsub.f32	s15, s6, s4
 801e4a4:	fb90 f6f3 	sdiv	r6, r0, r3
 801e4a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e4ac:	ee17 0a90 	vmov	r0, s15
 801e4b0:	fb90 f7f3 	sdiv	r7, r0, r3
 801e4b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e4b8:	f8d0 8000 	ldr.w	r8, [r0]
 801e4bc:	900c      	str	r0, [sp, #48]	; 0x30
 801e4be:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e4c0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e4c4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e4c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801e4cc:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801e4d0:	f8cd a020 	str.w	sl, [sp, #32]
 801e4d4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801e4d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e4da:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801e4de:	9603      	str	r6, [sp, #12]
 801e4e0:	44ca      	add	sl, r9
 801e4e2:	9506      	str	r5, [sp, #24]
 801e4e4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801e4e8:	ee16 0a90 	vmov	r0, s13
 801e4ec:	f8cd a01c 	str.w	sl, [sp, #28]
 801e4f0:	fb07 0704 	mla	r7, r7, r4, r0
 801e4f4:	ee17 0a10 	vmov	r0, s14
 801e4f8:	fb06 0604 	mla	r6, r6, r4, r0
 801e4fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e4fe:	9702      	str	r7, [sp, #8]
 801e500:	e9cd 3600 	strd	r3, r6, [sp]
 801e504:	ebae 0304 	sub.w	r3, lr, r4
 801e508:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e50c:	47a8      	blx	r5
 801e50e:	b011      	add	sp, #68	; 0x44
 801e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e514:	462c      	mov	r4, r5
 801e516:	e797      	b.n	801e448 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801e518 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801e518:	b570      	push	{r4, r5, r6, lr}
 801e51a:	4604      	mov	r4, r0
 801e51c:	2500      	movs	r5, #0
 801e51e:	9804      	ldr	r0, [sp, #16]
 801e520:	7223      	strb	r3, [r4, #8]
 801e522:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e526:	8025      	strh	r5, [r4, #0]
 801e528:	6061      	str	r1, [r4, #4]
 801e52a:	7263      	strb	r3, [r4, #9]
 801e52c:	60e0      	str	r0, [r4, #12]
 801e52e:	8222      	strh	r2, [r4, #16]
 801e530:	8265      	strh	r5, [r4, #18]
 801e532:	82a5      	strh	r5, [r4, #20]
 801e534:	82e5      	strh	r5, [r4, #22]
 801e536:	8325      	strh	r5, [r4, #24]
 801e538:	8365      	strh	r5, [r4, #26]
 801e53a:	83a5      	strh	r5, [r4, #28]
 801e53c:	77a5      	strb	r5, [r4, #30]
 801e53e:	6803      	ldr	r3, [r0, #0]
 801e540:	695b      	ldr	r3, [r3, #20]
 801e542:	4798      	blx	r3
 801e544:	4606      	mov	r6, r0
 801e546:	b1f8      	cbz	r0, 801e588 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e548:	68e0      	ldr	r0, [r4, #12]
 801e54a:	4631      	mov	r1, r6
 801e54c:	6803      	ldr	r3, [r0, #0]
 801e54e:	68db      	ldr	r3, [r3, #12]
 801e550:	4798      	blx	r3
 801e552:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801e556:	4605      	mov	r5, r0
 801e558:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e55c:	7a83      	ldrb	r3, [r0, #10]
 801e55e:	4313      	orrs	r3, r2
 801e560:	83a3      	strh	r3, [r4, #28]
 801e562:	7a63      	ldrb	r3, [r4, #9]
 801e564:	2b04      	cmp	r3, #4
 801e566:	d10f      	bne.n	801e588 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801e568:	68e0      	ldr	r0, [r4, #12]
 801e56a:	462a      	mov	r2, r5
 801e56c:	4631      	mov	r1, r6
 801e56e:	6803      	ldr	r3, [r0, #0]
 801e570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e572:	4798      	blx	r3
 801e574:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801e578:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e57c:	7aab      	ldrb	r3, [r5, #10]
 801e57e:	4313      	orrs	r3, r2
 801e580:	4418      	add	r0, r3
 801e582:	8ba3      	ldrh	r3, [r4, #28]
 801e584:	4418      	add	r0, r3
 801e586:	83a0      	strh	r0, [r4, #28]
 801e588:	4620      	mov	r0, r4
 801e58a:	bd70      	pop	{r4, r5, r6, pc}

0801e58c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e590:	2400      	movs	r4, #0
 801e592:	b085      	sub	sp, #20
 801e594:	4681      	mov	r9, r0
 801e596:	460f      	mov	r7, r1
 801e598:	4692      	mov	sl, r2
 801e59a:	469b      	mov	fp, r3
 801e59c:	46a0      	mov	r8, r4
 801e59e:	4626      	mov	r6, r4
 801e5a0:	4554      	cmp	r4, sl
 801e5a2:	da21      	bge.n	801e5e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	463a      	mov	r2, r7
 801e5a8:	4659      	mov	r1, fp
 801e5aa:	4648      	mov	r0, r9
 801e5ac:	9303      	str	r3, [sp, #12]
 801e5ae:	ab03      	add	r3, sp, #12
 801e5b0:	f002 fb8c 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e5b4:	4605      	mov	r5, r0
 801e5b6:	b1b8      	cbz	r0, 801e5e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801e5b8:	280a      	cmp	r0, #10
 801e5ba:	d015      	beq.n	801e5e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801e5bc:	9a03      	ldr	r2, [sp, #12]
 801e5be:	b182      	cbz	r2, 801e5e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801e5c0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801e5c4:	4641      	mov	r1, r8
 801e5c6:	7a93      	ldrb	r3, [r2, #10]
 801e5c8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e5cc:	8895      	ldrh	r5, [r2, #4]
 801e5ce:	4303      	orrs	r3, r0
 801e5d0:	4638      	mov	r0, r7
 801e5d2:	9301      	str	r3, [sp, #4]
 801e5d4:	683b      	ldr	r3, [r7, #0]
 801e5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5d8:	4798      	blx	r3
 801e5da:	9b01      	ldr	r3, [sp, #4]
 801e5dc:	4418      	add	r0, r3
 801e5de:	4406      	add	r6, r0
 801e5e0:	b2b6      	uxth	r6, r6
 801e5e2:	3401      	adds	r4, #1
 801e5e4:	46a8      	mov	r8, r5
 801e5e6:	e7db      	b.n	801e5a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801e5e8:	4630      	mov	r0, r6
 801e5ea:	b005      	add	sp, #20
 801e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801e5f0:	2a02      	cmp	r2, #2
 801e5f2:	b530      	push	{r4, r5, lr}
 801e5f4:	d011      	beq.n	801e61a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801e5f6:	2a03      	cmp	r2, #3
 801e5f8:	d01c      	beq.n	801e634 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801e5fa:	2a01      	cmp	r2, #1
 801e5fc:	d10c      	bne.n	801e618 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e5fe:	888b      	ldrh	r3, [r1, #4]
 801e600:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e604:	8801      	ldrh	r1, [r0, #0]
 801e606:	1a9b      	subs	r3, r3, r2
 801e608:	8844      	ldrh	r4, [r0, #2]
 801e60a:	1a5b      	subs	r3, r3, r1
 801e60c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e610:	8004      	strh	r4, [r0, #0]
 801e612:	8043      	strh	r3, [r0, #2]
 801e614:	8081      	strh	r1, [r0, #4]
 801e616:	80c2      	strh	r2, [r0, #6]
 801e618:	bd30      	pop	{r4, r5, pc}
 801e61a:	88cb      	ldrh	r3, [r1, #6]
 801e61c:	88c2      	ldrh	r2, [r0, #6]
 801e61e:	1a9b      	subs	r3, r3, r2
 801e620:	8842      	ldrh	r2, [r0, #2]
 801e622:	1a9b      	subs	r3, r3, r2
 801e624:	888a      	ldrh	r2, [r1, #4]
 801e626:	8881      	ldrh	r1, [r0, #4]
 801e628:	8043      	strh	r3, [r0, #2]
 801e62a:	1a52      	subs	r2, r2, r1
 801e62c:	8801      	ldrh	r1, [r0, #0]
 801e62e:	1a52      	subs	r2, r2, r1
 801e630:	8002      	strh	r2, [r0, #0]
 801e632:	e7f1      	b.n	801e618 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801e634:	88cb      	ldrh	r3, [r1, #6]
 801e636:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801e63a:	8841      	ldrh	r1, [r0, #2]
 801e63c:	1a9b      	subs	r3, r3, r2
 801e63e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e642:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e646:	1a5b      	subs	r3, r3, r1
 801e648:	8045      	strh	r5, [r0, #2]
 801e64a:	8082      	strh	r2, [r0, #4]
 801e64c:	8003      	strh	r3, [r0, #0]
 801e64e:	80c4      	strh	r4, [r0, #6]
 801e650:	e7e2      	b.n	801e618 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801e654 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801e654:	b570      	push	{r4, r5, r6, lr}
 801e656:	b086      	sub	sp, #24
 801e658:	ac02      	add	r4, sp, #8
 801e65a:	e884 0006 	stmia.w	r4, {r1, r2}
 801e65e:	461a      	mov	r2, r3
 801e660:	ab0c      	add	r3, sp, #48	; 0x30
 801e662:	9305      	str	r3, [sp, #20]
 801e664:	4b0a      	ldr	r3, [pc, #40]	; (801e690 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801e666:	685d      	ldr	r5, [r3, #4]
 801e668:	1069      	asrs	r1, r5, #1
 801e66a:	07ed      	lsls	r5, r5, #31
 801e66c:	eb00 0601 	add.w	r6, r0, r1
 801e670:	bf46      	itte	mi
 801e672:	681b      	ldrmi	r3, [r3, #0]
 801e674:	5841      	ldrmi	r1, [r0, r1]
 801e676:	681d      	ldrpl	r5, [r3, #0]
 801e678:	4630      	mov	r0, r6
 801e67a:	bf48      	it	mi
 801e67c:	58cd      	ldrmi	r5, [r1, r3]
 801e67e:	4621      	mov	r1, r4
 801e680:	9b05      	ldr	r3, [sp, #20]
 801e682:	9301      	str	r3, [sp, #4]
 801e684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e686:	9300      	str	r3, [sp, #0]
 801e688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e68a:	47a8      	blx	r5
 801e68c:	b006      	add	sp, #24
 801e68e:	bd70      	pop	{r4, r5, r6, pc}
 801e690:	20000028 	.word	0x20000028

0801e694 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e698:	b09d      	sub	sp, #116	; 0x74
 801e69a:	9114      	str	r1, [sp, #80]	; 0x50
 801e69c:	9315      	str	r3, [sp, #84]	; 0x54
 801e69e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e6a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e6a2:	8809      	ldrh	r1, [r1, #0]
 801e6a4:	889b      	ldrh	r3, [r3, #4]
 801e6a6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801e6a8:	440b      	add	r3, r1
 801e6aa:	9210      	str	r2, [sp, #64]	; 0x40
 801e6ac:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801e6b0:	b21b      	sxth	r3, r3
 801e6b2:	900f      	str	r0, [sp, #60]	; 0x3c
 801e6b4:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801e6b8:	930e      	str	r3, [sp, #56]	; 0x38
 801e6ba:	6833      	ldr	r3, [r6, #0]
 801e6bc:	7a59      	ldrb	r1, [r3, #9]
 801e6be:	7a1b      	ldrb	r3, [r3, #8]
 801e6c0:	9113      	str	r1, [sp, #76]	; 0x4c
 801e6c2:	9312      	str	r3, [sp, #72]	; 0x48
 801e6c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e6c6:	f9b3 4000 	ldrsh.w	r4, [r3]
 801e6ca:	2a00      	cmp	r2, #0
 801e6cc:	d059      	beq.n	801e782 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801e6ce:	7c33      	ldrb	r3, [r6, #16]
 801e6d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e6d2:	2b04      	cmp	r3, #4
 801e6d4:	bf14      	ite	ne
 801e6d6:	2301      	movne	r3, #1
 801e6d8:	2302      	moveq	r3, #2
 801e6da:	4413      	add	r3, r2
 801e6dc:	f04f 0800 	mov.w	r8, #0
 801e6e0:	930d      	str	r3, [sp, #52]	; 0x34
 801e6e2:	4645      	mov	r5, r8
 801e6e4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801e6e8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801e6ec:	4293      	cmp	r3, r2
 801e6ee:	da75      	bge.n	801e7dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801e6f4:	6832      	ldr	r2, [r6, #0]
 801e6f6:	931a      	str	r3, [sp, #104]	; 0x68
 801e6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6fa:	428b      	cmp	r3, r1
 801e6fc:	db43      	blt.n	801e786 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801e6fe:	6813      	ldr	r3, [r2, #0]
 801e700:	4610      	mov	r0, r2
 801e702:	695b      	ldr	r3, [r3, #20]
 801e704:	4798      	blx	r3
 801e706:	4681      	mov	r9, r0
 801e708:	6830      	ldr	r0, [r6, #0]
 801e70a:	aa1b      	add	r2, sp, #108	; 0x6c
 801e70c:	4649      	mov	r1, r9
 801e70e:	6803      	ldr	r3, [r0, #0]
 801e710:	689f      	ldr	r7, [r3, #8]
 801e712:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801e716:	47b8      	blx	r7
 801e718:	901a      	str	r0, [sp, #104]	; 0x68
 801e71a:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801e71e:	45d1      	cmp	r9, sl
 801e720:	d045      	beq.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e722:	f242 070b 	movw	r7, #8203	; 0x200b
 801e726:	45b9      	cmp	r9, r7
 801e728:	d041      	beq.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e72a:	f1b9 0f00 	cmp.w	r9, #0
 801e72e:	f000 80ee 	beq.w	801e90e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e732:	f1b9 0f0a 	cmp.w	r9, #10
 801e736:	d057      	beq.n	801e7e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801e738:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e73a:	b383      	cbz	r3, 801e79e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801e73c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801e740:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e742:	2a00      	cmp	r2, #0
 801e744:	f000 80d2 	beq.w	801e8ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801e748:	f1bb 0f00 	cmp.w	fp, #0
 801e74c:	d100      	bne.n	801e750 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801e74e:	4444      	add	r4, r8
 801e750:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801e754:	f1bb 0f01 	cmp.w	fp, #1
 801e758:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801e75c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801e760:	ea48 0803 	orr.w	r8, r8, r3
 801e764:	d128      	bne.n	801e7b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801e766:	eba4 0408 	sub.w	r4, r4, r8
 801e76a:	2d00      	cmp	r5, #0
 801e76c:	d143      	bne.n	801e7f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801e76e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e770:	eb08 0304 	add.w	r3, r8, r4
 801e774:	4413      	add	r3, r2
 801e776:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e778:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e77c:	4293      	cmp	r3, r2
 801e77e:	da44      	bge.n	801e80a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e780:	e02b      	b.n	801e7da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801e782:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e784:	e7aa      	b.n	801e6dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801e786:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801e78a:	4659      	mov	r1, fp
 801e78c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801e78e:	9301      	str	r3, [sp, #4]
 801e790:	ab1b      	add	r3, sp, #108	; 0x6c
 801e792:	9300      	str	r3, [sp, #0]
 801e794:	ab1a      	add	r3, sp, #104	; 0x68
 801e796:	f002 facd 	bl	8020d34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801e79a:	4681      	mov	r9, r0
 801e79c:	e7bd      	b.n	801e71a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801e79e:	6830      	ldr	r0, [r6, #0]
 801e7a0:	6803      	ldr	r3, [r0, #0]
 801e7a2:	691b      	ldr	r3, [r3, #16]
 801e7a4:	4798      	blx	r3
 801e7a6:	4550      	cmp	r0, sl
 801e7a8:	d001      	beq.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e7aa:	42b8      	cmp	r0, r7
 801e7ac:	d1c8      	bne.n	801e740 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801e7ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7b0:	464d      	mov	r5, r9
 801e7b2:	3301      	adds	r3, #1
 801e7b4:	930c      	str	r3, [sp, #48]	; 0x30
 801e7b6:	e797      	b.n	801e6e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801e7b8:	2d00      	cmp	r5, #0
 801e7ba:	f000 80aa 	beq.w	801e912 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801e7be:	f1bb 0f00 	cmp.w	fp, #0
 801e7c2:	d118      	bne.n	801e7f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801e7c4:	6830      	ldr	r0, [r6, #0]
 801e7c6:	4629      	mov	r1, r5
 801e7c8:	6803      	ldr	r3, [r0, #0]
 801e7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e7cc:	4798      	blx	r3
 801e7ce:	4404      	add	r4, r0
 801e7d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e7d4:	1ae3      	subs	r3, r4, r3
 801e7d6:	4293      	cmp	r3, r2
 801e7d8:	dd17      	ble.n	801e80a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e7da:	464d      	mov	r5, r9
 801e7dc:	2d00      	cmp	r5, #0
 801e7de:	f000 8096 	beq.w	801e90e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e7e2:	2d0a      	cmp	r5, #10
 801e7e4:	f040 8084 	bne.w	801e8f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801e7e8:	250a      	movs	r5, #10
 801e7ea:	fab5 f085 	clz	r0, r5
 801e7ee:	0940      	lsrs	r0, r0, #5
 801e7f0:	b01d      	add	sp, #116	; 0x74
 801e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7f6:	6830      	ldr	r0, [r6, #0]
 801e7f8:	4629      	mov	r1, r5
 801e7fa:	6803      	ldr	r3, [r0, #0]
 801e7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e7fe:	4798      	blx	r3
 801e800:	f1bb 0f01 	cmp.w	fp, #1
 801e804:	eba4 0400 	sub.w	r4, r4, r0
 801e808:	d0b1      	beq.n	801e76e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801e80a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e80c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e80e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801e812:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e816:	7b43      	ldrb	r3, [r0, #13]
 801e818:	4421      	add	r1, r4
 801e81a:	015b      	lsls	r3, r3, #5
 801e81c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e820:	7983      	ldrb	r3, [r0, #6]
 801e822:	4313      	orrs	r3, r2
 801e824:	440b      	add	r3, r1
 801e826:	42ab      	cmp	r3, r5
 801e828:	dbc1      	blt.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e82a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e82c:	4299      	cmp	r1, r3
 801e82e:	dabe      	bge.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e830:	6830      	ldr	r0, [r6, #0]
 801e832:	42a5      	cmp	r5, r4
 801e834:	6803      	ldr	r3, [r0, #0]
 801e836:	bfcc      	ite	gt
 801e838:	1b2d      	subgt	r5, r5, r4
 801e83a:	2500      	movle	r5, #0
 801e83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e83e:	bfc8      	it	gt
 801e840:	b2ad      	uxthgt	r5, r5
 801e842:	4798      	blx	r3
 801e844:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e846:	4935      	ldr	r1, [pc, #212]	; (801e91c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801e848:	7b5a      	ldrb	r2, [r3, #13]
 801e84a:	f893 e008 	ldrb.w	lr, [r3, #8]
 801e84e:	f012 0f40 	tst.w	r2, #64	; 0x40
 801e852:	bf18      	it	ne
 801e854:	468c      	movne	ip, r1
 801e856:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e858:	bf08      	it	eq
 801e85a:	f04f 0c00 	moveq.w	ip, #0
 801e85e:	4408      	add	r0, r1
 801e860:	00d1      	lsls	r1, r2, #3
 801e862:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e866:	ea41 070e 	orr.w	r7, r1, lr
 801e86a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e86c:	ea4c 0707 	orr.w	r7, ip, r7
 801e870:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801e874:	1bc7      	subs	r7, r0, r7
 801e876:	b2bf      	uxth	r7, r7
 801e878:	fa0f fa87 	sxth.w	sl, r7
 801e87c:	4551      	cmp	r1, sl
 801e87e:	dd33      	ble.n	801e8e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801e880:	0112      	lsls	r2, r2, #4
 801e882:	79d8      	ldrb	r0, [r3, #7]
 801e884:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e888:	4302      	orrs	r2, r0
 801e88a:	4492      	add	sl, r2
 801e88c:	4551      	cmp	r1, sl
 801e88e:	dc8e      	bgt.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e890:	1bcf      	subs	r7, r1, r7
 801e892:	468a      	mov	sl, r1
 801e894:	b2bf      	uxth	r7, r7
 801e896:	9317      	str	r3, [sp, #92]	; 0x5c
 801e898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e89a:	6830      	ldr	r0, [r6, #0]
 801e89c:	681a      	ldr	r2, [r3, #0]
 801e89e:	6801      	ldr	r1, [r0, #0]
 801e8a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801e8a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e8a4:	9311      	str	r3, [sp, #68]	; 0x44
 801e8a6:	9216      	str	r2, [sp, #88]	; 0x58
 801e8a8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801e8aa:	4788      	blx	r1
 801e8ac:	79b1      	ldrb	r1, [r6, #6]
 801e8ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e8b0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e8b2:	7bb1      	ldrb	r1, [r6, #14]
 801e8b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e8b6:	910a      	str	r1, [sp, #40]	; 0x28
 801e8b8:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801e8bc:	9109      	str	r1, [sp, #36]	; 0x24
 801e8be:	68b1      	ldr	r1, [r6, #8]
 801e8c0:	9305      	str	r3, [sp, #20]
 801e8c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e8c4:	9206      	str	r2, [sp, #24]
 801e8c6:	e9cd a501 	strd	sl, r5, [sp, #4]
 801e8ca:	4425      	add	r5, r4
 801e8cc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e8d0:	b22d      	sxth	r5, r5
 801e8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8d4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e8d8:	9500      	str	r5, [sp, #0]
 801e8da:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e8dc:	681a      	ldr	r2, [r3, #0]
 801e8de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e8e0:	685b      	ldr	r3, [r3, #4]
 801e8e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e8e4:	47a8      	blx	r5
 801e8e6:	e762      	b.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e8e8:	2700      	movs	r7, #0
 801e8ea:	e7d4      	b.n	801e896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801e8ec:	4690      	mov	r8, r2
 801e8ee:	e75e      	b.n	801e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801e8f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e8f2:	3401      	adds	r4, #1
 801e8f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e8f6:	429c      	cmp	r4, r3
 801e8f8:	f6bf af77 	bge.w	801e7ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801e8fc:	4659      	mov	r1, fp
 801e8fe:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801e900:	f002 f9a4 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e904:	4605      	mov	r5, r0
 801e906:	b110      	cbz	r0, 801e90e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801e908:	280a      	cmp	r0, #10
 801e90a:	d1f2      	bne.n	801e8f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801e90c:	e76c      	b.n	801e7e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801e90e:	2500      	movs	r5, #0
 801e910:	e76b      	b.n	801e7ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801e912:	f1bb 0f00 	cmp.w	fp, #0
 801e916:	f43f af5b 	beq.w	801e7d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801e91a:	e776      	b.n	801e80a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801e91c:	fffffe00 	.word	0xfffffe00

0801e920 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e920:	b530      	push	{r4, r5, lr}
 801e922:	8a44      	ldrh	r4, [r0, #18]
 801e924:	8ac5      	ldrh	r5, [r0, #22]
 801e926:	82c3      	strh	r3, [r0, #22]
 801e928:	442c      	add	r4, r5
 801e92a:	1ae4      	subs	r4, r4, r3
 801e92c:	8b03      	ldrh	r3, [r0, #24]
 801e92e:	8244      	strh	r4, [r0, #18]
 801e930:	8a84      	ldrh	r4, [r0, #20]
 801e932:	4422      	add	r2, r4
 801e934:	440c      	add	r4, r1
 801e936:	1a59      	subs	r1, r3, r1
 801e938:	8342      	strh	r2, [r0, #26]
 801e93a:	8284      	strh	r4, [r0, #20]
 801e93c:	8301      	strh	r1, [r0, #24]
 801e93e:	bd30      	pop	{r4, r5, pc}

0801e940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e944:	7a45      	ldrb	r5, [r0, #9]
 801e946:	b085      	sub	sp, #20
 801e948:	4604      	mov	r4, r0
 801e94a:	4689      	mov	r9, r1
 801e94c:	1eeb      	subs	r3, r5, #3
 801e94e:	b2db      	uxtb	r3, r3
 801e950:	b329      	cbz	r1, 801e99e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801e952:	2b01      	cmp	r3, #1
 801e954:	d921      	bls.n	801e99a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801e956:	1e69      	subs	r1, r5, #1
 801e958:	f1d1 0b00 	rsbs	fp, r1, #0
 801e95c:	eb4b 0b01 	adc.w	fp, fp, r1
 801e960:	1eaa      	subs	r2, r5, #2
 801e962:	2500      	movs	r5, #0
 801e964:	4253      	negs	r3, r2
 801e966:	9500      	str	r5, [sp, #0]
 801e968:	4153      	adcs	r3, r2
 801e96a:	9301      	str	r3, [sp, #4]
 801e96c:	2600      	movs	r6, #0
 801e96e:	f242 080b 	movw	r8, #8203	; 0x200b
 801e972:	8266      	strh	r6, [r4, #18]
 801e974:	82a6      	strh	r6, [r4, #20]
 801e976:	2300      	movs	r3, #0
 801e978:	68e2      	ldr	r2, [r4, #12]
 801e97a:	7a21      	ldrb	r1, [r4, #8]
 801e97c:	9303      	str	r3, [sp, #12]
 801e97e:	ab03      	add	r3, sp, #12
 801e980:	6860      	ldr	r0, [r4, #4]
 801e982:	8827      	ldrh	r7, [r4, #0]
 801e984:	f002 f9a2 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e988:	8020      	strh	r0, [r4, #0]
 801e98a:	b9b0      	cbnz	r0, 801e9ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801e98c:	8b22      	ldrh	r2, [r4, #24]
 801e98e:	2300      	movs	r3, #0
 801e990:	4611      	mov	r1, r2
 801e992:	4620      	mov	r0, r4
 801e994:	f7ff ffc4 	bl	801e920 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e998:	e062      	b.n	801ea60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801e99a:	468b      	mov	fp, r1
 801e99c:	e7e0      	b.n	801e960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801e99e:	2b01      	cmp	r3, #1
 801e9a0:	f105 35ff 	add.w	r5, r5, #4294967295
 801e9a4:	9101      	str	r1, [sp, #4]
 801e9a6:	468b      	mov	fp, r1
 801e9a8:	bf8c      	ite	hi
 801e9aa:	2300      	movhi	r3, #0
 801e9ac:	2301      	movls	r3, #1
 801e9ae:	2d01      	cmp	r5, #1
 801e9b0:	9300      	str	r3, [sp, #0]
 801e9b2:	bf8c      	ite	hi
 801e9b4:	2500      	movhi	r5, #0
 801e9b6:	2501      	movls	r5, #1
 801e9b8:	e7d8      	b.n	801e96c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801e9ba:	8ae3      	ldrh	r3, [r4, #22]
 801e9bc:	280a      	cmp	r0, #10
 801e9be:	f103 0301 	add.w	r3, r3, #1
 801e9c2:	82e3      	strh	r3, [r4, #22]
 801e9c4:	d0e2      	beq.n	801e98c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801e9c6:	9a03      	ldr	r2, [sp, #12]
 801e9c8:	b972      	cbnz	r2, 801e9e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801e9ca:	4540      	cmp	r0, r8
 801e9cc:	d1d3      	bne.n	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801e9ce:	8823      	ldrh	r3, [r4, #0]
 801e9d0:	8b21      	ldrh	r1, [r4, #24]
 801e9d2:	2b20      	cmp	r3, #32
 801e9d4:	d001      	beq.n	801e9da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801e9d6:	4543      	cmp	r3, r8
 801e9d8:	d11d      	bne.n	801ea16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801e9da:	2f20      	cmp	r7, #32
 801e9dc:	d002      	beq.n	801e9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801e9de:	4547      	cmp	r7, r8
 801e9e0:	bf18      	it	ne
 801e9e2:	460e      	movne	r6, r1
 801e9e4:	2001      	movs	r0, #1
 801e9e6:	e017      	b.n	801ea18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801e9e8:	4540      	cmp	r0, r8
 801e9ea:	d012      	beq.n	801ea12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801e9ec:	8893      	ldrh	r3, [r2, #4]
 801e9ee:	4639      	mov	r1, r7
 801e9f0:	8023      	strh	r3, [r4, #0]
 801e9f2:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801e9f6:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801e9fa:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801e9fe:	ea4a 0a00 	orr.w	sl, sl, r0
 801ea02:	68e0      	ldr	r0, [r4, #12]
 801ea04:	6803      	ldr	r3, [r0, #0]
 801ea06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea08:	4798      	blx	r3
 801ea0a:	eb0a 0200 	add.w	r2, sl, r0
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	e7dd      	b.n	801e9ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801ea12:	2200      	movs	r2, #0
 801ea14:	e7db      	b.n	801e9ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801ea16:	2000      	movs	r0, #0
 801ea18:	440a      	add	r2, r1
 801ea1a:	8aa3      	ldrh	r3, [r4, #20]
 801ea1c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801ea20:	b292      	uxth	r2, r2
 801ea22:	8322      	strh	r2, [r4, #24]
 801ea24:	4413      	add	r3, r2
 801ea26:	f1b9 0f00 	cmp.w	r9, #0
 801ea2a:	d022      	beq.n	801ea72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801ea2c:	f1bb 0f00 	cmp.w	fp, #0
 801ea30:	d102      	bne.n	801ea38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801ea32:	9901      	ldr	r1, [sp, #4]
 801ea34:	b149      	cbz	r1, 801ea4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801ea36:	b140      	cbz	r0, 801ea4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801ea38:	8ba1      	ldrh	r1, [r4, #28]
 801ea3a:	4419      	add	r1, r3
 801ea3c:	458c      	cmp	ip, r1
 801ea3e:	da12      	bge.n	801ea66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801ea40:	8a61      	ldrh	r1, [r4, #18]
 801ea42:	b181      	cbz	r1, 801ea66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801ea44:	4563      	cmp	r3, ip
 801ea46:	dd96      	ble.n	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea48:	e004      	b.n	801ea54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801ea4a:	4563      	cmp	r3, ip
 801ea4c:	dd93      	ble.n	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea4e:	8a63      	ldrh	r3, [r4, #18]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d090      	beq.n	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea54:	2301      	movs	r3, #1
 801ea56:	8ba2      	ldrh	r2, [r4, #28]
 801ea58:	77a3      	strb	r3, [r4, #30]
 801ea5a:	8b63      	ldrh	r3, [r4, #26]
 801ea5c:	4413      	add	r3, r2
 801ea5e:	8363      	strh	r3, [r4, #26]
 801ea60:	b005      	add	sp, #20
 801ea62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea66:	2300      	movs	r3, #0
 801ea68:	4611      	mov	r1, r2
 801ea6a:	4620      	mov	r0, r4
 801ea6c:	f7ff ff58 	bl	801e920 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ea70:	e781      	b.n	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea72:	4563      	cmp	r3, ip
 801ea74:	dd16      	ble.n	801eaa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801ea76:	9b00      	ldr	r3, [sp, #0]
 801ea78:	b113      	cbz	r3, 801ea80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801ea7a:	2301      	movs	r3, #1
 801ea7c:	460a      	mov	r2, r1
 801ea7e:	e787      	b.n	801e990 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801ea80:	2d00      	cmp	r5, #0
 801ea82:	f43f af78 	beq.w	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea86:	2800      	cmp	r0, #0
 801ea88:	f47f af75 	bne.w	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801ea8c:	2f20      	cmp	r7, #32
 801ea8e:	d001      	beq.n	801ea94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801ea90:	4547      	cmp	r7, r8
 801ea92:	d102      	bne.n	801ea9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801ea94:	2301      	movs	r3, #1
 801ea96:	4632      	mov	r2, r6
 801ea98:	e77b      	b.n	801e992 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801ea9a:	8a63      	ldrh	r3, [r4, #18]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	f43f af6a 	beq.w	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801eaa2:	e7dd      	b.n	801ea60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801eaa4:	2800      	cmp	r0, #0
 801eaa6:	f47f af66 	bne.w	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801eaaa:	2f20      	cmp	r7, #32
 801eaac:	d002      	beq.n	801eab4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801eaae:	4547      	cmp	r7, r8
 801eab0:	f47f af61 	bne.w	801e976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801eab4:	2301      	movs	r3, #1
 801eab6:	4632      	mov	r2, r6
 801eab8:	e7d7      	b.n	801ea6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801eaba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801eaba:	b570      	push	{r4, r5, r6, lr}
 801eabc:	4606      	mov	r6, r0
 801eabe:	b08a      	sub	sp, #40	; 0x28
 801eac0:	4615      	mov	r5, r2
 801eac2:	b191      	cbz	r1, 801eaea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801eac4:	2401      	movs	r4, #1
 801eac6:	e9cd 3100 	strd	r3, r1, [sp]
 801eaca:	4613      	mov	r3, r2
 801eacc:	4601      	mov	r1, r0
 801eace:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801ead2:	a802      	add	r0, sp, #8
 801ead4:	f7ff fd20 	bl	801e518 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ead8:	2100      	movs	r1, #0
 801eada:	a802      	add	r0, sp, #8
 801eadc:	f7ff ff30 	bl	801e940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801eae0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801eae4:	b173      	cbz	r3, 801eb04 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801eae6:	3401      	adds	r4, #1
 801eae8:	e7f6      	b.n	801ead8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801eaea:	2401      	movs	r4, #1
 801eaec:	4611      	mov	r1, r2
 801eaee:	f002 f8ad 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eaf2:	280a      	cmp	r0, #10
 801eaf4:	4629      	mov	r1, r5
 801eaf6:	4630      	mov	r0, r6
 801eaf8:	bf08      	it	eq
 801eafa:	3401      	addeq	r4, #1
 801eafc:	f002 f8a6 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eb00:	2800      	cmp	r0, #0
 801eb02:	d1f6      	bne.n	801eaf2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801eb04:	b2a0      	uxth	r0, r4
 801eb06:	b00a      	add	sp, #40	; 0x28
 801eb08:	bd70      	pop	{r4, r5, r6, pc}

0801eb0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801eb0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb0e:	b0db      	sub	sp, #364	; 0x16c
 801eb10:	468a      	mov	sl, r1
 801eb12:	461c      	mov	r4, r3
 801eb14:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801eb18:	9009      	str	r0, [sp, #36]	; 0x24
 801eb1a:	f1bb 0f00 	cmp.w	fp, #0
 801eb1e:	f000 80c7 	beq.w	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	f000 80c3 	beq.w	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801eb2a:	7ba3      	ldrb	r3, [r4, #14]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	f000 80bf 	beq.w	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801eb32:	af0c      	add	r7, sp, #48	; 0x30
 801eb34:	6810      	ldr	r0, [r2, #0]
 801eb36:	6851      	ldr	r1, [r2, #4]
 801eb38:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801eb3c:	463b      	mov	r3, r7
 801eb3e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801eb42:	c303      	stmia	r3!, {r0, r1}
 801eb44:	2100      	movs	r1, #0
 801eb46:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801eb4a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801eb4e:	4638      	mov	r0, r7
 801eb50:	910e      	str	r1, [sp, #56]	; 0x38
 801eb52:	a90e      	add	r1, sp, #56	; 0x38
 801eb54:	79a2      	ldrb	r2, [r4, #6]
 801eb56:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801eb5a:	f7ff fd49 	bl	801e5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801eb5e:	a90e      	add	r1, sp, #56	; 0x38
 801eb60:	79a2      	ldrb	r2, [r4, #6]
 801eb62:	4608      	mov	r0, r1
 801eb64:	f7ff fd44 	bl	801e5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801eb68:	4648      	mov	r0, r9
 801eb6a:	f001 ff2d 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801eb6e:	6820      	ldr	r0, [r4, #0]
 801eb70:	6803      	ldr	r3, [r0, #0]
 801eb72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eb74:	4798      	blx	r3
 801eb76:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801eb78:	4603      	mov	r3, r0
 801eb7a:	4659      	mov	r1, fp
 801eb7c:	4648      	mov	r0, r9
 801eb7e:	f001 ff40 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801eb82:	a82e      	add	r0, sp, #184	; 0xb8
 801eb84:	f001 ff20 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801eb88:	f894 8004 	ldrb.w	r8, [r4, #4]
 801eb8c:	f1b8 0f00 	cmp.w	r8, #0
 801eb90:	d009      	beq.n	801eba6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801eb92:	6820      	ldr	r0, [r4, #0]
 801eb94:	6803      	ldr	r3, [r0, #0]
 801eb96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eb98:	4798      	blx	r3
 801eb9a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	4659      	mov	r1, fp
 801eba0:	a82e      	add	r0, sp, #184	; 0xb8
 801eba2:	f001 ff2e 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801eba6:	6820      	ldr	r0, [r4, #0]
 801eba8:	6803      	ldr	r3, [r0, #0]
 801ebaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ebac:	4798      	blx	r3
 801ebae:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ebb2:	182e      	adds	r6, r5, r0
 801ebb4:	2e00      	cmp	r6, #0
 801ebb6:	dd45      	ble.n	801ec44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801ebb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ebbc:	4283      	cmp	r3, r0
 801ebbe:	db41      	blt.n	801ec44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801ebc0:	441d      	add	r5, r3
 801ebc2:	fb95 f5f6 	sdiv	r5, r5, r6
 801ebc6:	a844      	add	r0, sp, #272	; 0x110
 801ebc8:	f001 fefe 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801ebcc:	7c23      	ldrb	r3, [r4, #16]
 801ebce:	b14b      	cbz	r3, 801ebe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801ebd0:	6820      	ldr	r0, [r4, #0]
 801ebd2:	6803      	ldr	r3, [r0, #0]
 801ebd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ebd6:	4798      	blx	r3
 801ebd8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801ebda:	4603      	mov	r3, r0
 801ebdc:	4659      	mov	r1, fp
 801ebde:	a844      	add	r0, sp, #272	; 0x110
 801ebe0:	f001 ff0f 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ebe4:	7c21      	ldrb	r1, [r4, #16]
 801ebe6:	a810      	add	r0, sp, #64	; 0x40
 801ebe8:	7963      	ldrb	r3, [r4, #5]
 801ebea:	9101      	str	r1, [sp, #4]
 801ebec:	6821      	ldr	r1, [r4, #0]
 801ebee:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ebf2:	9100      	str	r1, [sp, #0]
 801ebf4:	a944      	add	r1, sp, #272	; 0x110
 801ebf6:	f7ff fc8f 	bl	801e518 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ebfa:	7c23      	ldrb	r3, [r4, #16]
 801ebfc:	bb23      	cbnz	r3, 801ec48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801ebfe:	fa1f fb86 	uxth.w	fp, r6
 801ec02:	2d00      	cmp	r5, #0
 801ec04:	dd57      	ble.n	801ecb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801ec06:	7961      	ldrb	r1, [r4, #5]
 801ec08:	4648      	mov	r0, r9
 801ec0a:	f002 f81f 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ec0e:	4603      	mov	r3, r0
 801ec10:	f1b8 0f00 	cmp.w	r8, #0
 801ec14:	d005      	beq.n	801ec22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801ec16:	9008      	str	r0, [sp, #32]
 801ec18:	a82e      	add	r0, sp, #184	; 0xb8
 801ec1a:	7961      	ldrb	r1, [r4, #5]
 801ec1c:	f002 f816 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ec20:	9b08      	ldr	r3, [sp, #32]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d044      	beq.n	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801ec26:	2b0a      	cmp	r3, #10
 801ec28:	d1eb      	bne.n	801ec02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801ec2a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ec2e:	3d01      	subs	r5, #1
 801ec30:	445b      	add	r3, fp
 801ec32:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ec36:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ec3a:	eba3 030b 	sub.w	r3, r3, fp
 801ec3e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ec42:	e7de      	b.n	801ec02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801ec44:	2500      	movs	r5, #0
 801ec46:	e7be      	b.n	801ebc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801ec48:	0073      	lsls	r3, r6, #1
 801ec4a:	9308      	str	r3, [sp, #32]
 801ec4c:	2d00      	cmp	r5, #0
 801ec4e:	dd32      	ble.n	801ecb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801ec50:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ec54:	a810      	add	r0, sp, #64	; 0x40
 801ec56:	9b08      	ldr	r3, [sp, #32]
 801ec58:	428b      	cmp	r3, r1
 801ec5a:	bfd4      	ite	le
 801ec5c:	2100      	movle	r1, #0
 801ec5e:	2101      	movgt	r1, #1
 801ec60:	f7ff fe6e 	bl	801e940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ec64:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801ec68:	f10b 33ff 	add.w	r3, fp, #4294967295
 801ec6c:	fa1f fb83 	uxth.w	fp, r3
 801ec70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ec74:	459b      	cmp	fp, r3
 801ec76:	d00b      	beq.n	801ec90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ec78:	7961      	ldrb	r1, [r4, #5]
 801ec7a:	4648      	mov	r0, r9
 801ec7c:	f001 ffe6 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ec80:	f1b8 0f00 	cmp.w	r8, #0
 801ec84:	d0f0      	beq.n	801ec68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801ec86:	7961      	ldrb	r1, [r4, #5]
 801ec88:	a82e      	add	r0, sp, #184	; 0xb8
 801ec8a:	f001 ffdf 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ec8e:	e7eb      	b.n	801ec68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801ec90:	b2b3      	uxth	r3, r6
 801ec92:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ec96:	3d01      	subs	r5, #1
 801ec98:	441a      	add	r2, r3
 801ec9a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801ec9e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801eca8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d1cd      	bne.n	801ec4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801ecb0:	b05b      	add	sp, #364	; 0x16c
 801ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb6:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801ecba:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801ecbe:	7c23      	ldrb	r3, [r4, #16]
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	d05f      	beq.n	801ed84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801ecc4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801ecc8:	a810      	add	r0, sp, #64	; 0x40
 801ecca:	458b      	cmp	fp, r1
 801eccc:	bfd4      	ite	le
 801ecce:	2100      	movle	r1, #0
 801ecd0:	2101      	movgt	r1, #1
 801ecd2:	f7ff fe35 	bl	801e940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ecd6:	f1b8 0f00 	cmp.w	r8, #0
 801ecda:	d04c      	beq.n	801ed76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801ecdc:	7c23      	ldrb	r3, [r4, #16]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d053      	beq.n	801ed8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801ece2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801ece6:	7922      	ldrb	r2, [r4, #4]
 801ece8:	2a01      	cmp	r2, #1
 801ecea:	d13c      	bne.n	801ed66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801ecec:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801ecf0:	1ac0      	subs	r0, r0, r3
 801ecf2:	2302      	movs	r3, #2
 801ecf4:	fb90 f0f3 	sdiv	r0, r0, r3
 801ecf8:	b200      	sxth	r0, r0
 801ecfa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ecfe:	4418      	add	r0, r3
 801ed00:	7c23      	ldrb	r3, [r4, #16]
 801ed02:	8028      	strh	r0, [r5, #0]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d03a      	beq.n	801ed7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801ed08:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801ed0c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801ed10:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ed14:	f8cd 9010 	str.w	r9, [sp, #16]
 801ed18:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed1a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801ed1e:	2200      	movs	r2, #0
 801ed20:	2100      	movs	r1, #0
 801ed22:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801ed26:	e9cd 5700 	strd	r5, r7, [sp]
 801ed2a:	4652      	mov	r2, sl
 801ed2c:	f7ff fcb2 	bl	801e694 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801ed30:	2800      	cmp	r0, #0
 801ed32:	d1bd      	bne.n	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801ed34:	b2b2      	uxth	r2, r6
 801ed36:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ed3a:	4611      	mov	r1, r2
 801ed3c:	4413      	add	r3, r2
 801ed3e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801ed42:	b21b      	sxth	r3, r3
 801ed44:	1a52      	subs	r2, r2, r1
 801ed46:	7c21      	ldrb	r1, [r4, #16]
 801ed48:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ed4c:	b212      	sxth	r2, r2
 801ed4e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801ed52:	b109      	cbz	r1, 801ed58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801ed54:	42b2      	cmp	r2, r6
 801ed56:	dbab      	blt.n	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801ed58:	887a      	ldrh	r2, [r7, #2]
 801ed5a:	88f9      	ldrh	r1, [r7, #6]
 801ed5c:	440a      	add	r2, r1
 801ed5e:	b212      	sxth	r2, r2
 801ed60:	4293      	cmp	r3, r2
 801ed62:	ddac      	ble.n	801ecbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801ed64:	e7a4      	b.n	801ecb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801ed66:	2a02      	cmp	r2, #2
 801ed68:	d107      	bne.n	801ed7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801ed6a:	7be2      	ldrb	r2, [r4, #15]
 801ed6c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801ed70:	1a80      	subs	r0, r0, r2
 801ed72:	1ac0      	subs	r0, r0, r3
 801ed74:	e7c0      	b.n	801ecf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801ed76:	7be0      	ldrb	r0, [r4, #15]
 801ed78:	e7bf      	b.n	801ecfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801ed7a:	2000      	movs	r0, #0
 801ed7c:	e7bd      	b.n	801ecfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801ed7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ed82:	e7c3      	b.n	801ed0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801ed84:	f1b8 0f00 	cmp.w	r8, #0
 801ed88:	d0f5      	beq.n	801ed76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ed90:	6821      	ldr	r1, [r4, #0]
 801ed92:	a82e      	add	r0, sp, #184	; 0xb8
 801ed94:	f7ff fbfa 	bl	801e58c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ed98:	b203      	sxth	r3, r0
 801ed9a:	e7a4      	b.n	801ece6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801ed9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ed9c:	2b02      	cmp	r3, #2
 801ed9e:	b510      	push	{r4, lr}
 801eda0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801eda4:	d00b      	beq.n	801edbe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801eda6:	2b03      	cmp	r3, #3
 801eda8:	d00e      	beq.n	801edc8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801edaa:	2b01      	cmp	r3, #1
 801edac:	d001      	beq.n	801edb2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801edae:	1860      	adds	r0, r4, r1
 801edb0:	bd10      	pop	{r4, pc}
 801edb2:	8880      	ldrh	r0, [r0, #4]
 801edb4:	4420      	add	r0, r4
 801edb6:	b200      	sxth	r0, r0
 801edb8:	1a80      	subs	r0, r0, r2
 801edba:	3801      	subs	r0, #1
 801edbc:	e7f8      	b.n	801edb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801edbe:	8880      	ldrh	r0, [r0, #4]
 801edc0:	4420      	add	r0, r4
 801edc2:	b200      	sxth	r0, r0
 801edc4:	1a40      	subs	r0, r0, r1
 801edc6:	e7f8      	b.n	801edba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801edc8:	18a0      	adds	r0, r4, r2
 801edca:	e7f1      	b.n	801edb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801edcc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801edcc:	2b02      	cmp	r3, #2
 801edce:	b510      	push	{r4, lr}
 801edd0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801edd4:	d006      	beq.n	801ede4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801edd6:	2b03      	cmp	r3, #3
 801edd8:	d00a      	beq.n	801edf0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801edda:	2b01      	cmp	r3, #1
 801eddc:	bf14      	ite	ne
 801edde:	18a0      	addne	r0, r4, r2
 801ede0:	1860      	addeq	r0, r4, r1
 801ede2:	bd10      	pop	{r4, pc}
 801ede4:	88c0      	ldrh	r0, [r0, #6]
 801ede6:	4420      	add	r0, r4
 801ede8:	b200      	sxth	r0, r0
 801edea:	1a80      	subs	r0, r0, r2
 801edec:	3801      	subs	r0, #1
 801edee:	e7f8      	b.n	801ede2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801edf0:	88c0      	ldrh	r0, [r0, #6]
 801edf2:	4420      	add	r0, r4
 801edf4:	b200      	sxth	r0, r0
 801edf6:	1a40      	subs	r0, r0, r1
 801edf8:	e7f8      	b.n	801edec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801edfc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801edfc:	4b01      	ldr	r3, [pc, #4]	; (801ee04 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801edfe:	2200      	movs	r2, #0
 801ee00:	601a      	str	r2, [r3, #0]
 801ee02:	4770      	bx	lr
 801ee04:	2000bff8 	.word	0x2000bff8

0801ee08 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801ee08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee0a:	1e05      	subs	r5, r0, #0
 801ee0c:	f04f 0601 	mov.w	r6, #1
 801ee10:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ee14:	bfba      	itte	lt
 801ee16:	f04f 37ff 	movlt.w	r7, #4294967295
 801ee1a:	426d      	neglt	r5, r5
 801ee1c:	2701      	movge	r7, #1
 801ee1e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801ee22:	f1be 0f00 	cmp.w	lr, #0
 801ee26:	bfbc      	itt	lt
 801ee28:	f1ce 0e00 	rsblt	lr, lr, #0
 801ee2c:	427f      	neglt	r7, r7
 801ee2e:	2c00      	cmp	r4, #0
 801ee30:	fa4e f001 	asr.w	r0, lr, r1
 801ee34:	fa06 f101 	lsl.w	r1, r6, r1
 801ee38:	bfbc      	itt	lt
 801ee3a:	4264      	neglt	r4, r4
 801ee3c:	427f      	neglt	r7, r7
 801ee3e:	3901      	subs	r1, #1
 801ee40:	ea01 010e 	and.w	r1, r1, lr
 801ee44:	434d      	muls	r5, r1
 801ee46:	f8dc 1000 	ldr.w	r1, [ip]
 801ee4a:	fb03 1300 	mla	r3, r3, r0, r1
 801ee4e:	fb95 f1f4 	sdiv	r1, r5, r4
 801ee52:	fb04 5511 	mls	r5, r4, r1, r5
 801ee56:	441d      	add	r5, r3
 801ee58:	fb95 f3f4 	sdiv	r3, r5, r4
 801ee5c:	4419      	add	r1, r3
 801ee5e:	fb04 5413 	mls	r4, r4, r3, r5
 801ee62:	fb02 1000 	mla	r0, r2, r0, r1
 801ee66:	f8cc 4000 	str.w	r4, [ip]
 801ee6a:	4378      	muls	r0, r7
 801ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ee70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee74:	4c24      	ldr	r4, [pc, #144]	; (801ef08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801ee76:	b086      	sub	sp, #24
 801ee78:	4605      	mov	r5, r0
 801ee7a:	6807      	ldr	r7, [r0, #0]
 801ee7c:	69a3      	ldr	r3, [r4, #24]
 801ee7e:	b92b      	cbnz	r3, 801ee8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801ee80:	6840      	ldr	r0, [r0, #4]
 801ee82:	e9c5 7000 	strd	r7, r0, [r5]
 801ee86:	b006      	add	sp, #24
 801ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee8c:	f04f 0802 	mov.w	r8, #2
 801ee90:	68a2      	ldr	r2, [r4, #8]
 801ee92:	ae06      	add	r6, sp, #24
 801ee94:	6820      	ldr	r0, [r4, #0]
 801ee96:	fb93 f1f8 	sdiv	r1, r3, r8
 801ee9a:	440a      	add	r2, r1
 801ee9c:	69e1      	ldr	r1, [r4, #28]
 801ee9e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801eea2:	9700      	str	r7, [sp, #0]
 801eea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801eea6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801eeaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eeac:	f7ff ffac 	bl	801ee08 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801eeb0:	69a3      	ldr	r3, [r4, #24]
 801eeb2:	4607      	mov	r7, r0
 801eeb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801eeb6:	9301      	str	r3, [sp, #4]
 801eeb8:	686b      	ldr	r3, [r5, #4]
 801eeba:	6a21      	ldr	r1, [r4, #32]
 801eebc:	9300      	str	r3, [sp, #0]
 801eebe:	9602      	str	r6, [sp, #8]
 801eec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eec2:	6860      	ldr	r0, [r4, #4]
 801eec4:	f7ff ffa0 	bl	801ee08 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801eec8:	69a2      	ldr	r2, [r4, #24]
 801eeca:	6963      	ldr	r3, [r4, #20]
 801eecc:	4407      	add	r7, r0
 801eece:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801eed0:	68e0      	ldr	r0, [r4, #12]
 801eed2:	fb92 f8f8 	sdiv	r8, r2, r8
 801eed6:	4443      	add	r3, r8
 801eed8:	9305      	str	r3, [sp, #20]
 801eeda:	682b      	ldr	r3, [r5, #0]
 801eedc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801eee0:	9300      	str	r3, [sp, #0]
 801eee2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801eee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801eee6:	f7ff ff8f 	bl	801ee08 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801eeea:	69a3      	ldr	r3, [r4, #24]
 801eeec:	4680      	mov	r8, r0
 801eeee:	9602      	str	r6, [sp, #8]
 801eef0:	9301      	str	r3, [sp, #4]
 801eef2:	686b      	ldr	r3, [r5, #4]
 801eef4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801eef6:	9300      	str	r3, [sp, #0]
 801eef8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801eefa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801eefc:	6920      	ldr	r0, [r4, #16]
 801eefe:	f7ff ff83 	bl	801ee08 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ef02:	4440      	add	r0, r8
 801ef04:	e7bd      	b.n	801ee82 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801ef06:	bf00      	nop
 801ef08:	2000bffc 	.word	0x2000bffc

0801ef0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ef0c:	4b07      	ldr	r3, [pc, #28]	; (801ef2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ef0e:	b510      	push	{r4, lr}
 801ef10:	781b      	ldrb	r3, [r3, #0]
 801ef12:	2b01      	cmp	r3, #1
 801ef14:	d108      	bne.n	801ef28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ef16:	4b06      	ldr	r3, [pc, #24]	; (801ef30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ef18:	880c      	ldrh	r4, [r1, #0]
 801ef1a:	881b      	ldrh	r3, [r3, #0]
 801ef1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ef20:	3b01      	subs	r3, #1
 801ef22:	1b1b      	subs	r3, r3, r4
 801ef24:	8003      	strh	r3, [r0, #0]
 801ef26:	800a      	strh	r2, [r1, #0]
 801ef28:	bd10      	pop	{r4, pc}
 801ef2a:	bf00      	nop
 801ef2c:	2000bfc6 	.word	0x2000bfc6
 801ef30:	2000bfca 	.word	0x2000bfca

0801ef34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ef34:	4b0a      	ldr	r3, [pc, #40]	; (801ef60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ef36:	b510      	push	{r4, lr}
 801ef38:	781b      	ldrb	r3, [r3, #0]
 801ef3a:	2b01      	cmp	r3, #1
 801ef3c:	d10e      	bne.n	801ef5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ef3e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ef42:	8843      	ldrh	r3, [r0, #2]
 801ef44:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ef48:	18ca      	adds	r2, r1, r3
 801ef4a:	4b06      	ldr	r3, [pc, #24]	; (801ef64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ef4c:	8044      	strh	r4, [r0, #2]
 801ef4e:	881b      	ldrh	r3, [r3, #0]
 801ef50:	1a9b      	subs	r3, r3, r2
 801ef52:	8003      	strh	r3, [r0, #0]
 801ef54:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ef58:	8081      	strh	r1, [r0, #4]
 801ef5a:	80c3      	strh	r3, [r0, #6]
 801ef5c:	bd10      	pop	{r4, pc}
 801ef5e:	bf00      	nop
 801ef60:	2000bfc6 	.word	0x2000bfc6
 801ef64:	2000bfc2 	.word	0x2000bfc2

0801ef68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ef68:	4b07      	ldr	r3, [pc, #28]	; (801ef88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ef6a:	b510      	push	{r4, lr}
 801ef6c:	781b      	ldrb	r3, [r3, #0]
 801ef6e:	2b01      	cmp	r3, #1
 801ef70:	d108      	bne.n	801ef84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ef72:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ef76:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ef7a:	8003      	strh	r3, [r0, #0]
 801ef7c:	8893      	ldrh	r3, [r2, #4]
 801ef7e:	3b01      	subs	r3, #1
 801ef80:	1b1b      	subs	r3, r3, r4
 801ef82:	800b      	strh	r3, [r1, #0]
 801ef84:	bd10      	pop	{r4, pc}
 801ef86:	bf00      	nop
 801ef88:	2000bfc6 	.word	0x2000bfc6

0801ef8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ef8c:	4b08      	ldr	r3, [pc, #32]	; (801efb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ef8e:	b513      	push	{r0, r1, r4, lr}
 801ef90:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef94:	2400      	movs	r4, #0
 801ef96:	4b07      	ldr	r3, [pc, #28]	; (801efb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801ef98:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ef9c:	466a      	mov	r2, sp
 801ef9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801efa2:	9400      	str	r4, [sp, #0]
 801efa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801efa8:	f7ff ffde 	bl	801ef68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801efac:	b002      	add	sp, #8
 801efae:	bd10      	pop	{r4, pc}
 801efb0:	2000bfc2 	.word	0x2000bfc2
 801efb4:	2000bfc4 	.word	0x2000bfc4

0801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801efb8:	4b0a      	ldr	r3, [pc, #40]	; (801efe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801efba:	460a      	mov	r2, r1
 801efbc:	b510      	push	{r4, lr}
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	2b01      	cmp	r3, #1
 801efc2:	d10d      	bne.n	801efe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801efc4:	8881      	ldrh	r1, [r0, #4]
 801efc6:	8803      	ldrh	r3, [r0, #0]
 801efc8:	440b      	add	r3, r1
 801efca:	4601      	mov	r1, r0
 801efcc:	3b01      	subs	r3, #1
 801efce:	f821 3b02 	strh.w	r3, [r1], #2
 801efd2:	f7ff ffc9 	bl	801ef68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801efd6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801efda:	88c2      	ldrh	r2, [r0, #6]
 801efdc:	80c3      	strh	r3, [r0, #6]
 801efde:	8082      	strh	r2, [r0, #4]
 801efe0:	bd10      	pop	{r4, pc}
 801efe2:	bf00      	nop
 801efe4:	2000bfc6 	.word	0x2000bfc6

0801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801efe8:	4b09      	ldr	r3, [pc, #36]	; (801f010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801efea:	b507      	push	{r0, r1, r2, lr}
 801efec:	2100      	movs	r1, #0
 801efee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eff2:	4b08      	ldr	r3, [pc, #32]	; (801f014 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801eff4:	9100      	str	r1, [sp, #0]
 801eff6:	4669      	mov	r1, sp
 801eff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801effc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f000:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f004:	f7ff ffd8 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f008:	b003      	add	sp, #12
 801f00a:	f85d fb04 	ldr.w	pc, [sp], #4
 801f00e:	bf00      	nop
 801f010:	2000bfc2 	.word	0x2000bfc2
 801f014:	2000bfc4 	.word	0x2000bfc4

0801f018 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801f018:	4b03      	ldr	r3, [pc, #12]	; (801f028 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801f01a:	6818      	ldr	r0, [r3, #0]
 801f01c:	b110      	cbz	r0, 801f024 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801f01e:	6803      	ldr	r3, [r0, #0]
 801f020:	699b      	ldr	r3, [r3, #24]
 801f022:	4718      	bx	r3
 801f024:	4770      	bx	lr
 801f026:	bf00      	nop
 801f028:	2000c04c 	.word	0x2000c04c

0801f02c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801f02c:	4770      	bx	lr
	...

0801f030 <_ZN8touchgfx11Application4drawEv>:
 801f030:	4b09      	ldr	r3, [pc, #36]	; (801f058 <_ZN8touchgfx11Application4drawEv+0x28>)
 801f032:	b507      	push	{r0, r1, r2, lr}
 801f034:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f038:	2100      	movs	r1, #0
 801f03a:	4b08      	ldr	r3, [pc, #32]	; (801f05c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801f03c:	9100      	str	r1, [sp, #0]
 801f03e:	4669      	mov	r1, sp
 801f040:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f044:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f048:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f04c:	6803      	ldr	r3, [r0, #0]
 801f04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f050:	4798      	blx	r3
 801f052:	b003      	add	sp, #12
 801f054:	f85d fb04 	ldr.w	pc, [sp], #4
 801f058:	2000bfc2 	.word	0x2000bfc2
 801f05c:	2000bfc4 	.word	0x2000bfc4

0801f060 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801f060:	4b03      	ldr	r3, [pc, #12]	; (801f070 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801f062:	6818      	ldr	r0, [r3, #0]
 801f064:	b110      	cbz	r0, 801f06c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	69db      	ldr	r3, [r3, #28]
 801f06a:	4718      	bx	r3
 801f06c:	4770      	bx	lr
 801f06e:	bf00      	nop
 801f070:	2000c04c 	.word	0x2000c04c

0801f074 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801f074:	4b03      	ldr	r3, [pc, #12]	; (801f084 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801f076:	6818      	ldr	r0, [r3, #0]
 801f078:	b110      	cbz	r0, 801f080 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801f07a:	6803      	ldr	r3, [r0, #0]
 801f07c:	6a1b      	ldr	r3, [r3, #32]
 801f07e:	4718      	bx	r3
 801f080:	4770      	bx	lr
 801f082:	bf00      	nop
 801f084:	2000c04c 	.word	0x2000c04c

0801f088 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801f088:	4b03      	ldr	r3, [pc, #12]	; (801f098 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801f08a:	6818      	ldr	r0, [r3, #0]
 801f08c:	b110      	cbz	r0, 801f094 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801f08e:	6803      	ldr	r3, [r0, #0]
 801f090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f092:	4718      	bx	r3
 801f094:	4770      	bx	lr
 801f096:	bf00      	nop
 801f098:	2000c04c 	.word	0x2000c04c

0801f09c <_ZN8touchgfx11Application15handleTickEventEv>:
 801f09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0a0:	4d3a      	ldr	r5, [pc, #232]	; (801f18c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801f0a2:	4604      	mov	r4, r0
 801f0a4:	6828      	ldr	r0, [r5, #0]
 801f0a6:	b140      	cbz	r0, 801f0ba <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801f0a8:	7a03      	ldrb	r3, [r0, #8]
 801f0aa:	b933      	cbnz	r3, 801f0ba <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801f0ac:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801f0b0:	6803      	ldr	r3, [r0, #0]
 801f0b2:	689b      	ldr	r3, [r3, #8]
 801f0b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0b8:	4718      	bx	r3
 801f0ba:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801f0be:	b97b      	cbnz	r3, 801f0e0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801f0c0:	b170      	cbz	r0, 801f0e0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801f0c2:	7a03      	ldrb	r3, [r0, #8]
 801f0c4:	b163      	cbz	r3, 801f0e0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801f0c6:	4b32      	ldr	r3, [pc, #200]	; (801f190 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801f0c8:	6818      	ldr	r0, [r3, #0]
 801f0ca:	b110      	cbz	r0, 801f0d2 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801f0cc:	6803      	ldr	r3, [r0, #0]
 801f0ce:	691b      	ldr	r3, [r3, #16]
 801f0d0:	4798      	blx	r3
 801f0d2:	6828      	ldr	r0, [r5, #0]
 801f0d4:	6803      	ldr	r3, [r0, #0]
 801f0d6:	68db      	ldr	r3, [r3, #12]
 801f0d8:	4798      	blx	r3
 801f0da:	2301      	movs	r3, #1
 801f0dc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801f0e0:	2500      	movs	r5, #0
 801f0e2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801f0e6:	42a8      	cmp	r0, r5
 801f0e8:	dd0c      	ble.n	801f104 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801f0ea:	1963      	adds	r3, r4, r5
 801f0ec:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801f0f0:	b132      	cbz	r2, 801f100 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801f0f2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f0f6:	4413      	add	r3, r2
 801f0f8:	6858      	ldr	r0, [r3, #4]
 801f0fa:	6803      	ldr	r3, [r0, #0]
 801f0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f0fe:	4798      	blx	r3
 801f100:	3501      	adds	r5, #1
 801f102:	e7ee      	b.n	801f0e2 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801f104:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801f108:	3801      	subs	r0, #1
 801f10a:	f04f 0c00 	mov.w	ip, #0
 801f10e:	3678      	adds	r6, #120	; 0x78
 801f110:	1c43      	adds	r3, r0, #1
 801f112:	d033      	beq.n	801f17c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801f114:	1823      	adds	r3, r4, r0
 801f116:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801f11a:	bb6a      	cbnz	r2, 801f178 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801f11c:	b281      	uxth	r1, r0
 801f11e:	1d25      	adds	r5, r4, #4
 801f120:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801f124:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801f128:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801f12c:	4293      	cmp	r3, r2
 801f12e:	dc0a      	bgt.n	801f146 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801f130:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801f134:	4422      	add	r2, r4
 801f136:	18b1      	adds	r1, r6, r2
 801f138:	b289      	uxth	r1, r1
 801f13a:	428b      	cmp	r3, r1
 801f13c:	d919      	bls.n	801f172 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801f13e:	7851      	ldrb	r1, [r2, #1]
 801f140:	f802 1b01 	strb.w	r1, [r2], #1
 801f144:	e7f7      	b.n	801f136 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801f146:	682f      	ldr	r7, [r5, #0]
 801f148:	f105 0804 	add.w	r8, r5, #4
 801f14c:	45b9      	cmp	r9, r7
 801f14e:	d10d      	bne.n	801f16c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801f150:	4696      	mov	lr, r2
 801f152:	f1be 0f1e 	cmp.w	lr, #30
 801f156:	dc06      	bgt.n	801f166 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801f158:	f10e 0e01 	add.w	lr, lr, #1
 801f15c:	686f      	ldr	r7, [r5, #4]
 801f15e:	4573      	cmp	r3, lr
 801f160:	f845 7b04 	str.w	r7, [r5], #4
 801f164:	dcf5      	bgt.n	801f152 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801f166:	3b01      	subs	r3, #1
 801f168:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801f16c:	3201      	adds	r2, #1
 801f16e:	4645      	mov	r5, r8
 801f170:	e7da      	b.n	801f128 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801f172:	4423      	add	r3, r4
 801f174:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801f178:	3801      	subs	r0, #1
 801f17a:	e7c9      	b.n	801f110 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801f17c:	4b04      	ldr	r3, [pc, #16]	; (801f190 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801f17e:	6818      	ldr	r0, [r3, #0]
 801f180:	b110      	cbz	r0, 801f188 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801f182:	6803      	ldr	r3, [r0, #0]
 801f184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f186:	e795      	b.n	801f0b4 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801f188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f18c:	2000c050 	.word	0x2000c050
 801f190:	2000c04c 	.word	0x2000c04c

0801f194 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801f194:	b570      	push	{r4, r5, r6, lr}
 801f196:	4606      	mov	r6, r0
 801f198:	460c      	mov	r4, r1
 801f19a:	b929      	cbnz	r1, 801f1a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801f19c:	4b0c      	ldr	r3, [pc, #48]	; (801f1d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801f19e:	2164      	movs	r1, #100	; 0x64
 801f1a0:	4a0c      	ldr	r2, [pc, #48]	; (801f1d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801f1a2:	480d      	ldr	r0, [pc, #52]	; (801f1d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801f1a4:	f00c f88e 	bl	802b2c4 <__assert_func>
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	4d0c      	ldr	r5, [pc, #48]	; (801f1dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801f1ac:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801f1b0:	6828      	ldr	r0, [r5, #0]
 801f1b2:	b110      	cbz	r0, 801f1ba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801f1b4:	6803      	ldr	r3, [r0, #0]
 801f1b6:	695b      	ldr	r3, [r3, #20]
 801f1b8:	4798      	blx	r3
 801f1ba:	602c      	str	r4, [r5, #0]
 801f1bc:	4620      	mov	r0, r4
 801f1be:	6823      	ldr	r3, [r4, #0]
 801f1c0:	68db      	ldr	r3, [r3, #12]
 801f1c2:	4798      	blx	r3
 801f1c4:	6833      	ldr	r3, [r6, #0]
 801f1c6:	4630      	mov	r0, r6
 801f1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1ce:	4718      	bx	r3
 801f1d0:	0802fe40 	.word	0x0802fe40
 801f1d4:	0802ff08 	.word	0x0802ff08
 801f1d8:	0802fe4a 	.word	0x0802fe4a
 801f1dc:	2000c04c 	.word	0x2000c04c

0801f1e0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801f1e0:	b510      	push	{r4, lr}
 801f1e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f1e6:	888a      	ldrh	r2, [r1, #4]
 801f1e8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f1ec:	4422      	add	r2, r4
 801f1ee:	b212      	sxth	r2, r2
 801f1f0:	4293      	cmp	r3, r2
 801f1f2:	da15      	bge.n	801f220 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f1f4:	8882      	ldrh	r2, [r0, #4]
 801f1f6:	4413      	add	r3, r2
 801f1f8:	b21b      	sxth	r3, r3
 801f1fa:	429c      	cmp	r4, r3
 801f1fc:	da10      	bge.n	801f220 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f1fe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801f202:	88c9      	ldrh	r1, [r1, #6]
 801f204:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f208:	4419      	add	r1, r3
 801f20a:	b209      	sxth	r1, r1
 801f20c:	428a      	cmp	r2, r1
 801f20e:	da07      	bge.n	801f220 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801f210:	88c0      	ldrh	r0, [r0, #6]
 801f212:	4410      	add	r0, r2
 801f214:	b200      	sxth	r0, r0
 801f216:	4283      	cmp	r3, r0
 801f218:	bfac      	ite	ge
 801f21a:	2000      	movge	r0, #0
 801f21c:	2001      	movlt	r0, #1
 801f21e:	bd10      	pop	{r4, pc}
 801f220:	2000      	movs	r0, #0
 801f222:	e7fc      	b.n	801f21e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801f224 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801f224:	b570      	push	{r4, r5, r6, lr}
 801f226:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f22a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801f22e:	42ac      	cmp	r4, r5
 801f230:	db18      	blt.n	801f264 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f232:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801f236:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f23a:	429a      	cmp	r2, r3
 801f23c:	db12      	blt.n	801f264 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f23e:	8886      	ldrh	r6, [r0, #4]
 801f240:	4435      	add	r5, r6
 801f242:	888e      	ldrh	r6, [r1, #4]
 801f244:	4434      	add	r4, r6
 801f246:	b22d      	sxth	r5, r5
 801f248:	b224      	sxth	r4, r4
 801f24a:	42a5      	cmp	r5, r4
 801f24c:	db0a      	blt.n	801f264 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801f24e:	88c0      	ldrh	r0, [r0, #6]
 801f250:	4418      	add	r0, r3
 801f252:	88cb      	ldrh	r3, [r1, #6]
 801f254:	441a      	add	r2, r3
 801f256:	b200      	sxth	r0, r0
 801f258:	b212      	sxth	r2, r2
 801f25a:	4290      	cmp	r0, r2
 801f25c:	bfb4      	ite	lt
 801f25e:	2000      	movlt	r0, #0
 801f260:	2001      	movge	r0, #1
 801f262:	bd70      	pop	{r4, r5, r6, pc}
 801f264:	2000      	movs	r0, #0
 801f266:	e7fc      	b.n	801f262 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801f268 <_ZN8touchgfx11Application11getInstanceEv>:
 801f268:	4b01      	ldr	r3, [pc, #4]	; (801f270 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801f26a:	6818      	ldr	r0, [r3, #0]
 801f26c:	4770      	bx	lr
 801f26e:	bf00      	nop
 801f270:	2000c05c 	.word	0x2000c05c

0801f274 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801f274:	2300      	movs	r3, #0
 801f276:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801f27a:	30a8      	adds	r0, #168	; 0xa8
 801f27c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801f280:	f802 3b01 	strb.w	r3, [r2], #1
 801f284:	4282      	cmp	r2, r0
 801f286:	d1fb      	bne.n	801f280 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801f288:	4770      	bx	lr

0801f28a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801f28a:	4603      	mov	r3, r0
 801f28c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801f290:	2200      	movs	r2, #0
 801f292:	801a      	strh	r2, [r3, #0]
 801f294:	3308      	adds	r3, #8
 801f296:	f823 2c06 	strh.w	r2, [r3, #-6]
 801f29a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801f29e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801f2a2:	428b      	cmp	r3, r1
 801f2a4:	d1f5      	bne.n	801f292 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801f2a6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801f2aa:	4770      	bx	lr

0801f2ac <_ZN8touchgfx11ApplicationC1Ev>:
 801f2ac:	b570      	push	{r4, r5, r6, lr}
 801f2ae:	4b16      	ldr	r3, [pc, #88]	; (801f308 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801f2b0:	2500      	movs	r5, #0
 801f2b2:	4604      	mov	r4, r0
 801f2b4:	30a8      	adds	r0, #168	; 0xa8
 801f2b6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801f2ba:	f820 5c24 	strh.w	r5, [r0, #-36]
 801f2be:	f7ff ffe4 	bl	801f28a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f2c2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801f2c6:	f7ff ffe0 	bl	801f28a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f2ca:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801f2ce:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801f2d2:	490e      	ldr	r1, [pc, #56]	; (801f30c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801f2d4:	480e      	ldr	r0, [pc, #56]	; (801f310 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801f2d6:	f00a fadb 	bl	8029890 <CRC_Lock>
 801f2da:	4e0e      	ldr	r6, [pc, #56]	; (801f314 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801f2dc:	4b0e      	ldr	r3, [pc, #56]	; (801f318 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801f2de:	b158      	cbz	r0, 801f2f8 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801f2e0:	801d      	strh	r5, [r3, #0]
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	4a0d      	ldr	r2, [pc, #52]	; (801f31c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801f2e6:	4620      	mov	r0, r4
 801f2e8:	6013      	str	r3, [r2, #0]
 801f2ea:	4a0d      	ldr	r2, [pc, #52]	; (801f320 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801f2ec:	6033      	str	r3, [r6, #0]
 801f2ee:	6013      	str	r3, [r2, #0]
 801f2f0:	f7ff ffc0 	bl	801f274 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801f2f4:	4620      	mov	r0, r4
 801f2f6:	bd70      	pop	{r4, r5, r6, pc}
 801f2f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f2fc:	2002      	movs	r0, #2
 801f2fe:	801a      	strh	r2, [r3, #0]
 801f300:	6030      	str	r0, [r6, #0]
 801f302:	f000 ff81 	bl	8020208 <_ZN8touchgfx6Screen4drawEv>
 801f306:	e7ec      	b.n	801f2e2 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801f308:	0802fed4 	.word	0x0802fed4
 801f30c:	b5e8b5cd 	.word	0xb5e8b5cd
 801f310:	f407a5c2 	.word	0xf407a5c2
 801f314:	2000c04c 	.word	0x2000c04c
 801f318:	20000084 	.word	0x20000084
 801f31c:	2000c05c 	.word	0x2000c05c
 801f320:	2000c050 	.word	0x2000c050

0801f324 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801f324:	2300      	movs	r3, #0
 801f326:	8003      	strh	r3, [r0, #0]
 801f328:	8043      	strh	r3, [r0, #2]
 801f32a:	8083      	strh	r3, [r0, #4]
 801f32c:	80c3      	strh	r3, [r0, #6]
 801f32e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801f332:	4293      	cmp	r3, r2
 801f334:	b530      	push	{r4, r5, lr}
 801f336:	d912      	bls.n	801f35e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f338:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801f33c:	3b01      	subs	r3, #1
 801f33e:	6825      	ldr	r5, [r4, #0]
 801f340:	b29b      	uxth	r3, r3
 801f342:	6005      	str	r5, [r0, #0]
 801f344:	4293      	cmp	r3, r2
 801f346:	6865      	ldr	r5, [r4, #4]
 801f348:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801f34c:	6045      	str	r5, [r0, #4]
 801f34e:	d906      	bls.n	801f35e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801f350:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801f354:	681d      	ldr	r5, [r3, #0]
 801f356:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801f35a:	685d      	ldr	r5, [r3, #4]
 801f35c:	6065      	str	r5, [r4, #4]
 801f35e:	bd30      	pop	{r4, r5, pc}

0801f360 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801f360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f362:	466b      	mov	r3, sp
 801f364:	4604      	mov	r4, r0
 801f366:	e883 0006 	stmia.w	r3, {r1, r2}
 801f36a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801f36e:	2a07      	cmp	r2, #7
 801f370:	d906      	bls.n	801f380 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801f372:	4b09      	ldr	r3, [pc, #36]	; (801f398 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801f374:	f44f 7102 	mov.w	r1, #520	; 0x208
 801f378:	4a08      	ldr	r2, [pc, #32]	; (801f39c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801f37a:	4809      	ldr	r0, [pc, #36]	; (801f3a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801f37c:	f00b ffa2 	bl	802b2c4 <__assert_func>
 801f380:	1c51      	adds	r1, r2, #1
 801f382:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801f386:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801f38a:	cb03      	ldmia	r3!, {r0, r1}
 801f38c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801f390:	6069      	str	r1, [r5, #4]
 801f392:	b003      	add	sp, #12
 801f394:	bd30      	pop	{r4, r5, pc}
 801f396:	bf00      	nop
 801f398:	0802fe74 	.word	0x0802fe74
 801f39c:	0802ff4c 	.word	0x0802ff4c
 801f3a0:	0802fea3 	.word	0x0802fea3

0801f3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801f3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f3a8:	b089      	sub	sp, #36	; 0x24
 801f3aa:	4606      	mov	r6, r0
 801f3ac:	466c      	mov	r4, sp
 801f3ae:	4620      	mov	r0, r4
 801f3b0:	e884 0006 	stmia.w	r4, {r1, r2}
 801f3b4:	f7fc f86e 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f3b8:	bbb0      	cbnz	r0, 801f428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f3ba:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801f3be:	b1fd      	cbz	r5, 801f400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801f3c0:	3d01      	subs	r5, #1
 801f3c2:	af04      	add	r7, sp, #16
 801f3c4:	f04f 090a 	mov.w	r9, #10
 801f3c8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801f3cc:	ab02      	add	r3, sp, #8
 801f3ce:	fa1f f885 	uxth.w	r8, r5
 801f3d2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f3d6:	6851      	ldr	r1, [r2, #4]
 801f3d8:	c303      	stmia	r3!, {r0, r1}
 801f3da:	4621      	mov	r1, r4
 801f3dc:	a802      	add	r0, sp, #8
 801f3de:	f7ff ff21 	bl	801f224 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f3e2:	bb08      	cbnz	r0, 801f428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801f3e4:	a902      	add	r1, sp, #8
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f7ff ff1c 	bl	801f224 <_ZNK8touchgfx4Rect8includesERKS0_>
 801f3ec:	b1f8      	cbz	r0, 801f42e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801f3ee:	4642      	mov	r2, r8
 801f3f0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f3f4:	a806      	add	r0, sp, #24
 801f3f6:	f7ff ff95 	bl	801f324 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f3fa:	f115 35ff 	adds.w	r5, r5, #4294967295
 801f3fe:	d2e3      	bcs.n	801f3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801f400:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801f404:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801f408:	2b08      	cmp	r3, #8
 801f40a:	d108      	bne.n	801f41e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801f40c:	4629      	mov	r1, r5
 801f40e:	a806      	add	r0, sp, #24
 801f410:	2207      	movs	r2, #7
 801f412:	f7ff ff87 	bl	801f324 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f416:	a906      	add	r1, sp, #24
 801f418:	4620      	mov	r0, r4
 801f41a:	f7fd fd0a 	bl	801ce32 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f41e:	4628      	mov	r0, r5
 801f420:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f424:	f7ff ff9c 	bl	801f360 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f428:	b009      	add	sp, #36	; 0x24
 801f42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f42e:	4621      	mov	r1, r4
 801f430:	a802      	add	r0, sp, #8
 801f432:	f7ff fed5 	bl	801f1e0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f436:	b150      	cbz	r0, 801f44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801f438:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f43c:	a806      	add	r0, sp, #24
 801f43e:	4642      	mov	r2, r8
 801f440:	f7ff ff70 	bl	801f324 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f444:	a902      	add	r1, sp, #8
 801f446:	4620      	mov	r0, r4
 801f448:	f7fd fcf3 	bl	801ce32 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f44c:	e7d5      	b.n	801f3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f44e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801f452:	e887 0003 	stmia.w	r7, {r0, r1}
 801f456:	a902      	add	r1, sp, #8
 801f458:	4638      	mov	r0, r7
 801f45a:	f7fd fcea 	bl	801ce32 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f45e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f462:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801f466:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f46a:	fb13 f302 	smulbb	r3, r3, r2
 801f46e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801f472:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f476:	fb11 f102 	smulbb	r1, r1, r2
 801f47a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f47e:	fb09 f303 	mul.w	r3, r9, r3
 801f482:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f486:	220b      	movs	r2, #11
 801f488:	434a      	muls	r2, r1
 801f48a:	4293      	cmp	r3, r2
 801f48c:	dab5      	bge.n	801f3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801f48e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801f492:	a806      	add	r0, sp, #24
 801f494:	4642      	mov	r2, r8
 801f496:	f7ff ff45 	bl	801f324 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f49a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f49e:	e884 0003 	stmia.w	r4, {r0, r1}
 801f4a2:	e7aa      	b.n	801f3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801f4a4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f4a4:	4b1d      	ldr	r3, [pc, #116]	; (801f51c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f4a6:	b530      	push	{r4, r5, lr}
 801f4a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f4ac:	b085      	sub	sp, #20
 801f4ae:	4b1c      	ldr	r3, [pc, #112]	; (801f520 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f4b0:	460c      	mov	r4, r1
 801f4b2:	2100      	movs	r1, #0
 801f4b4:	4605      	mov	r5, r0
 801f4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f4ba:	6820      	ldr	r0, [r4, #0]
 801f4bc:	9100      	str	r1, [sp, #0]
 801f4be:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f4c2:	ab02      	add	r3, sp, #8
 801f4c4:	6861      	ldr	r1, [r4, #4]
 801f4c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f4ca:	c303      	stmia	r3!, {r0, r1}
 801f4cc:	4669      	mov	r1, sp
 801f4ce:	a802      	add	r0, sp, #8
 801f4d0:	f7fb ff9c 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801f4d4:	ab02      	add	r3, sp, #8
 801f4d6:	cb03      	ldmia	r3!, {r0, r1}
 801f4d8:	4b12      	ldr	r3, [pc, #72]	; (801f524 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801f4da:	6020      	str	r0, [r4, #0]
 801f4dc:	6818      	ldr	r0, [r3, #0]
 801f4de:	6061      	str	r1, [r4, #4]
 801f4e0:	b138      	cbz	r0, 801f4f2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f4e2:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801f4e6:	b133      	cbz	r3, 801f4f6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801f4e8:	6821      	ldr	r1, [r4, #0]
 801f4ea:	4628      	mov	r0, r5
 801f4ec:	6862      	ldr	r2, [r4, #4]
 801f4ee:	f7ff ff59 	bl	801f3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f4f2:	b005      	add	sp, #20
 801f4f4:	bd30      	pop	{r4, r5, pc}
 801f4f6:	6803      	ldr	r3, [r0, #0]
 801f4f8:	4621      	mov	r1, r4
 801f4fa:	689b      	ldr	r3, [r3, #8]
 801f4fc:	4798      	blx	r3
 801f4fe:	4b0a      	ldr	r3, [pc, #40]	; (801f528 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801f500:	6818      	ldr	r0, [r3, #0]
 801f502:	b118      	cbz	r0, 801f50c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801f504:	6803      	ldr	r3, [r0, #0]
 801f506:	4621      	mov	r1, r4
 801f508:	689b      	ldr	r3, [r3, #8]
 801f50a:	4798      	blx	r3
 801f50c:	4b07      	ldr	r3, [pc, #28]	; (801f52c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801f50e:	4621      	mov	r1, r4
 801f510:	6818      	ldr	r0, [r3, #0]
 801f512:	6803      	ldr	r3, [r0, #0]
 801f514:	695b      	ldr	r3, [r3, #20]
 801f516:	4798      	blx	r3
 801f518:	e7eb      	b.n	801f4f2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f51a:	bf00      	nop
 801f51c:	2000bfc2 	.word	0x2000bfc2
 801f520:	2000bfc4 	.word	0x2000bfc4
 801f524:	2000c04c 	.word	0x2000c04c
 801f528:	2000c048 	.word	0x2000c048
 801f52c:	2000bfd0 	.word	0x2000bfd0

0801f530 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f534:	4604      	mov	r4, r0
 801f536:	b09b      	sub	sp, #108	; 0x6c
 801f538:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801f53c:	b129      	cbz	r1, 801f54a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f53e:	2300      	movs	r3, #0
 801f540:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f544:	b01b      	add	sp, #108	; 0x6c
 801f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f54a:	4baf      	ldr	r3, [pc, #700]	; (801f808 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	b33b      	cbz	r3, 801f5a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f550:	4dae      	ldr	r5, [pc, #696]	; (801f80c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801f552:	4628      	mov	r0, r5
 801f554:	f7fb ff9e 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f558:	4606      	mov	r6, r0
 801f55a:	bb08      	cbnz	r0, 801f5a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f55c:	4628      	mov	r0, r5
 801f55e:	f7ff fce9 	bl	801ef34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f562:	6829      	ldr	r1, [r5, #0]
 801f564:	686a      	ldr	r2, [r5, #4]
 801f566:	4620      	mov	r0, r4
 801f568:	f7ff ff1c 	bl	801f3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f56c:	802e      	strh	r6, [r5, #0]
 801f56e:	806e      	strh	r6, [r5, #2]
 801f570:	80ae      	strh	r6, [r5, #4]
 801f572:	80ee      	strh	r6, [r5, #6]
 801f574:	4fa6      	ldr	r7, [pc, #664]	; (801f810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801f576:	a809      	add	r0, sp, #36	; 0x24
 801f578:	f7ff fe87 	bl	801f28a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f57c:	883d      	ldrh	r5, [r7, #0]
 801f57e:	462e      	mov	r6, r5
 801f580:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f584:	42b3      	cmp	r3, r6
 801f586:	d910      	bls.n	801f5aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801f588:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f58c:	3601      	adds	r6, #1
 801f58e:	a809      	add	r0, sp, #36	; 0x24
 801f590:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f594:	b2b6      	uxth	r6, r6
 801f596:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f59a:	f7ff fee1 	bl	801f360 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f59e:	e7ef      	b.n	801f580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801f5a0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d1e5      	bne.n	801f574 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801f5a8:	e7cc      	b.n	801f544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f5aa:	462e      	mov	r6, r5
 801f5ac:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f5b0:	42b3      	cmp	r3, r6
 801f5b2:	d90b      	bls.n	801f5cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801f5b4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f5b8:	3601      	adds	r6, #1
 801f5ba:	4620      	mov	r0, r4
 801f5bc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f5c0:	b2b6      	uxth	r6, r6
 801f5c2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f5c6:	f7ff feed 	bl	801f3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f5ca:	e7ef      	b.n	801f5ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801f5cc:	4e91      	ldr	r6, [pc, #580]	; (801f814 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801f5ce:	6833      	ldr	r3, [r6, #0]
 801f5d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801f5d4:	2b01      	cmp	r3, #1
 801f5d6:	f040 8092 	bne.w	801f6fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801f5da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f5de:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f5e2:	f04f 0900 	mov.w	r9, #0
 801f5e6:	33aa      	adds	r3, #170	; 0xaa
 801f5e8:	42a8      	cmp	r0, r5
 801f5ea:	f103 0308 	add.w	r3, r3, #8
 801f5ee:	dd0a      	ble.n	801f606 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801f5f0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f5f4:	3501      	adds	r5, #1
 801f5f6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f5fa:	440a      	add	r2, r1
 801f5fc:	b212      	sxth	r2, r2
 801f5fe:	4591      	cmp	r9, r2
 801f600:	bfb8      	it	lt
 801f602:	4691      	movlt	r9, r2
 801f604:	e7f0      	b.n	801f5e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801f606:	4b84      	ldr	r3, [pc, #528]	; (801f818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801f608:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801f820 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801f60c:	881d      	ldrh	r5, [r3, #0]
 801f60e:	2300      	movs	r3, #0
 801f610:	2d0f      	cmp	r5, #15
 801f612:	bf8c      	ite	hi
 801f614:	08ed      	lsrhi	r5, r5, #3
 801f616:	2501      	movls	r5, #1
 801f618:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f61c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f620:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f624:	6830      	ldr	r0, [r6, #0]
 801f626:	440b      	add	r3, r1
 801f628:	6802      	ldr	r2, [r0, #0]
 801f62a:	b21b      	sxth	r3, r3
 801f62c:	4599      	cmp	r9, r3
 801f62e:	dd49      	ble.n	801f6c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801f630:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801f634:	4798      	blx	r3
 801f636:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f63a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f63e:	4413      	add	r3, r2
 801f640:	b21b      	sxth	r3, r3
 801f642:	195a      	adds	r2, r3, r5
 801f644:	4290      	cmp	r0, r2
 801f646:	da07      	bge.n	801f658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801f648:	4581      	cmp	r9, r0
 801f64a:	dd05      	ble.n	801f658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801f64c:	4298      	cmp	r0, r3
 801f64e:	da33      	bge.n	801f6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801f650:	2b00      	cmp	r3, #0
 801f652:	dd31      	ble.n	801f6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801f654:	4648      	mov	r0, r9
 801f656:	e004      	b.n	801f662 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801f658:	4298      	cmp	r0, r3
 801f65a:	dbfb      	blt.n	801f654 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801f65c:	4548      	cmp	r0, r9
 801f65e:	bfa8      	it	ge
 801f660:	4648      	movge	r0, r9
 801f662:	f9b8 2000 	ldrsh.w	r2, [r8]
 801f666:	2100      	movs	r1, #0
 801f668:	1ac0      	subs	r0, r0, r3
 801f66a:	f8b7 a000 	ldrh.w	sl, [r7]
 801f66e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f672:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f676:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f67a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f67e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f682:	4553      	cmp	r3, sl
 801f684:	d9ca      	bls.n	801f61c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801f686:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f68a:	ab07      	add	r3, sp, #28
 801f68c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f690:	6851      	ldr	r1, [r2, #4]
 801f692:	c303      	stmia	r3!, {r0, r1}
 801f694:	a807      	add	r0, sp, #28
 801f696:	a905      	add	r1, sp, #20
 801f698:	f7fb feb8 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801f69c:	a807      	add	r0, sp, #28
 801f69e:	f7fb fef9 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f6a2:	b920      	cbnz	r0, 801f6ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801f6a4:	6823      	ldr	r3, [r4, #0]
 801f6a6:	a907      	add	r1, sp, #28
 801f6a8:	4620      	mov	r0, r4
 801f6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6ac:	4798      	blx	r3
 801f6ae:	f10a 0a01 	add.w	sl, sl, #1
 801f6b2:	fa1f fa8a 	uxth.w	sl, sl
 801f6b6:	e7e2      	b.n	801f67e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801f6b8:	6830      	ldr	r0, [r6, #0]
 801f6ba:	2101      	movs	r1, #1
 801f6bc:	6803      	ldr	r3, [r0, #0]
 801f6be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f6c0:	4798      	blx	r3
 801f6c2:	e7ab      	b.n	801f61c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801f6c4:	69d3      	ldr	r3, [r2, #28]
 801f6c6:	4798      	blx	r3
 801f6c8:	4b54      	ldr	r3, [pc, #336]	; (801f81c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801f6ca:	781b      	ldrb	r3, [r3, #0]
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	f43f af39 	beq.w	801f544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	883d      	ldrh	r5, [r7, #0]
 801f6d6:	34ea      	adds	r4, #234	; 0xea
 801f6d8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801f6dc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f6e0:	42ab      	cmp	r3, r5
 801f6e2:	f67f af2f 	bls.w	801f544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f6e6:	ab1a      	add	r3, sp, #104	; 0x68
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f6ee:	3501      	adds	r5, #1
 801f6f0:	3b44      	subs	r3, #68	; 0x44
 801f6f2:	b2ad      	uxth	r5, r5
 801f6f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f6f8:	f7ff fe32 	bl	801f360 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f6fc:	e7ee      	b.n	801f6dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801f6fe:	2b02      	cmp	r3, #2
 801f700:	d16a      	bne.n	801f7d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801f702:	f8df a120 	ldr.w	sl, [pc, #288]	; 801f824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801f706:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f70a:	42ab      	cmp	r3, r5
 801f70c:	d9dc      	bls.n	801f6c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801f70e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f712:	ab03      	add	r3, sp, #12
 801f714:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f718:	6851      	ldr	r1, [r2, #4]
 801f71a:	c303      	stmia	r3!, {r0, r1}
 801f71c:	f89a 3000 	ldrb.w	r3, [sl]
 801f720:	2b01      	cmp	r3, #1
 801f722:	d102      	bne.n	801f72a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801f724:	a803      	add	r0, sp, #12
 801f726:	f7ff fc5f 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f72a:	a803      	add	r0, sp, #12
 801f72c:	f7fb feb2 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f730:	2800      	cmp	r0, #0
 801f732:	d14a      	bne.n	801f7ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801f734:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f738:	f10d 0914 	add.w	r9, sp, #20
 801f73c:	f10d 081c 	add.w	r8, sp, #28
 801f740:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f744:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f748:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801f74c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f750:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f754:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f758:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801f75c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801f760:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f764:	44dc      	add	ip, fp
 801f766:	6830      	ldr	r0, [r6, #0]
 801f768:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f76c:	ebac 0c02 	sub.w	ip, ip, r2
 801f770:	f8d0 e000 	ldr.w	lr, [r0]
 801f774:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f778:	fa1f fc8c 	uxth.w	ip, ip
 801f77c:	f8cd c000 	str.w	ip, [sp]
 801f780:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801f784:	47d8      	blx	fp
 801f786:	f89a 3000 	ldrb.w	r3, [sl]
 801f78a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f78e:	2b01      	cmp	r3, #1
 801f790:	d11e      	bne.n	801f7d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801f792:	e899 0003 	ldmia.w	r9, {r0, r1}
 801f796:	e888 0003 	stmia.w	r8, {r0, r1}
 801f79a:	4640      	mov	r0, r8
 801f79c:	f7ff fbca 	bl	801ef34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f7a0:	6823      	ldr	r3, [r4, #0]
 801f7a2:	4641      	mov	r1, r8
 801f7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7a6:	4620      	mov	r0, r4
 801f7a8:	4798      	blx	r3
 801f7aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f7ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f7b2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801f7b6:	4413      	add	r3, r2
 801f7b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801f7bc:	440a      	add	r2, r1
 801f7be:	b21b      	sxth	r3, r3
 801f7c0:	b212      	sxth	r2, r2
 801f7c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f7c6:	4293      	cmp	r3, r2
 801f7c8:	dbc6      	blt.n	801f758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801f7ca:	3501      	adds	r5, #1
 801f7cc:	b2ad      	uxth	r5, r5
 801f7ce:	e79a      	b.n	801f706 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801f7d0:	6823      	ldr	r3, [r4, #0]
 801f7d2:	4649      	mov	r1, r9
 801f7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7d6:	e7e6      	b.n	801f7a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801f7d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f7dc:	42ab      	cmp	r3, r5
 801f7de:	f67f af73 	bls.w	801f6c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801f7e2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f7e6:	ab07      	add	r3, sp, #28
 801f7e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f7ec:	6851      	ldr	r1, [r2, #4]
 801f7ee:	c303      	stmia	r3!, {r0, r1}
 801f7f0:	a807      	add	r0, sp, #28
 801f7f2:	f7fb fe4f 	bl	801b494 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f7f6:	b920      	cbnz	r0, 801f802 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801f7f8:	6823      	ldr	r3, [r4, #0]
 801f7fa:	a907      	add	r1, sp, #28
 801f7fc:	4620      	mov	r0, r4
 801f7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f800:	4798      	blx	r3
 801f802:	3501      	adds	r5, #1
 801f804:	b2ad      	uxth	r5, r5
 801f806:	e7e7      	b.n	801f7d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801f808:	2000c048 	.word	0x2000c048
 801f80c:	2000c054 	.word	0x2000c054
 801f810:	20000084 	.word	0x20000084
 801f814:	2000bfd0 	.word	0x2000bfd0
 801f818:	2000bfc4 	.word	0x2000bfc4
 801f81c:	2000bfcc 	.word	0x2000bfcc
 801f820:	2000bfc2 	.word	0x2000bfc2
 801f824:	2000bfc6 	.word	0x2000bfc6

0801f828 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f828:	4b03      	ldr	r3, [pc, #12]	; (801f838 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f82a:	2200      	movs	r2, #0
 801f82c:	801a      	strh	r2, [r3, #0]
 801f82e:	805a      	strh	r2, [r3, #2]
 801f830:	809a      	strh	r2, [r3, #4]
 801f832:	80da      	strh	r2, [r3, #6]
 801f834:	4770      	bx	lr
 801f836:	bf00      	nop
 801f838:	2000c054 	.word	0x2000c054

0801f83c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801f83c:	2000      	movs	r0, #0
 801f83e:	4770      	bx	lr

0801f840 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801f840:	2000      	movs	r0, #0
 801f842:	4770      	bx	lr

0801f844 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f844:	b508      	push	{r3, lr}
 801f846:	6803      	ldr	r3, [r0, #0]
 801f848:	68db      	ldr	r3, [r3, #12]
 801f84a:	4798      	blx	r3
 801f84c:	b128      	cbz	r0, 801f85a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f84e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801f852:	7a80      	ldrb	r0, [r0, #10]
 801f854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f858:	4318      	orrs	r0, r3
 801f85a:	bd08      	pop	{r3, pc}

0801f85c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801f85c:	b40e      	push	{r1, r2, r3}
 801f85e:	b533      	push	{r0, r1, r4, r5, lr}
 801f860:	ab05      	add	r3, sp, #20
 801f862:	f853 2b04 	ldr.w	r2, [r3], #4
 801f866:	9301      	str	r3, [sp, #4]
 801f868:	4b0a      	ldr	r3, [pc, #40]	; (801f894 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801f86a:	685c      	ldr	r4, [r3, #4]
 801f86c:	1061      	asrs	r1, r4, #1
 801f86e:	07e4      	lsls	r4, r4, #31
 801f870:	eb00 0501 	add.w	r5, r0, r1
 801f874:	bf46      	itte	mi
 801f876:	681b      	ldrmi	r3, [r3, #0]
 801f878:	5841      	ldrmi	r1, [r0, r1]
 801f87a:	681c      	ldrpl	r4, [r3, #0]
 801f87c:	4628      	mov	r0, r5
 801f87e:	bf48      	it	mi
 801f880:	58cc      	ldrmi	r4, [r1, r3]
 801f882:	2100      	movs	r1, #0
 801f884:	9b01      	ldr	r3, [sp, #4]
 801f886:	47a0      	blx	r4
 801f888:	b002      	add	sp, #8
 801f88a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f88e:	b003      	add	sp, #12
 801f890:	4770      	bx	lr
 801f892:	bf00      	nop
 801f894:	20000020 	.word	0x20000020

0801f898 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801f898:	b40c      	push	{r2, r3}
 801f89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f89c:	ab06      	add	r3, sp, #24
 801f89e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8a2:	9301      	str	r3, [sp, #4]
 801f8a4:	4b09      	ldr	r3, [pc, #36]	; (801f8cc <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801f8a6:	685d      	ldr	r5, [r3, #4]
 801f8a8:	106c      	asrs	r4, r5, #1
 801f8aa:	07ed      	lsls	r5, r5, #31
 801f8ac:	eb00 0604 	add.w	r6, r0, r4
 801f8b0:	bf45      	ittet	mi
 801f8b2:	681b      	ldrmi	r3, [r3, #0]
 801f8b4:	5900      	ldrmi	r0, [r0, r4]
 801f8b6:	681c      	ldrpl	r4, [r3, #0]
 801f8b8:	58c4      	ldrmi	r4, [r0, r3]
 801f8ba:	4630      	mov	r0, r6
 801f8bc:	9b01      	ldr	r3, [sp, #4]
 801f8be:	47a0      	blx	r4
 801f8c0:	b002      	add	sp, #8
 801f8c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f8c6:	b002      	add	sp, #8
 801f8c8:	4770      	bx	lr
 801f8ca:	bf00      	nop
 801f8cc:	20000020 	.word	0x20000020

0801f8d0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f8d0:	b40e      	push	{r1, r2, r3}
 801f8d2:	b530      	push	{r4, r5, lr}
 801f8d4:	b098      	sub	sp, #96	; 0x60
 801f8d6:	4604      	mov	r4, r0
 801f8d8:	ab1b      	add	r3, sp, #108	; 0x6c
 801f8da:	a802      	add	r0, sp, #8
 801f8dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801f8e0:	9301      	str	r3, [sp, #4]
 801f8e2:	f001 f871 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801f8e6:	6823      	ldr	r3, [r4, #0]
 801f8e8:	4620      	mov	r0, r4
 801f8ea:	2401      	movs	r4, #1
 801f8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f8ee:	4798      	blx	r3
 801f8f0:	9a01      	ldr	r2, [sp, #4]
 801f8f2:	4603      	mov	r3, r0
 801f8f4:	4629      	mov	r1, r5
 801f8f6:	a802      	add	r0, sp, #8
 801f8f8:	f001 f883 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f8fc:	a802      	add	r0, sp, #8
 801f8fe:	f001 f8b9 	bl	8020a74 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f902:	b2a3      	uxth	r3, r4
 801f904:	b138      	cbz	r0, 801f916 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801f906:	280a      	cmp	r0, #10
 801f908:	a802      	add	r0, sp, #8
 801f90a:	bf04      	itt	eq
 801f90c:	3301      	addeq	r3, #1
 801f90e:	b21c      	sxtheq	r4, r3
 801f910:	f001 f8b0 	bl	8020a74 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f914:	e7f5      	b.n	801f902 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801f916:	4618      	mov	r0, r3
 801f918:	b018      	add	sp, #96	; 0x60
 801f91a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f91e:	b003      	add	sp, #12
 801f920:	4770      	bx	lr
	...

0801f924 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f924:	b40e      	push	{r1, r2, r3}
 801f926:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f928:	b098      	sub	sp, #96	; 0x60
 801f92a:	4605      	mov	r5, r0
 801f92c:	4f25      	ldr	r7, [pc, #148]	; (801f9c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801f92e:	ab1d      	add	r3, sp, #116	; 0x74
 801f930:	a802      	add	r0, sp, #8
 801f932:	ae18      	add	r6, sp, #96	; 0x60
 801f934:	f853 4b04 	ldr.w	r4, [r3], #4
 801f938:	9300      	str	r3, [sp, #0]
 801f93a:	f001 f845 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801f93e:	682b      	ldr	r3, [r5, #0]
 801f940:	4628      	mov	r0, r5
 801f942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f944:	4798      	blx	r3
 801f946:	4621      	mov	r1, r4
 801f948:	2400      	movs	r4, #0
 801f94a:	4603      	mov	r3, r0
 801f94c:	9a00      	ldr	r2, [sp, #0]
 801f94e:	a802      	add	r0, sp, #8
 801f950:	f001 f857 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f954:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801f958:	462a      	mov	r2, r5
 801f95a:	4633      	mov	r3, r6
 801f95c:	4621      	mov	r1, r4
 801f95e:	a802      	add	r0, sp, #8
 801f960:	f001 f9b4 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f964:	b340      	cbz	r0, 801f9b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801f966:	280a      	cmp	r0, #10
 801f968:	d01f      	beq.n	801f9aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f96a:	9901      	ldr	r1, [sp, #4]
 801f96c:	b1e9      	cbz	r1, 801f9aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f96e:	7b4b      	ldrb	r3, [r1, #13]
 801f970:	f891 c008 	ldrb.w	ip, [r1, #8]
 801f974:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f978:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801f97c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801f980:	79c9      	ldrb	r1, [r1, #7]
 801f982:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801f986:	bf18      	it	ne
 801f988:	4638      	movne	r0, r7
 801f98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f98e:	bf08      	it	eq
 801f990:	2000      	moveq	r0, #0
 801f992:	88aa      	ldrh	r2, [r5, #4]
 801f994:	ea41 010e 	orr.w	r1, r1, lr
 801f998:	ea43 030c 	orr.w	r3, r3, ip
 801f99c:	440a      	add	r2, r1
 801f99e:	4303      	orrs	r3, r0
 801f9a0:	1ad3      	subs	r3, r2, r3
 801f9a2:	b29b      	uxth	r3, r3
 801f9a4:	42a3      	cmp	r3, r4
 801f9a6:	bfc8      	it	gt
 801f9a8:	b21c      	sxthgt	r4, r3
 801f9aa:	4633      	mov	r3, r6
 801f9ac:	462a      	mov	r2, r5
 801f9ae:	2100      	movs	r1, #0
 801f9b0:	a802      	add	r0, sp, #8
 801f9b2:	f001 f98b 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f9b6:	e7d5      	b.n	801f964 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801f9b8:	b2a0      	uxth	r0, r4
 801f9ba:	b018      	add	sp, #96	; 0x60
 801f9bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f9c0:	b003      	add	sp, #12
 801f9c2:	4770      	bx	lr
 801f9c4:	fffffe00 	.word	0xfffffe00

0801f9c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f9c8:	b40e      	push	{r1, r2, r3}
 801f9ca:	b570      	push	{r4, r5, r6, lr}
 801f9cc:	b099      	sub	sp, #100	; 0x64
 801f9ce:	4604      	mov	r4, r0
 801f9d0:	26ff      	movs	r6, #255	; 0xff
 801f9d2:	ab1d      	add	r3, sp, #116	; 0x74
 801f9d4:	a802      	add	r0, sp, #8
 801f9d6:	f853 5b04 	ldr.w	r5, [r3], #4
 801f9da:	9300      	str	r3, [sp, #0]
 801f9dc:	f000 fff4 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801f9e0:	6823      	ldr	r3, [r4, #0]
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f9e6:	4798      	blx	r3
 801f9e8:	4629      	mov	r1, r5
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	9a00      	ldr	r2, [sp, #0]
 801f9ee:	a802      	add	r0, sp, #8
 801f9f0:	ad18      	add	r5, sp, #96	; 0x60
 801f9f2:	f001 f806 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801f9f6:	2100      	movs	r1, #0
 801f9f8:	4622      	mov	r2, r4
 801f9fa:	a802      	add	r0, sp, #8
 801f9fc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801fa00:	462b      	mov	r3, r5
 801fa02:	f001 f963 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fa06:	b190      	cbz	r0, 801fa2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801fa08:	280a      	cmp	r0, #10
 801fa0a:	d009      	beq.n	801fa20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801fa0c:	9a01      	ldr	r2, [sp, #4]
 801fa0e:	b13a      	cbz	r2, 801fa20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801fa10:	7923      	ldrb	r3, [r4, #4]
 801fa12:	7a12      	ldrb	r2, [r2, #8]
 801fa14:	1a9b      	subs	r3, r3, r2
 801fa16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801fa1a:	429e      	cmp	r6, r3
 801fa1c:	bf28      	it	cs
 801fa1e:	461e      	movcs	r6, r3
 801fa20:	462b      	mov	r3, r5
 801fa22:	4622      	mov	r2, r4
 801fa24:	2100      	movs	r1, #0
 801fa26:	a802      	add	r0, sp, #8
 801fa28:	f001 f950 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fa2c:	e7eb      	b.n	801fa06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801fa2e:	4630      	mov	r0, r6
 801fa30:	b019      	add	sp, #100	; 0x64
 801fa32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fa36:	b003      	add	sp, #12
 801fa38:	4770      	bx	lr

0801fa3a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801fa3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa3e:	b099      	sub	sp, #100	; 0x64
 801fa40:	4606      	mov	r6, r0
 801fa42:	4614      	mov	r4, r2
 801fa44:	4688      	mov	r8, r1
 801fa46:	a802      	add	r0, sp, #8
 801fa48:	461d      	mov	r5, r3
 801fa4a:	f04f 0b00 	mov.w	fp, #0
 801fa4e:	f000 ffbb 	bl	80209c8 <_ZN8touchgfx12TextProviderC1Ev>
 801fa52:	6833      	ldr	r3, [r6, #0]
 801fa54:	4630      	mov	r0, r6
 801fa56:	465f      	mov	r7, fp
 801fa58:	46da      	mov	sl, fp
 801fa5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa5c:	46d9      	mov	r9, fp
 801fa5e:	4798      	blx	r3
 801fa60:	462a      	mov	r2, r5
 801fa62:	4603      	mov	r3, r0
 801fa64:	4621      	mov	r1, r4
 801fa66:	a802      	add	r0, sp, #8
 801fa68:	f000 ffcb 	bl	8020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801fa6c:	ab01      	add	r3, sp, #4
 801fa6e:	4632      	mov	r2, r6
 801fa70:	4641      	mov	r1, r8
 801fa72:	a802      	add	r0, sp, #8
 801fa74:	f8cd 9004 	str.w	r9, [sp, #4]
 801fa78:	f001 f928 	bl	8020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801fa7c:	4605      	mov	r5, r0
 801fa7e:	b108      	cbz	r0, 801fa84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801fa80:	280a      	cmp	r0, #10
 801fa82:	d10b      	bne.n	801fa9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801fa84:	4557      	cmp	r7, sl
 801fa86:	bf38      	it	cc
 801fa88:	4657      	movcc	r7, sl
 801fa8a:	f04f 0a00 	mov.w	sl, #0
 801fa8e:	b91d      	cbnz	r5, 801fa98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801fa90:	4638      	mov	r0, r7
 801fa92:	b019      	add	sp, #100	; 0x64
 801fa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa98:	46ab      	mov	fp, r5
 801fa9a:	e7e7      	b.n	801fa6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801fa9c:	9a01      	ldr	r2, [sp, #4]
 801fa9e:	2a00      	cmp	r2, #0
 801faa0:	d0fa      	beq.n	801fa98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801faa2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801faa6:	4659      	mov	r1, fp
 801faa8:	6833      	ldr	r3, [r6, #0]
 801faaa:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801faae:	7a94      	ldrb	r4, [r2, #10]
 801fab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fab2:	4304      	orrs	r4, r0
 801fab4:	4630      	mov	r0, r6
 801fab6:	8895      	ldrh	r5, [r2, #4]
 801fab8:	4798      	blx	r3
 801faba:	4420      	add	r0, r4
 801fabc:	4450      	add	r0, sl
 801fabe:	fa1f fa80 	uxth.w	sl, r0
 801fac2:	e7e4      	b.n	801fa8e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801fac4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801fac4:	b513      	push	{r0, r1, r4, lr}
 801fac6:	1d01      	adds	r1, r0, #4
 801fac8:	4603      	mov	r3, r0
 801faca:	466a      	mov	r2, sp
 801facc:	c903      	ldmia	r1, {r0, r1}
 801face:	e882 0003 	stmia.w	r2, {r0, r1}
 801fad2:	2100      	movs	r1, #0
 801fad4:	4618      	mov	r0, r3
 801fad6:	9100      	str	r1, [sp, #0]
 801fad8:	6819      	ldr	r1, [r3, #0]
 801fada:	690c      	ldr	r4, [r1, #16]
 801fadc:	4611      	mov	r1, r2
 801fade:	47a0      	blx	r4
 801fae0:	b002      	add	sp, #8
 801fae2:	bd10      	pop	{r4, pc}

0801fae4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801fae4:	b538      	push	{r3, r4, r5, lr}
 801fae6:	680b      	ldr	r3, [r1, #0]
 801fae8:	460c      	mov	r4, r1
 801faea:	4605      	mov	r5, r0
 801faec:	68db      	ldr	r3, [r3, #12]
 801faee:	4798      	blx	r3
 801faf0:	6823      	ldr	r3, [r4, #0]
 801faf2:	4620      	mov	r0, r4
 801faf4:	4629      	mov	r1, r5
 801faf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801faf8:	4798      	blx	r3
 801fafa:	4628      	mov	r0, r5
 801fafc:	bd38      	pop	{r3, r4, r5, pc}

0801fafe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801fafe:	b410      	push	{r4}
 801fb00:	880a      	ldrh	r2, [r1, #0]
 801fb02:	8884      	ldrh	r4, [r0, #4]
 801fb04:	4422      	add	r2, r4
 801fb06:	800a      	strh	r2, [r1, #0]
 801fb08:	884a      	ldrh	r2, [r1, #2]
 801fb0a:	88c4      	ldrh	r4, [r0, #6]
 801fb0c:	4422      	add	r2, r4
 801fb0e:	804a      	strh	r2, [r1, #2]
 801fb10:	6940      	ldr	r0, [r0, #20]
 801fb12:	b120      	cbz	r0, 801fb1e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801fb14:	6803      	ldr	r3, [r0, #0]
 801fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb1c:	4718      	bx	r3
 801fb1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb22:	4770      	bx	lr

0801fb24 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb26:	460b      	mov	r3, r1
 801fb28:	b085      	sub	sp, #20
 801fb2a:	4604      	mov	r4, r0
 801fb2c:	b901      	cbnz	r1, 801fb30 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801fb2e:	b1fa      	cbz	r2, 801fb70 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801fb30:	1d27      	adds	r7, r4, #4
 801fb32:	466e      	mov	r6, sp
 801fb34:	ad02      	add	r5, sp, #8
 801fb36:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fb3a:	e886 0003 	stmia.w	r6, {r0, r1}
 801fb3e:	88e1      	ldrh	r1, [r4, #6]
 801fb40:	4620      	mov	r0, r4
 801fb42:	440a      	add	r2, r1
 801fb44:	88a1      	ldrh	r1, [r4, #4]
 801fb46:	4419      	add	r1, r3
 801fb48:	6823      	ldr	r3, [r4, #0]
 801fb4a:	b212      	sxth	r2, r2
 801fb4c:	b209      	sxth	r1, r1
 801fb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fb50:	4798      	blx	r3
 801fb52:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fb56:	e885 0003 	stmia.w	r5, {r0, r1}
 801fb5a:	6960      	ldr	r0, [r4, #20]
 801fb5c:	b150      	cbz	r0, 801fb74 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801fb5e:	6803      	ldr	r3, [r0, #0]
 801fb60:	4631      	mov	r1, r6
 801fb62:	691b      	ldr	r3, [r3, #16]
 801fb64:	4798      	blx	r3
 801fb66:	6960      	ldr	r0, [r4, #20]
 801fb68:	6803      	ldr	r3, [r0, #0]
 801fb6a:	691b      	ldr	r3, [r3, #16]
 801fb6c:	4629      	mov	r1, r5
 801fb6e:	4798      	blx	r3
 801fb70:	b005      	add	sp, #20
 801fb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb74:	f7ff fb78 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801fb78:	6803      	ldr	r3, [r0, #0]
 801fb7a:	4631      	mov	r1, r6
 801fb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb7e:	4798      	blx	r3
 801fb80:	f7ff fb72 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801fb84:	6803      	ldr	r3, [r0, #0]
 801fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb88:	e7f0      	b.n	801fb6c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801fb8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801fb8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fb8c:	8882      	ldrh	r2, [r0, #4]
 801fb8e:	4605      	mov	r5, r0
 801fb90:	880b      	ldrh	r3, [r1, #0]
 801fb92:	460c      	mov	r4, r1
 801fb94:	4413      	add	r3, r2
 801fb96:	800b      	strh	r3, [r1, #0]
 801fb98:	884b      	ldrh	r3, [r1, #2]
 801fb9a:	88c2      	ldrh	r2, [r0, #6]
 801fb9c:	4413      	add	r3, r2
 801fb9e:	4602      	mov	r2, r0
 801fba0:	804b      	strh	r3, [r1, #2]
 801fba2:	466b      	mov	r3, sp
 801fba4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801fba8:	6851      	ldr	r1, [r2, #4]
 801fbaa:	c303      	stmia	r3!, {r0, r1}
 801fbac:	4621      	mov	r1, r4
 801fbae:	4668      	mov	r0, sp
 801fbb0:	f7fb fc2c 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801fbb4:	466b      	mov	r3, sp
 801fbb6:	cb03      	ldmia	r3!, {r0, r1}
 801fbb8:	6020      	str	r0, [r4, #0]
 801fbba:	6061      	str	r1, [r4, #4]
 801fbbc:	6968      	ldr	r0, [r5, #20]
 801fbbe:	b128      	cbz	r0, 801fbcc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801fbc0:	6803      	ldr	r3, [r0, #0]
 801fbc2:	691b      	ldr	r3, [r3, #16]
 801fbc4:	4621      	mov	r1, r4
 801fbc6:	4798      	blx	r3
 801fbc8:	b003      	add	sp, #12
 801fbca:	bd30      	pop	{r4, r5, pc}
 801fbcc:	f7ff fb4c 	bl	801f268 <_ZN8touchgfx11Application11getInstanceEv>
 801fbd0:	6803      	ldr	r3, [r0, #0]
 801fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbd4:	e7f6      	b.n	801fbc4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801fbd6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801fbd6:	b570      	push	{r4, r5, r6, lr}
 801fbd8:	8882      	ldrh	r2, [r0, #4]
 801fbda:	460c      	mov	r4, r1
 801fbdc:	880b      	ldrh	r3, [r1, #0]
 801fbde:	4605      	mov	r5, r0
 801fbe0:	4413      	add	r3, r2
 801fbe2:	800b      	strh	r3, [r1, #0]
 801fbe4:	884b      	ldrh	r3, [r1, #2]
 801fbe6:	88c2      	ldrh	r2, [r0, #6]
 801fbe8:	4413      	add	r3, r2
 801fbea:	804b      	strh	r3, [r1, #2]
 801fbec:	1d01      	adds	r1, r0, #4
 801fbee:	4620      	mov	r0, r4
 801fbf0:	f7fb fc0c 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 801fbf4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801fbf8:	b153      	cbz	r3, 801fc10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801fbfa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fbfe:	b13b      	cbz	r3, 801fc10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801fc00:	6968      	ldr	r0, [r5, #20]
 801fc02:	b128      	cbz	r0, 801fc10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801fc04:	6803      	ldr	r3, [r0, #0]
 801fc06:	4621      	mov	r1, r4
 801fc08:	6a1b      	ldr	r3, [r3, #32]
 801fc0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc0e:	4718      	bx	r3
 801fc10:	bd70      	pop	{r4, r5, r6, pc}

0801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801fc12:	b510      	push	{r4, lr}
 801fc14:	2300      	movs	r3, #0
 801fc16:	4604      	mov	r4, r0
 801fc18:	4608      	mov	r0, r1
 801fc1a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801fc1e:	8023      	strh	r3, [r4, #0]
 801fc20:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fc24:	8063      	strh	r3, [r4, #2]
 801fc26:	6803      	ldr	r3, [r0, #0]
 801fc28:	80a1      	strh	r1, [r4, #4]
 801fc2a:	4621      	mov	r1, r4
 801fc2c:	80e2      	strh	r2, [r4, #6]
 801fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc30:	4798      	blx	r3
 801fc32:	4620      	mov	r0, r4
 801fc34:	bd10      	pop	{r4, pc}
	...

0801fc38 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801fc38:	b530      	push	{r4, r5, lr}
 801fc3a:	8083      	strh	r3, [r0, #4]
 801fc3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801fc40:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801fc44:	7183      	strb	r3, [r0, #6]
 801fc46:	79c3      	ldrb	r3, [r0, #7]
 801fc48:	6101      	str	r1, [r0, #16]
 801fc4a:	f365 0306 	bfi	r3, r5, #0, #7
 801fc4e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fc52:	8282      	strh	r2, [r0, #20]
 801fc54:	f365 13c7 	bfi	r3, r5, #7, #1
 801fc58:	71c3      	strb	r3, [r0, #7]
 801fc5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801fc5e:	7203      	strb	r3, [r0, #8]
 801fc60:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801fc64:	7243      	strb	r3, [r0, #9]
 801fc66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fc6a:	8143      	strh	r3, [r0, #10]
 801fc6c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801fc70:	8183      	strh	r3, [r0, #12]
 801fc72:	4b01      	ldr	r3, [pc, #4]	; (801fc78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801fc74:	6003      	str	r3, [r0, #0]
 801fc76:	bd30      	pop	{r4, r5, pc}
 801fc78:	08030074 	.word	0x08030074

0801fc7c <_ZNK8touchgfx9ConstFont4findEt>:
 801fc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc7e:	8a84      	ldrh	r4, [r0, #20]
 801fc80:	2500      	movs	r5, #0
 801fc82:	260e      	movs	r6, #14
 801fc84:	3c01      	subs	r4, #1
 801fc86:	42a5      	cmp	r5, r4
 801fc88:	dc0c      	bgt.n	801fca4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801fc8a:	192a      	adds	r2, r5, r4
 801fc8c:	6903      	ldr	r3, [r0, #16]
 801fc8e:	1052      	asrs	r2, r2, #1
 801fc90:	fb06 3302 	mla	r3, r6, r2, r3
 801fc94:	889f      	ldrh	r7, [r3, #4]
 801fc96:	428f      	cmp	r7, r1
 801fc98:	d901      	bls.n	801fc9e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801fc9a:	1e54      	subs	r4, r2, #1
 801fc9c:	e7f3      	b.n	801fc86 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801fc9e:	d202      	bcs.n	801fca6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801fca0:	1c55      	adds	r5, r2, #1
 801fca2:	e7f0      	b.n	801fc86 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801fca4:	2300      	movs	r3, #0
 801fca6:	4618      	mov	r0, r3
 801fca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fcaa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801fcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcac:	4605      	mov	r5, r0
 801fcae:	4617      	mov	r7, r2
 801fcb0:	461e      	mov	r6, r3
 801fcb2:	f7ff ffe3 	bl	801fc7c <_ZNK8touchgfx9ConstFont4findEt>
 801fcb6:	b9e0      	cbnz	r0, 801fcf2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801fcb8:	b911      	cbnz	r1, 801fcc0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801fcba:	2400      	movs	r4, #0
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcc0:	290a      	cmp	r1, #10
 801fcc2:	d0fa      	beq.n	801fcba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fcc4:	682b      	ldr	r3, [r5, #0]
 801fcc6:	4628      	mov	r0, r5
 801fcc8:	691b      	ldr	r3, [r3, #16]
 801fcca:	4798      	blx	r3
 801fccc:	4601      	mov	r1, r0
 801fcce:	4628      	mov	r0, r5
 801fcd0:	f7ff ffd4 	bl	801fc7c <_ZNK8touchgfx9ConstFont4findEt>
 801fcd4:	4604      	mov	r4, r0
 801fcd6:	2800      	cmp	r0, #0
 801fcd8:	d0ef      	beq.n	801fcba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fcda:	682b      	ldr	r3, [r5, #0]
 801fcdc:	4621      	mov	r1, r4
 801fcde:	4628      	mov	r0, r5
 801fce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fce2:	4798      	blx	r3
 801fce4:	6038      	str	r0, [r7, #0]
 801fce6:	682b      	ldr	r3, [r5, #0]
 801fce8:	4628      	mov	r0, r5
 801fcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fcec:	4798      	blx	r3
 801fcee:	7030      	strb	r0, [r6, #0]
 801fcf0:	e7e4      	b.n	801fcbc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801fcf2:	4604      	mov	r4, r0
 801fcf4:	e7f1      	b.n	801fcda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801fcf6 <_ZN8touchgfx6memsetEPvhm>:
 801fcf6:	4402      	add	r2, r0
 801fcf8:	4290      	cmp	r0, r2
 801fcfa:	d002      	beq.n	801fd02 <_ZN8touchgfx6memsetEPvhm+0xc>
 801fcfc:	f800 1b01 	strb.w	r1, [r0], #1
 801fd00:	e7fa      	b.n	801fcf8 <_ZN8touchgfx6memsetEPvhm+0x2>
 801fd02:	4770      	bx	lr

0801fd04 <_ZN8touchgfx3clzEl>:
 801fd04:	b1e8      	cbz	r0, 801fd42 <_ZN8touchgfx3clzEl+0x3e>
 801fd06:	2800      	cmp	r0, #0
 801fd08:	bfb8      	it	lt
 801fd0a:	4240      	neglt	r0, r0
 801fd0c:	0c03      	lsrs	r3, r0, #16
 801fd0e:	041b      	lsls	r3, r3, #16
 801fd10:	b9ab      	cbnz	r3, 801fd3e <_ZN8touchgfx3clzEl+0x3a>
 801fd12:	0400      	lsls	r0, r0, #16
 801fd14:	2310      	movs	r3, #16
 801fd16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fd1a:	bf04      	itt	eq
 801fd1c:	0200      	lsleq	r0, r0, #8
 801fd1e:	3308      	addeq	r3, #8
 801fd20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fd24:	bf04      	itt	eq
 801fd26:	0100      	lsleq	r0, r0, #4
 801fd28:	3304      	addeq	r3, #4
 801fd2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fd2e:	bf04      	itt	eq
 801fd30:	0080      	lsleq	r0, r0, #2
 801fd32:	3302      	addeq	r3, #2
 801fd34:	2800      	cmp	r0, #0
 801fd36:	bfa8      	it	ge
 801fd38:	3301      	addge	r3, #1
 801fd3a:	1e58      	subs	r0, r3, #1
 801fd3c:	4770      	bx	lr
 801fd3e:	2300      	movs	r3, #0
 801fd40:	e7e9      	b.n	801fd16 <_ZN8touchgfx3clzEl+0x12>
 801fd42:	201f      	movs	r0, #31
 801fd44:	4770      	bx	lr

0801fd46 <_ZN8touchgfx6muldivElllRl>:
 801fd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd4a:	4604      	mov	r4, r0
 801fd4c:	4698      	mov	r8, r3
 801fd4e:	2601      	movs	r6, #1
 801fd50:	f7ff ffd8 	bl	801fd04 <_ZN8touchgfx3clzEl>
 801fd54:	2c00      	cmp	r4, #0
 801fd56:	fa04 f500 	lsl.w	r5, r4, r0
 801fd5a:	fa06 f600 	lsl.w	r6, r6, r0
 801fd5e:	bfba      	itte	lt
 801fd60:	f04f 37ff 	movlt.w	r7, #4294967295
 801fd64:	4264      	neglt	r4, r4
 801fd66:	2701      	movge	r7, #1
 801fd68:	2900      	cmp	r1, #0
 801fd6a:	f106 36ff 	add.w	r6, r6, #4294967295
 801fd6e:	bfbc      	itt	lt
 801fd70:	4249      	neglt	r1, r1
 801fd72:	427f      	neglt	r7, r7
 801fd74:	2a00      	cmp	r2, #0
 801fd76:	fa41 fc00 	asr.w	ip, r1, r0
 801fd7a:	ea01 0106 	and.w	r1, r1, r6
 801fd7e:	bfb8      	it	lt
 801fd80:	427f      	neglt	r7, r7
 801fd82:	fb04 f401 	mul.w	r4, r4, r1
 801fd86:	fb95 f3f2 	sdiv	r3, r5, r2
 801fd8a:	fb02 5513 	mls	r5, r2, r3, r5
 801fd8e:	bfb8      	it	lt
 801fd90:	4252      	neglt	r2, r2
 801fd92:	fb94 f0f2 	sdiv	r0, r4, r2
 801fd96:	fb02 4410 	mls	r4, r2, r0, r4
 801fd9a:	fb0c 4405 	mla	r4, ip, r5, r4
 801fd9e:	fb94 f1f2 	sdiv	r1, r4, r2
 801fda2:	4408      	add	r0, r1
 801fda4:	fb02 4211 	mls	r2, r2, r1, r4
 801fda8:	fb0c 0003 	mla	r0, ip, r3, r0
 801fdac:	f8c8 2000 	str.w	r2, [r8]
 801fdb0:	4378      	muls	r0, r7
 801fdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fdb6 <_ZN8touchgfx10ClickEventD1Ev>:
 801fdb6:	4770      	bx	lr

0801fdb8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801fdb8:	2000      	movs	r0, #0
 801fdba:	4770      	bx	lr

0801fdbc <_ZN8touchgfx9DragEventD1Ev>:
 801fdbc:	4770      	bx	lr

0801fdbe <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801fdbe:	2001      	movs	r0, #1
 801fdc0:	4770      	bx	lr

0801fdc2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801fdc2:	2002      	movs	r0, #2
 801fdc4:	4770      	bx	lr

0801fdc6 <_ZN8touchgfx12GestureEventD1Ev>:
 801fdc6:	4770      	bx	lr

0801fdc8 <_ZN8touchgfx10ClickEventD0Ev>:
 801fdc8:	b510      	push	{r4, lr}
 801fdca:	4604      	mov	r4, r0
 801fdcc:	210c      	movs	r1, #12
 801fdce:	f00b fa4e 	bl	802b26e <_ZdlPvj>
 801fdd2:	4620      	mov	r0, r4
 801fdd4:	bd10      	pop	{r4, pc}

0801fdd6 <_ZN8touchgfx9DragEventD0Ev>:
 801fdd6:	b510      	push	{r4, lr}
 801fdd8:	4604      	mov	r4, r0
 801fdda:	2110      	movs	r1, #16
 801fddc:	f00b fa47 	bl	802b26e <_ZdlPvj>
 801fde0:	4620      	mov	r0, r4
 801fde2:	bd10      	pop	{r4, pc}

0801fde4 <_ZN8touchgfx12GestureEventD0Ev>:
 801fde4:	b510      	push	{r4, lr}
 801fde6:	4604      	mov	r4, r0
 801fde8:	210c      	movs	r1, #12
 801fdea:	f00b fa40 	bl	802b26e <_ZdlPvj>
 801fdee:	4620      	mov	r0, r4
 801fdf0:	bd10      	pop	{r4, pc}
	...

0801fdf4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801fdf4:	b530      	push	{r4, r5, lr}
 801fdf6:	460d      	mov	r5, r1
 801fdf8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fdfa:	b087      	sub	sp, #28
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	b301      	cbz	r1, 801fe42 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801fe00:	a801      	add	r0, sp, #4
 801fe02:	f7ff ff06 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe06:	892a      	ldrh	r2, [r5, #8]
 801fe08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fe0c:	7928      	ldrb	r0, [r5, #4]
 801fe0e:	1ad2      	subs	r2, r2, r3
 801fe10:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fe12:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fe16:	441a      	add	r2, r3
 801fe18:	896b      	ldrh	r3, [r5, #10]
 801fe1a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801fe1e:	f88d 0010 	strb.w	r0, [sp, #16]
 801fe22:	1b5b      	subs	r3, r3, r5
 801fe24:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801fe26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fe28:	442b      	add	r3, r5
 801fe2a:	4d07      	ldr	r5, [pc, #28]	; (801fe48 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801fe2c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801fe30:	a903      	add	r1, sp, #12
 801fe32:	9503      	str	r5, [sp, #12]
 801fe34:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fe38:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fe3c:	6803      	ldr	r3, [r0, #0]
 801fe3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fe40:	4798      	blx	r3
 801fe42:	b007      	add	sp, #28
 801fe44:	bd30      	pop	{r4, r5, pc}
 801fe46:	bf00      	nop
 801fe48:	080300f0 	.word	0x080300f0

0801fe4c <_ZNK8touchgfx4Rect9intersectEss>:
 801fe4c:	b510      	push	{r4, lr}
 801fe4e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801fe52:	428b      	cmp	r3, r1
 801fe54:	dc10      	bgt.n	801fe78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe56:	8884      	ldrh	r4, [r0, #4]
 801fe58:	4423      	add	r3, r4
 801fe5a:	b21b      	sxth	r3, r3
 801fe5c:	4299      	cmp	r1, r3
 801fe5e:	da0b      	bge.n	801fe78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe60:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801fe64:	4293      	cmp	r3, r2
 801fe66:	dc07      	bgt.n	801fe78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801fe68:	88c0      	ldrh	r0, [r0, #6]
 801fe6a:	4418      	add	r0, r3
 801fe6c:	b200      	sxth	r0, r0
 801fe6e:	4282      	cmp	r2, r0
 801fe70:	bfac      	ite	ge
 801fe72:	2000      	movge	r0, #0
 801fe74:	2001      	movlt	r0, #1
 801fe76:	bd10      	pop	{r4, pc}
 801fe78:	2000      	movs	r0, #0
 801fe7a:	e7fc      	b.n	801fe76 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801fe7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801fe7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe7e:	460c      	mov	r4, r1
 801fe80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fe82:	b089      	sub	sp, #36	; 0x24
 801fe84:	4605      	mov	r5, r0
 801fe86:	2900      	cmp	r1, #0
 801fe88:	d054      	beq.n	801ff34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801fe8a:	4668      	mov	r0, sp
 801fe8c:	f7ff fec1 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe90:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801fe92:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801fe94:	4668      	mov	r0, sp
 801fe96:	8922      	ldrh	r2, [r4, #8]
 801fe98:	88e1      	ldrh	r1, [r4, #6]
 801fe9a:	443a      	add	r2, r7
 801fe9c:	4431      	add	r1, r6
 801fe9e:	b212      	sxth	r2, r2
 801fea0:	b209      	sxth	r1, r1
 801fea2:	f7ff ffd3 	bl	801fe4c <_ZNK8touchgfx4Rect9intersectEss>
 801fea6:	b1d0      	cbz	r0, 801fede <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801fea8:	89a2      	ldrh	r2, [r4, #12]
 801feaa:	4668      	mov	r0, sp
 801feac:	8961      	ldrh	r1, [r4, #10]
 801feae:	443a      	add	r2, r7
 801feb0:	4431      	add	r1, r6
 801feb2:	b212      	sxth	r2, r2
 801feb4:	b209      	sxth	r1, r1
 801feb6:	f7ff ffc9 	bl	801fe4c <_ZNK8touchgfx4Rect9intersectEss>
 801feba:	4603      	mov	r3, r0
 801febc:	b978      	cbnz	r0, 801fede <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801febe:	4a1e      	ldr	r2, [pc, #120]	; (801ff38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801fec0:	a904      	add	r1, sp, #16
 801fec2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fec4:	9204      	str	r2, [sp, #16]
 801fec6:	2202      	movs	r2, #2
 801fec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fecc:	f88d 2014 	strb.w	r2, [sp, #20]
 801fed0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fed4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fed8:	6803      	ldr	r3, [r0, #0]
 801feda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fedc:	4798      	blx	r3
 801fede:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801fee0:	a802      	add	r0, sp, #8
 801fee2:	f7ff fe96 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fee6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801feea:	88e0      	ldrh	r0, [r4, #6]
 801feec:	8961      	ldrh	r1, [r4, #10]
 801feee:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801fef2:	1a80      	subs	r0, r0, r2
 801fef4:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801fef8:	1a89      	subs	r1, r1, r2
 801fefa:	8923      	ldrh	r3, [r4, #8]
 801fefc:	4460      	add	r0, ip
 801fefe:	89a2      	ldrh	r2, [r4, #12]
 801ff00:	4461      	add	r1, ip
 801ff02:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ff04:	eba3 030e 	sub.w	r3, r3, lr
 801ff08:	eba2 020e 	sub.w	r2, r2, lr
 801ff0c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ff10:	7927      	ldrb	r7, [r4, #4]
 801ff12:	4433      	add	r3, r6
 801ff14:	4432      	add	r2, r6
 801ff16:	4c09      	ldr	r4, [pc, #36]	; (801ff3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801ff18:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ff1a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ff1e:	a904      	add	r1, sp, #16
 801ff20:	9404      	str	r4, [sp, #16]
 801ff22:	f88d 7014 	strb.w	r7, [sp, #20]
 801ff26:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ff2a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ff2e:	6803      	ldr	r3, [r0, #0]
 801ff30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff32:	4798      	blx	r3
 801ff34:	b009      	add	sp, #36	; 0x24
 801ff36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff38:	080300c8 	.word	0x080300c8
 801ff3c:	080300dc 	.word	0x080300dc

0801ff40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff44:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801ff48:	b0a1      	sub	sp, #132	; 0x84
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	460d      	mov	r5, r1
 801ff4e:	790b      	ldrb	r3, [r1, #4]
 801ff50:	f1b9 0f00 	cmp.w	r9, #0
 801ff54:	d00f      	beq.n	801ff76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	f040 80a2 	bne.w	80200a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ff5c:	b021      	add	sp, #132	; 0x84
 801ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff62:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ff66:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ff6a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ff6e:	1d20      	adds	r0, r4, #4
 801ff70:	f7fb f99a 	bl	801b2a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ff74:	e094      	b.n	80200a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d1f0      	bne.n	801ff5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ff7a:	4b5f      	ldr	r3, [pc, #380]	; (80200f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ff7c:	681b      	ldr	r3, [r3, #0]
 801ff7e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801ff82:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801ff86:	f1ba 0f03 	cmp.w	sl, #3
 801ff8a:	ddea      	ble.n	801ff62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801ff8c:	f1ba 0f0c 	cmp.w	sl, #12
 801ff90:	f04f 0303 	mov.w	r3, #3
 801ff94:	f04f 0600 	mov.w	r6, #0
 801ff98:	4958      	ldr	r1, [pc, #352]	; (80200fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801ff9a:	bfd8      	it	le
 801ff9c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801ffa0:	960a      	str	r6, [sp, #40]	; 0x28
 801ffa2:	bfd8      	it	le
 801ffa4:	fb92 f3f3 	sdivle	r3, r2, r3
 801ffa8:	9301      	str	r3, [sp, #4]
 801ffaa:	4b55      	ldr	r3, [pc, #340]	; (8020100 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801ffac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ffb0:	4b54      	ldr	r3, [pc, #336]	; (8020104 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801ffb2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801ffb6:	2248      	movs	r2, #72	; 0x48
 801ffb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ffbc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ffc0:	ab0e      	add	r3, sp, #56	; 0x38
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	f00b f9fc 	bl	802b3c0 <memcpy>
 801ffc8:	f04f 32ff 	mov.w	r2, #4294967295
 801ffcc:	f8cd a008 	str.w	sl, [sp, #8]
 801ffd0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801ffd4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ffd8:	46b3      	mov	fp, r6
 801ffda:	fb93 f3f2 	sdiv	r3, r3, r2
 801ffde:	b29b      	uxth	r3, r3
 801ffe0:	9303      	str	r3, [sp, #12]
 801ffe2:	2300      	movs	r3, #0
 801ffe4:	9a03      	ldr	r2, [sp, #12]
 801ffe6:	88ef      	ldrh	r7, [r5, #6]
 801ffe8:	a80a      	add	r0, sp, #40	; 0x28
 801ffea:	9309      	str	r3, [sp, #36]	; 0x24
 801ffec:	9b07      	ldr	r3, [sp, #28]
 801ffee:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801fff2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801fff6:	fb13 f302 	smulbb	r3, r3, r2
 801fffa:	b29b      	uxth	r3, r3
 801fffc:	9304      	str	r3, [sp, #16]
 801fffe:	9b07      	ldr	r3, [sp, #28]
 8020000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020004:	685b      	ldr	r3, [r3, #4]
 8020006:	fb13 f302 	smulbb	r3, r3, r2
 802000a:	b29b      	uxth	r3, r3
 802000c:	9305      	str	r3, [sp, #20]
 802000e:	9b04      	ldr	r3, [sp, #16]
 8020010:	441f      	add	r7, r3
 8020012:	9b05      	ldr	r3, [sp, #20]
 8020014:	4498      	add	r8, r3
 8020016:	b23f      	sxth	r7, r7
 8020018:	fa0f f888 	sxth.w	r8, r8
 802001c:	4639      	mov	r1, r7
 802001e:	4642      	mov	r2, r8
 8020020:	f7ff ff14 	bl	801fe4c <_ZNK8touchgfx4Rect9intersectEss>
 8020024:	b380      	cbz	r0, 8020088 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8020026:	4639      	mov	r1, r7
 8020028:	ab09      	add	r3, sp, #36	; 0x24
 802002a:	4642      	mov	r2, r8
 802002c:	1d20      	adds	r0, r4, #4
 802002e:	f7fb f93b 	bl	801b2a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8020032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020034:	b341      	cbz	r1, 8020088 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8020036:	4549      	cmp	r1, r9
 8020038:	d026      	beq.n	8020088 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 802003a:	a80c      	add	r0, sp, #48	; 0x30
 802003c:	f7ff fde9 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020040:	2002      	movs	r0, #2
 8020042:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020046:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802004a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 802004e:	fb92 f2f0 	sdiv	r2, r2, r0
 8020052:	440a      	add	r2, r1
 8020054:	1a99      	subs	r1, r3, r2
 8020056:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802005a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 802005e:	fb93 f3f0 	sdiv	r3, r3, r0
 8020062:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8020066:	4403      	add	r3, r0
 8020068:	1ad3      	subs	r3, r2, r3
 802006a:	9a06      	ldr	r2, [sp, #24]
 802006c:	435b      	muls	r3, r3
 802006e:	fb01 3301 	mla	r3, r1, r1, r3
 8020072:	4293      	cmp	r3, r2
 8020074:	d208      	bcs.n	8020088 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8020076:	9a04      	ldr	r2, [sp, #16]
 8020078:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802007c:	86a2      	strh	r2, [r4, #52]	; 0x34
 802007e:	9a05      	ldr	r2, [sp, #20]
 8020080:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8020084:	86e2      	strh	r2, [r4, #54]	; 0x36
 8020086:	9306      	str	r3, [sp, #24]
 8020088:	f10b 0b02 	add.w	fp, fp, #2
 802008c:	f1bb 0f08 	cmp.w	fp, #8
 8020090:	dda7      	ble.n	801ffe2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8020092:	9b02      	ldr	r3, [sp, #8]
 8020094:	3601      	adds	r6, #1
 8020096:	4453      	add	r3, sl
 8020098:	9302      	str	r3, [sp, #8]
 802009a:	9b01      	ldr	r3, [sp, #4]
 802009c:	42b3      	cmp	r3, r6
 802009e:	d199      	bne.n	801ffd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 80200a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80200a2:	2900      	cmp	r1, #0
 80200a4:	f43f af5a 	beq.w	801ff5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80200a8:	a80c      	add	r0, sp, #48	; 0x30
 80200aa:	2600      	movs	r6, #0
 80200ac:	f7ff fdb1 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80200b0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80200b4:	88ea      	ldrh	r2, [r5, #6]
 80200b6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80200ba:	1ad2      	subs	r2, r2, r3
 80200bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80200be:	7929      	ldrb	r1, [r5, #4]
 80200c0:	441a      	add	r2, r3
 80200c2:	892b      	ldrh	r3, [r5, #8]
 80200c4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80200c8:	a90e      	add	r1, sp, #56	; 0x38
 80200ca:	1a1b      	subs	r3, r3, r0
 80200cc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80200ce:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80200d2:	4403      	add	r3, r0
 80200d4:	480c      	ldr	r0, [pc, #48]	; (8020108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80200d6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80200da:	900e      	str	r0, [sp, #56]	; 0x38
 80200dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80200de:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80200e2:	6803      	ldr	r3, [r0, #0]
 80200e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80200e6:	4798      	blx	r3
 80200e8:	792b      	ldrb	r3, [r5, #4]
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	f43f af36 	beq.w	801ff5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80200f0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80200f4:	e732      	b.n	801ff5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80200f6:	bf00      	nop
 80200f8:	2000bfd0 	.word	0x2000bfd0
 80200fc:	0802cc78 	.word	0x0802cc78
 8020100:	2000bfc2 	.word	0x2000bfc2
 8020104:	2000bfc4 	.word	0x2000bfc4
 8020108:	080300c8 	.word	0x080300c8

0802010c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 802010c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802010e:	4604      	mov	r4, r0
 8020110:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8020114:	3201      	adds	r2, #1
 8020116:	d112      	bne.n	802013e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8020118:	2500      	movs	r5, #0
 802011a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 802011e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020122:	6803      	ldr	r3, [r0, #0]
 8020124:	9500      	str	r5, [sp, #0]
 8020126:	466d      	mov	r5, sp
 8020128:	f8ad 1004 	strh.w	r1, [sp, #4]
 802012c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8020130:	4629      	mov	r1, r5
 8020132:	6a1b      	ldr	r3, [r3, #32]
 8020134:	4798      	blx	r3
 8020136:	e895 0003 	ldmia.w	r5, {r0, r1}
 802013a:	e884 0003 	stmia.w	r4, {r0, r1}
 802013e:	4620      	mov	r0, r4
 8020140:	b003      	add	sp, #12
 8020142:	bd30      	pop	{r4, r5, pc}

08020144 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8020144:	b513      	push	{r0, r1, r4, lr}
 8020146:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 802014a:	4604      	mov	r4, r0
 802014c:	3301      	adds	r3, #1
 802014e:	d109      	bne.n	8020164 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8020150:	4601      	mov	r1, r0
 8020152:	4668      	mov	r0, sp
 8020154:	f7ff fd5d 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020158:	f8bd 3000 	ldrh.w	r3, [sp]
 802015c:	8423      	strh	r3, [r4, #32]
 802015e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020162:	8463      	strh	r3, [r4, #34]	; 0x22
 8020164:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8020168:	b002      	add	sp, #8
 802016a:	bd10      	pop	{r4, pc}

0802016c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 802016c:	b513      	push	{r0, r1, r4, lr}
 802016e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8020172:	4604      	mov	r4, r0
 8020174:	3301      	adds	r3, #1
 8020176:	d109      	bne.n	802018c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8020178:	4601      	mov	r1, r0
 802017a:	4668      	mov	r0, sp
 802017c:	f7ff fd49 	bl	801fc12 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8020180:	f8bd 3000 	ldrh.w	r3, [sp]
 8020184:	8423      	strh	r3, [r4, #32]
 8020186:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 802018a:	8463      	strh	r3, [r4, #34]	; 0x22
 802018c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8020190:	b002      	add	sp, #8
 8020192:	bd10      	pop	{r4, pc}

08020194 <_ZN8touchgfx6ScreenC1Ev>:
 8020194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020196:	4605      	mov	r5, r0
 8020198:	4b17      	ldr	r3, [pc, #92]	; (80201f8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 802019a:	2200      	movs	r2, #0
 802019c:	4917      	ldr	r1, [pc, #92]	; (80201fc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 802019e:	f845 3b04 	str.w	r3, [r5], #4
 80201a2:	2301      	movs	r3, #1
 80201a4:	8102      	strh	r2, [r0, #8]
 80201a6:	4604      	mov	r4, r0
 80201a8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80201ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80201b0:	4b13      	ldr	r3, [pc, #76]	; (8020200 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80201b2:	8142      	strh	r2, [r0, #10]
 80201b4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80201b8:	4b12      	ldr	r3, [pc, #72]	; (8020204 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80201ba:	8182      	strh	r2, [r0, #12]
 80201bc:	81c2      	strh	r2, [r0, #14]
 80201be:	8202      	strh	r2, [r0, #16]
 80201c0:	8242      	strh	r2, [r0, #18]
 80201c2:	8282      	strh	r2, [r0, #20]
 80201c4:	82c2      	strh	r2, [r0, #22]
 80201c6:	6202      	str	r2, [r0, #32]
 80201c8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80201cc:	6342      	str	r2, [r0, #52]	; 0x34
 80201ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80201d2:	6041      	str	r1, [r0, #4]
 80201d4:	4611      	mov	r1, r2
 80201d6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80201da:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80201de:	4628      	mov	r0, r5
 80201e0:	f7f2 f978 	bl	80124d4 <_ZN8touchgfx8Drawable5setXYEss>
 80201e4:	4639      	mov	r1, r7
 80201e6:	4628      	mov	r0, r5
 80201e8:	f7f2 f992 	bl	8012510 <_ZN8touchgfx8Drawable8setWidthEs>
 80201ec:	4628      	mov	r0, r5
 80201ee:	4631      	mov	r1, r6
 80201f0:	f7f2 f99d 	bl	801252e <_ZN8touchgfx8Drawable9setHeightEs>
 80201f4:	4620      	mov	r0, r4
 80201f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201f8:	08030104 	.word	0x08030104
 80201fc:	0802e6f8 	.word	0x0802e6f8
 8020200:	2000bfc2 	.word	0x2000bfc2
 8020204:	2000bfc4 	.word	0x2000bfc4

08020208 <_ZN8touchgfx6Screen4drawEv>:
 8020208:	4b09      	ldr	r3, [pc, #36]	; (8020230 <_ZN8touchgfx6Screen4drawEv+0x28>)
 802020a:	b507      	push	{r0, r1, r2, lr}
 802020c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020210:	2100      	movs	r1, #0
 8020212:	4b08      	ldr	r3, [pc, #32]	; (8020234 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8020214:	9100      	str	r1, [sp, #0]
 8020216:	4669      	mov	r1, sp
 8020218:	f9b3 3000 	ldrsh.w	r3, [r3]
 802021c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020220:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020224:	6803      	ldr	r3, [r0, #0]
 8020226:	689b      	ldr	r3, [r3, #8]
 8020228:	4798      	blx	r3
 802022a:	b003      	add	sp, #12
 802022c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020230:	2000bfc2 	.word	0x2000bfc2
 8020234:	2000bfc4 	.word	0x2000bfc4

08020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8020238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802023c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020240:	b089      	sub	sp, #36	; 0x24
 8020242:	4680      	mov	r8, r0
 8020244:	460c      	mov	r4, r1
 8020246:	4615      	mov	r5, r2
 8020248:	b16b      	cbz	r3, 8020266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 802024a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802024e:	b153      	cbz	r3, 8020266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8020250:	4628      	mov	r0, r5
 8020252:	f7ff ff5b 	bl	802010c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020256:	4621      	mov	r1, r4
 8020258:	f7fe ffc2 	bl	801f1e0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 802025c:	69eb      	ldr	r3, [r5, #28]
 802025e:	b928      	cbnz	r0, 802026c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8020260:	461d      	mov	r5, r3
 8020262:	2b00      	cmp	r3, #0
 8020264:	d1f4      	bne.n	8020250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8020266:	b009      	add	sp, #36	; 0x24
 8020268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802026c:	ae04      	add	r6, sp, #16
 802026e:	2b00      	cmp	r3, #0
 8020270:	d051      	beq.n	8020316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8020272:	682b      	ldr	r3, [r5, #0]
 8020274:	4629      	mov	r1, r5
 8020276:	a802      	add	r0, sp, #8
 8020278:	68db      	ldr	r3, [r3, #12]
 802027a:	4798      	blx	r3
 802027c:	4628      	mov	r0, r5
 802027e:	f7ff ff61 	bl	8020144 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020282:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8020286:	4407      	add	r7, r0
 8020288:	4628      	mov	r0, r5
 802028a:	f7ff ff6f 	bl	802016c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 802028e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020292:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8020296:	b23f      	sxth	r7, r7
 8020298:	4418      	add	r0, r3
 802029a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802029e:	4621      	mov	r1, r4
 80202a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80202a4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80202a8:	4630      	mov	r0, r6
 80202aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80202ae:	f8ad 7010 	strh.w	r7, [sp, #16]
 80202b2:	f7fb f8ab 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 80202b6:	4628      	mov	r0, r5
 80202b8:	f7ff ff28 	bl	802010c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80202bc:	ab06      	add	r3, sp, #24
 80202be:	4602      	mov	r2, r0
 80202c0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80202c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80202c8:	4611      	mov	r1, r2
 80202ca:	4618      	mov	r0, r3
 80202cc:	f7fb f89e 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 80202d0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80202d4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80202d8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80202dc:	4299      	cmp	r1, r3
 80202de:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80202e2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80202e6:	d10b      	bne.n	8020300 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80202e8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80202ec:	4552      	cmp	r2, sl
 80202ee:	d107      	bne.n	8020300 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80202f0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80202f4:	455a      	cmp	r2, fp
 80202f6:	d103      	bne.n	8020300 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80202f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80202fc:	454a      	cmp	r2, r9
 80202fe:	d00a      	beq.n	8020316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8020300:	f1bb 0f00 	cmp.w	fp, #0
 8020304:	d002      	beq.n	802030c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8020306:	f1b9 0f00 	cmp.w	r9, #0
 802030a:	d12e      	bne.n	802036a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 802030c:	69ea      	ldr	r2, [r5, #28]
 802030e:	4621      	mov	r1, r4
 8020310:	4640      	mov	r0, r8
 8020312:	f7ff ff91 	bl	8020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020316:	4628      	mov	r0, r5
 8020318:	f7ff fef8 	bl	802010c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 802031c:	6861      	ldr	r1, [r4, #4]
 802031e:	4602      	mov	r2, r0
 8020320:	4633      	mov	r3, r6
 8020322:	6820      	ldr	r0, [r4, #0]
 8020324:	c303      	stmia	r3!, {r0, r1}
 8020326:	4611      	mov	r1, r2
 8020328:	4630      	mov	r0, r6
 802032a:	f7fb f86f 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 802032e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d097      	beq.n	8020266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8020336:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802033a:	2b00      	cmp	r3, #0
 802033c:	d093      	beq.n	8020266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 802033e:	4628      	mov	r0, r5
 8020340:	f7ff ff00 	bl	8020144 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020344:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020348:	1a18      	subs	r0, r3, r0
 802034a:	f8ad 0010 	strh.w	r0, [sp, #16]
 802034e:	4628      	mov	r0, r5
 8020350:	f7ff ff0c 	bl	802016c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020354:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020358:	4631      	mov	r1, r6
 802035a:	1a18      	subs	r0, r3, r0
 802035c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8020360:	4628      	mov	r0, r5
 8020362:	682b      	ldr	r3, [r5, #0]
 8020364:	689b      	ldr	r3, [r3, #8]
 8020366:	4798      	blx	r3
 8020368:	e77d      	b.n	8020266 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 802036a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802036e:	fa1f f08a 	uxth.w	r0, sl
 8020372:	4552      	cmp	r2, sl
 8020374:	9000      	str	r0, [sp, #0]
 8020376:	da12      	bge.n	802039e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8020378:	9301      	str	r3, [sp, #4]
 802037a:	9b00      	ldr	r3, [sp, #0]
 802037c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020380:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020384:	1a9a      	subs	r2, r3, r2
 8020386:	f8ad 1010 	strh.w	r1, [sp, #16]
 802038a:	4631      	mov	r1, r6
 802038c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8020390:	4640      	mov	r0, r8
 8020392:	f8ad 2016 	strh.w	r2, [sp, #22]
 8020396:	69ea      	ldr	r2, [r5, #28]
 8020398:	f7ff ff4e 	bl	8020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802039c:	9b01      	ldr	r3, [sp, #4]
 802039e:	f9b4 2000 	ldrsh.w	r2, [r4]
 80203a2:	b29f      	uxth	r7, r3
 80203a4:	429a      	cmp	r2, r3
 80203a6:	da0d      	bge.n	80203c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80203a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80203ac:	1aba      	subs	r2, r7, r2
 80203ae:	f8ad a012 	strh.w	sl, [sp, #18]
 80203b2:	4631      	mov	r1, r6
 80203b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80203b8:	4640      	mov	r0, r8
 80203ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 80203be:	69ea      	ldr	r2, [r5, #28]
 80203c0:	f7ff ff3a 	bl	8020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80203c4:	8822      	ldrh	r2, [r4, #0]
 80203c6:	445f      	add	r7, fp
 80203c8:	88a3      	ldrh	r3, [r4, #4]
 80203ca:	b2bf      	uxth	r7, r7
 80203cc:	4413      	add	r3, r2
 80203ce:	b23a      	sxth	r2, r7
 80203d0:	b29b      	uxth	r3, r3
 80203d2:	b219      	sxth	r1, r3
 80203d4:	4291      	cmp	r1, r2
 80203d6:	dd0d      	ble.n	80203f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 80203d8:	1bdb      	subs	r3, r3, r7
 80203da:	f8ad 2010 	strh.w	r2, [sp, #16]
 80203de:	f8ad a012 	strh.w	sl, [sp, #18]
 80203e2:	4631      	mov	r1, r6
 80203e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80203e8:	4640      	mov	r0, r8
 80203ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 80203ee:	69ea      	ldr	r2, [r5, #28]
 80203f0:	f7ff ff22 	bl	8020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80203f4:	88e2      	ldrh	r2, [r4, #6]
 80203f6:	8863      	ldrh	r3, [r4, #2]
 80203f8:	4413      	add	r3, r2
 80203fa:	9a00      	ldr	r2, [sp, #0]
 80203fc:	444a      	add	r2, r9
 80203fe:	b29b      	uxth	r3, r3
 8020400:	fa1f f982 	uxth.w	r9, r2
 8020404:	b219      	sxth	r1, r3
 8020406:	fa0f f289 	sxth.w	r2, r9
 802040a:	428a      	cmp	r2, r1
 802040c:	da83      	bge.n	8020316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 802040e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020412:	eba3 0309 	sub.w	r3, r3, r9
 8020416:	f9b4 0000 	ldrsh.w	r0, [r4]
 802041a:	f8ad 1014 	strh.w	r1, [sp, #20]
 802041e:	4631      	mov	r1, r6
 8020420:	f8ad 0010 	strh.w	r0, [sp, #16]
 8020424:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020428:	f8ad 3016 	strh.w	r3, [sp, #22]
 802042c:	69ea      	ldr	r2, [r5, #28]
 802042e:	e76f      	b.n	8020310 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08020430 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8020430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020432:	2300      	movs	r3, #0
 8020434:	aa02      	add	r2, sp, #8
 8020436:	4604      	mov	r4, r0
 8020438:	3004      	adds	r0, #4
 802043a:	f842 3d04 	str.w	r3, [r2, #-4]!
 802043e:	460d      	mov	r5, r1
 8020440:	f7fb f8bb 	bl	801b5ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8020444:	9a01      	ldr	r2, [sp, #4]
 8020446:	b11a      	cbz	r2, 8020450 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8020448:	4629      	mov	r1, r5
 802044a:	4620      	mov	r0, r4
 802044c:	f7ff fef4 	bl	8020238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020450:	b003      	add	sp, #12
 8020452:	bd30      	pop	{r4, r5, pc}

08020454 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020456:	4602      	mov	r2, r0
 8020458:	4604      	mov	r4, r0
 802045a:	460d      	mov	r5, r1
 802045c:	466b      	mov	r3, sp
 802045e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8020462:	6851      	ldr	r1, [r2, #4]
 8020464:	c303      	stmia	r3!, {r0, r1}
 8020466:	4629      	mov	r1, r5
 8020468:	4668      	mov	r0, sp
 802046a:	f7fa ffcf 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 802046e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020472:	4669      	mov	r1, sp
 8020474:	b123      	cbz	r3, 8020480 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8020476:	4620      	mov	r0, r4
 8020478:	f7ff ffda 	bl	8020430 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 802047c:	b003      	add	sp, #12
 802047e:	bd30      	pop	{r4, r5, pc}
 8020480:	1d20      	adds	r0, r4, #4
 8020482:	f7fb f861 	bl	801b548 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8020486:	e7f9      	b.n	802047c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08020488 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8020488:	460b      	mov	r3, r1
 802048a:	680a      	ldr	r2, [r1, #0]
 802048c:	1d01      	adds	r1, r0, #4
 802048e:	6952      	ldr	r2, [r2, #20]
 8020490:	4618      	mov	r0, r3
 8020492:	4710      	bx	r2

08020494 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 8020494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020498:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204a0:	bfcc      	ite	gt
 80204a2:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 80204a6:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80204aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80204ae:	ee10 3a10 	vmov	r3, s0
 80204b2:	b218      	sxth	r0, r3
 80204b4:	4770      	bx	lr

080204b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80204b6:	b510      	push	{r4, lr}
 80204b8:	4298      	cmp	r0, r3
 80204ba:	eb01 0402 	add.w	r4, r1, r2
 80204be:	b224      	sxth	r4, r4
 80204c0:	d21f      	bcs.n	8020502 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 80204c2:	b1f3      	cbz	r3, 8020502 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 80204c4:	ee07 0a90 	vmov	s15, r0
 80204c8:	ee06 1a10 	vmov	s12, r1
 80204cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80204d0:	ee07 3a90 	vmov	s15, r3
 80204d4:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 80204d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80204dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80204e0:	ee06 2a90 	vmov	s13, r2
 80204e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80204ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80204f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80204f4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80204f8:	eea6 0a87 	vfma.f32	s0, s13, s14
 80204fc:	f7ff ffca 	bl	8020494 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8020500:	4604      	mov	r4, r0
 8020502:	4620      	mov	r0, r4
 8020504:	bd10      	pop	{r4, pc}
	...

08020508 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8020508:	f011 0f40 	tst.w	r1, #64	; 0x40
 802050c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8020510:	4b03      	ldr	r3, [pc, #12]	; (8020520 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8020512:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020516:	bf08      	it	eq
 8020518:	2300      	moveq	r3, #0
 802051a:	4308      	orrs	r0, r1
 802051c:	4318      	orrs	r0, r3
 802051e:	4770      	bx	lr
 8020520:	fffffe00 	.word	0xfffffe00

08020524 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8020524:	7b43      	ldrb	r3, [r0, #13]
 8020526:	7201      	strb	r1, [r0, #8]
 8020528:	b289      	uxth	r1, r1
 802052a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 802052e:	05ca      	lsls	r2, r1, #23
 8020530:	bf48      	it	mi
 8020532:	f043 0320 	orrmi.w	r3, r3, #32
 8020536:	7343      	strb	r3, [r0, #13]
 8020538:	058b      	lsls	r3, r1, #22
 802053a:	bf42      	ittt	mi
 802053c:	7b43      	ldrbmi	r3, [r0, #13]
 802053e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8020542:	7343      	strbmi	r3, [r0, #13]
 8020544:	4770      	bx	lr

08020546 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8020546:	b530      	push	{r4, r5, lr}
 8020548:	2500      	movs	r5, #0
 802054a:	2401      	movs	r4, #1
 802054c:	6843      	ldr	r3, [r0, #4]
 802054e:	b913      	cbnz	r3, 8020556 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8020550:	6803      	ldr	r3, [r0, #0]
 8020552:	b1f3      	cbz	r3, 8020592 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8020554:	6043      	str	r3, [r0, #4]
 8020556:	7c03      	ldrb	r3, [r0, #16]
 8020558:	b143      	cbz	r3, 802056c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 802055a:	68c3      	ldr	r3, [r0, #12]
 802055c:	b12b      	cbz	r3, 802056a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 802055e:	881a      	ldrh	r2, [r3, #0]
 8020560:	b11a      	cbz	r2, 802056a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8020562:	1c9a      	adds	r2, r3, #2
 8020564:	60c2      	str	r2, [r0, #12]
 8020566:	8818      	ldrh	r0, [r3, #0]
 8020568:	bd30      	pop	{r4, r5, pc}
 802056a:	7405      	strb	r5, [r0, #16]
 802056c:	6843      	ldr	r3, [r0, #4]
 802056e:	8819      	ldrh	r1, [r3, #0]
 8020570:	b179      	cbz	r1, 8020592 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8020572:	1c9a      	adds	r2, r3, #2
 8020574:	2902      	cmp	r1, #2
 8020576:	6042      	str	r2, [r0, #4]
 8020578:	d1f5      	bne.n	8020566 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 802057a:	6883      	ldr	r3, [r0, #8]
 802057c:	1d1a      	adds	r2, r3, #4
 802057e:	6082      	str	r2, [r0, #8]
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	60c3      	str	r3, [r0, #12]
 8020584:	2b00      	cmp	r3, #0
 8020586:	d0e1      	beq.n	802054c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020588:	881b      	ldrh	r3, [r3, #0]
 802058a:	2b00      	cmp	r3, #0
 802058c:	d0de      	beq.n	802054c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 802058e:	7404      	strb	r4, [r0, #16]
 8020590:	e7dc      	b.n	802054c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8020592:	2000      	movs	r0, #0
 8020594:	e7e8      	b.n	8020568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08020596 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8020596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020598:	4605      	mov	r5, r0
 802059a:	4608      	mov	r0, r1
 802059c:	b1f1      	cbz	r1, 80205dc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 802059e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80205a2:	460b      	mov	r3, r1
 80205a4:	f101 0708 	add.w	r7, r1, #8
 80205a8:	4622      	mov	r2, r4
 80205aa:	6818      	ldr	r0, [r3, #0]
 80205ac:	3308      	adds	r3, #8
 80205ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80205b2:	4626      	mov	r6, r4
 80205b4:	42bb      	cmp	r3, r7
 80205b6:	c603      	stmia	r6!, {r0, r1}
 80205b8:	4634      	mov	r4, r6
 80205ba:	d1f6      	bne.n	80205aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80205bc:	6818      	ldr	r0, [r3, #0]
 80205be:	6030      	str	r0, [r6, #0]
 80205c0:	4610      	mov	r0, r2
 80205c2:	889b      	ldrh	r3, [r3, #4]
 80205c4:	80b3      	strh	r3, [r6, #4]
 80205c6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80205ca:	015b      	lsls	r3, r3, #5
 80205cc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80205d0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80205d4:	430b      	orrs	r3, r1
 80205d6:	425b      	negs	r3, r3
 80205d8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80205dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080205de <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80205de:	b538      	push	{r3, r4, r5, lr}
 80205e0:	460c      	mov	r4, r1
 80205e2:	6811      	ldr	r1, [r2, #0]
 80205e4:	4610      	mov	r0, r2
 80205e6:	68cd      	ldr	r5, [r1, #12]
 80205e8:	4619      	mov	r1, r3
 80205ea:	47a8      	blx	r5
 80205ec:	2800      	cmp	r0, #0
 80205ee:	bf08      	it	eq
 80205f0:	4620      	moveq	r0, r4
 80205f2:	bd38      	pop	{r3, r4, r5, pc}

080205f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80205f4:	b570      	push	{r4, r5, r6, lr}
 80205f6:	8810      	ldrh	r0, [r2, #0]
 80205f8:	4298      	cmp	r0, r3
 80205fa:	d817      	bhi.n	802062c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80205fc:	1e48      	subs	r0, r1, #1
 80205fe:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020602:	4298      	cmp	r0, r3
 8020604:	d312      	bcc.n	802062c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020606:	2400      	movs	r4, #0
 8020608:	428c      	cmp	r4, r1
 802060a:	d20f      	bcs.n	802062c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 802060c:	1860      	adds	r0, r4, r1
 802060e:	1040      	asrs	r0, r0, #1
 8020610:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020614:	0085      	lsls	r5, r0, #2
 8020616:	42b3      	cmp	r3, r6
 8020618:	d902      	bls.n	8020620 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 802061a:	3001      	adds	r0, #1
 802061c:	b284      	uxth	r4, r0
 802061e:	e7f3      	b.n	8020608 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020620:	d102      	bne.n	8020628 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8020622:	442a      	add	r2, r5
 8020624:	8850      	ldrh	r0, [r2, #2]
 8020626:	bd70      	pop	{r4, r5, r6, pc}
 8020628:	b281      	uxth	r1, r0
 802062a:	e7ed      	b.n	8020608 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 802062c:	2000      	movs	r0, #0
 802062e:	e7fa      	b.n	8020626 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

08020630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8020630:	b510      	push	{r4, lr}
 8020632:	8ac3      	ldrh	r3, [r0, #22]
 8020634:	428b      	cmp	r3, r1
 8020636:	d805      	bhi.n	8020644 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8020638:	4b07      	ldr	r3, [pc, #28]	; (8020658 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 802063a:	21fd      	movs	r1, #253	; 0xfd
 802063c:	4a07      	ldr	r2, [pc, #28]	; (802065c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 802063e:	4808      	ldr	r0, [pc, #32]	; (8020660 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8020640:	f00a fe40 	bl	802b2c4 <__assert_func>
 8020644:	8a83      	ldrh	r3, [r0, #20]
 8020646:	240a      	movs	r4, #10
 8020648:	4419      	add	r1, r3
 802064a:	fbb1 f3f4 	udiv	r3, r1, r4
 802064e:	fb04 1113 	mls	r1, r4, r3, r1
 8020652:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8020656:	bd10      	pop	{r4, pc}
 8020658:	08030151 	.word	0x08030151
 802065c:	08030580 	.word	0x08030580
 8020660:	0803015f 	.word	0x0803015f

08020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8020664:	b508      	push	{r3, lr}
 8020666:	8ac3      	ldrh	r3, [r0, #22]
 8020668:	428b      	cmp	r3, r1
 802066a:	d805      	bhi.n	8020678 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 802066c:	4b07      	ldr	r3, [pc, #28]	; (802068c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 802066e:	21d3      	movs	r1, #211	; 0xd3
 8020670:	4a07      	ldr	r2, [pc, #28]	; (8020690 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8020672:	4808      	ldr	r0, [pc, #32]	; (8020694 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8020674:	f00a fe26 	bl	802b2c4 <__assert_func>
 8020678:	8a83      	ldrh	r3, [r0, #20]
 802067a:	220a      	movs	r2, #10
 802067c:	4419      	add	r1, r3
 802067e:	fbb1 f3f2 	udiv	r3, r1, r2
 8020682:	fb02 1113 	mls	r1, r2, r3, r1
 8020686:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 802068a:	bd08      	pop	{r3, pc}
 802068c:	08030151 	.word	0x08030151
 8020690:	080302d0 	.word	0x080302d0
 8020694:	0803015f 	.word	0x0803015f

08020698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8020698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802069c:	4604      	mov	r4, r0
 802069e:	4688      	mov	r8, r1
 80206a0:	4615      	mov	r5, r2
 80206a2:	b94a      	cbnz	r2, 80206b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 80206a4:	4691      	mov	r9, r2
 80206a6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80206aa:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80206ae:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80206b2:	4648      	mov	r0, r9
 80206b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80206bc:	8892      	ldrh	r2, [r2, #4]
 80206be:	462b      	mov	r3, r5
 80206c0:	f105 0c08 	add.w	ip, r5, #8
 80206c4:	46b3      	mov	fp, r6
 80206c6:	6818      	ldr	r0, [r3, #0]
 80206c8:	3308      	adds	r3, #8
 80206ca:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80206ce:	4637      	mov	r7, r6
 80206d0:	4563      	cmp	r3, ip
 80206d2:	c703      	stmia	r7!, {r0, r1}
 80206d4:	463e      	mov	r6, r7
 80206d6:	d1f6      	bne.n	80206c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 80206d8:	6818      	ldr	r0, [r3, #0]
 80206da:	46d9      	mov	r9, fp
 80206dc:	6038      	str	r0, [r7, #0]
 80206de:	889b      	ldrh	r3, [r3, #4]
 80206e0:	80bb      	strh	r3, [r7, #4]
 80206e2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 80206e6:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 80206ea:	18d3      	adds	r3, r2, r3
 80206ec:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80206f0:	b298      	uxth	r0, r3
 80206f2:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 80206f6:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 80206fa:	281d      	cmp	r0, #29
 80206fc:	ea4a 0a01 	orr.w	sl, sl, r1
 8020700:	fa1f f68a 	uxth.w	r6, sl
 8020704:	d842      	bhi.n	802078c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8020706:	2301      	movs	r3, #1
 8020708:	4950      	ldr	r1, [pc, #320]	; (802084c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 802070a:	ea4f 0aea 	mov.w	sl, sl, asr #3
 802070e:	4083      	lsls	r3, r0
 8020710:	420b      	tst	r3, r1
 8020712:	d114      	bne.n	802073e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8020714:	f413 7f60 	tst.w	r3, #896	; 0x380
 8020718:	d03c      	beq.n	8020794 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 802071a:	fa1f fa8a 	uxth.w	sl, sl
 802071e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8020722:	4658      	mov	r0, fp
 8020724:	eba1 010a 	sub.w	r1, r1, sl
 8020728:	b209      	sxth	r1, r1
 802072a:	f7ff fefb 	bl	8020524 <_ZN8touchgfx9GlyphNode6setTopEs>
 802072e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8020732:	1b86      	subs	r6, r0, r6
 8020734:	eba6 0a0a 	sub.w	sl, r6, sl
 8020738:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 802073c:	e7b9      	b.n	80206b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802073e:	2100      	movs	r1, #0
 8020740:	f104 001a 	add.w	r0, r4, #26
 8020744:	f7ff ff8e 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020748:	f640 6333 	movw	r3, #3635	; 0xe33
 802074c:	4601      	mov	r1, r0
 802074e:	4298      	cmp	r0, r3
 8020750:	d10a      	bne.n	8020768 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8020752:	f8d8 3000 	ldr.w	r3, [r8]
 8020756:	4640      	mov	r0, r8
 8020758:	68db      	ldr	r3, [r3, #12]
 802075a:	4798      	blx	r3
 802075c:	7b41      	ldrb	r1, [r0, #13]
 802075e:	7a00      	ldrb	r0, [r0, #8]
 8020760:	f7ff fed2 	bl	8020508 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8020764:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8020768:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 802076c:	4658      	mov	r0, fp
 802076e:	4431      	add	r1, r6
 8020770:	4451      	add	r1, sl
 8020772:	b209      	sxth	r1, r1
 8020774:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8020778:	f7ff fed4 	bl	8020524 <_ZN8touchgfx9GlyphNode6setTopEs>
 802077c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8020780:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8020784:	1a9b      	subs	r3, r3, r2
 8020786:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 802078a:	e792      	b.n	80206b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802078c:	f640 631b 	movw	r3, #3611	; 0xe1b
 8020790:	429a      	cmp	r2, r3
 8020792:	d005      	beq.n	80207a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8020794:	f022 0302 	bic.w	r3, r2, #2
 8020798:	f640 611d 	movw	r1, #3613	; 0xe1d
 802079c:	428b      	cmp	r3, r1
 802079e:	d119      	bne.n	80207d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 80207a0:	1e53      	subs	r3, r2, #1
 80207a2:	4629      	mov	r1, r5
 80207a4:	4642      	mov	r2, r8
 80207a6:	4620      	mov	r0, r4
 80207a8:	b29b      	uxth	r3, r3
 80207aa:	f7ff ff18 	bl	80205de <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80207ae:	7b41      	ldrb	r1, [r0, #13]
 80207b0:	7a00      	ldrb	r0, [r0, #8]
 80207b2:	f7ff fea9 	bl	8020508 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80207b6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80207ba:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80207be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80207c2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80207c6:	4313      	orrs	r3, r2
 80207c8:	115a      	asrs	r2, r3, #5
 80207ca:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80207ce:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80207d2:	e02e      	b.n	8020832 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80207d4:	4639      	mov	r1, r7
 80207d6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80207da:	f7ff fe95 	bl	8020508 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80207de:	f640 6109 	movw	r1, #3593	; 0xe09
 80207e2:	f022 0310 	bic.w	r3, r2, #16
 80207e6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80207ea:	428b      	cmp	r3, r1
 80207ec:	d003      	beq.n	80207f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 80207ee:	f640 6313 	movw	r3, #3603	; 0xe13
 80207f2:	429a      	cmp	r2, r3
 80207f4:	d127      	bne.n	8020846 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 80207f6:	b27f      	sxtb	r7, r7
 80207f8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80207fc:	4629      	mov	r1, r5
 80207fe:	4620      	mov	r0, r4
 8020800:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8020804:	431f      	orrs	r7, r3
 8020806:	f640 6313 	movw	r3, #3603	; 0xe13
 802080a:	429a      	cmp	r2, r3
 802080c:	bf14      	ite	ne
 802080e:	f102 33ff 	addne.w	r3, r2, #4294967295
 8020812:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8020816:	4642      	mov	r2, r8
 8020818:	bf18      	it	ne
 802081a:	b29b      	uxthne	r3, r3
 802081c:	f7ff fedf 	bl	80205de <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020820:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8020824:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020828:	7a83      	ldrb	r3, [r0, #10]
 802082a:	4313      	orrs	r3, r2
 802082c:	1aff      	subs	r7, r7, r3
 802082e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8020832:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8020836:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 802083a:	f7ff fe65 	bl	8020508 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 802083e:	1b80      	subs	r0, r0, r6
 8020840:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8020844:	e735      	b.n	80206b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8020846:	2300      	movs	r3, #0
 8020848:	e7c1      	b.n	80207ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 802084a:	bf00      	nop
 802084c:	3fc00079 	.word	0x3fc00079

08020850 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020850:	3a01      	subs	r2, #1
 8020852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020856:	b292      	uxth	r2, r2
 8020858:	460c      	mov	r4, r1
 802085a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 802085e:	42b2      	cmp	r2, r6
 8020860:	d018      	beq.n	8020894 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8020862:	8b01      	ldrh	r1, [r0, #24]
 8020864:	f834 5b02 	ldrh.w	r5, [r4], #2
 8020868:	4291      	cmp	r1, r2
 802086a:	d805      	bhi.n	8020878 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 802086c:	4b13      	ldr	r3, [pc, #76]	; (80208bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 802086e:	21d3      	movs	r1, #211	; 0xd3
 8020870:	4a13      	ldr	r2, [pc, #76]	; (80208c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8020872:	4814      	ldr	r0, [pc, #80]	; (80208c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8020874:	f00a fd26 	bl	802b2c4 <__assert_func>
 8020878:	8ac1      	ldrh	r1, [r0, #22]
 802087a:	4411      	add	r1, r2
 802087c:	3a01      	subs	r2, #1
 802087e:	f001 0101 	and.w	r1, r1, #1
 8020882:	b292      	uxth	r2, r2
 8020884:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020888:	8a49      	ldrh	r1, [r1, #18]
 802088a:	428d      	cmp	r5, r1
 802088c:	d0e7      	beq.n	802085e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 802088e:	2000      	movs	r0, #0
 8020890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020894:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8020898:	2600      	movs	r6, #0
 802089a:	f100 051a 	add.w	r5, r0, #26
 802089e:	441f      	add	r7, r3
 80208a0:	b2b1      	uxth	r1, r6
 80208a2:	42b9      	cmp	r1, r7
 80208a4:	da08      	bge.n	80208b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 80208a6:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 80208aa:	4628      	mov	r0, r5
 80208ac:	f7ff feda 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80208b0:	3601      	adds	r6, #1
 80208b2:	4540      	cmp	r0, r8
 80208b4:	d0f4      	beq.n	80208a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80208b6:	e7ea      	b.n	802088e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80208b8:	2001      	movs	r0, #1
 80208ba:	e7e9      	b.n	8020890 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80208bc:	08030151 	.word	0x08030151
 80208c0:	080306e0 	.word	0x080306e0
 80208c4:	0803015f 	.word	0x0803015f

080208c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 80208c8:	b538      	push	{r3, r4, r5, lr}
 80208ca:	8ac3      	ldrh	r3, [r0, #22]
 80208cc:	428b      	cmp	r3, r1
 80208ce:	d205      	bcs.n	80208dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80208d0:	4b08      	ldr	r3, [pc, #32]	; (80208f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80208d2:	21d8      	movs	r1, #216	; 0xd8
 80208d4:	4a08      	ldr	r2, [pc, #32]	; (80208f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80208d6:	4809      	ldr	r0, [pc, #36]	; (80208fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80208d8:	f00a fcf4 	bl	802b2c4 <__assert_func>
 80208dc:	8a82      	ldrh	r2, [r0, #20]
 80208de:	250a      	movs	r5, #10
 80208e0:	1a5b      	subs	r3, r3, r1
 80208e2:	440a      	add	r2, r1
 80208e4:	82c3      	strh	r3, [r0, #22]
 80208e6:	fbb2 f4f5 	udiv	r4, r2, r5
 80208ea:	fb05 2214 	mls	r2, r5, r4, r2
 80208ee:	8282      	strh	r2, [r0, #20]
 80208f0:	bd38      	pop	{r3, r4, r5, pc}
 80208f2:	bf00      	nop
 80208f4:	08030145 	.word	0x08030145
 80208f8:	080304fc 	.word	0x080304fc
 80208fc:	0803015f 	.word	0x0803015f

08020900 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8020900:	b538      	push	{r3, r4, r5, lr}
 8020902:	8ac3      	ldrh	r3, [r0, #22]
 8020904:	2b09      	cmp	r3, #9
 8020906:	d905      	bls.n	8020914 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8020908:	4b08      	ldr	r3, [pc, #32]	; (802092c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 802090a:	21f7      	movs	r1, #247	; 0xf7
 802090c:	4a08      	ldr	r2, [pc, #32]	; (8020930 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 802090e:	4809      	ldr	r0, [pc, #36]	; (8020934 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8020910:	f00a fcd8 	bl	802b2c4 <__assert_func>
 8020914:	8a82      	ldrh	r2, [r0, #20]
 8020916:	250a      	movs	r5, #10
 8020918:	441a      	add	r2, r3
 802091a:	3301      	adds	r3, #1
 802091c:	fbb2 f4f5 	udiv	r4, r2, r5
 8020920:	fb05 2214 	mls	r2, r5, r4, r2
 8020924:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8020928:	82c3      	strh	r3, [r0, #22]
 802092a:	bd38      	pop	{r3, r4, r5, pc}
 802092c:	08030139 	.word	0x08030139
 8020930:	0803044d 	.word	0x0803044d
 8020934:	0803015f 	.word	0x0803015f

08020938 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020938:	b538      	push	{r3, r4, r5, lr}
 802093a:	4604      	mov	r4, r0
 802093c:	f100 051a 	add.w	r5, r0, #26
 8020940:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020942:	2b0a      	cmp	r3, #10
 8020944:	d01c      	beq.n	8020980 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8020946:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8020948:	b962      	cbnz	r2, 8020964 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 802094a:	f104 051a 	add.w	r5, r4, #26
 802094e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020950:	2b0a      	cmp	r3, #10
 8020952:	d015      	beq.n	8020980 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8020954:	4620      	mov	r0, r4
 8020956:	f7ff fdf6 	bl	8020546 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 802095a:	4601      	mov	r1, r0
 802095c:	4628      	mov	r0, r5
 802095e:	f7ff ffcf 	bl	8020900 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8020962:	e7f4      	b.n	802094e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8020964:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020966:	3a01      	subs	r2, #1
 8020968:	4628      	mov	r0, r5
 802096a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 802096e:	3301      	adds	r3, #1
 8020970:	f003 0301 	and.w	r3, r3, #1
 8020974:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8020976:	8722      	strh	r2, [r4, #56]	; 0x38
 8020978:	86e3      	strh	r3, [r4, #54]	; 0x36
 802097a:	f7ff ffc1 	bl	8020900 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 802097e:	e7df      	b.n	8020940 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8020980:	bd38      	pop	{r3, r4, r5, pc}
	...

08020984 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8020984:	2300      	movs	r3, #0
 8020986:	b510      	push	{r4, lr}
 8020988:	6043      	str	r3, [r0, #4]
 802098a:	4604      	mov	r4, r0
 802098c:	60c3      	str	r3, [r0, #12]
 802098e:	7403      	strb	r3, [r0, #16]
 8020990:	8603      	strh	r3, [r0, #48]	; 0x30
 8020992:	8303      	strh	r3, [r0, #24]
 8020994:	8703      	strh	r3, [r0, #56]	; 0x38
 8020996:	f7ff ffcf 	bl	8020938 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 802099a:	4a0a      	ldr	r2, [pc, #40]	; (80209c4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 802099c:	6813      	ldr	r3, [r2, #0]
 802099e:	4611      	mov	r1, r2
 80209a0:	b913      	cbnz	r3, 80209a8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 80209a2:	6852      	ldr	r2, [r2, #4]
 80209a4:	07d0      	lsls	r0, r2, #31
 80209a6:	d50b      	bpl.n	80209c0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 80209a8:	6849      	ldr	r1, [r1, #4]
 80209aa:	104a      	asrs	r2, r1, #1
 80209ac:	07c9      	lsls	r1, r1, #31
 80209ae:	eb04 0002 	add.w	r0, r4, r2
 80209b2:	bf48      	it	mi
 80209b4:	58a2      	ldrmi	r2, [r4, r2]
 80209b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209ba:	bf48      	it	mi
 80209bc:	58d3      	ldrmi	r3, [r2, r3]
 80209be:	4718      	bx	r3
 80209c0:	bd10      	pop	{r4, pc}
 80209c2:	bf00      	nop
 80209c4:	200086e4 	.word	0x200086e4

080209c8 <_ZN8touchgfx12TextProviderC1Ev>:
 80209c8:	2300      	movs	r3, #0
 80209ca:	2201      	movs	r2, #1
 80209cc:	b510      	push	{r4, lr}
 80209ce:	4604      	mov	r4, r0
 80209d0:	60c3      	str	r3, [r0, #12]
 80209d2:	7403      	strb	r3, [r0, #16]
 80209d4:	82c3      	strh	r3, [r0, #22]
 80209d6:	8303      	strh	r3, [r0, #24]
 80209d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80209da:	8603      	strh	r3, [r0, #48]	; 0x30
 80209dc:	86c3      	strh	r3, [r0, #54]	; 0x36
 80209de:	8703      	strh	r3, [r0, #56]	; 0x38
 80209e0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80209e2:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80209e6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80209ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80209ee:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80209f2:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 80209f6:	e9c0 3300 	strd	r3, r3, [r0]
 80209fa:	f7ff ffc3 	bl	8020984 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80209fe:	4620      	mov	r0, r4
 8020a00:	bd10      	pop	{r4, pc}

08020a02 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8020a02:	b410      	push	{r4}
 8020a04:	6082      	str	r2, [r0, #8]
 8020a06:	6001      	str	r1, [r0, #0]
 8020a08:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a0e:	f7ff bfb9 	b.w	8020984 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08020a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8020a14:	b508      	push	{r3, lr}
 8020a16:	88c2      	ldrh	r2, [r0, #6]
 8020a18:	440a      	add	r2, r1
 8020a1a:	2a02      	cmp	r2, #2
 8020a1c:	dd05      	ble.n	8020a2a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8020a1e:	4b06      	ldr	r3, [pc, #24]	; (8020a38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8020a20:	21ec      	movs	r1, #236	; 0xec
 8020a22:	4a06      	ldr	r2, [pc, #24]	; (8020a3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8020a24:	4806      	ldr	r0, [pc, #24]	; (8020a40 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8020a26:	f00a fc4d 	bl	802b2c4 <__assert_func>
 8020a2a:	8883      	ldrh	r3, [r0, #4]
 8020a2c:	80c2      	strh	r2, [r0, #6]
 8020a2e:	1a59      	subs	r1, r3, r1
 8020a30:	f001 0101 	and.w	r1, r1, #1
 8020a34:	8081      	strh	r1, [r0, #4]
 8020a36:	bd08      	pop	{r3, pc}
 8020a38:	0803018b 	.word	0x0803018b
 8020a3c:	08030659 	.word	0x08030659
 8020a40:	0803015f 	.word	0x0803015f

08020a44 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8020a44:	b508      	push	{r3, lr}
 8020a46:	88c3      	ldrh	r3, [r0, #6]
 8020a48:	428b      	cmp	r3, r1
 8020a4a:	d805      	bhi.n	8020a58 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8020a4c:	4b06      	ldr	r3, [pc, #24]	; (8020a68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8020a4e:	21fd      	movs	r1, #253	; 0xfd
 8020a50:	4a06      	ldr	r2, [pc, #24]	; (8020a6c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8020a52:	4807      	ldr	r0, [pc, #28]	; (8020a70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8020a54:	f00a fc36 	bl	802b2c4 <__assert_func>
 8020a58:	8883      	ldrh	r3, [r0, #4]
 8020a5a:	4419      	add	r1, r3
 8020a5c:	f001 0101 	and.w	r1, r1, #1
 8020a60:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8020a64:	bd08      	pop	{r3, pc}
 8020a66:	bf00      	nop
 8020a68:	08030151 	.word	0x08030151
 8020a6c:	080307b1 	.word	0x080307b1
 8020a70:	0803015f 	.word	0x0803015f

08020a74 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020a74:	b570      	push	{r4, r5, r6, lr}
 8020a76:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8020a78:	4604      	mov	r4, r0
 8020a7a:	b92a      	cbnz	r2, 8020a88 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8020a7c:	4b12      	ldr	r3, [pc, #72]	; (8020ac8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8020a7e:	21de      	movs	r1, #222	; 0xde
 8020a80:	4a12      	ldr	r2, [pc, #72]	; (8020acc <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8020a82:	4813      	ldr	r0, [pc, #76]	; (8020ad0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8020a84:	f00a fc1e 	bl	802b2c4 <__assert_func>
 8020a88:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8020a8a:	260a      	movs	r6, #10
 8020a8c:	3a01      	subs	r2, #1
 8020a8e:	3412      	adds	r4, #18
 8020a90:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8020a94:	3301      	adds	r3, #1
 8020a96:	8b4d      	ldrh	r5, [r1, #26]
 8020a98:	8602      	strh	r2, [r0, #48]	; 0x30
 8020a9a:	fbb3 f1f6 	udiv	r1, r3, r6
 8020a9e:	fb06 3311 	mls	r3, r6, r1, r3
 8020aa2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8020aa4:	f7ff ff48 	bl	8020938 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020aa8:	88e3      	ldrh	r3, [r4, #6]
 8020aaa:	2101      	movs	r1, #1
 8020aac:	2b02      	cmp	r3, #2
 8020aae:	bf04      	itt	eq
 8020ab0:	2301      	moveq	r3, #1
 8020ab2:	80e3      	strheq	r3, [r4, #6]
 8020ab4:	4620      	mov	r0, r4
 8020ab6:	f7ff ffad 	bl	8020a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8020aba:	4620      	mov	r0, r4
 8020abc:	462a      	mov	r2, r5
 8020abe:	2100      	movs	r1, #0
 8020ac0:	f7ff ffc0 	bl	8020a44 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8020ac4:	4628      	mov	r0, r5
 8020ac6:	bd70      	pop	{r4, r5, r6, pc}
 8020ac8:	08030130 	.word	0x08030130
 8020acc:	080303a2 	.word	0x080303a2
 8020ad0:	0803015f 	.word	0x0803015f

08020ad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020ad4:	428a      	cmp	r2, r1
 8020ad6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ada:	4604      	mov	r4, r0
 8020adc:	460e      	mov	r6, r1
 8020ade:	4615      	mov	r5, r2
 8020ae0:	469a      	mov	sl, r3
 8020ae2:	d92b      	bls.n	8020b3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8020ae4:	1a57      	subs	r7, r2, r1
 8020ae6:	f04f 0800 	mov.w	r8, #0
 8020aea:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8020aee:	f04f 0b0a 	mov.w	fp, #10
 8020af2:	b2bf      	uxth	r7, r7
 8020af4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020af6:	b92b      	cbnz	r3, 8020b04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8020af8:	4b24      	ldr	r3, [pc, #144]	; (8020b8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8020afa:	21e6      	movs	r1, #230	; 0xe6
 8020afc:	4a24      	ldr	r2, [pc, #144]	; (8020b90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8020afe:	4825      	ldr	r0, [pc, #148]	; (8020b94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8020b00:	f00a fbe0 	bl	802b2c4 <__assert_func>
 8020b04:	3b01      	subs	r3, #1
 8020b06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8020b08:	2101      	movs	r1, #1
 8020b0a:	4648      	mov	r0, r9
 8020b0c:	b29b      	uxth	r3, r3
 8020b0e:	f108 0801 	add.w	r8, r8, #1
 8020b12:	441a      	add	r2, r3
 8020b14:	8623      	strh	r3, [r4, #48]	; 0x30
 8020b16:	fbb2 f3fb 	udiv	r3, r2, fp
 8020b1a:	fb0b 2313 	mls	r3, fp, r3, r2
 8020b1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020b22:	8b5a      	ldrh	r2, [r3, #26]
 8020b24:	9201      	str	r2, [sp, #4]
 8020b26:	f7ff ff75 	bl	8020a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8020b2a:	9a01      	ldr	r2, [sp, #4]
 8020b2c:	2100      	movs	r1, #0
 8020b2e:	4648      	mov	r0, r9
 8020b30:	f7ff ff88 	bl	8020a44 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8020b34:	fa1f f388 	uxth.w	r3, r8
 8020b38:	429f      	cmp	r7, r3
 8020b3a:	d8db      	bhi.n	8020af4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8020b3c:	f104 071a 	add.w	r7, r4, #26
 8020b40:	4631      	mov	r1, r6
 8020b42:	260a      	movs	r6, #10
 8020b44:	4638      	mov	r0, r7
 8020b46:	f7ff febf 	bl	80208c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8020b4a:	b1c5      	cbz	r5, 8020b7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8020b4c:	3d01      	subs	r5, #1
 8020b4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8020b50:	b2ad      	uxth	r5, r5
 8020b52:	2b09      	cmp	r3, #9
 8020b54:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8020b58:	d903      	bls.n	8020b62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8020b5a:	4b0f      	ldr	r3, [pc, #60]	; (8020b98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8020b5c:	21ec      	movs	r1, #236	; 0xec
 8020b5e:	4a0f      	ldr	r2, [pc, #60]	; (8020b9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8020b60:	e7cd      	b.n	8020afe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8020b62:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8020b64:	3301      	adds	r3, #1
 8020b66:	3109      	adds	r1, #9
 8020b68:	8623      	strh	r3, [r4, #48]	; 0x30
 8020b6a:	fbb1 f0f6 	udiv	r0, r1, r6
 8020b6e:	fb06 1110 	mls	r1, r6, r0, r1
 8020b72:	4638      	mov	r0, r7
 8020b74:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8020b76:	2100      	movs	r1, #0
 8020b78:	f7ff fd5a 	bl	8020630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020b7c:	e7e5      	b.n	8020b4a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8020b7e:	4620      	mov	r0, r4
 8020b80:	b003      	add	sp, #12
 8020b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b86:	f7ff bed7 	b.w	8020938 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020b8a:	bf00      	nop
 8020b8c:	08030130 	.word	0x08030130
 8020b90:	08030226 	.word	0x08030226
 8020b94:	0803015f 	.word	0x0803015f
 8020b98:	0803018b 	.word	0x0803018b
 8020b9c:	0803019e 	.word	0x0803019e

08020ba0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ba4:	4605      	mov	r5, r0
 8020ba6:	4616      	mov	r6, r2
 8020ba8:	1c8c      	adds	r4, r1, #2
 8020baa:	8809      	ldrh	r1, [r1, #0]
 8020bac:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020bb0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020bb4:	42b3      	cmp	r3, r6
 8020bb6:	d124      	bne.n	8020c02 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020bb8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020bbc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8020bc0:	f001 070f 	and.w	r7, r1, #15
 8020bc4:	4652      	mov	r2, sl
 8020bc6:	f8cd 8000 	str.w	r8, [sp]
 8020bca:	464b      	mov	r3, r9
 8020bcc:	4621      	mov	r1, r4
 8020bce:	4628      	mov	r0, r5
 8020bd0:	f7ff fe3e 	bl	8020850 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020bd4:	4683      	mov	fp, r0
 8020bd6:	b168      	cbz	r0, 8020bf4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020bd8:	eb0a 0109 	add.w	r1, sl, r9
 8020bdc:	463a      	mov	r2, r7
 8020bde:	4628      	mov	r0, r5
 8020be0:	4441      	add	r1, r8
 8020be2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020be6:	4649      	mov	r1, r9
 8020be8:	f7ff ff74 	bl	8020ad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020bec:	4658      	mov	r0, fp
 8020bee:	b003      	add	sp, #12
 8020bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bf4:	eb07 010a 	add.w	r1, r7, sl
 8020bf8:	4449      	add	r1, r9
 8020bfa:	4441      	add	r1, r8
 8020bfc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020c00:	e7d2      	b.n	8020ba8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020c02:	f04f 0b00 	mov.w	fp, #0
 8020c06:	e7f1      	b.n	8020bec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020c08 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c0c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8020c0e:	4604      	mov	r4, r0
 8020c10:	260b      	movs	r6, #11
 8020c12:	f100 091a 	add.w	r9, r0, #26
 8020c16:	886f      	ldrh	r7, [r5, #2]
 8020c18:	087f      	lsrs	r7, r7, #1
 8020c1a:	3e01      	subs	r6, #1
 8020c1c:	d013      	beq.n	8020c46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8020c1e:	2100      	movs	r1, #0
 8020c20:	4648      	mov	r0, r9
 8020c22:	f7ff fd1f 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020c26:	462a      	mov	r2, r5
 8020c28:	4680      	mov	r8, r0
 8020c2a:	4603      	mov	r3, r0
 8020c2c:	4639      	mov	r1, r7
 8020c2e:	4620      	mov	r0, r4
 8020c30:	f7ff fce0 	bl	80205f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020c34:	b138      	cbz	r0, 8020c46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8020c36:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020c3a:	4642      	mov	r2, r8
 8020c3c:	4620      	mov	r0, r4
 8020c3e:	f7ff ffaf 	bl	8020ba0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020c42:	2800      	cmp	r0, #0
 8020c44:	d1e9      	bne.n	8020c1a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8020c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8020c4c:	4b1e      	ldr	r3, [pc, #120]	; (8020cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8020c4e:	b570      	push	{r4, r5, r6, lr}
 8020c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c54:	4604      	mov	r4, r0
 8020c56:	f003 0501 	and.w	r5, r3, #1
 8020c5a:	b902      	cbnz	r2, 8020c5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8020c5c:	b165      	cbz	r5, 8020c78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8020c5e:	105b      	asrs	r3, r3, #1
 8020c60:	f104 061a 	add.w	r6, r4, #26
 8020c64:	18e0      	adds	r0, r4, r3
 8020c66:	b10d      	cbz	r5, 8020c6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8020c68:	58e3      	ldr	r3, [r4, r3]
 8020c6a:	589a      	ldr	r2, [r3, r2]
 8020c6c:	4790      	blx	r2
 8020c6e:	2100      	movs	r1, #0
 8020c70:	4602      	mov	r2, r0
 8020c72:	4630      	mov	r0, r6
 8020c74:	f7ff fcdc 	bl	8020630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020c7a:	b303      	cbz	r3, 8020cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8020c7c:	f104 051a 	add.w	r5, r4, #26
 8020c80:	2100      	movs	r1, #0
 8020c82:	4628      	mov	r0, r5
 8020c84:	f7ff fcee 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020c88:	b1c8      	cbz	r0, 8020cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8020c8a:	4620      	mov	r0, r4
 8020c8c:	f7ff ffbc 	bl	8020c08 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8020c90:	2101      	movs	r1, #1
 8020c92:	4628      	mov	r0, r5
 8020c94:	f7ff fce6 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020c98:	f640 133f 	movw	r3, #2367	; 0x93f
 8020c9c:	4606      	mov	r6, r0
 8020c9e:	4298      	cmp	r0, r3
 8020ca0:	d10d      	bne.n	8020cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8020ca2:	2100      	movs	r1, #0
 8020ca4:	4628      	mov	r0, r5
 8020ca6:	f7ff fcdd 	bl	8020664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020caa:	2101      	movs	r1, #1
 8020cac:	4602      	mov	r2, r0
 8020cae:	4628      	mov	r0, r5
 8020cb0:	f7ff fcbe 	bl	8020630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020cb4:	4632      	mov	r2, r6
 8020cb6:	2100      	movs	r1, #0
 8020cb8:	4628      	mov	r0, r5
 8020cba:	f7ff fcb9 	bl	8020630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020cbe:	4620      	mov	r0, r4
 8020cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020cc4:	f7ff bed6 	b.w	8020a74 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8020cc8:	200086ec 	.word	0x200086ec

08020ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8020ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cce:	4617      	mov	r7, r2
 8020cd0:	461e      	mov	r6, r3
 8020cd2:	4605      	mov	r5, r0
 8020cd4:	f7ff ffba 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020cd8:	683b      	ldr	r3, [r7, #0]
 8020cda:	4604      	mov	r4, r0
 8020cdc:	4601      	mov	r1, r0
 8020cde:	4638      	mov	r0, r7
 8020ce0:	68db      	ldr	r3, [r3, #12]
 8020ce2:	4798      	blx	r3
 8020ce4:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8020ce8:	4602      	mov	r2, r0
 8020cea:	6030      	str	r0, [r6, #0]
 8020cec:	b29b      	uxth	r3, r3
 8020cee:	2b7f      	cmp	r3, #127	; 0x7f
 8020cf0:	d813      	bhi.n	8020d1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8020cf2:	4639      	mov	r1, r7
 8020cf4:	4628      	mov	r0, r5
 8020cf6:	f7ff fccf 	bl	8020698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020cfa:	6030      	str	r0, [r6, #0]
 8020cfc:	6833      	ldr	r3, [r6, #0]
 8020cfe:	b143      	cbz	r3, 8020d12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8020d00:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8020d04:	7a9b      	ldrb	r3, [r3, #10]
 8020d06:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020d0a:	4313      	orrs	r3, r2
 8020d0c:	bf0c      	ite	eq
 8020d0e:	2301      	moveq	r3, #1
 8020d10:	2300      	movne	r3, #0
 8020d12:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020d16:	4620      	mov	r0, r4
 8020d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d1a:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	d0ec      	beq.n	8020cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8020d22:	f640 1302 	movw	r3, #2306	; 0x902
 8020d26:	429c      	cmp	r4, r3
 8020d28:	d1e8      	bne.n	8020cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8020d2a:	4601      	mov	r1, r0
 8020d2c:	4628      	mov	r0, r5
 8020d2e:	f7ff fc32 	bl	8020596 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020d32:	e7e2      	b.n	8020cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08020d34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d38:	4617      	mov	r7, r2
 8020d3a:	461e      	mov	r6, r3
 8020d3c:	4605      	mov	r5, r0
 8020d3e:	f7ff ff85 	bl	8020c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020d42:	683b      	ldr	r3, [r7, #0]
 8020d44:	4604      	mov	r4, r0
 8020d46:	4601      	mov	r1, r0
 8020d48:	4638      	mov	r0, r7
 8020d4a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8020d4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020d52:	47c0      	blx	r8
 8020d54:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8020d58:	4602      	mov	r2, r0
 8020d5a:	6030      	str	r0, [r6, #0]
 8020d5c:	b29b      	uxth	r3, r3
 8020d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8020d60:	d814      	bhi.n	8020d8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8020d62:	4639      	mov	r1, r7
 8020d64:	4628      	mov	r0, r5
 8020d66:	f7ff fc97 	bl	8020698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020d6a:	6030      	str	r0, [r6, #0]
 8020d6c:	6833      	ldr	r3, [r6, #0]
 8020d6e:	b143      	cbz	r3, 8020d82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8020d70:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8020d74:	7a9b      	ldrb	r3, [r3, #10]
 8020d76:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020d7a:	4313      	orrs	r3, r2
 8020d7c:	bf0c      	ite	eq
 8020d7e:	2301      	moveq	r3, #1
 8020d80:	2300      	movne	r3, #0
 8020d82:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020d86:	4620      	mov	r0, r4
 8020d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d8c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d0eb      	beq.n	8020d6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8020d94:	f640 1302 	movw	r3, #2306	; 0x902
 8020d98:	429c      	cmp	r4, r3
 8020d9a:	d1e7      	bne.n	8020d6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8020d9c:	4601      	mov	r1, r0
 8020d9e:	4628      	mov	r0, r5
 8020da0:	f7ff fbf9 	bl	8020596 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020da4:	e7e1      	b.n	8020d6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08020da6 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020da6:	4602      	mov	r2, r0
 8020da8:	b148      	cbz	r0, 8020dbe <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8020daa:	2300      	movs	r3, #0
 8020dac:	b298      	uxth	r0, r3
 8020dae:	3301      	adds	r3, #1
 8020db0:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020db4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8020db8:	2900      	cmp	r1, #0
 8020dba:	d1f7      	bne.n	8020dac <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8020dbc:	4770      	bx	lr
 8020dbe:	4770      	bx	lr

08020dc0 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8020dc0:	b140      	cbz	r0, 8020dd4 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8020dc2:	4602      	mov	r2, r0
 8020dc4:	1a13      	subs	r3, r2, r0
 8020dc6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8020dca:	b29b      	uxth	r3, r3
 8020dcc:	2900      	cmp	r1, #0
 8020dce:	d1f9      	bne.n	8020dc4 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	4770      	bx	lr
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	e7fb      	b.n	8020dd0 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08020dd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8020dd8:	b530      	push	{r4, r5, lr}
 8020dda:	4604      	mov	r4, r0
 8020ddc:	b159      	cbz	r1, 8020df6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8020dde:	b148      	cbz	r0, 8020df4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020de0:	2300      	movs	r3, #0
 8020de2:	b298      	uxth	r0, r3
 8020de4:	4282      	cmp	r2, r0
 8020de6:	d905      	bls.n	8020df4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020de8:	5ccd      	ldrb	r5, [r1, r3]
 8020dea:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8020dee:	3301      	adds	r3, #1
 8020df0:	2d00      	cmp	r5, #0
 8020df2:	d1f6      	bne.n	8020de2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8020df4:	bd30      	pop	{r4, r5, pc}
 8020df6:	4608      	mov	r0, r1
 8020df8:	e7fc      	b.n	8020df4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08020dfa <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8020dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dfc:	468c      	mov	ip, r1
 8020dfe:	b08b      	sub	sp, #44	; 0x2c
 8020e00:	2100      	movs	r1, #0
 8020e02:	ae01      	add	r6, sp, #4
 8020e04:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020e08:	211f      	movs	r1, #31
 8020e0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8020e0e:	fb03 0517 	mls	r5, r3, r7, r0
 8020e12:	4638      	mov	r0, r7
 8020e14:	b2ec      	uxtb	r4, r5
 8020e16:	2d09      	cmp	r5, #9
 8020e18:	bfd4      	ite	le
 8020e1a:	3430      	addle	r4, #48	; 0x30
 8020e1c:	3457      	addgt	r4, #87	; 0x57
 8020e1e:	b2e4      	uxtb	r4, r4
 8020e20:	558c      	strb	r4, [r1, r6]
 8020e22:	1e4c      	subs	r4, r1, #1
 8020e24:	b92f      	cbnz	r7, 8020e32 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8020e26:	4431      	add	r1, r6
 8020e28:	4660      	mov	r0, ip
 8020e2a:	f7ff ffd5 	bl	8020dd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020e2e:	b00b      	add	sp, #44	; 0x2c
 8020e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e32:	4621      	mov	r1, r4
 8020e34:	e7e9      	b.n	8020e0a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08020e36 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8020e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e38:	4607      	mov	r7, r0
 8020e3a:	b08b      	sub	sp, #44	; 0x2c
 8020e3c:	4608      	mov	r0, r1
 8020e3e:	b341      	cbz	r1, 8020e92 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020e40:	1e99      	subs	r1, r3, #2
 8020e42:	290e      	cmp	r1, #14
 8020e44:	d825      	bhi.n	8020e92 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020e46:	2100      	movs	r1, #0
 8020e48:	463c      	mov	r4, r7
 8020e4a:	261f      	movs	r6, #31
 8020e4c:	f10d 0c04 	add.w	ip, sp, #4
 8020e50:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020e54:	1e71      	subs	r1, r6, #1
 8020e56:	fb94 fef3 	sdiv	lr, r4, r3
 8020e5a:	fb03 441e 	mls	r4, r3, lr, r4
 8020e5e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8020e62:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020e66:	b2ec      	uxtb	r4, r5
 8020e68:	2d09      	cmp	r5, #9
 8020e6a:	bfd4      	ite	le
 8020e6c:	3430      	addle	r4, #48	; 0x30
 8020e6e:	3457      	addgt	r4, #87	; 0x57
 8020e70:	b2e4      	uxtb	r4, r4
 8020e72:	f80c 4006 	strb.w	r4, [ip, r6]
 8020e76:	4674      	mov	r4, lr
 8020e78:	b96c      	cbnz	r4, 8020e96 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8020e7a:	2f00      	cmp	r7, #0
 8020e7c:	da05      	bge.n	8020e8a <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8020e7e:	ab0a      	add	r3, sp, #40	; 0x28
 8020e80:	4419      	add	r1, r3
 8020e82:	232d      	movs	r3, #45	; 0x2d
 8020e84:	f801 3c24 	strb.w	r3, [r1, #-36]
 8020e88:	1eb1      	subs	r1, r6, #2
 8020e8a:	3101      	adds	r1, #1
 8020e8c:	4461      	add	r1, ip
 8020e8e:	f7ff ffa3 	bl	8020dd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020e92:	b00b      	add	sp, #44	; 0x2c
 8020e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e96:	460e      	mov	r6, r1
 8020e98:	e7dc      	b.n	8020e54 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08020e9a <_ZN8touchgfx7Unicode4atoiEPKt>:
 8020e9a:	b510      	push	{r4, lr}
 8020e9c:	b158      	cbz	r0, 8020eb6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020e9e:	1e82      	subs	r2, r0, #2
 8020ea0:	210a      	movs	r1, #10
 8020ea2:	2000      	movs	r0, #0
 8020ea4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020ea8:	3b30      	subs	r3, #48	; 0x30
 8020eaa:	b29c      	uxth	r4, r3
 8020eac:	2c09      	cmp	r4, #9
 8020eae:	d802      	bhi.n	8020eb6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020eb0:	fb01 3000 	mla	r0, r1, r0, r3
 8020eb4:	e7f6      	b.n	8020ea4 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8020eb6:	bd10      	pop	{r4, pc}

08020eb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8020eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ebc:	b085      	sub	sp, #20
 8020ebe:	f8d0 8000 	ldr.w	r8, [r0]
 8020ec2:	468a      	mov	sl, r1
 8020ec4:	461c      	mov	r4, r3
 8020ec6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8020eca:	4681      	mov	r9, r0
 8020ecc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020ed0:	4640      	mov	r0, r8
 8020ed2:	9203      	str	r2, [sp, #12]
 8020ed4:	9102      	str	r1, [sp, #8]
 8020ed6:	9301      	str	r3, [sp, #4]
 8020ed8:	f7ff ff65 	bl	8020da6 <_ZN8touchgfx7Unicode6strlenEPKt>
 8020edc:	9a03      	ldr	r2, [sp, #12]
 8020ede:	f1ba 0f00 	cmp.w	sl, #0
 8020ee2:	bf0c      	ite	eq
 8020ee4:	4684      	moveq	ip, r0
 8020ee6:	f100 0c01 	addne.w	ip, r0, #1
 8020eea:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8020eee:	8812      	ldrh	r2, [r2, #0]
 8020ef0:	fa1f fc8c 	uxth.w	ip, ip
 8020ef4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020ef6:	2a69      	cmp	r2, #105	; 0x69
 8020ef8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020efa:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8020efc:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8020f00:	d004      	beq.n	8020f0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020f02:	d844      	bhi.n	8020f8e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8020f04:	2a58      	cmp	r2, #88	; 0x58
 8020f06:	d001      	beq.n	8020f0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020f08:	2a64      	cmp	r2, #100	; 0x64
 8020f0a:	d14b      	bne.n	8020fa4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8020f0c:	b1a4      	cbz	r4, 8020f38 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8020f0e:	b956      	cbnz	r6, 8020f26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8020f10:	2801      	cmp	r0, #1
 8020f12:	d108      	bne.n	8020f26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8020f14:	f8b8 2000 	ldrh.w	r2, [r8]
 8020f18:	2a30      	cmp	r2, #48	; 0x30
 8020f1a:	bf02      	ittt	eq
 8020f1c:	f108 0202 	addeq.w	r2, r8, #2
 8020f20:	4630      	moveq	r0, r6
 8020f22:	f8c9 2000 	streq.w	r2, [r9]
 8020f26:	45b4      	cmp	ip, r6
 8020f28:	da3e      	bge.n	8020fa8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8020f2a:	b2b6      	uxth	r6, r6
 8020f2c:	eba6 040c 	sub.w	r4, r6, ip
 8020f30:	46b4      	mov	ip, r6
 8020f32:	b2a4      	uxth	r4, r4
 8020f34:	f04f 0b00 	mov.w	fp, #0
 8020f38:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020f3c:	3a01      	subs	r2, #1
 8020f3e:	b169      	cbz	r1, 8020f5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020f40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020f42:	458c      	cmp	ip, r1
 8020f44:	da09      	bge.n	8020f5a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8020f46:	eba1 010c 	sub.w	r1, r1, ip
 8020f4a:	b289      	uxth	r1, r1
 8020f4c:	b933      	cbnz	r3, 8020f5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020f4e:	f1bb 0f00 	cmp.w	fp, #0
 8020f52:	d02b      	beq.n	8020fac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020f54:	b350      	cbz	r0, 8020fac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020f56:	440c      	add	r4, r1
 8020f58:	b2a4      	uxth	r4, r4
 8020f5a:	2100      	movs	r1, #0
 8020f5c:	682b      	ldr	r3, [r5, #0]
 8020f5e:	4293      	cmp	r3, r2
 8020f60:	da07      	bge.n	8020f72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8020f62:	f1ba 0f00 	cmp.w	sl, #0
 8020f66:	d004      	beq.n	8020f72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8020f68:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8020f6c:	682b      	ldr	r3, [r5, #0]
 8020f6e:	3301      	adds	r3, #1
 8020f70:	602b      	str	r3, [r5, #0]
 8020f72:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8020f76:	b354      	cbz	r4, 8020fce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020f78:	682e      	ldr	r6, [r5, #0]
 8020f7a:	3c01      	subs	r4, #1
 8020f7c:	42b2      	cmp	r2, r6
 8020f7e:	b2a4      	uxth	r4, r4
 8020f80:	dd25      	ble.n	8020fce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020f82:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8020f86:	682b      	ldr	r3, [r5, #0]
 8020f88:	3301      	adds	r3, #1
 8020f8a:	602b      	str	r3, [r5, #0]
 8020f8c:	e7f3      	b.n	8020f76 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8020f8e:	2a73      	cmp	r2, #115	; 0x73
 8020f90:	d003      	beq.n	8020f9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8020f92:	2a78      	cmp	r2, #120	; 0x78
 8020f94:	d0ba      	beq.n	8020f0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020f96:	2a6f      	cmp	r2, #111	; 0x6f
 8020f98:	e7b7      	b.n	8020f0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8020f9a:	2c00      	cmp	r4, #0
 8020f9c:	d0cc      	beq.n	8020f38 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8020f9e:	42b0      	cmp	r0, r6
 8020fa0:	dd00      	ble.n	8020fa4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8020fa2:	b2b0      	uxth	r0, r6
 8020fa4:	2400      	movs	r4, #0
 8020fa6:	e7c7      	b.n	8020f38 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8020fa8:	2400      	movs	r4, #0
 8020faa:	e7c3      	b.n	8020f34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8020fac:	2900      	cmp	r1, #0
 8020fae:	d0d5      	beq.n	8020f5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020fb0:	f04f 0c20 	mov.w	ip, #32
 8020fb4:	682e      	ldr	r6, [r5, #0]
 8020fb6:	2900      	cmp	r1, #0
 8020fb8:	d0d0      	beq.n	8020f5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020fba:	3901      	subs	r1, #1
 8020fbc:	4296      	cmp	r6, r2
 8020fbe:	b289      	uxth	r1, r1
 8020fc0:	dacb      	bge.n	8020f5a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8020fc2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8020fc6:	682b      	ldr	r3, [r5, #0]
 8020fc8:	3301      	adds	r3, #1
 8020fca:	602b      	str	r3, [r5, #0]
 8020fcc:	e7f2      	b.n	8020fb4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8020fce:	b198      	cbz	r0, 8020ff8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8020fd0:	f8d9 3000 	ldr.w	r3, [r9]
 8020fd4:	881c      	ldrh	r4, [r3, #0]
 8020fd6:	b17c      	cbz	r4, 8020ff8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8020fd8:	682c      	ldr	r4, [r5, #0]
 8020fda:	3801      	subs	r0, #1
 8020fdc:	42a2      	cmp	r2, r4
 8020fde:	b280      	uxth	r0, r0
 8020fe0:	dd0a      	ble.n	8020ff8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8020fe2:	1c9c      	adds	r4, r3, #2
 8020fe4:	f8c9 4000 	str.w	r4, [r9]
 8020fe8:	881c      	ldrh	r4, [r3, #0]
 8020fea:	682b      	ldr	r3, [r5, #0]
 8020fec:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8020ff0:	682b      	ldr	r3, [r5, #0]
 8020ff2:	3301      	adds	r3, #1
 8020ff4:	602b      	str	r3, [r5, #0]
 8020ff6:	e7ea      	b.n	8020fce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020ff8:	2620      	movs	r6, #32
 8020ffa:	b151      	cbz	r1, 8021012 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8020ffc:	6828      	ldr	r0, [r5, #0]
 8020ffe:	3901      	subs	r1, #1
 8021000:	4282      	cmp	r2, r0
 8021002:	b289      	uxth	r1, r1
 8021004:	dd05      	ble.n	8021012 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8021006:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 802100a:	682b      	ldr	r3, [r5, #0]
 802100c:	3301      	adds	r3, #1
 802100e:	602b      	str	r3, [r5, #0]
 8021010:	e7f3      	b.n	8020ffa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8021012:	b005      	add	sp, #20
 8021014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8021018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802101c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802101e:	4604      	mov	r4, r0
 8021020:	f04f 0801 	mov.w	r8, #1
 8021024:	2000      	movs	r0, #0
 8021026:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 802102a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 802102e:	8008      	strh	r0, [r1, #0]
 8021030:	7010      	strb	r0, [r2, #0]
 8021032:	7018      	strb	r0, [r3, #0]
 8021034:	f88c 0000 	strb.w	r0, [ip]
 8021038:	f88e 0000 	strb.w	r0, [lr]
 802103c:	7030      	strb	r0, [r6, #0]
 802103e:	6820      	ldr	r0, [r4, #0]
 8021040:	8800      	ldrh	r0, [r0, #0]
 8021042:	b190      	cbz	r0, 802106a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8021044:	282b      	cmp	r0, #43	; 0x2b
 8021046:	d001      	beq.n	802104c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8021048:	2820      	cmp	r0, #32
 802104a:	d104      	bne.n	8021056 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 802104c:	8008      	strh	r0, [r1, #0]
 802104e:	6820      	ldr	r0, [r4, #0]
 8021050:	3002      	adds	r0, #2
 8021052:	6020      	str	r0, [r4, #0]
 8021054:	e7f3      	b.n	802103e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8021056:	282d      	cmp	r0, #45	; 0x2d
 8021058:	d102      	bne.n	8021060 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 802105a:	f882 8000 	strb.w	r8, [r2]
 802105e:	e7f6      	b.n	802104e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8021060:	2823      	cmp	r0, #35	; 0x23
 8021062:	d102      	bne.n	802106a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8021064:	f883 8000 	strb.w	r8, [r3]
 8021068:	e7f1      	b.n	802104e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 802106a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802106e:	2b09      	cmp	r3, #9
 8021070:	d901      	bls.n	8021076 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8021072:	282a      	cmp	r0, #42	; 0x2a
 8021074:	d114      	bne.n	80210a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8021076:	2201      	movs	r2, #1
 8021078:	f88e 2000 	strb.w	r2, [lr]
 802107c:	6823      	ldr	r3, [r4, #0]
 802107e:	8819      	ldrh	r1, [r3, #0]
 8021080:	2930      	cmp	r1, #48	; 0x30
 8021082:	bf02      	ittt	eq
 8021084:	3302      	addeq	r3, #2
 8021086:	6023      	streq	r3, [r4, #0]
 8021088:	f88c 2000 	strbeq.w	r2, [ip]
 802108c:	6820      	ldr	r0, [r4, #0]
 802108e:	8803      	ldrh	r3, [r0, #0]
 8021090:	2b2a      	cmp	r3, #42	; 0x2a
 8021092:	d11e      	bne.n	80210d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8021094:	f04f 33ff 	mov.w	r3, #4294967295
 8021098:	603b      	str	r3, [r7, #0]
 802109a:	6823      	ldr	r3, [r4, #0]
 802109c:	3302      	adds	r3, #2
 802109e:	6023      	str	r3, [r4, #0]
 80210a0:	6823      	ldr	r3, [r4, #0]
 80210a2:	881b      	ldrh	r3, [r3, #0]
 80210a4:	2b2e      	cmp	r3, #46	; 0x2e
 80210a6:	d112      	bne.n	80210ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 80210a8:	2301      	movs	r3, #1
 80210aa:	7033      	strb	r3, [r6, #0]
 80210ac:	6823      	ldr	r3, [r4, #0]
 80210ae:	1c98      	adds	r0, r3, #2
 80210b0:	6020      	str	r0, [r4, #0]
 80210b2:	885b      	ldrh	r3, [r3, #2]
 80210b4:	2b2a      	cmp	r3, #42	; 0x2a
 80210b6:	d117      	bne.n	80210e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 80210b8:	f04f 33ff 	mov.w	r3, #4294967295
 80210bc:	602b      	str	r3, [r5, #0]
 80210be:	6823      	ldr	r3, [r4, #0]
 80210c0:	3302      	adds	r3, #2
 80210c2:	6023      	str	r3, [r4, #0]
 80210c4:	682b      	ldr	r3, [r5, #0]
 80210c6:	2b06      	cmp	r3, #6
 80210c8:	bfa8      	it	ge
 80210ca:	2306      	movge	r3, #6
 80210cc:	602b      	str	r3, [r5, #0]
 80210ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210d2:	f7ff fee2 	bl	8020e9a <_ZN8touchgfx7Unicode4atoiEPKt>
 80210d6:	6038      	str	r0, [r7, #0]
 80210d8:	6823      	ldr	r3, [r4, #0]
 80210da:	881a      	ldrh	r2, [r3, #0]
 80210dc:	3a30      	subs	r2, #48	; 0x30
 80210de:	2a09      	cmp	r2, #9
 80210e0:	d8de      	bhi.n	80210a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80210e2:	3302      	adds	r3, #2
 80210e4:	6023      	str	r3, [r4, #0]
 80210e6:	e7f7      	b.n	80210d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80210e8:	f7ff fed7 	bl	8020e9a <_ZN8touchgfx7Unicode4atoiEPKt>
 80210ec:	6028      	str	r0, [r5, #0]
 80210ee:	6823      	ldr	r3, [r4, #0]
 80210f0:	881a      	ldrh	r2, [r3, #0]
 80210f2:	3a30      	subs	r2, #48	; 0x30
 80210f4:	2a09      	cmp	r2, #9
 80210f6:	d8e5      	bhi.n	80210c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80210f8:	3302      	adds	r3, #2
 80210fa:	6023      	str	r3, [r4, #0]
 80210fc:	e7f7      	b.n	80210ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080210fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80210fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021102:	b0a2      	sub	sp, #136	; 0x88
 8021104:	2500      	movs	r5, #0
 8021106:	4606      	mov	r6, r0
 8021108:	460f      	mov	r7, r1
 802110a:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 802110e:	9209      	str	r2, [sp, #36]	; 0x24
 8021110:	4629      	mov	r1, r5
 8021112:	2242      	movs	r2, #66	; 0x42
 8021114:	4640      	mov	r0, r8
 8021116:	461c      	mov	r4, r3
 8021118:	950d      	str	r5, [sp, #52]	; 0x34
 802111a:	f7fe fdec 	bl	801fcf6 <_ZN8touchgfx6memsetEPvhm>
 802111e:	b30e      	cbz	r6, 8021164 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8021120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021122:	b1f3      	cbz	r3, 8021162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8021124:	f107 3aff 	add.w	sl, r7, #4294967295
 8021128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802112a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802112c:	8812      	ldrh	r2, [r2, #0]
 802112e:	2a00      	cmp	r2, #0
 8021130:	f000 80b3 	beq.w	802129a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8021134:	459a      	cmp	sl, r3
 8021136:	f340 80b0 	ble.w	802129a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 802113a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802113e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021140:	f8b9 2000 	ldrh.w	r2, [r9]
 8021144:	2a00      	cmp	r2, #0
 8021146:	d0ef      	beq.n	8021128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8021148:	2a25      	cmp	r2, #37	; 0x25
 802114a:	f000 80aa 	beq.w	80212a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 802114e:	459a      	cmp	sl, r3
 8021150:	ddea      	ble.n	8021128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8021152:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8021156:	f109 0202 	add.w	r2, r9, #2
 802115a:	3301      	adds	r3, #1
 802115c:	9209      	str	r2, [sp, #36]	; 0x24
 802115e:	930d      	str	r3, [sp, #52]	; 0x34
 8021160:	e7eb      	b.n	802113a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8021162:	8033      	strh	r3, [r6, #0]
 8021164:	4630      	mov	r0, r6
 8021166:	b022      	add	sp, #136	; 0x88
 8021168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802116c:	3b63      	subs	r3, #99	; 0x63
 802116e:	2b01      	cmp	r3, #1
 8021170:	f200 80df 	bhi.w	8021332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8021174:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8021178:	8813      	ldrh	r3, [r2, #0]
 802117a:	2b69      	cmp	r3, #105	; 0x69
 802117c:	d058      	beq.n	8021230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 802117e:	d81b      	bhi.n	80211b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8021180:	2b63      	cmp	r3, #99	; 0x63
 8021182:	d02e      	beq.n	80211e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8021184:	2b64      	cmp	r3, #100	; 0x64
 8021186:	d053      	beq.n	8021230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8021188:	2b58      	cmp	r3, #88	; 0x58
 802118a:	d06f      	beq.n	802126c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 802118c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8021190:	46a1      	mov	r9, r4
 8021192:	e02d      	b.n	80211f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8021194:	2b73      	cmp	r3, #115	; 0x73
 8021196:	d0ed      	beq.n	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8021198:	d803      	bhi.n	80211a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 802119a:	2b6f      	cmp	r3, #111	; 0x6f
 802119c:	f040 80c9 	bne.w	8021332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 80211a0:	e7e8      	b.n	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80211a2:	2b75      	cmp	r3, #117	; 0x75
 80211a4:	d0e6      	beq.n	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80211a6:	2b78      	cmp	r3, #120	; 0x78
 80211a8:	e7f8      	b.n	802119c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 80211aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80211ac:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80211b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211b2:	3302      	adds	r3, #2
 80211b4:	9309      	str	r3, [sp, #36]	; 0x24
 80211b6:	e7b7      	b.n	8021128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 80211b8:	2b73      	cmp	r3, #115	; 0x73
 80211ba:	d034      	beq.n	8021226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 80211bc:	d807      	bhi.n	80211ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 80211be:	2b6f      	cmp	r3, #111	; 0x6f
 80211c0:	d1e4      	bne.n	802118c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80211c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80211c4:	f104 0904 	add.w	r9, r4, #4
 80211c8:	2308      	movs	r3, #8
 80211ca:	1aba      	subs	r2, r7, r2
 80211cc:	e048      	b.n	8021260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80211ce:	2b75      	cmp	r3, #117	; 0x75
 80211d0:	d041      	beq.n	8021256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 80211d2:	2b78      	cmp	r3, #120	; 0x78
 80211d4:	d1da      	bne.n	802118c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80211d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80211d8:	f104 0904 	add.w	r9, r4, #4
 80211dc:	2310      	movs	r3, #16
 80211de:	1aba      	subs	r2, r7, r2
 80211e0:	e03e      	b.n	8021260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80211e2:	7823      	ldrb	r3, [r4, #0]
 80211e4:	f104 0904 	add.w	r9, r4, #4
 80211e8:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80211ec:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80211f0:	aa0d      	add	r2, sp, #52	; 0x34
 80211f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80211f6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80211fa:	a810      	add	r0, sp, #64	; 0x40
 80211fc:	9205      	str	r2, [sp, #20]
 80211fe:	464c      	mov	r4, r9
 8021200:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8021204:	9204      	str	r2, [sp, #16]
 8021206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021208:	9203      	str	r2, [sp, #12]
 802120a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 802120e:	9202      	str	r2, [sp, #8]
 8021210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021212:	9201      	str	r2, [sp, #4]
 8021214:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8021218:	e9cd 7606 	strd	r7, r6, [sp, #24]
 802121c:	9200      	str	r2, [sp, #0]
 802121e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021220:	f7ff fe4a 	bl	8020eb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8021224:	e7c4      	b.n	80211b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8021226:	f104 0904 	add.w	r9, r4, #4
 802122a:	6823      	ldr	r3, [r4, #0]
 802122c:	9310      	str	r3, [sp, #64]	; 0x40
 802122e:	e7df      	b.n	80211f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8021230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021232:	230a      	movs	r3, #10
 8021234:	4641      	mov	r1, r8
 8021236:	6820      	ldr	r0, [r4, #0]
 8021238:	1aba      	subs	r2, r7, r2
 802123a:	f104 0904 	add.w	r9, r4, #4
 802123e:	b292      	uxth	r2, r2
 8021240:	f7ff fdf9 	bl	8020e36 <_ZN8touchgfx7Unicode4itoaElPtti>
 8021244:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8021248:	2b2d      	cmp	r3, #45	; 0x2d
 802124a:	d1d1      	bne.n	80211f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 802124c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021252:	3302      	adds	r3, #2
 8021254:	e7ea      	b.n	802122c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8021256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021258:	f104 0904 	add.w	r9, r4, #4
 802125c:	230a      	movs	r3, #10
 802125e:	1aba      	subs	r2, r7, r2
 8021260:	b292      	uxth	r2, r2
 8021262:	4641      	mov	r1, r8
 8021264:	6820      	ldr	r0, [r4, #0]
 8021266:	f7ff fdc8 	bl	8020dfa <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 802126a:	e7c1      	b.n	80211f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 802126c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802126e:	2310      	movs	r3, #16
 8021270:	4641      	mov	r1, r8
 8021272:	6820      	ldr	r0, [r4, #0]
 8021274:	1aba      	subs	r2, r7, r2
 8021276:	f104 0904 	add.w	r9, r4, #4
 802127a:	b292      	uxth	r2, r2
 802127c:	f7ff fdbd 	bl	8020dfa <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8021280:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8021284:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8021288:	2b00      	cmp	r3, #0
 802128a:	d0b1      	beq.n	80211f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 802128c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8021290:	2919      	cmp	r1, #25
 8021292:	d8f7      	bhi.n	8021284 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8021294:	3b20      	subs	r3, #32
 8021296:	8013      	strh	r3, [r2, #0]
 8021298:	e7f4      	b.n	8021284 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 802129a:	2200      	movs	r2, #0
 802129c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80212a0:	e760      	b.n	8021164 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 80212a2:	459a      	cmp	sl, r3
 80212a4:	f77f af40 	ble.w	8021128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 80212a8:	f109 0302 	add.w	r3, r9, #2
 80212ac:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 80212b0:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 80212b4:	a809      	add	r0, sp, #36	; 0x24
 80212b6:	9309      	str	r3, [sp, #36]	; 0x24
 80212b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80212ba:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 80212be:	9304      	str	r3, [sp, #16]
 80212c0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80212c4:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 80212c8:	9303      	str	r3, [sp, #12]
 80212ca:	ab0e      	add	r3, sp, #56	; 0x38
 80212cc:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 80212d0:	9302      	str	r3, [sp, #8]
 80212d2:	ab0c      	add	r3, sp, #48	; 0x30
 80212d4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 80212d8:	9301      	str	r3, [sp, #4]
 80212da:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80212de:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80212e2:	9300      	str	r3, [sp, #0]
 80212e4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80212e8:	950e      	str	r5, [sp, #56]	; 0x38
 80212ea:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80212ee:	950f      	str	r5, [sp, #60]	; 0x3c
 80212f0:	f7ff fe92 	bl	8021018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80212f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	bfbf      	itttt	lt
 80212fc:	6823      	ldrlt	r3, [r4, #0]
 80212fe:	3404      	addlt	r4, #4
 8021300:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8021304:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021308:	2b00      	cmp	r3, #0
 802130a:	bfbf      	itttt	lt
 802130c:	6823      	ldrlt	r3, [r4, #0]
 802130e:	3404      	addlt	r4, #4
 8021310:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8021314:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8021316:	8813      	ldrh	r3, [r2, #0]
 8021318:	2b69      	cmp	r3, #105	; 0x69
 802131a:	f43f af2b 	beq.w	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 802131e:	f63f af39 	bhi.w	8021194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8021322:	2b58      	cmp	r3, #88	; 0x58
 8021324:	f43f af26 	beq.w	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8021328:	f63f af20 	bhi.w	802116c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 802132c:	2b25      	cmp	r3, #37	; 0x25
 802132e:	f43f af3c 	beq.w	80211aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8021332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021334:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8021338:	f8b9 2000 	ldrh.w	r2, [r9]
 802133c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8021340:	3301      	adds	r3, #1
 8021342:	930d      	str	r3, [sp, #52]	; 0x34
 8021344:	e734      	b.n	80211b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08021348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8021348:	b5f0      	push	{r4, r5, r6, r7, lr}
 802134a:	4605      	mov	r5, r0
 802134c:	b0a1      	sub	sp, #132	; 0x84
 802134e:	4610      	mov	r0, r2
 8021350:	460e      	mov	r6, r1
 8021352:	4614      	mov	r4, r2
 8021354:	461f      	mov	r7, r3
 8021356:	f7ff fd33 	bl	8020dc0 <_ZN8touchgfx7Unicode6strlenEPKc>
 802135a:	283f      	cmp	r0, #63	; 0x3f
 802135c:	d906      	bls.n	802136c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 802135e:	4b0a      	ldr	r3, [pc, #40]	; (8021388 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8021360:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8021364:	4a09      	ldr	r2, [pc, #36]	; (802138c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8021366:	480a      	ldr	r0, [pc, #40]	; (8021390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8021368:	f009 ffac 	bl	802b2c4 <__assert_func>
 802136c:	4621      	mov	r1, r4
 802136e:	2240      	movs	r2, #64	; 0x40
 8021370:	4668      	mov	r0, sp
 8021372:	f7ff fd31 	bl	8020dd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8021376:	463b      	mov	r3, r7
 8021378:	466a      	mov	r2, sp
 802137a:	4631      	mov	r1, r6
 802137c:	4628      	mov	r0, r5
 802137e:	f7ff febe 	bl	80210fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8021382:	b021      	add	sp, #132	; 0x84
 8021384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021386:	bf00      	nop
 8021388:	08030889 	.word	0x08030889
 802138c:	0803095b 	.word	0x0803095b
 8021390:	080308a6 	.word	0x080308a6

08021394 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8021394:	b40c      	push	{r2, r3}
 8021396:	b507      	push	{r0, r1, r2, lr}
 8021398:	ab04      	add	r3, sp, #16
 802139a:	f853 2b04 	ldr.w	r2, [r3], #4
 802139e:	9301      	str	r3, [sp, #4]
 80213a0:	f7ff ffd2 	bl	8021348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80213a4:	b003      	add	sp, #12
 80213a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80213aa:	b002      	add	sp, #8
 80213ac:	4770      	bx	lr
	...

080213b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 80213b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213b4:	b0c3      	sub	sp, #268	; 0x10c
 80213b6:	2400      	movs	r4, #0
 80213b8:	4606      	mov	r6, r0
 80213ba:	4689      	mov	r9, r1
 80213bc:	af10      	add	r7, sp, #64	; 0x40
 80213be:	9209      	str	r2, [sp, #36]	; 0x24
 80213c0:	4621      	mov	r1, r4
 80213c2:	22c8      	movs	r2, #200	; 0xc8
 80213c4:	4638      	mov	r0, r7
 80213c6:	469a      	mov	sl, r3
 80213c8:	940c      	str	r4, [sp, #48]	; 0x30
 80213ca:	f7fe fc94 	bl	801fcf6 <_ZN8touchgfx6memsetEPvhm>
 80213ce:	b116      	cbz	r6, 80213d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 80213d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213d2:	b923      	cbnz	r3, 80213de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 80213d4:	8033      	strh	r3, [r6, #0]
 80213d6:	4630      	mov	r0, r6
 80213d8:	b043      	add	sp, #268	; 0x10c
 80213da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213de:	f109 3bff 	add.w	fp, r9, #4294967295
 80213e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80213e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213e6:	8812      	ldrh	r2, [r2, #0]
 80213e8:	2a00      	cmp	r2, #0
 80213ea:	f000 80d1 	beq.w	8021590 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80213ee:	459b      	cmp	fp, r3
 80213f0:	f340 80ce 	ble.w	8021590 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80213f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80213f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213f8:	882a      	ldrh	r2, [r5, #0]
 80213fa:	2a00      	cmp	r2, #0
 80213fc:	d0f1      	beq.n	80213e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80213fe:	2a25      	cmp	r2, #37	; 0x25
 8021400:	f000 80ca 	beq.w	8021598 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 8021404:	459b      	cmp	fp, r3
 8021406:	ddec      	ble.n	80213e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8021408:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 802140c:	3502      	adds	r5, #2
 802140e:	3301      	adds	r3, #1
 8021410:	9509      	str	r5, [sp, #36]	; 0x24
 8021412:	930c      	str	r3, [sp, #48]	; 0x30
 8021414:	e7ee      	b.n	80213f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 8021416:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 802141a:	3202      	adds	r2, #2
 802141c:	920c      	str	r2, [sp, #48]	; 0x30
 802141e:	e0ac      	b.n	802157a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 8021420:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8021424:	970f      	str	r7, [sp, #60]	; 0x3c
 8021426:	3401      	adds	r4, #1
 8021428:	edd3 7a00 	vldr	s15, [r3]
 802142c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8021430:	b923      	cbnz	r3, 802143c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 8021432:	2301      	movs	r3, #1
 8021434:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8021438:	2303      	movs	r3, #3
 802143a:	930e      	str	r3, [sp, #56]	; 0x38
 802143c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021440:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021442:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8021446:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8021644 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 802144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802144e:	bf42      	ittt	mi
 8021450:	232d      	movmi	r3, #45	; 0x2d
 8021452:	eef1 7a67 	vnegmi.f32	s15, s15
 8021456:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 802145a:	2300      	movs	r3, #0
 802145c:	4298      	cmp	r0, r3
 802145e:	dd03      	ble.n	8021468 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 8021460:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8021464:	3301      	adds	r3, #1
 8021466:	e7f9      	b.n	802145c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 8021468:	ee77 7a87 	vadd.f32	s15, s15, s14
 802146c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021470:	eeb0 7a67 	vmov.f32	s14, s15
 8021474:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8021478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802147c:	da26      	bge.n	80214cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 802147e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8021482:	eba9 0202 	sub.w	r2, r9, r2
 8021486:	2100      	movs	r1, #0
 8021488:	eef4 6ae5 	vcmpe.f32	s13, s11
 802148c:	b28d      	uxth	r5, r1
 802148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021492:	db21      	blt.n	80214d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8021494:	1a53      	subs	r3, r2, r1
 8021496:	2b00      	cmp	r3, #0
 8021498:	dd1e      	ble.n	80214d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 802149a:	2963      	cmp	r1, #99	; 0x63
 802149c:	d01b      	beq.n	80214d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 802149e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80214a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80214a6:	ee17 3a10 	vmov	r3, s14
 80214aa:	2b09      	cmp	r3, #9
 80214ac:	bfa8      	it	ge
 80214ae:	2309      	movge	r3, #9
 80214b0:	ee07 3a10 	vmov	s14, r3
 80214b4:	f103 0530 	add.w	r5, r3, #48	; 0x30
 80214b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80214bc:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 80214c0:	3101      	adds	r1, #1
 80214c2:	eee7 7a66 	vfms.f32	s15, s14, s13
 80214c6:	eec6 6a86 	vdiv.f32	s13, s13, s12
 80214ca:	e7dd      	b.n	8021488 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 80214cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80214d0:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80214d4:	e7ce      	b.n	8021474 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 80214d6:	460d      	mov	r5, r1
 80214d8:	2a63      	cmp	r2, #99	; 0x63
 80214da:	bfd4      	ite	le
 80214dc:	ebc5 0202 	rsble	r2, r5, r2
 80214e0:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 80214e4:	2a00      	cmp	r2, #0
 80214e6:	dd4e      	ble.n	8021586 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 80214e8:	4603      	mov	r3, r0
 80214ea:	f04f 0801 	mov.w	r8, #1
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	dd0e      	ble.n	8021510 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 80214f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80214f6:	210a      	movs	r1, #10
 80214f8:	3b01      	subs	r3, #1
 80214fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80214fe:	ee17 ca10 	vmov	ip, s14
 8021502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021506:	fb01 c808 	mla	r8, r1, r8, ip
 802150a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802150e:	e7ee      	b.n	80214ee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 8021510:	2800      	cmp	r0, #0
 8021512:	f100 33ff 	add.w	r3, r0, #4294967295
 8021516:	ea4f 0545 	mov.w	r5, r5, lsl #1
 802151a:	bfac      	ite	ge
 802151c:	1a18      	subge	r0, r3, r0
 802151e:	4618      	movlt	r0, r3
 8021520:	b292      	uxth	r2, r2
 8021522:	230a      	movs	r3, #10
 8021524:	900e      	str	r0, [sp, #56]	; 0x38
 8021526:	1979      	adds	r1, r7, r5
 8021528:	4640      	mov	r0, r8
 802152a:	f7ff fc84 	bl	8020e36 <_ZN8touchgfx7Unicode4itoaElPtti>
 802152e:	f1b8 0f01 	cmp.w	r8, #1
 8021532:	dc26      	bgt.n	8021582 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 8021534:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8021538:	2b00      	cmp	r3, #0
 802153a:	bf0c      	ite	eq
 802153c:	2300      	moveq	r3, #0
 802153e:	232e      	movne	r3, #46	; 0x2e
 8021540:	aa42      	add	r2, sp, #264	; 0x108
 8021542:	4415      	add	r5, r2
 8021544:	aa0c      	add	r2, sp, #48	; 0x30
 8021546:	f825 3cc8 	strh.w	r3, [r5, #-200]
 802154a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 802154e:	a80f      	add	r0, sp, #60	; 0x3c
 8021550:	9205      	str	r2, [sp, #20]
 8021552:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8021556:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 802155a:	9204      	str	r2, [sp, #16]
 802155c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802155e:	9203      	str	r2, [sp, #12]
 8021560:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8021564:	9202      	str	r2, [sp, #8]
 8021566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021568:	9201      	str	r2, [sp, #4]
 802156a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 802156e:	e9cd 9606 	strd	r9, r6, [sp, #24]
 8021572:	9200      	str	r2, [sp, #0]
 8021574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021576:	f7ff fc9f 	bl	8020eb8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 802157a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802157c:	3302      	adds	r3, #2
 802157e:	9309      	str	r3, [sp, #36]	; 0x24
 8021580:	e72f      	b.n	80213e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8021582:	232e      	movs	r3, #46	; 0x2e
 8021584:	e7dc      	b.n	8021540 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 8021586:	ab42      	add	r3, sp, #264	; 0x108
 8021588:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802158c:	2300      	movs	r3, #0
 802158e:	e7d9      	b.n	8021544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 8021590:	2200      	movs	r2, #0
 8021592:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8021596:	e71e      	b.n	80213d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8021598:	459b      	cmp	fp, r3
 802159a:	f77f af22 	ble.w	80213e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 802159e:	2300      	movs	r3, #0
 80215a0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80215a4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80215a8:	a809      	add	r0, sp, #36	; 0x24
 80215aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80215ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80215b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215b6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80215ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80215be:	930d      	str	r3, [sp, #52]	; 0x34
 80215c0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80215c4:	930e      	str	r3, [sp, #56]	; 0x38
 80215c6:	1cab      	adds	r3, r5, #2
 80215c8:	9309      	str	r3, [sp, #36]	; 0x24
 80215ca:	ab0e      	add	r3, sp, #56	; 0x38
 80215cc:	9304      	str	r3, [sp, #16]
 80215ce:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80215d2:	9303      	str	r3, [sp, #12]
 80215d4:	ab0d      	add	r3, sp, #52	; 0x34
 80215d6:	9302      	str	r3, [sp, #8]
 80215d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80215da:	9301      	str	r3, [sp, #4]
 80215dc:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80215e0:	9300      	str	r3, [sp, #0]
 80215e2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80215e6:	f7ff fd17 	bl	8021018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80215ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	da0b      	bge.n	8021608 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 80215f0:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 80215f4:	3401      	adds	r4, #1
 80215f6:	edd3 7a00 	vldr	s15, [r3]
 80215fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80215fe:	ee17 3a90 	vmov	r3, s15
 8021602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021606:	930d      	str	r3, [sp, #52]	; 0x34
 8021608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802160a:	2b00      	cmp	r3, #0
 802160c:	da0b      	bge.n	8021626 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 802160e:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8021612:	3401      	adds	r4, #1
 8021614:	edd3 7a00 	vldr	s15, [r3]
 8021618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802161c:	ee17 3a90 	vmov	r3, s15
 8021620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021624:	930e      	str	r3, [sp, #56]	; 0x38
 8021626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802162a:	881b      	ldrh	r3, [r3, #0]
 802162c:	2b25      	cmp	r3, #37	; 0x25
 802162e:	f43f aef2 	beq.w	8021416 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 8021632:	2b66      	cmp	r3, #102	; 0x66
 8021634:	f43f aef4 	beq.w	8021420 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 8021638:	9509      	str	r5, [sp, #36]	; 0x24
 802163a:	882b      	ldrh	r3, [r5, #0]
 802163c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8021640:	3201      	adds	r2, #1
 8021642:	e6eb      	b.n	802141c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 8021644:	3f000002 	.word	0x3f000002

08021648 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8021648:	b5f0      	push	{r4, r5, r6, r7, lr}
 802164a:	4605      	mov	r5, r0
 802164c:	b0a1      	sub	sp, #132	; 0x84
 802164e:	4610      	mov	r0, r2
 8021650:	460e      	mov	r6, r1
 8021652:	4614      	mov	r4, r2
 8021654:	461f      	mov	r7, r3
 8021656:	f7ff fbb3 	bl	8020dc0 <_ZN8touchgfx7Unicode6strlenEPKc>
 802165a:	283f      	cmp	r0, #63	; 0x3f
 802165c:	d906      	bls.n	802166c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 802165e:	4b0a      	ldr	r3, [pc, #40]	; (8021688 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 8021660:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8021664:	4a09      	ldr	r2, [pc, #36]	; (802168c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 8021666:	480a      	ldr	r0, [pc, #40]	; (8021690 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 8021668:	f009 fe2c 	bl	802b2c4 <__assert_func>
 802166c:	4621      	mov	r1, r4
 802166e:	2240      	movs	r2, #64	; 0x40
 8021670:	4668      	mov	r0, sp
 8021672:	f7ff fbb1 	bl	8020dd8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8021676:	463b      	mov	r3, r7
 8021678:	466a      	mov	r2, sp
 802167a:	4631      	mov	r1, r6
 802167c:	4628      	mov	r0, r5
 802167e:	f7ff fe97 	bl	80213b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 8021682:	b021      	add	sp, #132	; 0x84
 8021684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021686:	bf00      	nop
 8021688:	08030889 	.word	0x08030889
 802168c:	080308cc 	.word	0x080308cc
 8021690:	080308a6 	.word	0x080308a6

08021694 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021694:	4b01      	ldr	r3, [pc, #4]	; (802169c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021696:	6018      	str	r0, [r3, #0]
 8021698:	4770      	bx	lr
 802169a:	bf00      	nop
 802169c:	2000c070 	.word	0x2000c070

080216a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80216a0:	4b07      	ldr	r3, [pc, #28]	; (80216c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80216a2:	881a      	ldrh	r2, [r3, #0]
 80216a4:	4282      	cmp	r2, r0
 80216a6:	d809      	bhi.n	80216bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80216a8:	4b06      	ldr	r3, [pc, #24]	; (80216c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 80216aa:	881b      	ldrh	r3, [r3, #0]
 80216ac:	4413      	add	r3, r2
 80216ae:	4298      	cmp	r0, r3
 80216b0:	da04      	bge.n	80216bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80216b2:	4b05      	ldr	r3, [pc, #20]	; (80216c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80216ba:	4770      	bx	lr
 80216bc:	2000      	movs	r0, #0
 80216be:	4770      	bx	lr
 80216c0:	2000c090 	.word	0x2000c090
 80216c4:	2000c094 	.word	0x2000c094
 80216c8:	2000c074 	.word	0x2000c074

080216cc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80216cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216d0:	4d26      	ldr	r5, [pc, #152]	; (802176c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80216d2:	682b      	ldr	r3, [r5, #0]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d046      	beq.n	8021766 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80216d8:	4a25      	ldr	r2, [pc, #148]	; (8021770 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80216da:	4f26      	ldr	r7, [pc, #152]	; (8021774 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80216dc:	8810      	ldrh	r0, [r2, #0]
 80216de:	883c      	ldrh	r4, [r7, #0]
 80216e0:	4e25      	ldr	r6, [pc, #148]	; (8021778 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80216e2:	4420      	add	r0, r4
 80216e4:	1c42      	adds	r2, r0, #1
 80216e6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80216ea:	f022 0201 	bic.w	r2, r2, #1
 80216ee:	0412      	lsls	r2, r2, #16
 80216f0:	0c12      	lsrs	r2, r2, #16
 80216f2:	0051      	lsls	r1, r2, #1
 80216f4:	220e      	movs	r2, #14
 80216f6:	eb08 0e01 	add.w	lr, r8, r1
 80216fa:	fb02 fc04 	mul.w	ip, r2, r4
 80216fe:	eb03 0208 	add.w	r2, r3, r8
 8021702:	4c1e      	ldr	r4, [pc, #120]	; (802177c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8021704:	6022      	str	r2, [r4, #0]
 8021706:	eb03 020e 	add.w	r2, r3, lr
 802170a:	44e6      	add	lr, ip
 802170c:	6032      	str	r2, [r6, #0]
 802170e:	4473      	add	r3, lr
 8021710:	4a1b      	ldr	r2, [pc, #108]	; (8021780 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8021712:	6013      	str	r3, [r2, #0]
 8021714:	2300      	movs	r3, #0
 8021716:	4a1b      	ldr	r2, [pc, #108]	; (8021784 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8021718:	8013      	strh	r3, [r2, #0]
 802171a:	4a1b      	ldr	r2, [pc, #108]	; (8021788 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 802171c:	6812      	ldr	r2, [r2, #0]
 802171e:	eba2 0208 	sub.w	r2, r2, r8
 8021722:	1a52      	subs	r2, r2, r1
 8021724:	4919      	ldr	r1, [pc, #100]	; (802178c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8021726:	eba2 020c 	sub.w	r2, r2, ip
 802172a:	469c      	mov	ip, r3
 802172c:	600a      	str	r2, [r1, #0]
 802172e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021732:	4a17      	ldr	r2, [pc, #92]	; (8021790 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8021734:	8013      	strh	r3, [r2, #0]
 8021736:	4283      	cmp	r3, r0
 8021738:	d10d      	bne.n	8021756 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 802173a:	883d      	ldrh	r5, [r7, #0]
 802173c:	2300      	movs	r3, #0
 802173e:	6830      	ldr	r0, [r6, #0]
 8021740:	240e      	movs	r4, #14
 8021742:	429d      	cmp	r5, r3
 8021744:	d90f      	bls.n	8021766 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8021746:	fb04 0203 	mla	r2, r4, r3, r0
 802174a:	3301      	adds	r3, #1
 802174c:	7b11      	ldrb	r1, [r2, #12]
 802174e:	f36f 1145 	bfc	r1, #5, #1
 8021752:	7311      	strb	r1, [r2, #12]
 8021754:	e7f5      	b.n	8021742 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8021756:	682a      	ldr	r2, [r5, #0]
 8021758:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 802175c:	6822      	ldr	r2, [r4, #0]
 802175e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8021762:	3301      	adds	r3, #1
 8021764:	e7e7      	b.n	8021736 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8021766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802176a:	bf00      	nop
 802176c:	2000c074 	.word	0x2000c074
 8021770:	2000c090 	.word	0x2000c090
 8021774:	2000c094 	.word	0x2000c094
 8021778:	2000c078 	.word	0x2000c078
 802177c:	2000c088 	.word	0x2000c088
 8021780:	2000c080 	.word	0x2000c080
 8021784:	2000c092 	.word	0x2000c092
 8021788:	2000c07c 	.word	0x2000c07c
 802178c:	2000c08c 	.word	0x2000c08c
 8021790:	2000c084 	.word	0x2000c084

08021794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8021794:	4b10      	ldr	r3, [pc, #64]	; (80217d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8021796:	b510      	push	{r4, lr}
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	b9db      	cbnz	r3, 80217d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 802179c:	b1d1      	cbz	r1, 80217d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 802179e:	4b0f      	ldr	r3, [pc, #60]	; (80217dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80217a0:	240e      	movs	r4, #14
 80217a2:	801a      	strh	r2, [r3, #0]
 80217a4:	b292      	uxth	r2, r2
 80217a6:	4b0e      	ldr	r3, [pc, #56]	; (80217e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80217a8:	881b      	ldrh	r3, [r3, #0]
 80217aa:	4413      	add	r3, r2
 80217ac:	4362      	muls	r2, r4
 80217ae:	2406      	movs	r4, #6
 80217b0:	fb04 2203 	mla	r2, r4, r3, r2
 80217b4:	428a      	cmp	r2, r1
 80217b6:	d305      	bcc.n	80217c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80217b8:	4b0a      	ldr	r3, [pc, #40]	; (80217e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80217ba:	2137      	movs	r1, #55	; 0x37
 80217bc:	4a0a      	ldr	r2, [pc, #40]	; (80217e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80217be:	480b      	ldr	r0, [pc, #44]	; (80217ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80217c0:	f009 fd80 	bl	802b2c4 <__assert_func>
 80217c4:	4b0a      	ldr	r3, [pc, #40]	; (80217f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80217c6:	6019      	str	r1, [r3, #0]
 80217c8:	4b0a      	ldr	r3, [pc, #40]	; (80217f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80217ca:	6018      	str	r0, [r3, #0]
 80217cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217d0:	f7ff bf7c 	b.w	80216cc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80217d4:	bd10      	pop	{r4, pc}
 80217d6:	bf00      	nop
 80217d8:	2000c080 	.word	0x2000c080
 80217dc:	2000c094 	.word	0x2000c094
 80217e0:	2000c090 	.word	0x2000c090
 80217e4:	08030a3d 	.word	0x08030a3d
 80217e8:	08030a96 	.word	0x08030a96
 80217ec:	08030a18 	.word	0x08030a18
 80217f0:	2000c07c 	.word	0x2000c07c
 80217f4:	2000c074 	.word	0x2000c074

080217f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80217f8:	b470      	push	{r4, r5, r6}
 80217fa:	4c07      	ldr	r4, [pc, #28]	; (8021818 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80217fc:	4605      	mov	r5, r0
 80217fe:	4610      	mov	r0, r2
 8021800:	9a03      	ldr	r2, [sp, #12]
 8021802:	6826      	ldr	r6, [r4, #0]
 8021804:	b936      	cbnz	r6, 8021814 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8021806:	6025      	str	r5, [r4, #0]
 8021808:	4c04      	ldr	r4, [pc, #16]	; (802181c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 802180a:	8021      	strh	r1, [r4, #0]
 802180c:	4619      	mov	r1, r3
 802180e:	bc70      	pop	{r4, r5, r6}
 8021810:	f7ff bfc0 	b.w	8021794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8021814:	bc70      	pop	{r4, r5, r6}
 8021816:	4770      	bx	lr
 8021818:	2000c098 	.word	0x2000c098
 802181c:	2000c090 	.word	0x2000c090

08021820 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8021820:	b508      	push	{r3, lr}
 8021822:	4b14      	ldr	r3, [pc, #80]	; (8021874 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8021824:	6819      	ldr	r1, [r3, #0]
 8021826:	b931      	cbnz	r1, 8021836 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8021828:	4b13      	ldr	r3, [pc, #76]	; (8021878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 802182a:	f240 21e6 	movw	r1, #742	; 0x2e6
 802182e:	4a13      	ldr	r2, [pc, #76]	; (802187c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8021830:	4813      	ldr	r0, [pc, #76]	; (8021880 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8021832:	f009 fd47 	bl	802b2c4 <__assert_func>
 8021836:	4a13      	ldr	r2, [pc, #76]	; (8021884 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8021838:	8803      	ldrh	r3, [r0, #0]
 802183a:	8812      	ldrh	r2, [r2, #0]
 802183c:	4293      	cmp	r3, r2
 802183e:	d204      	bcs.n	802184a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8021840:	2214      	movs	r2, #20
 8021842:	fb02 1303 	mla	r3, r2, r3, r1
 8021846:	8918      	ldrh	r0, [r3, #8]
 8021848:	bd08      	pop	{r3, pc}
 802184a:	490f      	ldr	r1, [pc, #60]	; (8021888 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 802184c:	8809      	ldrh	r1, [r1, #0]
 802184e:	4411      	add	r1, r2
 8021850:	428b      	cmp	r3, r1
 8021852:	da06      	bge.n	8021862 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8021854:	1a9b      	subs	r3, r3, r2
 8021856:	4a0d      	ldr	r2, [pc, #52]	; (802188c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021858:	210e      	movs	r1, #14
 802185a:	6812      	ldr	r2, [r2, #0]
 802185c:	fb01 2303 	mla	r3, r1, r3, r2
 8021860:	e7f1      	b.n	8021846 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8021862:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021866:	4293      	cmp	r3, r2
 8021868:	bf0a      	itet	eq
 802186a:	4b09      	ldreq	r3, [pc, #36]	; (8021890 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 802186c:	2000      	movne	r0, #0
 802186e:	8818      	ldrheq	r0, [r3, #0]
 8021870:	e7ea      	b.n	8021848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8021872:	bf00      	nop
 8021874:	2000c098 	.word	0x2000c098
 8021878:	0802e310 	.word	0x0802e310
 802187c:	08030b43 	.word	0x08030b43
 8021880:	08030a18 	.word	0x08030a18
 8021884:	2000c090 	.word	0x2000c090
 8021888:	2000c094 	.word	0x2000c094
 802188c:	2000c078 	.word	0x2000c078
 8021890:	2000bfc2 	.word	0x2000bfc2

08021894 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8021894:	b508      	push	{r3, lr}
 8021896:	4b14      	ldr	r3, [pc, #80]	; (80218e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8021898:	6819      	ldr	r1, [r3, #0]
 802189a:	b931      	cbnz	r1, 80218aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 802189c:	4b13      	ldr	r3, [pc, #76]	; (80218ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 802189e:	f240 21fa 	movw	r1, #762	; 0x2fa
 80218a2:	4a13      	ldr	r2, [pc, #76]	; (80218f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80218a4:	4813      	ldr	r0, [pc, #76]	; (80218f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80218a6:	f009 fd0d 	bl	802b2c4 <__assert_func>
 80218aa:	4a13      	ldr	r2, [pc, #76]	; (80218f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80218ac:	8803      	ldrh	r3, [r0, #0]
 80218ae:	8812      	ldrh	r2, [r2, #0]
 80218b0:	4293      	cmp	r3, r2
 80218b2:	d204      	bcs.n	80218be <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80218b4:	2214      	movs	r2, #20
 80218b6:	fb02 1303 	mla	r3, r2, r3, r1
 80218ba:	8958      	ldrh	r0, [r3, #10]
 80218bc:	bd08      	pop	{r3, pc}
 80218be:	490f      	ldr	r1, [pc, #60]	; (80218fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80218c0:	8809      	ldrh	r1, [r1, #0]
 80218c2:	4411      	add	r1, r2
 80218c4:	428b      	cmp	r3, r1
 80218c6:	da06      	bge.n	80218d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80218c8:	1a9b      	subs	r3, r3, r2
 80218ca:	4a0d      	ldr	r2, [pc, #52]	; (8021900 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80218cc:	210e      	movs	r1, #14
 80218ce:	6812      	ldr	r2, [r2, #0]
 80218d0:	fb01 2303 	mla	r3, r1, r3, r2
 80218d4:	e7f1      	b.n	80218ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80218d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80218da:	4293      	cmp	r3, r2
 80218dc:	bf0a      	itet	eq
 80218de:	4b09      	ldreq	r3, [pc, #36]	; (8021904 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80218e0:	2000      	movne	r0, #0
 80218e2:	8818      	ldrheq	r0, [r3, #0]
 80218e4:	e7ea      	b.n	80218bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80218e6:	bf00      	nop
 80218e8:	2000c098 	.word	0x2000c098
 80218ec:	0802e310 	.word	0x0802e310
 80218f0:	08030b6f 	.word	0x08030b6f
 80218f4:	08030a18 	.word	0x08030a18
 80218f8:	2000c090 	.word	0x2000c090
 80218fc:	2000c094 	.word	0x2000c094
 8021900:	2000c078 	.word	0x2000c078
 8021904:	2000bfc4 	.word	0x2000bfc4

08021908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8021908:	4b23      	ldr	r3, [pc, #140]	; (8021998 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802190a:	b510      	push	{r4, lr}
 802190c:	681c      	ldr	r4, [r3, #0]
 802190e:	b934      	cbnz	r4, 802191e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8021910:	4b22      	ldr	r3, [pc, #136]	; (802199c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8021912:	f240 310e 	movw	r1, #782	; 0x30e
 8021916:	4a22      	ldr	r2, [pc, #136]	; (80219a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8021918:	4822      	ldr	r0, [pc, #136]	; (80219a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802191a:	f009 fcd3 	bl	802b2c4 <__assert_func>
 802191e:	4a22      	ldr	r2, [pc, #136]	; (80219a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8021920:	880b      	ldrh	r3, [r1, #0]
 8021922:	8812      	ldrh	r2, [r2, #0]
 8021924:	4293      	cmp	r3, r2
 8021926:	d211      	bcs.n	802194c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8021928:	2214      	movs	r2, #20
 802192a:	fb02 4303 	mla	r3, r2, r3, r4
 802192e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8021932:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021936:	8a1a      	ldrh	r2, [r3, #16]
 8021938:	8a5b      	ldrh	r3, [r3, #18]
 802193a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 802193e:	8004      	strh	r4, [r0, #0]
 8021940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021944:	8041      	strh	r1, [r0, #2]
 8021946:	8082      	strh	r2, [r0, #4]
 8021948:	80c3      	strh	r3, [r0, #6]
 802194a:	e00e      	b.n	802196a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 802194c:	4917      	ldr	r1, [pc, #92]	; (80219ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 802194e:	8809      	ldrh	r1, [r1, #0]
 8021950:	4411      	add	r1, r2
 8021952:	428b      	cmp	r3, r1
 8021954:	da0a      	bge.n	802196c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8021956:	1a9b      	subs	r3, r3, r2
 8021958:	4a15      	ldr	r2, [pc, #84]	; (80219b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 802195a:	210e      	movs	r1, #14
 802195c:	6812      	ldr	r2, [r2, #0]
 802195e:	fb01 2303 	mla	r3, r1, r3, r2
 8021962:	681a      	ldr	r2, [r3, #0]
 8021964:	6002      	str	r2, [r0, #0]
 8021966:	685a      	ldr	r2, [r3, #4]
 8021968:	6042      	str	r2, [r0, #4]
 802196a:	bd10      	pop	{r4, pc}
 802196c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021970:	4293      	cmp	r3, r2
 8021972:	d10b      	bne.n	802198c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8021974:	4b0f      	ldr	r3, [pc, #60]	; (80219b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8021976:	f9b3 1000 	ldrsh.w	r1, [r3]
 802197a:	4b0f      	ldr	r3, [pc, #60]	; (80219b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 802197c:	8081      	strh	r1, [r0, #4]
 802197e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021982:	2300      	movs	r3, #0
 8021984:	80c2      	strh	r2, [r0, #6]
 8021986:	8003      	strh	r3, [r0, #0]
 8021988:	8043      	strh	r3, [r0, #2]
 802198a:	e7ee      	b.n	802196a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 802198c:	2300      	movs	r3, #0
 802198e:	8003      	strh	r3, [r0, #0]
 8021990:	8043      	strh	r3, [r0, #2]
 8021992:	8083      	strh	r3, [r0, #4]
 8021994:	e7d8      	b.n	8021948 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8021996:	bf00      	nop
 8021998:	2000c098 	.word	0x2000c098
 802199c:	0802e310 	.word	0x0802e310
 80219a0:	08030adc 	.word	0x08030adc
 80219a4:	08030a18 	.word	0x08030a18
 80219a8:	2000c090 	.word	0x2000c090
 80219ac:	2000c094 	.word	0x2000c094
 80219b0:	2000c078 	.word	0x2000c078
 80219b4:	2000bfc2 	.word	0x2000bfc2
 80219b8:	2000bfc4 	.word	0x2000bfc4

080219bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80219bc:	4b18      	ldr	r3, [pc, #96]	; (8021a20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	b34b      	cbz	r3, 8021a16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80219c2:	4a18      	ldr	r2, [pc, #96]	; (8021a24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80219c4:	8800      	ldrh	r0, [r0, #0]
 80219c6:	8812      	ldrh	r2, [r2, #0]
 80219c8:	4290      	cmp	r0, r2
 80219ca:	d211      	bcs.n	80219f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80219cc:	2214      	movs	r2, #20
 80219ce:	fb02 3300 	mla	r3, r2, r0, r3
 80219d2:	8a1a      	ldrh	r2, [r3, #16]
 80219d4:	8919      	ldrh	r1, [r3, #8]
 80219d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80219da:	428a      	cmp	r2, r1
 80219dc:	db1d      	blt.n	8021a1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80219de:	8a58      	ldrh	r0, [r3, #18]
 80219e0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80219e4:	895b      	ldrh	r3, [r3, #10]
 80219e6:	4298      	cmp	r0, r3
 80219e8:	bfac      	ite	ge
 80219ea:	2000      	movge	r0, #0
 80219ec:	2001      	movlt	r0, #1
 80219ee:	4770      	bx	lr
 80219f0:	4b0d      	ldr	r3, [pc, #52]	; (8021a28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80219f2:	881b      	ldrh	r3, [r3, #0]
 80219f4:	4413      	add	r3, r2
 80219f6:	4298      	cmp	r0, r3
 80219f8:	da0d      	bge.n	8021a16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80219fa:	4b0c      	ldr	r3, [pc, #48]	; (8021a2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80219fc:	1a80      	subs	r0, r0, r2
 80219fe:	220e      	movs	r2, #14
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	fb02 3300 	mla	r3, r2, r0, r3
 8021a06:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8021a0a:	891a      	ldrh	r2, [r3, #8]
 8021a0c:	4291      	cmp	r1, r2
 8021a0e:	db04      	blt.n	8021a1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8021a10:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8021a14:	e7e6      	b.n	80219e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8021a16:	2000      	movs	r0, #0
 8021a18:	4770      	bx	lr
 8021a1a:	2001      	movs	r0, #1
 8021a1c:	4770      	bx	lr
 8021a1e:	bf00      	nop
 8021a20:	2000c098 	.word	0x2000c098
 8021a24:	2000c090 	.word	0x2000c090
 8021a28:	2000c094 	.word	0x2000c094
 8021a2c:	2000c078 	.word	0x2000c078

08021a30 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021a30:	b508      	push	{r3, lr}
 8021a32:	4b12      	ldr	r3, [pc, #72]	; (8021a7c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8021a34:	6819      	ldr	r1, [r3, #0]
 8021a36:	b931      	cbnz	r1, 8021a46 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021a38:	4b11      	ldr	r3, [pc, #68]	; (8021a80 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021a3a:	f240 3132 	movw	r1, #818	; 0x332
 8021a3e:	4a11      	ldr	r2, [pc, #68]	; (8021a84 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021a40:	4811      	ldr	r0, [pc, #68]	; (8021a88 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8021a42:	f009 fc3f 	bl	802b2c4 <__assert_func>
 8021a46:	8803      	ldrh	r3, [r0, #0]
 8021a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021a4c:	4293      	cmp	r3, r2
 8021a4e:	d012      	beq.n	8021a76 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021a50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021a54:	4293      	cmp	r3, r2
 8021a56:	d103      	bne.n	8021a60 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021a58:	4b0c      	ldr	r3, [pc, #48]	; (8021a8c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021a5e:	bd08      	pop	{r3, pc}
 8021a60:	4a0b      	ldr	r2, [pc, #44]	; (8021a90 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8021a62:	6812      	ldr	r2, [r2, #0]
 8021a64:	b11a      	cbz	r2, 8021a6e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8021a66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021a6a:	2800      	cmp	r0, #0
 8021a6c:	d1f7      	bne.n	8021a5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a6e:	2214      	movs	r2, #20
 8021a70:	4353      	muls	r3, r2
 8021a72:	58c8      	ldr	r0, [r1, r3]
 8021a74:	e7f3      	b.n	8021a5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a76:	2000      	movs	r0, #0
 8021a78:	e7f1      	b.n	8021a5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021a7a:	bf00      	nop
 8021a7c:	2000c098 	.word	0x2000c098
 8021a80:	0802e310 	.word	0x0802e310
 8021a84:	08030b12 	.word	0x08030b12
 8021a88:	08030a18 	.word	0x08030a18
 8021a8c:	2000bfd0 	.word	0x2000bfd0
 8021a90:	2000c074 	.word	0x2000c074

08021a94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8021a94:	8802      	ldrh	r2, [r0, #0]
 8021a96:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021a9a:	429a      	cmp	r2, r3
 8021a9c:	d840      	bhi.n	8021b20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021a9e:	4b21      	ldr	r3, [pc, #132]	; (8021b24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8021aa0:	881b      	ldrh	r3, [r3, #0]
 8021aa2:	429a      	cmp	r2, r3
 8021aa4:	d220      	bcs.n	8021ae8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8021aa6:	4b20      	ldr	r3, [pc, #128]	; (8021b28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8021aa8:	6819      	ldr	r1, [r3, #0]
 8021aaa:	2314      	movs	r3, #20
 8021aac:	fb03 1302 	mla	r3, r3, r2, r1
 8021ab0:	6858      	ldr	r0, [r3, #4]
 8021ab2:	2800      	cmp	r0, #0
 8021ab4:	d035      	beq.n	8021b22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021ab6:	491d      	ldr	r1, [pc, #116]	; (8021b2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021ab8:	6809      	ldr	r1, [r1, #0]
 8021aba:	2900      	cmp	r1, #0
 8021abc:	d031      	beq.n	8021b22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021abe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8021ac2:	b371      	cbz	r1, 8021b22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021ac4:	895a      	ldrh	r2, [r3, #10]
 8021ac6:	8918      	ldrh	r0, [r3, #8]
 8021ac8:	4350      	muls	r0, r2
 8021aca:	7c5a      	ldrb	r2, [r3, #17]
 8021acc:	7cdb      	ldrb	r3, [r3, #19]
 8021ace:	0952      	lsrs	r2, r2, #5
 8021ad0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8021ad4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021ad8:	2b0b      	cmp	r3, #11
 8021ada:	bf18      	it	ne
 8021adc:	0040      	lslne	r0, r0, #1
 8021ade:	3003      	adds	r0, #3
 8021ae0:	f020 0003 	bic.w	r0, r0, #3
 8021ae4:	4408      	add	r0, r1
 8021ae6:	4770      	bx	lr
 8021ae8:	4911      	ldr	r1, [pc, #68]	; (8021b30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021aea:	8809      	ldrh	r1, [r1, #0]
 8021aec:	4419      	add	r1, r3
 8021aee:	428a      	cmp	r2, r1
 8021af0:	da16      	bge.n	8021b20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021af2:	4910      	ldr	r1, [pc, #64]	; (8021b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021af4:	1ad3      	subs	r3, r2, r3
 8021af6:	200e      	movs	r0, #14
 8021af8:	6809      	ldr	r1, [r1, #0]
 8021afa:	fb00 1303 	mla	r3, r0, r3, r1
 8021afe:	7b19      	ldrb	r1, [r3, #12]
 8021b00:	f001 011f 	and.w	r1, r1, #31
 8021b04:	290b      	cmp	r1, #11
 8021b06:	d10b      	bne.n	8021b20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8021b08:	8919      	ldrh	r1, [r3, #8]
 8021b0a:	8958      	ldrh	r0, [r3, #10]
 8021b0c:	4b07      	ldr	r3, [pc, #28]	; (8021b2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021b0e:	4348      	muls	r0, r1
 8021b10:	6819      	ldr	r1, [r3, #0]
 8021b12:	3003      	adds	r0, #3
 8021b14:	f020 0303 	bic.w	r3, r0, #3
 8021b18:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8021b1c:	4418      	add	r0, r3
 8021b1e:	4770      	bx	lr
 8021b20:	2000      	movs	r0, #0
 8021b22:	4770      	bx	lr
 8021b24:	2000c090 	.word	0x2000c090
 8021b28:	2000c098 	.word	0x2000c098
 8021b2c:	2000c074 	.word	0x2000c074
 8021b30:	2000c094 	.word	0x2000c094
 8021b34:	2000c078 	.word	0x2000c078

08021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021b38:	4b19      	ldr	r3, [pc, #100]	; (8021ba0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021b3a:	6819      	ldr	r1, [r3, #0]
 8021b3c:	8803      	ldrh	r3, [r0, #0]
 8021b3e:	b1e9      	cbz	r1, 8021b7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021b40:	4a18      	ldr	r2, [pc, #96]	; (8021ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021b42:	8812      	ldrh	r2, [r2, #0]
 8021b44:	429a      	cmp	r2, r3
 8021b46:	d90a      	bls.n	8021b5e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021b48:	2214      	movs	r2, #20
 8021b4a:	fb02 1303 	mla	r3, r2, r3, r1
 8021b4e:	7c58      	ldrb	r0, [r3, #17]
 8021b50:	0942      	lsrs	r2, r0, #5
 8021b52:	7cd8      	ldrb	r0, [r3, #19]
 8021b54:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021b58:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021b5c:	4770      	bx	lr
 8021b5e:	4912      	ldr	r1, [pc, #72]	; (8021ba8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8021b60:	8809      	ldrh	r1, [r1, #0]
 8021b62:	4411      	add	r1, r2
 8021b64:	428b      	cmp	r3, r1
 8021b66:	da09      	bge.n	8021b7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021b68:	1a9b      	subs	r3, r3, r2
 8021b6a:	4a10      	ldr	r2, [pc, #64]	; (8021bac <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8021b6c:	210e      	movs	r1, #14
 8021b6e:	6812      	ldr	r2, [r2, #0]
 8021b70:	fb01 2303 	mla	r3, r1, r3, r2
 8021b74:	7b18      	ldrb	r0, [r3, #12]
 8021b76:	f000 001f 	and.w	r0, r0, #31
 8021b7a:	4770      	bx	lr
 8021b7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021b80:	4293      	cmp	r3, r2
 8021b82:	d10a      	bne.n	8021b9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8021b84:	4b0a      	ldr	r3, [pc, #40]	; (8021bb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021b8c:	b10a      	cbz	r2, 8021b92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8021b8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021b90:	b900      	cbnz	r0, 8021b94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8021b92:	6898      	ldr	r0, [r3, #8]
 8021b94:	6803      	ldr	r3, [r0, #0]
 8021b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b98:	4718      	bx	r3
 8021b9a:	2000      	movs	r0, #0
 8021b9c:	4770      	bx	lr
 8021b9e:	bf00      	nop
 8021ba0:	2000c098 	.word	0x2000c098
 8021ba4:	2000c090 	.word	0x2000c090
 8021ba8:	2000c094 	.word	0x2000c094
 8021bac:	2000c078 	.word	0x2000c078
 8021bb0:	2000bfd0 	.word	0x2000bfd0

08021bb4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8021bb4:	2018      	movs	r0, #24
 8021bb6:	4770      	bx	lr

08021bb8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8021bb8:	2001      	movs	r0, #1
 8021bba:	4770      	bx	lr

08021bbc <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8021bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021bc0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 8021bc4:	4770      	bx	lr

08021bc6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 8021bc6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8021bca:	4770      	bx	lr

08021bcc <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 8021bcc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8021bd0:	4770      	bx	lr

08021bd2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 8021bd2:	b2c8      	uxtb	r0, r1
 8021bd4:	4770      	bx	lr

08021bd6 <_ZN8touchgfx8LCD24bpp4initEv>:
 8021bd6:	4770      	bx	lr

08021bd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bdc:	b085      	sub	sp, #20
 8021bde:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021be0:	9203      	str	r2, [sp, #12]
 8021be2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	9201      	str	r2, [sp, #4]
 8021bea:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8021bec:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8021bf0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8021bf4:	fa1f fc84 	uxth.w	ip, r4
 8021bf8:	43e4      	mvns	r4, r4
 8021bfa:	9100      	str	r1, [sp, #0]
 8021bfc:	b2e4      	uxtb	r4, r4
 8021bfe:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021c02:	fb00 2505 	mla	r5, r0, r5, r2
 8021c06:	683a      	ldr	r2, [r7, #0]
 8021c08:	6877      	ldr	r7, [r6, #4]
 8021c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021c0e:	3704      	adds	r7, #4
 8021c10:	4415      	add	r5, r2
 8021c12:	6832      	ldr	r2, [r6, #0]
 8021c14:	9202      	str	r2, [sp, #8]
 8021c16:	9a00      	ldr	r2, [sp, #0]
 8021c18:	2a00      	cmp	r2, #0
 8021c1a:	dc03      	bgt.n	8021c24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8021c1c:	9a03      	ldr	r2, [sp, #12]
 8021c1e:	2a00      	cmp	r2, #0
 8021c20:	f340 8116 	ble.w	8021e50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021c24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021c26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021c2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	dd0f      	ble.n	8021c54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8021c34:	1406      	asrs	r6, r0, #16
 8021c36:	d406      	bmi.n	8021c46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021c38:	4546      	cmp	r6, r8
 8021c3a:	da04      	bge.n	8021c46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021c3c:	1416      	asrs	r6, r2, #16
 8021c3e:	d402      	bmi.n	8021c46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021c40:	9901      	ldr	r1, [sp, #4]
 8021c42:	428e      	cmp	r6, r1
 8021c44:	db07      	blt.n	8021c56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021c46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021c48:	3b01      	subs	r3, #1
 8021c4a:	3503      	adds	r5, #3
 8021c4c:	4408      	add	r0, r1
 8021c4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021c50:	440a      	add	r2, r1
 8021c52:	e7ed      	b.n	8021c30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8021c54:	d011      	beq.n	8021c7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021c56:	1e5e      	subs	r6, r3, #1
 8021c58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021c5a:	fb01 0e06 	mla	lr, r1, r6, r0
 8021c5e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8021c62:	d548      	bpl.n	8021cf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8021c64:	4699      	mov	r9, r3
 8021c66:	462e      	mov	r6, r5
 8021c68:	f1b9 0f00 	cmp.w	r9, #0
 8021c6c:	f300 809e 	bgt.w	8021dac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8021c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021c74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c78:	441d      	add	r5, r3
 8021c7a:	9b00      	ldr	r3, [sp, #0]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	f340 80e7 	ble.w	8021e50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c90:	eef0 6a62 	vmov.f32	s13, s5
 8021c94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021c98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ca0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021ca4:	eef0 6a43 	vmov.f32	s13, s6
 8021ca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cac:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021cb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021cb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021cb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021cbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021cc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021cc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021cc8:	ee12 2a90 	vmov	r2, s5
 8021ccc:	eef0 2a47 	vmov.f32	s5, s14
 8021cd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cd4:	ee13 2a10 	vmov	r2, s6
 8021cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8021cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cdc:	eeb0 3a67 	vmov.f32	s6, s15
 8021ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ce4:	9312      	str	r3, [sp, #72]	; 0x48
 8021ce6:	9b00      	ldr	r3, [sp, #0]
 8021ce8:	9a03      	ldr	r2, [sp, #12]
 8021cea:	3b01      	subs	r3, #1
 8021cec:	9300      	str	r3, [sp, #0]
 8021cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cf0:	bf08      	it	eq
 8021cf2:	4613      	moveq	r3, r2
 8021cf4:	e78f      	b.n	8021c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8021cf6:	45c6      	cmp	lr, r8
 8021cf8:	dab4      	bge.n	8021c64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8021cfa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021cfc:	fb01 2606 	mla	r6, r1, r6, r2
 8021d00:	1436      	asrs	r6, r6, #16
 8021d02:	d4af      	bmi.n	8021c64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8021d04:	9901      	ldr	r1, [sp, #4]
 8021d06:	428e      	cmp	r6, r1
 8021d08:	daac      	bge.n	8021c64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8021d0a:	1cee      	adds	r6, r5, #3
 8021d0c:	4699      	mov	r9, r3
 8021d0e:	f1b9 0f00 	cmp.w	r9, #0
 8021d12:	f106 0603 	add.w	r6, r6, #3
 8021d16:	ddab      	ble.n	8021c70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021d18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8021d1c:	9902      	ldr	r1, [sp, #8]
 8021d1e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021d22:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021d26:	fb08 1e0e 	mla	lr, r8, lr, r1
 8021d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021d2c:	fb1b fb04 	smulbb	fp, fp, r4
 8021d30:	f109 39ff 	add.w	r9, r9, #4294967295
 8021d34:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8021d38:	4408      	add	r0, r1
 8021d3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021d3c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021d40:	440a      	add	r2, r1
 8021d42:	eb07 0a0e 	add.w	sl, r7, lr
 8021d46:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021d4a:	fb0e be0c 	mla	lr, lr, ip, fp
 8021d4e:	fa1f fe8e 	uxth.w	lr, lr
 8021d52:	f10e 0b01 	add.w	fp, lr, #1
 8021d56:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021d5a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021d5e:	fb1b fb04 	smulbb	fp, fp, r4
 8021d62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d66:	f806 ec06 	strb.w	lr, [r6, #-6]
 8021d6a:	f89a e001 	ldrb.w	lr, [sl, #1]
 8021d6e:	fb0e be0c 	mla	lr, lr, ip, fp
 8021d72:	fa1f fe8e 	uxth.w	lr, lr
 8021d76:	f10e 0b01 	add.w	fp, lr, #1
 8021d7a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021d7e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d82:	f806 ec05 	strb.w	lr, [r6, #-5]
 8021d86:	f89a e002 	ldrb.w	lr, [sl, #2]
 8021d8a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021d8e:	fb1a fa04 	smulbb	sl, sl, r4
 8021d92:	fb0e ae0c 	mla	lr, lr, ip, sl
 8021d96:	fa1f fe8e 	uxth.w	lr, lr
 8021d9a:	f10e 0a01 	add.w	sl, lr, #1
 8021d9e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8021da2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021da6:	f806 ec04 	strb.w	lr, [r6, #-4]
 8021daa:	e7b0      	b.n	8021d0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8021dac:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021db0:	d446      	bmi.n	8021e40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021db2:	45c2      	cmp	sl, r8
 8021db4:	da44      	bge.n	8021e40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021db6:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8021dba:	d441      	bmi.n	8021e40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021dbc:	9901      	ldr	r1, [sp, #4]
 8021dbe:	458e      	cmp	lr, r1
 8021dc0:	da3e      	bge.n	8021e40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021dc2:	9902      	ldr	r1, [sp, #8]
 8021dc4:	f896 b000 	ldrb.w	fp, [r6]
 8021dc8:	fb08 1e0e 	mla	lr, r8, lr, r1
 8021dcc:	fb1b fb04 	smulbb	fp, fp, r4
 8021dd0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8021dd4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021dd8:	eb07 0a0e 	add.w	sl, r7, lr
 8021ddc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021de0:	fb0e be0c 	mla	lr, lr, ip, fp
 8021de4:	fa1f fe8e 	uxth.w	lr, lr
 8021de8:	f10e 0b01 	add.w	fp, lr, #1
 8021dec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021df0:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021df4:	fb1b fb04 	smulbb	fp, fp, r4
 8021df8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021dfc:	f886 e000 	strb.w	lr, [r6]
 8021e00:	f89a e001 	ldrb.w	lr, [sl, #1]
 8021e04:	fb0e be0c 	mla	lr, lr, ip, fp
 8021e08:	fa1f fe8e 	uxth.w	lr, lr
 8021e0c:	f10e 0b01 	add.w	fp, lr, #1
 8021e10:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021e14:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021e18:	f886 e001 	strb.w	lr, [r6, #1]
 8021e1c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8021e20:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021e24:	fb1a fa04 	smulbb	sl, sl, r4
 8021e28:	fb0e ae0c 	mla	lr, lr, ip, sl
 8021e2c:	fa1f fe8e 	uxth.w	lr, lr
 8021e30:	f10e 0a01 	add.w	sl, lr, #1
 8021e34:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8021e38:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021e3c:	f886 e002 	strb.w	lr, [r6, #2]
 8021e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021e42:	3603      	adds	r6, #3
 8021e44:	f109 39ff 	add.w	r9, r9, #4294967295
 8021e48:	4408      	add	r0, r1
 8021e4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021e4c:	440a      	add	r2, r1
 8021e4e:	e70b      	b.n	8021c68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8021e50:	b005      	add	sp, #20
 8021e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e5a:	b085      	sub	sp, #20
 8021e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021e60:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021e62:	9203      	str	r2, [sp, #12]
 8021e64:	6870      	ldr	r0, [r6, #4]
 8021e66:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8021e68:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021e6c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021e70:	9101      	str	r1, [sp, #4]
 8021e72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021e76:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8021e7a:	fb00 2404 	mla	r4, r0, r4, r2
 8021e7e:	6832      	ldr	r2, [r6, #0]
 8021e80:	686e      	ldr	r6, [r5, #4]
 8021e82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e86:	3604      	adds	r6, #4
 8021e88:	4414      	add	r4, r2
 8021e8a:	682a      	ldr	r2, [r5, #0]
 8021e8c:	9202      	str	r2, [sp, #8]
 8021e8e:	9a01      	ldr	r2, [sp, #4]
 8021e90:	2a00      	cmp	r2, #0
 8021e92:	dc03      	bgt.n	8021e9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8021e94:	9a03      	ldr	r2, [sp, #12]
 8021e96:	2a00      	cmp	r2, #0
 8021e98:	f340 80b2 	ble.w	8022000 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021ea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ea4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	dd0c      	ble.n	8021ec6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021eac:	1405      	asrs	r5, r0, #16
 8021eae:	d405      	bmi.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021eb0:	4575      	cmp	r5, lr
 8021eb2:	da03      	bge.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021eb4:	1415      	asrs	r5, r2, #16
 8021eb6:	d401      	bmi.n	8021ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021eb8:	4545      	cmp	r5, r8
 8021eba:	db05      	blt.n	8021ec8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021ebc:	4460      	add	r0, ip
 8021ebe:	443a      	add	r2, r7
 8021ec0:	3b01      	subs	r3, #1
 8021ec2:	3403      	adds	r4, #3
 8021ec4:	e7f0      	b.n	8021ea8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8021ec6:	d03d      	beq.n	8021f44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021ec8:	1e5d      	subs	r5, r3, #1
 8021eca:	fb0c 0905 	mla	r9, ip, r5, r0
 8021ece:	ea5f 4929 	movs.w	r9, r9, asr #16
 8021ed2:	d42c      	bmi.n	8021f2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021ed4:	45f1      	cmp	r9, lr
 8021ed6:	da2a      	bge.n	8021f2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021ed8:	fb07 2505 	mla	r5, r7, r5, r2
 8021edc:	142d      	asrs	r5, r5, #16
 8021ede:	d426      	bmi.n	8021f2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021ee0:	4545      	cmp	r5, r8
 8021ee2:	da24      	bge.n	8021f2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021ee4:	1ce5      	adds	r5, r4, #3
 8021ee6:	469a      	mov	sl, r3
 8021ee8:	f1ba 0f00 	cmp.w	sl, #0
 8021eec:	f105 0503 	add.w	r5, r5, #3
 8021ef0:	dd23      	ble.n	8021f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021ef2:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021ef6:	9902      	ldr	r1, [sp, #8]
 8021ef8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8021efc:	443a      	add	r2, r7
 8021efe:	fb0e 1909 	mla	r9, lr, r9, r1
 8021f02:	4460      	add	r0, ip
 8021f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f08:	f819 900b 	ldrb.w	r9, [r9, fp]
 8021f0c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021f10:	eb06 0b09 	add.w	fp, r6, r9
 8021f14:	f816 9009 	ldrb.w	r9, [r6, r9]
 8021f18:	f805 9c06 	strb.w	r9, [r5, #-6]
 8021f1c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8021f20:	f805 9c05 	strb.w	r9, [r5, #-5]
 8021f24:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8021f28:	f805 9c04 	strb.w	r9, [r5, #-4]
 8021f2c:	e7dc      	b.n	8021ee8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021f2e:	2500      	movs	r5, #0
 8021f30:	eba3 0905 	sub.w	r9, r3, r5
 8021f34:	f1b9 0f00 	cmp.w	r9, #0
 8021f38:	dc3c      	bgt.n	8021fb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8021f3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f42:	441c      	add	r4, r3
 8021f44:	9b01      	ldr	r3, [sp, #4]
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	dd5a      	ble.n	8022000 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021f4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f54:	eeb0 6a62 	vmov.f32	s12, s5
 8021f58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f64:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021f68:	eeb0 6a43 	vmov.f32	s12, s6
 8021f6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f70:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021f74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f8c:	ee12 2a90 	vmov	r2, s5
 8021f90:	eef0 2a47 	vmov.f32	s5, s14
 8021f94:	fb92 fcf3 	sdiv	ip, r2, r3
 8021f98:	ee13 2a10 	vmov	r2, s6
 8021f9c:	eeb0 3a67 	vmov.f32	s6, s15
 8021fa0:	fb92 f7f3 	sdiv	r7, r2, r3
 8021fa4:	9b01      	ldr	r3, [sp, #4]
 8021fa6:	9a03      	ldr	r2, [sp, #12]
 8021fa8:	3b01      	subs	r3, #1
 8021faa:	9301      	str	r3, [sp, #4]
 8021fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021fae:	bf08      	it	eq
 8021fb0:	4613      	moveq	r3, r2
 8021fb2:	e76c      	b.n	8021e8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8021fb4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021fb8:	d41e      	bmi.n	8021ff8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021fba:	45f2      	cmp	sl, lr
 8021fbc:	da1c      	bge.n	8021ff8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021fbe:	ea5f 4922 	movs.w	r9, r2, asr #16
 8021fc2:	d419      	bmi.n	8021ff8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021fc4:	45c1      	cmp	r9, r8
 8021fc6:	da17      	bge.n	8021ff8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021fc8:	9902      	ldr	r1, [sp, #8]
 8021fca:	fb0e 1909 	mla	r9, lr, r9, r1
 8021fce:	f819 900a 	ldrb.w	r9, [r9, sl]
 8021fd2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021fd6:	f816 b009 	ldrb.w	fp, [r6, r9]
 8021fda:	eb06 0a09 	add.w	sl, r6, r9
 8021fde:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 8021fe2:	f804 b009 	strb.w	fp, [r4, r9]
 8021fe6:	44a1      	add	r9, r4
 8021fe8:	f89a b001 	ldrb.w	fp, [sl, #1]
 8021fec:	f889 b001 	strb.w	fp, [r9, #1]
 8021ff0:	f89a a002 	ldrb.w	sl, [sl, #2]
 8021ff4:	f889 a002 	strb.w	sl, [r9, #2]
 8021ff8:	4460      	add	r0, ip
 8021ffa:	443a      	add	r2, r7
 8021ffc:	3501      	adds	r5, #1
 8021ffe:	e797      	b.n	8021f30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8022000:	b005      	add	sp, #20
 8022002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022006 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802200a:	b087      	sub	sp, #28
 802200c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022010:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8022012:	9204      	str	r2, [sp, #16]
 8022014:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022018:	6870      	ldr	r0, [r6, #4]
 802201a:	9205      	str	r2, [sp, #20]
 802201c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802201e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8022022:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8022026:	9101      	str	r1, [sp, #4]
 8022028:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 802202c:	fb00 2505 	mla	r5, r0, r5, r2
 8022030:	6832      	ldr	r2, [r6, #0]
 8022032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022036:	4415      	add	r5, r2
 8022038:	6822      	ldr	r2, [r4, #0]
 802203a:	9202      	str	r2, [sp, #8]
 802203c:	6862      	ldr	r2, [r4, #4]
 802203e:	3204      	adds	r2, #4
 8022040:	9203      	str	r2, [sp, #12]
 8022042:	9a01      	ldr	r2, [sp, #4]
 8022044:	2a00      	cmp	r2, #0
 8022046:	dc03      	bgt.n	8022050 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8022048:	9a04      	ldr	r2, [sp, #16]
 802204a:	2a00      	cmp	r2, #0
 802204c:	f340 8124 	ble.w	8022298 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022052:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022056:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022058:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802205c:	2b00      	cmp	r3, #0
 802205e:	dd0e      	ble.n	802207e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8022060:	1422      	asrs	r2, r4, #16
 8022062:	d405      	bmi.n	8022070 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022064:	4572      	cmp	r2, lr
 8022066:	da03      	bge.n	8022070 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8022068:	1402      	asrs	r2, r0, #16
 802206a:	d401      	bmi.n	8022070 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802206c:	4542      	cmp	r2, r8
 802206e:	db07      	blt.n	8022080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022072:	3b01      	subs	r3, #1
 8022074:	3503      	adds	r5, #3
 8022076:	4414      	add	r4, r2
 8022078:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802207a:	4410      	add	r0, r2
 802207c:	e7ee      	b.n	802205c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 802207e:	d010      	beq.n	80220a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8022080:	1e5a      	subs	r2, r3, #1
 8022082:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8022084:	fb06 4602 	mla	r6, r6, r2, r4
 8022088:	1436      	asrs	r6, r6, #16
 802208a:	d546      	bpl.n	802211a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802208c:	4699      	mov	r9, r3
 802208e:	462f      	mov	r7, r5
 8022090:	f1b9 0f00 	cmp.w	r9, #0
 8022094:	f300 80a5 	bgt.w	80221e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8022098:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802209c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220a0:	441d      	add	r5, r3
 80220a2:	9b01      	ldr	r3, [sp, #4]
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	f340 80f7 	ble.w	8022298 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80220aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80220b4:	eeb0 6a62 	vmov.f32	s12, s5
 80220b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80220bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80220c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80220c4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80220c8:	eeb0 6a43 	vmov.f32	s12, s6
 80220cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80220d0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80220d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80220d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80220dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80220e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220ec:	ee12 2a90 	vmov	r2, s5
 80220f0:	eef0 2a47 	vmov.f32	s5, s14
 80220f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80220f8:	ee13 2a10 	vmov	r2, s6
 80220fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80220fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022100:	eeb0 3a67 	vmov.f32	s6, s15
 8022104:	fb92 f3f3 	sdiv	r3, r2, r3
 8022108:	9314      	str	r3, [sp, #80]	; 0x50
 802210a:	9b01      	ldr	r3, [sp, #4]
 802210c:	9a04      	ldr	r2, [sp, #16]
 802210e:	3b01      	subs	r3, #1
 8022110:	9301      	str	r3, [sp, #4]
 8022112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022114:	bf08      	it	eq
 8022116:	4613      	moveq	r3, r2
 8022118:	e793      	b.n	8022042 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 802211a:	4576      	cmp	r6, lr
 802211c:	dab6      	bge.n	802208c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 802211e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022120:	fb06 0202 	mla	r2, r6, r2, r0
 8022124:	1412      	asrs	r2, r2, #16
 8022126:	d4b1      	bmi.n	802208c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8022128:	4542      	cmp	r2, r8
 802212a:	daaf      	bge.n	802208c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 802212c:	1cef      	adds	r7, r5, #3
 802212e:	4699      	mov	r9, r3
 8022130:	f1b9 0f00 	cmp.w	r9, #0
 8022134:	ddb0      	ble.n	8022098 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022136:	9902      	ldr	r1, [sp, #8]
 8022138:	1402      	asrs	r2, r0, #16
 802213a:	1426      	asrs	r6, r4, #16
 802213c:	fb0e 1202 	mla	r2, lr, r2, r1
 8022140:	9903      	ldr	r1, [sp, #12]
 8022142:	5d92      	ldrb	r2, [r2, r6]
 8022144:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8022148:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 802214c:	d041      	beq.n	80221d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 802214e:	9a05      	ldr	r2, [sp, #20]
 8022150:	fa5f fb86 	uxtb.w	fp, r6
 8022154:	fb02 fc0c 	mul.w	ip, r2, ip
 8022158:	f10c 0201 	add.w	r2, ip, #1
 802215c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8022160:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8022164:	1212      	asrs	r2, r2, #8
 8022166:	fa1f fa82 	uxth.w	sl, r2
 802216a:	43d2      	mvns	r2, r2
 802216c:	fb1b fb0a 	smulbb	fp, fp, sl
 8022170:	b2d2      	uxtb	r2, r2
 8022172:	fb0c bc02 	mla	ip, ip, r2, fp
 8022176:	fa1f fc8c 	uxth.w	ip, ip
 802217a:	f10c 0b01 	add.w	fp, ip, #1
 802217e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022182:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8022186:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802218a:	fb1b fb0a 	smulbb	fp, fp, sl
 802218e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022192:	fb16 fa0a 	smulbb	sl, r6, sl
 8022196:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 802219a:	f807 cc03 	strb.w	ip, [r7, #-3]
 802219e:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 80221a2:	fb06 aa02 	mla	sl, r6, r2, sl
 80221a6:	fb0c bc02 	mla	ip, ip, r2, fp
 80221aa:	fa1f fa8a 	uxth.w	sl, sl
 80221ae:	fa1f fc8c 	uxth.w	ip, ip
 80221b2:	f10a 0601 	add.w	r6, sl, #1
 80221b6:	f10c 0b01 	add.w	fp, ip, #1
 80221ba:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80221be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80221c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80221c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80221ca:	f807 ac01 	strb.w	sl, [r7, #-1]
 80221ce:	f807 cc02 	strb.w	ip, [r7, #-2]
 80221d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80221d4:	3703      	adds	r7, #3
 80221d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80221da:	4414      	add	r4, r2
 80221dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221de:	4410      	add	r0, r2
 80221e0:	e7a6      	b.n	8022130 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80221e2:	1426      	asrs	r6, r4, #16
 80221e4:	d450      	bmi.n	8022288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221e6:	4576      	cmp	r6, lr
 80221e8:	da4e      	bge.n	8022288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221ea:	1402      	asrs	r2, r0, #16
 80221ec:	d44c      	bmi.n	8022288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221ee:	4542      	cmp	r2, r8
 80221f0:	da4a      	bge.n	8022288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80221f2:	9902      	ldr	r1, [sp, #8]
 80221f4:	fb0e 1202 	mla	r2, lr, r2, r1
 80221f8:	9903      	ldr	r1, [sp, #12]
 80221fa:	5d92      	ldrb	r2, [r2, r6]
 80221fc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8022200:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8022204:	d040      	beq.n	8022288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022206:	9a05      	ldr	r2, [sp, #20]
 8022208:	fa5f fb86 	uxtb.w	fp, r6
 802220c:	fb02 fc0c 	mul.w	ip, r2, ip
 8022210:	f10c 0201 	add.w	r2, ip, #1
 8022214:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8022218:	f897 c000 	ldrb.w	ip, [r7]
 802221c:	1212      	asrs	r2, r2, #8
 802221e:	fa1f fa82 	uxth.w	sl, r2
 8022222:	43d2      	mvns	r2, r2
 8022224:	fb1b fb0a 	smulbb	fp, fp, sl
 8022228:	b2d2      	uxtb	r2, r2
 802222a:	fb0c bc02 	mla	ip, ip, r2, fp
 802222e:	fa1f fc8c 	uxth.w	ip, ip
 8022232:	f10c 0b01 	add.w	fp, ip, #1
 8022236:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802223a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 802223e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8022242:	fb1b fb0a 	smulbb	fp, fp, sl
 8022246:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802224a:	fb16 fa0a 	smulbb	sl, r6, sl
 802224e:	78be      	ldrb	r6, [r7, #2]
 8022250:	f887 c000 	strb.w	ip, [r7]
 8022254:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022258:	fb06 aa02 	mla	sl, r6, r2, sl
 802225c:	fb0c bc02 	mla	ip, ip, r2, fp
 8022260:	fa1f fa8a 	uxth.w	sl, sl
 8022264:	fa1f fc8c 	uxth.w	ip, ip
 8022268:	f10a 0601 	add.w	r6, sl, #1
 802226c:	f10c 0b01 	add.w	fp, ip, #1
 8022270:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022274:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022278:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802227c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022280:	f887 a002 	strb.w	sl, [r7, #2]
 8022284:	f887 c001 	strb.w	ip, [r7, #1]
 8022288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802228a:	3703      	adds	r7, #3
 802228c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022290:	4414      	add	r4, r2
 8022292:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022294:	4410      	add	r0, r2
 8022296:	e6fb      	b.n	8022090 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022298:	b007      	add	sp, #28
 802229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802229e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802229e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222a2:	b085      	sub	sp, #20
 80222a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80222a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80222aa:	9203      	str	r2, [sp, #12]
 80222ac:	6870      	ldr	r0, [r6, #4]
 80222ae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80222b0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80222b4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80222b8:	9100      	str	r1, [sp, #0]
 80222ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80222be:	fb00 2404 	mla	r4, r0, r4, r2
 80222c2:	6832      	ldr	r2, [r6, #0]
 80222c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80222c8:	4414      	add	r4, r2
 80222ca:	682a      	ldr	r2, [r5, #0]
 80222cc:	9201      	str	r2, [sp, #4]
 80222ce:	686a      	ldr	r2, [r5, #4]
 80222d0:	3204      	adds	r2, #4
 80222d2:	9202      	str	r2, [sp, #8]
 80222d4:	9a00      	ldr	r2, [sp, #0]
 80222d6:	2a00      	cmp	r2, #0
 80222d8:	dc03      	bgt.n	80222e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80222da:	9a03      	ldr	r2, [sp, #12]
 80222dc:	2a00      	cmp	r2, #0
 80222de:	f340 8131 	ble.w	8022544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80222e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80222e4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80222e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80222ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	dd0e      	ble.n	8022310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80222f2:	1405      	asrs	r5, r0, #16
 80222f4:	d405      	bmi.n	8022302 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80222f6:	4575      	cmp	r5, lr
 80222f8:	da03      	bge.n	8022302 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80222fa:	1415      	asrs	r5, r2, #16
 80222fc:	d401      	bmi.n	8022302 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80222fe:	4545      	cmp	r5, r8
 8022300:	db07      	blt.n	8022312 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8022302:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022304:	3b01      	subs	r3, #1
 8022306:	3403      	adds	r4, #3
 8022308:	4428      	add	r0, r5
 802230a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802230c:	442a      	add	r2, r5
 802230e:	e7ee      	b.n	80222ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8022310:	d06f      	beq.n	80223f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8022312:	1e5d      	subs	r5, r3, #1
 8022314:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022316:	fb06 0605 	mla	r6, r6, r5, r0
 802231a:	1436      	asrs	r6, r6, #16
 802231c:	d460      	bmi.n	80223e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802231e:	4576      	cmp	r6, lr
 8022320:	da5e      	bge.n	80223e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022322:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022324:	fb06 2505 	mla	r5, r6, r5, r2
 8022328:	142d      	asrs	r5, r5, #16
 802232a:	d459      	bmi.n	80223e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802232c:	4545      	cmp	r5, r8
 802232e:	da57      	bge.n	80223e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022330:	1ce5      	adds	r5, r4, #3
 8022332:	469a      	mov	sl, r3
 8022334:	f1ba 0f00 	cmp.w	sl, #0
 8022338:	dd56      	ble.n	80223e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 802233a:	9901      	ldr	r1, [sp, #4]
 802233c:	1416      	asrs	r6, r2, #16
 802233e:	1407      	asrs	r7, r0, #16
 8022340:	fb0e 1606 	mla	r6, lr, r6, r1
 8022344:	9902      	ldr	r1, [sp, #8]
 8022346:	5df6      	ldrb	r6, [r6, r7]
 8022348:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 802234c:	0e37      	lsrs	r7, r6, #24
 802234e:	2fff      	cmp	r7, #255	; 0xff
 8022350:	f000 80ef 	beq.w	8022532 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8022354:	fa5f fc87 	uxtb.w	ip, r7
 8022358:	b3d7      	cbz	r7, 80223d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 802235a:	fa1f f78c 	uxth.w	r7, ip
 802235e:	ea6f 0c0c 	mvn.w	ip, ip
 8022362:	fa5f fb86 	uxtb.w	fp, r6
 8022366:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 802236a:	fa5f fc8c 	uxtb.w	ip, ip
 802236e:	fb1b fb07 	smulbb	fp, fp, r7
 8022372:	fb09 b90c 	mla	r9, r9, ip, fp
 8022376:	fa1f f989 	uxth.w	r9, r9
 802237a:	f109 0b01 	add.w	fp, r9, #1
 802237e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022382:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8022386:	fb1b fb0c 	smulbb	fp, fp, ip
 802238a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802238e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8022392:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8022396:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802239a:	fb09 b907 	mla	r9, r9, r7, fp
 802239e:	fa1f f989 	uxth.w	r9, r9
 80223a2:	f109 0b01 	add.w	fp, r9, #1
 80223a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80223aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80223ae:	f805 9c02 	strb.w	r9, [r5, #-2]
 80223b2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80223b6:	fb19 fc0c 	smulbb	ip, r9, ip
 80223ba:	fb06 c607 	mla	r6, r6, r7, ip
 80223be:	b2b6      	uxth	r6, r6
 80223c0:	f106 0c01 	add.w	ip, r6, #1
 80223c4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80223c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80223cc:	f805 cc01 	strb.w	ip, [r5, #-1]
 80223d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80223d2:	3503      	adds	r5, #3
 80223d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80223d8:	4408      	add	r0, r1
 80223da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80223dc:	440a      	add	r2, r1
 80223de:	e7a9      	b.n	8022334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80223e0:	2600      	movs	r6, #0
 80223e2:	1b9d      	subs	r5, r3, r6
 80223e4:	2d00      	cmp	r5, #0
 80223e6:	dc40      	bgt.n	802246a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80223e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80223ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80223f0:	441c      	add	r4, r3
 80223f2:	9b00      	ldr	r3, [sp, #0]
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	f340 80a5 	ble.w	8022544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80223fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022400:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022404:	eeb0 6a62 	vmov.f32	s12, s5
 8022408:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802240c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022410:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022414:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022418:	eeb0 6a43 	vmov.f32	s12, s6
 802241c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022420:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022424:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022428:	ee61 7a27 	vmul.f32	s15, s2, s15
 802242c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022430:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022434:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022438:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802243c:	ee12 2a90 	vmov	r2, s5
 8022440:	eef0 2a47 	vmov.f32	s5, s14
 8022444:	fb92 f3f3 	sdiv	r3, r2, r3
 8022448:	ee13 2a10 	vmov	r2, s6
 802244c:	9311      	str	r3, [sp, #68]	; 0x44
 802244e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022450:	eeb0 3a67 	vmov.f32	s6, s15
 8022454:	fb92 f3f3 	sdiv	r3, r2, r3
 8022458:	9312      	str	r3, [sp, #72]	; 0x48
 802245a:	9b00      	ldr	r3, [sp, #0]
 802245c:	9a03      	ldr	r2, [sp, #12]
 802245e:	3b01      	subs	r3, #1
 8022460:	9300      	str	r3, [sp, #0]
 8022462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022464:	bf08      	it	eq
 8022466:	4613      	moveq	r3, r2
 8022468:	e734      	b.n	80222d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 802246a:	1407      	asrs	r7, r0, #16
 802246c:	d450      	bmi.n	8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802246e:	4577      	cmp	r7, lr
 8022470:	da4e      	bge.n	8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022472:	1415      	asrs	r5, r2, #16
 8022474:	d44c      	bmi.n	8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022476:	4545      	cmp	r5, r8
 8022478:	da4a      	bge.n	8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802247a:	9901      	ldr	r1, [sp, #4]
 802247c:	fb0e 1505 	mla	r5, lr, r5, r1
 8022480:	9902      	ldr	r1, [sp, #8]
 8022482:	5ded      	ldrb	r5, [r5, r7]
 8022484:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8022488:	0e2f      	lsrs	r7, r5, #24
 802248a:	2fff      	cmp	r7, #255	; 0xff
 802248c:	d046      	beq.n	802251c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 802248e:	fa5f f987 	uxtb.w	r9, r7
 8022492:	b3ef      	cbz	r7, 8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022494:	fa1f fc89 	uxth.w	ip, r9
 8022498:	ea6f 0909 	mvn.w	r9, r9
 802249c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80224a0:	fa5f fb85 	uxtb.w	fp, r5
 80224a4:	f814 a007 	ldrb.w	sl, [r4, r7]
 80224a8:	fa5f f989 	uxtb.w	r9, r9
 80224ac:	fb1b fb0c 	smulbb	fp, fp, ip
 80224b0:	fb0a ba09 	mla	sl, sl, r9, fp
 80224b4:	fa1f fa8a 	uxth.w	sl, sl
 80224b8:	f10a 0b01 	add.w	fp, sl, #1
 80224bc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80224c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80224c4:	f804 a007 	strb.w	sl, [r4, r7]
 80224c8:	4427      	add	r7, r4
 80224ca:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80224ce:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80224d2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80224d6:	fb1b fb09 	smulbb	fp, fp, r9
 80224da:	fb0a ba0c 	mla	sl, sl, ip, fp
 80224de:	fa1f fa8a 	uxth.w	sl, sl
 80224e2:	f10a 0b01 	add.w	fp, sl, #1
 80224e6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80224ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80224ee:	f887 a001 	strb.w	sl, [r7, #1]
 80224f2:	f897 a002 	ldrb.w	sl, [r7, #2]
 80224f6:	fb1a f909 	smulbb	r9, sl, r9
 80224fa:	fb05 950c 	mla	r5, r5, ip, r9
 80224fe:	b2ad      	uxth	r5, r5
 8022500:	f105 0901 	add.w	r9, r5, #1
 8022504:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8022508:	ea4f 2929 	mov.w	r9, r9, asr #8
 802250c:	f887 9002 	strb.w	r9, [r7, #2]
 8022510:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022512:	3601      	adds	r6, #1
 8022514:	4408      	add	r0, r1
 8022516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022518:	440a      	add	r2, r1
 802251a:	e762      	b.n	80223e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 802251c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8022520:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8022524:	55e5      	strb	r5, [r4, r7]
 8022526:	4427      	add	r7, r4
 8022528:	0c2d      	lsrs	r5, r5, #16
 802252a:	f887 c001 	strb.w	ip, [r7, #1]
 802252e:	70bd      	strb	r5, [r7, #2]
 8022530:	e7ee      	b.n	8022510 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022532:	0a37      	lsrs	r7, r6, #8
 8022534:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022538:	0c36      	lsrs	r6, r6, #16
 802253a:	f805 7c02 	strb.w	r7, [r5, #-2]
 802253e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022542:	e745      	b.n	80223d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8022544:	b005      	add	sp, #20
 8022546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802254a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802254a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802254e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022550:	9201      	str	r2, [sp, #4]
 8022552:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8022556:	6870      	ldr	r0, [r6, #4]
 8022558:	9200      	str	r2, [sp, #0]
 802255a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 802255e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8022562:	fa1f fc85 	uxth.w	ip, r5
 8022566:	43ed      	mvns	r5, r5
 8022568:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802256c:	b2ed      	uxtb	r5, r5
 802256e:	fb00 2404 	mla	r4, r0, r4, r2
 8022572:	6832      	ldr	r2, [r6, #0]
 8022574:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022578:	4414      	add	r4, r2
 802257a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802257c:	f8d2 8000 	ldr.w	r8, [r2]
 8022580:	2900      	cmp	r1, #0
 8022582:	dc03      	bgt.n	802258c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8022584:	9a01      	ldr	r2, [sp, #4]
 8022586:	2a00      	cmp	r2, #0
 8022588:	f340 8104 	ble.w	8022794 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 802258c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802258e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022594:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022598:	2b00      	cmp	r3, #0
 802259a:	dd0f      	ble.n	80225bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802259c:	1406      	asrs	r6, r0, #16
 802259e:	d406      	bmi.n	80225ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80225a0:	4576      	cmp	r6, lr
 80225a2:	da04      	bge.n	80225ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80225a4:	1416      	asrs	r6, r2, #16
 80225a6:	d402      	bmi.n	80225ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80225a8:	9f00      	ldr	r7, [sp, #0]
 80225aa:	42be      	cmp	r6, r7
 80225ac:	db07      	blt.n	80225be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80225ae:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80225b0:	3b01      	subs	r3, #1
 80225b2:	3403      	adds	r4, #3
 80225b4:	4430      	add	r0, r6
 80225b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80225b8:	4432      	add	r2, r6
 80225ba:	e7ed      	b.n	8022598 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 80225bc:	d05f      	beq.n	802267e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 80225be:	1e5e      	subs	r6, r3, #1
 80225c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80225c2:	fb07 0706 	mla	r7, r7, r6, r0
 80225c6:	143f      	asrs	r7, r7, #16
 80225c8:	d450      	bmi.n	802266c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80225ca:	4577      	cmp	r7, lr
 80225cc:	da4e      	bge.n	802266c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80225ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80225d0:	fb07 2606 	mla	r6, r7, r6, r2
 80225d4:	1436      	asrs	r6, r6, #16
 80225d6:	d449      	bmi.n	802266c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80225d8:	9f00      	ldr	r7, [sp, #0]
 80225da:	42be      	cmp	r6, r7
 80225dc:	da46      	bge.n	802266c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 80225de:	1ce6      	adds	r6, r4, #3
 80225e0:	4699      	mov	r9, r3
 80225e2:	f1b9 0f00 	cmp.w	r9, #0
 80225e6:	f106 0603 	add.w	r6, r6, #3
 80225ea:	dd43      	ble.n	8022674 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80225ec:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80225f0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80225f4:	1417      	asrs	r7, r2, #16
 80225f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80225fa:	fb1b fb05 	smulbb	fp, fp, r5
 80225fe:	fb0e a707 	mla	r7, lr, r7, sl
 8022602:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022606:	eb08 0a07 	add.w	sl, r8, r7
 802260a:	f818 7007 	ldrb.w	r7, [r8, r7]
 802260e:	fb07 b70c 	mla	r7, r7, ip, fp
 8022612:	b2bf      	uxth	r7, r7
 8022614:	f107 0b01 	add.w	fp, r7, #1
 8022618:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802261c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8022620:	fb1b fb05 	smulbb	fp, fp, r5
 8022624:	123f      	asrs	r7, r7, #8
 8022626:	f806 7c06 	strb.w	r7, [r6, #-6]
 802262a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 802262e:	fb07 b70c 	mla	r7, r7, ip, fp
 8022632:	b2bf      	uxth	r7, r7
 8022634:	f107 0b01 	add.w	fp, r7, #1
 8022638:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 802263c:	123f      	asrs	r7, r7, #8
 802263e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8022642:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8022646:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 802264a:	fb1a fa05 	smulbb	sl, sl, r5
 802264e:	fb07 a70c 	mla	r7, r7, ip, sl
 8022652:	b2bf      	uxth	r7, r7
 8022654:	f107 0a01 	add.w	sl, r7, #1
 8022658:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 802265c:	123f      	asrs	r7, r7, #8
 802265e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8022662:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022664:	4438      	add	r0, r7
 8022666:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022668:	443a      	add	r2, r7
 802266a:	e7ba      	b.n	80225e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802266c:	2700      	movs	r7, #0
 802266e:	1bde      	subs	r6, r3, r7
 8022670:	2e00      	cmp	r6, #0
 8022672:	dc3f      	bgt.n	80226f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8022674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802267c:	441c      	add	r4, r3
 802267e:	2900      	cmp	r1, #0
 8022680:	f340 8088 	ble.w	8022794 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8022684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802268a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802268e:	3901      	subs	r1, #1
 8022690:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022694:	eef0 6a62 	vmov.f32	s13, s5
 8022698:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802269c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80226a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226a4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80226a8:	eef0 6a43 	vmov.f32	s13, s6
 80226ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226b0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80226b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80226b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226cc:	ee12 2a90 	vmov	r2, s5
 80226d0:	eef0 2a47 	vmov.f32	s5, s14
 80226d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80226d8:	ee13 2a10 	vmov	r2, s6
 80226dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80226de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226e0:	eeb0 3a67 	vmov.f32	s6, s15
 80226e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80226e8:	9a01      	ldr	r2, [sp, #4]
 80226ea:	9310      	str	r3, [sp, #64]	; 0x40
 80226ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226ee:	bf08      	it	eq
 80226f0:	4613      	moveq	r3, r2
 80226f2:	e745      	b.n	8022580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80226f4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80226f8:	d446      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80226fa:	45f2      	cmp	sl, lr
 80226fc:	da44      	bge.n	8022788 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80226fe:	ea5f 4922 	movs.w	r9, r2, asr #16
 8022702:	d441      	bmi.n	8022788 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8022704:	9e00      	ldr	r6, [sp, #0]
 8022706:	45b1      	cmp	r9, r6
 8022708:	da3e      	bge.n	8022788 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802270a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802270e:	fb0e a909 	mla	r9, lr, r9, sl
 8022712:	f814 b006 	ldrb.w	fp, [r4, r6]
 8022716:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802271a:	fb1b fb05 	smulbb	fp, fp, r5
 802271e:	eb08 0a09 	add.w	sl, r8, r9
 8022722:	f818 9009 	ldrb.w	r9, [r8, r9]
 8022726:	fb09 b90c 	mla	r9, r9, ip, fp
 802272a:	fa1f f989 	uxth.w	r9, r9
 802272e:	f109 0b01 	add.w	fp, r9, #1
 8022732:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022736:	ea4f 2929 	mov.w	r9, r9, asr #8
 802273a:	f804 9006 	strb.w	r9, [r4, r6]
 802273e:	4426      	add	r6, r4
 8022740:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8022744:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022748:	fb1b fb05 	smulbb	fp, fp, r5
 802274c:	fb09 b90c 	mla	r9, r9, ip, fp
 8022750:	fa1f f989 	uxth.w	r9, r9
 8022754:	f109 0b01 	add.w	fp, r9, #1
 8022758:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802275c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022760:	f886 9001 	strb.w	r9, [r6, #1]
 8022764:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022768:	f896 a002 	ldrb.w	sl, [r6, #2]
 802276c:	fb1a fa05 	smulbb	sl, sl, r5
 8022770:	fb09 a90c 	mla	r9, r9, ip, sl
 8022774:	fa1f f989 	uxth.w	r9, r9
 8022778:	f109 0a01 	add.w	sl, r9, #1
 802277c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8022780:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022784:	f886 9002 	strb.w	r9, [r6, #2]
 8022788:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802278a:	3701      	adds	r7, #1
 802278c:	4430      	add	r0, r6
 802278e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022790:	4432      	add	r2, r6
 8022792:	e76c      	b.n	802266e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8022794:	b003      	add	sp, #12
 8022796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802279a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802279a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802279e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80227a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80227a4:	9201      	str	r2, [sp, #4]
 80227a6:	6868      	ldr	r0, [r5, #4]
 80227a8:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 80227ac:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80227b0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80227b4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80227b8:	fb00 2404 	mla	r4, r0, r4, r2
 80227bc:	682a      	ldr	r2, [r5, #0]
 80227be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227c2:	4414      	add	r4, r2
 80227c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80227c6:	f8d2 9000 	ldr.w	r9, [r2]
 80227ca:	2900      	cmp	r1, #0
 80227cc:	dc03      	bgt.n	80227d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80227ce:	9a01      	ldr	r2, [sp, #4]
 80227d0:	2a00      	cmp	r2, #0
 80227d2:	f340 80a8 	ble.w	8022926 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80227d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80227d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80227dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80227de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	dd0c      	ble.n	8022800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80227e6:	1405      	asrs	r5, r0, #16
 80227e8:	d405      	bmi.n	80227f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80227ea:	4565      	cmp	r5, ip
 80227ec:	da03      	bge.n	80227f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80227ee:	1415      	asrs	r5, r2, #16
 80227f0:	d401      	bmi.n	80227f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80227f2:	4575      	cmp	r5, lr
 80227f4:	db05      	blt.n	8022802 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80227f6:	4438      	add	r0, r7
 80227f8:	4432      	add	r2, r6
 80227fa:	3b01      	subs	r3, #1
 80227fc:	3403      	adds	r4, #3
 80227fe:	e7f0      	b.n	80227e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022800:	d03a      	beq.n	8022878 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022802:	1e5d      	subs	r5, r3, #1
 8022804:	fb07 0805 	mla	r8, r7, r5, r0
 8022808:	ea5f 4828 	movs.w	r8, r8, asr #16
 802280c:	d429      	bmi.n	8022862 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802280e:	45e0      	cmp	r8, ip
 8022810:	da27      	bge.n	8022862 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022812:	fb06 2505 	mla	r5, r6, r5, r2
 8022816:	142d      	asrs	r5, r5, #16
 8022818:	d423      	bmi.n	8022862 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802281a:	4575      	cmp	r5, lr
 802281c:	da21      	bge.n	8022862 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 802281e:	f104 0803 	add.w	r8, r4, #3
 8022822:	469a      	mov	sl, r3
 8022824:	f1ba 0f00 	cmp.w	sl, #0
 8022828:	f108 0803 	add.w	r8, r8, #3
 802282c:	dd1f      	ble.n	802286e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802282e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8022832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022836:	1415      	asrs	r5, r2, #16
 8022838:	4438      	add	r0, r7
 802283a:	4432      	add	r2, r6
 802283c:	fb0c b505 	mla	r5, ip, r5, fp
 8022840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022844:	eb09 0b05 	add.w	fp, r9, r5
 8022848:	f819 5005 	ldrb.w	r5, [r9, r5]
 802284c:	f808 5c06 	strb.w	r5, [r8, #-6]
 8022850:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8022854:	f808 5c05 	strb.w	r5, [r8, #-5]
 8022858:	f89b 5002 	ldrb.w	r5, [fp, #2]
 802285c:	f808 5c04 	strb.w	r5, [r8, #-4]
 8022860:	e7e0      	b.n	8022824 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022862:	2500      	movs	r5, #0
 8022864:	eba3 0805 	sub.w	r8, r3, r5
 8022868:	f1b8 0f00 	cmp.w	r8, #0
 802286c:	dc38      	bgt.n	80228e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 802286e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022876:	441c      	add	r4, r3
 8022878:	2900      	cmp	r1, #0
 802287a:	dd54      	ble.n	8022926 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 802287c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022882:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022886:	3901      	subs	r1, #1
 8022888:	eeb0 6a62 	vmov.f32	s12, s5
 802288c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022890:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022894:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022898:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 802289c:	eeb0 6a43 	vmov.f32	s12, s6
 80228a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80228a4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80228a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80228b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80228b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80228bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228c0:	ee12 2a90 	vmov	r2, s5
 80228c4:	eef0 2a47 	vmov.f32	s5, s14
 80228c8:	fb92 f7f3 	sdiv	r7, r2, r3
 80228cc:	ee13 2a10 	vmov	r2, s6
 80228d0:	eeb0 3a67 	vmov.f32	s6, s15
 80228d4:	fb92 f6f3 	sdiv	r6, r2, r3
 80228d8:	9a01      	ldr	r2, [sp, #4]
 80228da:	bf08      	it	eq
 80228dc:	4613      	moveq	r3, r2
 80228de:	e774      	b.n	80227ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80228e0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80228e4:	d41b      	bmi.n	802291e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80228e6:	45e2      	cmp	sl, ip
 80228e8:	da19      	bge.n	802291e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80228ea:	ea5f 4822 	movs.w	r8, r2, asr #16
 80228ee:	d416      	bmi.n	802291e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80228f0:	45f0      	cmp	r8, lr
 80228f2:	da14      	bge.n	802291e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80228f4:	fb0c a808 	mla	r8, ip, r8, sl
 80228f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80228fc:	f819 b008 	ldrb.w	fp, [r9, r8]
 8022900:	eb09 0a08 	add.w	sl, r9, r8
 8022904:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8022908:	f804 b008 	strb.w	fp, [r4, r8]
 802290c:	44a0      	add	r8, r4
 802290e:	f89a b001 	ldrb.w	fp, [sl, #1]
 8022912:	f888 b001 	strb.w	fp, [r8, #1]
 8022916:	f89a a002 	ldrb.w	sl, [sl, #2]
 802291a:	f888 a002 	strb.w	sl, [r8, #2]
 802291e:	4438      	add	r0, r7
 8022920:	4432      	add	r2, r6
 8022922:	3501      	adds	r5, #1
 8022924:	e79e      	b.n	8022864 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022926:	b003      	add	sp, #12
 8022928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802292c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022930:	b085      	sub	sp, #20
 8022932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022936:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022938:	9202      	str	r2, [sp, #8]
 802293a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802293e:	6860      	ldr	r0, [r4, #4]
 8022940:	9203      	str	r2, [sp, #12]
 8022942:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8022946:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 802294a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 802294e:	fb00 2505 	mla	r5, r0, r5, r2
 8022952:	6822      	ldr	r2, [r4, #0]
 8022954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022958:	4415      	add	r5, r2
 802295a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802295c:	6812      	ldr	r2, [r2, #0]
 802295e:	9201      	str	r2, [sp, #4]
 8022960:	2900      	cmp	r1, #0
 8022962:	dc03      	bgt.n	802296c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8022964:	9a02      	ldr	r2, [sp, #8]
 8022966:	2a00      	cmp	r2, #0
 8022968:	f340 811c 	ble.w	8022ba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802296c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802296e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022974:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022978:	2b00      	cmp	r3, #0
 802297a:	dd0e      	ble.n	802299a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802297c:	1422      	asrs	r2, r4, #16
 802297e:	d405      	bmi.n	802298c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022980:	4572      	cmp	r2, lr
 8022982:	da03      	bge.n	802298c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022984:	1402      	asrs	r2, r0, #16
 8022986:	d401      	bmi.n	802298c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022988:	4542      	cmp	r2, r8
 802298a:	db07      	blt.n	802299c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802298c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802298e:	3b01      	subs	r3, #1
 8022990:	3503      	adds	r5, #3
 8022992:	4414      	add	r4, r2
 8022994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022996:	4410      	add	r0, r2
 8022998:	e7ee      	b.n	8022978 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 802299a:	d072      	beq.n	8022a82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 802299c:	1e5a      	subs	r2, r3, #1
 802299e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80229a0:	fb06 4602 	mla	r6, r6, r2, r4
 80229a4:	1436      	asrs	r6, r6, #16
 80229a6:	d461      	bmi.n	8022a6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80229a8:	4576      	cmp	r6, lr
 80229aa:	da5f      	bge.n	8022a6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80229ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80229ae:	fb06 0202 	mla	r2, r6, r2, r0
 80229b2:	1412      	asrs	r2, r2, #16
 80229b4:	d45a      	bmi.n	8022a6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80229b6:	4542      	cmp	r2, r8
 80229b8:	da58      	bge.n	8022a6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80229ba:	1cef      	adds	r7, r5, #3
 80229bc:	4699      	mov	r9, r3
 80229be:	f1b9 0f00 	cmp.w	r9, #0
 80229c2:	dd59      	ble.n	8022a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80229c4:	1426      	asrs	r6, r4, #16
 80229c6:	1402      	asrs	r2, r0, #16
 80229c8:	fb0e 6202 	mla	r2, lr, r2, r6
 80229cc:	9e01      	ldr	r6, [sp, #4]
 80229ce:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80229d2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80229d6:	d041      	beq.n	8022a5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80229d8:	9a03      	ldr	r2, [sp, #12]
 80229da:	fa5f fb86 	uxtb.w	fp, r6
 80229de:	fb02 fc0c 	mul.w	ip, r2, ip
 80229e2:	f10c 0201 	add.w	r2, ip, #1
 80229e6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80229ea:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 80229ee:	1212      	asrs	r2, r2, #8
 80229f0:	fa1f fa82 	uxth.w	sl, r2
 80229f4:	43d2      	mvns	r2, r2
 80229f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80229fa:	b2d2      	uxtb	r2, r2
 80229fc:	fb0c bc02 	mla	ip, ip, r2, fp
 8022a00:	fa1f fc8c 	uxth.w	ip, ip
 8022a04:	f10c 0b01 	add.w	fp, ip, #1
 8022a08:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022a0c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8022a10:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8022a14:	fb1b fb0a 	smulbb	fp, fp, sl
 8022a18:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022a1c:	fb16 fa0a 	smulbb	sl, r6, sl
 8022a20:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8022a24:	f807 cc03 	strb.w	ip, [r7, #-3]
 8022a28:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8022a2c:	fb06 aa02 	mla	sl, r6, r2, sl
 8022a30:	fb0c bc02 	mla	ip, ip, r2, fp
 8022a34:	fa1f fa8a 	uxth.w	sl, sl
 8022a38:	fa1f fc8c 	uxth.w	ip, ip
 8022a3c:	f10a 0601 	add.w	r6, sl, #1
 8022a40:	f10c 0b01 	add.w	fp, ip, #1
 8022a44:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022a48:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022a4c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022a50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022a54:	f807 ac01 	strb.w	sl, [r7, #-1]
 8022a58:	f807 cc02 	strb.w	ip, [r7, #-2]
 8022a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a5e:	3703      	adds	r7, #3
 8022a60:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a64:	4414      	add	r4, r2
 8022a66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a68:	4410      	add	r0, r2
 8022a6a:	e7a8      	b.n	80229be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022a6c:	f04f 0c00 	mov.w	ip, #0
 8022a70:	eba3 020c 	sub.w	r2, r3, ip
 8022a74:	2a00      	cmp	r2, #0
 8022a76:	dc3d      	bgt.n	8022af4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8022a78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a80:	441d      	add	r5, r3
 8022a82:	2900      	cmp	r1, #0
 8022a84:	f340 808e 	ble.w	8022ba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022a88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a92:	3901      	subs	r1, #1
 8022a94:	eeb0 6a62 	vmov.f32	s12, s5
 8022a98:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022aa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022aa4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022aa8:	eeb0 6a43 	vmov.f32	s12, s6
 8022aac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ab0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022ab4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ab8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022abc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ac0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ac4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ac8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022acc:	ee12 2a90 	vmov	r2, s5
 8022ad0:	eef0 2a47 	vmov.f32	s5, s14
 8022ad4:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ad8:	ee13 2a10 	vmov	r2, s6
 8022adc:	9311      	str	r3, [sp, #68]	; 0x44
 8022ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ae0:	eeb0 3a67 	vmov.f32	s6, s15
 8022ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ae8:	9a02      	ldr	r2, [sp, #8]
 8022aea:	9312      	str	r3, [sp, #72]	; 0x48
 8022aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022aee:	bf08      	it	eq
 8022af0:	4613      	moveq	r3, r2
 8022af2:	e735      	b.n	8022960 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8022af4:	1426      	asrs	r6, r4, #16
 8022af6:	d44e      	bmi.n	8022b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022af8:	4576      	cmp	r6, lr
 8022afa:	da4c      	bge.n	8022b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022afc:	1402      	asrs	r2, r0, #16
 8022afe:	d44a      	bmi.n	8022b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022b00:	4542      	cmp	r2, r8
 8022b02:	da48      	bge.n	8022b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022b04:	fb0e 6202 	mla	r2, lr, r2, r6
 8022b08:	9e01      	ldr	r6, [sp, #4]
 8022b0a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8022b0e:	0e3a      	lsrs	r2, r7, #24
 8022b10:	d041      	beq.n	8022b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8022b12:	9e03      	ldr	r6, [sp, #12]
 8022b14:	fa5f fb87 	uxtb.w	fp, r7
 8022b18:	4372      	muls	r2, r6
 8022b1a:	1c56      	adds	r6, r2, #1
 8022b1c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022b20:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8022b24:	1212      	asrs	r2, r2, #8
 8022b26:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022b2a:	fa1f fa82 	uxth.w	sl, r2
 8022b2e:	43d2      	mvns	r2, r2
 8022b30:	fb1b fb0a 	smulbb	fp, fp, sl
 8022b34:	b2d2      	uxtb	r2, r2
 8022b36:	fb09 b902 	mla	r9, r9, r2, fp
 8022b3a:	fa1f f989 	uxth.w	r9, r9
 8022b3e:	f109 0b01 	add.w	fp, r9, #1
 8022b42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b46:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022b4a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022b4e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022b52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b56:	fb17 fa0a 	smulbb	sl, r7, sl
 8022b5a:	f805 9006 	strb.w	r9, [r5, r6]
 8022b5e:	442e      	add	r6, r5
 8022b60:	78b7      	ldrb	r7, [r6, #2]
 8022b62:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022b66:	fb07 aa02 	mla	sl, r7, r2, sl
 8022b6a:	fb09 b902 	mla	r9, r9, r2, fp
 8022b6e:	fa1f fa8a 	uxth.w	sl, sl
 8022b72:	fa1f f989 	uxth.w	r9, r9
 8022b76:	f10a 0701 	add.w	r7, sl, #1
 8022b7a:	f109 0b01 	add.w	fp, r9, #1
 8022b7e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022b8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b8e:	f886 a002 	strb.w	sl, [r6, #2]
 8022b92:	f886 9001 	strb.w	r9, [r6, #1]
 8022b96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b98:	f10c 0c01 	add.w	ip, ip, #1
 8022b9c:	4414      	add	r4, r2
 8022b9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022ba0:	4410      	add	r0, r2
 8022ba2:	e765      	b.n	8022a70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8022ba4:	b005      	add	sp, #20
 8022ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022baa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bae:	b085      	sub	sp, #20
 8022bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022bb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022bb6:	9203      	str	r2, [sp, #12]
 8022bb8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022bbc:	6860      	ldr	r0, [r4, #4]
 8022bbe:	9201      	str	r2, [sp, #4]
 8022bc0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8022bc4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8022bc8:	fb00 2505 	mla	r5, r0, r5, r2
 8022bcc:	6822      	ldr	r2, [r4, #0]
 8022bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022bd2:	4415      	add	r5, r2
 8022bd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022bd6:	6812      	ldr	r2, [r2, #0]
 8022bd8:	9202      	str	r2, [sp, #8]
 8022bda:	2900      	cmp	r1, #0
 8022bdc:	dc03      	bgt.n	8022be6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8022bde:	9a03      	ldr	r2, [sp, #12]
 8022be0:	2a00      	cmp	r2, #0
 8022be2:	f340 8122 	ble.w	8022e2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8022be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022be8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022bee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	dd0f      	ble.n	8022c16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022bf6:	1422      	asrs	r2, r4, #16
 8022bf8:	d406      	bmi.n	8022c08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8022bfa:	4572      	cmp	r2, lr
 8022bfc:	da04      	bge.n	8022c08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8022bfe:	1402      	asrs	r2, r0, #16
 8022c00:	d402      	bmi.n	8022c08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8022c02:	9e01      	ldr	r6, [sp, #4]
 8022c04:	42b2      	cmp	r2, r6
 8022c06:	db07      	blt.n	8022c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c0a:	3b01      	subs	r3, #1
 8022c0c:	3503      	adds	r5, #3
 8022c0e:	4414      	add	r4, r2
 8022c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c12:	4410      	add	r0, r2
 8022c14:	e7ed      	b.n	8022bf2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8022c16:	d06e      	beq.n	8022cf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8022c18:	1e5a      	subs	r2, r3, #1
 8022c1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022c1c:	fb06 4602 	mla	r6, r6, r2, r4
 8022c20:	1436      	asrs	r6, r6, #16
 8022c22:	d45d      	bmi.n	8022ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022c24:	4576      	cmp	r6, lr
 8022c26:	da5b      	bge.n	8022ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022c28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022c2a:	fb06 0202 	mla	r2, r6, r2, r0
 8022c2e:	1412      	asrs	r2, r2, #16
 8022c30:	d456      	bmi.n	8022ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022c32:	9e01      	ldr	r6, [sp, #4]
 8022c34:	42b2      	cmp	r2, r6
 8022c36:	da53      	bge.n	8022ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8022c38:	1cee      	adds	r6, r5, #3
 8022c3a:	469a      	mov	sl, r3
 8022c3c:	f1ba 0f00 	cmp.w	sl, #0
 8022c40:	dd54      	ble.n	8022cec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022c42:	1427      	asrs	r7, r4, #16
 8022c44:	1402      	asrs	r2, r0, #16
 8022c46:	fb0e 7202 	mla	r2, lr, r2, r7
 8022c4a:	9f02      	ldr	r7, [sp, #8]
 8022c4c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8022c50:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8022c54:	d03c      	beq.n	8022cd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8022c56:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022c5a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022c5e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022c62:	fa5f f28c 	uxtb.w	r2, ip
 8022c66:	b2ff      	uxtb	r7, r7
 8022c68:	f000 80d8 	beq.w	8022e1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022c6c:	fa1f f882 	uxth.w	r8, r2
 8022c70:	43d2      	mvns	r2, r2
 8022c72:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8022c76:	fb17 f708 	smulbb	r7, r7, r8
 8022c7a:	b2d2      	uxtb	r2, r2
 8022c7c:	fb19 f908 	smulbb	r9, r9, r8
 8022c80:	fb0c 7702 	mla	r7, ip, r2, r7
 8022c84:	fb1b f808 	smulbb	r8, fp, r8
 8022c88:	b2bf      	uxth	r7, r7
 8022c8a:	f107 0c01 	add.w	ip, r7, #1
 8022c8e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022c92:	123f      	asrs	r7, r7, #8
 8022c94:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022c98:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8022c9c:	fb07 9902 	mla	r9, r7, r2, r9
 8022ca0:	fa1f f989 	uxth.w	r9, r9
 8022ca4:	f109 0701 	add.w	r7, r9, #1
 8022ca8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022cac:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022cb0:	fb07 8802 	mla	r8, r7, r2, r8
 8022cb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022cb8:	fa1f f888 	uxth.w	r8, r8
 8022cbc:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022cc0:	f108 0201 	add.w	r2, r8, #1
 8022cc4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022cc8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022ccc:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022cd2:	3603      	adds	r6, #3
 8022cd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cd8:	4414      	add	r4, r2
 8022cda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022cdc:	4410      	add	r0, r2
 8022cde:	e7ad      	b.n	8022c3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8022ce0:	f04f 0c00 	mov.w	ip, #0
 8022ce4:	eba3 020c 	sub.w	r2, r3, ip
 8022ce8:	2a00      	cmp	r2, #0
 8022cea:	dc3d      	bgt.n	8022d68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022cec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022cf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cf4:	441d      	add	r5, r3
 8022cf6:	2900      	cmp	r1, #0
 8022cf8:	f340 8097 	ble.w	8022e2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8022cfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d06:	3901      	subs	r1, #1
 8022d08:	eeb0 6a62 	vmov.f32	s12, s5
 8022d0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022d10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d18:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022d1c:	eeb0 6a43 	vmov.f32	s12, s6
 8022d20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d24:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022d28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d40:	ee12 2a90 	vmov	r2, s5
 8022d44:	eef0 2a47 	vmov.f32	s5, s14
 8022d48:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d4c:	ee13 2a10 	vmov	r2, s6
 8022d50:	9311      	str	r3, [sp, #68]	; 0x44
 8022d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d54:	eeb0 3a67 	vmov.f32	s6, s15
 8022d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d5c:	9a03      	ldr	r2, [sp, #12]
 8022d5e:	9312      	str	r3, [sp, #72]	; 0x48
 8022d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d62:	bf08      	it	eq
 8022d64:	4613      	moveq	r3, r2
 8022d66:	e738      	b.n	8022bda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8022d68:	1426      	asrs	r6, r4, #16
 8022d6a:	d448      	bmi.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022d6c:	4576      	cmp	r6, lr
 8022d6e:	da46      	bge.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022d70:	1402      	asrs	r2, r0, #16
 8022d72:	d444      	bmi.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022d74:	9f01      	ldr	r7, [sp, #4]
 8022d76:	42ba      	cmp	r2, r7
 8022d78:	da41      	bge.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022d7a:	fb0e 6202 	mla	r2, lr, r2, r6
 8022d7e:	9e02      	ldr	r6, [sp, #8]
 8022d80:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8022d84:	0e3a      	lsrs	r2, r7, #24
 8022d86:	d03a      	beq.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022d88:	2aff      	cmp	r2, #255	; 0xff
 8022d8a:	b2d6      	uxtb	r6, r2
 8022d8c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022d90:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022d94:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8022d98:	b2ff      	uxtb	r7, r7
 8022d9a:	d037      	beq.n	8022e0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 8022d9c:	fa1f f986 	uxth.w	r9, r6
 8022da0:	4462      	add	r2, ip
 8022da2:	43f6      	mvns	r6, r6
 8022da4:	f815 8002 	ldrb.w	r8, [r5, r2]
 8022da8:	fb17 f709 	smulbb	r7, r7, r9
 8022dac:	fb1a fa09 	smulbb	sl, sl, r9
 8022db0:	b2f6      	uxtb	r6, r6
 8022db2:	fb1b f909 	smulbb	r9, fp, r9
 8022db6:	fb08 7706 	mla	r7, r8, r6, r7
 8022dba:	b2bf      	uxth	r7, r7
 8022dbc:	f107 0801 	add.w	r8, r7, #1
 8022dc0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022dc4:	123f      	asrs	r7, r7, #8
 8022dc6:	54af      	strb	r7, [r5, r2]
 8022dc8:	442a      	add	r2, r5
 8022dca:	7857      	ldrb	r7, [r2, #1]
 8022dcc:	fb07 aa06 	mla	sl, r7, r6, sl
 8022dd0:	fa1f fa8a 	uxth.w	sl, sl
 8022dd4:	f10a 0701 	add.w	r7, sl, #1
 8022dd8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022ddc:	7897      	ldrb	r7, [r2, #2]
 8022dde:	fb07 9906 	mla	r9, r7, r6, r9
 8022de2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022de6:	fa1f f989 	uxth.w	r9, r9
 8022dea:	f882 a001 	strb.w	sl, [r2, #1]
 8022dee:	f109 0601 	add.w	r6, r9, #1
 8022df2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022df6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022dfa:	f882 9002 	strb.w	r9, [r2, #2]
 8022dfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022e00:	f10c 0c01 	add.w	ip, ip, #1
 8022e04:	4414      	add	r4, r2
 8022e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022e08:	4410      	add	r0, r2
 8022e0a:	e76b      	b.n	8022ce4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 8022e0c:	4462      	add	r2, ip
 8022e0e:	54af      	strb	r7, [r5, r2]
 8022e10:	442a      	add	r2, r5
 8022e12:	f882 a001 	strb.w	sl, [r2, #1]
 8022e16:	f882 b002 	strb.w	fp, [r2, #2]
 8022e1a:	e7f0      	b.n	8022dfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022e1c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022e20:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022e24:	f806 bc01 	strb.w	fp, [r6, #-1]
 8022e28:	e752      	b.n	8022cd0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8022e2a:	b005      	add	sp, #20
 8022e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e34:	b087      	sub	sp, #28
 8022e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022e3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022e3c:	9204      	str	r2, [sp, #16]
 8022e3e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8022e42:	6860      	ldr	r0, [r4, #4]
 8022e44:	9205      	str	r2, [sp, #20]
 8022e46:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8022e4a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8022e4e:	9101      	str	r1, [sp, #4]
 8022e50:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8022e54:	fb00 2505 	mla	r5, r0, r5, r2
 8022e58:	6822      	ldr	r2, [r4, #0]
 8022e5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e5e:	4415      	add	r5, r2
 8022e60:	f10e 0201 	add.w	r2, lr, #1
 8022e64:	f022 0201 	bic.w	r2, r2, #1
 8022e68:	9202      	str	r2, [sp, #8]
 8022e6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022e6c:	6812      	ldr	r2, [r2, #0]
 8022e6e:	9203      	str	r2, [sp, #12]
 8022e70:	9a01      	ldr	r2, [sp, #4]
 8022e72:	2a00      	cmp	r2, #0
 8022e74:	dc03      	bgt.n	8022e7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8022e76:	9a04      	ldr	r2, [sp, #16]
 8022e78:	2a00      	cmp	r2, #0
 8022e7a:	f340 8132 	ble.w	80230e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8022e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022e80:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022e86:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	dd0e      	ble.n	8022eac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8022e8e:	1422      	asrs	r2, r4, #16
 8022e90:	d405      	bmi.n	8022e9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022e92:	4596      	cmp	lr, r2
 8022e94:	dd03      	ble.n	8022e9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022e96:	1402      	asrs	r2, r0, #16
 8022e98:	d401      	bmi.n	8022e9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022e9a:	4542      	cmp	r2, r8
 8022e9c:	db07      	blt.n	8022eae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022e9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022ea0:	3b01      	subs	r3, #1
 8022ea2:	3503      	adds	r5, #3
 8022ea4:	4414      	add	r4, r2
 8022ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022ea8:	4410      	add	r0, r2
 8022eaa:	e7ee      	b.n	8022e8a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8022eac:	d010      	beq.n	8022ed0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022eae:	1e5a      	subs	r2, r3, #1
 8022eb0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8022eb2:	fb06 4602 	mla	r6, r6, r2, r4
 8022eb6:	1436      	asrs	r6, r6, #16
 8022eb8:	d546      	bpl.n	8022f48 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022eba:	4699      	mov	r9, r3
 8022ebc:	462e      	mov	r6, r5
 8022ebe:	f1b9 0f00 	cmp.w	r9, #0
 8022ec2:	f300 80ac 	bgt.w	802301e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 8022ec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022eca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ece:	441d      	add	r5, r3
 8022ed0:	9b01      	ldr	r3, [sp, #4]
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	f340 8105 	ble.w	80230e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8022ed8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ede:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ee2:	eeb0 6a62 	vmov.f32	s12, s5
 8022ee6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022eea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022eee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ef2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022ef6:	eeb0 6a43 	vmov.f32	s12, s6
 8022efa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022efe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022f02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022f0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022f0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022f12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022f16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022f1a:	ee12 2a90 	vmov	r2, s5
 8022f1e:	eef0 2a47 	vmov.f32	s5, s14
 8022f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f26:	ee13 2a10 	vmov	r2, s6
 8022f2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f2e:	eeb0 3a67 	vmov.f32	s6, s15
 8022f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f36:	9314      	str	r3, [sp, #80]	; 0x50
 8022f38:	9b01      	ldr	r3, [sp, #4]
 8022f3a:	9a04      	ldr	r2, [sp, #16]
 8022f3c:	3b01      	subs	r3, #1
 8022f3e:	9301      	str	r3, [sp, #4]
 8022f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f42:	bf08      	it	eq
 8022f44:	4613      	moveq	r3, r2
 8022f46:	e793      	b.n	8022e70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8022f48:	45b6      	cmp	lr, r6
 8022f4a:	ddb6      	ble.n	8022eba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022f4c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022f4e:	fb06 0202 	mla	r2, r6, r2, r0
 8022f52:	1412      	asrs	r2, r2, #16
 8022f54:	d4b1      	bmi.n	8022eba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022f56:	4542      	cmp	r2, r8
 8022f58:	daaf      	bge.n	8022eba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022f5a:	1cee      	adds	r6, r5, #3
 8022f5c:	4699      	mov	r9, r3
 8022f5e:	f1b9 0f00 	cmp.w	r9, #0
 8022f62:	ddb0      	ble.n	8022ec6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022f64:	1422      	asrs	r2, r4, #16
 8022f66:	9902      	ldr	r1, [sp, #8]
 8022f68:	1407      	asrs	r7, r0, #16
 8022f6a:	fb01 2707 	mla	r7, r1, r7, r2
 8022f6e:	9903      	ldr	r1, [sp, #12]
 8022f70:	087a      	lsrs	r2, r7, #1
 8022f72:	5c8a      	ldrb	r2, [r1, r2]
 8022f74:	07f9      	lsls	r1, r7, #31
 8022f76:	bf54      	ite	pl
 8022f78:	f002 020f 	andpl.w	r2, r2, #15
 8022f7c:	1112      	asrmi	r2, r2, #4
 8022f7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f82:	b2d2      	uxtb	r2, r2
 8022f84:	2a00      	cmp	r2, #0
 8022f86:	d042      	beq.n	802300e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8022f88:	4957      	ldr	r1, [pc, #348]	; (80230e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8022f8a:	680f      	ldr	r7, [r1, #0]
 8022f8c:	9905      	ldr	r1, [sp, #20]
 8022f8e:	fa5f fb87 	uxtb.w	fp, r7
 8022f92:	434a      	muls	r2, r1
 8022f94:	f102 0c01 	add.w	ip, r2, #1
 8022f98:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8022f9c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8022fa0:	1212      	asrs	r2, r2, #8
 8022fa2:	fa1f fa82 	uxth.w	sl, r2
 8022fa6:	43d2      	mvns	r2, r2
 8022fa8:	fb1b fb0a 	smulbb	fp, fp, sl
 8022fac:	b2d2      	uxtb	r2, r2
 8022fae:	fb0c bc02 	mla	ip, ip, r2, fp
 8022fb2:	fa1f fc8c 	uxth.w	ip, ip
 8022fb6:	f10c 0b01 	add.w	fp, ip, #1
 8022fba:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022fbe:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022fc2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022fc6:	fb1b fb0a 	smulbb	fp, fp, sl
 8022fca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022fce:	fb17 fa0a 	smulbb	sl, r7, sl
 8022fd2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022fd6:	f806 cc03 	strb.w	ip, [r6, #-3]
 8022fda:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 8022fde:	fb07 aa02 	mla	sl, r7, r2, sl
 8022fe2:	fb0c bc02 	mla	ip, ip, r2, fp
 8022fe6:	fa1f fa8a 	uxth.w	sl, sl
 8022fea:	fa1f fc8c 	uxth.w	ip, ip
 8022fee:	f10a 0701 	add.w	r7, sl, #1
 8022ff2:	f10c 0b01 	add.w	fp, ip, #1
 8022ff6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022ffa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022ffe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023002:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023006:	f806 ac01 	strb.w	sl, [r6, #-1]
 802300a:	f806 cc02 	strb.w	ip, [r6, #-2]
 802300e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023010:	3603      	adds	r6, #3
 8023012:	f109 39ff 	add.w	r9, r9, #4294967295
 8023016:	4414      	add	r4, r2
 8023018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802301a:	4410      	add	r0, r2
 802301c:	e79f      	b.n	8022f5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 802301e:	1422      	asrs	r2, r4, #16
 8023020:	d457      	bmi.n	80230d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8023022:	4596      	cmp	lr, r2
 8023024:	dd55      	ble.n	80230d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8023026:	1407      	asrs	r7, r0, #16
 8023028:	d453      	bmi.n	80230d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802302a:	4547      	cmp	r7, r8
 802302c:	da51      	bge.n	80230d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802302e:	9902      	ldr	r1, [sp, #8]
 8023030:	fb07 2701 	mla	r7, r7, r1, r2
 8023034:	9903      	ldr	r1, [sp, #12]
 8023036:	087a      	lsrs	r2, r7, #1
 8023038:	07ff      	lsls	r7, r7, #31
 802303a:	5c8a      	ldrb	r2, [r1, r2]
 802303c:	bf54      	ite	pl
 802303e:	f002 020f 	andpl.w	r2, r2, #15
 8023042:	1112      	asrmi	r2, r2, #4
 8023044:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023048:	b2d2      	uxtb	r2, r2
 802304a:	2a00      	cmp	r2, #0
 802304c:	d041      	beq.n	80230d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802304e:	4926      	ldr	r1, [pc, #152]	; (80230e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8023050:	680f      	ldr	r7, [r1, #0]
 8023052:	9905      	ldr	r1, [sp, #20]
 8023054:	fa5f fb87 	uxtb.w	fp, r7
 8023058:	434a      	muls	r2, r1
 802305a:	f102 0c01 	add.w	ip, r2, #1
 802305e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8023062:	f896 c000 	ldrb.w	ip, [r6]
 8023066:	1212      	asrs	r2, r2, #8
 8023068:	fa1f fa82 	uxth.w	sl, r2
 802306c:	43d2      	mvns	r2, r2
 802306e:	fb1b fb0a 	smulbb	fp, fp, sl
 8023072:	b2d2      	uxtb	r2, r2
 8023074:	fb0c bc02 	mla	ip, ip, r2, fp
 8023078:	fa1f fc8c 	uxth.w	ip, ip
 802307c:	f10c 0b01 	add.w	fp, ip, #1
 8023080:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023084:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8023088:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802308c:	fb1b fb0a 	smulbb	fp, fp, sl
 8023090:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023094:	fb17 fa0a 	smulbb	sl, r7, sl
 8023098:	78b7      	ldrb	r7, [r6, #2]
 802309a:	f886 c000 	strb.w	ip, [r6]
 802309e:	f896 c001 	ldrb.w	ip, [r6, #1]
 80230a2:	fb07 aa02 	mla	sl, r7, r2, sl
 80230a6:	fb0c bc02 	mla	ip, ip, r2, fp
 80230aa:	fa1f fa8a 	uxth.w	sl, sl
 80230ae:	fa1f fc8c 	uxth.w	ip, ip
 80230b2:	f10a 0701 	add.w	r7, sl, #1
 80230b6:	f10c 0b01 	add.w	fp, ip, #1
 80230ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80230be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80230c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80230c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80230ca:	f886 a002 	strb.w	sl, [r6, #2]
 80230ce:	f886 c001 	strb.w	ip, [r6, #1]
 80230d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80230d4:	3603      	adds	r6, #3
 80230d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80230da:	4414      	add	r4, r2
 80230dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80230de:	4410      	add	r0, r2
 80230e0:	e6ed      	b.n	8022ebe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80230e2:	b007      	add	sp, #28
 80230e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230e8:	2000bff8 	.word	0x2000bff8

080230ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80230ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f0:	b087      	sub	sp, #28
 80230f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80230f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230f8:	9205      	str	r2, [sp, #20]
 80230fa:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80230fe:	6860      	ldr	r0, [r4, #4]
 8023100:	9202      	str	r2, [sp, #8]
 8023102:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8023106:	9101      	str	r1, [sp, #4]
 8023108:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 802310c:	fb00 2606 	mla	r6, r0, r6, r2
 8023110:	6822      	ldr	r2, [r4, #0]
 8023112:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023116:	4416      	add	r6, r2
 8023118:	f108 0201 	add.w	r2, r8, #1
 802311c:	f022 0201 	bic.w	r2, r2, #1
 8023120:	9203      	str	r2, [sp, #12]
 8023122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023124:	6812      	ldr	r2, [r2, #0]
 8023126:	9204      	str	r2, [sp, #16]
 8023128:	9a01      	ldr	r2, [sp, #4]
 802312a:	2a00      	cmp	r2, #0
 802312c:	dc03      	bgt.n	8023136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802312e:	9a05      	ldr	r2, [sp, #20]
 8023130:	2a00      	cmp	r2, #0
 8023132:	f340 813a 	ble.w	80233aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8023136:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023138:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 802313c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802313e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023142:	2b00      	cmp	r3, #0
 8023144:	dd0f      	ble.n	8023166 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023146:	142a      	asrs	r2, r5, #16
 8023148:	d406      	bmi.n	8023158 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802314a:	4590      	cmp	r8, r2
 802314c:	dd04      	ble.n	8023158 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802314e:	1422      	asrs	r2, r4, #16
 8023150:	d402      	bmi.n	8023158 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8023152:	9802      	ldr	r0, [sp, #8]
 8023154:	4282      	cmp	r2, r0
 8023156:	db07      	blt.n	8023168 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8023158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802315a:	3b01      	subs	r3, #1
 802315c:	3603      	adds	r6, #3
 802315e:	4415      	add	r5, r2
 8023160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023162:	4414      	add	r4, r2
 8023164:	e7ed      	b.n	8023142 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8023166:	d073      	beq.n	8023250 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8023168:	1e5a      	subs	r2, r3, #1
 802316a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802316c:	fb00 5002 	mla	r0, r0, r2, r5
 8023170:	1400      	asrs	r0, r0, #16
 8023172:	d464      	bmi.n	802323e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8023174:	4580      	cmp	r8, r0
 8023176:	dd62      	ble.n	802323e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8023178:	9814      	ldr	r0, [sp, #80]	; 0x50
 802317a:	fb00 4202 	mla	r2, r0, r2, r4
 802317e:	1412      	asrs	r2, r2, #16
 8023180:	d45d      	bmi.n	802323e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8023182:	9802      	ldr	r0, [sp, #8]
 8023184:	4282      	cmp	r2, r0
 8023186:	da5a      	bge.n	802323e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8023188:	1cf0      	adds	r0, r6, #3
 802318a:	469a      	mov	sl, r3
 802318c:	f1ba 0f00 	cmp.w	sl, #0
 8023190:	dd59      	ble.n	8023246 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8023192:	142a      	asrs	r2, r5, #16
 8023194:	9903      	ldr	r1, [sp, #12]
 8023196:	1427      	asrs	r7, r4, #16
 8023198:	fb01 2707 	mla	r7, r1, r7, r2
 802319c:	9904      	ldr	r1, [sp, #16]
 802319e:	087a      	lsrs	r2, r7, #1
 80231a0:	5c8a      	ldrb	r2, [r1, r2]
 80231a2:	07f9      	lsls	r1, r7, #31
 80231a4:	bf54      	ite	pl
 80231a6:	f002 020f 	andpl.w	r2, r2, #15
 80231aa:	1112      	asrmi	r2, r2, #4
 80231ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231b0:	b2d2      	uxtb	r2, r2
 80231b2:	2a00      	cmp	r2, #0
 80231b4:	d03b      	beq.n	802322e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80231b6:	497e      	ldr	r1, [pc, #504]	; (80233b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80231b8:	2aff      	cmp	r2, #255	; 0xff
 80231ba:	680f      	ldr	r7, [r1, #0]
 80231bc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80231c0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80231c4:	b2ff      	uxtb	r7, r7
 80231c6:	f000 80e9 	beq.w	802339c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80231ca:	fa1f fe82 	uxth.w	lr, r2
 80231ce:	43d2      	mvns	r2, r2
 80231d0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80231d4:	fb17 f70e 	smulbb	r7, r7, lr
 80231d8:	b2d2      	uxtb	r2, r2
 80231da:	fb19 f90e 	smulbb	r9, r9, lr
 80231de:	fb0c 7702 	mla	r7, ip, r2, r7
 80231e2:	fb1b fe0e 	smulbb	lr, fp, lr
 80231e6:	b2bf      	uxth	r7, r7
 80231e8:	f107 0c01 	add.w	ip, r7, #1
 80231ec:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80231f0:	123f      	asrs	r7, r7, #8
 80231f2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80231f6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80231fa:	fb07 9902 	mla	r9, r7, r2, r9
 80231fe:	fa1f f989 	uxth.w	r9, r9
 8023202:	f109 0701 	add.w	r7, r9, #1
 8023206:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802320a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 802320e:	fb07 ee02 	mla	lr, r7, r2, lr
 8023212:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023216:	fa1f fe8e 	uxth.w	lr, lr
 802321a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802321e:	f10e 0201 	add.w	r2, lr, #1
 8023222:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8023226:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802322a:	f800 ec01 	strb.w	lr, [r0, #-1]
 802322e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023230:	3003      	adds	r0, #3
 8023232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023236:	4415      	add	r5, r2
 8023238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802323a:	4414      	add	r4, r2
 802323c:	e7a6      	b.n	802318c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802323e:	2700      	movs	r7, #0
 8023240:	1bda      	subs	r2, r3, r7
 8023242:	2a00      	cmp	r2, #0
 8023244:	dc40      	bgt.n	80232c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8023246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802324a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802324e:	441e      	add	r6, r3
 8023250:	9b01      	ldr	r3, [sp, #4]
 8023252:	2b00      	cmp	r3, #0
 8023254:	f340 80a9 	ble.w	80233aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8023258:	ee30 0a04 	vadd.f32	s0, s0, s8
 802325c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802325e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023262:	eeb0 6a62 	vmov.f32	s12, s5
 8023266:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802326a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802326e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023272:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023276:	eeb0 6a43 	vmov.f32	s12, s6
 802327a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802327e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023282:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023286:	ee61 7a27 	vmul.f32	s15, s2, s15
 802328a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802328e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023292:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023296:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802329a:	ee12 2a90 	vmov	r2, s5
 802329e:	eef0 2a47 	vmov.f32	s5, s14
 80232a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232a6:	ee13 2a10 	vmov	r2, s6
 80232aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80232ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80232ae:	eeb0 3a67 	vmov.f32	s6, s15
 80232b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232b6:	9314      	str	r3, [sp, #80]	; 0x50
 80232b8:	9b01      	ldr	r3, [sp, #4]
 80232ba:	9a05      	ldr	r2, [sp, #20]
 80232bc:	3b01      	subs	r3, #1
 80232be:	9301      	str	r3, [sp, #4]
 80232c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80232c2:	bf08      	it	eq
 80232c4:	4613      	moveq	r3, r2
 80232c6:	e72f      	b.n	8023128 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80232c8:	142a      	asrs	r2, r5, #16
 80232ca:	d458      	bmi.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80232cc:	4590      	cmp	r8, r2
 80232ce:	dd56      	ble.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80232d0:	1420      	asrs	r0, r4, #16
 80232d2:	d454      	bmi.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80232d4:	9902      	ldr	r1, [sp, #8]
 80232d6:	4288      	cmp	r0, r1
 80232d8:	da51      	bge.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80232da:	9903      	ldr	r1, [sp, #12]
 80232dc:	fb00 2001 	mla	r0, r0, r1, r2
 80232e0:	9904      	ldr	r1, [sp, #16]
 80232e2:	0842      	lsrs	r2, r0, #1
 80232e4:	07c0      	lsls	r0, r0, #31
 80232e6:	5c8a      	ldrb	r2, [r1, r2]
 80232e8:	bf54      	ite	pl
 80232ea:	f002 020f 	andpl.w	r2, r2, #15
 80232ee:	1112      	asrmi	r2, r2, #4
 80232f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80232f4:	b2d2      	uxtb	r2, r2
 80232f6:	2a00      	cmp	r2, #0
 80232f8:	d041      	beq.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80232fa:	492d      	ldr	r1, [pc, #180]	; (80233b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80232fc:	2aff      	cmp	r2, #255	; 0xff
 80232fe:	6808      	ldr	r0, [r1, #0]
 8023300:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8023304:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8023308:	fa5f fc80 	uxtb.w	ip, r0
 802330c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8023310:	d03b      	beq.n	802338a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8023312:	fa1f f982 	uxth.w	r9, r2
 8023316:	4438      	add	r0, r7
 8023318:	43d2      	mvns	r2, r2
 802331a:	f816 e000 	ldrb.w	lr, [r6, r0]
 802331e:	fb1c fc09 	smulbb	ip, ip, r9
 8023322:	fb1a fa09 	smulbb	sl, sl, r9
 8023326:	b2d2      	uxtb	r2, r2
 8023328:	fb1b f909 	smulbb	r9, fp, r9
 802332c:	fb0e cc02 	mla	ip, lr, r2, ip
 8023330:	fa1f fc8c 	uxth.w	ip, ip
 8023334:	f10c 0e01 	add.w	lr, ip, #1
 8023338:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802333c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023340:	f806 c000 	strb.w	ip, [r6, r0]
 8023344:	4430      	add	r0, r6
 8023346:	f890 c001 	ldrb.w	ip, [r0, #1]
 802334a:	fb0c aa02 	mla	sl, ip, r2, sl
 802334e:	fa1f fa8a 	uxth.w	sl, sl
 8023352:	f10a 0c01 	add.w	ip, sl, #1
 8023356:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802335a:	f890 c002 	ldrb.w	ip, [r0, #2]
 802335e:	fb0c 9902 	mla	r9, ip, r2, r9
 8023362:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023366:	fa1f f989 	uxth.w	r9, r9
 802336a:	f880 a001 	strb.w	sl, [r0, #1]
 802336e:	f109 0201 	add.w	r2, r9, #1
 8023372:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023376:	ea4f 2929 	mov.w	r9, r9, asr #8
 802337a:	f880 9002 	strb.w	r9, [r0, #2]
 802337e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023380:	3701      	adds	r7, #1
 8023382:	4415      	add	r5, r2
 8023384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023386:	4414      	add	r4, r2
 8023388:	e75a      	b.n	8023240 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 802338a:	4438      	add	r0, r7
 802338c:	f806 c000 	strb.w	ip, [r6, r0]
 8023390:	4430      	add	r0, r6
 8023392:	f880 a001 	strb.w	sl, [r0, #1]
 8023396:	f880 b002 	strb.w	fp, [r0, #2]
 802339a:	e7f0      	b.n	802337e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802339c:	f800 7c03 	strb.w	r7, [r0, #-3]
 80233a0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80233a4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80233a8:	e741      	b.n	802322e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80233aa:	b007      	add	sp, #28
 80233ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233b0:	2000bff8 	.word	0x2000bff8

080233b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80233b4:	4770      	bx	lr

080233b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80233b6:	4770      	bx	lr

080233b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80233b8:	4770      	bx	lr

080233ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80233ba:	4770      	bx	lr

080233bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80233bc:	4770      	bx	lr

080233be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80233be:	4770      	bx	lr

080233c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80233c0:	4770      	bx	lr

080233c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80233c2:	4770      	bx	lr

080233c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80233c4:	4770      	bx	lr

080233c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80233c6:	4770      	bx	lr

080233c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80233c8:	4770      	bx	lr

080233ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80233ca:	4770      	bx	lr

080233cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80233cc:	4770      	bx	lr

080233ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80233ce:	4770      	bx	lr

080233d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80233d0:	4770      	bx	lr

080233d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80233d2:	4770      	bx	lr

080233d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80233d4:	4770      	bx	lr

080233d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80233d6:	4770      	bx	lr

080233d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80233d8:	4770      	bx	lr

080233da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80233da:	4770      	bx	lr

080233dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80233dc:	2bff      	cmp	r3, #255	; 0xff
 80233de:	b508      	push	{r3, lr}
 80233e0:	d04f      	beq.n	8023482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80233e2:	2a2c      	cmp	r2, #44	; 0x2c
 80233e4:	d032      	beq.n	802344c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80233e6:	d80f      	bhi.n	8023408 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80233e8:	2a08      	cmp	r2, #8
 80233ea:	d046      	beq.n	802347a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80233ec:	d805      	bhi.n	80233fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80233ee:	2a04      	cmp	r2, #4
 80233f0:	d041      	beq.n	8023476 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80233f2:	2a05      	cmp	r2, #5
 80233f4:	d03d      	beq.n	8023472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80233f6:	2000      	movs	r0, #0
 80233f8:	e027      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233fa:	2a0a      	cmp	r2, #10
 80233fc:	d03d      	beq.n	802347a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80233fe:	d301      	bcc.n	8023404 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8023400:	2a0b      	cmp	r2, #11
 8023402:	d1f8      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023404:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8023406:	e020      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023408:	2a30      	cmp	r2, #48	; 0x30
 802340a:	d038      	beq.n	802347e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 802340c:	d808      	bhi.n	8023420 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 802340e:	2a2e      	cmp	r2, #46	; 0x2e
 8023410:	684b      	ldr	r3, [r1, #4]
 8023412:	d029      	beq.n	8023468 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8023414:	d90b      	bls.n	802342e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8023416:	781b      	ldrb	r3, [r3, #0]
 8023418:	2b00      	cmp	r3, #0
 802341a:	d1ec      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802341c:	6a00      	ldr	r0, [r0, #32]
 802341e:	e014      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023420:	2a32      	cmp	r2, #50	; 0x32
 8023422:	d02c      	beq.n	802347e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8023424:	d301      	bcc.n	802342a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8023426:	2a33      	cmp	r2, #51	; 0x33
 8023428:	d1e5      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802342a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 802342c:	e00d      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802342e:	781b      	ldrb	r3, [r3, #0]
 8023430:	2b01      	cmp	r3, #1
 8023432:	d009      	beq.n	8023448 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8023434:	d3f2      	bcc.n	802341c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8023436:	2b02      	cmp	r3, #2
 8023438:	d1dd      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802343a:	4b39      	ldr	r3, [pc, #228]	; (8023520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802343c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8023440:	4a38      	ldr	r2, [pc, #224]	; (8023524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8023442:	4839      	ldr	r0, [pc, #228]	; (8023528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8023444:	f007 ff3e 	bl	802b2c4 <__assert_func>
 8023448:	6900      	ldr	r0, [r0, #16]
 802344a:	bd08      	pop	{r3, pc}
 802344c:	684b      	ldr	r3, [r1, #4]
 802344e:	781b      	ldrb	r3, [r3, #0]
 8023450:	2b01      	cmp	r3, #1
 8023452:	d007      	beq.n	8023464 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8023454:	d30b      	bcc.n	802346e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8023456:	2b02      	cmp	r3, #2
 8023458:	d1cd      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802345a:	4b31      	ldr	r3, [pc, #196]	; (8023520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802345c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8023460:	4a30      	ldr	r2, [pc, #192]	; (8023524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8023462:	e7ee      	b.n	8023442 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8023464:	6880      	ldr	r0, [r0, #8]
 8023466:	e7f0      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023468:	781b      	ldrb	r3, [r3, #0]
 802346a:	2b00      	cmp	r3, #0
 802346c:	d1c3      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802346e:	6980      	ldr	r0, [r0, #24]
 8023470:	e7eb      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023472:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023474:	e7e9      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023476:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8023478:	e7e7      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802347a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 802347c:	e7e5      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802347e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8023480:	e7e3      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023482:	2a2c      	cmp	r2, #44	; 0x2c
 8023484:	d030      	beq.n	80234e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8023486:	d80f      	bhi.n	80234a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8023488:	2a08      	cmp	r2, #8
 802348a:	d044      	beq.n	8023516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802348c:	d805      	bhi.n	802349a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 802348e:	2a04      	cmp	r2, #4
 8023490:	d03f      	beq.n	8023512 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8023492:	2a05      	cmp	r2, #5
 8023494:	d1af      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023496:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8023498:	e7d7      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802349a:	2a0a      	cmp	r2, #10
 802349c:	d03b      	beq.n	8023516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802349e:	d301      	bcc.n	80234a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80234a0:	2a0b      	cmp	r2, #11
 80234a2:	d1a8      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80234a4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80234a6:	e7d0      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80234a8:	2a30      	cmp	r2, #48	; 0x30
 80234aa:	d036      	beq.n	802351a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80234ac:	d808      	bhi.n	80234c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80234ae:	2a2e      	cmp	r2, #46	; 0x2e
 80234b0:	684b      	ldr	r3, [r1, #4]
 80234b2:	d028      	beq.n	8023506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80234b4:	d90b      	bls.n	80234ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80234b6:	781b      	ldrb	r3, [r3, #0]
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	d19c      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80234bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80234be:	e7c4      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80234c0:	2a32      	cmp	r2, #50	; 0x32
 80234c2:	d02a      	beq.n	802351a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80234c4:	d301      	bcc.n	80234ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80234c6:	2a33      	cmp	r2, #51	; 0x33
 80234c8:	d195      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80234ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80234cc:	e7bd      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80234ce:	781b      	ldrb	r3, [r3, #0]
 80234d0:	2b01      	cmp	r3, #1
 80234d2:	d007      	beq.n	80234e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80234d4:	d3f2      	bcc.n	80234bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80234d6:	2b02      	cmp	r3, #2
 80234d8:	d18d      	bne.n	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80234da:	4b11      	ldr	r3, [pc, #68]	; (8023520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80234dc:	f240 31e1 	movw	r1, #993	; 0x3e1
 80234e0:	4a10      	ldr	r2, [pc, #64]	; (8023524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80234e2:	e7ae      	b.n	8023442 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80234e4:	6940      	ldr	r0, [r0, #20]
 80234e6:	e7b0      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80234e8:	684b      	ldr	r3, [r1, #4]
 80234ea:	781b      	ldrb	r3, [r3, #0]
 80234ec:	2b01      	cmp	r3, #1
 80234ee:	d008      	beq.n	8023502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80234f0:	d30d      	bcc.n	802350e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80234f2:	2b02      	cmp	r3, #2
 80234f4:	f47f af7f 	bne.w	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80234f8:	4b09      	ldr	r3, [pc, #36]	; (8023520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80234fa:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80234fe:	4a09      	ldr	r2, [pc, #36]	; (8023524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8023500:	e79f      	b.n	8023442 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8023502:	68c0      	ldr	r0, [r0, #12]
 8023504:	e7a1      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023506:	781b      	ldrb	r3, [r3, #0]
 8023508:	2b00      	cmp	r3, #0
 802350a:	f47f af74 	bne.w	80233f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802350e:	69c0      	ldr	r0, [r0, #28]
 8023510:	e79b      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023512:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8023514:	e799      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023516:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023518:	e797      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802351a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802351c:	e795      	b.n	802344a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802351e:	bf00      	nop
 8023520:	08030d2b 	.word	0x08030d2b
 8023524:	080314df 	.word	0x080314df
 8023528:	08030d77 	.word	0x08030d77

0802352c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 802352c:	b508      	push	{r3, lr}
 802352e:	4b06      	ldr	r3, [pc, #24]	; (8023548 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8023530:	8818      	ldrh	r0, [r3, #0]
 8023532:	b928      	cbnz	r0, 8023540 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8023534:	4b05      	ldr	r3, [pc, #20]	; (802354c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8023536:	21d7      	movs	r1, #215	; 0xd7
 8023538:	4a05      	ldr	r2, [pc, #20]	; (8023550 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 802353a:	4806      	ldr	r0, [pc, #24]	; (8023554 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 802353c:	f007 fec2 	bl	802b2c4 <__assert_func>
 8023540:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023544:	b280      	uxth	r0, r0
 8023546:	bd08      	pop	{r3, pc}
 8023548:	2000bfc8 	.word	0x2000bfc8
 802354c:	08030fc6 	.word	0x08030fc6
 8023550:	080314a4 	.word	0x080314a4
 8023554:	08031008 	.word	0x08031008

08023558 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8023558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802355c:	4616      	mov	r6, r2
 802355e:	b087      	sub	sp, #28
 8023560:	461f      	mov	r7, r3
 8023562:	b33b      	cbz	r3, 80235b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8023564:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8023568:	b323      	cbz	r3, 80235b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802356a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802356e:	b30b      	cbz	r3, 80235b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8023570:	6808      	ldr	r0, [r1, #0]
 8023572:	ab04      	add	r3, sp, #16
 8023574:	6849      	ldr	r1, [r1, #4]
 8023576:	4c5a      	ldr	r4, [pc, #360]	; (80236e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8023578:	c303      	stmia	r3!, {r0, r1}
 802357a:	a804      	add	r0, sp, #16
 802357c:	f7fb fd34 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023580:	6820      	ldr	r0, [r4, #0]
 8023582:	6803      	ldr	r3, [r0, #0]
 8023584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023586:	4798      	blx	r3
 8023588:	2fff      	cmp	r7, #255	; 0xff
 802358a:	4623      	mov	r3, r4
 802358c:	d015      	beq.n	80235ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802358e:	f010 0f08 	tst.w	r0, #8
 8023592:	d015      	beq.n	80235c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8023594:	6818      	ldr	r0, [r3, #0]
 8023596:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802359a:	6801      	ldr	r1, [r0, #0]
 802359c:	9401      	str	r4, [sp, #4]
 802359e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80235a2:	9702      	str	r7, [sp, #8]
 80235a4:	9400      	str	r4, [sp, #0]
 80235a6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80235aa:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80235ac:	4631      	mov	r1, r6
 80235ae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80235b2:	47a0      	blx	r4
 80235b4:	b007      	add	sp, #28
 80235b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235ba:	f010 0f02 	tst.w	r0, #2
 80235be:	e7e8      	b.n	8023592 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 80235c0:	6818      	ldr	r0, [r3, #0]
 80235c2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80235c6:	6803      	ldr	r3, [r0, #0]
 80235c8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80235cc:	6a1b      	ldr	r3, [r3, #32]
 80235ce:	4798      	blx	r3
 80235d0:	4944      	ldr	r1, [pc, #272]	; (80236e4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80235d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80235d6:	2fff      	cmp	r7, #255	; 0xff
 80235d8:	f8b1 c000 	ldrh.w	ip, [r1]
 80235dc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80235e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235e4:	4688      	mov	r8, r1
 80235e6:	fb0c 2303 	mla	r3, ip, r3, r2
 80235ea:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80235ee:	b2f2      	uxtb	r2, r6
 80235f0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80235f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235f8:	4418      	add	r0, r3
 80235fa:	d112      	bne.n	8023622 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 80235fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023600:	2100      	movs	r1, #0
 8023602:	42a9      	cmp	r1, r5
 8023604:	da66      	bge.n	80236d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8023606:	4603      	mov	r3, r0
 8023608:	2700      	movs	r7, #0
 802360a:	42a7      	cmp	r7, r4
 802360c:	f103 0303 	add.w	r3, r3, #3
 8023610:	da57      	bge.n	80236c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8023612:	f803 2c03 	strb.w	r2, [r3, #-3]
 8023616:	3701      	adds	r7, #1
 8023618:	f803 ec02 	strb.w	lr, [r3, #-2]
 802361c:	f803 cc01 	strb.w	ip, [r3, #-1]
 8023620:	e7f3      	b.n	802360a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8023622:	b2bb      	uxth	r3, r7
 8023624:	f04f 0800 	mov.w	r8, #0
 8023628:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802362c:	fb0c fc03 	mul.w	ip, ip, r3
 8023630:	fb0e fe03 	mul.w	lr, lr, r3
 8023634:	435a      	muls	r2, r3
 8023636:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802363a:	460f      	mov	r7, r1
 802363c:	b29b      	uxth	r3, r3
 802363e:	45a8      	cmp	r8, r5
 8023640:	da48      	bge.n	80236d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8023642:	4601      	mov	r1, r0
 8023644:	f04f 0a00 	mov.w	sl, #0
 8023648:	45a2      	cmp	sl, r4
 802364a:	f101 0103 	add.w	r1, r1, #3
 802364e:	da2f      	bge.n	80236b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8023650:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8023654:	f10a 0a01 	add.w	sl, sl, #1
 8023658:	fb19 f903 	smulbb	r9, r9, r3
 802365c:	4491      	add	r9, r2
 802365e:	fa1f f989 	uxth.w	r9, r9
 8023662:	f109 0b01 	add.w	fp, r9, #1
 8023666:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802366a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802366e:	f801 9c03 	strb.w	r9, [r1, #-3]
 8023672:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8023676:	fb19 f903 	smulbb	r9, r9, r3
 802367a:	44f1      	add	r9, lr
 802367c:	fa1f f989 	uxth.w	r9, r9
 8023680:	f109 0b01 	add.w	fp, r9, #1
 8023684:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8023688:	ea4f 2929 	mov.w	r9, r9, asr #8
 802368c:	f801 9c02 	strb.w	r9, [r1, #-2]
 8023690:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8023694:	fb19 f903 	smulbb	r9, r9, r3
 8023698:	44e1      	add	r9, ip
 802369a:	fa1f f989 	uxth.w	r9, r9
 802369e:	f109 0b01 	add.w	fp, r9, #1
 80236a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80236a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80236aa:	f801 9c01 	strb.w	r9, [r1, #-1]
 80236ae:	e7cb      	b.n	8023648 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 80236b0:	8839      	ldrh	r1, [r7, #0]
 80236b2:	f108 0801 	add.w	r8, r8, #1
 80236b6:	1b09      	subs	r1, r1, r4
 80236b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80236bc:	4431      	add	r1, r6
 80236be:	4408      	add	r0, r1
 80236c0:	e7bd      	b.n	802363e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 80236c2:	f8b8 3000 	ldrh.w	r3, [r8]
 80236c6:	3101      	adds	r1, #1
 80236c8:	1b1b      	subs	r3, r3, r4
 80236ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80236ce:	4433      	add	r3, r6
 80236d0:	4418      	add	r0, r3
 80236d2:	e796      	b.n	8023602 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 80236d4:	4b02      	ldr	r3, [pc, #8]	; (80236e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80236d6:	6818      	ldr	r0, [r3, #0]
 80236d8:	6803      	ldr	r3, [r0, #0]
 80236da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236dc:	4798      	blx	r3
 80236de:	e769      	b.n	80235b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80236e0:	2000bfd0 	.word	0x2000bfd0
 80236e4:	2000bfc8 	.word	0x2000bfc8

080236e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80236e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236ec:	b08d      	sub	sp, #52	; 0x34
 80236ee:	460c      	mov	r4, r1
 80236f0:	4617      	mov	r7, r2
 80236f2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 80236f6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 80236fa:	2e00      	cmp	r6, #0
 80236fc:	d04a      	beq.n	8023794 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80236fe:	6810      	ldr	r0, [r2, #0]
 8023700:	ad08      	add	r5, sp, #32
 8023702:	6851      	ldr	r1, [r2, #4]
 8023704:	c503      	stmia	r5!, {r0, r1}
 8023706:	6818      	ldr	r0, [r3, #0]
 8023708:	ad0a      	add	r5, sp, #40	; 0x28
 802370a:	6859      	ldr	r1, [r3, #4]
 802370c:	c503      	stmia	r5!, {r0, r1}
 802370e:	a808      	add	r0, sp, #32
 8023710:	f7fb fc6a 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023714:	4639      	mov	r1, r7
 8023716:	a80a      	add	r0, sp, #40	; 0x28
 8023718:	4f59      	ldr	r7, [pc, #356]	; (8023880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 802371a:	f7fb fc4d 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802371e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023722:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8023726:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802372a:	6838      	ldr	r0, [r7, #0]
 802372c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023730:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8023734:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8023738:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802373c:	440c      	add	r4, r1
 802373e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8023742:	440a      	add	r2, r1
 8023744:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8023748:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802374c:	4413      	add	r3, r2
 802374e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8023752:	6803      	ldr	r3, [r0, #0]
 8023754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023756:	4798      	blx	r3
 8023758:	2eff      	cmp	r6, #255	; 0xff
 802375a:	f000 8089 	beq.w	8023870 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 802375e:	0743      	lsls	r3, r0, #29
 8023760:	d405      	bmi.n	802376e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8023762:	f1b9 0f00 	cmp.w	r9, #0
 8023766:	d018      	beq.n	802379a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8023768:	f010 0f10 	tst.w	r0, #16
 802376c:	d015      	beq.n	802379a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802376e:	6838      	ldr	r0, [r7, #0]
 8023770:	b2ad      	uxth	r5, r5
 8023772:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8023776:	6801      	ldr	r1, [r0, #0]
 8023778:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802377c:	9500      	str	r5, [sp, #0]
 802377e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8023782:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8023786:	9602      	str	r6, [sp, #8]
 8023788:	fa1f f688 	uxth.w	r6, r8
 802378c:	9601      	str	r6, [sp, #4]
 802378e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8023790:	4621      	mov	r1, r4
 8023792:	47a8      	blx	r5
 8023794:	b00d      	add	sp, #52	; 0x34
 8023796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802379a:	6838      	ldr	r0, [r7, #0]
 802379c:	6803      	ldr	r3, [r0, #0]
 802379e:	6a1b      	ldr	r3, [r3, #32]
 80237a0:	4798      	blx	r3
 80237a2:	4a38      	ldr	r2, [pc, #224]	; (8023884 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 80237a4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80237a8:	2eff      	cmp	r6, #255	; 0xff
 80237aa:	8813      	ldrh	r3, [r2, #0]
 80237ac:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 80237b0:	fb0c 1303 	mla	r3, ip, r3, r1
 80237b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80237b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80237bc:	4418      	add	r0, r3
 80237be:	d032      	beq.n	8023826 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80237c0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 80237c4:	f04f 0c00 	mov.w	ip, #0
 80237c8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80237cc:	9306      	str	r3, [sp, #24]
 80237ce:	45c4      	cmp	ip, r8
 80237d0:	da49      	bge.n	8023866 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80237d2:	4686      	mov	lr, r0
 80237d4:	46a1      	mov	r9, r4
 80237d6:	eba9 0304 	sub.w	r3, r9, r4
 80237da:	428b      	cmp	r3, r1
 80237dc:	da13      	bge.n	8023806 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 80237de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80237e2:	f89e b000 	ldrb.w	fp, [lr]
 80237e6:	9307      	str	r3, [sp, #28]
 80237e8:	9b06      	ldr	r3, [sp, #24]
 80237ea:	fb1b fb03 	smulbb	fp, fp, r3
 80237ee:	9b07      	ldr	r3, [sp, #28]
 80237f0:	fb03 b306 	mla	r3, r3, r6, fp
 80237f4:	b29b      	uxth	r3, r3
 80237f6:	f103 0b01 	add.w	fp, r3, #1
 80237fa:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80237fe:	121b      	asrs	r3, r3, #8
 8023800:	f80e 3b01 	strb.w	r3, [lr], #1
 8023804:	e7e7      	b.n	80237d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8023806:	8813      	ldrh	r3, [r2, #0]
 8023808:	f10c 0c01 	add.w	ip, ip, #1
 802380c:	1b5b      	subs	r3, r3, r5
 802380e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023812:	4453      	add	r3, sl
 8023814:	4418      	add	r0, r3
 8023816:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802381a:	1b5b      	subs	r3, r3, r5
 802381c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023820:	4453      	add	r3, sl
 8023822:	441c      	add	r4, r3
 8023824:	e7d3      	b.n	80237ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8023826:	2600      	movs	r6, #0
 8023828:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 802382c:	4546      	cmp	r6, r8
 802382e:	da1a      	bge.n	8023866 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8023830:	f100 3eff 	add.w	lr, r0, #4294967295
 8023834:	4623      	mov	r3, r4
 8023836:	eba3 0904 	sub.w	r9, r3, r4
 802383a:	4589      	cmp	r9, r1
 802383c:	da04      	bge.n	8023848 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 802383e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8023842:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8023846:	e7f6      	b.n	8023836 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8023848:	8813      	ldrh	r3, [r2, #0]
 802384a:	3601      	adds	r6, #1
 802384c:	1b5b      	subs	r3, r3, r5
 802384e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023852:	4463      	add	r3, ip
 8023854:	4418      	add	r0, r3
 8023856:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802385a:	1b5b      	subs	r3, r3, r5
 802385c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023860:	4463      	add	r3, ip
 8023862:	441c      	add	r4, r3
 8023864:	e7e2      	b.n	802382c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8023866:	6838      	ldr	r0, [r7, #0]
 8023868:	6803      	ldr	r3, [r0, #0]
 802386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802386c:	4798      	blx	r3
 802386e:	e791      	b.n	8023794 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8023870:	f1b9 0f00 	cmp.w	r9, #0
 8023874:	f47f af78 	bne.w	8023768 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8023878:	f010 0f01 	tst.w	r0, #1
 802387c:	e776      	b.n	802376c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 802387e:	bf00      	nop
 8023880:	2000bfd0 	.word	0x2000bfd0
 8023884:	2000bfc8 	.word	0x2000bfc8

08023888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023888:	b510      	push	{r4, lr}
 802388a:	4604      	mov	r4, r0
 802388c:	2104      	movs	r1, #4
 802388e:	f007 fcee 	bl	802b26e <_ZdlPvj>
 8023892:	4620      	mov	r0, r4
 8023894:	bd10      	pop	{r4, pc}

08023896 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023896:	b510      	push	{r4, lr}
 8023898:	4604      	mov	r4, r0
 802389a:	2104      	movs	r1, #4
 802389c:	f007 fce7 	bl	802b26e <_ZdlPvj>
 80238a0:	4620      	mov	r0, r4
 80238a2:	bd10      	pop	{r4, pc}

080238a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80238a4:	b510      	push	{r4, lr}
 80238a6:	4604      	mov	r4, r0
 80238a8:	2104      	movs	r1, #4
 80238aa:	f007 fce0 	bl	802b26e <_ZdlPvj>
 80238ae:	4620      	mov	r0, r4
 80238b0:	bd10      	pop	{r4, pc}

080238b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80238b2:	b510      	push	{r4, lr}
 80238b4:	4604      	mov	r4, r0
 80238b6:	2104      	movs	r1, #4
 80238b8:	f007 fcd9 	bl	802b26e <_ZdlPvj>
 80238bc:	4620      	mov	r0, r4
 80238be:	bd10      	pop	{r4, pc}

080238c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80238c0:	b510      	push	{r4, lr}
 80238c2:	4604      	mov	r4, r0
 80238c4:	2104      	movs	r1, #4
 80238c6:	f007 fcd2 	bl	802b26e <_ZdlPvj>
 80238ca:	4620      	mov	r0, r4
 80238cc:	bd10      	pop	{r4, pc}

080238ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80238ce:	b510      	push	{r4, lr}
 80238d0:	4604      	mov	r4, r0
 80238d2:	2104      	movs	r1, #4
 80238d4:	f007 fccb 	bl	802b26e <_ZdlPvj>
 80238d8:	4620      	mov	r0, r4
 80238da:	bd10      	pop	{r4, pc}

080238dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80238dc:	b510      	push	{r4, lr}
 80238de:	4604      	mov	r4, r0
 80238e0:	2104      	movs	r1, #4
 80238e2:	f007 fcc4 	bl	802b26e <_ZdlPvj>
 80238e6:	4620      	mov	r0, r4
 80238e8:	bd10      	pop	{r4, pc}

080238ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80238ea:	b510      	push	{r4, lr}
 80238ec:	4604      	mov	r4, r0
 80238ee:	2104      	movs	r1, #4
 80238f0:	f007 fcbd 	bl	802b26e <_ZdlPvj>
 80238f4:	4620      	mov	r0, r4
 80238f6:	bd10      	pop	{r4, pc}

080238f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80238f8:	b510      	push	{r4, lr}
 80238fa:	4604      	mov	r4, r0
 80238fc:	2104      	movs	r1, #4
 80238fe:	f007 fcb6 	bl	802b26e <_ZdlPvj>
 8023902:	4620      	mov	r0, r4
 8023904:	bd10      	pop	{r4, pc}

08023906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023906:	b510      	push	{r4, lr}
 8023908:	4604      	mov	r4, r0
 802390a:	2104      	movs	r1, #4
 802390c:	f007 fcaf 	bl	802b26e <_ZdlPvj>
 8023910:	4620      	mov	r0, r4
 8023912:	bd10      	pop	{r4, pc}

08023914 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023914:	b510      	push	{r4, lr}
 8023916:	4604      	mov	r4, r0
 8023918:	2104      	movs	r1, #4
 802391a:	f007 fca8 	bl	802b26e <_ZdlPvj>
 802391e:	4620      	mov	r0, r4
 8023920:	bd10      	pop	{r4, pc}

08023922 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023922:	b510      	push	{r4, lr}
 8023924:	4604      	mov	r4, r0
 8023926:	2104      	movs	r1, #4
 8023928:	f007 fca1 	bl	802b26e <_ZdlPvj>
 802392c:	4620      	mov	r0, r4
 802392e:	bd10      	pop	{r4, pc}

08023930 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023930:	b510      	push	{r4, lr}
 8023932:	4604      	mov	r4, r0
 8023934:	2104      	movs	r1, #4
 8023936:	f007 fc9a 	bl	802b26e <_ZdlPvj>
 802393a:	4620      	mov	r0, r4
 802393c:	bd10      	pop	{r4, pc}

0802393e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802393e:	b510      	push	{r4, lr}
 8023940:	4604      	mov	r4, r0
 8023942:	2104      	movs	r1, #4
 8023944:	f007 fc93 	bl	802b26e <_ZdlPvj>
 8023948:	4620      	mov	r0, r4
 802394a:	bd10      	pop	{r4, pc}

0802394c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802394c:	b510      	push	{r4, lr}
 802394e:	4604      	mov	r4, r0
 8023950:	2104      	movs	r1, #4
 8023952:	f007 fc8c 	bl	802b26e <_ZdlPvj>
 8023956:	4620      	mov	r0, r4
 8023958:	bd10      	pop	{r4, pc}

0802395a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802395a:	b510      	push	{r4, lr}
 802395c:	4604      	mov	r4, r0
 802395e:	2104      	movs	r1, #4
 8023960:	f007 fc85 	bl	802b26e <_ZdlPvj>
 8023964:	4620      	mov	r0, r4
 8023966:	bd10      	pop	{r4, pc}

08023968 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8023968:	b510      	push	{r4, lr}
 802396a:	4604      	mov	r4, r0
 802396c:	2104      	movs	r1, #4
 802396e:	f007 fc7e 	bl	802b26e <_ZdlPvj>
 8023972:	4620      	mov	r0, r4
 8023974:	bd10      	pop	{r4, pc}

08023976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8023976:	b510      	push	{r4, lr}
 8023978:	4604      	mov	r4, r0
 802397a:	2104      	movs	r1, #4
 802397c:	f007 fc77 	bl	802b26e <_ZdlPvj>
 8023980:	4620      	mov	r0, r4
 8023982:	bd10      	pop	{r4, pc}

08023984 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8023984:	b510      	push	{r4, lr}
 8023986:	4604      	mov	r4, r0
 8023988:	2104      	movs	r1, #4
 802398a:	f007 fc70 	bl	802b26e <_ZdlPvj>
 802398e:	4620      	mov	r0, r4
 8023990:	bd10      	pop	{r4, pc}

08023992 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8023992:	b510      	push	{r4, lr}
 8023994:	4604      	mov	r4, r0
 8023996:	2104      	movs	r1, #4
 8023998:	f007 fc69 	bl	802b26e <_ZdlPvj>
 802399c:	4620      	mov	r0, r4
 802399e:	bd10      	pop	{r4, pc}

080239a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80239a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239a4:	4d9e      	ldr	r5, [pc, #632]	; (8023c20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80239a6:	4690      	mov	r8, r2
 80239a8:	b08f      	sub	sp, #60	; 0x3c
 80239aa:	4604      	mov	r4, r0
 80239ac:	682a      	ldr	r2, [r5, #0]
 80239ae:	4689      	mov	r9, r1
 80239b0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80239b4:	2a02      	cmp	r2, #2
 80239b6:	d106      	bne.n	80239c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80239b8:	4b9a      	ldr	r3, [pc, #616]	; (8023c24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80239ba:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80239be:	4a9a      	ldr	r2, [pc, #616]	; (8023c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80239c0:	489a      	ldr	r0, [pc, #616]	; (8023c2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 80239c2:	f007 fc7f 	bl	802b2c4 <__assert_func>
 80239c6:	ae0e      	add	r6, sp, #56	; 0x38
 80239c8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80239cc:	4630      	mov	r0, r6
 80239ce:	f7fe f8b3 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80239d2:	6823      	ldr	r3, [r4, #0]
 80239d4:	4607      	mov	r7, r0
 80239d6:	4620      	mov	r0, r4
 80239d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239da:	4798      	blx	r3
 80239dc:	4287      	cmp	r7, r0
 80239de:	d004      	beq.n	80239ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80239e0:	4b93      	ldr	r3, [pc, #588]	; (8023c30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 80239e2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80239e6:	4a90      	ldr	r2, [pc, #576]	; (8023c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80239e8:	e7ea      	b.n	80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80239ea:	4630      	mov	r0, r6
 80239ec:	f7fe f820 	bl	8021a30 <_ZNK8touchgfx6Bitmap7getDataEv>
 80239f0:	4607      	mov	r7, r0
 80239f2:	b920      	cbnz	r0, 80239fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80239f4:	4b8f      	ldr	r3, [pc, #572]	; (8023c34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80239f6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80239fa:	4a8b      	ldr	r2, [pc, #556]	; (8023c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80239fc:	e7e0      	b.n	80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80239fe:	f8d8 0000 	ldr.w	r0, [r8]
 8023a02:	ab06      	add	r3, sp, #24
 8023a04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023a08:	f9b8 a000 	ldrsh.w	sl, [r8]
 8023a0c:	c303      	stmia	r3!, {r0, r1}
 8023a0e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023a12:	ab08      	add	r3, sp, #32
 8023a14:	f8d9 0000 	ldr.w	r0, [r9]
 8023a18:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8023a1c:	c303      	stmia	r3!, {r0, r1}
 8023a1e:	4630      	mov	r0, r6
 8023a20:	f7fd fefe 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023a24:	4680      	mov	r8, r0
 8023a26:	4630      	mov	r0, r6
 8023a28:	4e83      	ldr	r6, [pc, #524]	; (8023c38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8023a2a:	f7fd ff33 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023a2e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8023a32:	f10d 0920 	add.w	r9, sp, #32
 8023a36:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8023a3a:	a806      	add	r0, sp, #24
 8023a3c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8023a40:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8023a44:	f7fb fad0 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a48:	4648      	mov	r0, r9
 8023a4a:	f7fb facd 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a4e:	a80a      	add	r0, sp, #40	; 0x28
 8023a50:	f7fb faca 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a54:	4b79      	ldr	r3, [pc, #484]	; (8023c3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8023a56:	2100      	movs	r1, #0
 8023a58:	f9b6 2000 	ldrsh.w	r2, [r6]
 8023a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023a60:	4648      	mov	r0, r9
 8023a62:	910c      	str	r1, [sp, #48]	; 0x30
 8023a64:	a90c      	add	r1, sp, #48	; 0x30
 8023a66:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8023a6a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8023a6e:	f7f7 fccd 	bl	801b40c <_ZN8touchgfx4RectaNERKS0_>
 8023a72:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8023a76:	9602      	str	r6, [sp, #8]
 8023a78:	f1bc 0f00 	cmp.w	ip, #0
 8023a7c:	f000 80a4 	beq.w	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023a80:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8023a84:	2e00      	cmp	r6, #0
 8023a86:	f000 809f 	beq.w	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023a8a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8023a8e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8023a92:	4288      	cmp	r0, r1
 8023a94:	db36      	blt.n	8023b04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8023a96:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8023a9a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8023a9e:	429a      	cmp	r2, r3
 8023aa0:	db30      	blt.n	8023b04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8023aa2:	4460      	add	r0, ip
 8023aa4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8023aa8:	4461      	add	r1, ip
 8023aaa:	b200      	sxth	r0, r0
 8023aac:	b209      	sxth	r1, r1
 8023aae:	4288      	cmp	r0, r1
 8023ab0:	dc28      	bgt.n	8023b04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8023ab2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8023ab6:	4432      	add	r2, r6
 8023ab8:	440b      	add	r3, r1
 8023aba:	b212      	sxth	r2, r2
 8023abc:	b21b      	sxth	r3, r3
 8023abe:	429a      	cmp	r2, r3
 8023ac0:	dc20      	bgt.n	8023b04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8023ac2:	6823      	ldr	r3, [r4, #0]
 8023ac4:	4620      	mov	r0, r4
 8023ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ac8:	4798      	blx	r3
 8023aca:	4682      	mov	sl, r0
 8023acc:	6828      	ldr	r0, [r5, #0]
 8023ace:	6803      	ldr	r3, [r0, #0]
 8023ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ad2:	4798      	blx	r3
 8023ad4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8023ad8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023adc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8023ae0:	9303      	str	r3, [sp, #12]
 8023ae2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8023ae6:	1a9b      	subs	r3, r3, r2
 8023ae8:	b29b      	uxth	r3, r3
 8023aea:	b21c      	sxth	r4, r3
 8023aec:	2c00      	cmp	r4, #0
 8023aee:	dc0e      	bgt.n	8023b0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8023af0:	b134      	cbz	r4, 8023b00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8023af2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023af6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8023afa:	4413      	add	r3, r2
 8023afc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8023b00:	463c      	mov	r4, r7
 8023b02:	e00b      	b.n	8023b1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8023b04:	4b4e      	ldr	r3, [pc, #312]	; (8023c40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8023b06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8023b0a:	4a47      	ldr	r2, [pc, #284]	; (8023c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8023b0c:	e758      	b.n	80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8023b0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b12:	ebab 0303 	sub.w	r3, fp, r3
 8023b16:	443c      	add	r4, r7
 8023b18:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8023b1c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8023b20:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8023b24:	1a9b      	subs	r3, r3, r2
 8023b26:	b29b      	uxth	r3, r3
 8023b28:	b219      	sxth	r1, r3
 8023b2a:	2900      	cmp	r1, #0
 8023b2c:	dd50      	ble.n	8023bd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8023b2e:	9a03      	ldr	r2, [sp, #12]
 8023b30:	fb02 4401 	mla	r4, r2, r1, r4
 8023b34:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8023b38:	1ad3      	subs	r3, r2, r3
 8023b3a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8023b3e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8023b42:	f1bc 0f00 	cmp.w	ip, #0
 8023b46:	dd3f      	ble.n	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023b48:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8023b4c:	2e00      	cmp	r6, #0
 8023b4e:	dd3b      	ble.n	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023b50:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8023b54:	2203      	movs	r2, #3
 8023b56:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8023b5a:	fb0a f801 	mul.w	r8, sl, r1
 8023b5e:	fb13 8802 	smlabb	r8, r3, r2, r8
 8023b62:	9a02      	ldr	r2, [sp, #8]
 8023b64:	4480      	add	r8, r0
 8023b66:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8023b6a:	8812      	ldrh	r2, [r2, #0]
 8023b6c:	4584      	cmp	ip, r0
 8023b6e:	eba2 0303 	sub.w	r3, r2, r3
 8023b72:	bfa8      	it	ge
 8023b74:	4684      	movge	ip, r0
 8023b76:	459c      	cmp	ip, r3
 8023b78:	bfa8      	it	ge
 8023b7a:	469c      	movge	ip, r3
 8023b7c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8023b80:	429e      	cmp	r6, r3
 8023b82:	bfa8      	it	ge
 8023b84:	461e      	movge	r6, r3
 8023b86:	4b2d      	ldr	r3, [pc, #180]	; (8023c3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8023b88:	881b      	ldrh	r3, [r3, #0]
 8023b8a:	1a59      	subs	r1, r3, r1
 8023b8c:	4633      	mov	r3, r6
 8023b8e:	428e      	cmp	r6, r1
 8023b90:	bfa8      	it	ge
 8023b92:	460b      	movge	r3, r1
 8023b94:	4562      	cmp	r2, ip
 8023b96:	9302      	str	r3, [sp, #8]
 8023b98:	d12d      	bne.n	8023bf6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8023b9a:	455a      	cmp	r2, fp
 8023b9c:	d12b      	bne.n	8023bf6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8023b9e:	6828      	ldr	r0, [r5, #0]
 8023ba0:	6803      	ldr	r3, [r0, #0]
 8023ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ba4:	4798      	blx	r3
 8023ba6:	07c3      	lsls	r3, r0, #31
 8023ba8:	d51b      	bpl.n	8023be2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8023baa:	6828      	ldr	r0, [r5, #0]
 8023bac:	9b02      	ldr	r3, [sp, #8]
 8023bae:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8023bb2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8023bb6:	6803      	ldr	r3, [r0, #0]
 8023bb8:	f8cd b000 	str.w	fp, [sp]
 8023bbc:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8023bbe:	4623      	mov	r3, r4
 8023bc0:	e899 0006 	ldmia.w	r9, {r1, r2}
 8023bc4:	47a8      	blx	r5
 8023bc6:	4607      	mov	r7, r0
 8023bc8:	4638      	mov	r0, r7
 8023bca:	b00f      	add	sp, #60	; 0x3c
 8023bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bd0:	bf1f      	itttt	ne
 8023bd2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8023bd6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8023bda:	189b      	addne	r3, r3, r2
 8023bdc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8023be0:	e7ad      	b.n	8023b3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8023be2:	6828      	ldr	r0, [r5, #0]
 8023be4:	4642      	mov	r2, r8
 8023be6:	4621      	mov	r1, r4
 8023be8:	6803      	ldr	r3, [r0, #0]
 8023bea:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8023bec:	9b02      	ldr	r3, [sp, #8]
 8023bee:	fb03 f30a 	mul.w	r3, r3, sl
 8023bf2:	47a8      	blx	r5
 8023bf4:	e7e8      	b.n	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023bf6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8023bfa:	f04f 0900 	mov.w	r9, #0
 8023bfe:	9b02      	ldr	r3, [sp, #8]
 8023c00:	454b      	cmp	r3, r9
 8023c02:	dde1      	ble.n	8023bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023c04:	6828      	ldr	r0, [r5, #0]
 8023c06:	4642      	mov	r2, r8
 8023c08:	4621      	mov	r1, r4
 8023c0a:	44d0      	add	r8, sl
 8023c0c:	6803      	ldr	r3, [r0, #0]
 8023c0e:	f109 0901 	add.w	r9, r9, #1
 8023c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c14:	461e      	mov	r6, r3
 8023c16:	465b      	mov	r3, fp
 8023c18:	47b0      	blx	r6
 8023c1a:	9b03      	ldr	r3, [sp, #12]
 8023c1c:	441c      	add	r4, r3
 8023c1e:	e7ee      	b.n	8023bfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8023c20:	2000bfd0 	.word	0x2000bfd0
 8023c24:	08030da9 	.word	0x08030da9
 8023c28:	08031589 	.word	0x08031589
 8023c2c:	08030d77 	.word	0x08030d77
 8023c30:	08030e5d 	.word	0x08030e5d
 8023c34:	08030eb2 	.word	0x08030eb2
 8023c38:	2000bfc8 	.word	0x2000bfc8
 8023c3c:	2000bfca 	.word	0x2000bfca
 8023c40:	08030ef0 	.word	0x08030ef0

08023c44 <_ZN8touchgfx8LCD24bppC1Ev>:
 8023c44:	4a0b      	ldr	r2, [pc, #44]	; (8023c74 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8023c46:	6002      	str	r2, [r0, #0]
 8023c48:	2200      	movs	r2, #0
 8023c4a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8023c4e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8023c52:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023c56:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8023c5a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8023c5e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8023c62:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023c66:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8023c6a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8023c6e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8023c72:	4770      	bx	lr
 8023c74:	080311d4 	.word	0x080311d4

08023c78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c7c:	b093      	sub	sp, #76	; 0x4c
 8023c7e:	880c      	ldrh	r4, [r1, #0]
 8023c80:	4605      	mov	r5, r0
 8023c82:	460f      	mov	r7, r1
 8023c84:	4691      	mov	r9, r2
 8023c86:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8023c8a:	b12c      	cbz	r4, 8023c98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8023c8c:	4b71      	ldr	r3, [pc, #452]	; (8023e54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8023c8e:	2167      	movs	r1, #103	; 0x67
 8023c90:	4a71      	ldr	r2, [pc, #452]	; (8023e58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8023c92:	4872      	ldr	r0, [pc, #456]	; (8023e5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8023c94:	f007 fb16 	bl	802b2c4 <__assert_func>
 8023c98:	6810      	ldr	r0, [r2, #0]
 8023c9a:	ae0e      	add	r6, sp, #56	; 0x38
 8023c9c:	6851      	ldr	r1, [r2, #4]
 8023c9e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8023e64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8023ca2:	c603      	stmia	r6!, {r0, r1}
 8023ca4:	6818      	ldr	r0, [r3, #0]
 8023ca6:	ae10      	add	r6, sp, #64	; 0x40
 8023ca8:	6859      	ldr	r1, [r3, #4]
 8023caa:	c603      	stmia	r6!, {r0, r1}
 8023cac:	a80e      	add	r0, sp, #56	; 0x38
 8023cae:	f7fb f99b 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023cb2:	4649      	mov	r1, r9
 8023cb4:	a810      	add	r0, sp, #64	; 0x40
 8023cb6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8023e60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8023cba:	f7fb f97d 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023cbe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023cc2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8023cc6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8023cca:	f8d9 0000 	ldr.w	r0, [r9]
 8023cce:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023cd2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8023cd6:	440d      	add	r5, r1
 8023cd8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8023cdc:	440a      	add	r2, r1
 8023cde:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023ce2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023ce6:	4413      	add	r3, r2
 8023ce8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8023cec:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8023cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023cf2:	6803      	ldr	r3, [r0, #0]
 8023cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023cf8:	4798      	blx	r3
 8023cfa:	2801      	cmp	r0, #1
 8023cfc:	d11e      	bne.n	8023d3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8023cfe:	220b      	movs	r2, #11
 8023d00:	9008      	str	r0, [sp, #32]
 8023d02:	b2b6      	uxth	r6, r6
 8023d04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023d08:	9207      	str	r2, [sp, #28]
 8023d0a:	4629      	mov	r1, r5
 8023d0c:	f8ba 2000 	ldrh.w	r2, [sl]
 8023d10:	f8cd 8010 	str.w	r8, [sp, #16]
 8023d14:	9601      	str	r6, [sp, #4]
 8023d16:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8023d1a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8023d1e:	9203      	str	r2, [sp, #12]
 8023d20:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023d24:	9202      	str	r2, [sp, #8]
 8023d26:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8023d2a:	9200      	str	r2, [sp, #0]
 8023d2c:	463a      	mov	r2, r7
 8023d2e:	f8d9 0000 	ldr.w	r0, [r9]
 8023d32:	f7f8 fa8d 	bl	801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023d36:	b013      	add	sp, #76	; 0x4c
 8023d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d3c:	f8d9 0000 	ldr.w	r0, [r9]
 8023d40:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8023d44:	6803      	ldr	r3, [r0, #0]
 8023d46:	6a1b      	ldr	r3, [r3, #32]
 8023d48:	4798      	blx	r3
 8023d4a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8023d4e:	f8ba 3000 	ldrh.w	r3, [sl]
 8023d52:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023d56:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8023d5a:	fb01 2303 	mla	r3, r1, r3, r2
 8023d5e:	4621      	mov	r1, r4
 8023d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d64:	4418      	add	r0, r3
 8023d66:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8023d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8023d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d6e:	4299      	cmp	r1, r3
 8023d70:	da6a      	bge.n	8023e48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023d72:	1cc2      	adds	r2, r0, #3
 8023d74:	46aa      	mov	sl, r5
 8023d76:	ebaa 0305 	sub.w	r3, sl, r5
 8023d7a:	429e      	cmp	r6, r3
 8023d7c:	dd55      	ble.n	8023e2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8023d7e:	2404      	movs	r4, #4
 8023d80:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8023d84:	fb14 4303 	smlabb	r3, r4, r3, r4
 8023d88:	eb07 0e03 	add.w	lr, r7, r3
 8023d8c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8023d90:	b184      	cbz	r4, 8023db4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8023d92:	2cff      	cmp	r4, #255	; 0xff
 8023d94:	f817 b003 	ldrb.w	fp, [r7, r3]
 8023d98:	d10e      	bne.n	8023db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023d9a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023d9e:	d10b      	bne.n	8023db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023da0:	f802 bc03 	strb.w	fp, [r2, #-3]
 8023da4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8023da8:	f802 3c02 	strb.w	r3, [r2, #-2]
 8023dac:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8023db0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023db4:	3203      	adds	r2, #3
 8023db6:	e7de      	b.n	8023d76 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8023db8:	fb08 f404 	mul.w	r4, r8, r4
 8023dbc:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8023dc0:	1c63      	adds	r3, r4, #1
 8023dc2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8023dc6:	121b      	asrs	r3, r3, #8
 8023dc8:	b29c      	uxth	r4, r3
 8023dca:	43db      	mvns	r3, r3
 8023dcc:	fb1b fb04 	smulbb	fp, fp, r4
 8023dd0:	b2db      	uxtb	r3, r3
 8023dd2:	fb0c bc03 	mla	ip, ip, r3, fp
 8023dd6:	fa1f fc8c 	uxth.w	ip, ip
 8023dda:	f10c 0b01 	add.w	fp, ip, #1
 8023dde:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023de2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8023de6:	fb1b fb03 	smulbb	fp, fp, r3
 8023dea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023dee:	f802 cc03 	strb.w	ip, [r2, #-3]
 8023df2:	f89e c001 	ldrb.w	ip, [lr, #1]
 8023df6:	fb0c bc04 	mla	ip, ip, r4, fp
 8023dfa:	fa1f fc8c 	uxth.w	ip, ip
 8023dfe:	f10c 0b01 	add.w	fp, ip, #1
 8023e02:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023e06:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023e0a:	f802 cc02 	strb.w	ip, [r2, #-2]
 8023e0e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8023e12:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023e16:	fb1c f303 	smulbb	r3, ip, r3
 8023e1a:	fb0e 3304 	mla	r3, lr, r4, r3
 8023e1e:	b29b      	uxth	r3, r3
 8023e20:	1c5c      	adds	r4, r3, #1
 8023e22:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023e26:	121b      	asrs	r3, r3, #8
 8023e28:	e7c2      	b.n	8023db0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8023e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e2c:	3101      	adds	r1, #1
 8023e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023e30:	881b      	ldrh	r3, [r3, #0]
 8023e32:	1b9b      	subs	r3, r3, r6
 8023e34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e38:	4413      	add	r3, r2
 8023e3a:	4418      	add	r0, r3
 8023e3c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8023e40:	1b9b      	subs	r3, r3, r6
 8023e42:	444b      	add	r3, r9
 8023e44:	441d      	add	r5, r3
 8023e46:	e791      	b.n	8023d6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8023e48:	4b05      	ldr	r3, [pc, #20]	; (8023e60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8023e4a:	6818      	ldr	r0, [r3, #0]
 8023e4c:	6803      	ldr	r3, [r0, #0]
 8023e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e50:	4798      	blx	r3
 8023e52:	e770      	b.n	8023d36 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8023e54:	08030cdb 	.word	0x08030cdb
 8023e58:	080313ab 	.word	0x080313ab
 8023e5c:	08030d77 	.word	0x08030d77
 8023e60:	2000bfd0 	.word	0x2000bfd0
 8023e64:	2000bfc8 	.word	0x2000bfc8

08023e68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	4614      	mov	r4, r2
 8023e6e:	880a      	ldrh	r2, [r1, #0]
 8023e70:	b091      	sub	sp, #68	; 0x44
 8023e72:	4680      	mov	r8, r0
 8023e74:	2a01      	cmp	r2, #1
 8023e76:	460e      	mov	r6, r1
 8023e78:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8023e7c:	d005      	beq.n	8023e8a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8023e7e:	4b6d      	ldr	r3, [pc, #436]	; (8024034 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8023e80:	21b5      	movs	r1, #181	; 0xb5
 8023e82:	4a6d      	ldr	r2, [pc, #436]	; (8024038 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8023e84:	486d      	ldr	r0, [pc, #436]	; (802403c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8023e86:	f007 fa1d 	bl	802b2c4 <__assert_func>
 8023e8a:	6820      	ldr	r0, [r4, #0]
 8023e8c:	ad0c      	add	r5, sp, #48	; 0x30
 8023e8e:	6861      	ldr	r1, [r4, #4]
 8023e90:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8024040 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8023e94:	c503      	stmia	r5!, {r0, r1}
 8023e96:	6818      	ldr	r0, [r3, #0]
 8023e98:	ad0e      	add	r5, sp, #56	; 0x38
 8023e9a:	6859      	ldr	r1, [r3, #4]
 8023e9c:	c503      	stmia	r5!, {r0, r1}
 8023e9e:	a80c      	add	r0, sp, #48	; 0x30
 8023ea0:	f7fb f8a2 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023ea4:	4621      	mov	r1, r4
 8023ea6:	a80e      	add	r0, sp, #56	; 0x38
 8023ea8:	f7fb f886 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023eac:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023eb0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023eb4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023eb8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8023ebc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023ec0:	eb08 0401 	add.w	r4, r8, r1
 8023ec4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023ec8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8024044 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8023ecc:	440a      	add	r2, r1
 8023ece:	f8d8 0000 	ldr.w	r0, [r8]
 8023ed2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023ed6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023eda:	4413      	add	r3, r2
 8023edc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023ee0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8023ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8023ee6:	6803      	ldr	r3, [r0, #0]
 8023ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023eec:	4798      	blx	r3
 8023eee:	2801      	cmp	r0, #1
 8023ef0:	d11e      	bne.n	8023f30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8023ef2:	220b      	movs	r2, #11
 8023ef4:	9008      	str	r0, [sp, #32]
 8023ef6:	b2ad      	uxth	r5, r5
 8023ef8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023efc:	9207      	str	r2, [sp, #28]
 8023efe:	4621      	mov	r1, r4
 8023f00:	f8b9 2000 	ldrh.w	r2, [r9]
 8023f04:	9501      	str	r5, [sp, #4]
 8023f06:	9206      	str	r2, [sp, #24]
 8023f08:	2200      	movs	r2, #0
 8023f0a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8023f0e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023f12:	9203      	str	r2, [sp, #12]
 8023f14:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023f18:	9202      	str	r2, [sp, #8]
 8023f1a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023f1e:	9200      	str	r2, [sp, #0]
 8023f20:	4632      	mov	r2, r6
 8023f22:	f8d8 0000 	ldr.w	r0, [r8]
 8023f26:	f7f8 f993 	bl	801c250 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023f2a:	b011      	add	sp, #68	; 0x44
 8023f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f30:	f8d8 0000 	ldr.w	r0, [r8]
 8023f34:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8023f38:	6803      	ldr	r3, [r0, #0]
 8023f3a:	6a1b      	ldr	r3, [r3, #32]
 8023f3c:	4798      	blx	r3
 8023f3e:	f8b9 3000 	ldrh.w	r3, [r9]
 8023f42:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8023f46:	f04f 0e00 	mov.w	lr, #0
 8023f4a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023f4e:	fa1f f987 	uxth.w	r9, r7
 8023f52:	fb01 2303 	mla	r3, r1, r3, r2
 8023f56:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8023f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023f5e:	b289      	uxth	r1, r1
 8023f60:	4418      	add	r0, r3
 8023f62:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f6a:	459e      	cmp	lr, r3
 8023f6c:	da5c      	bge.n	8024028 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8023f6e:	1cc3      	adds	r3, r0, #3
 8023f70:	46a2      	mov	sl, r4
 8023f72:	ebaa 0204 	sub.w	r2, sl, r4
 8023f76:	4295      	cmp	r5, r2
 8023f78:	dd46      	ble.n	8024008 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8023f7a:	f04f 0c03 	mov.w	ip, #3
 8023f7e:	f04f 0b04 	mov.w	fp, #4
 8023f82:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8023f86:	2fff      	cmp	r7, #255	; 0xff
 8023f88:	fb1c b202 	smlabb	r2, ip, r2, fp
 8023f8c:	eb06 0c02 	add.w	ip, r6, r2
 8023f90:	f816 b002 	ldrb.w	fp, [r6, r2]
 8023f94:	d02f      	beq.n	8023ff6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8023f96:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8023f9a:	fb12 f201 	smulbb	r2, r2, r1
 8023f9e:	fb0b 2209 	mla	r2, fp, r9, r2
 8023fa2:	b292      	uxth	r2, r2
 8023fa4:	f102 0b01 	add.w	fp, r2, #1
 8023fa8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023fac:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8023fb0:	fb1b fb01 	smulbb	fp, fp, r1
 8023fb4:	1212      	asrs	r2, r2, #8
 8023fb6:	f803 2c03 	strb.w	r2, [r3, #-3]
 8023fba:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023fbe:	fb02 b209 	mla	r2, r2, r9, fp
 8023fc2:	b292      	uxth	r2, r2
 8023fc4:	f102 0b01 	add.w	fp, r2, #1
 8023fc8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023fcc:	1212      	asrs	r2, r2, #8
 8023fce:	f803 2c02 	strb.w	r2, [r3, #-2]
 8023fd2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8023fd6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8023fda:	fb1c fc01 	smulbb	ip, ip, r1
 8023fde:	fb02 c209 	mla	r2, r2, r9, ip
 8023fe2:	b292      	uxth	r2, r2
 8023fe4:	f102 0c01 	add.w	ip, r2, #1
 8023fe8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023fec:	1212      	asrs	r2, r2, #8
 8023fee:	f803 2c01 	strb.w	r2, [r3, #-1]
 8023ff2:	3303      	adds	r3, #3
 8023ff4:	e7bd      	b.n	8023f72 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8023ff6:	f803 bc03 	strb.w	fp, [r3, #-3]
 8023ffa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023ffe:	f803 2c02 	strb.w	r2, [r3, #-2]
 8024002:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8024006:	e7f2      	b.n	8023fee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8024008:	4b0d      	ldr	r3, [pc, #52]	; (8024040 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 802400a:	f10e 0e01 	add.w	lr, lr, #1
 802400e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024010:	881b      	ldrh	r3, [r3, #0]
 8024012:	1b5b      	subs	r3, r3, r5
 8024014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024018:	4413      	add	r3, r2
 802401a:	4418      	add	r0, r3
 802401c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8024020:	1b5b      	subs	r3, r3, r5
 8024022:	4443      	add	r3, r8
 8024024:	441c      	add	r4, r3
 8024026:	e79f      	b.n	8023f68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8024028:	4b06      	ldr	r3, [pc, #24]	; (8024044 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802402a:	6818      	ldr	r0, [r3, #0]
 802402c:	6803      	ldr	r3, [r0, #0]
 802402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024030:	4798      	blx	r3
 8024032:	e77a      	b.n	8023f2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8024034:	08030be7 	.word	0x08030be7
 8024038:	0803129e 	.word	0x0803129e
 802403c:	08030d77 	.word	0x08030d77
 8024040:	2000bfc8 	.word	0x2000bfc8
 8024044:	2000bfd0 	.word	0x2000bfd0

08024048 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024048:	b570      	push	{r4, r5, r6, lr}
 802404a:	780d      	ldrb	r5, [r1, #0]
 802404c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8024050:	2d01      	cmp	r5, #1
 8024052:	d00d      	beq.n	8024070 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8024054:	d307      	bcc.n	8024066 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8024056:	2d02      	cmp	r5, #2
 8024058:	d10f      	bne.n	802407a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802405a:	4b08      	ldr	r3, [pc, #32]	; (802407c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 802405c:	215a      	movs	r1, #90	; 0x5a
 802405e:	4a08      	ldr	r2, [pc, #32]	; (8024080 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8024060:	4808      	ldr	r0, [pc, #32]	; (8024084 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8024062:	f007 f92f 	bl	802b2c4 <__assert_func>
 8024066:	9404      	str	r4, [sp, #16]
 8024068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802406c:	f7ff be04 	b.w	8023c78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8024070:	9404      	str	r4, [sp, #16]
 8024072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024076:	f7ff bef7 	b.w	8023e68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802407a:	bd70      	pop	{r4, r5, r6, pc}
 802407c:	08030b9c 	.word	0x08030b9c
 8024080:	0803121c 	.word	0x0803121c
 8024084:	08030d77 	.word	0x08030d77

08024088 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8024088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802408c:	b08b      	sub	sp, #44	; 0x2c
 802408e:	460c      	mov	r4, r1
 8024090:	4680      	mov	r8, r0
 8024092:	469a      	mov	sl, r3
 8024094:	6808      	ldr	r0, [r1, #0]
 8024096:	ab06      	add	r3, sp, #24
 8024098:	6849      	ldr	r1, [r1, #4]
 802409a:	c303      	stmia	r3!, {r0, r1}
 802409c:	6810      	ldr	r0, [r2, #0]
 802409e:	ab08      	add	r3, sp, #32
 80240a0:	6851      	ldr	r1, [r2, #4]
 80240a2:	c303      	stmia	r3!, {r0, r1}
 80240a4:	a806      	add	r0, sp, #24
 80240a6:	f7fa ff9f 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80240aa:	4621      	mov	r1, r4
 80240ac:	a808      	add	r0, sp, #32
 80240ae:	4c61      	ldr	r4, [pc, #388]	; (8024234 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80240b0:	f7fa ff82 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80240b4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80240b8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80240bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80240c0:	6820      	ldr	r0, [r4, #0]
 80240c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80240c6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80240ca:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80240ce:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80240d2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80240d6:	440a      	add	r2, r1
 80240d8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80240dc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80240e0:	4413      	add	r3, r2
 80240e2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80240e6:	6803      	ldr	r3, [r0, #0]
 80240e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80240ea:	4798      	blx	r3
 80240ec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80240f0:	d118      	bne.n	8024124 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80240f2:	f010 0f20 	tst.w	r0, #32
 80240f6:	6820      	ldr	r0, [r4, #0]
 80240f8:	d017      	beq.n	802412a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80240fa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80240fe:	b2bf      	uxth	r7, r7
 8024100:	6801      	ldr	r1, [r0, #0]
 8024102:	9402      	str	r4, [sp, #8]
 8024104:	fa1f f489 	uxth.w	r4, r9
 8024108:	f8cd a00c 	str.w	sl, [sp, #12]
 802410c:	9401      	str	r4, [sp, #4]
 802410e:	9700      	str	r7, [sp, #0]
 8024110:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8024114:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8024116:	4641      	mov	r1, r8
 8024118:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802411c:	47a0      	blx	r4
 802411e:	b00b      	add	sp, #44	; 0x2c
 8024120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024128:	e7e5      	b.n	80240f6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802412a:	6803      	ldr	r3, [r0, #0]
 802412c:	6a1b      	ldr	r3, [r3, #32]
 802412e:	4798      	blx	r3
 8024130:	4b41      	ldr	r3, [pc, #260]	; (8024238 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8024132:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8024136:	f04f 0c00 	mov.w	ip, #0
 802413a:	881a      	ldrh	r2, [r3, #0]
 802413c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8024140:	fb04 1202 	mla	r2, r4, r2, r1
 8024144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024148:	4410      	add	r0, r2
 802414a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802414e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8024152:	0092      	lsls	r2, r2, #2
 8024154:	9105      	str	r1, [sp, #20]
 8024156:	9204      	str	r2, [sp, #16]
 8024158:	45cc      	cmp	ip, r9
 802415a:	da65      	bge.n	8024228 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 802415c:	1cc4      	adds	r4, r0, #3
 802415e:	f108 0504 	add.w	r5, r8, #4
 8024162:	f04f 0e00 	mov.w	lr, #0
 8024166:	45be      	cmp	lr, r7
 8024168:	da4d      	bge.n	8024206 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 802416a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802416e:	b181      	cbz	r1, 8024192 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8024170:	29ff      	cmp	r1, #255	; 0xff
 8024172:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8024176:	d111      	bne.n	802419c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8024178:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802417c:	d10e      	bne.n	802419c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802417e:	f804 bc03 	strb.w	fp, [r4, #-3]
 8024182:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8024186:	f804 2c02 	strb.w	r2, [r4, #-2]
 802418a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802418e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8024192:	f10e 0e01 	add.w	lr, lr, #1
 8024196:	3403      	adds	r4, #3
 8024198:	3504      	adds	r5, #4
 802419a:	e7e4      	b.n	8024166 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 802419c:	fb0a f101 	mul.w	r1, sl, r1
 80241a0:	1c4a      	adds	r2, r1, #1
 80241a2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80241a6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80241aa:	1212      	asrs	r2, r2, #8
 80241ac:	b296      	uxth	r6, r2
 80241ae:	43d2      	mvns	r2, r2
 80241b0:	fb1b fb06 	smulbb	fp, fp, r6
 80241b4:	b2d2      	uxtb	r2, r2
 80241b6:	fb01 b102 	mla	r1, r1, r2, fp
 80241ba:	b289      	uxth	r1, r1
 80241bc:	f101 0b01 	add.w	fp, r1, #1
 80241c0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80241c4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80241c8:	fb1b fb02 	smulbb	fp, fp, r2
 80241cc:	1209      	asrs	r1, r1, #8
 80241ce:	f804 1c03 	strb.w	r1, [r4, #-3]
 80241d2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80241d6:	fb01 b106 	mla	r1, r1, r6, fp
 80241da:	b289      	uxth	r1, r1
 80241dc:	f101 0b01 	add.w	fp, r1, #1
 80241e0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80241e4:	1209      	asrs	r1, r1, #8
 80241e6:	f804 1c02 	strb.w	r1, [r4, #-2]
 80241ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80241ee:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80241f2:	fb11 f202 	smulbb	r2, r1, r2
 80241f6:	fb0b 2206 	mla	r2, fp, r6, r2
 80241fa:	b292      	uxth	r2, r2
 80241fc:	1c56      	adds	r6, r2, #1
 80241fe:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024202:	1212      	asrs	r2, r2, #8
 8024204:	e7c3      	b.n	802418e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8024206:	881a      	ldrh	r2, [r3, #0]
 8024208:	f10c 0c01 	add.w	ip, ip, #1
 802420c:	9905      	ldr	r1, [sp, #20]
 802420e:	1bd2      	subs	r2, r2, r7
 8024210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024214:	440a      	add	r2, r1
 8024216:	9904      	ldr	r1, [sp, #16]
 8024218:	4410      	add	r0, r2
 802421a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802421e:	1bd2      	subs	r2, r2, r7
 8024220:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8024224:	4490      	add	r8, r2
 8024226:	e797      	b.n	8024158 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8024228:	4b02      	ldr	r3, [pc, #8]	; (8024234 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802422a:	6818      	ldr	r0, [r3, #0]
 802422c:	6803      	ldr	r3, [r0, #0]
 802422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024230:	4798      	blx	r3
 8024232:	e774      	b.n	802411e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8024234:	2000bfd0 	.word	0x2000bfd0
 8024238:	2000bfc8 	.word	0x2000bfc8

0802423c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802423c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024240:	b085      	sub	sp, #20
 8024242:	4606      	mov	r6, r0
 8024244:	460c      	mov	r4, r1
 8024246:	4691      	mov	r9, r2
 8024248:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802424c:	4698      	mov	r8, r3
 802424e:	b385      	cbz	r5, 80242b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8024250:	4608      	mov	r0, r1
 8024252:	f7fd fae5 	bl	8021820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024256:	4607      	mov	r7, r0
 8024258:	4620      	mov	r0, r4
 802425a:	f7fd fb1b 	bl	8021894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802425e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8024262:	4620      	mov	r0, r4
 8024264:	f8ad 9008 	strh.w	r9, [sp, #8]
 8024268:	f8ad 800a 	strh.w	r8, [sp, #10]
 802426c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8024270:	f7fd fc62 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024274:	2801      	cmp	r0, #1
 8024276:	d00f      	beq.n	8024298 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024278:	4620      	mov	r0, r4
 802427a:	f7fd fc5d 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802427e:	2802      	cmp	r0, #2
 8024280:	d00a      	beq.n	8024298 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024282:	4620      	mov	r0, r4
 8024284:	f7fd fc58 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024288:	280b      	cmp	r0, #11
 802428a:	d005      	beq.n	8024298 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802428c:	4b1b      	ldr	r3, [pc, #108]	; (80242fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 802428e:	2142      	movs	r1, #66	; 0x42
 8024290:	4a1b      	ldr	r2, [pc, #108]	; (8024300 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8024292:	481c      	ldr	r0, [pc, #112]	; (8024304 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8024294:	f007 f816 	bl	802b2c4 <__assert_func>
 8024298:	4620      	mov	r0, r4
 802429a:	f7fd fc4d 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802429e:	2802      	cmp	r0, #2
 80242a0:	4620      	mov	r0, r4
 80242a2:	d109      	bne.n	80242b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 80242a4:	f7fd fbc4 	bl	8021a30 <_ZNK8touchgfx6Bitmap7getDataEv>
 80242a8:	462b      	mov	r3, r5
 80242aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80242ac:	a902      	add	r1, sp, #8
 80242ae:	f7ff feeb 	bl	8024088 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80242b2:	b005      	add	sp, #20
 80242b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80242b8:	f7fd fc3e 	bl	8021b38 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80242bc:	280b      	cmp	r0, #11
 80242be:	d10e      	bne.n	80242de <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80242c0:	4620      	mov	r0, r4
 80242c2:	f7fd fbb5 	bl	8021a30 <_ZNK8touchgfx6Bitmap7getDataEv>
 80242c6:	4606      	mov	r6, r0
 80242c8:	4620      	mov	r0, r4
 80242ca:	f7fd fbe3 	bl	8021a94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80242ce:	9500      	str	r5, [sp, #0]
 80242d0:	4601      	mov	r1, r0
 80242d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242d4:	aa02      	add	r2, sp, #8
 80242d6:	4630      	mov	r0, r6
 80242d8:	f7ff feb6 	bl	8024048 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80242dc:	e7e9      	b.n	80242b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80242de:	6833      	ldr	r3, [r6, #0]
 80242e0:	4620      	mov	r0, r4
 80242e2:	691f      	ldr	r7, [r3, #16]
 80242e4:	f7fd fba4 	bl	8021a30 <_ZNK8touchgfx6Bitmap7getDataEv>
 80242e8:	2300      	movs	r3, #0
 80242ea:	4601      	mov	r1, r0
 80242ec:	aa02      	add	r2, sp, #8
 80242ee:	4630      	mov	r0, r6
 80242f0:	e9cd 5300 	strd	r5, r3, [sp]
 80242f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242f6:	47b8      	blx	r7
 80242f8:	e7db      	b.n	80242b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80242fa:	bf00      	nop
 80242fc:	08030c35 	.word	0x08030c35
 8024300:	08031327 	.word	0x08031327
 8024304:	08030d77 	.word	0x08030d77

08024308 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024308:	b570      	push	{r4, r5, r6, lr}
 802430a:	9d04      	ldr	r5, [sp, #16]
 802430c:	460c      	mov	r4, r1
 802430e:	4619      	mov	r1, r3
 8024310:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8024314:	2a0c      	cmp	r2, #12
 8024316:	d826      	bhi.n	8024366 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8024318:	e8df f002 	tbb	[pc, r2]
 802431c:	200e1407 	.word	0x200e1407
 8024320:	20202020 	.word	0x20202020
 8024324:	20202020 	.word	0x20202020
 8024328:	20          	.byte	0x20
 8024329:	00          	.byte	0x00
 802432a:	4b0f      	ldr	r3, [pc, #60]	; (8024368 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 802432c:	f240 117f 	movw	r1, #383	; 0x17f
 8024330:	4a0e      	ldr	r2, [pc, #56]	; (802436c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8024332:	480f      	ldr	r0, [pc, #60]	; (8024370 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8024334:	f006 ffc6 	bl	802b2c4 <__assert_func>
 8024338:	462a      	mov	r2, r5
 802433a:	4620      	mov	r0, r4
 802433c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024340:	f7ff bea2 	b.w	8024088 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024344:	6802      	ldr	r2, [r0, #0]
 8024346:	2600      	movs	r6, #0
 8024348:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802434c:	6916      	ldr	r6, [r2, #16]
 802434e:	462b      	mov	r3, r5
 8024350:	460a      	mov	r2, r1
 8024352:	4621      	mov	r1, r4
 8024354:	46b4      	mov	ip, r6
 8024356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802435a:	4760      	bx	ip
 802435c:	4b05      	ldr	r3, [pc, #20]	; (8024374 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802435e:	f240 1191 	movw	r1, #401	; 0x191
 8024362:	4a02      	ldr	r2, [pc, #8]	; (802436c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8024364:	e7e5      	b.n	8024332 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8024366:	bd70      	pop	{r4, r5, r6, pc}
 8024368:	08030f50 	.word	0x08030f50
 802436c:	0803160f 	.word	0x0803160f
 8024370:	08030d77 	.word	0x08030d77
 8024374:	08030f91 	.word	0x08030f91

08024378 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8024378:	b158      	cbz	r0, 8024392 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802437a:	2902      	cmp	r1, #2
 802437c:	d00f      	beq.n	802439e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 802437e:	2903      	cmp	r1, #3
 8024380:	d010      	beq.n	80243a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8024382:	2901      	cmp	r1, #1
 8024384:	d101      	bne.n	802438a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8024386:	2001      	movs	r0, #1
 8024388:	4770      	bx	lr
 802438a:	4b08      	ldr	r3, [pc, #32]	; (80243ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 802438c:	8819      	ldrh	r1, [r3, #0]
 802438e:	4248      	negs	r0, r1
 8024390:	4770      	bx	lr
 8024392:	2902      	cmp	r1, #2
 8024394:	d006      	beq.n	80243a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8024396:	2903      	cmp	r1, #3
 8024398:	d0f7      	beq.n	802438a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802439a:	2901      	cmp	r1, #1
 802439c:	d1f3      	bne.n	8024386 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 802439e:	4b03      	ldr	r3, [pc, #12]	; (80243ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80243a0:	8818      	ldrh	r0, [r3, #0]
 80243a2:	4770      	bx	lr
 80243a4:	f04f 30ff 	mov.w	r0, #4294967295
 80243a8:	4770      	bx	lr
 80243aa:	bf00      	nop
 80243ac:	2000bfc8 	.word	0x2000bfc8

080243b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80243b0:	b170      	cbz	r0, 80243d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80243b2:	2902      	cmp	r1, #2
 80243b4:	d012      	beq.n	80243dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80243b6:	2903      	cmp	r1, #3
 80243b8:	d006      	beq.n	80243c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80243ba:	2901      	cmp	r1, #1
 80243bc:	d001      	beq.n	80243c2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80243be:	2001      	movs	r0, #1
 80243c0:	4770      	bx	lr
 80243c2:	4b08      	ldr	r3, [pc, #32]	; (80243e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80243c4:	8818      	ldrh	r0, [r3, #0]
 80243c6:	4770      	bx	lr
 80243c8:	4b06      	ldr	r3, [pc, #24]	; (80243e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80243ca:	8818      	ldrh	r0, [r3, #0]
 80243cc:	4240      	negs	r0, r0
 80243ce:	4770      	bx	lr
 80243d0:	2902      	cmp	r1, #2
 80243d2:	d0f9      	beq.n	80243c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80243d4:	2903      	cmp	r1, #3
 80243d6:	d0f2      	beq.n	80243be <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80243d8:	2901      	cmp	r1, #1
 80243da:	d1f2      	bne.n	80243c2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80243dc:	f04f 30ff 	mov.w	r0, #4294967295
 80243e0:	4770      	bx	lr
 80243e2:	bf00      	nop
 80243e4:	2000bfc8 	.word	0x2000bfc8

080243e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80243e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243ec:	b095      	sub	sp, #84	; 0x54
 80243ee:	9109      	str	r1, [sp, #36]	; 0x24
 80243f0:	a910      	add	r1, sp, #64	; 0x40
 80243f2:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 80243f6:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 80243fa:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80243fe:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8024402:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 8024406:	e881 000c 	stmia.w	r1, {r2, r3}
 802440a:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 802440e:	9306      	str	r3, [sp, #24]
 8024410:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8024414:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8024418:	930e      	str	r3, [sp, #56]	; 0x38
 802441a:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 802441e:	798f      	ldrb	r7, [r1, #6]
 8024420:	930a      	str	r3, [sp, #40]	; 0x28
 8024422:	7b4b      	ldrb	r3, [r1, #13]
 8024424:	0158      	lsls	r0, r3, #5
 8024426:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802442a:	4338      	orrs	r0, r7
 802442c:	9008      	str	r0, [sp, #32]
 802442e:	f000 8174 	beq.w	802471a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024432:	011b      	lsls	r3, r3, #4
 8024434:	79c8      	ldrb	r0, [r1, #7]
 8024436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802443a:	4303      	orrs	r3, r0
 802443c:	9307      	str	r3, [sp, #28]
 802443e:	f000 816c 	beq.w	802471a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024442:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8024446:	b29b      	uxth	r3, r3
 8024448:	2e00      	cmp	r6, #0
 802444a:	f000 8112 	beq.w	8024672 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 802444e:	1af6      	subs	r6, r6, r3
 8024450:	b2b6      	uxth	r6, r6
 8024452:	0433      	lsls	r3, r6, #16
 8024454:	d502      	bpl.n	802445c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024456:	1bad      	subs	r5, r5, r6
 8024458:	2600      	movs	r6, #0
 802445a:	b22d      	sxth	r5, r5
 802445c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024460:	a810      	add	r0, sp, #64	; 0x40
 8024462:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8024466:	428d      	cmp	r5, r1
 8024468:	b28b      	uxth	r3, r1
 802446a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 802446e:	bfbf      	itttt	lt
 8024470:	18f6      	addlt	r6, r6, r3
 8024472:	1b75      	sublt	r5, r6, r5
 8024474:	b2ae      	uxthlt	r6, r5
 8024476:	460d      	movlt	r5, r1
 8024478:	8891      	ldrh	r1, [r2, #4]
 802447a:	440b      	add	r3, r1
 802447c:	4629      	mov	r1, r5
 802447e:	b21b      	sxth	r3, r3
 8024480:	930d      	str	r3, [sp, #52]	; 0x34
 8024482:	88d3      	ldrh	r3, [r2, #6]
 8024484:	9a06      	ldr	r2, [sp, #24]
 8024486:	449a      	add	sl, r3
 8024488:	fa0f f38a 	sxth.w	r3, sl
 802448c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8024490:	930c      	str	r3, [sp, #48]	; 0x30
 8024492:	4bb8      	ldr	r3, [pc, #736]	; (8024774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8024494:	f893 b000 	ldrb.w	fp, [r3]
 8024498:	f10b 3cff 	add.w	ip, fp, #4294967295
 802449c:	f1dc 0300 	rsbs	r3, ip, #0
 80244a0:	eb43 030c 	adc.w	r3, r3, ip
 80244a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80244a6:	464b      	mov	r3, r9
 80244a8:	f7fa fc78 	bl	801ed9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80244ac:	4629      	mov	r1, r5
 80244ae:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 80244b2:	464b      	mov	r3, r9
 80244b4:	9a06      	ldr	r2, [sp, #24]
 80244b6:	a810      	add	r0, sp, #64	; 0x40
 80244b8:	f7fa fc88 	bl	801edcc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80244bc:	a914      	add	r1, sp, #80	; 0x50
 80244be:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80244c2:	a813      	add	r0, sp, #76	; 0x4c
 80244c4:	f7fa fd62 	bl	801ef8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80244c8:	f1b9 0f00 	cmp.w	r9, #0
 80244cc:	f040 80d4 	bne.w	8024678 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 80244d0:	f1bb 0f01 	cmp.w	fp, #1
 80244d4:	f040 80d8 	bne.w	8024688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80244d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244da:	2b00      	cmp	r3, #0
 80244dc:	f040 8122 	bne.w	8024724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 80244e0:	4ba5      	ldr	r3, [pc, #660]	; (8024778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80244e2:	6818      	ldr	r0, [r3, #0]
 80244e4:	6803      	ldr	r3, [r0, #0]
 80244e6:	6a1b      	ldr	r3, [r3, #32]
 80244e8:	4798      	blx	r3
 80244ea:	4aa4      	ldr	r2, [pc, #656]	; (802477c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80244ec:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80244f0:	8811      	ldrh	r1, [r2, #0]
 80244f2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80244f6:	fb01 2303 	mla	r3, r1, r3, r2
 80244fa:	2201      	movs	r2, #1
 80244fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024500:	4590      	cmp	r8, r2
 8024502:	4403      	add	r3, r0
 8024504:	9307      	str	r3, [sp, #28]
 8024506:	fa02 f308 	lsl.w	r3, r2, r8
 802450a:	f103 33ff 	add.w	r3, r3, #4294967295
 802450e:	b2db      	uxtb	r3, r3
 8024510:	930f      	str	r3, [sp, #60]	; 0x3c
 8024512:	f000 8109 	beq.w	8024728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 8024516:	f1b8 0f02 	cmp.w	r8, #2
 802451a:	f000 813e 	beq.w	802479a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 802451e:	f1b8 0f04 	cmp.w	r8, #4
 8024522:	f000 8132 	beq.w	802478a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8024526:	b906      	cbnz	r6, 802452a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8024528:	b174      	cbz	r4, 8024548 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802452a:	fb17 6304 	smlabb	r3, r7, r4, r6
 802452e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024530:	ebaa 0a04 	sub.w	sl, sl, r4
 8024534:	fb13 f308 	smulbb	r3, r3, r8
 8024538:	fa1f fa8a 	uxth.w	sl, sl
 802453c:	b29b      	uxth	r3, r3
 802453e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8024542:	f003 0407 	and.w	r4, r3, #7
 8024546:	9124      	str	r1, [sp, #144]	; 0x90
 8024548:	4649      	mov	r1, r9
 802454a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802454c:	f7ff ff14 	bl	8024378 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8024550:	4649      	mov	r1, r9
 8024552:	4683      	mov	fp, r0
 8024554:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024556:	f7ff ff2b 	bl	80243b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802455a:	9906      	ldr	r1, [sp, #24]
 802455c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802455e:	1bad      	subs	r5, r5, r6
 8024560:	1a5b      	subs	r3, r3, r1
 8024562:	459a      	cmp	sl, r3
 8024564:	bfa8      	it	ge
 8024566:	469a      	movge	sl, r3
 8024568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802456a:	1b5d      	subs	r5, r3, r5
 802456c:	9b08      	ldr	r3, [sp, #32]
 802456e:	429d      	cmp	r5, r3
 8024570:	bfd4      	ite	le
 8024572:	ebc6 0605 	rsble	r6, r6, r5
 8024576:	ebc6 0603 	rsbgt	r6, r6, r3
 802457a:	1bbf      	subs	r7, r7, r6
 802457c:	fb0b 0016 	mls	r0, fp, r6, r0
 8024580:	fb08 f307 	mul.w	r3, r8, r7
 8024584:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024588:	9308      	str	r3, [sp, #32]
 802458a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802458c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8024590:	930b      	str	r3, [sp, #44]	; 0x2c
 8024592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024594:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024598:	930c      	str	r3, [sp, #48]	; 0x30
 802459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802459c:	b2db      	uxtb	r3, r3
 802459e:	930d      	str	r3, [sp, #52]	; 0x34
 80245a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80245a2:	7819      	ldrb	r1, [r3, #0]
 80245a4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80245a8:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 80245ac:	4121      	asrs	r1, r4
 80245ae:	9306      	str	r3, [sp, #24]
 80245b0:	fb03 0b0b 	mla	fp, r3, fp, r0
 80245b4:	b2c9      	uxtb	r1, r1
 80245b6:	f1ba 0f00 	cmp.w	sl, #0
 80245ba:	f340 80d1 	ble.w	8024760 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80245be:	46b6      	mov	lr, r6
 80245c0:	9807      	ldr	r0, [sp, #28]
 80245c2:	f1be 0f00 	cmp.w	lr, #0
 80245c6:	f340 80b8 	ble.w	802473a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80245ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245cc:	400b      	ands	r3, r1
 80245ce:	d03e      	beq.n	802464e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80245d0:	fb13 f302 	smulbb	r3, r3, r2
 80245d4:	2bfe      	cmp	r3, #254	; 0xfe
 80245d6:	dd03      	ble.n	80245e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 80245d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80245da:	2dff      	cmp	r5, #255	; 0xff
 80245dc:	f000 80a6 	beq.w	802472c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80245e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80245e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80245e4:	fb15 f303 	smulbb	r3, r5, r3
 80245e8:	b29b      	uxth	r3, r3
 80245ea:	1c5d      	adds	r5, r3, #1
 80245ec:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80245f0:	7805      	ldrb	r5, [r0, #0]
 80245f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245f6:	fa1f fc83 	uxth.w	ip, r3
 80245fa:	43db      	mvns	r3, r3
 80245fc:	fb17 f90c 	smulbb	r9, r7, ip
 8024600:	b2db      	uxtb	r3, r3
 8024602:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024604:	fb05 9503 	mla	r5, r5, r3, r9
 8024608:	b2ad      	uxth	r5, r5
 802460a:	f105 0901 	add.w	r9, r5, #1
 802460e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024612:	fb17 f90c 	smulbb	r9, r7, ip
 8024616:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024618:	122d      	asrs	r5, r5, #8
 802461a:	fb17 fc0c 	smulbb	ip, r7, ip
 802461e:	7005      	strb	r5, [r0, #0]
 8024620:	7845      	ldrb	r5, [r0, #1]
 8024622:	fb05 9503 	mla	r5, r5, r3, r9
 8024626:	b2ad      	uxth	r5, r5
 8024628:	f105 0901 	add.w	r9, r5, #1
 802462c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8024630:	122d      	asrs	r5, r5, #8
 8024632:	7045      	strb	r5, [r0, #1]
 8024634:	7885      	ldrb	r5, [r0, #2]
 8024636:	fb05 cc03 	mla	ip, r5, r3, ip
 802463a:	fa1f fc8c 	uxth.w	ip, ip
 802463e:	f10c 0301 	add.w	r3, ip, #1
 8024642:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024646:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802464a:	f880 c002 	strb.w	ip, [r0, #2]
 802464e:	4444      	add	r4, r8
 8024650:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024654:	b2a4      	uxth	r4, r4
 8024656:	2c07      	cmp	r4, #7
 8024658:	bf89      	itett	hi
 802465a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 802465c:	fa41 f108 	asrls.w	r1, r1, r8
 8024660:	2400      	movhi	r4, #0
 8024662:	7859      	ldrbhi	r1, [r3, #1]
 8024664:	bf8a      	itet	hi
 8024666:	3301      	addhi	r3, #1
 8024668:	b2c9      	uxtbls	r1, r1
 802466a:	9324      	strhi	r3, [sp, #144]	; 0x90
 802466c:	9b06      	ldr	r3, [sp, #24]
 802466e:	4418      	add	r0, r3
 8024670:	e7a7      	b.n	80245c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8024672:	441d      	add	r5, r3
 8024674:	b22d      	sxth	r5, r5
 8024676:	e6f1      	b.n	802445c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024678:	f1b9 0f01 	cmp.w	r9, #1
 802467c:	f47f af2c 	bne.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024680:	f1bb 0f01 	cmp.w	fp, #1
 8024684:	f47f af28 	bne.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024688:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8024778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802468c:	f8db 0000 	ldr.w	r0, [fp]
 8024690:	6803      	ldr	r3, [r0, #0]
 8024692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024694:	4798      	blx	r3
 8024696:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802469a:	465a      	mov	r2, fp
 802469c:	d006      	beq.n	80246ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 802469e:	f1b8 0f04 	cmp.w	r8, #4
 80246a2:	d13d      	bne.n	8024720 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 80246a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80246a6:	3300      	adds	r3, #0
 80246a8:	bf18      	it	ne
 80246aa:	2301      	movne	r3, #1
 80246ac:	05c0      	lsls	r0, r0, #23
 80246ae:	d567      	bpl.n	8024780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80246b0:	f1b8 0f08 	cmp.w	r8, #8
 80246b4:	d164      	bne.n	8024780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	bf0c      	ite	eq
 80246ba:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80246be:	2180      	movne	r1, #128	; 0x80
 80246c0:	2e00      	cmp	r6, #0
 80246c2:	f47f af09 	bne.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80246c6:	2c00      	cmp	r4, #0
 80246c8:	f47f af06 	bne.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80246cc:	9b08      	ldr	r3, [sp, #32]
 80246ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80246d0:	442b      	add	r3, r5
 80246d2:	4283      	cmp	r3, r0
 80246d4:	f73f af00 	bgt.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80246d8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 80246dc:	4403      	add	r3, r0
 80246de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80246e0:	4283      	cmp	r3, r0
 80246e2:	f73f aef9 	bgt.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80246e6:	f1b8 0f08 	cmp.w	r8, #8
 80246ea:	6810      	ldr	r0, [r2, #0]
 80246ec:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80246f0:	bf18      	it	ne
 80246f2:	3701      	addne	r7, #1
 80246f4:	6804      	ldr	r4, [r0, #0]
 80246f6:	9105      	str	r1, [sp, #20]
 80246f8:	bf18      	it	ne
 80246fa:	f027 0701 	bicne.w	r7, r7, #1
 80246fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024700:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8024704:	bf18      	it	ne
 8024706:	b2bf      	uxthne	r7, r7
 8024708:	9104      	str	r1, [sp, #16]
 802470a:	9926      	ldr	r1, [sp, #152]	; 0x98
 802470c:	e9cd 7a00 	strd	r7, sl, [sp]
 8024710:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8024714:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024716:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8024718:	47a0      	blx	r4
 802471a:	b015      	add	sp, #84	; 0x54
 802471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024720:	2300      	movs	r3, #0
 8024722:	e7c3      	b.n	80246ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8024724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024726:	e6e0      	b.n	80244ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8024728:	22ff      	movs	r2, #255	; 0xff
 802472a:	e6fc      	b.n	8024526 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802472c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802472e:	7003      	strb	r3, [r0, #0]
 8024730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024732:	7043      	strb	r3, [r0, #1]
 8024734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024736:	7083      	strb	r3, [r0, #2]
 8024738:	e789      	b.n	802464e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802473a:	9b08      	ldr	r3, [sp, #32]
 802473c:	b153      	cbz	r3, 8024754 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 802473e:	441c      	add	r4, r3
 8024740:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024742:	b2a4      	uxth	r4, r4
 8024744:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8024748:	f004 0407 	and.w	r4, r4, #7
 802474c:	7819      	ldrb	r1, [r3, #0]
 802474e:	9324      	str	r3, [sp, #144]	; 0x90
 8024750:	4121      	asrs	r1, r4
 8024752:	b2c9      	uxtb	r1, r1
 8024754:	9b07      	ldr	r3, [sp, #28]
 8024756:	f10a 3aff 	add.w	sl, sl, #4294967295
 802475a:	445b      	add	r3, fp
 802475c:	9307      	str	r3, [sp, #28]
 802475e:	e72a      	b.n	80245b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8024760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024762:	2b00      	cmp	r3, #0
 8024764:	d1d9      	bne.n	802471a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024766:	4b04      	ldr	r3, [pc, #16]	; (8024778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8024768:	6818      	ldr	r0, [r3, #0]
 802476a:	6803      	ldr	r3, [r0, #0]
 802476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802476e:	4798      	blx	r3
 8024770:	e7d3      	b.n	802471a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024772:	bf00      	nop
 8024774:	2000bfc6 	.word	0x2000bfc6
 8024778:	2000bfd0 	.word	0x2000bfd0
 802477c:	2000bfc8 	.word	0x2000bfc8
 8024780:	2b00      	cmp	r3, #0
 8024782:	f43f aea9 	beq.w	80244d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024786:	2180      	movs	r1, #128	; 0x80
 8024788:	e79a      	b.n	80246c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 802478a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802478c:	b11b      	cbz	r3, 8024796 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 802478e:	07fb      	lsls	r3, r7, #31
 8024790:	d501      	bpl.n	8024796 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8024792:	3701      	adds	r7, #1
 8024794:	b2bf      	uxth	r7, r7
 8024796:	2211      	movs	r2, #17
 8024798:	e6c5      	b.n	8024526 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802479a:	2255      	movs	r2, #85	; 0x55
 802479c:	e6c3      	b.n	8024526 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802479e:	bf00      	nop

080247a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80247a0:	b538      	push	{r3, r4, r5, lr}
 80247a2:	4c15      	ldr	r4, [pc, #84]	; (80247f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80247a4:	4605      	mov	r5, r0
 80247a6:	7823      	ldrb	r3, [r4, #0]
 80247a8:	f3bf 8f5b 	dmb	ish
 80247ac:	07da      	lsls	r2, r3, #31
 80247ae:	d40b      	bmi.n	80247c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80247b0:	4620      	mov	r0, r4
 80247b2:	f006 fd5e 	bl	802b272 <__cxa_guard_acquire>
 80247b6:	b138      	cbz	r0, 80247c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80247b8:	4620      	mov	r0, r4
 80247ba:	f006 fd66 	bl	802b28a <__cxa_guard_release>
 80247be:	4a0f      	ldr	r2, [pc, #60]	; (80247fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80247c0:	490f      	ldr	r1, [pc, #60]	; (8024800 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80247c2:	4810      	ldr	r0, [pc, #64]	; (8024804 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80247c4:	f006 fd4b 	bl	802b25e <__aeabi_atexit>
 80247c8:	4c0f      	ldr	r4, [pc, #60]	; (8024808 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80247ca:	7823      	ldrb	r3, [r4, #0]
 80247cc:	f3bf 8f5b 	dmb	ish
 80247d0:	07db      	lsls	r3, r3, #31
 80247d2:	d40b      	bmi.n	80247ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80247d4:	4620      	mov	r0, r4
 80247d6:	f006 fd4c 	bl	802b272 <__cxa_guard_acquire>
 80247da:	b138      	cbz	r0, 80247ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80247dc:	4620      	mov	r0, r4
 80247de:	f006 fd54 	bl	802b28a <__cxa_guard_release>
 80247e2:	4a06      	ldr	r2, [pc, #24]	; (80247fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80247e4:	4909      	ldr	r1, [pc, #36]	; (802480c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80247e6:	480a      	ldr	r0, [pc, #40]	; (8024810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80247e8:	f006 fd39 	bl	802b25e <__aeabi_atexit>
 80247ec:	4b05      	ldr	r3, [pc, #20]	; (8024804 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80247ee:	612b      	str	r3, [r5, #16]
 80247f0:	4b07      	ldr	r3, [pc, #28]	; (8024810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80247f2:	616b      	str	r3, [r5, #20]
 80247f4:	bd38      	pop	{r3, r4, r5, pc}
 80247f6:	bf00      	nop
 80247f8:	2000c0dc 	.word	0x2000c0dc
 80247fc:	20000000 	.word	0x20000000
 8024800:	080233d7 	.word	0x080233d7
 8024804:	200000c8 	.word	0x200000c8
 8024808:	2000c0e0 	.word	0x2000c0e0
 802480c:	080233d5 	.word	0x080233d5
 8024810:	200000cc 	.word	0x200000cc

08024814 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024814:	b538      	push	{r3, r4, r5, lr}
 8024816:	4c15      	ldr	r4, [pc, #84]	; (802486c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024818:	4605      	mov	r5, r0
 802481a:	7823      	ldrb	r3, [r4, #0]
 802481c:	f3bf 8f5b 	dmb	ish
 8024820:	07da      	lsls	r2, r3, #31
 8024822:	d40b      	bmi.n	802483c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024824:	4620      	mov	r0, r4
 8024826:	f006 fd24 	bl	802b272 <__cxa_guard_acquire>
 802482a:	b138      	cbz	r0, 802483c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802482c:	4620      	mov	r0, r4
 802482e:	f006 fd2c 	bl	802b28a <__cxa_guard_release>
 8024832:	4a0f      	ldr	r2, [pc, #60]	; (8024870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024834:	490f      	ldr	r1, [pc, #60]	; (8024874 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024836:	4810      	ldr	r0, [pc, #64]	; (8024878 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024838:	f006 fd11 	bl	802b25e <__aeabi_atexit>
 802483c:	4c0f      	ldr	r4, [pc, #60]	; (802487c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802483e:	7823      	ldrb	r3, [r4, #0]
 8024840:	f3bf 8f5b 	dmb	ish
 8024844:	07db      	lsls	r3, r3, #31
 8024846:	d40b      	bmi.n	8024860 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024848:	4620      	mov	r0, r4
 802484a:	f006 fd12 	bl	802b272 <__cxa_guard_acquire>
 802484e:	b138      	cbz	r0, 8024860 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024850:	4620      	mov	r0, r4
 8024852:	f006 fd1a 	bl	802b28a <__cxa_guard_release>
 8024856:	4a06      	ldr	r2, [pc, #24]	; (8024870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024858:	4909      	ldr	r1, [pc, #36]	; (8024880 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802485a:	480a      	ldr	r0, [pc, #40]	; (8024884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802485c:	f006 fcff 	bl	802b25e <__aeabi_atexit>
 8024860:	4b05      	ldr	r3, [pc, #20]	; (8024878 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024862:	60ab      	str	r3, [r5, #8]
 8024864:	4b07      	ldr	r3, [pc, #28]	; (8024884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024866:	60eb      	str	r3, [r5, #12]
 8024868:	bd38      	pop	{r3, r4, r5, pc}
 802486a:	bf00      	nop
 802486c:	2000c0bc 	.word	0x2000c0bc
 8024870:	20000000 	.word	0x20000000
 8024874:	080233db 	.word	0x080233db
 8024878:	200000a8 	.word	0x200000a8
 802487c:	2000c0c0 	.word	0x2000c0c0
 8024880:	080233d9 	.word	0x080233d9
 8024884:	200000ac 	.word	0x200000ac

08024888 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8024888:	b510      	push	{r4, lr}
 802488a:	4604      	mov	r4, r0
 802488c:	f7ff ff88 	bl	80247a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024890:	4620      	mov	r0, r4
 8024892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024896:	f7ff bfbd 	b.w	8024814 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802489c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802489c:	b538      	push	{r3, r4, r5, lr}
 802489e:	4c15      	ldr	r4, [pc, #84]	; (80248f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80248a0:	4605      	mov	r5, r0
 80248a2:	7823      	ldrb	r3, [r4, #0]
 80248a4:	f3bf 8f5b 	dmb	ish
 80248a8:	07da      	lsls	r2, r3, #31
 80248aa:	d40b      	bmi.n	80248c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80248ac:	4620      	mov	r0, r4
 80248ae:	f006 fce0 	bl	802b272 <__cxa_guard_acquire>
 80248b2:	b138      	cbz	r0, 80248c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80248b4:	4620      	mov	r0, r4
 80248b6:	f006 fce8 	bl	802b28a <__cxa_guard_release>
 80248ba:	4a0f      	ldr	r2, [pc, #60]	; (80248f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80248bc:	490f      	ldr	r1, [pc, #60]	; (80248fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80248be:	4810      	ldr	r0, [pc, #64]	; (8024900 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80248c0:	f006 fccd 	bl	802b25e <__aeabi_atexit>
 80248c4:	4c0f      	ldr	r4, [pc, #60]	; (8024904 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80248c6:	7823      	ldrb	r3, [r4, #0]
 80248c8:	f3bf 8f5b 	dmb	ish
 80248cc:	07db      	lsls	r3, r3, #31
 80248ce:	d40b      	bmi.n	80248e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80248d0:	4620      	mov	r0, r4
 80248d2:	f006 fcce 	bl	802b272 <__cxa_guard_acquire>
 80248d6:	b138      	cbz	r0, 80248e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80248d8:	4620      	mov	r0, r4
 80248da:	f006 fcd6 	bl	802b28a <__cxa_guard_release>
 80248de:	4a06      	ldr	r2, [pc, #24]	; (80248f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80248e0:	4909      	ldr	r1, [pc, #36]	; (8024908 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80248e2:	480a      	ldr	r0, [pc, #40]	; (802490c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80248e4:	f006 fcbb 	bl	802b25e <__aeabi_atexit>
 80248e8:	4b05      	ldr	r3, [pc, #20]	; (8024900 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80248ea:	622b      	str	r3, [r5, #32]
 80248ec:	4b07      	ldr	r3, [pc, #28]	; (802490c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80248ee:	626b      	str	r3, [r5, #36]	; 0x24
 80248f0:	bd38      	pop	{r3, r4, r5, pc}
 80248f2:	bf00      	nop
 80248f4:	2000c0e4 	.word	0x2000c0e4
 80248f8:	20000000 	.word	0x20000000
 80248fc:	080233cf 	.word	0x080233cf
 8024900:	200000d0 	.word	0x200000d0
 8024904:	2000c0e8 	.word	0x2000c0e8
 8024908:	080233cd 	.word	0x080233cd
 802490c:	200000d4 	.word	0x200000d4

08024910 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024910:	b538      	push	{r3, r4, r5, lr}
 8024912:	4c15      	ldr	r4, [pc, #84]	; (8024968 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024914:	4605      	mov	r5, r0
 8024916:	7823      	ldrb	r3, [r4, #0]
 8024918:	f3bf 8f5b 	dmb	ish
 802491c:	07da      	lsls	r2, r3, #31
 802491e:	d40b      	bmi.n	8024938 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024920:	4620      	mov	r0, r4
 8024922:	f006 fca6 	bl	802b272 <__cxa_guard_acquire>
 8024926:	b138      	cbz	r0, 8024938 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024928:	4620      	mov	r0, r4
 802492a:	f006 fcae 	bl	802b28a <__cxa_guard_release>
 802492e:	4a0f      	ldr	r2, [pc, #60]	; (802496c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024930:	490f      	ldr	r1, [pc, #60]	; (8024970 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024932:	4810      	ldr	r0, [pc, #64]	; (8024974 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024934:	f006 fc93 	bl	802b25e <__aeabi_atexit>
 8024938:	4c0f      	ldr	r4, [pc, #60]	; (8024978 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802493a:	7823      	ldrb	r3, [r4, #0]
 802493c:	f3bf 8f5b 	dmb	ish
 8024940:	07db      	lsls	r3, r3, #31
 8024942:	d40b      	bmi.n	802495c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024944:	4620      	mov	r0, r4
 8024946:	f006 fc94 	bl	802b272 <__cxa_guard_acquire>
 802494a:	b138      	cbz	r0, 802495c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802494c:	4620      	mov	r0, r4
 802494e:	f006 fc9c 	bl	802b28a <__cxa_guard_release>
 8024952:	4a06      	ldr	r2, [pc, #24]	; (802496c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024954:	4909      	ldr	r1, [pc, #36]	; (802497c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024956:	480a      	ldr	r0, [pc, #40]	; (8024980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024958:	f006 fc81 	bl	802b25e <__aeabi_atexit>
 802495c:	4b05      	ldr	r3, [pc, #20]	; (8024974 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802495e:	61ab      	str	r3, [r5, #24]
 8024960:	4b07      	ldr	r3, [pc, #28]	; (8024980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024962:	61eb      	str	r3, [r5, #28]
 8024964:	bd38      	pop	{r3, r4, r5, pc}
 8024966:	bf00      	nop
 8024968:	2000c0c4 	.word	0x2000c0c4
 802496c:	20000000 	.word	0x20000000
 8024970:	080233d3 	.word	0x080233d3
 8024974:	200000b0 	.word	0x200000b0
 8024978:	2000c0c8 	.word	0x2000c0c8
 802497c:	080233d1 	.word	0x080233d1
 8024980:	200000b4 	.word	0x200000b4

08024984 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024984:	b510      	push	{r4, lr}
 8024986:	4604      	mov	r4, r0
 8024988:	f7ff ff88 	bl	802489c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802498c:	4620      	mov	r0, r4
 802498e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024992:	f7ff bfbd 	b.w	8024910 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024998 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8024998:	b538      	push	{r3, r4, r5, lr}
 802499a:	4c15      	ldr	r4, [pc, #84]	; (80249f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 802499c:	4605      	mov	r5, r0
 802499e:	7823      	ldrb	r3, [r4, #0]
 80249a0:	f3bf 8f5b 	dmb	ish
 80249a4:	07da      	lsls	r2, r3, #31
 80249a6:	d40b      	bmi.n	80249c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80249a8:	4620      	mov	r0, r4
 80249aa:	f006 fc62 	bl	802b272 <__cxa_guard_acquire>
 80249ae:	b138      	cbz	r0, 80249c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80249b0:	4620      	mov	r0, r4
 80249b2:	f006 fc6a 	bl	802b28a <__cxa_guard_release>
 80249b6:	4a0f      	ldr	r2, [pc, #60]	; (80249f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80249b8:	490f      	ldr	r1, [pc, #60]	; (80249f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80249ba:	4810      	ldr	r0, [pc, #64]	; (80249fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80249bc:	f006 fc4f 	bl	802b25e <__aeabi_atexit>
 80249c0:	4c0f      	ldr	r4, [pc, #60]	; (8024a00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80249c2:	7823      	ldrb	r3, [r4, #0]
 80249c4:	f3bf 8f5b 	dmb	ish
 80249c8:	07db      	lsls	r3, r3, #31
 80249ca:	d40b      	bmi.n	80249e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80249cc:	4620      	mov	r0, r4
 80249ce:	f006 fc50 	bl	802b272 <__cxa_guard_acquire>
 80249d2:	b138      	cbz	r0, 80249e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80249d4:	4620      	mov	r0, r4
 80249d6:	f006 fc58 	bl	802b28a <__cxa_guard_release>
 80249da:	4a06      	ldr	r2, [pc, #24]	; (80249f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80249dc:	4909      	ldr	r1, [pc, #36]	; (8024a04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80249de:	480a      	ldr	r0, [pc, #40]	; (8024a08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80249e0:	f006 fc3d 	bl	802b25e <__aeabi_atexit>
 80249e4:	4b05      	ldr	r3, [pc, #20]	; (80249fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80249e6:	632b      	str	r3, [r5, #48]	; 0x30
 80249e8:	4b07      	ldr	r3, [pc, #28]	; (8024a08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80249ea:	636b      	str	r3, [r5, #52]	; 0x34
 80249ec:	bd38      	pop	{r3, r4, r5, pc}
 80249ee:	bf00      	nop
 80249f0:	2000c0cc 	.word	0x2000c0cc
 80249f4:	20000000 	.word	0x20000000
 80249f8:	080233c7 	.word	0x080233c7
 80249fc:	200000b8 	.word	0x200000b8
 8024a00:	2000c0d0 	.word	0x2000c0d0
 8024a04:	080233c5 	.word	0x080233c5
 8024a08:	200000bc 	.word	0x200000bc

08024a0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8024a0c:	b538      	push	{r3, r4, r5, lr}
 8024a0e:	4c15      	ldr	r4, [pc, #84]	; (8024a64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8024a10:	4605      	mov	r5, r0
 8024a12:	7823      	ldrb	r3, [r4, #0]
 8024a14:	f3bf 8f5b 	dmb	ish
 8024a18:	07da      	lsls	r2, r3, #31
 8024a1a:	d40b      	bmi.n	8024a34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024a1c:	4620      	mov	r0, r4
 8024a1e:	f006 fc28 	bl	802b272 <__cxa_guard_acquire>
 8024a22:	b138      	cbz	r0, 8024a34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024a24:	4620      	mov	r0, r4
 8024a26:	f006 fc30 	bl	802b28a <__cxa_guard_release>
 8024a2a:	4a0f      	ldr	r2, [pc, #60]	; (8024a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024a2c:	490f      	ldr	r1, [pc, #60]	; (8024a6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8024a2e:	4810      	ldr	r0, [pc, #64]	; (8024a70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024a30:	f006 fc15 	bl	802b25e <__aeabi_atexit>
 8024a34:	4c0f      	ldr	r4, [pc, #60]	; (8024a74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8024a36:	7823      	ldrb	r3, [r4, #0]
 8024a38:	f3bf 8f5b 	dmb	ish
 8024a3c:	07db      	lsls	r3, r3, #31
 8024a3e:	d40b      	bmi.n	8024a58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024a40:	4620      	mov	r0, r4
 8024a42:	f006 fc16 	bl	802b272 <__cxa_guard_acquire>
 8024a46:	b138      	cbz	r0, 8024a58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024a48:	4620      	mov	r0, r4
 8024a4a:	f006 fc1e 	bl	802b28a <__cxa_guard_release>
 8024a4e:	4a06      	ldr	r2, [pc, #24]	; (8024a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024a50:	4909      	ldr	r1, [pc, #36]	; (8024a78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8024a52:	480a      	ldr	r0, [pc, #40]	; (8024a7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024a54:	f006 fc03 	bl	802b25e <__aeabi_atexit>
 8024a58:	4b05      	ldr	r3, [pc, #20]	; (8024a70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024a5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8024a5c:	4b07      	ldr	r3, [pc, #28]	; (8024a7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024a5e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024a60:	bd38      	pop	{r3, r4, r5, pc}
 8024a62:	bf00      	nop
 8024a64:	2000c0a4 	.word	0x2000c0a4
 8024a68:	20000000 	.word	0x20000000
 8024a6c:	080233cb 	.word	0x080233cb
 8024a70:	20000090 	.word	0x20000090
 8024a74:	2000c0a8 	.word	0x2000c0a8
 8024a78:	080233c9 	.word	0x080233c9
 8024a7c:	20000094 	.word	0x20000094

08024a80 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8024a80:	b510      	push	{r4, lr}
 8024a82:	4604      	mov	r4, r0
 8024a84:	f7ff ff88 	bl	8024998 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8024a88:	4620      	mov	r0, r4
 8024a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a8e:	f7ff bfbd 	b.w	8024a0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08024a94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024a94:	b538      	push	{r3, r4, r5, lr}
 8024a96:	4c15      	ldr	r4, [pc, #84]	; (8024aec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024a98:	4605      	mov	r5, r0
 8024a9a:	7823      	ldrb	r3, [r4, #0]
 8024a9c:	f3bf 8f5b 	dmb	ish
 8024aa0:	07da      	lsls	r2, r3, #31
 8024aa2:	d40b      	bmi.n	8024abc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024aa4:	4620      	mov	r0, r4
 8024aa6:	f006 fbe4 	bl	802b272 <__cxa_guard_acquire>
 8024aaa:	b138      	cbz	r0, 8024abc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024aac:	4620      	mov	r0, r4
 8024aae:	f006 fbec 	bl	802b28a <__cxa_guard_release>
 8024ab2:	4a0f      	ldr	r2, [pc, #60]	; (8024af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024ab4:	490f      	ldr	r1, [pc, #60]	; (8024af4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024ab6:	4810      	ldr	r0, [pc, #64]	; (8024af8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024ab8:	f006 fbd1 	bl	802b25e <__aeabi_atexit>
 8024abc:	4c0f      	ldr	r4, [pc, #60]	; (8024afc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024abe:	7823      	ldrb	r3, [r4, #0]
 8024ac0:	f3bf 8f5b 	dmb	ish
 8024ac4:	07db      	lsls	r3, r3, #31
 8024ac6:	d40b      	bmi.n	8024ae0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024ac8:	4620      	mov	r0, r4
 8024aca:	f006 fbd2 	bl	802b272 <__cxa_guard_acquire>
 8024ace:	b138      	cbz	r0, 8024ae0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024ad0:	4620      	mov	r0, r4
 8024ad2:	f006 fbda 	bl	802b28a <__cxa_guard_release>
 8024ad6:	4a06      	ldr	r2, [pc, #24]	; (8024af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024ad8:	4909      	ldr	r1, [pc, #36]	; (8024b00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024ada:	480a      	ldr	r0, [pc, #40]	; (8024b04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024adc:	f006 fbbf 	bl	802b25e <__aeabi_atexit>
 8024ae0:	4b05      	ldr	r3, [pc, #20]	; (8024af8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024ae2:	642b      	str	r3, [r5, #64]	; 0x40
 8024ae4:	4b07      	ldr	r3, [pc, #28]	; (8024b04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024ae6:	646b      	str	r3, [r5, #68]	; 0x44
 8024ae8:	bd38      	pop	{r3, r4, r5, pc}
 8024aea:	bf00      	nop
 8024aec:	2000c0d4 	.word	0x2000c0d4
 8024af0:	20000000 	.word	0x20000000
 8024af4:	080233bf 	.word	0x080233bf
 8024af8:	200000c0 	.word	0x200000c0
 8024afc:	2000c0d8 	.word	0x2000c0d8
 8024b00:	080233bd 	.word	0x080233bd
 8024b04:	200000c4 	.word	0x200000c4

08024b08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024b08:	b538      	push	{r3, r4, r5, lr}
 8024b0a:	4c15      	ldr	r4, [pc, #84]	; (8024b60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024b0c:	4605      	mov	r5, r0
 8024b0e:	7823      	ldrb	r3, [r4, #0]
 8024b10:	f3bf 8f5b 	dmb	ish
 8024b14:	07da      	lsls	r2, r3, #31
 8024b16:	d40b      	bmi.n	8024b30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024b18:	4620      	mov	r0, r4
 8024b1a:	f006 fbaa 	bl	802b272 <__cxa_guard_acquire>
 8024b1e:	b138      	cbz	r0, 8024b30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024b20:	4620      	mov	r0, r4
 8024b22:	f006 fbb2 	bl	802b28a <__cxa_guard_release>
 8024b26:	4a0f      	ldr	r2, [pc, #60]	; (8024b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024b28:	490f      	ldr	r1, [pc, #60]	; (8024b68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024b2a:	4810      	ldr	r0, [pc, #64]	; (8024b6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024b2c:	f006 fb97 	bl	802b25e <__aeabi_atexit>
 8024b30:	4c0f      	ldr	r4, [pc, #60]	; (8024b70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024b32:	7823      	ldrb	r3, [r4, #0]
 8024b34:	f3bf 8f5b 	dmb	ish
 8024b38:	07db      	lsls	r3, r3, #31
 8024b3a:	d40b      	bmi.n	8024b54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024b3c:	4620      	mov	r0, r4
 8024b3e:	f006 fb98 	bl	802b272 <__cxa_guard_acquire>
 8024b42:	b138      	cbz	r0, 8024b54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024b44:	4620      	mov	r0, r4
 8024b46:	f006 fba0 	bl	802b28a <__cxa_guard_release>
 8024b4a:	4a06      	ldr	r2, [pc, #24]	; (8024b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024b4c:	4909      	ldr	r1, [pc, #36]	; (8024b74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024b4e:	480a      	ldr	r0, [pc, #40]	; (8024b78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024b50:	f006 fb85 	bl	802b25e <__aeabi_atexit>
 8024b54:	4b05      	ldr	r3, [pc, #20]	; (8024b6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024b56:	63ab      	str	r3, [r5, #56]	; 0x38
 8024b58:	4b07      	ldr	r3, [pc, #28]	; (8024b78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024b5a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024b5c:	bd38      	pop	{r3, r4, r5, pc}
 8024b5e:	bf00      	nop
 8024b60:	2000c0b4 	.word	0x2000c0b4
 8024b64:	20000000 	.word	0x20000000
 8024b68:	080233c3 	.word	0x080233c3
 8024b6c:	200000a0 	.word	0x200000a0
 8024b70:	2000c0b8 	.word	0x2000c0b8
 8024b74:	080233c1 	.word	0x080233c1
 8024b78:	200000a4 	.word	0x200000a4

08024b7c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8024b7c:	b510      	push	{r4, lr}
 8024b7e:	4604      	mov	r4, r0
 8024b80:	f7ff ff88 	bl	8024a94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024b84:	4620      	mov	r0, r4
 8024b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b8a:	f7ff bfbd 	b.w	8024b08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024b90:	b538      	push	{r3, r4, r5, lr}
 8024b92:	4c15      	ldr	r4, [pc, #84]	; (8024be8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024b94:	4605      	mov	r5, r0
 8024b96:	7823      	ldrb	r3, [r4, #0]
 8024b98:	f3bf 8f5b 	dmb	ish
 8024b9c:	07da      	lsls	r2, r3, #31
 8024b9e:	d40b      	bmi.n	8024bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024ba0:	4620      	mov	r0, r4
 8024ba2:	f006 fb66 	bl	802b272 <__cxa_guard_acquire>
 8024ba6:	b138      	cbz	r0, 8024bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024ba8:	4620      	mov	r0, r4
 8024baa:	f006 fb6e 	bl	802b28a <__cxa_guard_release>
 8024bae:	4a0f      	ldr	r2, [pc, #60]	; (8024bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024bb0:	490f      	ldr	r1, [pc, #60]	; (8024bf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024bb2:	4810      	ldr	r0, [pc, #64]	; (8024bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024bb4:	f006 fb53 	bl	802b25e <__aeabi_atexit>
 8024bb8:	4c0f      	ldr	r4, [pc, #60]	; (8024bf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024bba:	7823      	ldrb	r3, [r4, #0]
 8024bbc:	f3bf 8f5b 	dmb	ish
 8024bc0:	07db      	lsls	r3, r3, #31
 8024bc2:	d40b      	bmi.n	8024bdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024bc4:	4620      	mov	r0, r4
 8024bc6:	f006 fb54 	bl	802b272 <__cxa_guard_acquire>
 8024bca:	b138      	cbz	r0, 8024bdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024bcc:	4620      	mov	r0, r4
 8024bce:	f006 fb5c 	bl	802b28a <__cxa_guard_release>
 8024bd2:	4a06      	ldr	r2, [pc, #24]	; (8024bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024bd4:	4909      	ldr	r1, [pc, #36]	; (8024bfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024bd6:	480a      	ldr	r0, [pc, #40]	; (8024c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024bd8:	f006 fb41 	bl	802b25e <__aeabi_atexit>
 8024bdc:	4b05      	ldr	r3, [pc, #20]	; (8024bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024bde:	652b      	str	r3, [r5, #80]	; 0x50
 8024be0:	4b07      	ldr	r3, [pc, #28]	; (8024c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024be2:	656b      	str	r3, [r5, #84]	; 0x54
 8024be4:	bd38      	pop	{r3, r4, r5, pc}
 8024be6:	bf00      	nop
 8024be8:	2000c0ac 	.word	0x2000c0ac
 8024bec:	20000000 	.word	0x20000000
 8024bf0:	080233b7 	.word	0x080233b7
 8024bf4:	20000098 	.word	0x20000098
 8024bf8:	2000c0b0 	.word	0x2000c0b0
 8024bfc:	080233b5 	.word	0x080233b5
 8024c00:	2000009c 	.word	0x2000009c

08024c04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024c04:	b538      	push	{r3, r4, r5, lr}
 8024c06:	4c15      	ldr	r4, [pc, #84]	; (8024c5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024c08:	4605      	mov	r5, r0
 8024c0a:	7823      	ldrb	r3, [r4, #0]
 8024c0c:	f3bf 8f5b 	dmb	ish
 8024c10:	07da      	lsls	r2, r3, #31
 8024c12:	d40b      	bmi.n	8024c2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024c14:	4620      	mov	r0, r4
 8024c16:	f006 fb2c 	bl	802b272 <__cxa_guard_acquire>
 8024c1a:	b138      	cbz	r0, 8024c2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	f006 fb34 	bl	802b28a <__cxa_guard_release>
 8024c22:	4a0f      	ldr	r2, [pc, #60]	; (8024c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024c24:	490f      	ldr	r1, [pc, #60]	; (8024c64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024c26:	4810      	ldr	r0, [pc, #64]	; (8024c68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024c28:	f006 fb19 	bl	802b25e <__aeabi_atexit>
 8024c2c:	4c0f      	ldr	r4, [pc, #60]	; (8024c6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024c2e:	7823      	ldrb	r3, [r4, #0]
 8024c30:	f3bf 8f5b 	dmb	ish
 8024c34:	07db      	lsls	r3, r3, #31
 8024c36:	d40b      	bmi.n	8024c50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024c38:	4620      	mov	r0, r4
 8024c3a:	f006 fb1a 	bl	802b272 <__cxa_guard_acquire>
 8024c3e:	b138      	cbz	r0, 8024c50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024c40:	4620      	mov	r0, r4
 8024c42:	f006 fb22 	bl	802b28a <__cxa_guard_release>
 8024c46:	4a06      	ldr	r2, [pc, #24]	; (8024c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024c48:	4909      	ldr	r1, [pc, #36]	; (8024c70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024c4a:	480a      	ldr	r0, [pc, #40]	; (8024c74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024c4c:	f006 fb07 	bl	802b25e <__aeabi_atexit>
 8024c50:	4b05      	ldr	r3, [pc, #20]	; (8024c68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024c52:	64ab      	str	r3, [r5, #72]	; 0x48
 8024c54:	4b07      	ldr	r3, [pc, #28]	; (8024c74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024c56:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024c58:	bd38      	pop	{r3, r4, r5, pc}
 8024c5a:	bf00      	nop
 8024c5c:	2000c09c 	.word	0x2000c09c
 8024c60:	20000000 	.word	0x20000000
 8024c64:	080233bb 	.word	0x080233bb
 8024c68:	20000088 	.word	0x20000088
 8024c6c:	2000c0a0 	.word	0x2000c0a0
 8024c70:	080233b9 	.word	0x080233b9
 8024c74:	2000008c 	.word	0x2000008c

08024c78 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8024c78:	b510      	push	{r4, lr}
 8024c7a:	4604      	mov	r4, r0
 8024c7c:	f7ff ff88 	bl	8024b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024c80:	4620      	mov	r0, r4
 8024c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c86:	f7ff bfbd 	b.w	8024c04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08024c8a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8024c8a:	b510      	push	{r4, lr}
 8024c8c:	4604      	mov	r4, r0
 8024c8e:	f7ff fff3 	bl	8024c78 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8024c92:	4620      	mov	r0, r4
 8024c94:	f7ff ff72 	bl	8024b7c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8024c98:	4620      	mov	r0, r4
 8024c9a:	f7ff fe73 	bl	8024984 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8024c9e:	4620      	mov	r0, r4
 8024ca0:	f7ff fdf2 	bl	8024888 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8024ca4:	4620      	mov	r0, r4
 8024ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024caa:	f7ff bee9 	b.w	8024a80 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08024cb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cb4:	b087      	sub	sp, #28
 8024cb6:	7888      	ldrb	r0, [r1, #2]
 8024cb8:	4616      	mov	r6, r2
 8024cba:	9001      	str	r0, [sp, #4]
 8024cbc:	7848      	ldrb	r0, [r1, #1]
 8024cbe:	9100      	str	r1, [sp, #0]
 8024cc0:	9002      	str	r0, [sp, #8]
 8024cc2:	7808      	ldrb	r0, [r1, #0]
 8024cc4:	9901      	ldr	r1, [sp, #4]
 8024cc6:	9003      	str	r0, [sp, #12]
 8024cc8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024ccc:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8024cd0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8024cd4:	9902      	ldr	r1, [sp, #8]
 8024cd6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8024cda:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8024cde:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024ce2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8024ce6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8024cea:	9005      	str	r0, [sp, #20]
 8024cec:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8024cf0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024cf4:	2d00      	cmp	r5, #0
 8024cf6:	eb06 080a 	add.w	r8, r6, sl
 8024cfa:	db4a      	blt.n	8024d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8024cfc:	45a9      	cmp	r9, r5
 8024cfe:	dd48      	ble.n	8024d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8024d00:	f1bc 0f00 	cmp.w	ip, #0
 8024d04:	db43      	blt.n	8024d8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8024d06:	45e6      	cmp	lr, ip
 8024d08:	dd41      	ble.n	8024d8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8024d0a:	f816 600a 	ldrb.w	r6, [r6, sl]
 8024d0e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024d12:	441e      	add	r6, r3
 8024d14:	f11c 0001 	adds.w	r0, ip, #1
 8024d18:	d43e      	bmi.n	8024d98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8024d1a:	4586      	cmp	lr, r0
 8024d1c:	dd3c      	ble.n	8024d98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8024d1e:	2a00      	cmp	r2, #0
 8024d20:	d03a      	beq.n	8024d98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8024d22:	f898 0001 	ldrb.w	r0, [r8, #1]
 8024d26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d2a:	4418      	add	r0, r3
 8024d2c:	3501      	adds	r5, #1
 8024d2e:	d437      	bmi.n	8024da0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024d30:	45a9      	cmp	r9, r5
 8024d32:	dd35      	ble.n	8024da0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024d34:	b3a4      	cbz	r4, 8024da0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8024d36:	f1bc 0f00 	cmp.w	ip, #0
 8024d3a:	db2f      	blt.n	8024d9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8024d3c:	45e6      	cmp	lr, ip
 8024d3e:	dd2d      	ble.n	8024d9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8024d40:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024d48:	441d      	add	r5, r3
 8024d4a:	f11c 0c01 	adds.w	ip, ip, #1
 8024d4e:	d42a      	bmi.n	8024da6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024d50:	45e6      	cmp	lr, ip
 8024d52:	dd28      	ble.n	8024da6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024d54:	b33a      	cbz	r2, 8024da6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024d56:	44c6      	add	lr, r8
 8024d58:	f89e c001 	ldrb.w	ip, [lr, #1]
 8024d5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024d60:	4463      	add	r3, ip
 8024d62:	ea6f 0c07 	mvn.w	ip, r7
 8024d66:	2a0f      	cmp	r2, #15
 8024d68:	f896 a000 	ldrb.w	sl, [r6]
 8024d6c:	fa5f fc8c 	uxtb.w	ip, ip
 8024d70:	f890 b000 	ldrb.w	fp, [r0]
 8024d74:	f895 9000 	ldrb.w	r9, [r5]
 8024d78:	7819      	ldrb	r1, [r3, #0]
 8024d7a:	d801      	bhi.n	8024d80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8024d7c:	2c0f      	cmp	r4, #15
 8024d7e:	d914      	bls.n	8024daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8024d80:	4b40      	ldr	r3, [pc, #256]	; (8024e84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8024d82:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024d86:	4a40      	ldr	r2, [pc, #256]	; (8024e88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8024d88:	4840      	ldr	r0, [pc, #256]	; (8024e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8024d8a:	f006 fa9b 	bl	802b2c4 <__assert_func>
 8024d8e:	ae05      	add	r6, sp, #20
 8024d90:	e7c0      	b.n	8024d14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8024d92:	a805      	add	r0, sp, #20
 8024d94:	4606      	mov	r6, r0
 8024d96:	e7c9      	b.n	8024d2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8024d98:	a805      	add	r0, sp, #20
 8024d9a:	e7c7      	b.n	8024d2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8024d9c:	ad05      	add	r5, sp, #20
 8024d9e:	e7d4      	b.n	8024d4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8024da0:	ab05      	add	r3, sp, #20
 8024da2:	461d      	mov	r5, r3
 8024da4:	e7dd      	b.n	8024d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8024da6:	ab05      	add	r3, sp, #20
 8024da8:	e7db      	b.n	8024d62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8024daa:	b292      	uxth	r2, r2
 8024dac:	b2a4      	uxth	r4, r4
 8024dae:	fa1f fc8c 	uxth.w	ip, ip
 8024db2:	fb02 f804 	mul.w	r8, r2, r4
 8024db6:	0112      	lsls	r2, r2, #4
 8024db8:	b2bf      	uxth	r7, r7
 8024dba:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8024dbe:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8024dc2:	eba2 0208 	sub.w	r2, r2, r8
 8024dc6:	b2a4      	uxth	r4, r4
 8024dc8:	b292      	uxth	r2, r2
 8024dca:	ebae 0e04 	sub.w	lr, lr, r4
 8024dce:	fb02 fb0b 	mul.w	fp, r2, fp
 8024dd2:	fa1f fe8e 	uxth.w	lr, lr
 8024dd6:	fb0e ba0a 	mla	sl, lr, sl, fp
 8024dda:	fb04 aa09 	mla	sl, r4, r9, sl
 8024dde:	fb08 aa01 	mla	sl, r8, r1, sl
 8024de2:	9903      	ldr	r1, [sp, #12]
 8024de4:	fb11 f90c 	smulbb	r9, r1, ip
 8024de8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024dec:	9900      	ldr	r1, [sp, #0]
 8024dee:	fb0a 9a07 	mla	sl, sl, r7, r9
 8024df2:	fa1f fa8a 	uxth.w	sl, sl
 8024df6:	f10a 0901 	add.w	r9, sl, #1
 8024dfa:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8024dfe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024e02:	f881 a000 	strb.w	sl, [r1]
 8024e06:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024e0a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8024e0e:	fb02 fa0a 	mul.w	sl, r2, sl
 8024e12:	9902      	ldr	r1, [sp, #8]
 8024e14:	fb0e aa09 	mla	sl, lr, r9, sl
 8024e18:	f895 9001 	ldrb.w	r9, [r5, #1]
 8024e1c:	fb04 aa09 	mla	sl, r4, r9, sl
 8024e20:	f893 9001 	ldrb.w	r9, [r3, #1]
 8024e24:	fb08 a909 	mla	r9, r8, r9, sl
 8024e28:	fb11 fa0c 	smulbb	sl, r1, ip
 8024e2c:	9900      	ldr	r1, [sp, #0]
 8024e2e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024e32:	fb09 a907 	mla	r9, r9, r7, sl
 8024e36:	fa1f f989 	uxth.w	r9, r9
 8024e3a:	f109 0a01 	add.w	sl, r9, #1
 8024e3e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8024e42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024e46:	f881 9001 	strb.w	r9, [r1, #1]
 8024e4a:	7880      	ldrb	r0, [r0, #2]
 8024e4c:	78b6      	ldrb	r6, [r6, #2]
 8024e4e:	4342      	muls	r2, r0
 8024e50:	78a8      	ldrb	r0, [r5, #2]
 8024e52:	789b      	ldrb	r3, [r3, #2]
 8024e54:	fb0e 2206 	mla	r2, lr, r6, r2
 8024e58:	fb04 2400 	mla	r4, r4, r0, r2
 8024e5c:	fb08 4803 	mla	r8, r8, r3, r4
 8024e60:	9b01      	ldr	r3, [sp, #4]
 8024e62:	fb13 fc0c 	smulbb	ip, r3, ip
 8024e66:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024e6a:	fb08 c707 	mla	r7, r8, r7, ip
 8024e6e:	b2bf      	uxth	r7, r7
 8024e70:	f107 0c01 	add.w	ip, r7, #1
 8024e74:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8024e78:	123f      	asrs	r7, r7, #8
 8024e7a:	708f      	strb	r7, [r1, #2]
 8024e7c:	b007      	add	sp, #28
 8024e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e82:	bf00      	nop
 8024e84:	08030f3f 	.word	0x08030f3f
 8024e88:	08031436 	.word	0x08031436
 8024e8c:	08031008 	.word	0x08031008

08024e90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e94:	ed2d 8b08 	vpush	{d8-d11}
 8024e98:	b095      	sub	sp, #84	; 0x54
 8024e9a:	eeb0 aa40 	vmov.f32	s20, s0
 8024e9e:	eef0 9a60 	vmov.f32	s19, s1
 8024ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8024ea4:	eeb0 9a41 	vmov.f32	s18, s2
 8024ea8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024eac:	eeb0 8a62 	vmov.f32	s16, s5
 8024eb0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8024eb2:	eef0 8a43 	vmov.f32	s17, s6
 8024eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8024eb8:	eef0 ba44 	vmov.f32	s23, s8
 8024ebc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024ec0:	eeb0 ba64 	vmov.f32	s22, s9
 8024ec4:	9013      	str	r0, [sp, #76]	; 0x4c
 8024ec6:	eef0 aa45 	vmov.f32	s21, s10
 8024eca:	9310      	str	r3, [sp, #64]	; 0x40
 8024ecc:	6860      	ldr	r0, [r4, #4]
 8024ece:	910f      	str	r1, [sp, #60]	; 0x3c
 8024ed0:	9212      	str	r2, [sp, #72]	; 0x48
 8024ed2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8024ed4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8024ed8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024edc:	fb00 1303 	mla	r3, r0, r3, r1
 8024ee0:	6821      	ldr	r1, [r4, #0]
 8024ee2:	6854      	ldr	r4, [r2, #4]
 8024ee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024ee8:	18cb      	adds	r3, r1, r3
 8024eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8024eec:	6813      	ldr	r3, [r2, #0]
 8024eee:	930e      	str	r3, [sp, #56]	; 0x38
 8024ef0:	1d23      	adds	r3, r4, #4
 8024ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8024ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ef6:	43db      	mvns	r3, r3
 8024ef8:	b2db      	uxtb	r3, r3
 8024efa:	930d      	str	r3, [sp, #52]	; 0x34
 8024efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024efe:	2b00      	cmp	r3, #0
 8024f00:	dc03      	bgt.n	8024f0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8024f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	f340 823c 	ble.w	8025382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8024f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	f340 8115 	ble.w	802513c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8024f12:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024f14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024f16:	1412      	asrs	r2, r2, #16
 8024f18:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024f1c:	d431      	bmi.n	8024f82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024f1e:	1c51      	adds	r1, r2, #1
 8024f20:	428d      	cmp	r5, r1
 8024f22:	dd31      	ble.n	8024f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	db2f      	blt.n	8024f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024f28:	1c59      	adds	r1, r3, #1
 8024f2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024f2c:	4288      	cmp	r0, r1
 8024f2e:	dd2b      	ble.n	8024f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f32:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f34:	3b01      	subs	r3, #1
 8024f36:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024f38:	fb02 1203 	mla	r2, r2, r3, r1
 8024f3c:	1412      	asrs	r2, r2, #16
 8024f3e:	d42d      	bmi.n	8024f9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024f40:	3201      	adds	r2, #1
 8024f42:	4295      	cmp	r5, r2
 8024f44:	dd2a      	ble.n	8024f9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024f46:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024f48:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024f4a:	fb02 1303 	mla	r3, r2, r3, r1
 8024f4e:	141b      	asrs	r3, r3, #16
 8024f50:	d424      	bmi.n	8024f9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024f52:	3301      	adds	r3, #1
 8024f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f56:	429a      	cmp	r2, r3
 8024f58:	dd20      	ble.n	8024f9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f5c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8024f60:	f103 0c03 	add.w	ip, r3, #3
 8024f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f66:	9311      	str	r3, [sp, #68]	; 0x44
 8024f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	f300 814f 	bgt.w	802520e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8024f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024f78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024f7c:	441a      	add	r2, r3
 8024f7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024f80:	e0de      	b.n	8025140 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8024f82:	1c51      	adds	r1, r2, #1
 8024f84:	f040 80cb 	bne.w	802511e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024f88:	42aa      	cmp	r2, r5
 8024f8a:	f280 80c8 	bge.w	802511e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024f8e:	1c5f      	adds	r7, r3, #1
 8024f90:	f2c0 80c5 	blt.w	802511e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f96:	4293      	cmp	r3, r2
 8024f98:	f280 80c1 	bge.w	802511e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024fa0:	9311      	str	r3, [sp, #68]	; 0x44
 8024fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	dde3      	ble.n	8024f70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8024fa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024faa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024fac:	141a      	asrs	r2, r3, #16
 8024fae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024fb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024fb2:	1400      	asrs	r0, r0, #16
 8024fb4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8024fb8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024fbc:	f100 810e 	bmi.w	80251dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8024fc0:	1c46      	adds	r6, r0, #1
 8024fc2:	42b5      	cmp	r5, r6
 8024fc4:	f340 810c 	ble.w	80251e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8024fc8:	2a00      	cmp	r2, #0
 8024fca:	f2c0 8109 	blt.w	80251e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8024fce:	1c56      	adds	r6, r2, #1
 8024fd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024fd2:	42b4      	cmp	r4, r6
 8024fd4:	f340 8104 	ble.w	80251e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8024fd8:	fb02 0005 	mla	r0, r2, r5, r0
 8024fdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fe0:	f814 e000 	ldrb.w	lr, [r4, r0]
 8024fe4:	4402      	add	r2, r0
 8024fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024fe8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024fec:	eb00 080e 	add.w	r8, r0, lr
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	f000 80e4 	beq.w	80251be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8024ff6:	f892 c001 	ldrb.w	ip, [r2, #1]
 8024ffa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024ffe:	4484      	add	ip, r0
 8025000:	2900      	cmp	r1, #0
 8025002:	f000 80e5 	beq.w	80251d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8025006:	1950      	adds	r0, r2, r5
 8025008:	5d52      	ldrb	r2, [r2, r5]
 802500a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802500c:	7840      	ldrb	r0, [r0, #1]
 802500e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025012:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025016:	4422      	add	r2, r4
 8025018:	4420      	add	r0, r4
 802501a:	b29b      	uxth	r3, r3
 802501c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802501e:	b289      	uxth	r1, r1
 8025020:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8025024:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8025028:	fb03 fa01 	mul.w	sl, r3, r1
 802502c:	011b      	lsls	r3, r3, #4
 802502e:	f89c e000 	ldrb.w	lr, [ip]
 8025032:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8025036:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802503a:	eba3 030a 	sub.w	r3, r3, sl
 802503e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025040:	b289      	uxth	r1, r1
 8025042:	b29b      	uxth	r3, r3
 8025044:	eba9 0901 	sub.w	r9, r9, r1
 8025048:	fb03 fe0e 	mul.w	lr, r3, lr
 802504c:	fa1f f989 	uxth.w	r9, r9
 8025050:	fb09 ee0b 	mla	lr, r9, fp, lr
 8025054:	f892 b000 	ldrb.w	fp, [r2]
 8025058:	fb01 ee0b 	mla	lr, r1, fp, lr
 802505c:	f890 b000 	ldrb.w	fp, [r0]
 8025060:	fb0a ee0b 	mla	lr, sl, fp, lr
 8025064:	f897 b000 	ldrb.w	fp, [r7]
 8025068:	fb1b fb04 	smulbb	fp, fp, r4
 802506c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8025070:	fb0e be06 	mla	lr, lr, r6, fp
 8025074:	fa1f fe8e 	uxth.w	lr, lr
 8025078:	f10e 0b01 	add.w	fp, lr, #1
 802507c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8025080:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8025084:	f887 b000 	strb.w	fp, [r7]
 8025088:	f89c e001 	ldrb.w	lr, [ip, #1]
 802508c:	f898 b001 	ldrb.w	fp, [r8, #1]
 8025090:	fb03 fe0e 	mul.w	lr, r3, lr
 8025094:	fb09 ee0b 	mla	lr, r9, fp, lr
 8025098:	f892 b001 	ldrb.w	fp, [r2, #1]
 802509c:	fb01 ee0b 	mla	lr, r1, fp, lr
 80250a0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80250a4:	fb0a ee0b 	mla	lr, sl, fp, lr
 80250a8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80250ac:	fb1b fb04 	smulbb	fp, fp, r4
 80250b0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80250b4:	fb0e be06 	mla	lr, lr, r6, fp
 80250b8:	fa1f fe8e 	uxth.w	lr, lr
 80250bc:	f10e 0b01 	add.w	fp, lr, #1
 80250c0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80250c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80250c8:	f887 e001 	strb.w	lr, [r7, #1]
 80250cc:	f89c c002 	ldrb.w	ip, [ip, #2]
 80250d0:	f898 e002 	ldrb.w	lr, [r8, #2]
 80250d4:	fb03 f30c 	mul.w	r3, r3, ip
 80250d8:	fb09 330e 	mla	r3, r9, lr, r3
 80250dc:	f892 e002 	ldrb.w	lr, [r2, #2]
 80250e0:	7882      	ldrb	r2, [r0, #2]
 80250e2:	fb01 310e 	mla	r1, r1, lr, r3
 80250e6:	fb0a 1a02 	mla	sl, sl, r2, r1
 80250ea:	78b9      	ldrb	r1, [r7, #2]
 80250ec:	fb11 f104 	smulbb	r1, r1, r4
 80250f0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80250f4:	fb0a 1606 	mla	r6, sl, r6, r1
 80250f8:	b2b6      	uxth	r6, r6
 80250fa:	1c73      	adds	r3, r6, #1
 80250fc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025100:	1236      	asrs	r6, r6, #8
 8025102:	70be      	strb	r6, [r7, #2]
 8025104:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025106:	3703      	adds	r7, #3
 8025108:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802510a:	4413      	add	r3, r2
 802510c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802510e:	9327      	str	r3, [sp, #156]	; 0x9c
 8025110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025112:	4413      	add	r3, r2
 8025114:	9328      	str	r3, [sp, #160]	; 0xa0
 8025116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025118:	3b01      	subs	r3, #1
 802511a:	9311      	str	r3, [sp, #68]	; 0x44
 802511c:	e741      	b.n	8024fa2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 802511e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025120:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025122:	4413      	add	r3, r2
 8025124:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025126:	9327      	str	r3, [sp, #156]	; 0x9c
 8025128:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802512a:	4413      	add	r3, r2
 802512c:	9328      	str	r3, [sp, #160]	; 0xa0
 802512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025130:	3b01      	subs	r3, #1
 8025132:	930a      	str	r3, [sp, #40]	; 0x28
 8025134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025136:	3303      	adds	r3, #3
 8025138:	930b      	str	r3, [sp, #44]	; 0x2c
 802513a:	e6e6      	b.n	8024f0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802513c:	f47f aef8 	bne.w	8024f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8025140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025142:	2b00      	cmp	r3, #0
 8025144:	f340 811d 	ble.w	8025382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8025148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802514c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802514e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025152:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025156:	eef0 6a48 	vmov.f32	s13, s16
 802515a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802515e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025162:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025166:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802516a:	eef0 6a68 	vmov.f32	s13, s17
 802516e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025172:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8025176:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802517a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802517e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025182:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025186:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802518a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802518e:	ee18 2a10 	vmov	r2, s16
 8025192:	eeb0 8a47 	vmov.f32	s16, s14
 8025196:	fb92 f3f3 	sdiv	r3, r2, r3
 802519a:	ee18 2a90 	vmov	r2, s17
 802519e:	9329      	str	r3, [sp, #164]	; 0xa4
 80251a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80251a2:	eef0 8a67 	vmov.f32	s17, s15
 80251a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80251aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80251ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80251ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80251b0:	3b01      	subs	r3, #1
 80251b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80251b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80251b6:	bf08      	it	eq
 80251b8:	4613      	moveq	r3, r2
 80251ba:	930a      	str	r3, [sp, #40]	; 0x28
 80251bc:	e69e      	b.n	8024efc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80251be:	b151      	cbz	r1, 80251d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80251c0:	5d52      	ldrb	r2, [r2, r5]
 80251c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80251c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80251c8:	4402      	add	r2, r0
 80251ca:	4640      	mov	r0, r8
 80251cc:	46c4      	mov	ip, r8
 80251ce:	e724      	b.n	802501a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80251d0:	4640      	mov	r0, r8
 80251d2:	4642      	mov	r2, r8
 80251d4:	e721      	b.n	802501a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80251d6:	4640      	mov	r0, r8
 80251d8:	4642      	mov	r2, r8
 80251da:	e7f7      	b.n	80251cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80251dc:	1c46      	adds	r6, r0, #1
 80251de:	d191      	bne.n	8025104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80251e0:	4285      	cmp	r5, r0
 80251e2:	dd8f      	ble.n	8025104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80251e4:	1c54      	adds	r4, r2, #1
 80251e6:	db8d      	blt.n	8025104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80251e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80251ea:	4294      	cmp	r4, r2
 80251ec:	dd8a      	ble.n	8025104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80251ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80251f0:	9002      	str	r0, [sp, #8]
 80251f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80251f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80251f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80251fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80251fc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025200:	e9cd 5300 	strd	r5, r3, [sp]
 8025204:	4639      	mov	r1, r7
 8025206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025208:	f7ff fd52 	bl	8024cb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802520c:	e77a      	b.n	8025104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802520e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025210:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025212:	1410      	asrs	r0, r2, #16
 8025214:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025218:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802521a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802521c:	1412      	asrs	r2, r2, #16
 802521e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025222:	fb05 2000 	mla	r0, r5, r0, r2
 8025226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025228:	f814 8000 	ldrb.w	r8, [r4, r0]
 802522c:	4402      	add	r2, r0
 802522e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025230:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025234:	eb00 0708 	add.w	r7, r0, r8
 8025238:	2b00      	cmp	r3, #0
 802523a:	f000 8093 	beq.w	8025364 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802523e:	7856      	ldrb	r6, [r2, #1]
 8025240:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025244:	4406      	add	r6, r0
 8025246:	2900      	cmp	r1, #0
 8025248:	f000 8095 	beq.w	8025376 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802524c:	1950      	adds	r0, r2, r5
 802524e:	5d52      	ldrb	r2, [r2, r5]
 8025250:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025252:	7840      	ldrb	r0, [r0, #1]
 8025254:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025258:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802525c:	4422      	add	r2, r4
 802525e:	4420      	add	r0, r4
 8025260:	b29b      	uxth	r3, r3
 8025262:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025264:	b289      	uxth	r1, r1
 8025266:	f10c 0c03 	add.w	ip, ip, #3
 802526a:	f814 b008 	ldrb.w	fp, [r4, r8]
 802526e:	fb03 f901 	mul.w	r9, r3, r1
 8025272:	011b      	lsls	r3, r3, #4
 8025274:	f896 8000 	ldrb.w	r8, [r6]
 8025278:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802527c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025280:	eba3 0309 	sub.w	r3, r3, r9
 8025284:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025286:	b289      	uxth	r1, r1
 8025288:	b29b      	uxth	r3, r3
 802528a:	ebae 0e01 	sub.w	lr, lr, r1
 802528e:	fb03 f808 	mul.w	r8, r3, r8
 8025292:	fa1f fe8e 	uxth.w	lr, lr
 8025296:	fb0e 880b 	mla	r8, lr, fp, r8
 802529a:	f892 b000 	ldrb.w	fp, [r2]
 802529e:	fb01 880b 	mla	r8, r1, fp, r8
 80252a2:	f890 b000 	ldrb.w	fp, [r0]
 80252a6:	fb09 880b 	mla	r8, r9, fp, r8
 80252aa:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80252ae:	fb1b fb04 	smulbb	fp, fp, r4
 80252b2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80252b6:	fb08 b80a 	mla	r8, r8, sl, fp
 80252ba:	fa1f f888 	uxth.w	r8, r8
 80252be:	f108 0b01 	add.w	fp, r8, #1
 80252c2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80252c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80252ca:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80252ce:	f896 8001 	ldrb.w	r8, [r6, #1]
 80252d2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80252d6:	fb03 f808 	mul.w	r8, r3, r8
 80252da:	fb0e 880b 	mla	r8, lr, fp, r8
 80252de:	f892 b001 	ldrb.w	fp, [r2, #1]
 80252e2:	fb01 880b 	mla	r8, r1, fp, r8
 80252e6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80252ea:	fb09 880b 	mla	r8, r9, fp, r8
 80252ee:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80252f2:	fb1b fb04 	smulbb	fp, fp, r4
 80252f6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80252fa:	fb08 b80a 	mla	r8, r8, sl, fp
 80252fe:	fa1f f888 	uxth.w	r8, r8
 8025302:	f108 0b01 	add.w	fp, r8, #1
 8025306:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802530a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802530e:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8025312:	78b6      	ldrb	r6, [r6, #2]
 8025314:	78bf      	ldrb	r7, [r7, #2]
 8025316:	4373      	muls	r3, r6
 8025318:	7896      	ldrb	r6, [r2, #2]
 802531a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802531c:	fb0e 3307 	mla	r3, lr, r7, r3
 8025320:	fb01 3306 	mla	r3, r1, r6, r3
 8025324:	7886      	ldrb	r6, [r0, #2]
 8025326:	fb09 3906 	mla	r9, r9, r6, r3
 802532a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 802532e:	fb13 f304 	smulbb	r3, r3, r4
 8025332:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8025336:	fb09 390a 	mla	r9, r9, sl, r3
 802533a:	fa1f f989 	uxth.w	r9, r9
 802533e:	f109 0301 	add.w	r3, r9, #1
 8025342:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025346:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025348:	4413      	add	r3, r2
 802534a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802534c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025350:	9327      	str	r3, [sp, #156]	; 0x9c
 8025352:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025354:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8025358:	4413      	add	r3, r2
 802535a:	9328      	str	r3, [sp, #160]	; 0xa0
 802535c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802535e:	3b01      	subs	r3, #1
 8025360:	9311      	str	r3, [sp, #68]	; 0x44
 8025362:	e601      	b.n	8024f68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8025364:	b151      	cbz	r1, 802537c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8025366:	5d52      	ldrb	r2, [r2, r5]
 8025368:	9809      	ldr	r0, [sp, #36]	; 0x24
 802536a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802536e:	4402      	add	r2, r0
 8025370:	4638      	mov	r0, r7
 8025372:	463e      	mov	r6, r7
 8025374:	e774      	b.n	8025260 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8025376:	4638      	mov	r0, r7
 8025378:	463a      	mov	r2, r7
 802537a:	e771      	b.n	8025260 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802537c:	4638      	mov	r0, r7
 802537e:	463a      	mov	r2, r7
 8025380:	e7f7      	b.n	8025372 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8025382:	b015      	add	sp, #84	; 0x54
 8025384:	ecbd 8b08 	vpop	{d8-d11}
 8025388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802538c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802538c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025390:	780d      	ldrb	r5, [r1, #0]
 8025392:	f891 9002 	ldrb.w	r9, [r1, #2]
 8025396:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 802539a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802539e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80253a2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80253a6:	f891 9001 	ldrb.w	r9, [r1, #1]
 80253aa:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80253ae:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80253b2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80253b6:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80253ba:	9501      	str	r5, [sp, #4]
 80253bc:	fb06 470c 	mla	r7, r6, ip, r4
 80253c0:	2e00      	cmp	r6, #0
 80253c2:	eb02 0e07 	add.w	lr, r2, r7
 80253c6:	db46      	blt.n	8025456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80253c8:	45b0      	cmp	r8, r6
 80253ca:	dd44      	ble.n	8025456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80253cc:	2c00      	cmp	r4, #0
 80253ce:	db40      	blt.n	8025452 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80253d0:	45a4      	cmp	ip, r4
 80253d2:	dd3e      	ble.n	8025452 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80253d4:	5dd7      	ldrb	r7, [r2, r7]
 80253d6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80253da:	441f      	add	r7, r3
 80253dc:	1c62      	adds	r2, r4, #1
 80253de:	d43d      	bmi.n	802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80253e0:	4594      	cmp	ip, r2
 80253e2:	dd3b      	ble.n	802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80253e4:	f1ba 0f00 	cmp.w	sl, #0
 80253e8:	d038      	beq.n	802545c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80253ea:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80253ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80253f2:	441d      	add	r5, r3
 80253f4:	3601      	adds	r6, #1
 80253f6:	d435      	bmi.n	8025464 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80253f8:	45b0      	cmp	r8, r6
 80253fa:	dd33      	ble.n	8025464 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80253fc:	b390      	cbz	r0, 8025464 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80253fe:	2c00      	cmp	r4, #0
 8025400:	db2e      	blt.n	8025460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8025402:	45a4      	cmp	ip, r4
 8025404:	dd2c      	ble.n	8025460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8025406:	f81e 600c 	ldrb.w	r6, [lr, ip]
 802540a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802540e:	441e      	add	r6, r3
 8025410:	1c62      	adds	r2, r4, #1
 8025412:	d42a      	bmi.n	802546a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8025414:	4594      	cmp	ip, r2
 8025416:	dd28      	ble.n	802546a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8025418:	f1ba 0f00 	cmp.w	sl, #0
 802541c:	d025      	beq.n	802546a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802541e:	44f4      	add	ip, lr
 8025420:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8025424:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025428:	4413      	add	r3, r2
 802542a:	f1ba 0f0f 	cmp.w	sl, #15
 802542e:	f897 8000 	ldrb.w	r8, [r7]
 8025432:	f895 9000 	ldrb.w	r9, [r5]
 8025436:	f896 e000 	ldrb.w	lr, [r6]
 802543a:	f893 c000 	ldrb.w	ip, [r3]
 802543e:	d801      	bhi.n	8025444 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8025440:	280f      	cmp	r0, #15
 8025442:	d914      	bls.n	802546e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8025444:	4b29      	ldr	r3, [pc, #164]	; (80254ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8025446:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802544a:	4a29      	ldr	r2, [pc, #164]	; (80254f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 802544c:	4829      	ldr	r0, [pc, #164]	; (80254f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 802544e:	f005 ff39 	bl	802b2c4 <__assert_func>
 8025452:	af01      	add	r7, sp, #4
 8025454:	e7c2      	b.n	80253dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8025456:	ad01      	add	r5, sp, #4
 8025458:	462f      	mov	r7, r5
 802545a:	e7cb      	b.n	80253f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802545c:	ad01      	add	r5, sp, #4
 802545e:	e7c9      	b.n	80253f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8025460:	ae01      	add	r6, sp, #4
 8025462:	e7d5      	b.n	8025410 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8025464:	ab01      	add	r3, sp, #4
 8025466:	461e      	mov	r6, r3
 8025468:	e7df      	b.n	802542a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802546a:	ab01      	add	r3, sp, #4
 802546c:	e7dd      	b.n	802542a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802546e:	fa1f f48a 	uxth.w	r4, sl
 8025472:	b280      	uxth	r0, r0
 8025474:	fb04 fa00 	mul.w	sl, r4, r0
 8025478:	0124      	lsls	r4, r4, #4
 802547a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802547e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8025482:	b282      	uxth	r2, r0
 8025484:	eba4 000a 	sub.w	r0, r4, sl
 8025488:	ebab 0b02 	sub.w	fp, fp, r2
 802548c:	b280      	uxth	r0, r0
 802548e:	fa1f fb8b 	uxth.w	fp, fp
 8025492:	fb00 f909 	mul.w	r9, r0, r9
 8025496:	fb0b 9808 	mla	r8, fp, r8, r9
 802549a:	fb02 8e0e 	mla	lr, r2, lr, r8
 802549e:	fb0a ec0c 	mla	ip, sl, ip, lr
 80254a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80254a6:	f881 c000 	strb.w	ip, [r1]
 80254aa:	786c      	ldrb	r4, [r5, #1]
 80254ac:	f897 c001 	ldrb.w	ip, [r7, #1]
 80254b0:	4344      	muls	r4, r0
 80254b2:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80254b6:	7874      	ldrb	r4, [r6, #1]
 80254b8:	fb02 cc04 	mla	ip, r2, r4, ip
 80254bc:	785c      	ldrb	r4, [r3, #1]
 80254be:	fb0a c404 	mla	r4, sl, r4, ip
 80254c2:	1224      	asrs	r4, r4, #8
 80254c4:	704c      	strb	r4, [r1, #1]
 80254c6:	78ad      	ldrb	r5, [r5, #2]
 80254c8:	78bc      	ldrb	r4, [r7, #2]
 80254ca:	4368      	muls	r0, r5
 80254cc:	fb0b 0b04 	mla	fp, fp, r4, r0
 80254d0:	78b0      	ldrb	r0, [r6, #2]
 80254d2:	fb02 b000 	mla	r0, r2, r0, fp
 80254d6:	789a      	ldrb	r2, [r3, #2]
 80254d8:	fb0a 0a02 	mla	sl, sl, r2, r0
 80254dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80254e0:	f881 a002 	strb.w	sl, [r1, #2]
 80254e4:	b003      	add	sp, #12
 80254e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254ea:	bf00      	nop
 80254ec:	08030f3f 	.word	0x08030f3f
 80254f0:	08031436 	.word	0x08031436
 80254f4:	08031008 	.word	0x08031008

080254f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80254f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254fc:	ed2d 8b0a 	vpush	{d8-d12}
 8025500:	b08f      	sub	sp, #60	; 0x3c
 8025502:	eeb0 aa40 	vmov.f32	s20, s0
 8025506:	eef0 9a60 	vmov.f32	s19, s1
 802550a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 802550c:	eeb0 9a41 	vmov.f32	s18, s2
 8025510:	9307      	str	r3, [sp, #28]
 8025512:	eeb0 8a62 	vmov.f32	s16, s5
 8025516:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 802551a:	eef0 8a43 	vmov.f32	s17, s6
 802551e:	900d      	str	r0, [sp, #52]	; 0x34
 8025520:	eeb0 ca44 	vmov.f32	s24, s8
 8025524:	6860      	ldr	r0, [r4, #4]
 8025526:	eef0 ba64 	vmov.f32	s23, s9
 802552a:	9309      	str	r3, [sp, #36]	; 0x24
 802552c:	eeb0 ba45 	vmov.f32	s22, s10
 8025530:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8025534:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8025538:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 802553c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8025540:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025542:	fb00 1303 	mla	r3, r0, r3, r1
 8025546:	6821      	ldr	r1, [r4, #0]
 8025548:	6854      	ldr	r4, [r2, #4]
 802554a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802554e:	3404      	adds	r4, #4
 8025550:	18cb      	adds	r3, r1, r3
 8025552:	9308      	str	r3, [sp, #32]
 8025554:	6813      	ldr	r3, [r2, #0]
 8025556:	930a      	str	r3, [sp, #40]	; 0x28
 8025558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802555a:	2b00      	cmp	r3, #0
 802555c:	dc03      	bgt.n	8025566 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802555e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025560:	2b00      	cmp	r3, #0
 8025562:	f340 81d2 	ble.w	802590a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8025566:	9b07      	ldr	r3, [sp, #28]
 8025568:	2b00      	cmp	r3, #0
 802556a:	f340 80e3 	ble.w	8025734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 802556e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025570:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025572:	1412      	asrs	r2, r2, #16
 8025574:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025578:	d42f      	bmi.n	80255da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802557a:	1c51      	adds	r1, r2, #1
 802557c:	428d      	cmp	r5, r1
 802557e:	dd2f      	ble.n	80255e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8025580:	2b00      	cmp	r3, #0
 8025582:	db2d      	blt.n	80255e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8025584:	1c59      	adds	r1, r3, #1
 8025586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025588:	4288      	cmp	r0, r1
 802558a:	dd29      	ble.n	80255e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802558c:	9b07      	ldr	r3, [sp, #28]
 802558e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025590:	3b01      	subs	r3, #1
 8025592:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8025594:	fb02 1203 	mla	r2, r2, r3, r1
 8025598:	1412      	asrs	r2, r2, #16
 802559a:	d42b      	bmi.n	80255f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802559c:	3201      	adds	r2, #1
 802559e:	4295      	cmp	r5, r2
 80255a0:	dd28      	ble.n	80255f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80255a4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80255a6:	fb02 1303 	mla	r3, r2, r3, r1
 80255aa:	141b      	asrs	r3, r3, #16
 80255ac:	d422      	bmi.n	80255f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255ae:	3301      	adds	r3, #1
 80255b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80255b2:	429a      	cmp	r2, r3
 80255b4:	dd1e      	ble.n	80255f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255b6:	9b08      	ldr	r3, [sp, #32]
 80255b8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80255bc:	f103 0803 	add.w	r8, r3, #3
 80255c0:	f1ba 0f00 	cmp.w	sl, #0
 80255c4:	f300 8119 	bgt.w	80257fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 80255c8:	9b07      	ldr	r3, [sp, #28]
 80255ca:	9a08      	ldr	r2, [sp, #32]
 80255cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80255d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255d4:	441a      	add	r2, r3
 80255d6:	9208      	str	r2, [sp, #32]
 80255d8:	e0ae      	b.n	8025738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 80255da:	1c51      	adds	r1, r2, #1
 80255dc:	f040 809b 	bne.w	8025716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80255e0:	42aa      	cmp	r2, r5
 80255e2:	f280 8098 	bge.w	8025716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80255e6:	1c5a      	adds	r2, r3, #1
 80255e8:	f2c0 8095 	blt.w	8025716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80255ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80255ee:	4293      	cmp	r3, r2
 80255f0:	f280 8091 	bge.w	8025716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80255f4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80255f8:	f1bb 0f00 	cmp.w	fp, #0
 80255fc:	dde4      	ble.n	80255c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80255fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025600:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025602:	141a      	asrs	r2, r3, #16
 8025604:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025606:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025608:	1400      	asrs	r0, r0, #16
 802560a:	f3c1 3103 	ubfx	r1, r1, #12, #4
 802560e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025612:	f100 80dc 	bmi.w	80257ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8025616:	1c47      	adds	r7, r0, #1
 8025618:	42bd      	cmp	r5, r7
 802561a:	f340 80da 	ble.w	80257d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 802561e:	2a00      	cmp	r2, #0
 8025620:	f2c0 80d7 	blt.w	80257d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8025624:	f102 0c01 	add.w	ip, r2, #1
 8025628:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802562a:	4567      	cmp	r7, ip
 802562c:	f340 80d1 	ble.w	80257d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8025630:	fb02 0005 	mla	r0, r2, r5, r0
 8025634:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025638:	f817 8000 	ldrb.w	r8, [r7, r0]
 802563c:	4402      	add	r2, r0
 802563e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025642:	eb04 0c08 	add.w	ip, r4, r8
 8025646:	2b00      	cmp	r3, #0
 8025648:	f000 80b3 	beq.w	80257b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 802564c:	7857      	ldrb	r7, [r2, #1]
 802564e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025652:	4427      	add	r7, r4
 8025654:	2900      	cmp	r1, #0
 8025656:	f000 80b4 	beq.w	80257c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 802565a:	1950      	adds	r0, r2, r5
 802565c:	5d52      	ldrb	r2, [r2, r5]
 802565e:	7840      	ldrb	r0, [r0, #1]
 8025660:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025668:	4422      	add	r2, r4
 802566a:	4420      	add	r0, r4
 802566c:	b29b      	uxth	r3, r3
 802566e:	f814 a008 	ldrb.w	sl, [r4, r8]
 8025672:	b289      	uxth	r1, r1
 8025674:	f897 8000 	ldrb.w	r8, [r7]
 8025678:	fb03 f901 	mul.w	r9, r3, r1
 802567c:	011b      	lsls	r3, r3, #4
 802567e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025682:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025686:	eba3 0309 	sub.w	r3, r3, r9
 802568a:	b289      	uxth	r1, r1
 802568c:	b29b      	uxth	r3, r3
 802568e:	ebae 0e01 	sub.w	lr, lr, r1
 8025692:	fb03 f808 	mul.w	r8, r3, r8
 8025696:	fa1f fe8e 	uxth.w	lr, lr
 802569a:	fb0e 880a 	mla	r8, lr, sl, r8
 802569e:	f892 a000 	ldrb.w	sl, [r2]
 80256a2:	fb01 880a 	mla	r8, r1, sl, r8
 80256a6:	f890 a000 	ldrb.w	sl, [r0]
 80256aa:	fb09 880a 	mla	r8, r9, sl, r8
 80256ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 80256b2:	f886 8000 	strb.w	r8, [r6]
 80256b6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80256ba:	f89c a001 	ldrb.w	sl, [ip, #1]
 80256be:	fb03 f808 	mul.w	r8, r3, r8
 80256c2:	fb0e 880a 	mla	r8, lr, sl, r8
 80256c6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80256ca:	fb01 880a 	mla	r8, r1, sl, r8
 80256ce:	f890 a001 	ldrb.w	sl, [r0, #1]
 80256d2:	fb09 880a 	mla	r8, r9, sl, r8
 80256d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80256da:	f886 8001 	strb.w	r8, [r6, #1]
 80256de:	78bf      	ldrb	r7, [r7, #2]
 80256e0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80256e4:	437b      	muls	r3, r7
 80256e6:	7892      	ldrb	r2, [r2, #2]
 80256e8:	fb0e 330c 	mla	r3, lr, ip, r3
 80256ec:	fb01 3102 	mla	r1, r1, r2, r3
 80256f0:	7882      	ldrb	r2, [r0, #2]
 80256f2:	fb09 1902 	mla	r9, r9, r2, r1
 80256f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80256fa:	f886 9002 	strb.w	r9, [r6, #2]
 80256fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025700:	3603      	adds	r6, #3
 8025702:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025704:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025708:	4413      	add	r3, r2
 802570a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802570c:	9323      	str	r3, [sp, #140]	; 0x8c
 802570e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025710:	4413      	add	r3, r2
 8025712:	9324      	str	r3, [sp, #144]	; 0x90
 8025714:	e770      	b.n	80255f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8025716:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025718:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802571a:	4413      	add	r3, r2
 802571c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802571e:	9323      	str	r3, [sp, #140]	; 0x8c
 8025720:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025722:	4413      	add	r3, r2
 8025724:	9324      	str	r3, [sp, #144]	; 0x90
 8025726:	9b07      	ldr	r3, [sp, #28]
 8025728:	3b01      	subs	r3, #1
 802572a:	9307      	str	r3, [sp, #28]
 802572c:	9b08      	ldr	r3, [sp, #32]
 802572e:	3303      	adds	r3, #3
 8025730:	9308      	str	r3, [sp, #32]
 8025732:	e718      	b.n	8025566 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8025734:	f47f af2a 	bne.w	802558c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802573a:	2b00      	cmp	r3, #0
 802573c:	f340 80e5 	ble.w	802590a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8025740:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025746:	ee79 9aab 	vadd.f32	s19, s19, s23
 802574a:	eef0 6a48 	vmov.f32	s13, s16
 802574e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025752:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025756:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802575a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 802575e:	eef0 6a68 	vmov.f32	s13, s17
 8025762:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025766:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 802576a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802576e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025772:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025776:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802577a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802577e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025782:	ee18 2a10 	vmov	r2, s16
 8025786:	eeb0 8a47 	vmov.f32	s16, s14
 802578a:	fb92 f3f3 	sdiv	r3, r2, r3
 802578e:	ee18 2a90 	vmov	r2, s17
 8025792:	9325      	str	r3, [sp, #148]	; 0x94
 8025794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025796:	eef0 8a67 	vmov.f32	s17, s15
 802579a:	fb92 f3f3 	sdiv	r3, r2, r3
 802579e:	9326      	str	r3, [sp, #152]	; 0x98
 80257a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80257a4:	3b01      	subs	r3, #1
 80257a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80257a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80257aa:	bf08      	it	eq
 80257ac:	4613      	moveq	r3, r2
 80257ae:	9307      	str	r3, [sp, #28]
 80257b0:	e6d2      	b.n	8025558 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80257b2:	b149      	cbz	r1, 80257c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80257b4:	5d52      	ldrb	r2, [r2, r5]
 80257b6:	4660      	mov	r0, ip
 80257b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80257bc:	4422      	add	r2, r4
 80257be:	4667      	mov	r7, ip
 80257c0:	e754      	b.n	802566c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80257c2:	4660      	mov	r0, ip
 80257c4:	4662      	mov	r2, ip
 80257c6:	e751      	b.n	802566c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80257c8:	4660      	mov	r0, ip
 80257ca:	4662      	mov	r2, ip
 80257cc:	e7f7      	b.n	80257be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 80257ce:	1c47      	adds	r7, r0, #1
 80257d0:	d195      	bne.n	80256fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80257d2:	4285      	cmp	r5, r0
 80257d4:	dd93      	ble.n	80256fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80257d6:	1c57      	adds	r7, r2, #1
 80257d8:	db91      	blt.n	80256fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80257da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80257dc:	4297      	cmp	r7, r2
 80257de:	dd8e      	ble.n	80256fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80257e0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80257e4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80257e8:	e9cd 5700 	strd	r5, r7, [sp]
 80257ec:	4623      	mov	r3, r4
 80257ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80257f0:	4631      	mov	r1, r6
 80257f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80257f4:	f7ff fdca 	bl	802538c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80257f8:	e781      	b.n	80256fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80257fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80257fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80257fe:	1410      	asrs	r0, r2, #16
 8025800:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025804:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025806:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025808:	1412      	asrs	r2, r2, #16
 802580a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802580e:	fb05 2000 	mla	r0, r5, r0, r2
 8025812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025814:	f816 e000 	ldrb.w	lr, [r6, r0]
 8025818:	4402      	add	r2, r0
 802581a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802581e:	eb04 070e 	add.w	r7, r4, lr
 8025822:	2b00      	cmp	r3, #0
 8025824:	d063      	beq.n	80258ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8025826:	7856      	ldrb	r6, [r2, #1]
 8025828:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802582c:	4426      	add	r6, r4
 802582e:	2900      	cmp	r1, #0
 8025830:	d065      	beq.n	80258fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8025832:	1950      	adds	r0, r2, r5
 8025834:	5d52      	ldrb	r2, [r2, r5]
 8025836:	7840      	ldrb	r0, [r0, #1]
 8025838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802583c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025840:	4422      	add	r2, r4
 8025842:	4420      	add	r0, r4
 8025844:	b29b      	uxth	r3, r3
 8025846:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802584a:	b289      	uxth	r1, r1
 802584c:	f896 e000 	ldrb.w	lr, [r6]
 8025850:	f108 0803 	add.w	r8, r8, #3
 8025854:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025858:	fb03 f901 	mul.w	r9, r3, r1
 802585c:	011b      	lsls	r3, r3, #4
 802585e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025862:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025866:	eba3 0309 	sub.w	r3, r3, r9
 802586a:	b289      	uxth	r1, r1
 802586c:	b29b      	uxth	r3, r3
 802586e:	ebac 0c01 	sub.w	ip, ip, r1
 8025872:	fb03 fe0e 	mul.w	lr, r3, lr
 8025876:	fa1f fc8c 	uxth.w	ip, ip
 802587a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802587e:	f892 b000 	ldrb.w	fp, [r2]
 8025882:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025886:	f890 b000 	ldrb.w	fp, [r0]
 802588a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802588e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025892:	f808 ec06 	strb.w	lr, [r8, #-6]
 8025896:	f896 e001 	ldrb.w	lr, [r6, #1]
 802589a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802589e:	fb03 fe0e 	mul.w	lr, r3, lr
 80258a2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80258a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80258aa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80258ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 80258b2:	fb09 ee0b 	mla	lr, r9, fp, lr
 80258b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80258ba:	f808 ec05 	strb.w	lr, [r8, #-5]
 80258be:	78b6      	ldrb	r6, [r6, #2]
 80258c0:	78bf      	ldrb	r7, [r7, #2]
 80258c2:	4373      	muls	r3, r6
 80258c4:	7896      	ldrb	r6, [r2, #2]
 80258c6:	7882      	ldrb	r2, [r0, #2]
 80258c8:	fb0c 3307 	mla	r3, ip, r7, r3
 80258cc:	fb01 3306 	mla	r3, r1, r6, r3
 80258d0:	fb09 3902 	mla	r9, r9, r2, r3
 80258d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80258d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80258d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80258dc:	4413      	add	r3, r2
 80258de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80258e0:	f808 9c04 	strb.w	r9, [r8, #-4]
 80258e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80258e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80258e8:	4413      	add	r3, r2
 80258ea:	9324      	str	r3, [sp, #144]	; 0x90
 80258ec:	e668      	b.n	80255c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80258ee:	b149      	cbz	r1, 8025904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 80258f0:	5d52      	ldrb	r2, [r2, r5]
 80258f2:	4638      	mov	r0, r7
 80258f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80258f8:	4422      	add	r2, r4
 80258fa:	463e      	mov	r6, r7
 80258fc:	e7a2      	b.n	8025844 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80258fe:	4638      	mov	r0, r7
 8025900:	463a      	mov	r2, r7
 8025902:	e79f      	b.n	8025844 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8025904:	4638      	mov	r0, r7
 8025906:	463a      	mov	r2, r7
 8025908:	e7f7      	b.n	80258fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802590a:	b00f      	add	sp, #60	; 0x3c
 802590c:	ecbd 8b0a 	vpop	{d8-d12}
 8025910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025914 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8025914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025918:	b087      	sub	sp, #28
 802591a:	7888      	ldrb	r0, [r1, #2]
 802591c:	9002      	str	r0, [sp, #8]
 802591e:	7848      	ldrb	r0, [r1, #1]
 8025920:	9e02      	ldr	r6, [sp, #8]
 8025922:	9003      	str	r0, [sp, #12]
 8025924:	7808      	ldrb	r0, [r1, #0]
 8025926:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802592a:	9004      	str	r0, [sp, #16]
 802592c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025930:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8025934:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8025938:	9e03      	ldr	r6, [sp, #12]
 802593a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 802593e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8025942:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8025946:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 802594a:	fb04 7508 	mla	r5, r4, r8, r7
 802594e:	2c00      	cmp	r4, #0
 8025950:	eb02 0905 	add.w	r9, r2, r5
 8025954:	db45      	blt.n	80259e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8025956:	45a2      	cmp	sl, r4
 8025958:	dd43      	ble.n	80259e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802595a:	2f00      	cmp	r7, #0
 802595c:	db3f      	blt.n	80259de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 802595e:	45b8      	cmp	r8, r7
 8025960:	dd3d      	ble.n	80259de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8025962:	5d52      	ldrb	r2, [r2, r5]
 8025964:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025968:	1c7a      	adds	r2, r7, #1
 802596a:	d43d      	bmi.n	80259e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 802596c:	4590      	cmp	r8, r2
 802596e:	dd3b      	ble.n	80259e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8025970:	f1bc 0f00 	cmp.w	ip, #0
 8025974:	d038      	beq.n	80259e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8025976:	f899 2001 	ldrb.w	r2, [r9, #1]
 802597a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802597e:	3401      	adds	r4, #1
 8025980:	d436      	bmi.n	80259f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8025982:	45a2      	cmp	sl, r4
 8025984:	dd34      	ble.n	80259f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8025986:	f1be 0f00 	cmp.w	lr, #0
 802598a:	d031      	beq.n	80259f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 802598c:	2f00      	cmp	r7, #0
 802598e:	db2d      	blt.n	80259ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8025990:	45b8      	cmp	r8, r7
 8025992:	dd2b      	ble.n	80259ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8025994:	f819 2008 	ldrb.w	r2, [r9, r8]
 8025998:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802599c:	3701      	adds	r7, #1
 802599e:	d409      	bmi.n	80259b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80259a0:	45b8      	cmp	r8, r7
 80259a2:	dd07      	ble.n	80259b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80259a4:	f1bc 0f00 	cmp.w	ip, #0
 80259a8:	d004      	beq.n	80259b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80259aa:	44c8      	add	r8, r9
 80259ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80259b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80259b4:	f1bc 0f0f 	cmp.w	ip, #15
 80259b8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80259bc:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80259c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80259c4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80259c8:	d802      	bhi.n	80259d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 80259ca:	f1be 0f0f 	cmp.w	lr, #15
 80259ce:	d911      	bls.n	80259f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 80259d0:	4b77      	ldr	r3, [pc, #476]	; (8025bb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 80259d2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80259d6:	4a77      	ldr	r2, [pc, #476]	; (8025bb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 80259d8:	4877      	ldr	r0, [pc, #476]	; (8025bb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 80259da:	f005 fc73 	bl	802b2c4 <__assert_func>
 80259de:	4606      	mov	r6, r0
 80259e0:	e7c2      	b.n	8025968 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 80259e2:	4605      	mov	r5, r0
 80259e4:	4606      	mov	r6, r0
 80259e6:	e7ca      	b.n	802597e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 80259e8:	4605      	mov	r5, r0
 80259ea:	e7c8      	b.n	802597e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 80259ec:	4604      	mov	r4, r0
 80259ee:	e7d5      	b.n	802599c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 80259f0:	4604      	mov	r4, r0
 80259f2:	e7df      	b.n	80259b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80259f4:	fa1f fc8c 	uxth.w	ip, ip
 80259f8:	fa1f f28e 	uxth.w	r2, lr
 80259fc:	fb02 fe0c 	mul.w	lr, r2, ip
 8025a00:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025a04:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8025a08:	ebac 070e 	sub.w	r7, ip, lr
 8025a0c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8025a10:	b292      	uxth	r2, r2
 8025a12:	b2bf      	uxth	r7, r7
 8025a14:	1a9b      	subs	r3, r3, r2
 8025a16:	fb07 fc0a 	mul.w	ip, r7, sl
 8025a1a:	b29b      	uxth	r3, r3
 8025a1c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025a20:	9301      	str	r3, [sp, #4]
 8025a22:	fb02 cc09 	mla	ip, r2, r9, ip
 8025a26:	fb0e cc08 	mla	ip, lr, r8, ip
 8025a2a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025a2e:	9305      	str	r3, [sp, #20]
 8025a30:	2b00      	cmp	r3, #0
 8025a32:	f000 80b9 	beq.w	8025ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8025a36:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025a3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025a3e:	fb0b fc0c 	mul.w	ip, fp, ip
 8025a42:	fb0b f606 	mul.w	r6, fp, r6
 8025a46:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025a4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025a4e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025a52:	44dc      	add	ip, fp
 8025a54:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025a58:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025a5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a60:	fb0a fb0b 	mul.w	fp, sl, fp
 8025a64:	fb0a fa05 	mul.w	sl, sl, r5
 8025a68:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8025a6c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025a70:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8025a74:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025a78:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025a7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025a80:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8025a84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a88:	0a36      	lsrs	r6, r6, #8
 8025a8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a8e:	44dc      	add	ip, fp
 8025a90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025a94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025a98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a9c:	fb09 fb0b 	mul.w	fp, r9, fp
 8025aa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025aa4:	fb09 f904 	mul.w	r9, r9, r4
 8025aa8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025aac:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8025ab0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ab4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025ab8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025abc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025ac0:	fb0c fc07 	mul.w	ip, ip, r7
 8025ac4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025ac8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8025acc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025ad0:	445d      	add	r5, fp
 8025ad2:	fb08 f404 	mul.w	r4, r8, r4
 8025ad6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ada:	fb08 f800 	mul.w	r8, r8, r0
 8025ade:	0a2d      	lsrs	r5, r5, #8
 8025ae0:	0a20      	lsrs	r0, r4, #8
 8025ae2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025ae6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025aea:	fb07 f70a 	mul.w	r7, r7, sl
 8025aee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025af2:	4404      	add	r4, r0
 8025af4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025af8:	0a24      	lsrs	r4, r4, #8
 8025afa:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8025afe:	9801      	ldr	r0, [sp, #4]
 8025b00:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025b04:	fb03 cc00 	mla	ip, r3, r0, ip
 8025b08:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025b0c:	fb00 7606 	mla	r6, r0, r6, r7
 8025b10:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8025b14:	fb04 cc0e 	mla	ip, r4, lr, ip
 8025b18:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025b1c:	b280      	uxth	r0, r0
 8025b1e:	9c04      	ldr	r4, [sp, #16]
 8025b20:	fb05 cc02 	mla	ip, r5, r2, ip
 8025b24:	fb0e 6e08 	mla	lr, lr, r8, r6
 8025b28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b2c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8025b30:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8025b34:	fb02 ec0c 	mla	ip, r2, ip, lr
 8025b38:	9a05      	ldr	r2, [sp, #20]
 8025b3a:	4342      	muls	r2, r0
 8025b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b40:	1c53      	adds	r3, r2, #1
 8025b42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025b46:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b4a:	ea45 0c0c 	orr.w	ip, r5, ip
 8025b4e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025b52:	fa5f f28c 	uxtb.w	r2, ip
 8025b56:	b2db      	uxtb	r3, r3
 8025b58:	fb14 f403 	smulbb	r4, r4, r3
 8025b5c:	fb02 4200 	mla	r2, r2, r0, r4
 8025b60:	b292      	uxth	r2, r2
 8025b62:	1c54      	adds	r4, r2, #1
 8025b64:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025b68:	9c03      	ldr	r4, [sp, #12]
 8025b6a:	fb14 f403 	smulbb	r4, r4, r3
 8025b6e:	1212      	asrs	r2, r2, #8
 8025b70:	700a      	strb	r2, [r1, #0]
 8025b72:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8025b76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025b7a:	fb02 4200 	mla	r2, r2, r0, r4
 8025b7e:	b292      	uxth	r2, r2
 8025b80:	1c54      	adds	r4, r2, #1
 8025b82:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025b86:	1212      	asrs	r2, r2, #8
 8025b88:	704a      	strb	r2, [r1, #1]
 8025b8a:	9a02      	ldr	r2, [sp, #8]
 8025b8c:	fb12 f303 	smulbb	r3, r2, r3
 8025b90:	fb0c 3c00 	mla	ip, ip, r0, r3
 8025b94:	fa1f fc8c 	uxth.w	ip, ip
 8025b98:	f10c 0301 	add.w	r3, ip, #1
 8025b9c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025ba0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025ba4:	f881 c002 	strb.w	ip, [r1, #2]
 8025ba8:	b007      	add	sp, #28
 8025baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bae:	bf00      	nop
 8025bb0:	08030f3f 	.word	0x08030f3f
 8025bb4:	08031436 	.word	0x08031436
 8025bb8:	08031008 	.word	0x08031008

08025bbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bc0:	ed2d 8b08 	vpush	{d8-d11}
 8025bc4:	b09b      	sub	sp, #108	; 0x6c
 8025bc6:	eeb0 aa40 	vmov.f32	s20, s0
 8025bca:	eef0 9a60 	vmov.f32	s19, s1
 8025bce:	930a      	str	r3, [sp, #40]	; 0x28
 8025bd0:	eeb0 9a41 	vmov.f32	s18, s2
 8025bd4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8025bd8:	eeb0 8a62 	vmov.f32	s16, s5
 8025bdc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8025bde:	eef0 8a43 	vmov.f32	s17, s6
 8025be2:	9312      	str	r3, [sp, #72]	; 0x48
 8025be4:	eef0 ba44 	vmov.f32	s23, s8
 8025be8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8025bec:	eeb0 ba64 	vmov.f32	s22, s9
 8025bf0:	9019      	str	r0, [sp, #100]	; 0x64
 8025bf2:	eef0 aa45 	vmov.f32	s21, s10
 8025bf6:	9114      	str	r1, [sp, #80]	; 0x50
 8025bf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8025bfa:	6868      	ldr	r0, [r5, #4]
 8025bfc:	9218      	str	r2, [sp, #96]	; 0x60
 8025bfe:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8025c00:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8025c04:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025c08:	fb00 1303 	mla	r3, r0, r3, r1
 8025c0c:	6829      	ldr	r1, [r5, #0]
 8025c0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025c12:	18cb      	adds	r3, r1, r3
 8025c14:	930d      	str	r3, [sp, #52]	; 0x34
 8025c16:	6813      	ldr	r3, [r2, #0]
 8025c18:	9313      	str	r3, [sp, #76]	; 0x4c
 8025c1a:	6853      	ldr	r3, [r2, #4]
 8025c1c:	3304      	adds	r3, #4
 8025c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8025c20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025c22:	2b00      	cmp	r3, #0
 8025c24:	dc03      	bgt.n	8025c2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025c26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	f340 8352 	ble.w	80262d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8025c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c30:	2b00      	cmp	r3, #0
 8025c32:	f340 81a2 	ble.w	8025f7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8025c36:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025c38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025c3a:	1412      	asrs	r2, r2, #16
 8025c3c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025c40:	d431      	bmi.n	8025ca6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8025c42:	1c51      	adds	r1, r2, #1
 8025c44:	428c      	cmp	r4, r1
 8025c46:	dd31      	ble.n	8025cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	db2f      	blt.n	8025cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025c4c:	1c59      	adds	r1, r3, #1
 8025c4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025c50:	4288      	cmp	r0, r1
 8025c52:	dd2b      	ble.n	8025cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c56:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025c58:	3b01      	subs	r3, #1
 8025c5a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8025c5c:	fb02 1203 	mla	r2, r2, r3, r1
 8025c60:	1412      	asrs	r2, r2, #16
 8025c62:	d42d      	bmi.n	8025cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025c64:	3201      	adds	r2, #1
 8025c66:	4294      	cmp	r4, r2
 8025c68:	dd2a      	ble.n	8025cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025c6a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025c6c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8025c6e:	fb02 1303 	mla	r3, r2, r3, r1
 8025c72:	141b      	asrs	r3, r3, #16
 8025c74:	d424      	bmi.n	8025cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025c76:	3301      	adds	r3, #1
 8025c78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025c7a:	429a      	cmp	r2, r3
 8025c7c:	dd20      	ble.n	8025cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025c80:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8025c84:	f103 0e03 	add.w	lr, r3, #3
 8025c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8025c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	f300 81de 	bgt.w	8026050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8025c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025c98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025c9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ca0:	441a      	add	r2, r3
 8025ca2:	920d      	str	r2, [sp, #52]	; 0x34
 8025ca4:	e16b      	b.n	8025f7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8025ca6:	1c51      	adds	r1, r2, #1
 8025ca8:	f040 8158 	bne.w	8025f5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025cac:	42a2      	cmp	r2, r4
 8025cae:	f280 8155 	bge.w	8025f5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025cb2:	1c5a      	adds	r2, r3, #1
 8025cb4:	f2c0 8152 	blt.w	8025f5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025cba:	4293      	cmp	r3, r2
 8025cbc:	f280 814e 	bge.w	8025f5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025cc2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025cc4:	9316      	str	r3, [sp, #88]	; 0x58
 8025cc6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8025cca:	9315      	str	r3, [sp, #84]	; 0x54
 8025ccc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	dde0      	ble.n	8025c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8025cd2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025cd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025cd6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8025cda:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025cdc:	141b      	asrs	r3, r3, #16
 8025cde:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025ce2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025ce4:	1412      	asrs	r2, r2, #16
 8025ce6:	f100 819a 	bmi.w	802601e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8025cea:	1c55      	adds	r5, r2, #1
 8025cec:	42ac      	cmp	r4, r5
 8025cee:	f340 8198 	ble.w	8026022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	f2c0 8195 	blt.w	8026022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025cf8:	1c5d      	adds	r5, r3, #1
 8025cfa:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8025cfc:	42af      	cmp	r7, r5
 8025cfe:	f340 8190 	ble.w	8026022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8025d02:	fb03 2304 	mla	r3, r3, r4, r2
 8025d06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025d08:	18d5      	adds	r5, r2, r3
 8025d0a:	5cd3      	ldrb	r3, [r2, r3]
 8025d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025d12:	0e1f      	lsrs	r7, r3, #24
 8025d14:	2800      	cmp	r0, #0
 8025d16:	f000 8171 	beq.w	8025ffc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8025d1a:	f895 c001 	ldrb.w	ip, [r5, #1]
 8025d1e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8025d22:	920e      	str	r2, [sp, #56]	; 0x38
 8025d24:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025d28:	2900      	cmp	r1, #0
 8025d2a:	f000 8172 	beq.w	8026012 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8025d2e:	eb05 0c04 	add.w	ip, r5, r4
 8025d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025d34:	5d2d      	ldrb	r5, [r5, r4]
 8025d36:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8025d3a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8025d3e:	950b      	str	r5, [sp, #44]	; 0x2c
 8025d40:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025d46:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025d4a:	0e15      	lsrs	r5, r2, #24
 8025d4c:	920f      	str	r2, [sp, #60]	; 0x3c
 8025d4e:	b280      	uxth	r0, r0
 8025d50:	b289      	uxth	r1, r1
 8025d52:	fb00 fa01 	mul.w	sl, r0, r1
 8025d56:	0100      	lsls	r0, r0, #4
 8025d58:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8025d5c:	eba0 080a 	sub.w	r8, r0, sl
 8025d60:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8025d64:	b289      	uxth	r1, r1
 8025d66:	fa1f f888 	uxth.w	r8, r8
 8025d6a:	1a52      	subs	r2, r2, r1
 8025d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8025d70:	b292      	uxth	r2, r2
 8025d72:	fb02 0007 	mla	r0, r2, r7, r0
 8025d76:	fb01 0009 	mla	r0, r1, r9, r0
 8025d7a:	fb0a 0005 	mla	r0, sl, r5, r0
 8025d7e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025d82:	2800      	cmp	r0, #0
 8025d84:	f000 80dd 	beq.w	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025d88:	2fff      	cmp	r7, #255	; 0xff
 8025d8a:	d01a      	beq.n	8025dc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8025d8c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025d90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d94:	fb07 fc0c 	mul.w	ip, r7, ip
 8025d98:	435f      	muls	r7, r3
 8025d9a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025d9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025da2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8025da6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025daa:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8025dae:	4463      	add	r3, ip
 8025db0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025db4:	0a1b      	lsrs	r3, r3, #8
 8025db6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025dba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025dbe:	ea43 030b 	orr.w	r3, r3, fp
 8025dc2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025dc6:	d01e      	beq.n	8025e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8025dc8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025dca:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8025dce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025dd2:	fb0e fb0b 	mul.w	fp, lr, fp
 8025dd6:	fb0e fe07 	mul.w	lr, lr, r7
 8025dda:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025dde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025de2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025de6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025dea:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025dee:	44dc      	add	ip, fp
 8025df0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025df8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025dfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e00:	ea4c 070e 	orr.w	r7, ip, lr
 8025e04:	970e      	str	r7, [sp, #56]	; 0x38
 8025e06:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025e0a:	d01e      	beq.n	8025e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8025e0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025e0e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025e12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025e16:	fb09 fe0e 	mul.w	lr, r9, lr
 8025e1a:	fb09 f907 	mul.w	r9, r9, r7
 8025e1e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025e22:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025e26:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025e2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e2e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025e32:	44f4      	add	ip, lr
 8025e34:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e3c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025e40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e44:	ea4c 0709 	orr.w	r7, ip, r9
 8025e48:	970b      	str	r7, [sp, #44]	; 0x2c
 8025e4a:	2dff      	cmp	r5, #255	; 0xff
 8025e4c:	d01c      	beq.n	8025e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8025e4e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025e50:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025e54:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025e58:	fb05 fe0e 	mul.w	lr, r5, lr
 8025e5c:	437d      	muls	r5, r7
 8025e5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025e62:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025e66:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8025e6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e6e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8025e72:	44f4      	add	ip, lr
 8025e74:	0a2d      	lsrs	r5, r5, #8
 8025e76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e7a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025e7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e82:	ea4c 0505 	orr.w	r5, ip, r5
 8025e86:	950f      	str	r5, [sp, #60]	; 0x3c
 8025e88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025e8a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025e8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e92:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025e96:	fb08 f505 	mul.w	r5, r8, r5
 8025e9a:	fb02 5507 	mla	r5, r2, r7, r5
 8025e9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025ea0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025ea4:	fb01 5507 	mla	r5, r1, r7, r5
 8025ea8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025eaa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025eae:	fb0a 5507 	mla	r5, sl, r7, r5
 8025eb2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025eb4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025eb8:	0a2d      	lsrs	r5, r5, #8
 8025eba:	fb08 f807 	mul.w	r8, r8, r7
 8025ebe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025ec2:	fb02 8303 	mla	r3, r2, r3, r8
 8025ec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025ec8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025ecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025ece:	fb01 330c 	mla	r3, r1, ip, r3
 8025ed2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025ed6:	fb0a 3a01 	mla	sl, sl, r1, r3
 8025eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025edc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025ede:	4343      	muls	r3, r0
 8025ee0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ee4:	1c58      	adds	r0, r3, #1
 8025ee6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025eea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025eee:	ea45 050a 	orr.w	r5, r5, sl
 8025ef2:	7833      	ldrb	r3, [r6, #0]
 8025ef4:	b2ea      	uxtb	r2, r5
 8025ef6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025efa:	fb12 f201 	smulbb	r2, r2, r1
 8025efe:	b2c0      	uxtb	r0, r0
 8025f00:	fb03 2300 	mla	r3, r3, r0, r2
 8025f04:	b29b      	uxth	r3, r3
 8025f06:	1c5a      	adds	r2, r3, #1
 8025f08:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025f0c:	7872      	ldrb	r2, [r6, #1]
 8025f0e:	fb12 f200 	smulbb	r2, r2, r0
 8025f12:	121b      	asrs	r3, r3, #8
 8025f14:	7033      	strb	r3, [r6, #0]
 8025f16:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025f1a:	0c2d      	lsrs	r5, r5, #16
 8025f1c:	fb03 2301 	mla	r3, r3, r1, r2
 8025f20:	b29b      	uxth	r3, r3
 8025f22:	1c5a      	adds	r2, r3, #1
 8025f24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025f28:	121b      	asrs	r3, r3, #8
 8025f2a:	7073      	strb	r3, [r6, #1]
 8025f2c:	78b3      	ldrb	r3, [r6, #2]
 8025f2e:	fb13 f000 	smulbb	r0, r3, r0
 8025f32:	fb05 0501 	mla	r5, r5, r1, r0
 8025f36:	b2ad      	uxth	r5, r5
 8025f38:	1c6b      	adds	r3, r5, #1
 8025f3a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025f3e:	122d      	asrs	r5, r5, #8
 8025f40:	70b5      	strb	r5, [r6, #2]
 8025f42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025f44:	3603      	adds	r6, #3
 8025f46:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025f48:	4413      	add	r3, r2
 8025f4a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025f4c:	932d      	str	r3, [sp, #180]	; 0xb4
 8025f4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025f50:	4413      	add	r3, r2
 8025f52:	932e      	str	r3, [sp, #184]	; 0xb8
 8025f54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f56:	3b01      	subs	r3, #1
 8025f58:	9316      	str	r3, [sp, #88]	; 0x58
 8025f5a:	e6b7      	b.n	8025ccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8025f5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025f5e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025f60:	4413      	add	r3, r2
 8025f62:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025f64:	932d      	str	r3, [sp, #180]	; 0xb4
 8025f66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025f68:	4413      	add	r3, r2
 8025f6a:	932e      	str	r3, [sp, #184]	; 0xb8
 8025f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f6e:	3b01      	subs	r3, #1
 8025f70:	930a      	str	r3, [sp, #40]	; 0x28
 8025f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f74:	3303      	adds	r3, #3
 8025f76:	930d      	str	r3, [sp, #52]	; 0x34
 8025f78:	e659      	b.n	8025c2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025f7a:	f47f ae6b 	bne.w	8025c54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8025f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025f80:	2b00      	cmp	r3, #0
 8025f82:	f340 81a6 	ble.w	80262d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8025f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f8c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025f90:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025f94:	eef0 6a48 	vmov.f32	s13, s16
 8025f98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025f9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025fa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025fa4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025fa8:	eef0 6a68 	vmov.f32	s13, s17
 8025fac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025fb0:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8025fb4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025fb8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025fbc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025fc0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025fc4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025fc8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025fcc:	ee18 2a10 	vmov	r2, s16
 8025fd0:	eeb0 8a47 	vmov.f32	s16, s14
 8025fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fd8:	ee18 2a90 	vmov	r2, s17
 8025fdc:	932f      	str	r3, [sp, #188]	; 0xbc
 8025fde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025fe0:	eef0 8a67 	vmov.f32	s17, s15
 8025fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fe8:	9330      	str	r3, [sp, #192]	; 0xc0
 8025fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025fec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025fee:	3b01      	subs	r3, #1
 8025ff0:	9314      	str	r3, [sp, #80]	; 0x50
 8025ff2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ff4:	bf08      	it	eq
 8025ff6:	4613      	moveq	r3, r2
 8025ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8025ffa:	e611      	b.n	8025c20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8025ffc:	b161      	cbz	r1, 8026018 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8025ffe:	5d2a      	ldrb	r2, [r5, r4]
 8026000:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026002:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026006:	25ff      	movs	r5, #255	; 0xff
 8026008:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802600c:	920b      	str	r2, [sp, #44]	; 0x2c
 802600e:	46ae      	mov	lr, r5
 8026010:	e69d      	b.n	8025d4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8026012:	25ff      	movs	r5, #255	; 0xff
 8026014:	46a9      	mov	r9, r5
 8026016:	e69a      	b.n	8025d4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8026018:	25ff      	movs	r5, #255	; 0xff
 802601a:	46a9      	mov	r9, r5
 802601c:	e7f7      	b.n	802600e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 802601e:	1c57      	adds	r7, r2, #1
 8026020:	d18f      	bne.n	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8026022:	4294      	cmp	r4, r2
 8026024:	dd8d      	ble.n	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8026026:	1c5d      	adds	r5, r3, #1
 8026028:	db8b      	blt.n	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802602a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802602c:	429d      	cmp	r5, r3
 802602e:	dd88      	ble.n	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8026030:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8026032:	9202      	str	r2, [sp, #8]
 8026034:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026036:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802603a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802603c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802603e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8026042:	e9cd 4300 	strd	r4, r3, [sp]
 8026046:	4631      	mov	r1, r6
 8026048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802604a:	f7ff fc63 	bl	8025914 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802604e:	e778      	b.n	8025f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8026050:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026052:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026054:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026058:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802605a:	1412      	asrs	r2, r2, #16
 802605c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8026060:	141b      	asrs	r3, r3, #16
 8026062:	fb04 2303 	mla	r3, r4, r3, r2
 8026066:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026068:	18d5      	adds	r5, r2, r3
 802606a:	5cd3      	ldrb	r3, [r2, r3]
 802606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026072:	0e1e      	lsrs	r6, r3, #24
 8026074:	2900      	cmp	r1, #0
 8026076:	f000 811b 	beq.w	80262b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802607a:	786a      	ldrb	r2, [r5, #1]
 802607c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802607e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8026082:	9210      	str	r2, [sp, #64]	; 0x40
 8026084:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8026088:	2800      	cmp	r0, #0
 802608a:	f000 811c 	beq.w	80262c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 802608e:	192a      	adds	r2, r5, r4
 8026090:	5d2d      	ldrb	r5, [r5, r4]
 8026092:	7852      	ldrb	r2, [r2, #1]
 8026094:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8026098:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802609c:	950c      	str	r5, [sp, #48]	; 0x30
 802609e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80260a2:	0e15      	lsrs	r5, r2, #24
 80260a4:	9211      	str	r2, [sp, #68]	; 0x44
 80260a6:	b289      	uxth	r1, r1
 80260a8:	b280      	uxth	r0, r0
 80260aa:	fb01 fa00 	mul.w	sl, r1, r0
 80260ae:	0109      	lsls	r1, r1, #4
 80260b0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80260b4:	eba1 080a 	sub.w	r8, r1, sl
 80260b8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80260bc:	b280      	uxth	r0, r0
 80260be:	fa1f f888 	uxth.w	r8, r8
 80260c2:	1a12      	subs	r2, r2, r0
 80260c4:	fb08 f10c 	mul.w	r1, r8, ip
 80260c8:	b292      	uxth	r2, r2
 80260ca:	fb02 1106 	mla	r1, r2, r6, r1
 80260ce:	fb00 1109 	mla	r1, r0, r9, r1
 80260d2:	fb0a 1105 	mla	r1, sl, r5, r1
 80260d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80260da:	2900      	cmp	r1, #0
 80260dc:	f000 80da 	beq.w	8026294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80260e0:	2eff      	cmp	r6, #255	; 0xff
 80260e2:	d016      	beq.n	8026112 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80260e4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80260e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260ec:	4377      	muls	r7, r6
 80260ee:	435e      	muls	r6, r3
 80260f0:	0a3b      	lsrs	r3, r7, #8
 80260f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80260f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260fa:	443b      	add	r3, r7
 80260fc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8026100:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8026104:	0a1b      	lsrs	r3, r3, #8
 8026106:	0a3f      	lsrs	r7, r7, #8
 8026108:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802610c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026110:	433b      	orrs	r3, r7
 8026112:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026116:	d01d      	beq.n	8026154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8026118:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802611a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802611c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026120:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026124:	fb0c f606 	mul.w	r6, ip, r6
 8026128:	fb0c fc07 	mul.w	ip, ip, r7
 802612c:	0a37      	lsrs	r7, r6, #8
 802612e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026132:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026136:	4437      	add	r7, r6
 8026138:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802613c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8026140:	0a3f      	lsrs	r7, r7, #8
 8026142:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026146:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802614a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802614e:	ea47 060c 	orr.w	r6, r7, ip
 8026152:	9610      	str	r6, [sp, #64]	; 0x40
 8026154:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026158:	d01d      	beq.n	8026196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802615a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802615c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8026160:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026164:	fb09 fc0c 	mul.w	ip, r9, ip
 8026168:	fb09 f906 	mul.w	r9, r9, r6
 802616c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8026170:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026174:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8026178:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802617c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8026180:	4467      	add	r7, ip
 8026182:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026186:	0a3f      	lsrs	r7, r7, #8
 8026188:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802618c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026190:	ea47 0609 	orr.w	r6, r7, r9
 8026194:	960c      	str	r6, [sp, #48]	; 0x30
 8026196:	2dff      	cmp	r5, #255	; 0xff
 8026198:	d01a      	beq.n	80261d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 802619a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802619c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80261a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80261a4:	fb05 fc0c 	mul.w	ip, r5, ip
 80261a8:	4375      	muls	r5, r6
 80261aa:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80261ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80261b2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80261b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80261ba:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80261be:	4467      	add	r7, ip
 80261c0:	0a2d      	lsrs	r5, r5, #8
 80261c2:	0a3f      	lsrs	r7, r7, #8
 80261c4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80261c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80261cc:	433d      	orrs	r5, r7
 80261ce:	9511      	str	r5, [sp, #68]	; 0x44
 80261d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80261d2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80261d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80261de:	fb08 f505 	mul.w	r5, r8, r5
 80261e2:	fb02 5506 	mla	r5, r2, r6, r5
 80261e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80261e8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80261ec:	fb00 5506 	mla	r5, r0, r6, r5
 80261f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80261f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80261f6:	fb0a 5506 	mla	r5, sl, r6, r5
 80261fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80261fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026200:	0a2d      	lsrs	r5, r5, #8
 8026202:	fb08 f806 	mul.w	r8, r8, r6
 8026206:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802620a:	fb02 8303 	mla	r3, r2, r3, r8
 802620e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026210:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026216:	fb00 3307 	mla	r3, r0, r7, r3
 802621a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802621e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8026222:	fb01 f30b 	mul.w	r3, r1, fp
 8026226:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802622a:	1c59      	adds	r1, r3, #1
 802622c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026230:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026234:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026238:	ea45 050c 	orr.w	r5, r5, ip
 802623c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026240:	b2ea      	uxtb	r2, r5
 8026242:	b2c9      	uxtb	r1, r1
 8026244:	fb12 f20b 	smulbb	r2, r2, fp
 8026248:	fb03 2301 	mla	r3, r3, r1, r2
 802624c:	b29b      	uxth	r3, r3
 802624e:	1c5a      	adds	r2, r3, #1
 8026250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026254:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026258:	fb12 f201 	smulbb	r2, r2, r1
 802625c:	121b      	asrs	r3, r3, #8
 802625e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026262:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8026266:	0c2d      	lsrs	r5, r5, #16
 8026268:	fb03 230b 	mla	r3, r3, fp, r2
 802626c:	b29b      	uxth	r3, r3
 802626e:	1c5a      	adds	r2, r3, #1
 8026270:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026274:	121b      	asrs	r3, r3, #8
 8026276:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802627a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802627e:	fb13 f101 	smulbb	r1, r3, r1
 8026282:	fb05 150b 	mla	r5, r5, fp, r1
 8026286:	b2ad      	uxth	r5, r5
 8026288:	1c69      	adds	r1, r5, #1
 802628a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802628e:	122d      	asrs	r5, r5, #8
 8026290:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026294:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026296:	f10e 0e03 	add.w	lr, lr, #3
 802629a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802629c:	4413      	add	r3, r2
 802629e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80262a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80262a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80262a4:	4413      	add	r3, r2
 80262a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80262a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80262aa:	3b01      	subs	r3, #1
 80262ac:	9315      	str	r3, [sp, #84]	; 0x54
 80262ae:	e4ed      	b.n	8025c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80262b0:	b160      	cbz	r0, 80262cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80262b2:	5d2a      	ldrb	r2, [r5, r4]
 80262b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80262b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80262ba:	25ff      	movs	r5, #255	; 0xff
 80262bc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80262c0:	920c      	str	r2, [sp, #48]	; 0x30
 80262c2:	46ac      	mov	ip, r5
 80262c4:	e6ef      	b.n	80260a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80262c6:	25ff      	movs	r5, #255	; 0xff
 80262c8:	46a9      	mov	r9, r5
 80262ca:	e6ec      	b.n	80260a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80262cc:	25ff      	movs	r5, #255	; 0xff
 80262ce:	46a9      	mov	r9, r5
 80262d0:	e7f7      	b.n	80262c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80262d2:	b01b      	add	sp, #108	; 0x6c
 80262d4:	ecbd 8b08 	vpop	{d8-d11}
 80262d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080262dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80262dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262e0:	b085      	sub	sp, #20
 80262e2:	7888      	ldrb	r0, [r1, #2]
 80262e4:	4692      	mov	sl, r2
 80262e6:	4698      	mov	r8, r3
 80262e8:	9000      	str	r0, [sp, #0]
 80262ea:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80262ee:	7848      	ldrb	r0, [r1, #1]
 80262f0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80262f4:	9001      	str	r0, [sp, #4]
 80262f6:	7808      	ldrb	r0, [r1, #0]
 80262f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80262fc:	9002      	str	r0, [sp, #8]
 80262fe:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026302:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8026306:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802630a:	fb04 560c 	mla	r6, r4, ip, r5
 802630e:	2c00      	cmp	r4, #0
 8026310:	eb02 0e06 	add.w	lr, r2, r6
 8026314:	9a00      	ldr	r2, [sp, #0]
 8026316:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802631a:	9a01      	ldr	r2, [sp, #4]
 802631c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8026320:	db3e      	blt.n	80263a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8026322:	45a1      	cmp	r9, r4
 8026324:	dd3c      	ble.n	80263a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8026326:	2d00      	cmp	r5, #0
 8026328:	db38      	blt.n	802639c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802632a:	45ac      	cmp	ip, r5
 802632c:	dd36      	ble.n	802639c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802632e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8026332:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8026336:	1c6e      	adds	r6, r5, #1
 8026338:	d435      	bmi.n	80263a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802633a:	45b4      	cmp	ip, r6
 802633c:	dd33      	ble.n	80263a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802633e:	b393      	cbz	r3, 80263a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8026340:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026344:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8026348:	3401      	adds	r4, #1
 802634a:	d430      	bmi.n	80263ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802634c:	45a1      	cmp	r9, r4
 802634e:	dd2e      	ble.n	80263ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8026350:	b36f      	cbz	r7, 80263ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8026352:	2d00      	cmp	r5, #0
 8026354:	db29      	blt.n	80263aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8026356:	45ac      	cmp	ip, r5
 8026358:	dd27      	ble.n	80263aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802635a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802635e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8026362:	3501      	adds	r5, #1
 8026364:	d407      	bmi.n	8026376 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8026366:	45ac      	cmp	ip, r5
 8026368:	dd05      	ble.n	8026376 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802636a:	b123      	cbz	r3, 8026376 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802636c:	44f4      	add	ip, lr
 802636e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026372:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8026376:	2b0f      	cmp	r3, #15
 8026378:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802637c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026380:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026384:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026388:	d801      	bhi.n	802638e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802638a:	2f0f      	cmp	r7, #15
 802638c:	d911      	bls.n	80263b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 802638e:	4b76      	ldr	r3, [pc, #472]	; (8026568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8026390:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8026394:	4a75      	ldr	r2, [pc, #468]	; (802656c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8026396:	4876      	ldr	r0, [pc, #472]	; (8026570 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8026398:	f004 ff94 	bl	802b2c4 <__assert_func>
 802639c:	4602      	mov	r2, r0
 802639e:	e7ca      	b.n	8026336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80263a0:	4606      	mov	r6, r0
 80263a2:	4602      	mov	r2, r0
 80263a4:	e7d0      	b.n	8026348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80263a6:	4606      	mov	r6, r0
 80263a8:	e7ce      	b.n	8026348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80263aa:	4604      	mov	r4, r0
 80263ac:	e7d9      	b.n	8026362 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80263ae:	4604      	mov	r4, r0
 80263b0:	e7e1      	b.n	8026376 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80263b2:	b29b      	uxth	r3, r3
 80263b4:	b2bf      	uxth	r7, r7
 80263b6:	fb07 fe03 	mul.w	lr, r7, r3
 80263ba:	011b      	lsls	r3, r3, #4
 80263bc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80263c0:	eba3 0c0e 	sub.w	ip, r3, lr
 80263c4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80263c8:	b2bf      	uxth	r7, r7
 80263ca:	fa1f fc8c 	uxth.w	ip, ip
 80263ce:	1bed      	subs	r5, r5, r7
 80263d0:	fb0c f30a 	mul.w	r3, ip, sl
 80263d4:	b2ad      	uxth	r5, r5
 80263d6:	fb05 330b 	mla	r3, r5, fp, r3
 80263da:	fb07 3309 	mla	r3, r7, r9, r3
 80263de:	fb0e 3308 	mla	r3, lr, r8, r3
 80263e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80263e6:	9303      	str	r3, [sp, #12]
 80263e8:	2b00      	cmp	r3, #0
 80263ea:	f000 80b9 	beq.w	8026560 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80263ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80263f2:	d018      	beq.n	8026426 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80263f4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80263f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80263fc:	fb0b f303 	mul.w	r3, fp, r3
 8026400:	fb0b fb02 	mul.w	fp, fp, r2
 8026404:	0a1a      	lsrs	r2, r3, #8
 8026406:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802640a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802640e:	441a      	add	r2, r3
 8026410:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8026414:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8026418:	0a12      	lsrs	r2, r2, #8
 802641a:	0a1b      	lsrs	r3, r3, #8
 802641c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026420:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026424:	431a      	orrs	r2, r3
 8026426:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802642a:	d019      	beq.n	8026460 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 802642c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026430:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026434:	fb0a fb0b 	mul.w	fp, sl, fp
 8026438:	fb0a fa06 	mul.w	sl, sl, r6
 802643c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026440:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026444:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8026448:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802644c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026450:	445e      	add	r6, fp
 8026452:	0a1b      	lsrs	r3, r3, #8
 8026454:	0a36      	lsrs	r6, r6, #8
 8026456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802645a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802645e:	431e      	orrs	r6, r3
 8026460:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026464:	d019      	beq.n	802649a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8026466:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802646a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802646e:	fb09 fa0a 	mul.w	sl, r9, sl
 8026472:	fb09 f904 	mul.w	r9, r9, r4
 8026476:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802647a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802647e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8026482:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026486:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802648a:	4454      	add	r4, sl
 802648c:	0a1b      	lsrs	r3, r3, #8
 802648e:	0a24      	lsrs	r4, r4, #8
 8026490:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026494:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026498:	431c      	orrs	r4, r3
 802649a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802649e:	d019      	beq.n	80264d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80264a0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80264a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80264a8:	fb08 f909 	mul.w	r9, r8, r9
 80264ac:	fb08 f800 	mul.w	r8, r8, r0
 80264b0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80264b4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80264b8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80264bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80264c0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80264c4:	4448      	add	r0, r9
 80264c6:	0a1b      	lsrs	r3, r3, #8
 80264c8:	0a00      	lsrs	r0, r0, #8
 80264ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80264ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80264d2:	4318      	orrs	r0, r3
 80264d4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80264d8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80264dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80264e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80264e4:	fb0c f808 	mul.w	r8, ip, r8
 80264e8:	fb0c f606 	mul.w	r6, ip, r6
 80264ec:	fb05 8803 	mla	r8, r5, r3, r8
 80264f0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80264f4:	fb05 6202 	mla	r2, r5, r2, r6
 80264f8:	fb07 8803 	mla	r8, r7, r3, r8
 80264fc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026500:	fb0e 8303 	mla	r3, lr, r3, r8
 8026504:	0a1b      	lsrs	r3, r3, #8
 8026506:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802650a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 802650e:	9c02      	ldr	r4, [sp, #8]
 8026510:	fb07 2703 	mla	r7, r7, r3, r2
 8026514:	9a03      	ldr	r2, [sp, #12]
 8026516:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802651a:	43d2      	mvns	r2, r2
 802651c:	fb0e 7303 	mla	r3, lr, r3, r7
 8026520:	b2d2      	uxtb	r2, r2
 8026522:	0a1b      	lsrs	r3, r3, #8
 8026524:	4354      	muls	r4, r2
 8026526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802652a:	1c60      	adds	r0, r4, #1
 802652c:	ea48 0303 	orr.w	r3, r8, r3
 8026530:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8026534:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026538:	7008      	strb	r0, [r1, #0]
 802653a:	9801      	ldr	r0, [sp, #4]
 802653c:	4350      	muls	r0, r2
 802653e:	1c44      	adds	r4, r0, #1
 8026540:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8026544:	0a18      	lsrs	r0, r3, #8
 8026546:	0c1b      	lsrs	r3, r3, #16
 8026548:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802654c:	7048      	strb	r0, [r1, #1]
 802654e:	9800      	ldr	r0, [sp, #0]
 8026550:	4350      	muls	r0, r2
 8026552:	4602      	mov	r2, r0
 8026554:	3001      	adds	r0, #1
 8026556:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802655a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802655e:	708b      	strb	r3, [r1, #2]
 8026560:	b005      	add	sp, #20
 8026562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026566:	bf00      	nop
 8026568:	08030f3f 	.word	0x08030f3f
 802656c:	08031436 	.word	0x08031436
 8026570:	08031008 	.word	0x08031008

08026574 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026578:	ed2d 8b08 	vpush	{d8-d11}
 802657c:	b097      	sub	sp, #92	; 0x5c
 802657e:	eeb0 aa40 	vmov.f32	s20, s0
 8026582:	eef0 9a60 	vmov.f32	s19, s1
 8026586:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8026588:	eeb0 9a41 	vmov.f32	s18, s2
 802658c:	9308      	str	r3, [sp, #32]
 802658e:	eeb0 8a62 	vmov.f32	s16, s5
 8026592:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026596:	eef0 8a43 	vmov.f32	s17, s6
 802659a:	9015      	str	r0, [sp, #84]	; 0x54
 802659c:	eef0 ba44 	vmov.f32	s23, s8
 80265a0:	6868      	ldr	r0, [r5, #4]
 80265a2:	eeb0 ba64 	vmov.f32	s22, s9
 80265a6:	9112      	str	r1, [sp, #72]	; 0x48
 80265a8:	eef0 aa45 	vmov.f32	s21, s10
 80265ac:	9310      	str	r3, [sp, #64]	; 0x40
 80265ae:	9214      	str	r2, [sp, #80]	; 0x50
 80265b0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80265b2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80265b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80265ba:	fb00 1303 	mla	r3, r0, r3, r1
 80265be:	6829      	ldr	r1, [r5, #0]
 80265c0:	6855      	ldr	r5, [r2, #4]
 80265c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80265c6:	3504      	adds	r5, #4
 80265c8:	18cb      	adds	r3, r1, r3
 80265ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80265cc:	6813      	ldr	r3, [r2, #0]
 80265ce:	9311      	str	r3, [sp, #68]	; 0x44
 80265d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	dc03      	bgt.n	80265de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80265d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80265d8:	2b00      	cmp	r3, #0
 80265da:	f340 8333 	ble.w	8026c44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80265de:	9b08      	ldr	r3, [sp, #32]
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	f340 8190 	ble.w	8026906 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80265e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80265e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80265ea:	1412      	asrs	r2, r2, #16
 80265ec:	ea4f 4323 	mov.w	r3, r3, asr #16
 80265f0:	d42f      	bmi.n	8026652 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80265f2:	1c51      	adds	r1, r2, #1
 80265f4:	428c      	cmp	r4, r1
 80265f6:	dd2f      	ble.n	8026658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80265f8:	2b00      	cmp	r3, #0
 80265fa:	db2d      	blt.n	8026658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80265fc:	1c59      	adds	r1, r3, #1
 80265fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026600:	4288      	cmp	r0, r1
 8026602:	dd29      	ble.n	8026658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8026604:	9b08      	ldr	r3, [sp, #32]
 8026606:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026608:	3b01      	subs	r3, #1
 802660a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802660c:	fb02 1203 	mla	r2, r2, r3, r1
 8026610:	1412      	asrs	r2, r2, #16
 8026612:	d42b      	bmi.n	802666c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8026614:	3201      	adds	r2, #1
 8026616:	4294      	cmp	r4, r2
 8026618:	dd28      	ble.n	802666c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802661a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802661c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802661e:	fb02 1303 	mla	r3, r2, r3, r1
 8026622:	141b      	asrs	r3, r3, #16
 8026624:	d422      	bmi.n	802666c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8026626:	3301      	adds	r3, #1
 8026628:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802662a:	429a      	cmp	r2, r3
 802662c:	dd1e      	ble.n	802666c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802662e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026630:	f103 0803 	add.w	r8, r3, #3
 8026634:	9b08      	ldr	r3, [sp, #32]
 8026636:	9307      	str	r3, [sp, #28]
 8026638:	9b07      	ldr	r3, [sp, #28]
 802663a:	2b00      	cmp	r3, #0
 802663c:	f300 81ca 	bgt.w	80269d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8026640:	9b08      	ldr	r3, [sp, #32]
 8026642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802664c:	441a      	add	r2, r3
 802664e:	920b      	str	r2, [sp, #44]	; 0x2c
 8026650:	e15b      	b.n	802690a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8026652:	1c51      	adds	r1, r2, #1
 8026654:	f040 8148 	bne.w	80268e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8026658:	42a2      	cmp	r2, r4
 802665a:	f280 8145 	bge.w	80268e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802665e:	1c5a      	adds	r2, r3, #1
 8026660:	f2c0 8142 	blt.w	80268e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8026664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026666:	4293      	cmp	r3, r2
 8026668:	f280 813e 	bge.w	80268e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802666c:	9b08      	ldr	r3, [sp, #32]
 802666e:	9313      	str	r3, [sp, #76]	; 0x4c
 8026670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026672:	9307      	str	r3, [sp, #28]
 8026674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026676:	2b00      	cmp	r3, #0
 8026678:	dde2      	ble.n	8026640 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802667a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802667c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802667e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8026682:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026684:	141b      	asrs	r3, r3, #16
 8026686:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802668a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802668c:	1412      	asrs	r2, r2, #16
 802668e:	f100 818b 	bmi.w	80269a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8026692:	1c56      	adds	r6, r2, #1
 8026694:	42b4      	cmp	r4, r6
 8026696:	f340 8189 	ble.w	80269ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802669a:	2b00      	cmp	r3, #0
 802669c:	f2c0 8186 	blt.w	80269ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80266a0:	1c5e      	adds	r6, r3, #1
 80266a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80266a4:	42b7      	cmp	r7, r6
 80266a6:	f340 8181 	ble.w	80269ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80266aa:	fb03 2304 	mla	r3, r3, r4, r2
 80266ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80266b0:	18d6      	adds	r6, r2, r3
 80266b2:	5cd3      	ldrb	r3, [r2, r3]
 80266b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80266b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80266bc:	2900      	cmp	r1, #0
 80266be:	f000 8163 	beq.w	8026988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80266c2:	7872      	ldrb	r2, [r6, #1]
 80266c4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80266c8:	920c      	str	r2, [sp, #48]	; 0x30
 80266ca:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80266ce:	2800      	cmp	r0, #0
 80266d0:	f000 8164 	beq.w	802699c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80266d4:	1932      	adds	r2, r6, r4
 80266d6:	5d36      	ldrb	r6, [r6, r4]
 80266d8:	7852      	ldrb	r2, [r2, #1]
 80266da:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80266de:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80266e2:	9609      	str	r6, [sp, #36]	; 0x24
 80266e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80266e8:	0e16      	lsrs	r6, r2, #24
 80266ea:	920d      	str	r2, [sp, #52]	; 0x34
 80266ec:	b289      	uxth	r1, r1
 80266ee:	b280      	uxth	r0, r0
 80266f0:	fb01 fb00 	mul.w	fp, r1, r0
 80266f4:	0109      	lsls	r1, r1, #4
 80266f6:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80266fa:	eba1 090b 	sub.w	r9, r1, fp
 80266fe:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8026702:	b280      	uxth	r0, r0
 8026704:	fa1f f989 	uxth.w	r9, r9
 8026708:	1a12      	subs	r2, r2, r0
 802670a:	fb09 f108 	mul.w	r1, r9, r8
 802670e:	b292      	uxth	r2, r2
 8026710:	fb02 110c 	mla	r1, r2, ip, r1
 8026714:	fb00 110a 	mla	r1, r0, sl, r1
 8026718:	fb0b 1106 	mla	r1, fp, r6, r1
 802671c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026720:	2900      	cmp	r1, #0
 8026722:	f000 80d2 	beq.w	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8026726:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802672a:	d01b      	beq.n	8026764 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 802672c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026730:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026734:	fb0c fe0e 	mul.w	lr, ip, lr
 8026738:	fb0c fc03 	mul.w	ip, ip, r3
 802673c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8026740:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026744:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026748:	4473      	add	r3, lr
 802674a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802674e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8026752:	0a1b      	lsrs	r3, r3, #8
 8026754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026758:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802675c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026760:	ea43 030e 	orr.w	r3, r3, lr
 8026764:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026768:	d01e      	beq.n	80267a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 802676a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802676c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026770:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8026774:	fb08 fc0c 	mul.w	ip, r8, ip
 8026778:	fb08 f80e 	mul.w	r8, r8, lr
 802677c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026780:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026784:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026788:	44e6      	add	lr, ip
 802678a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802678e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8026792:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026796:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802679a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802679e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80267a2:	ea4e 0708 	orr.w	r7, lr, r8
 80267a6:	970c      	str	r7, [sp, #48]	; 0x30
 80267a8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80267ac:	d01e      	beq.n	80267ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80267ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80267b0:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80267b4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80267b8:	fb0a f808 	mul.w	r8, sl, r8
 80267bc:	fb0a fa0c 	mul.w	sl, sl, ip
 80267c0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80267c4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80267c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80267cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80267d4:	44c6      	add	lr, r8
 80267d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80267e6:	ea4e 070a 	orr.w	r7, lr, sl
 80267ea:	9709      	str	r7, [sp, #36]	; 0x24
 80267ec:	2eff      	cmp	r6, #255	; 0xff
 80267ee:	d01d      	beq.n	802682c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 80267f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80267f2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80267f6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80267fa:	fb06 f808 	mul.w	r8, r6, r8
 80267fe:	fb06 f60c 	mul.w	r6, r6, ip
 8026802:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8026806:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802680a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802680e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026812:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026816:	44c6      	add	lr, r8
 8026818:	0a36      	lsrs	r6, r6, #8
 802681a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802681e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026822:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026826:	ea4e 0606 	orr.w	r6, lr, r6
 802682a:	960d      	str	r6, [sp, #52]	; 0x34
 802682c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802682e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026832:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026838:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802683c:	43c9      	mvns	r1, r1
 802683e:	fb09 f606 	mul.w	r6, r9, r6
 8026842:	b2c9      	uxtb	r1, r1
 8026844:	fb02 660c 	mla	r6, r2, ip, r6
 8026848:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802684c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802684e:	fb00 660c 	mla	r6, r0, ip, r6
 8026852:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026856:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026858:	fb0b 660c 	mla	r6, fp, ip, r6
 802685c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8026860:	fb09 f90c 	mul.w	r9, r9, ip
 8026864:	0a36      	lsrs	r6, r6, #8
 8026866:	fb02 9303 	mla	r3, r2, r3, r9
 802686a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802686c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026870:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8026874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026876:	fb00 330e 	mla	r3, r0, lr, r3
 802687a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802687e:	fb0b 3b00 	mla	fp, fp, r0, r3
 8026882:	9b07      	ldr	r3, [sp, #28]
 8026884:	781b      	ldrb	r3, [r3, #0]
 8026886:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802688a:	fb03 f201 	mul.w	r2, r3, r1
 802688e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026892:	1c53      	adds	r3, r2, #1
 8026894:	ea46 060b 	orr.w	r6, r6, fp
 8026898:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802689c:	9a07      	ldr	r2, [sp, #28]
 802689e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80268a2:	7013      	strb	r3, [r2, #0]
 80268a4:	7853      	ldrb	r3, [r2, #1]
 80268a6:	434b      	muls	r3, r1
 80268a8:	1c5a      	adds	r2, r3, #1
 80268aa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80268ae:	0a33      	lsrs	r3, r6, #8
 80268b0:	0c36      	lsrs	r6, r6, #16
 80268b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80268b6:	9a07      	ldr	r2, [sp, #28]
 80268b8:	7053      	strb	r3, [r2, #1]
 80268ba:	7893      	ldrb	r3, [r2, #2]
 80268bc:	4359      	muls	r1, r3
 80268be:	1c4b      	adds	r3, r1, #1
 80268c0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80268c4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80268c8:	7096      	strb	r6, [r2, #2]
 80268ca:	9b07      	ldr	r3, [sp, #28]
 80268cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80268ce:	3303      	adds	r3, #3
 80268d0:	9307      	str	r3, [sp, #28]
 80268d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80268d4:	4413      	add	r3, r2
 80268d6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80268d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80268da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80268dc:	4413      	add	r3, r2
 80268de:	932a      	str	r3, [sp, #168]	; 0xa8
 80268e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80268e2:	3b01      	subs	r3, #1
 80268e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80268e6:	e6c5      	b.n	8026674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80268e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80268ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80268ec:	4413      	add	r3, r2
 80268ee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80268f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80268f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80268f4:	4413      	add	r3, r2
 80268f6:	932a      	str	r3, [sp, #168]	; 0xa8
 80268f8:	9b08      	ldr	r3, [sp, #32]
 80268fa:	3b01      	subs	r3, #1
 80268fc:	9308      	str	r3, [sp, #32]
 80268fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026900:	3303      	adds	r3, #3
 8026902:	930b      	str	r3, [sp, #44]	; 0x2c
 8026904:	e66b      	b.n	80265de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8026906:	f47f ae7d 	bne.w	8026604 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802690a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802690c:	2b00      	cmp	r3, #0
 802690e:	f340 8199 	ble.w	8026c44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8026912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026916:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026918:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802691c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026920:	eef0 6a48 	vmov.f32	s13, s16
 8026924:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026928:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802692c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026930:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026934:	eef0 6a68 	vmov.f32	s13, s17
 8026938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802693c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8026940:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026944:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026948:	ee37 8a48 	vsub.f32	s16, s14, s16
 802694c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026950:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026954:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026958:	ee18 2a10 	vmov	r2, s16
 802695c:	eeb0 8a47 	vmov.f32	s16, s14
 8026960:	fb92 f3f3 	sdiv	r3, r2, r3
 8026964:	ee18 2a90 	vmov	r2, s17
 8026968:	932b      	str	r3, [sp, #172]	; 0xac
 802696a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802696c:	eef0 8a67 	vmov.f32	s17, s15
 8026970:	fb92 f3f3 	sdiv	r3, r2, r3
 8026974:	932c      	str	r3, [sp, #176]	; 0xb0
 8026976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802697a:	3b01      	subs	r3, #1
 802697c:	9312      	str	r3, [sp, #72]	; 0x48
 802697e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026980:	bf08      	it	eq
 8026982:	4613      	moveq	r3, r2
 8026984:	9308      	str	r3, [sp, #32]
 8026986:	e623      	b.n	80265d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8026988:	b158      	cbz	r0, 80269a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802698a:	5d32      	ldrb	r2, [r6, r4]
 802698c:	26ff      	movs	r6, #255	; 0xff
 802698e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026992:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8026996:	9209      	str	r2, [sp, #36]	; 0x24
 8026998:	46b0      	mov	r8, r6
 802699a:	e6a7      	b.n	80266ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 802699c:	26ff      	movs	r6, #255	; 0xff
 802699e:	46b2      	mov	sl, r6
 80269a0:	e6a4      	b.n	80266ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80269a2:	26ff      	movs	r6, #255	; 0xff
 80269a4:	46b2      	mov	sl, r6
 80269a6:	e7f7      	b.n	8026998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80269a8:	1c57      	adds	r7, r2, #1
 80269aa:	d18e      	bne.n	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80269ac:	4294      	cmp	r4, r2
 80269ae:	dd8c      	ble.n	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80269b0:	1c5e      	adds	r6, r3, #1
 80269b2:	db8a      	blt.n	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80269b4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80269b6:	429e      	cmp	r6, r3
 80269b8:	dd87      	ble.n	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80269ba:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80269be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80269c2:	e9cd 4600 	strd	r4, r6, [sp]
 80269c6:	462b      	mov	r3, r5
 80269c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80269ca:	9907      	ldr	r1, [sp, #28]
 80269cc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80269ce:	f7ff fc85 	bl	80262dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80269d2:	e77a      	b.n	80268ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80269d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80269d6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80269d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80269dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80269de:	1409      	asrs	r1, r1, #16
 80269e0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80269e4:	141b      	asrs	r3, r3, #16
 80269e6:	fb04 1303 	mla	r3, r4, r3, r1
 80269ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 80269ec:	18ce      	adds	r6, r1, r3
 80269ee:	5ccb      	ldrb	r3, [r1, r3]
 80269f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80269f4:	0e1f      	lsrs	r7, r3, #24
 80269f6:	2a00      	cmp	r2, #0
 80269f8:	f000 8114 	beq.w	8026c24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 80269fc:	7871      	ldrb	r1, [r6, #1]
 80269fe:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8026a02:	910e      	str	r1, [sp, #56]	; 0x38
 8026a04:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8026a08:	2800      	cmp	r0, #0
 8026a0a:	f000 8115 	beq.w	8026c38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8026a0e:	1931      	adds	r1, r6, r4
 8026a10:	5d36      	ldrb	r6, [r6, r4]
 8026a12:	7849      	ldrb	r1, [r1, #1]
 8026a14:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8026a18:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8026a1c:	960a      	str	r6, [sp, #40]	; 0x28
 8026a1e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026a22:	0e0e      	lsrs	r6, r1, #24
 8026a24:	910f      	str	r1, [sp, #60]	; 0x3c
 8026a26:	b292      	uxth	r2, r2
 8026a28:	b280      	uxth	r0, r0
 8026a2a:	fb02 fb00 	mul.w	fp, r2, r0
 8026a2e:	0112      	lsls	r2, r2, #4
 8026a30:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8026a34:	eba2 090b 	sub.w	r9, r2, fp
 8026a38:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026a3c:	b280      	uxth	r0, r0
 8026a3e:	fa1f f989 	uxth.w	r9, r9
 8026a42:	1a09      	subs	r1, r1, r0
 8026a44:	fb09 f20e 	mul.w	r2, r9, lr
 8026a48:	b289      	uxth	r1, r1
 8026a4a:	fb01 2207 	mla	r2, r1, r7, r2
 8026a4e:	fb00 220a 	mla	r2, r0, sl, r2
 8026a52:	fb0b 2206 	mla	r2, fp, r6, r2
 8026a56:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026a5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8026a5c:	2a00      	cmp	r2, #0
 8026a5e:	f000 80d4 	beq.w	8026c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8026a62:	2fff      	cmp	r7, #255	; 0xff
 8026a64:	d01a      	beq.n	8026a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8026a66:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a6e:	fb07 fc0c 	mul.w	ip, r7, ip
 8026a72:	435f      	muls	r7, r3
 8026a74:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026a78:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026a7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a80:	4463      	add	r3, ip
 8026a82:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8026a86:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8026a8a:	0a1b      	lsrs	r3, r3, #8
 8026a8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026a98:	ea43 030c 	orr.w	r3, r3, ip
 8026a9c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026aa0:	d01f      	beq.n	8026ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8026aa2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8026aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026aa6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026aaa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026aae:	fb0e f707 	mul.w	r7, lr, r7
 8026ab2:	fb0e fe0c 	mul.w	lr, lr, ip
 8026ab6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026aba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026abe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ac2:	44bc      	add	ip, r7
 8026ac4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8026ac8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8026acc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ad0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ad4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ad8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026adc:	ea4c 020e 	orr.w	r2, ip, lr
 8026ae0:	920e      	str	r2, [sp, #56]	; 0x38
 8026ae2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026ae6:	d01e      	beq.n	8026b26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8026ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026aea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026aee:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026af2:	fb0a fe0e 	mul.w	lr, sl, lr
 8026af6:	fb0a fa07 	mul.w	sl, sl, r7
 8026afa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026afe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026b02:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026b06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b0a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b0e:	44f4      	add	ip, lr
 8026b10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b20:	ea4c 020a 	orr.w	r2, ip, sl
 8026b24:	920a      	str	r2, [sp, #40]	; 0x28
 8026b26:	2eff      	cmp	r6, #255	; 0xff
 8026b28:	d01c      	beq.n	8026b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8026b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b2c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026b30:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026b34:	fb06 fe0e 	mul.w	lr, r6, lr
 8026b38:	437e      	muls	r6, r7
 8026b3a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026b3e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026b42:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8026b46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b4a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8026b4e:	44f4      	add	ip, lr
 8026b50:	0a36      	lsrs	r6, r6, #8
 8026b52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026b5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b5e:	ea4c 0206 	orr.w	r2, ip, r6
 8026b62:	920f      	str	r2, [sp, #60]	; 0x3c
 8026b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026b66:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8026b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b6e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8026b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026b74:	fb09 f606 	mul.w	r6, r9, r6
 8026b78:	fb01 6607 	mla	r6, r1, r7, r6
 8026b7c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8026b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b82:	fb00 6607 	mla	r6, r0, r7, r6
 8026b86:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8026b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026b8c:	fb0b 6607 	mla	r6, fp, r7, r6
 8026b90:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026b96:	fb09 f907 	mul.w	r9, r9, r7
 8026b9a:	0a36      	lsrs	r6, r6, #8
 8026b9c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026ba2:	fb01 9303 	mla	r3, r1, r3, r9
 8026ba6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026baa:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8026bae:	fb00 330c 	mla	r3, r0, ip, r3
 8026bb2:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8026bb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026bb8:	43da      	mvns	r2, r3
 8026bba:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8026bbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026bc2:	b2d2      	uxtb	r2, r2
 8026bc4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026bc8:	fb03 f102 	mul.w	r1, r3, r2
 8026bcc:	ea46 060e 	orr.w	r6, r6, lr
 8026bd0:	1c4b      	adds	r3, r1, #1
 8026bd2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026bd6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8026bda:	f808 3c03 	strb.w	r3, [r8, #-3]
 8026bde:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8026be2:	4353      	muls	r3, r2
 8026be4:	1c59      	adds	r1, r3, #1
 8026be6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026bea:	0a33      	lsrs	r3, r6, #8
 8026bec:	0c36      	lsrs	r6, r6, #16
 8026bee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026bf2:	f808 3c02 	strb.w	r3, [r8, #-2]
 8026bf6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8026bfa:	435a      	muls	r2, r3
 8026bfc:	1c53      	adds	r3, r2, #1
 8026bfe:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026c02:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8026c06:	f808 6c01 	strb.w	r6, [r8, #-1]
 8026c0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026c0c:	f108 0803 	add.w	r8, r8, #3
 8026c10:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026c12:	4413      	add	r3, r2
 8026c14:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026c16:	9329      	str	r3, [sp, #164]	; 0xa4
 8026c18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026c1a:	4413      	add	r3, r2
 8026c1c:	932a      	str	r3, [sp, #168]	; 0xa8
 8026c1e:	9b07      	ldr	r3, [sp, #28]
 8026c20:	3b01      	subs	r3, #1
 8026c22:	e508      	b.n	8026636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8026c24:	b158      	cbz	r0, 8026c3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8026c26:	5d31      	ldrb	r1, [r6, r4]
 8026c28:	26ff      	movs	r6, #255	; 0xff
 8026c2a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8026c2e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026c32:	910a      	str	r1, [sp, #40]	; 0x28
 8026c34:	46b6      	mov	lr, r6
 8026c36:	e6f6      	b.n	8026a26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8026c38:	26ff      	movs	r6, #255	; 0xff
 8026c3a:	46b2      	mov	sl, r6
 8026c3c:	e6f3      	b.n	8026a26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8026c3e:	26ff      	movs	r6, #255	; 0xff
 8026c40:	46b2      	mov	sl, r6
 8026c42:	e7f7      	b.n	8026c34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8026c44:	b017      	add	sp, #92	; 0x5c
 8026c46:	ecbd 8b08 	vpop	{d8-d11}
 8026c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026c50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8026c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c54:	b08d      	sub	sp, #52	; 0x34
 8026c56:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8026c5a:	9103      	str	r1, [sp, #12]
 8026c5c:	fb07 5803 	mla	r8, r7, r3, r5
 8026c60:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8026c64:	9803      	ldr	r0, [sp, #12]
 8026c66:	2f00      	cmp	r7, #0
 8026c68:	910b      	str	r1, [sp, #44]	; 0x2c
 8026c6a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026c6e:	9903      	ldr	r1, [sp, #12]
 8026c70:	9c03      	ldr	r4, [sp, #12]
 8026c72:	eb02 0608 	add.w	r6, r2, r8
 8026c76:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8026c7a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8026c7e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8026c82:	7809      	ldrb	r1, [r1, #0]
 8026c84:	7840      	ldrb	r0, [r0, #1]
 8026c86:	78a4      	ldrb	r4, [r4, #2]
 8026c88:	db51      	blt.n	8026d2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026c8a:	45be      	cmp	lr, r7
 8026c8c:	dd4f      	ble.n	8026d2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026c8e:	2d00      	cmp	r5, #0
 8026c90:	db49      	blt.n	8026d26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026c92:	42ab      	cmp	r3, r5
 8026c94:	dd47      	ble.n	8026d26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026c96:	f812 2008 	ldrb.w	r2, [r2, r8]
 8026c9a:	9204      	str	r2, [sp, #16]
 8026c9c:	7872      	ldrb	r2, [r6, #1]
 8026c9e:	9205      	str	r2, [sp, #20]
 8026ca0:	78b2      	ldrb	r2, [r6, #2]
 8026ca2:	9206      	str	r2, [sp, #24]
 8026ca4:	1c6a      	adds	r2, r5, #1
 8026ca6:	d449      	bmi.n	8026d3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026ca8:	4293      	cmp	r3, r2
 8026caa:	dd47      	ble.n	8026d3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026cac:	f1bc 0f00 	cmp.w	ip, #0
 8026cb0:	d044      	beq.n	8026d3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026cb2:	7972      	ldrb	r2, [r6, #5]
 8026cb4:	f896 b003 	ldrb.w	fp, [r6, #3]
 8026cb8:	f896 a004 	ldrb.w	sl, [r6, #4]
 8026cbc:	9201      	str	r2, [sp, #4]
 8026cbe:	3701      	adds	r7, #1
 8026cc0:	d444      	bmi.n	8026d4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026cc2:	45be      	cmp	lr, r7
 8026cc4:	dd42      	ble.n	8026d4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026cc6:	f1b9 0f00 	cmp.w	r9, #0
 8026cca:	f000 80c1 	beq.w	8026e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8026cce:	2d00      	cmp	r5, #0
 8026cd0:	db38      	blt.n	8026d44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026cd2:	42ab      	cmp	r3, r5
 8026cd4:	dd36      	ble.n	8026d44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026cd6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026cda:	f816 8002 	ldrb.w	r8, [r6, r2]
 8026cde:	2203      	movs	r2, #3
 8026ce0:	fb03 6702 	mla	r7, r3, r2, r6
 8026ce4:	fb03 6202 	mla	r2, r3, r2, r6
 8026ce8:	787f      	ldrb	r7, [r7, #1]
 8026cea:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026cee:	9702      	str	r7, [sp, #8]
 8026cf0:	3501      	adds	r5, #1
 8026cf2:	d432      	bmi.n	8026d5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026cf4:	42ab      	cmp	r3, r5
 8026cf6:	dd30      	ble.n	8026d5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026cf8:	f1bc 0f00 	cmp.w	ip, #0
 8026cfc:	d031      	beq.n	8026d62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8026cfe:	2703      	movs	r7, #3
 8026d00:	fb13 7207 	smlabb	r2, r3, r7, r7
 8026d04:	5cb5      	ldrb	r5, [r6, r2]
 8026d06:	fb03 6207 	mla	r2, r3, r7, r6
 8026d0a:	fb03 6307 	mla	r3, r3, r7, r6
 8026d0e:	7912      	ldrb	r2, [r2, #4]
 8026d10:	795e      	ldrb	r6, [r3, #5]
 8026d12:	f1bc 0f0f 	cmp.w	ip, #15
 8026d16:	d927      	bls.n	8026d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8026d18:	4b53      	ldr	r3, [pc, #332]	; (8026e68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8026d1a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8026d1e:	4a53      	ldr	r2, [pc, #332]	; (8026e6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8026d20:	4853      	ldr	r0, [pc, #332]	; (8026e70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8026d22:	f004 facf 	bl	802b2c4 <__assert_func>
 8026d26:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026d2a:	9104      	str	r1, [sp, #16]
 8026d2c:	e7ba      	b.n	8026ca4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8026d2e:	9401      	str	r4, [sp, #4]
 8026d30:	4682      	mov	sl, r0
 8026d32:	468b      	mov	fp, r1
 8026d34:	9104      	str	r1, [sp, #16]
 8026d36:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026d3a:	e7c0      	b.n	8026cbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026d3c:	9401      	str	r4, [sp, #4]
 8026d3e:	4682      	mov	sl, r0
 8026d40:	468b      	mov	fp, r1
 8026d42:	e7bc      	b.n	8026cbe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026d44:	46a6      	mov	lr, r4
 8026d46:	9002      	str	r0, [sp, #8]
 8026d48:	4688      	mov	r8, r1
 8026d4a:	e7d1      	b.n	8026cf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8026d4c:	4626      	mov	r6, r4
 8026d4e:	4602      	mov	r2, r0
 8026d50:	460d      	mov	r5, r1
 8026d52:	46a6      	mov	lr, r4
 8026d54:	9002      	str	r0, [sp, #8]
 8026d56:	4688      	mov	r8, r1
 8026d58:	e7db      	b.n	8026d12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026d5a:	4626      	mov	r6, r4
 8026d5c:	4602      	mov	r2, r0
 8026d5e:	460d      	mov	r5, r1
 8026d60:	e7d7      	b.n	8026d12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026d62:	4626      	mov	r6, r4
 8026d64:	4602      	mov	r2, r0
 8026d66:	460d      	mov	r5, r1
 8026d68:	f1b9 0f0f 	cmp.w	r9, #15
 8026d6c:	d8d4      	bhi.n	8026d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026d6e:	fa1f f38c 	uxth.w	r3, ip
 8026d72:	fa1f fc89 	uxth.w	ip, r9
 8026d76:	fb03 f70c 	mul.w	r7, r3, ip
 8026d7a:	011b      	lsls	r3, r3, #4
 8026d7c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8026d80:	9707      	str	r7, [sp, #28]
 8026d82:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026d86:	fa1f fc8c 	uxth.w	ip, ip
 8026d8a:	eba7 070c 	sub.w	r7, r7, ip
 8026d8e:	b2bf      	uxth	r7, r7
 8026d90:	9709      	str	r7, [sp, #36]	; 0x24
 8026d92:	9f07      	ldr	r7, [sp, #28]
 8026d94:	1bdb      	subs	r3, r3, r7
 8026d96:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8026d9a:	b29b      	uxth	r3, r3
 8026d9c:	9708      	str	r7, [sp, #32]
 8026d9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026da0:	930a      	str	r3, [sp, #40]	; 0x28
 8026da2:	ea6f 0907 	mvn.w	r9, r7
 8026da6:	fb03 fb0b 	mul.w	fp, r3, fp
 8026daa:	9f04      	ldr	r7, [sp, #16]
 8026dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026dae:	fa5f f989 	uxtb.w	r9, r9
 8026db2:	fb03 bb07 	mla	fp, r3, r7, fp
 8026db6:	9f07      	ldr	r7, [sp, #28]
 8026db8:	fb11 f109 	smulbb	r1, r1, r9
 8026dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026dbe:	fb0c b808 	mla	r8, ip, r8, fp
 8026dc2:	fb10 f009 	smulbb	r0, r0, r9
 8026dc6:	fb14 f409 	smulbb	r4, r4, r9
 8026dca:	fb07 8805 	mla	r8, r7, r5, r8
 8026dce:	9d08      	ldr	r5, [sp, #32]
 8026dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026dd2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8026dd6:	fb08 1805 	mla	r8, r8, r5, r1
 8026dda:	9d05      	ldr	r5, [sp, #20]
 8026ddc:	fa1f f888 	uxth.w	r8, r8
 8026de0:	f108 0101 	add.w	r1, r8, #1
 8026de4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8026de8:	9903      	ldr	r1, [sp, #12]
 8026dea:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026dee:	f881 8000 	strb.w	r8, [r1]
 8026df2:	fb03 f10a 	mul.w	r1, r3, sl
 8026df6:	fb07 1105 	mla	r1, r7, r5, r1
 8026dfa:	9d02      	ldr	r5, [sp, #8]
 8026dfc:	fb0c 1105 	mla	r1, ip, r5, r1
 8026e00:	9d07      	ldr	r5, [sp, #28]
 8026e02:	fb05 1102 	mla	r1, r5, r2, r1
 8026e06:	9a08      	ldr	r2, [sp, #32]
 8026e08:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026e0c:	fb01 0102 	mla	r1, r1, r2, r0
 8026e10:	9a03      	ldr	r2, [sp, #12]
 8026e12:	b289      	uxth	r1, r1
 8026e14:	1c48      	adds	r0, r1, #1
 8026e16:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026e1a:	1209      	asrs	r1, r1, #8
 8026e1c:	7051      	strb	r1, [r2, #1]
 8026e1e:	9a01      	ldr	r2, [sp, #4]
 8026e20:	4353      	muls	r3, r2
 8026e22:	9a06      	ldr	r2, [sp, #24]
 8026e24:	fb07 3702 	mla	r7, r7, r2, r3
 8026e28:	9b08      	ldr	r3, [sp, #32]
 8026e2a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8026e2e:	fb05 c606 	mla	r6, r5, r6, ip
 8026e32:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026e36:	fb06 4603 	mla	r6, r6, r3, r4
 8026e3a:	9b03      	ldr	r3, [sp, #12]
 8026e3c:	b2b6      	uxth	r6, r6
 8026e3e:	f106 0e01 	add.w	lr, r6, #1
 8026e42:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026e46:	1236      	asrs	r6, r6, #8
 8026e48:	709e      	strb	r6, [r3, #2]
 8026e4a:	b00d      	add	sp, #52	; 0x34
 8026e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e50:	f1bc 0f0f 	cmp.w	ip, #15
 8026e54:	f63f af60 	bhi.w	8026d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026e58:	4626      	mov	r6, r4
 8026e5a:	4602      	mov	r2, r0
 8026e5c:	460d      	mov	r5, r1
 8026e5e:	46a6      	mov	lr, r4
 8026e60:	9002      	str	r0, [sp, #8]
 8026e62:	4688      	mov	r8, r1
 8026e64:	e783      	b.n	8026d6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8026e66:	bf00      	nop
 8026e68:	08030f3f 	.word	0x08030f3f
 8026e6c:	08031436 	.word	0x08031436
 8026e70:	08031008 	.word	0x08031008

08026e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e78:	ed2d 8b08 	vpush	{d8-d11}
 8026e7c:	b0a1      	sub	sp, #132	; 0x84
 8026e7e:	eeb0 aa40 	vmov.f32	s20, s0
 8026e82:	eef0 9a60 	vmov.f32	s19, s1
 8026e86:	9307      	str	r3, [sp, #28]
 8026e88:	eeb0 9a41 	vmov.f32	s18, s2
 8026e8c:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8026e90:	eeb0 8a62 	vmov.f32	s16, s5
 8026e94:	9210      	str	r2, [sp, #64]	; 0x40
 8026e96:	eef0 8a43 	vmov.f32	s17, s6
 8026e9a:	9308      	str	r3, [sp, #32]
 8026e9c:	eef0 ba44 	vmov.f32	s23, s8
 8026ea0:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8026ea4:	eeb0 ba64 	vmov.f32	s22, s9
 8026ea8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8026eaa:	eef0 aa45 	vmov.f32	s21, s10
 8026eae:	930a      	str	r3, [sp, #40]	; 0x28
 8026eb0:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8026eb4:	901f      	str	r0, [sp, #124]	; 0x7c
 8026eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8026eb8:	6850      	ldr	r0, [r2, #4]
 8026eba:	910e      	str	r1, [sp, #56]	; 0x38
 8026ebc:	6812      	ldr	r2, [r2, #0]
 8026ebe:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8026ec2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8026ec6:	fb00 1303 	mla	r3, r0, r3, r1
 8026eca:	9908      	ldr	r1, [sp, #32]
 8026ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ed0:	18d3      	adds	r3, r2, r3
 8026ed2:	2203      	movs	r2, #3
 8026ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8026ed6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026ed8:	681b      	ldr	r3, [r3, #0]
 8026eda:	930c      	str	r3, [sp, #48]	; 0x30
 8026edc:	f06f 0304 	mvn.w	r3, #4
 8026ee0:	fb11 3302 	smlabb	r3, r1, r2, r3
 8026ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8026ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026ee8:	43db      	mvns	r3, r3
 8026eea:	b2db      	uxtb	r3, r3
 8026eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8026eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026ef0:	2b00      	cmp	r3, #0
 8026ef2:	dc03      	bgt.n	8026efc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8026ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	f340 81df 	ble.w	80272ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8026efc:	9b07      	ldr	r3, [sp, #28]
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	f340 80f2 	ble.w	80270e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8026f04:	ea5f 4228 	movs.w	r2, r8, asr #16
 8026f08:	ea4f 432b 	mov.w	r3, fp, asr #16
 8026f0c:	d430      	bmi.n	8026f70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8026f0e:	1c51      	adds	r1, r2, #1
 8026f10:	9808      	ldr	r0, [sp, #32]
 8026f12:	4281      	cmp	r1, r0
 8026f14:	da2f      	bge.n	8026f76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	db2d      	blt.n	8026f76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026f1a:	1c59      	adds	r1, r3, #1
 8026f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026f1e:	4288      	cmp	r0, r1
 8026f20:	dd29      	ble.n	8026f76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026f22:	9b07      	ldr	r3, [sp, #28]
 8026f24:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026f26:	3b01      	subs	r3, #1
 8026f28:	fb02 8203 	mla	r2, r2, r3, r8
 8026f2c:	1412      	asrs	r2, r2, #16
 8026f2e:	d42d      	bmi.n	8026f8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026f30:	3201      	adds	r2, #1
 8026f32:	9908      	ldr	r1, [sp, #32]
 8026f34:	4291      	cmp	r1, r2
 8026f36:	dd29      	ble.n	8026f8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026f38:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026f3a:	fb02 b303 	mla	r3, r2, r3, fp
 8026f3e:	141b      	asrs	r3, r3, #16
 8026f40:	d424      	bmi.n	8026f8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026f42:	3301      	adds	r3, #1
 8026f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026f46:	429a      	cmp	r2, r3
 8026f48:	dd20      	ble.n	8026f8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f4c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026f50:	1cde      	adds	r6, r3, #3
 8026f52:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8026f56:	f1bc 0f00 	cmp.w	ip, #0
 8026f5a:	f300 811f 	bgt.w	802719c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8026f5e:	9b07      	ldr	r3, [sp, #28]
 8026f60:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026f6a:	4423      	add	r3, r4
 8026f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8026f6e:	e0bd      	b.n	80270ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8026f70:	1c57      	adds	r7, r2, #1
 8026f72:	f040 80ae 	bne.w	80270d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026f76:	9908      	ldr	r1, [sp, #32]
 8026f78:	428a      	cmp	r2, r1
 8026f7a:	f280 80aa 	bge.w	80270d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026f7e:	1c5e      	adds	r6, r3, #1
 8026f80:	f2c0 80a7 	blt.w	80270d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026f86:	4293      	cmp	r3, r2
 8026f88:	f280 80a3 	bge.w	80270d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026f8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8026f90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8026f92:	f1ba 0f00 	cmp.w	sl, #0
 8026f96:	dde2      	ble.n	8026f5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8026f98:	ea5f 4028 	movs.w	r0, r8, asr #16
 8026f9c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8026fa0:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026fa4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026fa8:	f100 80df 	bmi.w	802716a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8026fac:	1c45      	adds	r5, r0, #1
 8026fae:	9f08      	ldr	r7, [sp, #32]
 8026fb0:	42af      	cmp	r7, r5
 8026fb2:	f340 80dc 	ble.w	802716e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026fb6:	2900      	cmp	r1, #0
 8026fb8:	f2c0 80d9 	blt.w	802716e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026fbc:	1c4d      	adds	r5, r1, #1
 8026fbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026fc0:	42af      	cmp	r7, r5
 8026fc2:	f340 80d4 	ble.w	802716e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026fc6:	9d08      	ldr	r5, [sp, #32]
 8026fc8:	fb05 0101 	mla	r1, r5, r1, r0
 8026fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026fce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026fd2:	1845      	adds	r5, r0, r1
 8026fd4:	5c40      	ldrb	r0, [r0, r1]
 8026fd6:	792f      	ldrb	r7, [r5, #4]
 8026fd8:	7869      	ldrb	r1, [r5, #1]
 8026fda:	9711      	str	r7, [sp, #68]	; 0x44
 8026fdc:	796f      	ldrb	r7, [r5, #5]
 8026fde:	f895 e002 	ldrb.w	lr, [r5, #2]
 8026fe2:	f895 9003 	ldrb.w	r9, [r5, #3]
 8026fe6:	9712      	str	r7, [sp, #72]	; 0x48
 8026fe8:	b17a      	cbz	r2, 802700a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8026fea:	3505      	adds	r5, #5
 8026fec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8026fee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026ff0:	19ef      	adds	r7, r5, r7
 8026ff2:	5d2d      	ldrb	r5, [r5, r4]
 8026ff4:	787c      	ldrb	r4, [r7, #1]
 8026ff6:	9513      	str	r5, [sp, #76]	; 0x4c
 8026ff8:	9415      	str	r4, [sp, #84]	; 0x54
 8026ffa:	78bc      	ldrb	r4, [r7, #2]
 8026ffc:	9417      	str	r4, [sp, #92]	; 0x5c
 8026ffe:	78fc      	ldrb	r4, [r7, #3]
 8027000:	9414      	str	r4, [sp, #80]	; 0x50
 8027002:	793c      	ldrb	r4, [r7, #4]
 8027004:	9416      	str	r4, [sp, #88]	; 0x58
 8027006:	797c      	ldrb	r4, [r7, #5]
 8027008:	9418      	str	r4, [sp, #96]	; 0x60
 802700a:	b29b      	uxth	r3, r3
 802700c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802700e:	b292      	uxth	r2, r2
 8027010:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8027014:	fb03 f702 	mul.w	r7, r3, r2
 8027018:	011b      	lsls	r3, r3, #4
 802701a:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802701e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8027022:	1bdb      	subs	r3, r3, r7
 8027024:	b292      	uxth	r2, r2
 8027026:	b29b      	uxth	r3, r3
 8027028:	ebac 0c02 	sub.w	ip, ip, r2
 802702c:	fb03 f909 	mul.w	r9, r3, r9
 8027030:	fa1f fc8c 	uxth.w	ip, ip
 8027034:	fb0c 9000 	mla	r0, ip, r0, r9
 8027038:	f896 9000 	ldrb.w	r9, [r6]
 802703c:	fb02 0004 	mla	r0, r2, r4, r0
 8027040:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027042:	fb07 0004 	mla	r0, r7, r4, r0
 8027046:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027048:	fb19 f904 	smulbb	r9, r9, r4
 802704c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027050:	fb00 9005 	mla	r0, r0, r5, r9
 8027054:	b280      	uxth	r0, r0
 8027056:	f100 0901 	add.w	r9, r0, #1
 802705a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802705e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027060:	4358      	muls	r0, r3
 8027062:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027066:	fb0c 0101 	mla	r1, ip, r1, r0
 802706a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802706c:	f886 9000 	strb.w	r9, [r6]
 8027070:	fb02 1100 	mla	r1, r2, r0, r1
 8027074:	9816      	ldr	r0, [sp, #88]	; 0x58
 8027076:	fb07 1100 	mla	r1, r7, r0, r1
 802707a:	7870      	ldrb	r0, [r6, #1]
 802707c:	fb10 f004 	smulbb	r0, r0, r4
 8027080:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027084:	fb01 0105 	mla	r1, r1, r5, r0
 8027088:	b289      	uxth	r1, r1
 802708a:	1c48      	adds	r0, r1, #1
 802708c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8027090:	1209      	asrs	r1, r1, #8
 8027092:	7071      	strb	r1, [r6, #1]
 8027094:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027096:	434b      	muls	r3, r1
 8027098:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802709a:	fb0c 330e 	mla	r3, ip, lr, r3
 802709e:	fb02 3201 	mla	r2, r2, r1, r3
 80270a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80270a4:	fb07 2703 	mla	r7, r7, r3, r2
 80270a8:	78b2      	ldrb	r2, [r6, #2]
 80270aa:	fb12 f204 	smulbb	r2, r2, r4
 80270ae:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80270b2:	fb07 2505 	mla	r5, r7, r5, r2
 80270b6:	b2ad      	uxth	r5, r5
 80270b8:	1c6f      	adds	r7, r5, #1
 80270ba:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80270be:	122d      	asrs	r5, r5, #8
 80270c0:	70b5      	strb	r5, [r6, #2]
 80270c2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80270c4:	3603      	adds	r6, #3
 80270c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80270ca:	4498      	add	r8, r3
 80270cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80270ce:	449b      	add	fp, r3
 80270d0:	e75f      	b.n	8026f92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80270d2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80270d4:	4498      	add	r8, r3
 80270d6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80270d8:	449b      	add	fp, r3
 80270da:	9b07      	ldr	r3, [sp, #28]
 80270dc:	3b01      	subs	r3, #1
 80270de:	9307      	str	r3, [sp, #28]
 80270e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270e2:	3303      	adds	r3, #3
 80270e4:	9309      	str	r3, [sp, #36]	; 0x24
 80270e6:	e709      	b.n	8026efc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80270e8:	f47f af1b 	bne.w	8026f22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80270ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	f340 80e3 	ble.w	80272ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80270f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80270f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80270fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80270fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027102:	eef0 6a48 	vmov.f32	s13, s16
 8027106:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802710a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802710e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027112:	ee16 8a90 	vmov	r8, s13
 8027116:	eef0 6a68 	vmov.f32	s13, s17
 802711a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802711e:	ee16 ba90 	vmov	fp, s13
 8027122:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027126:	ee69 7a27 	vmul.f32	s15, s18, s15
 802712a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802712e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027132:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027136:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802713a:	ee18 2a10 	vmov	r2, s16
 802713e:	eeb0 8a47 	vmov.f32	s16, s14
 8027142:	fb92 f3f3 	sdiv	r3, r2, r3
 8027146:	ee18 2a90 	vmov	r2, s17
 802714a:	9335      	str	r3, [sp, #212]	; 0xd4
 802714c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802714e:	eef0 8a67 	vmov.f32	s17, s15
 8027152:	fb92 f3f3 	sdiv	r3, r2, r3
 8027156:	9336      	str	r3, [sp, #216]	; 0xd8
 8027158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802715a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802715c:	3b01      	subs	r3, #1
 802715e:	930e      	str	r3, [sp, #56]	; 0x38
 8027160:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027162:	bf08      	it	eq
 8027164:	4613      	moveq	r3, r2
 8027166:	9307      	str	r3, [sp, #28]
 8027168:	e6c1      	b.n	8026eee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802716a:	1c45      	adds	r5, r0, #1
 802716c:	d1a9      	bne.n	80270c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802716e:	9c08      	ldr	r4, [sp, #32]
 8027170:	42a0      	cmp	r0, r4
 8027172:	daa6      	bge.n	80270c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8027174:	1c4c      	adds	r4, r1, #1
 8027176:	dba4      	blt.n	80270c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8027178:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802717a:	428c      	cmp	r4, r1
 802717c:	dda1      	ble.n	80270c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802717e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027180:	9001      	str	r0, [sp, #4]
 8027182:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027184:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8027188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802718a:	4631      	mov	r1, r6
 802718c:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8027190:	9300      	str	r3, [sp, #0]
 8027192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027194:	9b08      	ldr	r3, [sp, #32]
 8027196:	f7ff fd5b 	bl	8026c50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802719a:	e792      	b.n	80270c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802719c:	ea4f 4228 	mov.w	r2, r8, asr #16
 80271a0:	9c08      	ldr	r4, [sp, #32]
 80271a2:	ea4f 402b 	mov.w	r0, fp, asr #16
 80271a6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80271aa:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80271ae:	fb04 2000 	mla	r0, r4, r0, r2
 80271b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80271b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80271b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80271ba:	4402      	add	r2, r0
 80271bc:	5c25      	ldrb	r5, [r4, r0]
 80271be:	7894      	ldrb	r4, [r2, #2]
 80271c0:	7850      	ldrb	r0, [r2, #1]
 80271c2:	9411      	str	r4, [sp, #68]	; 0x44
 80271c4:	7954      	ldrb	r4, [r2, #5]
 80271c6:	f892 a003 	ldrb.w	sl, [r2, #3]
 80271ca:	f892 9004 	ldrb.w	r9, [r2, #4]
 80271ce:	9412      	str	r4, [sp, #72]	; 0x48
 80271d0:	b171      	cbz	r1, 80271f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80271d2:	3205      	adds	r2, #5
 80271d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271d6:	1917      	adds	r7, r2, r4
 80271d8:	5d12      	ldrb	r2, [r2, r4]
 80271da:	9219      	str	r2, [sp, #100]	; 0x64
 80271dc:	787a      	ldrb	r2, [r7, #1]
 80271de:	921b      	str	r2, [sp, #108]	; 0x6c
 80271e0:	78ba      	ldrb	r2, [r7, #2]
 80271e2:	921d      	str	r2, [sp, #116]	; 0x74
 80271e4:	78fa      	ldrb	r2, [r7, #3]
 80271e6:	921a      	str	r2, [sp, #104]	; 0x68
 80271e8:	793a      	ldrb	r2, [r7, #4]
 80271ea:	921c      	str	r2, [sp, #112]	; 0x70
 80271ec:	797a      	ldrb	r2, [r7, #5]
 80271ee:	921e      	str	r2, [sp, #120]	; 0x78
 80271f0:	b29b      	uxth	r3, r3
 80271f2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80271f4:	b289      	uxth	r1, r1
 80271f6:	3603      	adds	r6, #3
 80271f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80271fc:	fb03 f201 	mul.w	r2, r3, r1
 8027200:	011b      	lsls	r3, r3, #4
 8027202:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8027206:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802720a:	1a9b      	subs	r3, r3, r2
 802720c:	b289      	uxth	r1, r1
 802720e:	b29b      	uxth	r3, r3
 8027210:	1a7f      	subs	r7, r7, r1
 8027212:	fb03 fa0a 	mul.w	sl, r3, sl
 8027216:	b2bf      	uxth	r7, r7
 8027218:	fb03 f909 	mul.w	r9, r3, r9
 802721c:	fb07 a505 	mla	r5, r7, r5, sl
 8027220:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8027224:	fb07 9000 	mla	r0, r7, r0, r9
 8027228:	fb01 5504 	mla	r5, r1, r4, r5
 802722c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802722e:	fb02 5504 	mla	r5, r2, r4, r5
 8027232:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027234:	fb1a fa04 	smulbb	sl, sl, r4
 8027238:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802723c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802723e:	fb05 a50e 	mla	r5, r5, lr, sl
 8027242:	fb01 0004 	mla	r0, r1, r4, r0
 8027246:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8027248:	b2ad      	uxth	r5, r5
 802724a:	fb02 0004 	mla	r0, r2, r4, r0
 802724e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027250:	f105 0a01 	add.w	sl, r5, #1
 8027254:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027258:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802725c:	122d      	asrs	r5, r5, #8
 802725e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8027262:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8027266:	fb15 f504 	smulbb	r5, r5, r4
 802726a:	fb00 500e 	mla	r0, r0, lr, r5
 802726e:	b280      	uxth	r0, r0
 8027270:	1c45      	adds	r5, r0, #1
 8027272:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027276:	1200      	asrs	r0, r0, #8
 8027278:	f806 0c05 	strb.w	r0, [r6, #-5]
 802727c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802727e:	4343      	muls	r3, r0
 8027280:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027282:	fb07 3300 	mla	r3, r7, r0, r3
 8027286:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027288:	fb01 3100 	mla	r1, r1, r0, r3
 802728c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802728e:	fb02 1203 	mla	r2, r2, r3, r1
 8027292:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8027296:	fb11 f104 	smulbb	r1, r1, r4
 802729a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802729e:	fb02 120e 	mla	r2, r2, lr, r1
 80272a2:	b292      	uxth	r2, r2
 80272a4:	1c53      	adds	r3, r2, #1
 80272a6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80272aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80272ac:	1212      	asrs	r2, r2, #8
 80272ae:	4498      	add	r8, r3
 80272b0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80272b2:	f806 2c04 	strb.w	r2, [r6, #-4]
 80272b6:	449b      	add	fp, r3
 80272b8:	e64d      	b.n	8026f56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80272ba:	b021      	add	sp, #132	; 0x84
 80272bc:	ecbd 8b08 	vpop	{d8-d11}
 80272c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080272c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80272c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272c8:	b085      	sub	sp, #20
 80272ca:	784d      	ldrb	r5, [r1, #1]
 80272cc:	788e      	ldrb	r6, [r1, #2]
 80272ce:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80272d2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80272d6:	9403      	str	r4, [sp, #12]
 80272d8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80272dc:	780c      	ldrb	r4, [r1, #0]
 80272de:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80272e2:	fb07 ce03 	mla	lr, r7, r3, ip
 80272e6:	2f00      	cmp	r7, #0
 80272e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80272ec:	eb02 0b0e 	add.w	fp, r2, lr
 80272f0:	db56      	blt.n	80273a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80272f2:	45b9      	cmp	r9, r7
 80272f4:	dd54      	ble.n	80273a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80272f6:	f1bc 0f00 	cmp.w	ip, #0
 80272fa:	db4d      	blt.n	8027398 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80272fc:	4563      	cmp	r3, ip
 80272fe:	dd4b      	ble.n	8027398 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8027300:	f812 200e 	ldrb.w	r2, [r2, lr]
 8027304:	9200      	str	r2, [sp, #0]
 8027306:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802730a:	9201      	str	r2, [sp, #4]
 802730c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8027310:	9202      	str	r2, [sp, #8]
 8027312:	f11c 0201 	adds.w	r2, ip, #1
 8027316:	d44a      	bmi.n	80273ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027318:	4293      	cmp	r3, r2
 802731a:	dd48      	ble.n	80273ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802731c:	2800      	cmp	r0, #0
 802731e:	d046      	beq.n	80273ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027320:	f89b e003 	ldrb.w	lr, [fp, #3]
 8027324:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8027328:	f89b a005 	ldrb.w	sl, [fp, #5]
 802732c:	3701      	adds	r7, #1
 802732e:	d446      	bmi.n	80273be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8027330:	45b9      	cmp	r9, r7
 8027332:	dd44      	ble.n	80273be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8027334:	9a03      	ldr	r2, [sp, #12]
 8027336:	2a00      	cmp	r2, #0
 8027338:	d045      	beq.n	80273c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802733a:	f1bc 0f00 	cmp.w	ip, #0
 802733e:	db3a      	blt.n	80273b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8027340:	4563      	cmp	r3, ip
 8027342:	dd38      	ble.n	80273b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8027344:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8027348:	f04f 0903 	mov.w	r9, #3
 802734c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8027350:	fb03 b209 	mla	r2, r3, r9, fp
 8027354:	fb03 b909 	mla	r9, r3, r9, fp
 8027358:	7852      	ldrb	r2, [r2, #1]
 802735a:	f899 9002 	ldrb.w	r9, [r9, #2]
 802735e:	f11c 0c01 	adds.w	ip, ip, #1
 8027362:	d40d      	bmi.n	8027380 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8027364:	4563      	cmp	r3, ip
 8027366:	dd0b      	ble.n	8027380 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8027368:	b160      	cbz	r0, 8027384 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802736a:	2603      	movs	r6, #3
 802736c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8027370:	fb03 b506 	mla	r5, r3, r6, fp
 8027374:	fb03 b306 	mla	r3, r3, r6, fp
 8027378:	f81b 4004 	ldrb.w	r4, [fp, r4]
 802737c:	792d      	ldrb	r5, [r5, #4]
 802737e:	795e      	ldrb	r6, [r3, #5]
 8027380:	280f      	cmp	r0, #15
 8027382:	d802      	bhi.n	802738a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8027384:	9b03      	ldr	r3, [sp, #12]
 8027386:	2b0f      	cmp	r3, #15
 8027388:	d922      	bls.n	80273d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802738a:	4b2f      	ldr	r3, [pc, #188]	; (8027448 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 802738c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8027390:	4a2e      	ldr	r2, [pc, #184]	; (802744c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8027392:	482f      	ldr	r0, [pc, #188]	; (8027450 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8027394:	f003 ff96 	bl	802b2c4 <__assert_func>
 8027398:	e9cd 5601 	strd	r5, r6, [sp, #4]
 802739c:	9400      	str	r4, [sp, #0]
 802739e:	e7b8      	b.n	8027312 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80273a0:	46b2      	mov	sl, r6
 80273a2:	46a8      	mov	r8, r5
 80273a4:	46a6      	mov	lr, r4
 80273a6:	9400      	str	r4, [sp, #0]
 80273a8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80273ac:	e7be      	b.n	802732c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80273ae:	46b2      	mov	sl, r6
 80273b0:	46a8      	mov	r8, r5
 80273b2:	46a6      	mov	lr, r4
 80273b4:	e7ba      	b.n	802732c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80273b6:	46b1      	mov	r9, r6
 80273b8:	462a      	mov	r2, r5
 80273ba:	4627      	mov	r7, r4
 80273bc:	e7cf      	b.n	802735e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80273be:	46b1      	mov	r9, r6
 80273c0:	462a      	mov	r2, r5
 80273c2:	4627      	mov	r7, r4
 80273c4:	e7dc      	b.n	8027380 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80273c6:	280f      	cmp	r0, #15
 80273c8:	d8df      	bhi.n	802738a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80273ca:	46b1      	mov	r9, r6
 80273cc:	462a      	mov	r2, r5
 80273ce:	4627      	mov	r7, r4
 80273d0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80273d4:	b280      	uxth	r0, r0
 80273d6:	fb00 f30b 	mul.w	r3, r0, fp
 80273da:	0100      	lsls	r0, r0, #4
 80273dc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80273e0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80273e4:	1ac0      	subs	r0, r0, r3
 80273e6:	fa1f fb8b 	uxth.w	fp, fp
 80273ea:	b280      	uxth	r0, r0
 80273ec:	ebac 0c0b 	sub.w	ip, ip, fp
 80273f0:	9003      	str	r0, [sp, #12]
 80273f2:	fa1f fc8c 	uxth.w	ip, ip
 80273f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80273fa:	9800      	ldr	r0, [sp, #0]
 80273fc:	fb0c ee00 	mla	lr, ip, r0, lr
 8027400:	9803      	ldr	r0, [sp, #12]
 8027402:	fb00 f808 	mul.w	r8, r0, r8
 8027406:	9801      	ldr	r0, [sp, #4]
 8027408:	fb0b ee07 	mla	lr, fp, r7, lr
 802740c:	fb0c 8800 	mla	r8, ip, r0, r8
 8027410:	fb03 ee04 	mla	lr, r3, r4, lr
 8027414:	fb0b 8202 	mla	r2, fp, r2, r8
 8027418:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802741c:	fb03 2505 	mla	r5, r3, r5, r2
 8027420:	9a03      	ldr	r2, [sp, #12]
 8027422:	f881 e000 	strb.w	lr, [r1]
 8027426:	fb02 f00a 	mul.w	r0, r2, sl
 802742a:	9a02      	ldr	r2, [sp, #8]
 802742c:	122d      	asrs	r5, r5, #8
 802742e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8027432:	704d      	strb	r5, [r1, #1]
 8027434:	fb0b c909 	mla	r9, fp, r9, ip
 8027438:	fb03 9606 	mla	r6, r3, r6, r9
 802743c:	1236      	asrs	r6, r6, #8
 802743e:	708e      	strb	r6, [r1, #2]
 8027440:	b005      	add	sp, #20
 8027442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027446:	bf00      	nop
 8027448:	08030f3f 	.word	0x08030f3f
 802744c:	08031436 	.word	0x08031436
 8027450:	08031008 	.word	0x08031008

08027454 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027458:	ed2d 8b0a 	vpush	{d8-d12}
 802745c:	b09d      	sub	sp, #116	; 0x74
 802745e:	eeb0 aa40 	vmov.f32	s20, s0
 8027462:	eef0 9a60 	vmov.f32	s19, s1
 8027466:	9306      	str	r3, [sp, #24]
 8027468:	eeb0 9a41 	vmov.f32	s18, s2
 802746c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8027470:	eeb0 8a62 	vmov.f32	s16, s5
 8027474:	901b      	str	r0, [sp, #108]	; 0x6c
 8027476:	eef0 8a43 	vmov.f32	s17, s6
 802747a:	9307      	str	r3, [sp, #28]
 802747c:	eeb0 ca44 	vmov.f32	s24, s8
 8027480:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8027484:	eef0 ba64 	vmov.f32	s23, s9
 8027488:	eeb0 ba45 	vmov.f32	s22, s10
 802748c:	9309      	str	r3, [sp, #36]	; 0x24
 802748e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8027492:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8027496:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8027498:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 802749c:	6850      	ldr	r0, [r2, #4]
 802749e:	6812      	ldr	r2, [r2, #0]
 80274a0:	fb00 1303 	mla	r3, r0, r3, r1
 80274a4:	9907      	ldr	r1, [sp, #28]
 80274a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80274aa:	18d3      	adds	r3, r2, r3
 80274ac:	2203      	movs	r2, #3
 80274ae:	9308      	str	r3, [sp, #32]
 80274b0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80274b2:	681b      	ldr	r3, [r3, #0]
 80274b4:	930a      	str	r3, [sp, #40]	; 0x28
 80274b6:	f06f 0304 	mvn.w	r3, #4
 80274ba:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80274be:	fb11 3302 	smlabb	r3, r1, r2, r3
 80274c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80274c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274c6:	2b00      	cmp	r3, #0
 80274c8:	dc03      	bgt.n	80274d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80274ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	f340 8193 	ble.w	80277f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80274d2:	9b06      	ldr	r3, [sp, #24]
 80274d4:	2b00      	cmp	r3, #0
 80274d6:	f340 80d0 	ble.w	802767a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80274da:	1432      	asrs	r2, r6, #16
 80274dc:	ea4f 4325 	mov.w	r3, r5, asr #16
 80274e0:	d42f      	bmi.n	8027542 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80274e2:	1c51      	adds	r1, r2, #1
 80274e4:	9807      	ldr	r0, [sp, #28]
 80274e6:	4281      	cmp	r1, r0
 80274e8:	da2e      	bge.n	8027548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80274ea:	2b00      	cmp	r3, #0
 80274ec:	db2c      	blt.n	8027548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80274ee:	1c59      	adds	r1, r3, #1
 80274f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80274f2:	4288      	cmp	r0, r1
 80274f4:	dd28      	ble.n	8027548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80274f6:	9b06      	ldr	r3, [sp, #24]
 80274f8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80274fa:	3b01      	subs	r3, #1
 80274fc:	fb02 6203 	mla	r2, r2, r3, r6
 8027500:	1412      	asrs	r2, r2, #16
 8027502:	d42c      	bmi.n	802755e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8027504:	3201      	adds	r2, #1
 8027506:	9907      	ldr	r1, [sp, #28]
 8027508:	4291      	cmp	r1, r2
 802750a:	dd28      	ble.n	802755e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802750c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802750e:	fb02 5303 	mla	r3, r2, r3, r5
 8027512:	141b      	asrs	r3, r3, #16
 8027514:	d423      	bmi.n	802755e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8027516:	3301      	adds	r3, #1
 8027518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802751a:	429a      	cmp	r2, r3
 802751c:	dd1f      	ble.n	802755e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802751e:	9b08      	ldr	r3, [sp, #32]
 8027520:	f8dd e018 	ldr.w	lr, [sp, #24]
 8027524:	f103 0c03 	add.w	ip, r3, #3
 8027528:	f1be 0f00 	cmp.w	lr, #0
 802752c:	f300 80fa 	bgt.w	8027724 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8027530:	9b06      	ldr	r3, [sp, #24]
 8027532:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027536:	9b08      	ldr	r3, [sp, #32]
 8027538:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802753c:	4423      	add	r3, r4
 802753e:	9308      	str	r3, [sp, #32]
 8027540:	e09d      	b.n	802767e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8027542:	1c51      	adds	r1, r2, #1
 8027544:	f040 808e 	bne.w	8027664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8027548:	9907      	ldr	r1, [sp, #28]
 802754a:	428a      	cmp	r2, r1
 802754c:	f280 808a 	bge.w	8027664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8027550:	1c5f      	adds	r7, r3, #1
 8027552:	f2c0 8087 	blt.w	8027664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8027556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027558:	4293      	cmp	r3, r2
 802755a:	f280 8083 	bge.w	8027664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802755e:	9f06      	ldr	r7, [sp, #24]
 8027560:	f8dd a020 	ldr.w	sl, [sp, #32]
 8027564:	2f00      	cmp	r7, #0
 8027566:	dde3      	ble.n	8027530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8027568:	1432      	asrs	r2, r6, #16
 802756a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802756e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8027572:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8027576:	f100 80bf 	bmi.w	80276f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802757a:	1c50      	adds	r0, r2, #1
 802757c:	9c07      	ldr	r4, [sp, #28]
 802757e:	4284      	cmp	r4, r0
 8027580:	f340 80bc 	ble.w	80276fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8027584:	2b00      	cmp	r3, #0
 8027586:	f2c0 80b9 	blt.w	80276fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802758a:	1c58      	adds	r0, r3, #1
 802758c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802758e:	4284      	cmp	r4, r0
 8027590:	f340 80b4 	ble.w	80276fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8027594:	9807      	ldr	r0, [sp, #28]
 8027596:	fb00 2303 	mla	r3, r0, r3, r2
 802759a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802759c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802759e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80275a2:	441a      	add	r2, r3
 80275a4:	f810 c003 	ldrb.w	ip, [r0, r3]
 80275a8:	7953      	ldrb	r3, [r2, #5]
 80275aa:	7850      	ldrb	r0, [r2, #1]
 80275ac:	f892 e002 	ldrb.w	lr, [r2, #2]
 80275b0:	f892 9003 	ldrb.w	r9, [r2, #3]
 80275b4:	f892 8004 	ldrb.w	r8, [r2, #4]
 80275b8:	930e      	str	r3, [sp, #56]	; 0x38
 80275ba:	f1bb 0f00 	cmp.w	fp, #0
 80275be:	d00f      	beq.n	80275e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80275c0:	3205      	adds	r2, #5
 80275c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80275c6:	18d3      	adds	r3, r2, r3
 80275c8:	5d12      	ldrb	r2, [r2, r4]
 80275ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80275cc:	785a      	ldrb	r2, [r3, #1]
 80275ce:	9211      	str	r2, [sp, #68]	; 0x44
 80275d0:	789a      	ldrb	r2, [r3, #2]
 80275d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80275d4:	78da      	ldrb	r2, [r3, #3]
 80275d6:	9210      	str	r2, [sp, #64]	; 0x40
 80275d8:	791a      	ldrb	r2, [r3, #4]
 80275da:	795b      	ldrb	r3, [r3, #5]
 80275dc:	9212      	str	r2, [sp, #72]	; 0x48
 80275de:	9314      	str	r3, [sp, #80]	; 0x50
 80275e0:	b28b      	uxth	r3, r1
 80275e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80275e4:	fa1f f28b 	uxth.w	r2, fp
 80275e8:	fb03 fb02 	mul.w	fp, r3, r2
 80275ec:	011b      	lsls	r3, r3, #4
 80275ee:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80275f2:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80275f6:	eba3 030b 	sub.w	r3, r3, fp
 80275fa:	b292      	uxth	r2, r2
 80275fc:	b29b      	uxth	r3, r3
 80275fe:	1a89      	subs	r1, r1, r2
 8027600:	fb03 f808 	mul.w	r8, r3, r8
 8027604:	b289      	uxth	r1, r1
 8027606:	fb03 f909 	mul.w	r9, r3, r9
 802760a:	fb01 8800 	mla	r8, r1, r0, r8
 802760e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027610:	fb01 990c 	mla	r9, r1, ip, r9
 8027614:	fb02 8800 	mla	r8, r2, r0, r8
 8027618:	9812      	ldr	r0, [sp, #72]	; 0x48
 802761a:	fb02 9904 	mla	r9, r2, r4, r9
 802761e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027620:	fb0b 8800 	mla	r8, fp, r0, r8
 8027624:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027626:	fb0b 9904 	mla	r9, fp, r4, r9
 802762a:	4343      	muls	r3, r0
 802762c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027630:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027634:	fb01 330e 	mla	r3, r1, lr, r3
 8027638:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802763a:	f88a 9000 	strb.w	r9, [sl]
 802763e:	fb02 3201 	mla	r2, r2, r1, r3
 8027642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027644:	f88a 8001 	strb.w	r8, [sl, #1]
 8027648:	fb0b 2b03 	mla	fp, fp, r3, r2
 802764c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8027650:	f88a b002 	strb.w	fp, [sl, #2]
 8027654:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8027656:	f10a 0a03 	add.w	sl, sl, #3
 802765a:	3f01      	subs	r7, #1
 802765c:	441e      	add	r6, r3
 802765e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027660:	441d      	add	r5, r3
 8027662:	e77f      	b.n	8027564 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8027664:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8027666:	441e      	add	r6, r3
 8027668:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802766a:	441d      	add	r5, r3
 802766c:	9b06      	ldr	r3, [sp, #24]
 802766e:	3b01      	subs	r3, #1
 8027670:	9306      	str	r3, [sp, #24]
 8027672:	9b08      	ldr	r3, [sp, #32]
 8027674:	3303      	adds	r3, #3
 8027676:	9308      	str	r3, [sp, #32]
 8027678:	e72b      	b.n	80274d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802767a:	f47f af3c 	bne.w	80274f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 802767e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027680:	2b00      	cmp	r3, #0
 8027682:	f340 80b9 	ble.w	80277f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8027686:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802768a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802768c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8027690:	eef0 6a48 	vmov.f32	s13, s16
 8027694:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8027698:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802769c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276a0:	ee16 6a90 	vmov	r6, s13
 80276a4:	eef0 6a68 	vmov.f32	s13, s17
 80276a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276ac:	ee16 5a90 	vmov	r5, s13
 80276b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80276b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80276b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80276bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80276c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80276c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80276c8:	ee18 2a10 	vmov	r2, s16
 80276cc:	eeb0 8a47 	vmov.f32	s16, s14
 80276d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80276d4:	ee18 2a90 	vmov	r2, s17
 80276d8:	9333      	str	r3, [sp, #204]	; 0xcc
 80276da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276dc:	eef0 8a67 	vmov.f32	s17, s15
 80276e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80276e4:	9334      	str	r3, [sp, #208]	; 0xd0
 80276e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80276e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80276ea:	3b01      	subs	r3, #1
 80276ec:	930c      	str	r3, [sp, #48]	; 0x30
 80276ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276f0:	bf08      	it	eq
 80276f2:	4613      	moveq	r3, r2
 80276f4:	9306      	str	r3, [sp, #24]
 80276f6:	e6e5      	b.n	80274c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80276f8:	1c54      	adds	r4, r2, #1
 80276fa:	d1ab      	bne.n	8027654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80276fc:	9807      	ldr	r0, [sp, #28]
 80276fe:	4282      	cmp	r2, r0
 8027700:	daa8      	bge.n	8027654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027702:	1c58      	adds	r0, r3, #1
 8027704:	dba6      	blt.n	8027654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027708:	4298      	cmp	r0, r3
 802770a:	dda3      	ble.n	8027654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802770c:	9000      	str	r0, [sp, #0]
 802770e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027710:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8027714:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8027718:	9b07      	ldr	r3, [sp, #28]
 802771a:	4651      	mov	r1, sl
 802771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802771e:	f7ff fdd1 	bl	80272c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027722:	e797      	b.n	8027654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8027724:	1431      	asrs	r1, r6, #16
 8027726:	9c07      	ldr	r4, [sp, #28]
 8027728:	1428      	asrs	r0, r5, #16
 802772a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802772e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8027732:	fb04 1000 	mla	r0, r4, r0, r1
 8027736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802773a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802773e:	4401      	add	r1, r0
 8027740:	5c20      	ldrb	r0, [r4, r0]
 8027742:	f891 8002 	ldrb.w	r8, [r1, #2]
 8027746:	900e      	str	r0, [sp, #56]	; 0x38
 8027748:	f891 a003 	ldrb.w	sl, [r1, #3]
 802774c:	7848      	ldrb	r0, [r1, #1]
 802774e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8027752:	f891 b005 	ldrb.w	fp, [r1, #5]
 8027756:	b172      	cbz	r2, 8027776 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8027758:	3105      	adds	r1, #5
 802775a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802775c:	190f      	adds	r7, r1, r4
 802775e:	5d09      	ldrb	r1, [r1, r4]
 8027760:	9115      	str	r1, [sp, #84]	; 0x54
 8027762:	7879      	ldrb	r1, [r7, #1]
 8027764:	9117      	str	r1, [sp, #92]	; 0x5c
 8027766:	78b9      	ldrb	r1, [r7, #2]
 8027768:	9119      	str	r1, [sp, #100]	; 0x64
 802776a:	78f9      	ldrb	r1, [r7, #3]
 802776c:	9116      	str	r1, [sp, #88]	; 0x58
 802776e:	7939      	ldrb	r1, [r7, #4]
 8027770:	9118      	str	r1, [sp, #96]	; 0x60
 8027772:	7979      	ldrb	r1, [r7, #5]
 8027774:	911a      	str	r1, [sp, #104]	; 0x68
 8027776:	b29b      	uxth	r3, r3
 8027778:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802777a:	b292      	uxth	r2, r2
 802777c:	f10c 0c03 	add.w	ip, ip, #3
 8027780:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027784:	fb03 f102 	mul.w	r1, r3, r2
 8027788:	011b      	lsls	r3, r3, #4
 802778a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 802778e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8027792:	1a5b      	subs	r3, r3, r1
 8027794:	b292      	uxth	r2, r2
 8027796:	b29b      	uxth	r3, r3
 8027798:	1abf      	subs	r7, r7, r2
 802779a:	fb03 f909 	mul.w	r9, r3, r9
 802779e:	b2bf      	uxth	r7, r7
 80277a0:	fb03 fa0a 	mul.w	sl, r3, sl
 80277a4:	fb03 f30b 	mul.w	r3, r3, fp
 80277a8:	fb07 9900 	mla	r9, r7, r0, r9
 80277ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80277ae:	fb07 aa04 	mla	sl, r7, r4, sl
 80277b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80277b4:	fb02 9900 	mla	r9, r2, r0, r9
 80277b8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80277ba:	fb07 3308 	mla	r3, r7, r8, r3
 80277be:	fb01 9900 	mla	r9, r1, r0, r9
 80277c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80277c4:	fb02 aa04 	mla	sl, r2, r4, sl
 80277c8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80277ca:	fb02 3200 	mla	r2, r2, r0, r3
 80277ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80277d0:	fb01 aa04 	mla	sl, r1, r4, sl
 80277d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80277d8:	fb01 2103 	mla	r1, r1, r3, r2
 80277dc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80277de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80277e2:	f80c 9c05 	strb.w	r9, [ip, #-5]
 80277e6:	1209      	asrs	r1, r1, #8
 80277e8:	441e      	add	r6, r3
 80277ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80277ec:	f80c ac06 	strb.w	sl, [ip, #-6]
 80277f0:	f80c 1c04 	strb.w	r1, [ip, #-4]
 80277f4:	441d      	add	r5, r3
 80277f6:	e697      	b.n	8027528 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80277f8:	b01d      	add	sp, #116	; 0x74
 80277fa:	ecbd 8b0a 	vpop	{d8-d12}
 80277fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027804 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8027804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027808:	b085      	sub	sp, #20
 802780a:	7888      	ldrb	r0, [r1, #2]
 802780c:	4691      	mov	r9, r2
 802780e:	9000      	str	r0, [sp, #0]
 8027810:	7848      	ldrb	r0, [r1, #1]
 8027812:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8027816:	9001      	str	r0, [sp, #4]
 8027818:	7808      	ldrb	r0, [r1, #0]
 802781a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802781e:	9002      	str	r0, [sp, #8]
 8027820:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8027824:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027828:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802782c:	fb04 c603 	mla	r6, r4, r3, ip
 8027830:	2c00      	cmp	r4, #0
 8027832:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8027836:	9a00      	ldr	r2, [sp, #0]
 8027838:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802783c:	9a01      	ldr	r2, [sp, #4]
 802783e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8027842:	db3a      	blt.n	80278ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8027844:	45a0      	cmp	r8, r4
 8027846:	dd38      	ble.n	80278ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8027848:	f1bc 0f00 	cmp.w	ip, #0
 802784c:	db33      	blt.n	80278b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802784e:	4563      	cmp	r3, ip
 8027850:	dd31      	ble.n	80278b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8027852:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8027856:	f11c 0601 	adds.w	r6, ip, #1
 802785a:	d431      	bmi.n	80278c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802785c:	42b3      	cmp	r3, r6
 802785e:	dd2f      	ble.n	80278c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8027860:	b375      	cbz	r5, 80278c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8027862:	f8de 6004 	ldr.w	r6, [lr, #4]
 8027866:	3401      	adds	r4, #1
 8027868:	d42e      	bmi.n	80278c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802786a:	45a0      	cmp	r8, r4
 802786c:	dd2c      	ble.n	80278c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802786e:	b35f      	cbz	r7, 80278c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8027870:	f1bc 0f00 	cmp.w	ip, #0
 8027874:	db26      	blt.n	80278c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8027876:	4563      	cmp	r3, ip
 8027878:	dd24      	ble.n	80278c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802787a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802787e:	f11c 0c01 	adds.w	ip, ip, #1
 8027882:	d405      	bmi.n	8027890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8027884:	4563      	cmp	r3, ip
 8027886:	dd03      	ble.n	8027890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8027888:	b115      	cbz	r5, 8027890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802788a:	3301      	adds	r3, #1
 802788c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8027890:	2d0f      	cmp	r5, #15
 8027892:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027896:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802789a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802789e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80278a2:	d801      	bhi.n	80278a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80278a4:	2f0f      	cmp	r7, #15
 80278a6:	d911      	bls.n	80278cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80278a8:	4b80      	ldr	r3, [pc, #512]	; (8027aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80278aa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80278ae:	4a80      	ldr	r2, [pc, #512]	; (8027ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80278b0:	4880      	ldr	r0, [pc, #512]	; (8027ab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80278b2:	f003 fd07 	bl	802b2c4 <__assert_func>
 80278b6:	4602      	mov	r2, r0
 80278b8:	e7cd      	b.n	8027856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80278ba:	4606      	mov	r6, r0
 80278bc:	4602      	mov	r2, r0
 80278be:	e7d2      	b.n	8027866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80278c0:	4606      	mov	r6, r0
 80278c2:	e7d0      	b.n	8027866 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80278c4:	4604      	mov	r4, r0
 80278c6:	e7da      	b.n	802787e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80278c8:	4604      	mov	r4, r0
 80278ca:	e7e1      	b.n	8027890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80278cc:	b2ab      	uxth	r3, r5
 80278ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80278d2:	b2bf      	uxth	r7, r7
 80278d4:	fb03 fe07 	mul.w	lr, r3, r7
 80278d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80278dc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80278e0:	eba3 0c0e 	sub.w	ip, r3, lr
 80278e4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80278e8:	b2bf      	uxth	r7, r7
 80278ea:	fa1f fc8c 	uxth.w	ip, ip
 80278ee:	eba5 0507 	sub.w	r5, r5, r7
 80278f2:	fb0c f30a 	mul.w	r3, ip, sl
 80278f6:	b2ad      	uxth	r5, r5
 80278f8:	fb05 330b 	mla	r3, r5, fp, r3
 80278fc:	fb07 3309 	mla	r3, r7, r9, r3
 8027900:	fb0e 3308 	mla	r3, lr, r8, r3
 8027904:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027908:	9303      	str	r3, [sp, #12]
 802790a:	d018      	beq.n	802793e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 802790c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027910:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027914:	fb0b f303 	mul.w	r3, fp, r3
 8027918:	fb0b fb02 	mul.w	fp, fp, r2
 802791c:	0a1a      	lsrs	r2, r3, #8
 802791e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027922:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027926:	441a      	add	r2, r3
 8027928:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802792c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8027930:	0a12      	lsrs	r2, r2, #8
 8027932:	0a1b      	lsrs	r3, r3, #8
 8027934:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802793c:	431a      	orrs	r2, r3
 802793e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027942:	d019      	beq.n	8027978 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8027944:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027948:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802794c:	fb0a fb0b 	mul.w	fp, sl, fp
 8027950:	fb0a fa06 	mul.w	sl, sl, r6
 8027954:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027958:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802795c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8027960:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027964:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027968:	445e      	add	r6, fp
 802796a:	0a1b      	lsrs	r3, r3, #8
 802796c:	0a36      	lsrs	r6, r6, #8
 802796e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027972:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027976:	431e      	orrs	r6, r3
 8027978:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802797c:	d019      	beq.n	80279b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 802797e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027982:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027986:	fb09 fa0a 	mul.w	sl, r9, sl
 802798a:	fb09 f904 	mul.w	r9, r9, r4
 802798e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027992:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027996:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802799a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802799e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80279a2:	4454      	add	r4, sl
 80279a4:	0a1b      	lsrs	r3, r3, #8
 80279a6:	0a24      	lsrs	r4, r4, #8
 80279a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279ac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80279b0:	431c      	orrs	r4, r3
 80279b2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80279b6:	d019      	beq.n	80279ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80279b8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80279bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80279c0:	fb08 f909 	mul.w	r9, r8, r9
 80279c4:	fb08 f800 	mul.w	r8, r8, r0
 80279c8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80279cc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80279d0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80279d4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80279d8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80279dc:	4448      	add	r0, r9
 80279de:	0a1b      	lsrs	r3, r3, #8
 80279e0:	0a00      	lsrs	r0, r0, #8
 80279e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80279ea:	4318      	orrs	r0, r3
 80279ec:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80279f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80279f4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80279f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80279fc:	fb0c f808 	mul.w	r8, ip, r8
 8027a00:	fb0c f606 	mul.w	r6, ip, r6
 8027a04:	fb05 8803 	mla	r8, r5, r3, r8
 8027a08:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027a0c:	fb05 6202 	mla	r2, r5, r2, r6
 8027a10:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027a14:	fb07 8803 	mla	r8, r7, r3, r8
 8027a18:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027a1c:	fb07 2704 	mla	r7, r7, r4, r2
 8027a20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a24:	fb0e 8303 	mla	r3, lr, r3, r8
 8027a28:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8027a2c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8027a30:	9803      	ldr	r0, [sp, #12]
 8027a32:	b292      	uxth	r2, r2
 8027a34:	9c02      	ldr	r4, [sp, #8]
 8027a36:	0a1b      	lsrs	r3, r3, #8
 8027a38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a3c:	4350      	muls	r0, r2
 8027a3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027a42:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027a46:	ea43 0e0e 	orr.w	lr, r3, lr
 8027a4a:	1c43      	adds	r3, r0, #1
 8027a4c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027a50:	fa5f f08e 	uxtb.w	r0, lr
 8027a54:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027a58:	b2db      	uxtb	r3, r3
 8027a5a:	fb14 f403 	smulbb	r4, r4, r3
 8027a5e:	fb00 4002 	mla	r0, r0, r2, r4
 8027a62:	b280      	uxth	r0, r0
 8027a64:	1c44      	adds	r4, r0, #1
 8027a66:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8027a6a:	9c01      	ldr	r4, [sp, #4]
 8027a6c:	fb14 f403 	smulbb	r4, r4, r3
 8027a70:	1200      	asrs	r0, r0, #8
 8027a72:	7008      	strb	r0, [r1, #0]
 8027a74:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8027a78:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8027a7c:	fb00 4002 	mla	r0, r0, r2, r4
 8027a80:	b280      	uxth	r0, r0
 8027a82:	1c44      	adds	r4, r0, #1
 8027a84:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8027a88:	1200      	asrs	r0, r0, #8
 8027a8a:	7048      	strb	r0, [r1, #1]
 8027a8c:	9800      	ldr	r0, [sp, #0]
 8027a8e:	fb10 f303 	smulbb	r3, r0, r3
 8027a92:	fb0e 3202 	mla	r2, lr, r2, r3
 8027a96:	b292      	uxth	r2, r2
 8027a98:	f102 0e01 	add.w	lr, r2, #1
 8027a9c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8027aa0:	1212      	asrs	r2, r2, #8
 8027aa2:	708a      	strb	r2, [r1, #2]
 8027aa4:	b005      	add	sp, #20
 8027aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027aaa:	bf00      	nop
 8027aac:	08030f3f 	.word	0x08030f3f
 8027ab0:	08031436 	.word	0x08031436
 8027ab4:	08031008 	.word	0x08031008

08027ab8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027abc:	ed2d 8b08 	vpush	{d8-d11}
 8027ac0:	b099      	sub	sp, #100	; 0x64
 8027ac2:	eeb0 aa40 	vmov.f32	s20, s0
 8027ac6:	eef0 9a60 	vmov.f32	s19, s1
 8027aca:	9306      	str	r3, [sp, #24]
 8027acc:	eeb0 9a41 	vmov.f32	s18, s2
 8027ad0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8027ad4:	eeb0 8a62 	vmov.f32	s16, s5
 8027ad8:	9216      	str	r2, [sp, #88]	; 0x58
 8027ada:	eef0 8a43 	vmov.f32	s17, s6
 8027ade:	9307      	str	r3, [sp, #28]
 8027ae0:	eef0 ba44 	vmov.f32	s23, s8
 8027ae4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8027ae8:	eeb0 ba64 	vmov.f32	s22, s9
 8027aec:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8027aee:	eef0 aa45 	vmov.f32	s21, s10
 8027af2:	9310      	str	r3, [sp, #64]	; 0x40
 8027af4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8027af8:	9017      	str	r0, [sp, #92]	; 0x5c
 8027afa:	9112      	str	r1, [sp, #72]	; 0x48
 8027afc:	6850      	ldr	r0, [r2, #4]
 8027afe:	9315      	str	r3, [sp, #84]	; 0x54
 8027b00:	6812      	ldr	r2, [r2, #0]
 8027b02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8027b04:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8027b08:	fb00 1303 	mla	r3, r0, r3, r1
 8027b0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027b10:	18d3      	adds	r3, r2, r3
 8027b12:	930a      	str	r3, [sp, #40]	; 0x28
 8027b14:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027b16:	681b      	ldr	r3, [r3, #0]
 8027b18:	9311      	str	r3, [sp, #68]	; 0x44
 8027b1a:	9b07      	ldr	r3, [sp, #28]
 8027b1c:	009b      	lsls	r3, r3, #2
 8027b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8027b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027b22:	2b00      	cmp	r3, #0
 8027b24:	dc03      	bgt.n	8027b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027b26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	f340 833b 	ble.w	80281a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8027b2e:	9b06      	ldr	r3, [sp, #24]
 8027b30:	2b00      	cmp	r3, #0
 8027b32:	f340 8197 	ble.w	8027e64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8027b36:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027b38:	1423      	asrs	r3, r4, #16
 8027b3a:	1412      	asrs	r2, r2, #16
 8027b3c:	d432      	bmi.n	8027ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8027b3e:	1c51      	adds	r1, r2, #1
 8027b40:	9807      	ldr	r0, [sp, #28]
 8027b42:	4288      	cmp	r0, r1
 8027b44:	dd31      	ble.n	8027baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027b46:	2b00      	cmp	r3, #0
 8027b48:	db2f      	blt.n	8027baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027b4a:	1c59      	adds	r1, r3, #1
 8027b4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027b4e:	4288      	cmp	r0, r1
 8027b50:	dd2b      	ble.n	8027baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027b52:	9b06      	ldr	r3, [sp, #24]
 8027b54:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027b56:	3b01      	subs	r3, #1
 8027b58:	992b      	ldr	r1, [sp, #172]	; 0xac
 8027b5a:	fb02 1203 	mla	r2, r2, r3, r1
 8027b5e:	1412      	asrs	r2, r2, #16
 8027b60:	d42e      	bmi.n	8027bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027b62:	3201      	adds	r2, #1
 8027b64:	9907      	ldr	r1, [sp, #28]
 8027b66:	4291      	cmp	r1, r2
 8027b68:	dd2a      	ble.n	8027bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027b6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027b6c:	fb02 4303 	mla	r3, r2, r3, r4
 8027b70:	141b      	asrs	r3, r3, #16
 8027b72:	d425      	bmi.n	8027bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027b74:	3301      	adds	r3, #1
 8027b76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027b78:	429a      	cmp	r2, r3
 8027b7a:	dd21      	ble.n	8027bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b7e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8027b82:	f103 0e03 	add.w	lr, r3, #3
 8027b86:	9b06      	ldr	r3, [sp, #24]
 8027b88:	9313      	str	r3, [sp, #76]	; 0x4c
 8027b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027b8c:	2b00      	cmp	r3, #0
 8027b8e:	f300 81d2 	bgt.w	8027f36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8027b92:	9b06      	ldr	r3, [sp, #24]
 8027b94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027b9e:	4423      	add	r3, r4
 8027ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8027ba2:	e161      	b.n	8027e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8027ba4:	1c51      	adds	r1, r2, #1
 8027ba6:	f040 8150 	bne.w	8027e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027baa:	9907      	ldr	r1, [sp, #28]
 8027bac:	428a      	cmp	r2, r1
 8027bae:	f280 814c 	bge.w	8027e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027bb2:	1c5a      	adds	r2, r3, #1
 8027bb4:	f2c0 8149 	blt.w	8027e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027bb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027bba:	4293      	cmp	r3, r2
 8027bbc:	f280 8145 	bge.w	8027e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027bc0:	9b06      	ldr	r3, [sp, #24]
 8027bc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027bc4:	9314      	str	r3, [sp, #80]	; 0x50
 8027bc6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8027bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8027bcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	dddf      	ble.n	8027b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8027bd2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027bd4:	1423      	asrs	r3, r4, #16
 8027bd6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027bda:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8027bde:	1412      	asrs	r2, r2, #16
 8027be0:	f100 8190 	bmi.w	8027f04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8027be4:	1c55      	adds	r5, r2, #1
 8027be6:	9f07      	ldr	r7, [sp, #28]
 8027be8:	42af      	cmp	r7, r5
 8027bea:	f340 818d 	ble.w	8027f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8027bee:	2b00      	cmp	r3, #0
 8027bf0:	f2c0 818a 	blt.w	8027f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8027bf4:	1c5d      	adds	r5, r3, #1
 8027bf6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027bf8:	42af      	cmp	r7, r5
 8027bfa:	f340 8185 	ble.w	8027f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8027bfe:	9d07      	ldr	r5, [sp, #28]
 8027c00:	fb03 2305 	mla	r3, r3, r5, r2
 8027c04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027c06:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027c0e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027c12:	2800      	cmp	r0, #0
 8027c14:	f000 8167 	beq.w	8027ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027c18:	686a      	ldr	r2, [r5, #4]
 8027c1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8027c1c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027c20:	2900      	cmp	r1, #0
 8027c22:	f000 8169 	beq.w	8027ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8027c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027c28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8027c2a:	18aa      	adds	r2, r5, r2
 8027c2c:	59ed      	ldr	r5, [r5, r7]
 8027c2e:	6852      	ldr	r2, [r2, #4]
 8027c30:	9508      	str	r5, [sp, #32]
 8027c32:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8027c36:	0e15      	lsrs	r5, r2, #24
 8027c38:	920c      	str	r2, [sp, #48]	; 0x30
 8027c3a:	b280      	uxth	r0, r0
 8027c3c:	b289      	uxth	r1, r1
 8027c3e:	fb00 fb01 	mul.w	fp, r0, r1
 8027c42:	0100      	lsls	r0, r0, #4
 8027c44:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8027c48:	eba0 090b 	sub.w	r9, r0, fp
 8027c4c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8027c50:	b289      	uxth	r1, r1
 8027c52:	fa1f f989 	uxth.w	r9, r9
 8027c56:	1a52      	subs	r2, r2, r1
 8027c58:	fb09 f008 	mul.w	r0, r9, r8
 8027c5c:	b292      	uxth	r2, r2
 8027c5e:	fb02 000c 	mla	r0, r2, ip, r0
 8027c62:	fb01 000a 	mla	r0, r1, sl, r0
 8027c66:	fb0b 0005 	mla	r0, fp, r5, r0
 8027c6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027c6e:	2800      	cmp	r0, #0
 8027c70:	f000 80e0 	beq.w	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027c74:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027c78:	d01b      	beq.n	8027cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8027c7a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8027c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c82:	fb0c fe0e 	mul.w	lr, ip, lr
 8027c86:	fb0c fc03 	mul.w	ip, ip, r3
 8027c8a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8027c8e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027c92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c96:	4473      	add	r3, lr
 8027c98:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8027c9c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8027ca0:	0a1b      	lsrs	r3, r3, #8
 8027ca2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ca6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027caa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027cae:	ea43 030e 	orr.w	r3, r3, lr
 8027cb2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027cb6:	d01e      	beq.n	8027cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8027cb8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027cba:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8027cbe:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8027cc2:	fb08 fc0c 	mul.w	ip, r8, ip
 8027cc6:	fb08 f80e 	mul.w	r8, r8, lr
 8027cca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027cce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027cd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027cd6:	44e6      	add	lr, ip
 8027cd8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8027cdc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8027ce0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ce4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027ce8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027cec:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027cf0:	ea4e 0708 	orr.w	r7, lr, r8
 8027cf4:	970b      	str	r7, [sp, #44]	; 0x2c
 8027cf6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027cfa:	d01e      	beq.n	8027d3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8027cfc:	9f08      	ldr	r7, [sp, #32]
 8027cfe:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8027d02:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027d06:	fb0a f808 	mul.w	r8, sl, r8
 8027d0a:	fb0a fa0c 	mul.w	sl, sl, ip
 8027d0e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8027d12:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027d16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027d1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027d22:	44c6      	add	lr, r8
 8027d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d34:	ea4e 070a 	orr.w	r7, lr, sl
 8027d38:	9708      	str	r7, [sp, #32]
 8027d3a:	2dff      	cmp	r5, #255	; 0xff
 8027d3c:	d01d      	beq.n	8027d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8027d3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027d40:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8027d44:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027d48:	fb05 f808 	mul.w	r8, r5, r8
 8027d4c:	fb05 f50c 	mul.w	r5, r5, ip
 8027d50:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8027d54:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027d58:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027d5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d60:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027d64:	44c6      	add	lr, r8
 8027d66:	0a2d      	lsrs	r5, r5, #8
 8027d68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d6c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027d70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d74:	ea4e 0505 	orr.w	r5, lr, r5
 8027d78:	950c      	str	r5, [sp, #48]	; 0x30
 8027d7a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027d7c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027d80:	9f08      	ldr	r7, [sp, #32]
 8027d82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027d8a:	fb09 f505 	mul.w	r5, r9, r5
 8027d8e:	fb02 550c 	mla	r5, r2, ip, r5
 8027d92:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8027d96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027d98:	fb01 550c 	mla	r5, r1, ip, r5
 8027d9c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8027da0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027da2:	fb0b 550c 	mla	r5, fp, ip, r5
 8027da6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027daa:	fb09 f90c 	mul.w	r9, r9, ip
 8027dae:	0a2d      	lsrs	r5, r5, #8
 8027db0:	fb02 9303 	mla	r3, r2, r3, r9
 8027db4:	9a08      	ldr	r2, [sp, #32]
 8027db6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027dba:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8027dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027dc0:	fb01 330e 	mla	r3, r1, lr, r3
 8027dc4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8027dc8:	fb0b 3b01 	mla	fp, fp, r1, r3
 8027dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027dce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027dd0:	4343      	muls	r3, r0
 8027dd2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027dd6:	1c58      	adds	r0, r3, #1
 8027dd8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027ddc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027de0:	ea45 050b 	orr.w	r5, r5, fp
 8027de4:	7833      	ldrb	r3, [r6, #0]
 8027de6:	b2ea      	uxtb	r2, r5
 8027de8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027dec:	fb12 f201 	smulbb	r2, r2, r1
 8027df0:	b2c0      	uxtb	r0, r0
 8027df2:	fb03 2300 	mla	r3, r3, r0, r2
 8027df6:	b29b      	uxth	r3, r3
 8027df8:	1c5a      	adds	r2, r3, #1
 8027dfa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027dfe:	7872      	ldrb	r2, [r6, #1]
 8027e00:	fb12 f200 	smulbb	r2, r2, r0
 8027e04:	121b      	asrs	r3, r3, #8
 8027e06:	7033      	strb	r3, [r6, #0]
 8027e08:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8027e0c:	0c2d      	lsrs	r5, r5, #16
 8027e0e:	fb03 2301 	mla	r3, r3, r1, r2
 8027e12:	b29b      	uxth	r3, r3
 8027e14:	1c5a      	adds	r2, r3, #1
 8027e16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027e1a:	121b      	asrs	r3, r3, #8
 8027e1c:	7073      	strb	r3, [r6, #1]
 8027e1e:	78b3      	ldrb	r3, [r6, #2]
 8027e20:	fb13 f000 	smulbb	r0, r3, r0
 8027e24:	fb05 0501 	mla	r5, r5, r1, r0
 8027e28:	b2ad      	uxth	r5, r5
 8027e2a:	1c6b      	adds	r3, r5, #1
 8027e2c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027e30:	122d      	asrs	r5, r5, #8
 8027e32:	70b5      	strb	r5, [r6, #2]
 8027e34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027e36:	3603      	adds	r6, #3
 8027e38:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027e3a:	4413      	add	r3, r2
 8027e3c:	932b      	str	r3, [sp, #172]	; 0xac
 8027e3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e40:	441c      	add	r4, r3
 8027e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027e44:	3b01      	subs	r3, #1
 8027e46:	9314      	str	r3, [sp, #80]	; 0x50
 8027e48:	e6c0      	b.n	8027bcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8027e4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027e4c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027e4e:	4413      	add	r3, r2
 8027e50:	932b      	str	r3, [sp, #172]	; 0xac
 8027e52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e54:	441c      	add	r4, r3
 8027e56:	9b06      	ldr	r3, [sp, #24]
 8027e58:	3b01      	subs	r3, #1
 8027e5a:	9306      	str	r3, [sp, #24]
 8027e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027e5e:	3303      	adds	r3, #3
 8027e60:	930a      	str	r3, [sp, #40]	; 0x28
 8027e62:	e664      	b.n	8027b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027e64:	f47f ae75 	bne.w	8027b52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8027e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027e6a:	2b00      	cmp	r3, #0
 8027e6c:	f340 819a 	ble.w	80281a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8027e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027e74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027e76:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027e7a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027e7e:	eef0 6a48 	vmov.f32	s13, s16
 8027e82:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027e86:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027e8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e8e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8027e92:	eef0 6a68 	vmov.f32	s13, s17
 8027e96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e9a:	ee16 4a90 	vmov	r4, s13
 8027e9e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027ea2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ea6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027eaa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027eae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027eb2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027eb6:	ee18 2a10 	vmov	r2, s16
 8027eba:	eeb0 8a47 	vmov.f32	s16, s14
 8027ebe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ec2:	ee18 2a90 	vmov	r2, s17
 8027ec6:	932d      	str	r3, [sp, #180]	; 0xb4
 8027ec8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027eca:	eef0 8a67 	vmov.f32	s17, s15
 8027ece:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ed2:	932e      	str	r3, [sp, #184]	; 0xb8
 8027ed4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027ed6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8027ed8:	3b01      	subs	r3, #1
 8027eda:	9312      	str	r3, [sp, #72]	; 0x48
 8027edc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027ede:	bf08      	it	eq
 8027ee0:	4613      	moveq	r3, r2
 8027ee2:	9306      	str	r3, [sp, #24]
 8027ee4:	e61c      	b.n	8027b20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8027ee6:	b151      	cbz	r1, 8027efe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8027ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027eea:	58aa      	ldr	r2, [r5, r2]
 8027eec:	25ff      	movs	r5, #255	; 0xff
 8027eee:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8027ef2:	9208      	str	r2, [sp, #32]
 8027ef4:	46a8      	mov	r8, r5
 8027ef6:	e6a0      	b.n	8027c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8027ef8:	25ff      	movs	r5, #255	; 0xff
 8027efa:	46aa      	mov	sl, r5
 8027efc:	e69d      	b.n	8027c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8027efe:	25ff      	movs	r5, #255	; 0xff
 8027f00:	46aa      	mov	sl, r5
 8027f02:	e7f7      	b.n	8027ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8027f04:	1c57      	adds	r7, r2, #1
 8027f06:	d195      	bne.n	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027f08:	9d07      	ldr	r5, [sp, #28]
 8027f0a:	4295      	cmp	r5, r2
 8027f0c:	dd92      	ble.n	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027f0e:	1c5d      	adds	r5, r3, #1
 8027f10:	db90      	blt.n	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027f12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027f14:	429d      	cmp	r5, r3
 8027f16:	dd8d      	ble.n	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027f18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027f1a:	9201      	str	r2, [sp, #4]
 8027f1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027f1e:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8027f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027f24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027f26:	9300      	str	r3, [sp, #0]
 8027f28:	9b07      	ldr	r3, [sp, #28]
 8027f2a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027f2e:	4631      	mov	r1, r6
 8027f30:	f7ff fc68 	bl	8027804 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8027f34:	e77e      	b.n	8027e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027f36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027f38:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027f3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027f3e:	9d07      	ldr	r5, [sp, #28]
 8027f40:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027f44:	1412      	asrs	r2, r2, #16
 8027f46:	1423      	asrs	r3, r4, #16
 8027f48:	fb05 2303 	mla	r3, r5, r3, r2
 8027f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027f4e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027f56:	0e1e      	lsrs	r6, r3, #24
 8027f58:	2900      	cmp	r1, #0
 8027f5a:	f000 8114 	beq.w	8028186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8027f5e:	686a      	ldr	r2, [r5, #4]
 8027f60:	920d      	str	r2, [sp, #52]	; 0x34
 8027f62:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8027f66:	2800      	cmp	r0, #0
 8027f68:	f000 8116 	beq.w	8028198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8027f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027f6e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8027f70:	18aa      	adds	r2, r5, r2
 8027f72:	59ed      	ldr	r5, [r5, r7]
 8027f74:	6852      	ldr	r2, [r2, #4]
 8027f76:	9509      	str	r5, [sp, #36]	; 0x24
 8027f78:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8027f7c:	0e15      	lsrs	r5, r2, #24
 8027f7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8027f80:	b289      	uxth	r1, r1
 8027f82:	b280      	uxth	r0, r0
 8027f84:	fb01 fa00 	mul.w	sl, r1, r0
 8027f88:	0109      	lsls	r1, r1, #4
 8027f8a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027f8e:	eba1 080a 	sub.w	r8, r1, sl
 8027f92:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8027f96:	b280      	uxth	r0, r0
 8027f98:	fa1f f888 	uxth.w	r8, r8
 8027f9c:	1a12      	subs	r2, r2, r0
 8027f9e:	fb08 f10c 	mul.w	r1, r8, ip
 8027fa2:	b292      	uxth	r2, r2
 8027fa4:	fb02 1106 	mla	r1, r2, r6, r1
 8027fa8:	fb00 1109 	mla	r1, r0, r9, r1
 8027fac:	fb0a 1105 	mla	r1, sl, r5, r1
 8027fb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027fb4:	2900      	cmp	r1, #0
 8027fb6:	f000 80da 	beq.w	802816e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8027fba:	2eff      	cmp	r6, #255	; 0xff
 8027fbc:	d016      	beq.n	8027fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8027fbe:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8027fc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027fc6:	4377      	muls	r7, r6
 8027fc8:	435e      	muls	r6, r3
 8027fca:	0a3b      	lsrs	r3, r7, #8
 8027fcc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027fd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027fd4:	443b      	add	r3, r7
 8027fd6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027fda:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8027fde:	0a1b      	lsrs	r3, r3, #8
 8027fe0:	0a3f      	lsrs	r7, r7, #8
 8027fe2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027fe6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027fea:	433b      	orrs	r3, r7
 8027fec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027ff0:	d01d      	beq.n	802802e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8027ff2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027ff4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027ff6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027ffa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027ffe:	fb0c f606 	mul.w	r6, ip, r6
 8028002:	fb0c fc07 	mul.w	ip, ip, r7
 8028006:	0a37      	lsrs	r7, r6, #8
 8028008:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802800c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028010:	4437      	add	r7, r6
 8028012:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8028016:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802801a:	0a3f      	lsrs	r7, r7, #8
 802801c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028020:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028024:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028028:	ea47 060c 	orr.w	r6, r7, ip
 802802c:	960d      	str	r6, [sp, #52]	; 0x34
 802802e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028032:	d01d      	beq.n	8028070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8028034:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8028036:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802803a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802803e:	fb09 fc0c 	mul.w	ip, r9, ip
 8028042:	fb09 f906 	mul.w	r9, r9, r6
 8028046:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802804a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802804e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8028052:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028056:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802805a:	4467      	add	r7, ip
 802805c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028060:	0a3f      	lsrs	r7, r7, #8
 8028062:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028066:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802806a:	ea47 0609 	orr.w	r6, r7, r9
 802806e:	9609      	str	r6, [sp, #36]	; 0x24
 8028070:	2dff      	cmp	r5, #255	; 0xff
 8028072:	d01a      	beq.n	80280aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8028074:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8028076:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802807a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802807e:	fb05 fc0c 	mul.w	ip, r5, ip
 8028082:	4375      	muls	r5, r6
 8028084:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8028088:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802808c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8028090:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028094:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8028098:	4467      	add	r7, ip
 802809a:	0a2d      	lsrs	r5, r5, #8
 802809c:	0a3f      	lsrs	r7, r7, #8
 802809e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80280a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80280a6:	433d      	orrs	r5, r7
 80280a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80280aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80280ac:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80280b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80280b4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80280b8:	fb08 f505 	mul.w	r5, r8, r5
 80280bc:	fb02 5506 	mla	r5, r2, r6, r5
 80280c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80280c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80280c6:	fb00 5506 	mla	r5, r0, r6, r5
 80280ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80280cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80280d0:	fb0a 5506 	mla	r5, sl, r6, r5
 80280d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80280d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80280da:	0a2d      	lsrs	r5, r5, #8
 80280dc:	fb08 f806 	mul.w	r8, r8, r6
 80280e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80280e4:	fb02 8303 	mla	r3, r2, r3, r8
 80280e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80280ea:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80280ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80280f0:	fb00 3307 	mla	r3, r0, r7, r3
 80280f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80280f8:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80280fc:	fb01 f30b 	mul.w	r3, r1, fp
 8028100:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028104:	1c59      	adds	r1, r3, #1
 8028106:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802810a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802810e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8028112:	ea45 050c 	orr.w	r5, r5, ip
 8028116:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802811a:	b2ea      	uxtb	r2, r5
 802811c:	b2c9      	uxtb	r1, r1
 802811e:	fb12 f20b 	smulbb	r2, r2, fp
 8028122:	fb03 2301 	mla	r3, r3, r1, r2
 8028126:	b29b      	uxth	r3, r3
 8028128:	1c5a      	adds	r2, r3, #1
 802812a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802812e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8028132:	fb12 f201 	smulbb	r2, r2, r1
 8028136:	121b      	asrs	r3, r3, #8
 8028138:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802813c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8028140:	0c2d      	lsrs	r5, r5, #16
 8028142:	fb03 230b 	mla	r3, r3, fp, r2
 8028146:	b29b      	uxth	r3, r3
 8028148:	1c5a      	adds	r2, r3, #1
 802814a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802814e:	121b      	asrs	r3, r3, #8
 8028150:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8028154:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8028158:	fb13 f101 	smulbb	r1, r3, r1
 802815c:	fb05 150b 	mla	r5, r5, fp, r1
 8028160:	b2ad      	uxth	r5, r5
 8028162:	1c69      	adds	r1, r5, #1
 8028164:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8028168:	122d      	asrs	r5, r5, #8
 802816a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802816e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028170:	f10e 0e03 	add.w	lr, lr, #3
 8028174:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028176:	4413      	add	r3, r2
 8028178:	932b      	str	r3, [sp, #172]	; 0xac
 802817a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802817c:	441c      	add	r4, r3
 802817e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028180:	3b01      	subs	r3, #1
 8028182:	9313      	str	r3, [sp, #76]	; 0x4c
 8028184:	e501      	b.n	8027b8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8028186:	b150      	cbz	r0, 802819e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8028188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802818a:	58aa      	ldr	r2, [r5, r2]
 802818c:	25ff      	movs	r5, #255	; 0xff
 802818e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8028192:	9209      	str	r2, [sp, #36]	; 0x24
 8028194:	46ac      	mov	ip, r5
 8028196:	e6f3      	b.n	8027f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8028198:	25ff      	movs	r5, #255	; 0xff
 802819a:	46a9      	mov	r9, r5
 802819c:	e6f0      	b.n	8027f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802819e:	25ff      	movs	r5, #255	; 0xff
 80281a0:	46a9      	mov	r9, r5
 80281a2:	e7f7      	b.n	8028194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80281a4:	b019      	add	sp, #100	; 0x64
 80281a6:	ecbd 8b08 	vpop	{d8-d11}
 80281aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080281b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80281b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281b4:	b085      	sub	sp, #20
 80281b6:	7888      	ldrb	r0, [r1, #2]
 80281b8:	4691      	mov	r9, r2
 80281ba:	9000      	str	r0, [sp, #0]
 80281bc:	7848      	ldrb	r0, [r1, #1]
 80281be:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80281c2:	9001      	str	r0, [sp, #4]
 80281c4:	7808      	ldrb	r0, [r1, #0]
 80281c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80281ca:	9002      	str	r0, [sp, #8]
 80281cc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80281d0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80281d4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80281d8:	fb04 c603 	mla	r6, r4, r3, ip
 80281dc:	2c00      	cmp	r4, #0
 80281de:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80281e2:	9a00      	ldr	r2, [sp, #0]
 80281e4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80281e8:	9a01      	ldr	r2, [sp, #4]
 80281ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80281ee:	db3a      	blt.n	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80281f0:	45a0      	cmp	r8, r4
 80281f2:	dd38      	ble.n	8028266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80281f4:	f1bc 0f00 	cmp.w	ip, #0
 80281f8:	db33      	blt.n	8028262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80281fa:	4563      	cmp	r3, ip
 80281fc:	dd31      	ble.n	8028262 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80281fe:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8028202:	f11c 0601 	adds.w	r6, ip, #1
 8028206:	d431      	bmi.n	802826c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8028208:	42b3      	cmp	r3, r6
 802820a:	dd2f      	ble.n	802826c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802820c:	b375      	cbz	r5, 802826c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802820e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8028212:	3401      	adds	r4, #1
 8028214:	d42e      	bmi.n	8028274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8028216:	45a0      	cmp	r8, r4
 8028218:	dd2c      	ble.n	8028274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802821a:	b35f      	cbz	r7, 8028274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802821c:	f1bc 0f00 	cmp.w	ip, #0
 8028220:	db26      	blt.n	8028270 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8028222:	4563      	cmp	r3, ip
 8028224:	dd24      	ble.n	8028270 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8028226:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802822a:	f11c 0c01 	adds.w	ip, ip, #1
 802822e:	d405      	bmi.n	802823c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028230:	4563      	cmp	r3, ip
 8028232:	dd03      	ble.n	802823c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028234:	b115      	cbz	r5, 802823c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028236:	3301      	adds	r3, #1
 8028238:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802823c:	2d0f      	cmp	r5, #15
 802823e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028242:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028246:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802824a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802824e:	d801      	bhi.n	8028254 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8028250:	2f0f      	cmp	r7, #15
 8028252:	d911      	bls.n	8028278 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8028254:	4b77      	ldr	r3, [pc, #476]	; (8028434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8028256:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802825a:	4a77      	ldr	r2, [pc, #476]	; (8028438 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 802825c:	4877      	ldr	r0, [pc, #476]	; (802843c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802825e:	f003 f831 	bl	802b2c4 <__assert_func>
 8028262:	4602      	mov	r2, r0
 8028264:	e7cd      	b.n	8028202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8028266:	4606      	mov	r6, r0
 8028268:	4602      	mov	r2, r0
 802826a:	e7d2      	b.n	8028212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802826c:	4606      	mov	r6, r0
 802826e:	e7d0      	b.n	8028212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8028270:	4604      	mov	r4, r0
 8028272:	e7da      	b.n	802822a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8028274:	4604      	mov	r4, r0
 8028276:	e7e1      	b.n	802823c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8028278:	b2ab      	uxth	r3, r5
 802827a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802827e:	b2bf      	uxth	r7, r7
 8028280:	fb03 fe07 	mul.w	lr, r3, r7
 8028284:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8028288:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802828c:	eba3 0c0e 	sub.w	ip, r3, lr
 8028290:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8028294:	b2bf      	uxth	r7, r7
 8028296:	fa1f fc8c 	uxth.w	ip, ip
 802829a:	eba5 0507 	sub.w	r5, r5, r7
 802829e:	fb0c f30a 	mul.w	r3, ip, sl
 80282a2:	b2ad      	uxth	r5, r5
 80282a4:	fb05 330b 	mla	r3, r5, fp, r3
 80282a8:	fb07 3309 	mla	r3, r7, r9, r3
 80282ac:	fb0e 3308 	mla	r3, lr, r8, r3
 80282b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282b4:	9303      	str	r3, [sp, #12]
 80282b6:	d018      	beq.n	80282ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80282b8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80282bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80282c0:	fb0b f303 	mul.w	r3, fp, r3
 80282c4:	fb0b fb02 	mul.w	fp, fp, r2
 80282c8:	0a1a      	lsrs	r2, r3, #8
 80282ca:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80282ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282d2:	441a      	add	r2, r3
 80282d4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80282d8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80282dc:	0a12      	lsrs	r2, r2, #8
 80282de:	0a1b      	lsrs	r3, r3, #8
 80282e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80282e8:	431a      	orrs	r2, r3
 80282ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80282ee:	d019      	beq.n	8028324 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80282f0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80282f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80282f8:	fb0a fb0b 	mul.w	fp, sl, fp
 80282fc:	fb0a fa06 	mul.w	sl, sl, r6
 8028300:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8028304:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028308:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802830c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028310:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028314:	445e      	add	r6, fp
 8028316:	0a1b      	lsrs	r3, r3, #8
 8028318:	0a36      	lsrs	r6, r6, #8
 802831a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802831e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028322:	431e      	orrs	r6, r3
 8028324:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028328:	d019      	beq.n	802835e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802832a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802832e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028332:	fb09 fa0a 	mul.w	sl, r9, sl
 8028336:	fb09 f904 	mul.w	r9, r9, r4
 802833a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802833e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028342:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8028346:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802834a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802834e:	4454      	add	r4, sl
 8028350:	0a1b      	lsrs	r3, r3, #8
 8028352:	0a24      	lsrs	r4, r4, #8
 8028354:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028358:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802835c:	431c      	orrs	r4, r3
 802835e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028362:	d019      	beq.n	8028398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8028364:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8028368:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802836c:	fb08 f909 	mul.w	r9, r8, r9
 8028370:	fb08 f800 	mul.w	r8, r8, r0
 8028374:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8028378:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802837c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8028380:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028384:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8028388:	4448      	add	r0, r9
 802838a:	0a1b      	lsrs	r3, r3, #8
 802838c:	0a00      	lsrs	r0, r0, #8
 802838e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028392:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028396:	4318      	orrs	r0, r3
 8028398:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802839c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80283a0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80283a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283a8:	fb0c f808 	mul.w	r8, ip, r8
 80283ac:	fb0c f606 	mul.w	r6, ip, r6
 80283b0:	fb05 8803 	mla	r8, r5, r3, r8
 80283b4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80283b8:	fb05 6202 	mla	r2, r5, r2, r6
 80283bc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80283c0:	fb07 8803 	mla	r8, r7, r3, r8
 80283c4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80283c8:	fb07 2704 	mla	r7, r7, r4, r2
 80283cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80283d0:	fb0e 8303 	mla	r3, lr, r3, r8
 80283d4:	fb0e 7e00 	mla	lr, lr, r0, r7
 80283d8:	9802      	ldr	r0, [sp, #8]
 80283da:	0a1b      	lsrs	r3, r3, #8
 80283dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80283e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80283e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80283ec:	9b03      	ldr	r3, [sp, #12]
 80283ee:	43db      	mvns	r3, r3
 80283f0:	b2db      	uxtb	r3, r3
 80283f2:	4358      	muls	r0, r3
 80283f4:	1c42      	adds	r2, r0, #1
 80283f6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80283fa:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80283fe:	700a      	strb	r2, [r1, #0]
 8028400:	9a01      	ldr	r2, [sp, #4]
 8028402:	435a      	muls	r2, r3
 8028404:	1c50      	adds	r0, r2, #1
 8028406:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802840a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802840e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8028412:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028416:	704a      	strb	r2, [r1, #1]
 8028418:	9a00      	ldr	r2, [sp, #0]
 802841a:	435a      	muls	r2, r3
 802841c:	4613      	mov	r3, r2
 802841e:	3201      	adds	r2, #1
 8028420:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028424:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8028428:	f881 e002 	strb.w	lr, [r1, #2]
 802842c:	b005      	add	sp, #20
 802842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028432:	bf00      	nop
 8028434:	08030f3f 	.word	0x08030f3f
 8028438:	08031436 	.word	0x08031436
 802843c:	08031008 	.word	0x08031008

08028440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028444:	ed2d 8b08 	vpush	{d8-d11}
 8028448:	b097      	sub	sp, #92	; 0x5c
 802844a:	eeb0 aa40 	vmov.f32	s20, s0
 802844e:	eef0 9a60 	vmov.f32	s19, s1
 8028452:	9306      	str	r3, [sp, #24]
 8028454:	eeb0 9a41 	vmov.f32	s18, s2
 8028458:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802845c:	eeb0 8a62 	vmov.f32	s16, s5
 8028460:	9214      	str	r2, [sp, #80]	; 0x50
 8028462:	eef0 8a43 	vmov.f32	s17, s6
 8028466:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028468:	eef0 ba44 	vmov.f32	s23, s8
 802846c:	9307      	str	r3, [sp, #28]
 802846e:	eeb0 ba64 	vmov.f32	s22, s9
 8028472:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8028476:	eef0 aa45 	vmov.f32	s21, s10
 802847a:	9015      	str	r0, [sp, #84]	; 0x54
 802847c:	9112      	str	r1, [sp, #72]	; 0x48
 802847e:	6850      	ldr	r0, [r2, #4]
 8028480:	9310      	str	r3, [sp, #64]	; 0x40
 8028482:	6812      	ldr	r2, [r2, #0]
 8028484:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8028486:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802848a:	fb00 1303 	mla	r3, r0, r3, r1
 802848e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028492:	18d3      	adds	r3, r2, r3
 8028494:	930a      	str	r3, [sp, #40]	; 0x28
 8028496:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028498:	681b      	ldr	r3, [r3, #0]
 802849a:	9311      	str	r3, [sp, #68]	; 0x44
 802849c:	9b07      	ldr	r3, [sp, #28]
 802849e:	009b      	lsls	r3, r3, #2
 80284a0:	930e      	str	r3, [sp, #56]	; 0x38
 80284a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80284a4:	2b00      	cmp	r3, #0
 80284a6:	dc03      	bgt.n	80284b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80284a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80284aa:	2b00      	cmp	r3, #0
 80284ac:	f340 832e 	ble.w	8028b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80284b0:	9b06      	ldr	r3, [sp, #24]
 80284b2:	2b00      	cmp	r3, #0
 80284b4:	f340 8186 	ble.w	80287c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80284b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80284ba:	1423      	asrs	r3, r4, #16
 80284bc:	1412      	asrs	r2, r2, #16
 80284be:	d42f      	bmi.n	8028520 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80284c0:	1c51      	adds	r1, r2, #1
 80284c2:	9807      	ldr	r0, [sp, #28]
 80284c4:	4288      	cmp	r0, r1
 80284c6:	dd2e      	ble.n	8028526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80284c8:	2b00      	cmp	r3, #0
 80284ca:	db2c      	blt.n	8028526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80284cc:	1c59      	adds	r1, r3, #1
 80284ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80284d0:	4288      	cmp	r0, r1
 80284d2:	dd28      	ble.n	8028526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80284d4:	9b06      	ldr	r3, [sp, #24]
 80284d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80284d8:	3b01      	subs	r3, #1
 80284da:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80284dc:	fb02 1203 	mla	r2, r2, r3, r1
 80284e0:	1412      	asrs	r2, r2, #16
 80284e2:	d42b      	bmi.n	802853c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80284e4:	3201      	adds	r2, #1
 80284e6:	9907      	ldr	r1, [sp, #28]
 80284e8:	4291      	cmp	r1, r2
 80284ea:	dd27      	ble.n	802853c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80284ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80284ee:	fb02 4303 	mla	r3, r2, r3, r4
 80284f2:	141b      	asrs	r3, r3, #16
 80284f4:	d422      	bmi.n	802853c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80284f6:	3301      	adds	r3, #1
 80284f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80284fa:	429a      	cmp	r2, r3
 80284fc:	dd1e      	ble.n	802853c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80284fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028500:	f8dd b018 	ldr.w	fp, [sp, #24]
 8028504:	1cdd      	adds	r5, r3, #3
 8028506:	f1bb 0f00 	cmp.w	fp, #0
 802850a:	f300 81c4 	bgt.w	8028896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802850e:	9b06      	ldr	r3, [sp, #24]
 8028510:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028516:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802851a:	4423      	add	r3, r4
 802851c:	930a      	str	r3, [sp, #40]	; 0x28
 802851e:	e153      	b.n	80287c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8028520:	1c51      	adds	r1, r2, #1
 8028522:	f040 8142 	bne.w	80287aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8028526:	9907      	ldr	r1, [sp, #28]
 8028528:	428a      	cmp	r2, r1
 802852a:	f280 813e 	bge.w	80287aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802852e:	1c5a      	adds	r2, r3, #1
 8028530:	f2c0 813b 	blt.w	80287aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8028534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028536:	4293      	cmp	r3, r2
 8028538:	f280 8137 	bge.w	80287aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802853c:	9b06      	ldr	r3, [sp, #24]
 802853e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028540:	9313      	str	r3, [sp, #76]	; 0x4c
 8028542:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028544:	2b00      	cmp	r3, #0
 8028546:	dde2      	ble.n	802850e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8028548:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802854a:	1423      	asrs	r3, r4, #16
 802854c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802854e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028552:	1409      	asrs	r1, r1, #16
 8028554:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8028558:	f100 8187 	bmi.w	802886a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 802855c:	1c4e      	adds	r6, r1, #1
 802855e:	9f07      	ldr	r7, [sp, #28]
 8028560:	42b7      	cmp	r7, r6
 8028562:	f340 8184 	ble.w	802886e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8028566:	2b00      	cmp	r3, #0
 8028568:	f2c0 8181 	blt.w	802886e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802856c:	1c5e      	adds	r6, r3, #1
 802856e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8028570:	42b7      	cmp	r7, r6
 8028572:	f340 817c 	ble.w	802886e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8028576:	9e07      	ldr	r6, [sp, #28]
 8028578:	fb03 1306 	mla	r3, r3, r6, r1
 802857c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802857e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8028582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8028586:	0e1f      	lsrs	r7, r3, #24
 8028588:	2a00      	cmp	r2, #0
 802858a:	f000 815c 	beq.w	8028846 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802858e:	6871      	ldr	r1, [r6, #4]
 8028590:	910b      	str	r1, [sp, #44]	; 0x2c
 8028592:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8028596:	2800      	cmp	r0, #0
 8028598:	f000 815e 	beq.w	8028858 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 802859c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802859e:	eb06 0c01 	add.w	ip, r6, r1
 80285a2:	5876      	ldr	r6, [r6, r1]
 80285a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80285a8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80285ac:	9608      	str	r6, [sp, #32]
 80285ae:	0e0e      	lsrs	r6, r1, #24
 80285b0:	910c      	str	r1, [sp, #48]	; 0x30
 80285b2:	b292      	uxth	r2, r2
 80285b4:	b280      	uxth	r0, r0
 80285b6:	fb02 fa00 	mul.w	sl, r2, r0
 80285ba:	0112      	lsls	r2, r2, #4
 80285bc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80285c0:	eba2 080a 	sub.w	r8, r2, sl
 80285c4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80285c8:	b280      	uxth	r0, r0
 80285ca:	fa1f f888 	uxth.w	r8, r8
 80285ce:	1a09      	subs	r1, r1, r0
 80285d0:	fb08 f20e 	mul.w	r2, r8, lr
 80285d4:	b289      	uxth	r1, r1
 80285d6:	fb01 2207 	mla	r2, r1, r7, r2
 80285da:	fb00 2209 	mla	r2, r0, r9, r2
 80285de:	fb0a 2206 	mla	r2, sl, r6, r2
 80285e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80285e6:	2a00      	cmp	r2, #0
 80285e8:	f000 80d4 	beq.w	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80285ec:	2fff      	cmp	r7, #255	; 0xff
 80285ee:	d01a      	beq.n	8028626 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80285f0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80285f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80285f8:	fb07 fc0c 	mul.w	ip, r7, ip
 80285fc:	435f      	muls	r7, r3
 80285fe:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8028602:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028606:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802860a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802860e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8028612:	4463      	add	r3, ip
 8028614:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028618:	0a1b      	lsrs	r3, r3, #8
 802861a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802861e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028622:	ea43 030b 	orr.w	r3, r3, fp
 8028626:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802862a:	d01e      	beq.n	802866a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802862c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802862e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8028632:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028636:	fb0e fb0b 	mul.w	fp, lr, fp
 802863a:	fb0e fe07 	mul.w	lr, lr, r7
 802863e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8028642:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028646:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802864a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802864e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8028652:	44dc      	add	ip, fp
 8028654:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802865c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028660:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028664:	ea4c 070e 	orr.w	r7, ip, lr
 8028668:	970b      	str	r7, [sp, #44]	; 0x2c
 802866a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802866e:	d01e      	beq.n	80286ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028670:	9f08      	ldr	r7, [sp, #32]
 8028672:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8028676:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802867a:	fb09 fe0e 	mul.w	lr, r9, lr
 802867e:	fb09 f907 	mul.w	r9, r9, r7
 8028682:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028686:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802868a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802868e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028692:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8028696:	44f4      	add	ip, lr
 8028698:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802869c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80286a0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80286a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286a8:	ea4c 0709 	orr.w	r7, ip, r9
 80286ac:	9708      	str	r7, [sp, #32]
 80286ae:	2eff      	cmp	r6, #255	; 0xff
 80286b0:	d01c      	beq.n	80286ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80286b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80286b4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80286b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80286bc:	fb06 fe0e 	mul.w	lr, r6, lr
 80286c0:	437e      	muls	r6, r7
 80286c2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80286c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80286ca:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80286ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286d2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80286d6:	44f4      	add	ip, lr
 80286d8:	0a36      	lsrs	r6, r6, #8
 80286da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80286de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80286e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286e6:	ea4c 0606 	orr.w	r6, ip, r6
 80286ea:	960c      	str	r6, [sp, #48]	; 0x30
 80286ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80286ee:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80286f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80286f6:	2aff      	cmp	r2, #255	; 0xff
 80286f8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80286fc:	fb08 f606 	mul.w	r6, r8, r6
 8028700:	fb01 6607 	mla	r6, r1, r7, r6
 8028704:	9f08      	ldr	r7, [sp, #32]
 8028706:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802870a:	fb00 6607 	mla	r6, r0, r7, r6
 802870e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8028710:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028714:	fb0a 6607 	mla	r6, sl, r7, r6
 8028718:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802871a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802871e:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8028722:	fb08 f807 	mul.w	r8, r8, r7
 8028726:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802872a:	fb01 8303 	mla	r3, r1, r3, r8
 802872e:	9908      	ldr	r1, [sp, #32]
 8028730:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028734:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028736:	fb00 330c 	mla	r3, r0, ip, r3
 802873a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802873e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8028742:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028746:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802874a:	ea46 060a 	orr.w	r6, r6, sl
 802874e:	b2f0      	uxtb	r0, r6
 8028750:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8028754:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8028758:	f000 8084 	beq.w	8028864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802875c:	43d2      	mvns	r2, r2
 802875e:	782b      	ldrb	r3, [r5, #0]
 8028760:	b2d2      	uxtb	r2, r2
 8028762:	fb03 f702 	mul.w	r7, r3, r2
 8028766:	1c7b      	adds	r3, r7, #1
 8028768:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802876c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028770:	702b      	strb	r3, [r5, #0]
 8028772:	786b      	ldrb	r3, [r5, #1]
 8028774:	fb03 f002 	mul.w	r0, r3, r2
 8028778:	1c43      	adds	r3, r0, #1
 802877a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802877e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028782:	706b      	strb	r3, [r5, #1]
 8028784:	78ab      	ldrb	r3, [r5, #2]
 8028786:	4353      	muls	r3, r2
 8028788:	1c5a      	adds	r2, r3, #1
 802878a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802878e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8028792:	70ae      	strb	r6, [r5, #2]
 8028794:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028796:	3503      	adds	r5, #3
 8028798:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802879a:	4413      	add	r3, r2
 802879c:	9329      	str	r3, [sp, #164]	; 0xa4
 802879e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80287a0:	441c      	add	r4, r3
 80287a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80287a4:	3b01      	subs	r3, #1
 80287a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80287a8:	e6cb      	b.n	8028542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80287aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80287ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80287ae:	4413      	add	r3, r2
 80287b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80287b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80287b4:	441c      	add	r4, r3
 80287b6:	9b06      	ldr	r3, [sp, #24]
 80287b8:	3b01      	subs	r3, #1
 80287ba:	9306      	str	r3, [sp, #24]
 80287bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80287be:	3303      	adds	r3, #3
 80287c0:	930a      	str	r3, [sp, #40]	; 0x28
 80287c2:	e675      	b.n	80284b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80287c4:	f47f ae86 	bne.w	80284d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80287c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80287ca:	2b00      	cmp	r3, #0
 80287cc:	f340 819e 	ble.w	8028b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80287d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80287d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80287d6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80287da:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80287de:	eef0 6a48 	vmov.f32	s13, s16
 80287e2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80287e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80287ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287ee:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80287f2:	eef0 6a68 	vmov.f32	s13, s17
 80287f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287fa:	ee16 4a90 	vmov	r4, s13
 80287fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028802:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028806:	ee37 8a48 	vsub.f32	s16, s14, s16
 802880a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802880e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028812:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028816:	ee18 2a10 	vmov	r2, s16
 802881a:	eeb0 8a47 	vmov.f32	s16, s14
 802881e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028822:	ee18 2a90 	vmov	r2, s17
 8028826:	932b      	str	r3, [sp, #172]	; 0xac
 8028828:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802882a:	eef0 8a67 	vmov.f32	s17, s15
 802882e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028832:	932c      	str	r3, [sp, #176]	; 0xb0
 8028834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028836:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028838:	3b01      	subs	r3, #1
 802883a:	9312      	str	r3, [sp, #72]	; 0x48
 802883c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802883e:	bf08      	it	eq
 8028840:	4613      	moveq	r3, r2
 8028842:	9306      	str	r3, [sp, #24]
 8028844:	e62d      	b.n	80284a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8028846:	b150      	cbz	r0, 802885e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8028848:	990e      	ldr	r1, [sp, #56]	; 0x38
 802884a:	5871      	ldr	r1, [r6, r1]
 802884c:	26ff      	movs	r6, #255	; 0xff
 802884e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028852:	9108      	str	r1, [sp, #32]
 8028854:	46b6      	mov	lr, r6
 8028856:	e6ac      	b.n	80285b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8028858:	26ff      	movs	r6, #255	; 0xff
 802885a:	46b1      	mov	r9, r6
 802885c:	e6a9      	b.n	80285b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802885e:	26ff      	movs	r6, #255	; 0xff
 8028860:	46b1      	mov	r9, r6
 8028862:	e7f7      	b.n	8028854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8028864:	7028      	strb	r0, [r5, #0]
 8028866:	7069      	strb	r1, [r5, #1]
 8028868:	e793      	b.n	8028792 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802886a:	1c4f      	adds	r7, r1, #1
 802886c:	d192      	bne.n	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802886e:	9e07      	ldr	r6, [sp, #28]
 8028870:	428e      	cmp	r6, r1
 8028872:	dd8f      	ble.n	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8028874:	1c5e      	adds	r6, r3, #1
 8028876:	db8d      	blt.n	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8028878:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802887a:	429e      	cmp	r6, r3
 802887c:	dd8a      	ble.n	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802887e:	9600      	str	r6, [sp, #0]
 8028880:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8028884:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8028888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802888a:	4629      	mov	r1, r5
 802888c:	9b07      	ldr	r3, [sp, #28]
 802888e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028890:	f7ff fc8e 	bl	80281b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8028894:	e77e      	b.n	8028794 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8028896:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028898:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802889c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802889e:	9e07      	ldr	r6, [sp, #28]
 80288a0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80288a4:	1409      	asrs	r1, r1, #16
 80288a6:	1423      	asrs	r3, r4, #16
 80288a8:	fb06 1303 	mla	r3, r6, r3, r1
 80288ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80288ae:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80288b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80288b6:	0e1f      	lsrs	r7, r3, #24
 80288b8:	2a00      	cmp	r2, #0
 80288ba:	f000 8113 	beq.w	8028ae4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80288be:	6871      	ldr	r1, [r6, #4]
 80288c0:	910d      	str	r1, [sp, #52]	; 0x34
 80288c2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80288c6:	2800      	cmp	r0, #0
 80288c8:	f000 8115 	beq.w	8028af6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80288cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80288ce:	eb06 0c01 	add.w	ip, r6, r1
 80288d2:	5876      	ldr	r6, [r6, r1]
 80288d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80288d8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80288dc:	9609      	str	r6, [sp, #36]	; 0x24
 80288de:	0e0e      	lsrs	r6, r1, #24
 80288e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80288e2:	b292      	uxth	r2, r2
 80288e4:	b280      	uxth	r0, r0
 80288e6:	fb02 fa00 	mul.w	sl, r2, r0
 80288ea:	0112      	lsls	r2, r2, #4
 80288ec:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80288f0:	eba2 080a 	sub.w	r8, r2, sl
 80288f4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80288f8:	b280      	uxth	r0, r0
 80288fa:	fa1f f888 	uxth.w	r8, r8
 80288fe:	1a09      	subs	r1, r1, r0
 8028900:	fb08 f20e 	mul.w	r2, r8, lr
 8028904:	b289      	uxth	r1, r1
 8028906:	fb01 2207 	mla	r2, r1, r7, r2
 802890a:	fb00 2209 	mla	r2, r0, r9, r2
 802890e:	fb0a 2206 	mla	r2, sl, r6, r2
 8028912:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028916:	2a00      	cmp	r2, #0
 8028918:	f000 80da 	beq.w	8028ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 802891c:	2fff      	cmp	r7, #255	; 0xff
 802891e:	d01a      	beq.n	8028956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8028920:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028928:	fb07 fc0c 	mul.w	ip, r7, ip
 802892c:	435f      	muls	r7, r3
 802892e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8028932:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028936:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802893a:	4463      	add	r3, ip
 802893c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8028940:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8028944:	0a1b      	lsrs	r3, r3, #8
 8028946:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802894a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802894e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028952:	ea43 030c 	orr.w	r3, r3, ip
 8028956:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802895a:	d021      	beq.n	80289a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 802895c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802895e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028962:	fb0e f707 	mul.w	r7, lr, r7
 8028966:	9713      	str	r7, [sp, #76]	; 0x4c
 8028968:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802896a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802896e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8028970:	fb0e fe0c 	mul.w	lr, lr, ip
 8028974:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028978:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802897c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028980:	44bc      	add	ip, r7
 8028982:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8028986:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802898a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802898e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028992:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028996:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802899a:	ea4c 070e 	orr.w	r7, ip, lr
 802899e:	970d      	str	r7, [sp, #52]	; 0x34
 80289a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80289a4:	d01e      	beq.n	80289e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80289a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80289a8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80289ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80289b0:	fb09 fe0e 	mul.w	lr, r9, lr
 80289b4:	fb09 f907 	mul.w	r9, r9, r7
 80289b8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80289bc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80289c0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80289c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80289c8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80289cc:	44f4      	add	ip, lr
 80289ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80289d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80289da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80289de:	ea4c 0709 	orr.w	r7, ip, r9
 80289e2:	9709      	str	r7, [sp, #36]	; 0x24
 80289e4:	2eff      	cmp	r6, #255	; 0xff
 80289e6:	d01c      	beq.n	8028a22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80289e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80289ea:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80289ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80289f2:	fb06 fe0e 	mul.w	lr, r6, lr
 80289f6:	437e      	muls	r6, r7
 80289f8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80289fc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028a00:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8028a04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a08:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8028a0c:	44f4      	add	ip, lr
 8028a0e:	0a36      	lsrs	r6, r6, #8
 8028a10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028a18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a1c:	ea4c 0606 	orr.w	r6, ip, r6
 8028a20:	960f      	str	r6, [sp, #60]	; 0x3c
 8028a22:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8028a24:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8028a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028a2c:	2aff      	cmp	r2, #255	; 0xff
 8028a2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028a32:	fb08 f606 	mul.w	r6, r8, r6
 8028a36:	fb01 6607 	mla	r6, r1, r7, r6
 8028a3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028a3c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028a40:	fb00 6607 	mla	r6, r0, r7, r6
 8028a44:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8028a46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028a4a:	fb0a 6607 	mla	r6, sl, r7, r6
 8028a4e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8028a50:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028a54:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8028a58:	fb08 f807 	mul.w	r8, r8, r7
 8028a5c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028a60:	fb01 8303 	mla	r3, r1, r3, r8
 8028a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028a66:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028a6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028a6c:	fb00 330c 	mla	r3, r0, ip, r3
 8028a70:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8028a74:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8028a78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a7c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028a80:	ea46 060e 	orr.w	r6, r6, lr
 8028a84:	b2f0      	uxtb	r0, r6
 8028a86:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8028a8a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8028a8e:	d038      	beq.n	8028b02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8028a90:	43d2      	mvns	r2, r2
 8028a92:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8028a96:	b2d2      	uxtb	r2, r2
 8028a98:	4357      	muls	r7, r2
 8028a9a:	1c7b      	adds	r3, r7, #1
 8028a9c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8028aa0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028aa4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8028aa8:	4350      	muls	r0, r2
 8028aaa:	f805 3c03 	strb.w	r3, [r5, #-3]
 8028aae:	1c43      	adds	r3, r0, #1
 8028ab0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028ab4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028abc:	4353      	muls	r3, r2
 8028abe:	f805 1c02 	strb.w	r1, [r5, #-2]
 8028ac2:	1c5a      	adds	r2, r3, #1
 8028ac4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028ac8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8028acc:	f805 6c01 	strb.w	r6, [r5, #-1]
 8028ad0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028ad2:	3503      	adds	r5, #3
 8028ad4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028ad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028ada:	4413      	add	r3, r2
 8028adc:	9329      	str	r3, [sp, #164]	; 0xa4
 8028ade:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ae0:	441c      	add	r4, r3
 8028ae2:	e510      	b.n	8028506 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8028ae4:	b150      	cbz	r0, 8028afc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8028ae6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028ae8:	5871      	ldr	r1, [r6, r1]
 8028aea:	26ff      	movs	r6, #255	; 0xff
 8028aec:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8028af0:	9109      	str	r1, [sp, #36]	; 0x24
 8028af2:	46b6      	mov	lr, r6
 8028af4:	e6f5      	b.n	80288e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8028af6:	26ff      	movs	r6, #255	; 0xff
 8028af8:	46b1      	mov	r9, r6
 8028afa:	e6f2      	b.n	80288e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8028afc:	26ff      	movs	r6, #255	; 0xff
 8028afe:	46b1      	mov	r9, r6
 8028b00:	e7f7      	b.n	8028af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8028b02:	f805 0c03 	strb.w	r0, [r5, #-3]
 8028b06:	f805 1c02 	strb.w	r1, [r5, #-2]
 8028b0a:	e7df      	b.n	8028acc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8028b0c:	b017      	add	sp, #92	; 0x5c
 8028b0e:	ecbd 8b08 	vpop	{d8-d11}
 8028b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8028b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b1c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8028b20:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028b24:	2800      	cmp	r0, #0
 8028b26:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8028b2a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8028b2e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028b32:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8028b36:	db6b      	blt.n	8028c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028b38:	4580      	cmp	r8, r0
 8028b3a:	dd69      	ble.n	8028c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028b3c:	f1bc 0f00 	cmp.w	ip, #0
 8028b40:	db66      	blt.n	8028c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028b42:	45e1      	cmp	r9, ip
 8028b44:	dd64      	ble.n	8028c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028b46:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028b4a:	f01e 0f01 	tst.w	lr, #1
 8028b4e:	5d16      	ldrb	r6, [r2, r4]
 8028b50:	bf0c      	ite	eq
 8028b52:	f006 060f 	andeq.w	r6, r6, #15
 8028b56:	1136      	asrne	r6, r6, #4
 8028b58:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028b5c:	b2f6      	uxtb	r6, r6
 8028b5e:	f110 0a01 	adds.w	sl, r0, #1
 8028b62:	d457      	bmi.n	8028c14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028b64:	45d0      	cmp	r8, sl
 8028b66:	dd55      	ble.n	8028c14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028b68:	f1bc 0f00 	cmp.w	ip, #0
 8028b6c:	db52      	blt.n	8028c14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028b6e:	45e1      	cmp	r9, ip
 8028b70:	dd50      	ble.n	8028c14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028b72:	2f00      	cmp	r7, #0
 8028b74:	f000 80ac 	beq.w	8028cd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8028b78:	f10e 0b01 	add.w	fp, lr, #1
 8028b7c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028b80:	f01b 0f01 	tst.w	fp, #1
 8028b84:	5d14      	ldrb	r4, [r2, r4]
 8028b86:	bf0c      	ite	eq
 8028b88:	f004 040f 	andeq.w	r4, r4, #15
 8028b8c:	1124      	asrne	r4, r4, #4
 8028b8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028b92:	b2e4      	uxtb	r4, r4
 8028b94:	2d00      	cmp	r5, #0
 8028b96:	f000 8096 	beq.w	8028cc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8028b9a:	2800      	cmp	r0, #0
 8028b9c:	f10c 0c01 	add.w	ip, ip, #1
 8028ba0:	db3c      	blt.n	8028c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028ba2:	4580      	cmp	r8, r0
 8028ba4:	dd3a      	ble.n	8028c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028ba6:	f1bc 0f00 	cmp.w	ip, #0
 8028baa:	db37      	blt.n	8028c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028bac:	45e1      	cmp	r9, ip
 8028bae:	dd35      	ble.n	8028c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028bb0:	eb03 0b0e 	add.w	fp, r3, lr
 8028bb4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028bb8:	f01b 0f01 	tst.w	fp, #1
 8028bbc:	5c10      	ldrb	r0, [r2, r0]
 8028bbe:	bf0c      	ite	eq
 8028bc0:	f000 000f 	andeq.w	r0, r0, #15
 8028bc4:	1100      	asrne	r0, r0, #4
 8028bc6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028bca:	b2c0      	uxtb	r0, r0
 8028bcc:	f1ba 0f00 	cmp.w	sl, #0
 8028bd0:	db26      	blt.n	8028c20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028bd2:	45d0      	cmp	r8, sl
 8028bd4:	dd24      	ble.n	8028c20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028bd6:	f1bc 0f00 	cmp.w	ip, #0
 8028bda:	db21      	blt.n	8028c20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028bdc:	45e1      	cmp	r9, ip
 8028bde:	dd1f      	ble.n	8028c20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028be0:	b307      	cbz	r7, 8028c24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8028be2:	3301      	adds	r3, #1
 8028be4:	449e      	add	lr, r3
 8028be6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028bea:	f01e 0f01 	tst.w	lr, #1
 8028bee:	5cd3      	ldrb	r3, [r2, r3]
 8028bf0:	bf0c      	ite	eq
 8028bf2:	f003 030f 	andeq.w	r3, r3, #15
 8028bf6:	111b      	asrne	r3, r3, #4
 8028bf8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028bfc:	b2db      	uxtb	r3, r3
 8028bfe:	2f0f      	cmp	r7, #15
 8028c00:	d911      	bls.n	8028c26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8028c02:	4b35      	ldr	r3, [pc, #212]	; (8028cd8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8028c04:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8028c08:	4a34      	ldr	r2, [pc, #208]	; (8028cdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8028c0a:	4835      	ldr	r0, [pc, #212]	; (8028ce0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8028c0c:	f002 fb5a 	bl	802b2c4 <__assert_func>
 8028c10:	2600      	movs	r6, #0
 8028c12:	e7a4      	b.n	8028b5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8028c14:	2400      	movs	r4, #0
 8028c16:	e7bd      	b.n	8028b94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8028c18:	463c      	mov	r4, r7
 8028c1a:	e7be      	b.n	8028b9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8028c1c:	2000      	movs	r0, #0
 8028c1e:	e7d5      	b.n	8028bcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8028c20:	2300      	movs	r3, #0
 8028c22:	e7ec      	b.n	8028bfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8028c24:	463b      	mov	r3, r7
 8028c26:	2d0f      	cmp	r5, #15
 8028c28:	d8eb      	bhi.n	8028c02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028c2a:	b2bf      	uxth	r7, r7
 8028c2c:	b2ad      	uxth	r5, r5
 8028c2e:	fb07 f205 	mul.w	r2, r7, r5
 8028c32:	013f      	lsls	r7, r7, #4
 8028c34:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8028c38:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8028c3c:	1abf      	subs	r7, r7, r2
 8028c3e:	b2ad      	uxth	r5, r5
 8028c40:	b2bf      	uxth	r7, r7
 8028c42:	ebac 0c05 	sub.w	ip, ip, r5
 8028c46:	437c      	muls	r4, r7
 8028c48:	fa1f fc8c 	uxth.w	ip, ip
 8028c4c:	fb06 440c 	mla	r4, r6, ip, r4
 8028c50:	fb05 4400 	mla	r4, r5, r0, r4
 8028c54:	fb02 4203 	mla	r2, r2, r3, r4
 8028c58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028c5c:	b38a      	cbz	r2, 8028cc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8028c5e:	4b21      	ldr	r3, [pc, #132]	; (8028ce4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8028c60:	681c      	ldr	r4, [r3, #0]
 8028c62:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8028c66:	b2e5      	uxtb	r5, r4
 8028c68:	4353      	muls	r3, r2
 8028c6a:	1c5a      	adds	r2, r3, #1
 8028c6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028c70:	1212      	asrs	r2, r2, #8
 8028c72:	b290      	uxth	r0, r2
 8028c74:	43d2      	mvns	r2, r2
 8028c76:	fb15 f500 	smulbb	r5, r5, r0
 8028c7a:	b2d3      	uxtb	r3, r2
 8028c7c:	780a      	ldrb	r2, [r1, #0]
 8028c7e:	fb02 5203 	mla	r2, r2, r3, r5
 8028c82:	b292      	uxth	r2, r2
 8028c84:	1c55      	adds	r5, r2, #1
 8028c86:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028c8a:	784d      	ldrb	r5, [r1, #1]
 8028c8c:	fb15 f503 	smulbb	r5, r5, r3
 8028c90:	1212      	asrs	r2, r2, #8
 8028c92:	700a      	strb	r2, [r1, #0]
 8028c94:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8028c98:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028c9c:	fb02 5200 	mla	r2, r2, r0, r5
 8028ca0:	b292      	uxth	r2, r2
 8028ca2:	1c55      	adds	r5, r2, #1
 8028ca4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028ca8:	1212      	asrs	r2, r2, #8
 8028caa:	704a      	strb	r2, [r1, #1]
 8028cac:	788a      	ldrb	r2, [r1, #2]
 8028cae:	fb12 f303 	smulbb	r3, r2, r3
 8028cb2:	fb04 3300 	mla	r3, r4, r0, r3
 8028cb6:	b29b      	uxth	r3, r3
 8028cb8:	1c5a      	adds	r2, r3, #1
 8028cba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028cbe:	121b      	asrs	r3, r3, #8
 8028cc0:	708b      	strb	r3, [r1, #2]
 8028cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cc6:	2f0f      	cmp	r7, #15
 8028cc8:	d89b      	bhi.n	8028c02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028cca:	462b      	mov	r3, r5
 8028ccc:	4628      	mov	r0, r5
 8028cce:	e7ac      	b.n	8028c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8028cd0:	2d00      	cmp	r5, #0
 8028cd2:	d1a1      	bne.n	8028c18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8028cd4:	462c      	mov	r4, r5
 8028cd6:	e7f8      	b.n	8028cca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8028cd8:	08030f3f 	.word	0x08030f3f
 8028cdc:	08031436 	.word	0x08031436
 8028ce0:	08031008 	.word	0x08031008
 8028ce4:	2000bff8 	.word	0x2000bff8

08028ce8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8028ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cec:	ed2d 8b08 	vpush	{d8-d11}
 8028cf0:	b097      	sub	sp, #92	; 0x5c
 8028cf2:	eeb0 aa40 	vmov.f32	s20, s0
 8028cf6:	eef0 9a60 	vmov.f32	s19, s1
 8028cfa:	9308      	str	r3, [sp, #32]
 8028cfc:	eeb0 9a41 	vmov.f32	s18, s2
 8028d00:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8028d04:	eeb0 8a62 	vmov.f32	s16, s5
 8028d08:	9214      	str	r2, [sp, #80]	; 0x50
 8028d0a:	eef0 8a43 	vmov.f32	s17, s6
 8028d0e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028d10:	eef0 ba44 	vmov.f32	s23, s8
 8028d14:	9309      	str	r3, [sp, #36]	; 0x24
 8028d16:	eeb0 ba64 	vmov.f32	s22, s9
 8028d1a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8028d1e:	eef0 aa45 	vmov.f32	s21, s10
 8028d22:	9015      	str	r0, [sp, #84]	; 0x54
 8028d24:	910c      	str	r1, [sp, #48]	; 0x30
 8028d26:	930e      	str	r3, [sp, #56]	; 0x38
 8028d28:	6850      	ldr	r0, [r2, #4]
 8028d2a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8028d2e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028d32:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8028d36:	fb00 1803 	mla	r8, r0, r3, r1
 8028d3a:	6813      	ldr	r3, [r2, #0]
 8028d3c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028d40:	4498      	add	r8, r3
 8028d42:	f10b 0301 	add.w	r3, fp, #1
 8028d46:	f023 0301 	bic.w	r3, r3, #1
 8028d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028d4c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028d4e:	681f      	ldr	r7, [r3, #0]
 8028d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	dc03      	bgt.n	8028d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8028d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028d58:	2b00      	cmp	r3, #0
 8028d5a:	f340 8238 	ble.w	80291ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8028d5e:	9b08      	ldr	r3, [sp, #32]
 8028d60:	2b00      	cmp	r3, #0
 8028d62:	f340 810c 	ble.w	8028f7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8028d66:	142a      	asrs	r2, r5, #16
 8028d68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028d6c:	d42c      	bmi.n	8028dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8028d6e:	1c51      	adds	r1, r2, #1
 8028d70:	458b      	cmp	fp, r1
 8028d72:	dd2c      	ble.n	8028dce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028d74:	2b00      	cmp	r3, #0
 8028d76:	db2a      	blt.n	8028dce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028d78:	1c59      	adds	r1, r3, #1
 8028d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028d7c:	4288      	cmp	r0, r1
 8028d7e:	dd26      	ble.n	8028dce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028d80:	9b08      	ldr	r3, [sp, #32]
 8028d82:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028d84:	3b01      	subs	r3, #1
 8028d86:	fb02 5203 	mla	r2, r2, r3, r5
 8028d8a:	1412      	asrs	r2, r2, #16
 8028d8c:	d429      	bmi.n	8028de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028d8e:	3201      	adds	r2, #1
 8028d90:	4593      	cmp	fp, r2
 8028d92:	dd26      	ble.n	8028de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028d94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028d96:	fb02 6303 	mla	r3, r2, r3, r6
 8028d9a:	141b      	asrs	r3, r3, #16
 8028d9c:	d421      	bmi.n	8028de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028d9e:	3301      	adds	r3, #1
 8028da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028da2:	429a      	cmp	r2, r3
 8028da4:	dd1d      	ble.n	8028de2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028da6:	f108 0e03 	add.w	lr, r8, #3
 8028daa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028dae:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8028db2:	f1b9 0f00 	cmp.w	r9, #0
 8028db6:	f300 814f 	bgt.w	8029058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8028dba:	9b08      	ldr	r3, [sp, #32]
 8028dbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028dc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028dc4:	44a0      	add	r8, r4
 8028dc6:	e0dc      	b.n	8028f82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8028dc8:	1c51      	adds	r1, r2, #1
 8028dca:	f040 80ce 	bne.w	8028f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028dce:	4593      	cmp	fp, r2
 8028dd0:	f340 80cb 	ble.w	8028f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028dd4:	1c5a      	adds	r2, r3, #1
 8028dd6:	f2c0 80c8 	blt.w	8028f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028ddc:	4293      	cmp	r3, r2
 8028dde:	f280 80c4 	bge.w	8028f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028de2:	9b08      	ldr	r3, [sp, #32]
 8028de4:	46c1      	mov	r9, r8
 8028de6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8028dea:	930d      	str	r3, [sp, #52]	; 0x34
 8028dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	dde3      	ble.n	8028dba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8028df2:	1428      	asrs	r0, r5, #16
 8028df4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028df8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028dfc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028e00:	f100 8111 	bmi.w	8029026 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8028e04:	f100 0c01 	add.w	ip, r0, #1
 8028e08:	45e3      	cmp	fp, ip
 8028e0a:	f340 810e 	ble.w	802902a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	f2c0 810b 	blt.w	802902a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028e14:	f103 0c01 	add.w	ip, r3, #1
 8028e18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028e1a:	4564      	cmp	r4, ip
 8028e1c:	f340 8105 	ble.w	802902a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028e20:	fb03 030a 	mla	r3, r3, sl, r0
 8028e24:	0858      	lsrs	r0, r3, #1
 8028e26:	07dc      	lsls	r4, r3, #31
 8028e28:	5c38      	ldrb	r0, [r7, r0]
 8028e2a:	bf54      	ite	pl
 8028e2c:	f000 000f 	andpl.w	r0, r0, #15
 8028e30:	1100      	asrmi	r0, r0, #4
 8028e32:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028e36:	b2c0      	uxtb	r0, r0
 8028e38:	2a00      	cmp	r2, #0
 8028e3a:	f000 80e1 	beq.w	8029000 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8028e3e:	f103 0e01 	add.w	lr, r3, #1
 8028e42:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028e46:	f01e 0f01 	tst.w	lr, #1
 8028e4a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e4e:	bf0c      	ite	eq
 8028e50:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028e54:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028e58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e5c:	fa5f f48c 	uxtb.w	r4, ip
 8028e60:	9410      	str	r4, [sp, #64]	; 0x40
 8028e62:	b1f9      	cbz	r1, 8028ea4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8028e64:	4453      	add	r3, sl
 8028e66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e6a:	07dc      	lsls	r4, r3, #31
 8028e6c:	f103 0301 	add.w	r3, r3, #1
 8028e70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e74:	bf54      	ite	pl
 8028e76:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028e7a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028e7e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e82:	fa5f f48c 	uxtb.w	r4, ip
 8028e86:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e8a:	940a      	str	r4, [sp, #40]	; 0x28
 8028e8c:	07dc      	lsls	r4, r3, #31
 8028e8e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e92:	bf54      	ite	pl
 8028e94:	f00c 030f 	andpl.w	r3, ip, #15
 8028e98:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028e9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028ea0:	b2db      	uxtb	r3, r3
 8028ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8028ea4:	b292      	uxth	r2, r2
 8028ea6:	b289      	uxth	r1, r1
 8028ea8:	0113      	lsls	r3, r2, #4
 8028eaa:	fb02 fc01 	mul.w	ip, r2, r1
 8028eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028eb0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8028eb4:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8028eb8:	eba3 030c 	sub.w	r3, r3, ip
 8028ebc:	b289      	uxth	r1, r1
 8028ebe:	b29b      	uxth	r3, r3
 8028ec0:	ebae 0e01 	sub.w	lr, lr, r1
 8028ec4:	4353      	muls	r3, r2
 8028ec6:	fa1f fe8e 	uxth.w	lr, lr
 8028eca:	fb00 320e 	mla	r2, r0, lr, r3
 8028ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028ed0:	fb01 2203 	mla	r2, r1, r3, r2
 8028ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028ed6:	fb0c 2203 	mla	r2, ip, r3, r2
 8028eda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028ede:	2a00      	cmp	r2, #0
 8028ee0:	d039      	beq.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028ee2:	4bbd      	ldr	r3, [pc, #756]	; (80291d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8028ee4:	6819      	ldr	r1, [r3, #0]
 8028ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028ee8:	fa5f fc81 	uxtb.w	ip, r1
 8028eec:	435a      	muls	r2, r3
 8028eee:	1c53      	adds	r3, r2, #1
 8028ef0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028ef4:	1212      	asrs	r2, r2, #8
 8028ef6:	b290      	uxth	r0, r2
 8028ef8:	43d2      	mvns	r2, r2
 8028efa:	fb1c fc00 	smulbb	ip, ip, r0
 8028efe:	b2d3      	uxtb	r3, r2
 8028f00:	f899 2000 	ldrb.w	r2, [r9]
 8028f04:	fb02 c203 	mla	r2, r2, r3, ip
 8028f08:	b292      	uxth	r2, r2
 8028f0a:	f102 0c01 	add.w	ip, r2, #1
 8028f0e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028f12:	f899 c001 	ldrb.w	ip, [r9, #1]
 8028f16:	fb1c fc03 	smulbb	ip, ip, r3
 8028f1a:	1212      	asrs	r2, r2, #8
 8028f1c:	f889 2000 	strb.w	r2, [r9]
 8028f20:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8028f24:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8028f28:	fb02 c200 	mla	r2, r2, r0, ip
 8028f2c:	b292      	uxth	r2, r2
 8028f2e:	f102 0c01 	add.w	ip, r2, #1
 8028f32:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028f36:	1212      	asrs	r2, r2, #8
 8028f38:	f889 2001 	strb.w	r2, [r9, #1]
 8028f3c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8028f40:	fb12 f303 	smulbb	r3, r2, r3
 8028f44:	fb01 3300 	mla	r3, r1, r0, r3
 8028f48:	b29b      	uxth	r3, r3
 8028f4a:	1c5a      	adds	r2, r3, #1
 8028f4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028f50:	121b      	asrs	r3, r3, #8
 8028f52:	f889 3002 	strb.w	r3, [r9, #2]
 8028f56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028f58:	f109 0903 	add.w	r9, r9, #3
 8028f5c:	441d      	add	r5, r3
 8028f5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f60:	441e      	add	r6, r3
 8028f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f64:	3b01      	subs	r3, #1
 8028f66:	930d      	str	r3, [sp, #52]	; 0x34
 8028f68:	e740      	b.n	8028dec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8028f6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028f6c:	f108 0803 	add.w	r8, r8, #3
 8028f70:	441d      	add	r5, r3
 8028f72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f74:	441e      	add	r6, r3
 8028f76:	9b08      	ldr	r3, [sp, #32]
 8028f78:	3b01      	subs	r3, #1
 8028f7a:	9308      	str	r3, [sp, #32]
 8028f7c:	e6ef      	b.n	8028d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8028f7e:	f47f aeff 	bne.w	8028d80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8028f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	f340 8122 	ble.w	80291ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8028f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028f90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028f94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028f98:	eef0 6a48 	vmov.f32	s13, s16
 8028f9c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028fa0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028fa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fa8:	ee16 5a90 	vmov	r5, s13
 8028fac:	eef0 6a68 	vmov.f32	s13, s17
 8028fb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028fb4:	ee16 6a90 	vmov	r6, s13
 8028fb8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028fbc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028fc0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028fc4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028fc8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028fcc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028fd0:	ee18 2a10 	vmov	r2, s16
 8028fd4:	eeb0 8a47 	vmov.f32	s16, s14
 8028fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fdc:	ee18 2a90 	vmov	r2, s17
 8028fe0:	932b      	str	r3, [sp, #172]	; 0xac
 8028fe2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028fe4:	eef0 8a67 	vmov.f32	s17, s15
 8028fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fec:	932c      	str	r3, [sp, #176]	; 0xb0
 8028fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028ff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028ff2:	3b01      	subs	r3, #1
 8028ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8028ff6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028ff8:	bf08      	it	eq
 8028ffa:	4613      	moveq	r3, r2
 8028ffc:	9308      	str	r3, [sp, #32]
 8028ffe:	e6a7      	b.n	8028d50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8029000:	2900      	cmp	r1, #0
 8029002:	f43f af4f 	beq.w	8028ea4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8029006:	4453      	add	r3, sl
 8029008:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802900c:	07db      	lsls	r3, r3, #31
 802900e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029012:	bf54      	ite	pl
 8029014:	f00c 030f 	andpl.w	r3, ip, #15
 8029018:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802901c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029020:	b2db      	uxtb	r3, r3
 8029022:	930a      	str	r3, [sp, #40]	; 0x28
 8029024:	e73e      	b.n	8028ea4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8029026:	1c44      	adds	r4, r0, #1
 8029028:	d195      	bne.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802902a:	4583      	cmp	fp, r0
 802902c:	dd93      	ble.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802902e:	1c5c      	adds	r4, r3, #1
 8029030:	db91      	blt.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8029032:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029034:	429c      	cmp	r4, r3
 8029036:	dd8e      	ble.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8029038:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802903a:	9002      	str	r0, [sp, #8]
 802903c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802903e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8029042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029044:	463a      	mov	r2, r7
 8029046:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802904a:	e9cd b300 	strd	fp, r3, [sp]
 802904e:	4649      	mov	r1, r9
 8029050:	4653      	mov	r3, sl
 8029052:	f7ff fd61 	bl	8028b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8029056:	e77e      	b.n	8028f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8029058:	142a      	asrs	r2, r5, #16
 802905a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802905e:	1433      	asrs	r3, r6, #16
 8029060:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029064:	fb0a 2303 	mla	r3, sl, r3, r2
 8029068:	085a      	lsrs	r2, r3, #1
 802906a:	07dc      	lsls	r4, r3, #31
 802906c:	5cba      	ldrb	r2, [r7, r2]
 802906e:	bf54      	ite	pl
 8029070:	f002 020f 	andpl.w	r2, r2, #15
 8029074:	1112      	asrmi	r2, r2, #4
 8029076:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802907a:	b2d2      	uxtb	r2, r2
 802907c:	2900      	cmp	r1, #0
 802907e:	f000 8093 	beq.w	80291a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8029082:	1c5c      	adds	r4, r3, #1
 8029084:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8029088:	07e4      	lsls	r4, r4, #31
 802908a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802908e:	bf54      	ite	pl
 8029090:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029094:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029098:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802909c:	fa5f f48c 	uxtb.w	r4, ip
 80290a0:	9412      	str	r4, [sp, #72]	; 0x48
 80290a2:	b300      	cbz	r0, 80290e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80290a4:	4453      	add	r3, sl
 80290a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80290aa:	07dc      	lsls	r4, r3, #31
 80290ac:	f103 0301 	add.w	r3, r3, #1
 80290b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80290b4:	bf54      	ite	pl
 80290b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80290ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80290be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80290c2:	fa5f f48c 	uxtb.w	r4, ip
 80290c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80290ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80290cc:	07dc      	lsls	r4, r3, #31
 80290ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80290d2:	bf54      	ite	pl
 80290d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80290d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80290dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80290e0:	fa5f f38c 	uxtb.w	r3, ip
 80290e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80290e6:	b289      	uxth	r1, r1
 80290e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80290ea:	b280      	uxth	r0, r0
 80290ec:	fb01 f300 	mul.w	r3, r1, r0
 80290f0:	0109      	lsls	r1, r1, #4
 80290f2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80290f6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80290fa:	1ac9      	subs	r1, r1, r3
 80290fc:	b280      	uxth	r0, r0
 80290fe:	b289      	uxth	r1, r1
 8029100:	ebac 0c00 	sub.w	ip, ip, r0
 8029104:	4361      	muls	r1, r4
 8029106:	fa1f fc8c 	uxth.w	ip, ip
 802910a:	fb02 120c 	mla	r2, r2, ip, r1
 802910e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029110:	fb00 2001 	mla	r0, r0, r1, r2
 8029114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029116:	fb03 0302 	mla	r3, r3, r2, r0
 802911a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802911e:	2b00      	cmp	r3, #0
 8029120:	d039      	beq.n	8029196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8029122:	4a2d      	ldr	r2, [pc, #180]	; (80291d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8029124:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8029128:	6810      	ldr	r0, [r2, #0]
 802912a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802912c:	fa5f fc80 	uxtb.w	ip, r0
 8029130:	4353      	muls	r3, r2
 8029132:	1c5a      	adds	r2, r3, #1
 8029134:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029138:	121b      	asrs	r3, r3, #8
 802913a:	b29a      	uxth	r2, r3
 802913c:	43db      	mvns	r3, r3
 802913e:	fb1c fc02 	smulbb	ip, ip, r2
 8029142:	b2db      	uxtb	r3, r3
 8029144:	fb01 c103 	mla	r1, r1, r3, ip
 8029148:	b289      	uxth	r1, r1
 802914a:	f101 0c01 	add.w	ip, r1, #1
 802914e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029152:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8029156:	fb1c fc03 	smulbb	ip, ip, r3
 802915a:	1209      	asrs	r1, r1, #8
 802915c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029160:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8029164:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8029168:	fb01 c102 	mla	r1, r1, r2, ip
 802916c:	b289      	uxth	r1, r1
 802916e:	f101 0c01 	add.w	ip, r1, #1
 8029172:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029176:	1209      	asrs	r1, r1, #8
 8029178:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802917c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8029180:	fb11 f303 	smulbb	r3, r1, r3
 8029184:	fb00 3002 	mla	r0, r0, r2, r3
 8029188:	b280      	uxth	r0, r0
 802918a:	1c42      	adds	r2, r0, #1
 802918c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029190:	1200      	asrs	r0, r0, #8
 8029192:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8029196:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029198:	f10e 0e03 	add.w	lr, lr, #3
 802919c:	f109 39ff 	add.w	r9, r9, #4294967295
 80291a0:	441d      	add	r5, r3
 80291a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80291a4:	441e      	add	r6, r3
 80291a6:	e604      	b.n	8028db2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80291a8:	2800      	cmp	r0, #0
 80291aa:	d09c      	beq.n	80290e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80291ac:	4453      	add	r3, sl
 80291ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80291b2:	07db      	lsls	r3, r3, #31
 80291b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80291b8:	bf54      	ite	pl
 80291ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80291be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80291c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80291c6:	fa5f f38c 	uxtb.w	r3, ip
 80291ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80291cc:	e78b      	b.n	80290e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80291ce:	b017      	add	sp, #92	; 0x5c
 80291d0:	ecbd 8b08 	vpop	{d8-d11}
 80291d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291d8:	2000bff8 	.word	0x2000bff8

080291dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80291dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291e0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80291e4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80291e8:	2800      	cmp	r0, #0
 80291ea:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80291ee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80291f2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80291f6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80291fa:	db6b      	blt.n	80292d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80291fc:	4580      	cmp	r8, r0
 80291fe:	dd69      	ble.n	80292d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029200:	f1bc 0f00 	cmp.w	ip, #0
 8029204:	db66      	blt.n	80292d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029206:	45e1      	cmp	r9, ip
 8029208:	dd64      	ble.n	80292d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802920a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802920e:	f01e 0f01 	tst.w	lr, #1
 8029212:	5d16      	ldrb	r6, [r2, r4]
 8029214:	bf0c      	ite	eq
 8029216:	f006 060f 	andeq.w	r6, r6, #15
 802921a:	1136      	asrne	r6, r6, #4
 802921c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029220:	b2f6      	uxtb	r6, r6
 8029222:	f110 0a01 	adds.w	sl, r0, #1
 8029226:	d457      	bmi.n	80292d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029228:	45d0      	cmp	r8, sl
 802922a:	dd55      	ble.n	80292d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802922c:	f1bc 0f00 	cmp.w	ip, #0
 8029230:	db52      	blt.n	80292d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029232:	45e1      	cmp	r9, ip
 8029234:	dd50      	ble.n	80292d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029236:	2f00      	cmp	r7, #0
 8029238:	f000 80a5 	beq.w	8029386 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 802923c:	f10e 0b01 	add.w	fp, lr, #1
 8029240:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8029244:	f01b 0f01 	tst.w	fp, #1
 8029248:	5d14      	ldrb	r4, [r2, r4]
 802924a:	bf0c      	ite	eq
 802924c:	f004 040f 	andeq.w	r4, r4, #15
 8029250:	1124      	asrne	r4, r4, #4
 8029252:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029256:	b2e4      	uxtb	r4, r4
 8029258:	2d00      	cmp	r5, #0
 802925a:	f000 808f 	beq.w	802937c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802925e:	2800      	cmp	r0, #0
 8029260:	f10c 0c01 	add.w	ip, ip, #1
 8029264:	db3c      	blt.n	80292e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029266:	4580      	cmp	r8, r0
 8029268:	dd3a      	ble.n	80292e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802926a:	f1bc 0f00 	cmp.w	ip, #0
 802926e:	db37      	blt.n	80292e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029270:	45e1      	cmp	r9, ip
 8029272:	dd35      	ble.n	80292e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029274:	eb03 0b0e 	add.w	fp, r3, lr
 8029278:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802927c:	f01b 0f01 	tst.w	fp, #1
 8029280:	5c10      	ldrb	r0, [r2, r0]
 8029282:	bf0c      	ite	eq
 8029284:	f000 000f 	andeq.w	r0, r0, #15
 8029288:	1100      	asrne	r0, r0, #4
 802928a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802928e:	b2c0      	uxtb	r0, r0
 8029290:	f1ba 0f00 	cmp.w	sl, #0
 8029294:	db26      	blt.n	80292e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8029296:	45d0      	cmp	r8, sl
 8029298:	dd24      	ble.n	80292e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802929a:	f1bc 0f00 	cmp.w	ip, #0
 802929e:	db21      	blt.n	80292e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80292a0:	45e1      	cmp	r9, ip
 80292a2:	dd1f      	ble.n	80292e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80292a4:	b307      	cbz	r7, 80292e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80292a6:	3301      	adds	r3, #1
 80292a8:	449e      	add	lr, r3
 80292aa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80292ae:	f01e 0f01 	tst.w	lr, #1
 80292b2:	5cd3      	ldrb	r3, [r2, r3]
 80292b4:	bf0c      	ite	eq
 80292b6:	f003 030f 	andeq.w	r3, r3, #15
 80292ba:	111b      	asrne	r3, r3, #4
 80292bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80292c0:	b2db      	uxtb	r3, r3
 80292c2:	2f0f      	cmp	r7, #15
 80292c4:	d911      	bls.n	80292ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80292c6:	4b32      	ldr	r3, [pc, #200]	; (8029390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80292c8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80292cc:	4a31      	ldr	r2, [pc, #196]	; (8029394 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80292ce:	4832      	ldr	r0, [pc, #200]	; (8029398 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80292d0:	f001 fff8 	bl	802b2c4 <__assert_func>
 80292d4:	2600      	movs	r6, #0
 80292d6:	e7a4      	b.n	8029222 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80292d8:	2400      	movs	r4, #0
 80292da:	e7bd      	b.n	8029258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80292dc:	463c      	mov	r4, r7
 80292de:	e7be      	b.n	802925e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80292e0:	2000      	movs	r0, #0
 80292e2:	e7d5      	b.n	8029290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80292e4:	2300      	movs	r3, #0
 80292e6:	e7ec      	b.n	80292c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80292e8:	463b      	mov	r3, r7
 80292ea:	2d0f      	cmp	r5, #15
 80292ec:	d8eb      	bhi.n	80292c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80292ee:	b2bf      	uxth	r7, r7
 80292f0:	b2ad      	uxth	r5, r5
 80292f2:	fb07 f205 	mul.w	r2, r7, r5
 80292f6:	013f      	lsls	r7, r7, #4
 80292f8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80292fc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8029300:	1abf      	subs	r7, r7, r2
 8029302:	b2ad      	uxth	r5, r5
 8029304:	b2bf      	uxth	r7, r7
 8029306:	ebac 0c05 	sub.w	ip, ip, r5
 802930a:	437c      	muls	r4, r7
 802930c:	fa1f fc8c 	uxth.w	ip, ip
 8029310:	fb06 440c 	mla	r4, r6, ip, r4
 8029314:	fb05 4400 	mla	r4, r5, r0, r4
 8029318:	fb02 4303 	mla	r3, r2, r3, r4
 802931c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029320:	b353      	cbz	r3, 8029378 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8029322:	4a1e      	ldr	r2, [pc, #120]	; (802939c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8029324:	7808      	ldrb	r0, [r1, #0]
 8029326:	6814      	ldr	r4, [r2, #0]
 8029328:	b29a      	uxth	r2, r3
 802932a:	43db      	mvns	r3, r3
 802932c:	b2e5      	uxtb	r5, r4
 802932e:	b2db      	uxtb	r3, r3
 8029330:	fb15 f502 	smulbb	r5, r5, r2
 8029334:	fb00 5003 	mla	r0, r0, r3, r5
 8029338:	b280      	uxth	r0, r0
 802933a:	1c45      	adds	r5, r0, #1
 802933c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029340:	784d      	ldrb	r5, [r1, #1]
 8029342:	fb15 f503 	smulbb	r5, r5, r3
 8029346:	1200      	asrs	r0, r0, #8
 8029348:	7008      	strb	r0, [r1, #0]
 802934a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802934e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8029352:	fb00 5002 	mla	r0, r0, r2, r5
 8029356:	b280      	uxth	r0, r0
 8029358:	1c45      	adds	r5, r0, #1
 802935a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802935e:	1200      	asrs	r0, r0, #8
 8029360:	7048      	strb	r0, [r1, #1]
 8029362:	7888      	ldrb	r0, [r1, #2]
 8029364:	fb10 f303 	smulbb	r3, r0, r3
 8029368:	fb04 3202 	mla	r2, r4, r2, r3
 802936c:	b292      	uxth	r2, r2
 802936e:	1c53      	adds	r3, r2, #1
 8029370:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029374:	1212      	asrs	r2, r2, #8
 8029376:	708a      	strb	r2, [r1, #2]
 8029378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802937c:	2f0f      	cmp	r7, #15
 802937e:	d8a2      	bhi.n	80292c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8029380:	462b      	mov	r3, r5
 8029382:	4628      	mov	r0, r5
 8029384:	e7b3      	b.n	80292ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8029386:	2d00      	cmp	r5, #0
 8029388:	d1a8      	bne.n	80292dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802938a:	462c      	mov	r4, r5
 802938c:	e7f8      	b.n	8029380 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802938e:	bf00      	nop
 8029390:	08030f3f 	.word	0x08030f3f
 8029394:	08031436 	.word	0x08031436
 8029398:	08031008 	.word	0x08031008
 802939c:	2000bff8 	.word	0x2000bff8

080293a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80293a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293a4:	ed2d 8b08 	vpush	{d8-d11}
 80293a8:	b095      	sub	sp, #84	; 0x54
 80293aa:	461c      	mov	r4, r3
 80293ac:	eeb0 aa40 	vmov.f32	s20, s0
 80293b0:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80293b4:	eef0 9a60 	vmov.f32	s19, s1
 80293b8:	920e      	str	r2, [sp, #56]	; 0x38
 80293ba:	eeb0 9a41 	vmov.f32	s18, s2
 80293be:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80293c0:	eeb0 8a62 	vmov.f32	s16, s5
 80293c4:	9307      	str	r3, [sp, #28]
 80293c6:	eef0 8a43 	vmov.f32	s17, s6
 80293ca:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80293ce:	eef0 ba44 	vmov.f32	s23, s8
 80293d2:	9013      	str	r0, [sp, #76]	; 0x4c
 80293d4:	eeb0 ba64 	vmov.f32	s22, s9
 80293d8:	9109      	str	r1, [sp, #36]	; 0x24
 80293da:	eef0 aa45 	vmov.f32	s21, s10
 80293de:	9308      	str	r3, [sp, #32]
 80293e0:	6850      	ldr	r0, [r2, #4]
 80293e2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80293e6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80293ea:	fb00 1803 	mla	r8, r0, r3, r1
 80293ee:	6813      	ldr	r3, [r2, #0]
 80293f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80293f4:	4498      	add	r8, r3
 80293f6:	9b07      	ldr	r3, [sp, #28]
 80293f8:	3301      	adds	r3, #1
 80293fa:	f023 0301 	bic.w	r3, r3, #1
 80293fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8029400:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029402:	681f      	ldr	r7, [r3, #0]
 8029404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029406:	2b00      	cmp	r3, #0
 8029408:	dc03      	bgt.n	8029412 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802940a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802940c:	2b00      	cmp	r3, #0
 802940e:	f340 8238 	ble.w	8029882 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8029412:	2c00      	cmp	r4, #0
 8029414:	f340 8109 	ble.w	802962a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8029418:	142a      	asrs	r2, r5, #16
 802941a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802941e:	d42b      	bmi.n	8029478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8029420:	1c51      	adds	r1, r2, #1
 8029422:	9807      	ldr	r0, [sp, #28]
 8029424:	4288      	cmp	r0, r1
 8029426:	dd2a      	ble.n	802947e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8029428:	2b00      	cmp	r3, #0
 802942a:	db28      	blt.n	802947e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802942c:	1c59      	adds	r1, r3, #1
 802942e:	9808      	ldr	r0, [sp, #32]
 8029430:	4288      	cmp	r0, r1
 8029432:	dd24      	ble.n	802947e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8029434:	1e63      	subs	r3, r4, #1
 8029436:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029438:	fb02 5203 	mla	r2, r2, r3, r5
 802943c:	1412      	asrs	r2, r2, #16
 802943e:	d429      	bmi.n	8029494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8029440:	3201      	adds	r2, #1
 8029442:	9907      	ldr	r1, [sp, #28]
 8029444:	4291      	cmp	r1, r2
 8029446:	dd25      	ble.n	8029494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8029448:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802944a:	fb02 6303 	mla	r3, r2, r3, r6
 802944e:	141b      	asrs	r3, r3, #16
 8029450:	d420      	bmi.n	8029494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8029452:	3301      	adds	r3, #1
 8029454:	9a08      	ldr	r2, [sp, #32]
 8029456:	429a      	cmp	r2, r3
 8029458:	dd1c      	ble.n	8029494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802945a:	f108 0e03 	add.w	lr, r8, #3
 802945e:	46a1      	mov	r9, r4
 8029460:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8029464:	f1b9 0f00 	cmp.w	r9, #0
 8029468:	f300 8155 	bgt.w	8029716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 802946c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8029470:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029474:	44a0      	add	r8, r4
 8029476:	e0da      	b.n	802962e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8029478:	1c50      	adds	r0, r2, #1
 802947a:	f040 80ce 	bne.w	802961a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802947e:	9907      	ldr	r1, [sp, #28]
 8029480:	4291      	cmp	r1, r2
 8029482:	f340 80ca 	ble.w	802961a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8029486:	1c59      	adds	r1, r3, #1
 8029488:	f2c0 80c7 	blt.w	802961a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802948c:	9a08      	ldr	r2, [sp, #32]
 802948e:	4293      	cmp	r3, r2
 8029490:	f280 80c3 	bge.w	802961a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8029494:	46a3      	mov	fp, r4
 8029496:	46c1      	mov	r9, r8
 8029498:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802949c:	f1bb 0f00 	cmp.w	fp, #0
 80294a0:	dde4      	ble.n	802946c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80294a2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80294a6:	1428      	asrs	r0, r5, #16
 80294a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80294ac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80294b0:	920a      	str	r2, [sp, #40]	; 0x28
 80294b2:	f100 8116 	bmi.w	80296e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80294b6:	f100 0c01 	add.w	ip, r0, #1
 80294ba:	9a07      	ldr	r2, [sp, #28]
 80294bc:	4562      	cmp	r2, ip
 80294be:	f340 8112 	ble.w	80296e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80294c2:	2b00      	cmp	r3, #0
 80294c4:	f2c0 810f 	blt.w	80296e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80294c8:	f103 0c01 	add.w	ip, r3, #1
 80294cc:	9a08      	ldr	r2, [sp, #32]
 80294ce:	4562      	cmp	r2, ip
 80294d0:	f340 8109 	ble.w	80296e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80294d4:	fb03 030a 	mla	r3, r3, sl, r0
 80294d8:	0858      	lsrs	r0, r3, #1
 80294da:	07da      	lsls	r2, r3, #31
 80294dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80294de:	5c38      	ldrb	r0, [r7, r0]
 80294e0:	bf54      	ite	pl
 80294e2:	f000 000f 	andpl.w	r0, r0, #15
 80294e6:	1100      	asrmi	r0, r0, #4
 80294e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80294ec:	b2c0      	uxtb	r0, r0
 80294ee:	2a00      	cmp	r2, #0
 80294f0:	f000 80dd 	beq.w	80296ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80294f4:	f103 0e01 	add.w	lr, r3, #1
 80294f8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80294fc:	f01e 0f01 	tst.w	lr, #1
 8029500:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029504:	bf0c      	ite	eq
 8029506:	f00c 0c0f 	andeq.w	ip, ip, #15
 802950a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802950e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029512:	fa5f fc8c 	uxtb.w	ip, ip
 8029516:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802951a:	b301      	cbz	r1, 802955e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802951c:	4453      	add	r3, sl
 802951e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029522:	07da      	lsls	r2, r3, #31
 8029524:	f103 0301 	add.w	r3, r3, #1
 8029528:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802952c:	bf54      	ite	pl
 802952e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029532:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029536:	07da      	lsls	r2, r3, #31
 8029538:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802953c:	fa5f fc8c 	uxtb.w	ip, ip
 8029540:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8029544:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029548:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802954c:	bf54      	ite	pl
 802954e:	f00c 030f 	andpl.w	r3, ip, #15
 8029552:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8029556:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802955a:	b2db      	uxtb	r3, r3
 802955c:	9310      	str	r3, [sp, #64]	; 0x40
 802955e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8029562:	b289      	uxth	r1, r1
 8029564:	fb02 f301 	mul.w	r3, r2, r1
 8029568:	0112      	lsls	r2, r2, #4
 802956a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802956e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8029572:	1ad2      	subs	r2, r2, r3
 8029574:	fa1f fe81 	uxth.w	lr, r1
 8029578:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802957a:	b292      	uxth	r2, r2
 802957c:	ebac 0c0e 	sub.w	ip, ip, lr
 8029580:	434a      	muls	r2, r1
 8029582:	fa1f fc8c 	uxth.w	ip, ip
 8029586:	fb00 200c 	mla	r0, r0, ip, r2
 802958a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802958c:	fb0e 0002 	mla	r0, lr, r2, r0
 8029590:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029592:	fb03 0002 	mla	r0, r3, r2, r0
 8029596:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802959a:	b3a8      	cbz	r0, 8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802959c:	4bbb      	ldr	r3, [pc, #748]	; (802988c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802959e:	28ff      	cmp	r0, #255	; 0xff
 80295a0:	681b      	ldr	r3, [r3, #0]
 80295a2:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80295a6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80295aa:	b2db      	uxtb	r3, r3
 80295ac:	f000 8092 	beq.w	80296d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80295b0:	b282      	uxth	r2, r0
 80295b2:	43c0      	mvns	r0, r0
 80295b4:	f899 e000 	ldrb.w	lr, [r9]
 80295b8:	fb13 f302 	smulbb	r3, r3, r2
 80295bc:	b2c0      	uxtb	r0, r0
 80295be:	fb11 f102 	smulbb	r1, r1, r2
 80295c2:	fb0e 3300 	mla	r3, lr, r0, r3
 80295c6:	fb1c f202 	smulbb	r2, ip, r2
 80295ca:	b29b      	uxth	r3, r3
 80295cc:	f103 0e01 	add.w	lr, r3, #1
 80295d0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80295d4:	121b      	asrs	r3, r3, #8
 80295d6:	f889 3000 	strb.w	r3, [r9]
 80295da:	f899 3001 	ldrb.w	r3, [r9, #1]
 80295de:	fb03 1100 	mla	r1, r3, r0, r1
 80295e2:	b289      	uxth	r1, r1
 80295e4:	1c4b      	adds	r3, r1, #1
 80295e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80295ea:	f899 3002 	ldrb.w	r3, [r9, #2]
 80295ee:	fb03 2000 	mla	r0, r3, r0, r2
 80295f2:	1209      	asrs	r1, r1, #8
 80295f4:	b280      	uxth	r0, r0
 80295f6:	f889 1001 	strb.w	r1, [r9, #1]
 80295fa:	f100 0c01 	add.w	ip, r0, #1
 80295fe:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8029602:	1200      	asrs	r0, r0, #8
 8029604:	f889 0002 	strb.w	r0, [r9, #2]
 8029608:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802960a:	f109 0903 	add.w	r9, r9, #3
 802960e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029612:	441d      	add	r5, r3
 8029614:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029616:	441e      	add	r6, r3
 8029618:	e740      	b.n	802949c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802961a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802961c:	3c01      	subs	r4, #1
 802961e:	f108 0803 	add.w	r8, r8, #3
 8029622:	441d      	add	r5, r3
 8029624:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029626:	441e      	add	r6, r3
 8029628:	e6f3      	b.n	8029412 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802962a:	f47f af03 	bne.w	8029434 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029630:	2b00      	cmp	r3, #0
 8029632:	f340 8126 	ble.w	8029882 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8029636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802963a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802963c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029640:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029644:	eef0 6a48 	vmov.f32	s13, s16
 8029648:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802964c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029650:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029654:	ee16 5a90 	vmov	r5, s13
 8029658:	eef0 6a68 	vmov.f32	s13, s17
 802965c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029660:	ee16 6a90 	vmov	r6, s13
 8029664:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029668:	ee69 7a27 	vmul.f32	s15, s18, s15
 802966c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029670:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029674:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029678:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802967c:	ee18 2a10 	vmov	r2, s16
 8029680:	eeb0 8a47 	vmov.f32	s16, s14
 8029684:	fb92 f3f3 	sdiv	r3, r2, r3
 8029688:	ee18 2a90 	vmov	r2, s17
 802968c:	9329      	str	r3, [sp, #164]	; 0xa4
 802968e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029690:	eef0 8a67 	vmov.f32	s17, s15
 8029694:	fb92 f3f3 	sdiv	r3, r2, r3
 8029698:	932a      	str	r3, [sp, #168]	; 0xa8
 802969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802969c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802969e:	3b01      	subs	r3, #1
 80296a0:	9309      	str	r3, [sp, #36]	; 0x24
 80296a2:	bf08      	it	eq
 80296a4:	4614      	moveq	r4, r2
 80296a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80296a8:	bf18      	it	ne
 80296aa:	461c      	movne	r4, r3
 80296ac:	e6aa      	b.n	8029404 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80296ae:	2900      	cmp	r1, #0
 80296b0:	f43f af55 	beq.w	802955e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80296b4:	4453      	add	r3, sl
 80296b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80296ba:	07db      	lsls	r3, r3, #31
 80296bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80296c0:	bf54      	ite	pl
 80296c2:	f00c 030f 	andpl.w	r3, ip, #15
 80296c6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80296ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80296ce:	b2db      	uxtb	r3, r3
 80296d0:	930c      	str	r3, [sp, #48]	; 0x30
 80296d2:	e744      	b.n	802955e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80296d4:	f889 3000 	strb.w	r3, [r9]
 80296d8:	f889 1001 	strb.w	r1, [r9, #1]
 80296dc:	f889 c002 	strb.w	ip, [r9, #2]
 80296e0:	e792      	b.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80296e2:	1c42      	adds	r2, r0, #1
 80296e4:	d190      	bne.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80296e6:	9a07      	ldr	r2, [sp, #28]
 80296e8:	4282      	cmp	r2, r0
 80296ea:	dd8d      	ble.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80296ec:	1c5a      	adds	r2, r3, #1
 80296ee:	db8b      	blt.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80296f0:	9a08      	ldr	r2, [sp, #32]
 80296f2:	429a      	cmp	r2, r3
 80296f4:	dd88      	ble.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80296f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80296f8:	9105      	str	r1, [sp, #20]
 80296fa:	4649      	mov	r1, r9
 80296fc:	9002      	str	r0, [sp, #8]
 80296fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029700:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8029704:	9b08      	ldr	r3, [sp, #32]
 8029706:	463a      	mov	r2, r7
 8029708:	9301      	str	r3, [sp, #4]
 802970a:	9b07      	ldr	r3, [sp, #28]
 802970c:	9300      	str	r3, [sp, #0]
 802970e:	4653      	mov	r3, sl
 8029710:	f7ff fd64 	bl	80291dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8029714:	e778      	b.n	8029608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8029716:	142a      	asrs	r2, r5, #16
 8029718:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802971c:	1433      	asrs	r3, r6, #16
 802971e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029722:	fb0a 2303 	mla	r3, sl, r3, r2
 8029726:	085a      	lsrs	r2, r3, #1
 8029728:	07d9      	lsls	r1, r3, #31
 802972a:	5cba      	ldrb	r2, [r7, r2]
 802972c:	bf54      	ite	pl
 802972e:	f002 020f 	andpl.w	r2, r2, #15
 8029732:	1112      	asrmi	r2, r2, #4
 8029734:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029738:	b2d2      	uxtb	r2, r2
 802973a:	2800      	cmp	r0, #0
 802973c:	f000 808a 	beq.w	8029854 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8029740:	f103 0b01 	add.w	fp, r3, #1
 8029744:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8029748:	f01b 0f01 	tst.w	fp, #1
 802974c:	5c79      	ldrb	r1, [r7, r1]
 802974e:	bf0c      	ite	eq
 8029750:	f001 010f 	andeq.w	r1, r1, #15
 8029754:	1109      	asrne	r1, r1, #4
 8029756:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802975a:	b2c9      	uxtb	r1, r1
 802975c:	9111      	str	r1, [sp, #68]	; 0x44
 802975e:	f1bc 0f00 	cmp.w	ip, #0
 8029762:	d019      	beq.n	8029798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029764:	4453      	add	r3, sl
 8029766:	0859      	lsrs	r1, r3, #1
 8029768:	f013 0f01 	tst.w	r3, #1
 802976c:	f103 0301 	add.w	r3, r3, #1
 8029770:	5c79      	ldrb	r1, [r7, r1]
 8029772:	bf0c      	ite	eq
 8029774:	f001 010f 	andeq.w	r1, r1, #15
 8029778:	1109      	asrne	r1, r1, #4
 802977a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802977e:	b2c9      	uxtb	r1, r1
 8029780:	910d      	str	r1, [sp, #52]	; 0x34
 8029782:	0859      	lsrs	r1, r3, #1
 8029784:	07db      	lsls	r3, r3, #31
 8029786:	5c79      	ldrb	r1, [r7, r1]
 8029788:	bf54      	ite	pl
 802978a:	f001 010f 	andpl.w	r1, r1, #15
 802978e:	1109      	asrmi	r1, r1, #4
 8029790:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029794:	b2c9      	uxtb	r1, r1
 8029796:	9112      	str	r1, [sp, #72]	; 0x48
 8029798:	b280      	uxth	r0, r0
 802979a:	fa1f fc8c 	uxth.w	ip, ip
 802979e:	fb00 f30c 	mul.w	r3, r0, ip
 80297a2:	0100      	lsls	r0, r0, #4
 80297a4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80297a8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80297ac:	1ac0      	subs	r0, r0, r3
 80297ae:	fa1f fc8c 	uxth.w	ip, ip
 80297b2:	b280      	uxth	r0, r0
 80297b4:	eba1 010c 	sub.w	r1, r1, ip
 80297b8:	fa1f fb81 	uxth.w	fp, r1
 80297bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80297be:	4348      	muls	r0, r1
 80297c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80297c2:	fb02 020b 	mla	r2, r2, fp, r0
 80297c6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80297ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80297cc:	fb03 c302 	mla	r3, r3, r2, ip
 80297d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80297d4:	b3ab      	cbz	r3, 8029842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80297d6:	4a2d      	ldr	r2, [pc, #180]	; (802988c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80297d8:	2bff      	cmp	r3, #255	; 0xff
 80297da:	6811      	ldr	r1, [r2, #0]
 80297dc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80297e0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80297e4:	b2c9      	uxtb	r1, r1
 80297e6:	d045      	beq.n	8029874 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80297e8:	b298      	uxth	r0, r3
 80297ea:	43db      	mvns	r3, r3
 80297ec:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 80297f0:	fb11 f100 	smulbb	r1, r1, r0
 80297f4:	b2db      	uxtb	r3, r3
 80297f6:	fb1c fc00 	smulbb	ip, ip, r0
 80297fa:	fb02 1103 	mla	r1, r2, r3, r1
 80297fe:	fb1b f000 	smulbb	r0, fp, r0
 8029802:	b289      	uxth	r1, r1
 8029804:	1c4a      	adds	r2, r1, #1
 8029806:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802980a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802980e:	fb02 cc03 	mla	ip, r2, r3, ip
 8029812:	1209      	asrs	r1, r1, #8
 8029814:	fa1f fc8c 	uxth.w	ip, ip
 8029818:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802981c:	f10c 0201 	add.w	r2, ip, #1
 8029820:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8029824:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8029828:	fb02 0303 	mla	r3, r2, r3, r0
 802982c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8029830:	b29b      	uxth	r3, r3
 8029832:	f80e cc02 	strb.w	ip, [lr, #-2]
 8029836:	1c5a      	adds	r2, r3, #1
 8029838:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802983c:	121b      	asrs	r3, r3, #8
 802983e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8029842:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029844:	f10e 0e03 	add.w	lr, lr, #3
 8029848:	f109 39ff 	add.w	r9, r9, #4294967295
 802984c:	441d      	add	r5, r3
 802984e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029850:	441e      	add	r6, r3
 8029852:	e607      	b.n	8029464 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8029854:	f1bc 0f00 	cmp.w	ip, #0
 8029858:	d09e      	beq.n	8029798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802985a:	4453      	add	r3, sl
 802985c:	0859      	lsrs	r1, r3, #1
 802985e:	07db      	lsls	r3, r3, #31
 8029860:	5c79      	ldrb	r1, [r7, r1]
 8029862:	bf54      	ite	pl
 8029864:	f001 010f 	andpl.w	r1, r1, #15
 8029868:	1109      	asrmi	r1, r1, #4
 802986a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802986e:	b2c9      	uxtb	r1, r1
 8029870:	910d      	str	r1, [sp, #52]	; 0x34
 8029872:	e791      	b.n	8029798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8029874:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029878:	f80e cc02 	strb.w	ip, [lr, #-2]
 802987c:	f80e bc01 	strb.w	fp, [lr, #-1]
 8029880:	e7df      	b.n	8029842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8029882:	b015      	add	sp, #84	; 0x54
 8029884:	ecbd 8b08 	vpop	{d8-d11}
 8029888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802988c:	2000bff8 	.word	0x2000bff8

08029890 <CRC_Lock>:
 8029890:	4a1d      	ldr	r2, [pc, #116]	; (8029908 <CRC_Lock+0x78>)
 8029892:	b530      	push	{r4, r5, lr}
 8029894:	6813      	ldr	r3, [r2, #0]
 8029896:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802989a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802989e:	f023 0301 	bic.w	r3, r3, #1
 80298a2:	6013      	str	r3, [r2, #0]
 80298a4:	4b19      	ldr	r3, [pc, #100]	; (802990c <CRC_Lock+0x7c>)
 80298a6:	681a      	ldr	r2, [r3, #0]
 80298a8:	4022      	ands	r2, r4
 80298aa:	42aa      	cmp	r2, r5
 80298ac:	d005      	beq.n	80298ba <CRC_Lock+0x2a>
 80298ae:	681b      	ldr	r3, [r3, #0]
 80298b0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80298b4:	4023      	ands	r3, r4
 80298b6:	4293      	cmp	r3, r2
 80298b8:	d11d      	bne.n	80298f6 <CRC_Lock+0x66>
 80298ba:	4b15      	ldr	r3, [pc, #84]	; (8029910 <CRC_Lock+0x80>)
 80298bc:	681b      	ldr	r3, [r3, #0]
 80298be:	b9d3      	cbnz	r3, 80298f6 <CRC_Lock+0x66>
 80298c0:	4a14      	ldr	r2, [pc, #80]	; (8029914 <CRC_Lock+0x84>)
 80298c2:	6813      	ldr	r3, [r2, #0]
 80298c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80298c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80298cc:	d006      	beq.n	80298dc <CRC_Lock+0x4c>
 80298ce:	6813      	ldr	r3, [r2, #0]
 80298d0:	f240 4283 	movw	r2, #1155	; 0x483
 80298d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80298d8:	4293      	cmp	r3, r2
 80298da:	d10c      	bne.n	80298f6 <CRC_Lock+0x66>
 80298dc:	4b0e      	ldr	r3, [pc, #56]	; (8029918 <CRC_Lock+0x88>)
 80298de:	2201      	movs	r2, #1
 80298e0:	601a      	str	r2, [r3, #0]
 80298e2:	681a      	ldr	r2, [r3, #0]
 80298e4:	2a00      	cmp	r2, #0
 80298e6:	d1fc      	bne.n	80298e2 <CRC_Lock+0x52>
 80298e8:	4b0c      	ldr	r3, [pc, #48]	; (802991c <CRC_Lock+0x8c>)
 80298ea:	6018      	str	r0, [r3, #0]
 80298ec:	6818      	ldr	r0, [r3, #0]
 80298ee:	1a43      	subs	r3, r0, r1
 80298f0:	4258      	negs	r0, r3
 80298f2:	4158      	adcs	r0, r3
 80298f4:	bd30      	pop	{r4, r5, pc}
 80298f6:	4b0a      	ldr	r3, [pc, #40]	; (8029920 <CRC_Lock+0x90>)
 80298f8:	2201      	movs	r2, #1
 80298fa:	601a      	str	r2, [r3, #0]
 80298fc:	681a      	ldr	r2, [r3, #0]
 80298fe:	2a00      	cmp	r2, #0
 8029900:	d1fc      	bne.n	80298fc <CRC_Lock+0x6c>
 8029902:	4b08      	ldr	r3, [pc, #32]	; (8029924 <CRC_Lock+0x94>)
 8029904:	e7f1      	b.n	80298ea <CRC_Lock+0x5a>
 8029906:	bf00      	nop
 8029908:	e0002000 	.word	0xe0002000
 802990c:	e000ed00 	.word	0xe000ed00
 8029910:	e0042000 	.word	0xe0042000
 8029914:	5c001000 	.word	0x5c001000
 8029918:	58024c08 	.word	0x58024c08
 802991c:	58024c00 	.word	0x58024c00
 8029920:	40023008 	.word	0x40023008
 8029924:	40023000 	.word	0x40023000

08029928 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029928:	6101      	str	r1, [r0, #16]
 802992a:	4770      	bx	lr

0802992c <_ZN8touchgfx8Gestures4tickEv>:
 802992c:	7b83      	ldrb	r3, [r0, #14]
 802992e:	b14b      	cbz	r3, 8029944 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029930:	8903      	ldrh	r3, [r0, #8]
 8029932:	3301      	adds	r3, #1
 8029934:	b29b      	uxth	r3, r3
 8029936:	2b07      	cmp	r3, #7
 8029938:	8103      	strh	r3, [r0, #8]
 802993a:	bf81      	itttt	hi
 802993c:	2300      	movhi	r3, #0
 802993e:	8143      	strhhi	r3, [r0, #10]
 8029940:	8183      	strhhi	r3, [r0, #12]
 8029942:	7383      	strbhi	r3, [r0, #14]
 8029944:	4770      	bx	lr
	...

08029948 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802994c:	4604      	mov	r4, r0
 802994e:	4698      	mov	r8, r3
 8029950:	8880      	ldrh	r0, [r0, #4]
 8029952:	4617      	mov	r7, r2
 8029954:	4b1d      	ldr	r3, [pc, #116]	; (80299cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029956:	460e      	mov	r6, r1
 8029958:	f8ad 0006 	strh.w	r0, [sp, #6]
 802995c:	eba8 0000 	sub.w	r0, r8, r0
 8029960:	9300      	str	r3, [sp, #0]
 8029962:	2300      	movs	r3, #0
 8029964:	b280      	uxth	r0, r0
 8029966:	8aa2      	ldrh	r2, [r4, #20]
 8029968:	f88d 3004 	strb.w	r3, [sp, #4]
 802996c:	b203      	sxth	r3, r0
 802996e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029972:	88e1      	ldrh	r1, [r4, #6]
 8029974:	2b00      	cmp	r3, #0
 8029976:	f8ad 800a 	strh.w	r8, [sp, #10]
 802997a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802997e:	bfb8      	it	lt
 8029980:	4240      	neglt	r0, r0
 8029982:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029986:	bfb8      	it	lt
 8029988:	b203      	sxthlt	r3, r0
 802998a:	4293      	cmp	r3, r2
 802998c:	dc08      	bgt.n	80299a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802998e:	1a69      	subs	r1, r5, r1
 8029990:	b289      	uxth	r1, r1
 8029992:	b20b      	sxth	r3, r1
 8029994:	2b00      	cmp	r3, #0
 8029996:	bfbc      	itt	lt
 8029998:	4249      	neglt	r1, r1
 802999a:	b20b      	sxthlt	r3, r1
 802999c:	429a      	cmp	r2, r3
 802999e:	da13      	bge.n	80299c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80299a0:	6920      	ldr	r0, [r4, #16]
 80299a2:	4669      	mov	r1, sp
 80299a4:	eba8 0606 	sub.w	r6, r8, r6
 80299a8:	1bef      	subs	r7, r5, r7
 80299aa:	6803      	ldr	r3, [r0, #0]
 80299ac:	685b      	ldr	r3, [r3, #4]
 80299ae:	4798      	blx	r3
 80299b0:	2300      	movs	r3, #0
 80299b2:	2001      	movs	r0, #1
 80299b4:	8166      	strh	r6, [r4, #10]
 80299b6:	8123      	strh	r3, [r4, #8]
 80299b8:	81a7      	strh	r7, [r4, #12]
 80299ba:	f8a4 8004 	strh.w	r8, [r4, #4]
 80299be:	80e5      	strh	r5, [r4, #6]
 80299c0:	73a0      	strb	r0, [r4, #14]
 80299c2:	b004      	add	sp, #16
 80299c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80299c8:	2000      	movs	r0, #0
 80299ca:	e7fa      	b.n	80299c2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80299cc:	080300dc 	.word	0x080300dc

080299d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80299d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80299d2:	461e      	mov	r6, r3
 80299d4:	1e4b      	subs	r3, r1, #1
 80299d6:	b085      	sub	sp, #20
 80299d8:	4604      	mov	r4, r0
 80299da:	2b01      	cmp	r3, #1
 80299dc:	460d      	mov	r5, r1
 80299de:	4617      	mov	r7, r2
 80299e0:	d84b      	bhi.n	8029a7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80299e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80299e6:	1cd3      	adds	r3, r2, #3
 80299e8:	b29b      	uxth	r3, r3
 80299ea:	2b06      	cmp	r3, #6
 80299ec:	d916      	bls.n	8029a1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80299ee:	f8df c098 	ldr.w	ip, [pc, #152]	; 8029a88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80299f2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80299f6:	f8cd c004 	str.w	ip, [sp, #4]
 80299fa:	f04f 0c00 	mov.w	ip, #0
 80299fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029a02:	6900      	ldr	r0, [r0, #16]
 8029a04:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029a08:	a901      	add	r1, sp, #4
 8029a0a:	f88d c008 	strb.w	ip, [sp, #8]
 8029a0e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029a12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029a16:	6803      	ldr	r3, [r0, #0]
 8029a18:	689b      	ldr	r3, [r3, #8]
 8029a1a:	4798      	blx	r3
 8029a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029a20:	1cd3      	adds	r3, r2, #3
 8029a22:	b29b      	uxth	r3, r3
 8029a24:	2b06      	cmp	r3, #6
 8029a26:	d916      	bls.n	8029a56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029a28:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8029a88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8029a2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029a30:	f8cd c004 	str.w	ip, [sp, #4]
 8029a34:	f04f 0c01 	mov.w	ip, #1
 8029a38:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029a3c:	6920      	ldr	r0, [r4, #16]
 8029a3e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029a42:	a901      	add	r1, sp, #4
 8029a44:	f88d c008 	strb.w	ip, [sp, #8]
 8029a48:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029a4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029a50:	6803      	ldr	r3, [r0, #0]
 8029a52:	689b      	ldr	r3, [r3, #8]
 8029a54:	4798      	blx	r3
 8029a56:	4b0b      	ldr	r3, [pc, #44]	; (8029a84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8029a58:	a901      	add	r1, sp, #4
 8029a5a:	6920      	ldr	r0, [r4, #16]
 8029a5c:	9301      	str	r3, [sp, #4]
 8029a5e:	2300      	movs	r3, #0
 8029a60:	f88d 5008 	strb.w	r5, [sp, #8]
 8029a64:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029a68:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029a6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029a70:	6803      	ldr	r3, [r0, #0]
 8029a72:	681b      	ldr	r3, [r3, #0]
 8029a74:	4798      	blx	r3
 8029a76:	b005      	add	sp, #20
 8029a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a7a:	2900      	cmp	r1, #0
 8029a7c:	d1eb      	bne.n	8029a56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029a7e:	80a2      	strh	r2, [r4, #4]
 8029a80:	80c6      	strh	r6, [r0, #6]
 8029a82:	e7e8      	b.n	8029a56 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029a84:	080300c8 	.word	0x080300c8
 8029a88:	080300f0 	.word	0x080300f0

08029a8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8029a8c:	10c9      	asrs	r1, r1, #3
 8029a8e:	2900      	cmp	r1, #0
 8029a90:	bfb8      	it	lt
 8029a92:	4249      	neglt	r1, r1
 8029a94:	2801      	cmp	r0, #1
 8029a96:	d108      	bne.n	8029aaa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8029a98:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029a9c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8029aa0:	4601      	mov	r1, r0
 8029aa2:	dd02      	ble.n	8029aaa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8029aa4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8029aa8:	4770      	bx	lr
 8029aaa:	29ff      	cmp	r1, #255	; 0xff
 8029aac:	bfa8      	it	ge
 8029aae:	21ff      	movge	r1, #255	; 0xff
 8029ab0:	4608      	mov	r0, r1
 8029ab2:	4770      	bx	lr

08029ab4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8029ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ab8:	688c      	ldr	r4, [r1, #8]
 8029aba:	b087      	sub	sp, #28
 8029abc:	4607      	mov	r7, r0
 8029abe:	2c00      	cmp	r4, #0
 8029ac0:	db2b      	blt.n	8029b1a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029ac2:	6803      	ldr	r3, [r0, #0]
 8029ac4:	68da      	ldr	r2, [r3, #12]
 8029ac6:	42a2      	cmp	r2, r4
 8029ac8:	dd27      	ble.n	8029b1a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029aca:	681a      	ldr	r2, [r3, #0]
 8029acc:	691e      	ldr	r6, [r3, #16]
 8029ace:	68cd      	ldr	r5, [r1, #12]
 8029ad0:	fb06 2604 	mla	r6, r6, r4, r2
 8029ad4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8029ad8:	698a      	ldr	r2, [r1, #24]
 8029ada:	f893 a004 	ldrb.w	sl, [r3, #4]
 8029ade:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8029ae2:	9205      	str	r2, [sp, #20]
 8029ae4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8029ae8:	9b05      	ldr	r3, [sp, #20]
 8029aea:	6839      	ldr	r1, [r7, #0]
 8029aec:	eb03 0c02 	add.w	ip, r3, r2
 8029af0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8029af4:	6889      	ldr	r1, [r1, #8]
 8029af6:	1898      	adds	r0, r3, r2
 8029af8:	4288      	cmp	r0, r1
 8029afa:	db02      	blt.n	8029b02 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8029afc:	1a8b      	subs	r3, r1, r2
 8029afe:	2b00      	cmp	r3, #0
 8029b00:	dd09      	ble.n	8029b16 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8029b02:	6878      	ldr	r0, [r7, #4]
 8029b04:	6801      	ldr	r1, [r0, #0]
 8029b06:	9400      	str	r4, [sp, #0]
 8029b08:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8029b0c:	4653      	mov	r3, sl
 8029b0e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8029b12:	4631      	mov	r1, r6
 8029b14:	47d8      	blx	fp
 8029b16:	3d01      	subs	r5, #1
 8029b18:	d1e4      	bne.n	8029ae4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8029b1a:	b007      	add	sp, #28
 8029b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029b20 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029b20:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8029b24:	b90b      	cbnz	r3, 8029b2a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8029b26:	f001 b974 	b.w	802ae12 <_ZN8touchgfx7Outline6lineToEii>
 8029b2a:	4770      	bx	lr

08029b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8029b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b30:	4604      	mov	r4, r0
 8029b32:	2600      	movs	r6, #0
 8029b34:	4b8e      	ldr	r3, [pc, #568]	; (8029d70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8029b36:	f100 0518 	add.w	r5, r0, #24
 8029b3a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8029b3e:	b086      	sub	sp, #24
 8029b40:	4690      	mov	r8, r2
 8029b42:	e9c0 3100 	strd	r3, r1, [r0]
 8029b46:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8029b4a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8029b4e:	4628      	mov	r0, r5
 8029b50:	f001 fb75 	bl	802b23e <_ZN8touchgfx15RenderingBufferC1Ev>
 8029b54:	4638      	mov	r0, r7
 8029b56:	f000 fb45 	bl	802a1e4 <_ZN8touchgfx7OutlineC1Ev>
 8029b5a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8029b5e:	f001 fb23 	bl	802b1a8 <_ZN8touchgfx8ScanlineC1Ev>
 8029b62:	2301      	movs	r3, #1
 8029b64:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8029b68:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8029b6c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029b70:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8029b74:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8029b78:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8029b7c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8029b80:	f7f4 fbac 	bl	801e2dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8029b84:	b928      	cbnz	r0, 8029b92 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8029b86:	4b7b      	ldr	r3, [pc, #492]	; (8029d74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8029b88:	2118      	movs	r1, #24
 8029b8a:	4a7b      	ldr	r2, [pc, #492]	; (8029d78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029b8c:	487b      	ldr	r0, [pc, #492]	; (8029d7c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029b8e:	f001 fb99 	bl	802b2c4 <__assert_func>
 8029b92:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029b96:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029b9a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029b9e:	4410      	add	r0, r2
 8029ba0:	9602      	str	r6, [sp, #8]
 8029ba2:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029ba6:	b280      	uxth	r0, r0
 8029ba8:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029bac:	fa0f fa80 	sxth.w	sl, r0
 8029bb0:	f1ba 0f00 	cmp.w	sl, #0
 8029bb4:	dd70      	ble.n	8029c98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029bb6:	4591      	cmp	r9, r2
 8029bb8:	dd6e      	ble.n	8029c98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029bba:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029bbe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8029bc2:	440b      	add	r3, r1
 8029bc4:	b29b      	uxth	r3, r3
 8029bc6:	b21e      	sxth	r6, r3
 8029bc8:	2e00      	cmp	r6, #0
 8029bca:	dd65      	ble.n	8029c98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029bcc:	458e      	cmp	lr, r1
 8029bce:	dd63      	ble.n	8029c98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029bd0:	45d1      	cmp	r9, sl
 8029bd2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029bd6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029bda:	bfb8      	it	lt
 8029bdc:	fa1f f089 	uxthlt.w	r0, r9
 8029be0:	45b6      	cmp	lr, r6
 8029be2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8029be6:	bfb8      	it	lt
 8029be8:	fa1f f38e 	uxthlt.w	r3, lr
 8029bec:	1a80      	subs	r0, r0, r2
 8029bee:	f8ad 100a 	strh.w	r1, [sp, #10]
 8029bf2:	1a5b      	subs	r3, r3, r1
 8029bf4:	f8ad 000c 	strh.w	r0, [sp, #12]
 8029bf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029bfc:	f10d 0808 	add.w	r8, sp, #8
 8029c00:	ae04      	add	r6, sp, #16
 8029c02:	e898 0003 	ldmia.w	r8, {r0, r1}
 8029c06:	e886 0003 	stmia.w	r6, {r0, r1}
 8029c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8029c0e:	4660      	mov	r0, ip
 8029c10:	4631      	mov	r1, r6
 8029c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c14:	4798      	blx	r3
 8029c16:	6861      	ldr	r1, [r4, #4]
 8029c18:	4640      	mov	r0, r8
 8029c1a:	3104      	adds	r1, #4
 8029c1c:	f7f5 f9cc 	bl	801efb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029c20:	4630      	mov	r0, r6
 8029c22:	f7f5 f9e1 	bl	801efe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029c26:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8029c2a:	f7f4 fae7 	bl	801e1fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8029c2e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8029c32:	4638      	mov	r0, r7
 8029c34:	f000 fab2 	bl	802a19c <_ZN8touchgfx7Outline5resetEv>
 8029c38:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8029c3c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8029c40:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8029c44:	015b      	lsls	r3, r3, #5
 8029c46:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8029c4a:	0152      	lsls	r2, r2, #5
 8029c4c:	60e3      	str	r3, [r4, #12]
 8029c4e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8029c52:	60a2      	str	r2, [r4, #8]
 8029c54:	015b      	lsls	r3, r3, #5
 8029c56:	6123      	str	r3, [r4, #16]
 8029c58:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8029c5c:	015b      	lsls	r3, r3, #5
 8029c5e:	6163      	str	r3, [r4, #20]
 8029c60:	4b47      	ldr	r3, [pc, #284]	; (8029d80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8029c62:	6818      	ldr	r0, [r3, #0]
 8029c64:	6803      	ldr	r3, [r0, #0]
 8029c66:	6a1b      	ldr	r3, [r3, #32]
 8029c68:	4798      	blx	r3
 8029c6a:	4606      	mov	r6, r0
 8029c6c:	f7e6 fed8 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 8029c70:	6803      	ldr	r3, [r0, #0]
 8029c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029c74:	4798      	blx	r3
 8029c76:	4607      	mov	r7, r0
 8029c78:	f7e6 fed2 	bl	8010a20 <_ZN8touchgfx3HAL3lcdEv>
 8029c7c:	6803      	ldr	r3, [r0, #0]
 8029c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c80:	4798      	blx	r3
 8029c82:	280c      	cmp	r0, #12
 8029c84:	d854      	bhi.n	8029d30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8029c86:	e8df f000 	tbb	[pc, r0]
 8029c8a:	554b      	.short	0x554b
 8029c8c:	2b6e0a66 	.word	0x2b6e0a66
 8029c90:	5f5f5f3b 	.word	0x5f5f5f3b
 8029c94:	5f5f      	.short	0x5f5f
 8029c96:	6e          	.byte	0x6e
 8029c97:	00          	.byte	0x00
 8029c98:	2300      	movs	r3, #0
 8029c9a:	9303      	str	r3, [sp, #12]
 8029c9c:	e7ae      	b.n	8029bfc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8029c9e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029ca2:	2108      	movs	r1, #8
 8029ca4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029ca8:	fb92 f1f1 	sdiv	r1, r2, r1
 8029cac:	fb07 1303 	mla	r3, r7, r3, r1
 8029cb0:	441e      	add	r6, r3
 8029cb2:	4253      	negs	r3, r2
 8029cb4:	f002 0207 	and.w	r2, r2, #7
 8029cb8:	f003 0307 	and.w	r3, r3, #7
 8029cbc:	bf58      	it	pl
 8029cbe:	425a      	negpl	r2, r3
 8029cc0:	b2d2      	uxtb	r2, r2
 8029cc2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8029cc6:	4628      	mov	r0, r5
 8029cc8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029ccc:	66e1      	str	r1, [r4, #108]	; 0x6c
 8029cce:	e9cd 1700 	strd	r1, r7, [sp]
 8029cd2:	4631      	mov	r1, r6
 8029cd4:	f001 fabb 	bl	802b24e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8029cd8:	4620      	mov	r0, r4
 8029cda:	b006      	add	sp, #24
 8029cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ce0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029ce4:	2104      	movs	r1, #4
 8029ce6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029cea:	fb92 f1f1 	sdiv	r1, r2, r1
 8029cee:	fb07 1303 	mla	r3, r7, r3, r1
 8029cf2:	441e      	add	r6, r3
 8029cf4:	4253      	negs	r3, r2
 8029cf6:	f002 0203 	and.w	r2, r2, #3
 8029cfa:	f003 0303 	and.w	r3, r3, #3
 8029cfe:	e7dd      	b.n	8029cbc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8029d00:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029d04:	2102      	movs	r1, #2
 8029d06:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d0a:	2a00      	cmp	r2, #0
 8029d0c:	fb92 f1f1 	sdiv	r1, r2, r1
 8029d10:	f002 0201 	and.w	r2, r2, #1
 8029d14:	fb07 1303 	mla	r3, r7, r3, r1
 8029d18:	bfb8      	it	lt
 8029d1a:	4252      	neglt	r2, r2
 8029d1c:	441e      	add	r6, r3
 8029d1e:	e7cf      	b.n	8029cc0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8029d20:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d24:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029d28:	437b      	muls	r3, r7
 8029d2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029d2e:	441e      	add	r6, r3
 8029d30:	2200      	movs	r2, #0
 8029d32:	e7c6      	b.n	8029cc2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8029d34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d38:	2103      	movs	r1, #3
 8029d3a:	fb07 f203 	mul.w	r2, r7, r3
 8029d3e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8029d42:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029d46:	e7f2      	b.n	8029d2e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029d48:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d4c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029d50:	fb07 2303 	mla	r3, r7, r3, r2
 8029d54:	e7eb      	b.n	8029d2e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029d56:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029d5a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029d5e:	437b      	muls	r3, r7
 8029d60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029d64:	e7e3      	b.n	8029d2e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029d66:	4b07      	ldr	r3, [pc, #28]	; (8029d84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029d68:	2156      	movs	r1, #86	; 0x56
 8029d6a:	4a03      	ldr	r2, [pc, #12]	; (8029d78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029d6c:	e70e      	b.n	8029b8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8029d6e:	bf00      	nop
 8029d70:	0803175c 	.word	0x0803175c
 8029d74:	080316a6 	.word	0x080316a6
 8029d78:	08031764 	.word	0x08031764
 8029d7c:	08031702 	.word	0x08031702
 8029d80:	2000bfd0 	.word	0x2000bfd0
 8029d84:	08031736 	.word	0x08031736

08029d88 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8029d88:	6812      	ldr	r2, [r2, #0]
 8029d8a:	2a00      	cmp	r2, #0
 8029d8c:	db0b      	blt.n	8029da6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8029d8e:	9800      	ldr	r0, [sp, #0]
 8029d90:	6800      	ldr	r0, [r0, #0]
 8029d92:	4290      	cmp	r0, r2
 8029d94:	bfd4      	ite	le
 8029d96:	2002      	movle	r0, #2
 8029d98:	2000      	movgt	r0, #0
 8029d9a:	680a      	ldr	r2, [r1, #0]
 8029d9c:	2a00      	cmp	r2, #0
 8029d9e:	da04      	bge.n	8029daa <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8029da0:	f040 0004 	orr.w	r0, r0, #4
 8029da4:	4770      	bx	lr
 8029da6:	2001      	movs	r0, #1
 8029da8:	e7f7      	b.n	8029d9a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	4293      	cmp	r3, r2
 8029dae:	bfd8      	it	le
 8029db0:	f040 0008 	orrle.w	r0, r0, #8
 8029db4:	4770      	bx	lr
	...

08029db8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029db8:	4b07      	ldr	r3, [pc, #28]	; (8029dd8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029dba:	b510      	push	{r4, lr}
 8029dbc:	781b      	ldrb	r3, [r3, #0]
 8029dbe:	2b01      	cmp	r3, #1
 8029dc0:	d108      	bne.n	8029dd4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8029dc2:	6843      	ldr	r3, [r0, #4]
 8029dc4:	6814      	ldr	r4, [r2, #0]
 8029dc6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029dca:	680b      	ldr	r3, [r1, #0]
 8029dcc:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029dd0:	6013      	str	r3, [r2, #0]
 8029dd2:	600c      	str	r4, [r1, #0]
 8029dd4:	bd10      	pop	{r4, pc}
 8029dd6:	bf00      	nop
 8029dd8:	2000bfc6 	.word	0x2000bfc6

08029ddc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029dde:	b085      	sub	sp, #20
 8029de0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8029de4:	4604      	mov	r4, r0
 8029de6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029dea:	b33b      	cbz	r3, 8029e3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8029dec:	aa02      	add	r2, sp, #8
 8029dee:	a903      	add	r1, sp, #12
 8029df0:	f7ff ffe2 	bl	8029db8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029df4:	68a3      	ldr	r3, [r4, #8]
 8029df6:	9e03      	ldr	r6, [sp, #12]
 8029df8:	aa02      	add	r2, sp, #8
 8029dfa:	9f02      	ldr	r7, [sp, #8]
 8029dfc:	a903      	add	r1, sp, #12
 8029dfe:	1af6      	subs	r6, r6, r3
 8029e00:	68e3      	ldr	r3, [r4, #12]
 8029e02:	4620      	mov	r0, r4
 8029e04:	1aff      	subs	r7, r7, r3
 8029e06:	f104 0314 	add.w	r3, r4, #20
 8029e0a:	9603      	str	r6, [sp, #12]
 8029e0c:	9300      	str	r3, [sp, #0]
 8029e0e:	f104 0310 	add.w	r3, r4, #16
 8029e12:	9702      	str	r7, [sp, #8]
 8029e14:	f7ff ffb8 	bl	8029d88 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8029e18:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8029e1c:	4605      	mov	r5, r0
 8029e1e:	b97b      	cbnz	r3, 8029e40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8029e20:	463a      	mov	r2, r7
 8029e22:	4631      	mov	r1, r6
 8029e24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8029e28:	f7ff fe7a 	bl	8029b20 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029e2c:	9b03      	ldr	r3, [sp, #12]
 8029e2e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8029e32:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8029e36:	9b02      	ldr	r3, [sp, #8]
 8029e38:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8029e3c:	b005      	add	sp, #20
 8029e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029e40:	b110      	cbz	r0, 8029e48 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8029e42:	ea13 0200 	ands.w	r2, r3, r0
 8029e46:	d11c      	bne.n	8029e82 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029e48:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8029e4c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8029e50:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8029e54:	b188      	cbz	r0, 8029e7a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8029e56:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8029e5a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8029e5e:	b913      	cbnz	r3, 8029e66 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8029e60:	4630      	mov	r0, r6
 8029e62:	f001 f806 	bl	802ae72 <_ZN8touchgfx7Outline6moveToEii>
 8029e66:	2300      	movs	r3, #0
 8029e68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029e6c:	2301      	movs	r3, #1
 8029e6e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8029e72:	4630      	mov	r0, r6
 8029e74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8029e78:	e7d6      	b.n	8029e28 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8029e7a:	4630      	mov	r0, r6
 8029e7c:	f7ff fe50 	bl	8029b20 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029e80:	e7f7      	b.n	8029e72 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8029e82:	4615      	mov	r5, r2
 8029e84:	e7d2      	b.n	8029e2c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08029e86 <_ZN8touchgfx6Canvas5closeEv>:
 8029e86:	b538      	push	{r3, r4, r5, lr}
 8029e88:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8029e8c:	4604      	mov	r4, r0
 8029e8e:	b993      	cbnz	r3, 8029eb6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029e90:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8029e94:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8029e98:	4213      	tst	r3, r2
 8029e9a:	d10c      	bne.n	8029eb6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029e9c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8029ea0:	b123      	cbz	r3, 8029eac <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029ea2:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8029ea6:	4628      	mov	r0, r5
 8029ea8:	f7ff fe3a 	bl	8029b20 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029eac:	4628      	mov	r0, r5
 8029eae:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8029eb2:	f7ff fe35 	bl	8029b20 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029eb6:	2300      	movs	r3, #0
 8029eb8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029ebc:	bd38      	pop	{r3, r4, r5, pc}

08029ebe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029ec0:	b085      	sub	sp, #20
 8029ec2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8029ec6:	4604      	mov	r4, r0
 8029ec8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029ecc:	b353      	cbz	r3, 8029f24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8029ece:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8029ed2:	b90b      	cbnz	r3, 8029ed8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8029ed4:	f7ff ffd7 	bl	8029e86 <_ZN8touchgfx6Canvas5closeEv>
 8029ed8:	aa02      	add	r2, sp, #8
 8029eda:	a903      	add	r1, sp, #12
 8029edc:	4620      	mov	r0, r4
 8029ede:	f7ff ff6b 	bl	8029db8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029ee2:	68a3      	ldr	r3, [r4, #8]
 8029ee4:	9d03      	ldr	r5, [sp, #12]
 8029ee6:	aa02      	add	r2, sp, #8
 8029ee8:	9e02      	ldr	r6, [sp, #8]
 8029eea:	a903      	add	r1, sp, #12
 8029eec:	1aed      	subs	r5, r5, r3
 8029eee:	68e3      	ldr	r3, [r4, #12]
 8029ef0:	4620      	mov	r0, r4
 8029ef2:	1af6      	subs	r6, r6, r3
 8029ef4:	f104 0314 	add.w	r3, r4, #20
 8029ef8:	9503      	str	r5, [sp, #12]
 8029efa:	9300      	str	r3, [sp, #0]
 8029efc:	f104 0310 	add.w	r3, r4, #16
 8029f00:	9602      	str	r6, [sp, #8]
 8029f02:	f7ff ff41 	bl	8029d88 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8029f06:	4607      	mov	r7, r0
 8029f08:	b170      	cbz	r0, 8029f28 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8029f0a:	2301      	movs	r3, #1
 8029f0c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029f10:	9a03      	ldr	r2, [sp, #12]
 8029f12:	9b02      	ldr	r3, [sp, #8]
 8029f14:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8029f18:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8029f1c:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8029f20:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8029f24:	b005      	add	sp, #20
 8029f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f28:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8029f2c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8029f30:	b92b      	cbnz	r3, 8029f3e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8029f32:	4632      	mov	r2, r6
 8029f34:	4629      	mov	r1, r5
 8029f36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8029f3a:	f000 ff9a 	bl	802ae72 <_ZN8touchgfx7Outline6moveToEii>
 8029f3e:	2300      	movs	r3, #0
 8029f40:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029f44:	2301      	movs	r3, #1
 8029f46:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8029f4a:	e7e1      	b.n	8029f10 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08029f4c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8029f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f50:	4604      	mov	r4, r0
 8029f52:	b087      	sub	sp, #28
 8029f54:	9105      	str	r1, [sp, #20]
 8029f56:	f001 f8d0 	bl	802b0fa <_ZN8touchgfx7Outline8getCellsEv>
 8029f5a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8029f5e:	4605      	mov	r5, r0
 8029f60:	f1b9 0f00 	cmp.w	r9, #0
 8029f64:	d103      	bne.n	8029f6e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8029f66:	2001      	movs	r0, #1
 8029f68:	b007      	add	sp, #28
 8029f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f6e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8029f72:	2e00      	cmp	r6, #0
 8029f74:	d139      	bne.n	8029fea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8029f76:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8029f7a:	f105 0708 	add.w	r7, r5, #8
 8029f7e:	4640      	mov	r0, r8
 8029f80:	f001 f8fd 	bl	802b17e <_ZN8touchgfx8Scanline5resetEv>
 8029f84:	f109 33ff 	add.w	r3, r9, #4294967295
 8029f88:	9303      	str	r3, [sp, #12]
 8029f8a:	f9b5 b000 	ldrsh.w	fp, [r5]
 8029f8e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8029f92:	46da      	mov	sl, fp
 8029f94:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8029f98:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8029f9c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8029fa0:	9b03      	ldr	r3, [sp, #12]
 8029fa2:	4416      	add	r6, r2
 8029fa4:	9504      	str	r5, [sp, #16]
 8029fa6:	463d      	mov	r5, r7
 8029fa8:	3b01      	subs	r3, #1
 8029faa:	9303      	str	r3, [sp, #12]
 8029fac:	3301      	adds	r3, #1
 8029fae:	d01e      	beq.n	8029fee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8029fb0:	3708      	adds	r7, #8
 8029fb2:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8029fb6:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8029fba:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8029fbe:	4290      	cmp	r0, r2
 8029fc0:	d11e      	bne.n	802a000 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8029fc2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8029fc6:	4411      	add	r1, r2
 8029fc8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8029fcc:	e7e8      	b.n	8029fa0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8029fce:	1c91      	adds	r1, r2, #2
 8029fd0:	f04f 0301 	mov.w	r3, #1
 8029fd4:	65e1      	str	r1, [r4, #92]	; 0x5c
 8029fd6:	8053      	strh	r3, [r2, #2]
 8029fd8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8029fda:	1c91      	adds	r1, r2, #2
 8029fdc:	65a1      	str	r1, [r4, #88]	; 0x58
 8029fde:	f8a2 b002 	strh.w	fp, [r2, #2]
 8029fe2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8029fe4:	3201      	adds	r2, #1
 8029fe6:	6562      	str	r2, [r4, #84]	; 0x54
 8029fe8:	e03a      	b.n	802a060 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8029fea:	2000      	movs	r0, #0
 8029fec:	e7bc      	b.n	8029f68 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8029fee:	b951      	cbnz	r1, 802a006 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8029ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8029ff2:	2b00      	cmp	r3, #0
 8029ff4:	d0b7      	beq.n	8029f66 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8029ff6:	4641      	mov	r1, r8
 8029ff8:	9805      	ldr	r0, [sp, #20]
 8029ffa:	f7ff fd5b 	bl	8029ab4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8029ffe:	e7b2      	b.n	8029f66 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a000:	2900      	cmp	r1, #0
 802a002:	d035      	beq.n	802a070 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802a004:	9504      	str	r5, [sp, #16]
 802a006:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802a00a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a00e:	f7ff fd3d 	bl	8029a8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802a012:	4605      	mov	r5, r0
 802a014:	b330      	cbz	r0, 802a064 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a016:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a018:	b182      	cbz	r2, 802a03c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a01a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802a01c:	454a      	cmp	r2, r9
 802a01e:	d00d      	beq.n	802a03c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a020:	4641      	mov	r1, r8
 802a022:	9805      	ldr	r0, [sp, #20]
 802a024:	f7ff fd46 	bl	8029ab4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a028:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a02c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802a02e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a032:	65e2      	str	r2, [r4, #92]	; 0x5c
 802a034:	2300      	movs	r3, #0
 802a036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a038:	6563      	str	r3, [r4, #84]	; 0x54
 802a03a:	65a2      	str	r2, [r4, #88]	; 0x58
 802a03c:	f1bb 0f00 	cmp.w	fp, #0
 802a040:	db10      	blt.n	802a064 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a042:	f7f4 f959 	bl	801e2f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a046:	4583      	cmp	fp, r0
 802a048:	d20c      	bcs.n	802a064 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a04a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802a04c:	f802 500b 	strb.w	r5, [r2, fp]
 802a050:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802a052:	3201      	adds	r2, #1
 802a054:	455a      	cmp	r2, fp
 802a056:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802a058:	d1b9      	bne.n	8029fce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802a05a:	8811      	ldrh	r1, [r2, #0]
 802a05c:	3101      	adds	r1, #1
 802a05e:	8011      	strh	r1, [r2, #0]
 802a060:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802a064:	9b03      	ldr	r3, [sp, #12]
 802a066:	3301      	adds	r3, #1
 802a068:	d0c2      	beq.n	8029ff0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802a06a:	f10b 0a01 	add.w	sl, fp, #1
 802a06e:	9d04      	ldr	r5, [sp, #16]
 802a070:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a074:	4553      	cmp	r3, sl
 802a076:	dd88      	ble.n	8029f8a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a078:	01b1      	lsls	r1, r6, #6
 802a07a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a07e:	f7ff fd05 	bl	8029a8c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802a082:	4683      	mov	fp, r0
 802a084:	2800      	cmp	r0, #0
 802a086:	d080      	beq.n	8029f8a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a088:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a08a:	b183      	cbz	r3, 802a0ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a08c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802a08e:	454b      	cmp	r3, r9
 802a090:	d00d      	beq.n	802a0ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a092:	4641      	mov	r1, r8
 802a094:	9805      	ldr	r0, [sp, #20]
 802a096:	f7ff fd0d 	bl	8029ab4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a09a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a09e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a0a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802a0a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a0a8:	65a3      	str	r3, [r4, #88]	; 0x58
 802a0aa:	2300      	movs	r3, #0
 802a0ac:	6563      	str	r3, [r4, #84]	; 0x54
 802a0ae:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a0b2:	464a      	mov	r2, r9
 802a0b4:	f8cd b000 	str.w	fp, [sp]
 802a0b8:	4651      	mov	r1, sl
 802a0ba:	eba3 030a 	sub.w	r3, r3, sl
 802a0be:	4640      	mov	r0, r8
 802a0c0:	f001 f884 	bl	802b1cc <_ZN8touchgfx8Scanline7addSpanEiijj>
 802a0c4:	e761      	b.n	8029f8a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802a0c6 <_ZN8touchgfx6Canvas6renderEv>:
 802a0c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a0c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802a0cc:	4604      	mov	r4, r0
 802a0ce:	b913      	cbnz	r3, 802a0d6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 802a0d0:	2001      	movs	r0, #1
 802a0d2:	b003      	add	sp, #12
 802a0d4:	bd30      	pop	{r4, r5, pc}
 802a0d6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	d131      	bne.n	802a142 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 802a0de:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802a0e2:	2b00      	cmp	r3, #0
 802a0e4:	d0f4      	beq.n	802a0d0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802a0e6:	6840      	ldr	r0, [r0, #4]
 802a0e8:	6803      	ldr	r3, [r0, #0]
 802a0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802a0ec:	4798      	blx	r3
 802a0ee:	2800      	cmp	r0, #0
 802a0f0:	d0ee      	beq.n	802a0d0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802a0f2:	4620      	mov	r0, r4
 802a0f4:	f7ff fec7 	bl	8029e86 <_ZN8touchgfx6Canvas5closeEv>
 802a0f8:	6860      	ldr	r0, [r4, #4]
 802a0fa:	6803      	ldr	r3, [r0, #0]
 802a0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a0fe:	4798      	blx	r3
 802a100:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802a104:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 802a108:	f7f2 fda1 	bl	801cc4e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 802a10c:	6860      	ldr	r0, [r4, #4]
 802a10e:	6803      	ldr	r3, [r0, #0]
 802a110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a112:	4798      	blx	r3
 802a114:	4605      	mov	r5, r0
 802a116:	6860      	ldr	r0, [r4, #4]
 802a118:	6803      	ldr	r3, [r0, #0]
 802a11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802a11c:	4798      	blx	r3
 802a11e:	4601      	mov	r1, r0
 802a120:	4628      	mov	r0, r5
 802a122:	f7f2 fd97 	bl	801cc54 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802a126:	6860      	ldr	r0, [r4, #4]
 802a128:	6803      	ldr	r3, [r0, #0]
 802a12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a12c:	4798      	blx	r3
 802a12e:	f104 0318 	add.w	r3, r4, #24
 802a132:	4669      	mov	r1, sp
 802a134:	e9cd 3000 	strd	r3, r0, [sp]
 802a138:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802a13c:	f7ff ff06 	bl	8029f4c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802a140:	e7c7      	b.n	802a0d2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 802a142:	2000      	movs	r0, #0
 802a144:	e7c5      	b.n	802a0d2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

0802a148 <_ZN8touchgfx6CanvasD1Ev>:
 802a148:	b538      	push	{r3, r4, r5, lr}
 802a14a:	4605      	mov	r5, r0
 802a14c:	4b08      	ldr	r3, [pc, #32]	; (802a170 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802a14e:	4604      	mov	r4, r0
 802a150:	f845 3b2c 	str.w	r3, [r5], #44
 802a154:	4b07      	ldr	r3, [pc, #28]	; (802a174 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802a156:	6818      	ldr	r0, [r3, #0]
 802a158:	6803      	ldr	r3, [r0, #0]
 802a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a15c:	4798      	blx	r3
 802a15e:	4628      	mov	r0, r5
 802a160:	f000 f814 	bl	802a18c <_ZN8touchgfx7OutlineD1Ev>
 802a164:	f104 0018 	add.w	r0, r4, #24
 802a168:	f001 f870 	bl	802b24c <_ZN8touchgfx15RenderingBufferD1Ev>
 802a16c:	4620      	mov	r0, r4
 802a16e:	bd38      	pop	{r3, r4, r5, pc}
 802a170:	0803175c 	.word	0x0803175c
 802a174:	2000bfd0 	.word	0x2000bfd0

0802a178 <_ZN8touchgfx6CanvasD0Ev>:
 802a178:	b510      	push	{r4, lr}
 802a17a:	4604      	mov	r4, r0
 802a17c:	f7ff ffe4 	bl	802a148 <_ZN8touchgfx6CanvasD1Ev>
 802a180:	21b8      	movs	r1, #184	; 0xb8
 802a182:	4620      	mov	r0, r4
 802a184:	f001 f873 	bl	802b26e <_ZdlPvj>
 802a188:	4620      	mov	r0, r4
 802a18a:	bd10      	pop	{r4, pc}

0802a18c <_ZN8touchgfx7OutlineD1Ev>:
 802a18c:	4770      	bx	lr

0802a18e <_ZN8touchgfx7OutlineD0Ev>:
 802a18e:	b510      	push	{r4, lr}
 802a190:	4604      	mov	r4, r0
 802a192:	2148      	movs	r1, #72	; 0x48
 802a194:	f001 f86b 	bl	802b26e <_ZdlPvj>
 802a198:	4620      	mov	r0, r4
 802a19a:	bd10      	pop	{r4, pc}

0802a19c <_ZN8touchgfx7Outline5resetEv>:
 802a19c:	b510      	push	{r4, lr}
 802a19e:	4604      	mov	r4, r0
 802a1a0:	f7f4 f8c2 	bl	801e328 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802a1a4:	60e0      	str	r0, [r4, #12]
 802a1a6:	f7f4 f8c5 	bl	801e334 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802a1aa:	68e3      	ldr	r3, [r4, #12]
 802a1ac:	2200      	movs	r2, #0
 802a1ae:	08c0      	lsrs	r0, r0, #3
 802a1b0:	6123      	str	r3, [r4, #16]
 802a1b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a1b6:	6060      	str	r0, [r4, #4]
 802a1b8:	82a3      	strh	r3, [r4, #20]
 802a1ba:	82e3      	strh	r3, [r4, #22]
 802a1bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a1be:	60a2      	str	r2, [r4, #8]
 802a1c0:	f023 0301 	bic.w	r3, r3, #1
 802a1c4:	8322      	strh	r2, [r4, #24]
 802a1c6:	8362      	strh	r2, [r4, #26]
 802a1c8:	f043 0302 	orr.w	r3, r3, #2
 802a1cc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a1d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a1d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a1d6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802a1da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a1de:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802a1e2:	bd10      	pop	{r4, pc}

0802a1e4 <_ZN8touchgfx7OutlineC1Ev>:
 802a1e4:	4b0f      	ldr	r3, [pc, #60]	; (802a224 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802a1e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a1ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802a1ee:	b510      	push	{r4, lr}
 802a1f0:	6003      	str	r3, [r0, #0]
 802a1f2:	2300      	movs	r3, #0
 802a1f4:	4604      	mov	r4, r0
 802a1f6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802a1fa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a1fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a202:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802a206:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802a20a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802a20e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802a212:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802a216:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802a21a:	f7ff ffbf 	bl	802a19c <_ZN8touchgfx7Outline5resetEv>
 802a21e:	4620      	mov	r0, r4
 802a220:	bd10      	pop	{r4, pc}
 802a222:	bf00      	nop
 802a224:	080317bc 	.word	0x080317bc

0802a228 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a22c:	b093      	sub	sp, #76	; 0x4c
 802a22e:	4604      	mov	r4, r0
 802a230:	1156      	asrs	r6, r2, #5
 802a232:	f002 0e1f 	and.w	lr, r2, #31
 802a236:	981c      	ldr	r0, [sp, #112]	; 0x70
 802a238:	9305      	str	r3, [sp, #20]
 802a23a:	1143      	asrs	r3, r0, #5
 802a23c:	1145      	asrs	r5, r0, #5
 802a23e:	930c      	str	r3, [sp, #48]	; 0x30
 802a240:	f000 031f 	and.w	r3, r0, #31
 802a244:	9303      	str	r3, [sp, #12]
 802a246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a248:	42b3      	cmp	r3, r6
 802a24a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a24c:	bfc8      	it	gt
 802a24e:	6326      	strgt	r6, [r4, #48]	; 0x30
 802a250:	42b3      	cmp	r3, r6
 802a252:	bfdc      	itt	le
 802a254:	1c73      	addle	r3, r6, #1
 802a256:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a25a:	42ab      	cmp	r3, r5
 802a25c:	bfc8      	it	gt
 802a25e:	462b      	movgt	r3, r5
 802a260:	ea4f 1560 	mov.w	r5, r0, asr #5
 802a264:	bfc8      	it	gt
 802a266:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a26a:	42ab      	cmp	r3, r5
 802a26c:	bfd8      	it	le
 802a26e:	462b      	movle	r3, r5
 802a270:	ea4f 1561 	mov.w	r5, r1, asr #5
 802a274:	bfdc      	itt	le
 802a276:	3301      	addle	r3, #1
 802a278:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a27a:	9b05      	ldr	r3, [sp, #20]
 802a27c:	eba3 0a01 	sub.w	sl, r3, r1
 802a280:	1143      	asrs	r3, r0, #5
 802a282:	429e      	cmp	r6, r3
 802a284:	f040 8119 	bne.w	802a4ba <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802a288:	9b05      	ldr	r3, [sp, #20]
 802a28a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802a28e:	9b03      	ldr	r3, [sp, #12]
 802a290:	459e      	cmp	lr, r3
 802a292:	d12c      	bne.n	802a2ee <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 802a294:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a298:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 802a29c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802a2a0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802a2a4:	4291      	cmp	r1, r2
 802a2a6:	d037      	beq.n	802a318 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a2a8:	8b61      	ldrh	r1, [r4, #26]
 802a2aa:	8b22      	ldrh	r2, [r4, #24]
 802a2ac:	430a      	orrs	r2, r1
 802a2ae:	d00b      	beq.n	802a2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802a2b0:	2b00      	cmp	r3, #0
 802a2b2:	db09      	blt.n	802a2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802a2b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a2b6:	429a      	cmp	r2, r3
 802a2b8:	dd06      	ble.n	802a2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802a2ba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802a2be:	429a      	cmp	r2, r3
 802a2c0:	d308      	bcc.n	802a2d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802a2c2:	2301      	movs	r3, #1
 802a2c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a2c8:	f8a4 c014 	strh.w	ip, [r4, #20]
 802a2cc:	82e6      	strh	r6, [r4, #22]
 802a2ce:	2300      	movs	r3, #0
 802a2d0:	8323      	strh	r3, [r4, #24]
 802a2d2:	e0c6      	b.n	802a462 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802a2d4:	f104 0314 	add.w	r3, r4, #20
 802a2d8:	6922      	ldr	r2, [r4, #16]
 802a2da:	cb03      	ldmia	r3!, {r0, r1}
 802a2dc:	6010      	str	r0, [r2, #0]
 802a2de:	6051      	str	r1, [r2, #4]
 802a2e0:	6923      	ldr	r3, [r4, #16]
 802a2e2:	3308      	adds	r3, #8
 802a2e4:	6123      	str	r3, [r4, #16]
 802a2e6:	68a3      	ldr	r3, [r4, #8]
 802a2e8:	3301      	adds	r3, #1
 802a2ea:	60a3      	str	r3, [r4, #8]
 802a2ec:	e7ec      	b.n	802a2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802a2ee:	9b05      	ldr	r3, [sp, #20]
 802a2f0:	45ac      	cmp	ip, r5
 802a2f2:	f001 011f 	and.w	r1, r1, #31
 802a2f6:	8b20      	ldrh	r0, [r4, #24]
 802a2f8:	f003 031f 	and.w	r3, r3, #31
 802a2fc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 802a300:	9304      	str	r3, [sp, #16]
 802a302:	9b03      	ldr	r3, [sp, #12]
 802a304:	eba3 020e 	sub.w	r2, r3, lr
 802a308:	d109      	bne.n	802a31e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802a30a:	9b04      	ldr	r3, [sp, #16]
 802a30c:	4410      	add	r0, r2
 802a30e:	4419      	add	r1, r3
 802a310:	8320      	strh	r0, [r4, #24]
 802a312:	fb02 8201 	mla	r2, r2, r1, r8
 802a316:	8362      	strh	r2, [r4, #26]
 802a318:	b013      	add	sp, #76	; 0x4c
 802a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a31e:	f1ba 0f00 	cmp.w	sl, #0
 802a322:	f2c0 80a0 	blt.w	802a466 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802a326:	f1c1 0320 	rsb	r3, r1, #32
 802a32a:	f04f 0b20 	mov.w	fp, #32
 802a32e:	435a      	muls	r2, r3
 802a330:	2301      	movs	r3, #1
 802a332:	9302      	str	r3, [sp, #8]
 802a334:	4459      	add	r1, fp
 802a336:	fb92 f7fa 	sdiv	r7, r2, sl
 802a33a:	fb0a 2217 	mls	r2, sl, r7, r2
 802a33e:	2a00      	cmp	r2, #0
 802a340:	bfbc      	itt	lt
 802a342:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802a346:	4452      	addlt	r2, sl
 802a348:	fb07 8101 	mla	r1, r7, r1, r8
 802a34c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802a350:	4438      	add	r0, r7
 802a352:	b20b      	sxth	r3, r1
 802a354:	9902      	ldr	r1, [sp, #8]
 802a356:	b200      	sxth	r0, r0
 802a358:	9301      	str	r3, [sp, #4]
 802a35a:	8363      	strh	r3, [r4, #26]
 802a35c:	186b      	adds	r3, r5, r1
 802a35e:	0435      	lsls	r5, r6, #16
 802a360:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802a364:	8320      	strh	r0, [r4, #24]
 802a366:	eb03 0905 	add.w	r9, r3, r5
 802a36a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802a36e:	9300      	str	r3, [sp, #0]
 802a370:	45c1      	cmp	r9, r8
 802a372:	9505      	str	r5, [sp, #20]
 802a374:	d014      	beq.n	802a3a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802a376:	9b01      	ldr	r3, [sp, #4]
 802a378:	4303      	orrs	r3, r0
 802a37a:	d00b      	beq.n	802a394 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802a37c:	2900      	cmp	r1, #0
 802a37e:	db09      	blt.n	802a394 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802a380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a382:	428b      	cmp	r3, r1
 802a384:	dd06      	ble.n	802a394 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802a386:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a38a:	4299      	cmp	r1, r3
 802a38c:	d374      	bcc.n	802a478 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802a38e:	2301      	movs	r3, #1
 802a390:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a394:	9b00      	ldr	r3, [sp, #0]
 802a396:	82e6      	strh	r6, [r4, #22]
 802a398:	82a3      	strh	r3, [r4, #20]
 802a39a:	2300      	movs	r3, #0
 802a39c:	8323      	strh	r3, [r4, #24]
 802a39e:	8363      	strh	r3, [r4, #26]
 802a3a0:	9900      	ldr	r1, [sp, #0]
 802a3a2:	eb0e 0307 	add.w	r3, lr, r7
 802a3a6:	458c      	cmp	ip, r1
 802a3a8:	d04e      	beq.n	802a448 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802a3aa:	9903      	ldr	r1, [sp, #12]
 802a3ac:	eba2 020a 	sub.w	r2, r2, sl
 802a3b0:	1ac9      	subs	r1, r1, r3
 802a3b2:	9201      	str	r2, [sp, #4]
 802a3b4:	440f      	add	r7, r1
 802a3b6:	017f      	lsls	r7, r7, #5
 802a3b8:	fb97 fefa 	sdiv	lr, r7, sl
 802a3bc:	fb0a 771e 	mls	r7, sl, lr, r7
 802a3c0:	2f00      	cmp	r7, #0
 802a3c2:	bfbc      	itt	lt
 802a3c4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802a3c8:	4457      	addlt	r7, sl
 802a3ca:	f10e 0101 	add.w	r1, lr, #1
 802a3ce:	9106      	str	r1, [sp, #24]
 802a3d0:	9a01      	ldr	r2, [sp, #4]
 802a3d2:	8b20      	ldrh	r0, [r4, #24]
 802a3d4:	19d2      	adds	r2, r2, r7
 802a3d6:	8b61      	ldrh	r1, [r4, #26]
 802a3d8:	9d02      	ldr	r5, [sp, #8]
 802a3da:	9201      	str	r2, [sp, #4]
 802a3dc:	bf5b      	ittet	pl
 802a3de:	eba2 020a 	subpl.w	r2, r2, sl
 802a3e2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802a3e6:	46f0      	movmi	r8, lr
 802a3e8:	9201      	strpl	r2, [sp, #4]
 802a3ea:	9a00      	ldr	r2, [sp, #0]
 802a3ec:	4440      	add	r0, r8
 802a3ee:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802a3f2:	4443      	add	r3, r8
 802a3f4:	442a      	add	r2, r5
 802a3f6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a3fa:	9d05      	ldr	r5, [sp, #20]
 802a3fc:	b200      	sxth	r0, r0
 802a3fe:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a402:	b209      	sxth	r1, r1
 802a404:	4415      	add	r5, r2
 802a406:	8320      	strh	r0, [r4, #24]
 802a408:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a40c:	8361      	strh	r1, [r4, #26]
 802a40e:	9200      	str	r2, [sp, #0]
 802a410:	454d      	cmp	r5, r9
 802a412:	d016      	beq.n	802a442 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802a414:	4301      	orrs	r1, r0
 802a416:	d00d      	beq.n	802a434 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802a418:	f1b8 0f00 	cmp.w	r8, #0
 802a41c:	db0a      	blt.n	802a434 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802a41e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a420:	4541      	cmp	r1, r8
 802a422:	dd07      	ble.n	802a434 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802a424:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a428:	4288      	cmp	r0, r1
 802a42a:	d335      	bcc.n	802a498 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802a42c:	f04f 0101 	mov.w	r1, #1
 802a430:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a434:	9900      	ldr	r1, [sp, #0]
 802a436:	82e6      	strh	r6, [r4, #22]
 802a438:	82a1      	strh	r1, [r4, #20]
 802a43a:	f04f 0100 	mov.w	r1, #0
 802a43e:	8321      	strh	r1, [r4, #24]
 802a440:	8361      	strh	r1, [r4, #26]
 802a442:	9a00      	ldr	r2, [sp, #0]
 802a444:	4594      	cmp	ip, r2
 802a446:	d1c3      	bne.n	802a3d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 802a448:	9a03      	ldr	r2, [sp, #12]
 802a44a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802a44e:	1ad3      	subs	r3, r2, r3
 802a450:	8b22      	ldrh	r2, [r4, #24]
 802a452:	441a      	add	r2, r3
 802a454:	8322      	strh	r2, [r4, #24]
 802a456:	9a04      	ldr	r2, [sp, #16]
 802a458:	3220      	adds	r2, #32
 802a45a:	eba2 020b 	sub.w	r2, r2, fp
 802a45e:	fb03 c302 	mla	r3, r3, r2, ip
 802a462:	8363      	strh	r3, [r4, #26]
 802a464:	e758      	b.n	802a318 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a466:	f04f 33ff 	mov.w	r3, #4294967295
 802a46a:	434a      	muls	r2, r1
 802a46c:	f1ca 0a00 	rsb	sl, sl, #0
 802a470:	f04f 0b00 	mov.w	fp, #0
 802a474:	9302      	str	r3, [sp, #8]
 802a476:	e75d      	b.n	802a334 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802a478:	f104 0314 	add.w	r3, r4, #20
 802a47c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a480:	cb03      	ldmia	r3!, {r0, r1}
 802a482:	f8c8 0000 	str.w	r0, [r8]
 802a486:	f8c8 1004 	str.w	r1, [r8, #4]
 802a48a:	6923      	ldr	r3, [r4, #16]
 802a48c:	3308      	adds	r3, #8
 802a48e:	6123      	str	r3, [r4, #16]
 802a490:	68a3      	ldr	r3, [r4, #8]
 802a492:	3301      	adds	r3, #1
 802a494:	60a3      	str	r3, [r4, #8]
 802a496:	e77d      	b.n	802a394 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802a498:	f104 0814 	add.w	r8, r4, #20
 802a49c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a4a0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802a4a4:	f8c9 0000 	str.w	r0, [r9]
 802a4a8:	f8c9 1004 	str.w	r1, [r9, #4]
 802a4ac:	6921      	ldr	r1, [r4, #16]
 802a4ae:	3108      	adds	r1, #8
 802a4b0:	6121      	str	r1, [r4, #16]
 802a4b2:	68a1      	ldr	r1, [r4, #8]
 802a4b4:	3101      	adds	r1, #1
 802a4b6:	60a1      	str	r1, [r4, #8]
 802a4b8:	e7bc      	b.n	802a434 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802a4ba:	1a83      	subs	r3, r0, r2
 802a4bc:	9301      	str	r3, [sp, #4]
 802a4be:	f1ba 0f00 	cmp.w	sl, #0
 802a4c2:	f040 8094 	bne.w	802a5ee <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802a4c6:	9a01      	ldr	r2, [sp, #4]
 802a4c8:	0049      	lsls	r1, r1, #1
 802a4ca:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802a4ce:	2a00      	cmp	r2, #0
 802a4d0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802a4d4:	8b62      	ldrh	r2, [r4, #26]
 802a4d6:	bfaa      	itet	ge
 802a4d8:	f04f 0a20 	movge.w	sl, #32
 802a4dc:	f04f 38ff 	movlt.w	r8, #4294967295
 802a4e0:	f04f 0801 	movge.w	r8, #1
 802a4e4:	8b21      	ldrh	r1, [r4, #24]
 802a4e6:	ebaa 0e0e 	sub.w	lr, sl, lr
 802a4ea:	4471      	add	r1, lr
 802a4ec:	fb0e 2e03 	mla	lr, lr, r3, r2
 802a4f0:	eb08 0206 	add.w	r2, r8, r6
 802a4f4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802a4f8:	b209      	sxth	r1, r1
 802a4fa:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802a4fe:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802a502:	8321      	strh	r1, [r4, #24]
 802a504:	fa0f fe8e 	sxth.w	lr, lr
 802a508:	42b7      	cmp	r7, r6
 802a50a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802a50e:	d013      	beq.n	802a538 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 802a510:	ea51 010e 	orrs.w	r1, r1, lr
 802a514:	d00b      	beq.n	802a52e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802a516:	2800      	cmp	r0, #0
 802a518:	db09      	blt.n	802a52e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802a51a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a51c:	4281      	cmp	r1, r0
 802a51e:	dd06      	ble.n	802a52e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802a520:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a524:	4288      	cmp	r0, r1
 802a526:	d339      	bcc.n	802a59c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802a528:	2101      	movs	r1, #1
 802a52a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a52e:	2100      	movs	r1, #0
 802a530:	82a5      	strh	r5, [r4, #20]
 802a532:	82e2      	strh	r2, [r4, #22]
 802a534:	8321      	strh	r1, [r4, #24]
 802a536:	8361      	strh	r1, [r4, #26]
 802a538:	f1aa 0610 	sub.w	r6, sl, #16
 802a53c:	f04f 0e00 	mov.w	lr, #0
 802a540:	f04f 0b01 	mov.w	fp, #1
 802a544:	0076      	lsls	r6, r6, #1
 802a546:	fb06 f703 	mul.w	r7, r6, r3
 802a54a:	b236      	sxth	r6, r6
 802a54c:	b23f      	sxth	r7, r7
 802a54e:	ea46 0107 	orr.w	r1, r6, r7
 802a552:	9100      	str	r1, [sp, #0]
 802a554:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a556:	428a      	cmp	r2, r1
 802a558:	d03e      	beq.n	802a5d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802a55a:	4442      	add	r2, r8
 802a55c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802a560:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802a564:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802a568:	8326      	strh	r6, [r4, #24]
 802a56a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802a56e:	8367      	strh	r7, [r4, #26]
 802a570:	4584      	cmp	ip, r0
 802a572:	d0ef      	beq.n	802a554 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802a574:	9800      	ldr	r0, [sp, #0]
 802a576:	b150      	cbz	r0, 802a58e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802a578:	2900      	cmp	r1, #0
 802a57a:	db08      	blt.n	802a58e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802a57c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802a57e:	4288      	cmp	r0, r1
 802a580:	dd05      	ble.n	802a58e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802a582:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a586:	4288      	cmp	r0, r1
 802a588:	d315      	bcc.n	802a5b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a58a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 802a58e:	82a5      	strh	r5, [r4, #20]
 802a590:	82e2      	strh	r2, [r4, #22]
 802a592:	f8a4 e018 	strh.w	lr, [r4, #24]
 802a596:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802a59a:	e7db      	b.n	802a554 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802a59c:	f104 0614 	add.w	r6, r4, #20
 802a5a0:	6927      	ldr	r7, [r4, #16]
 802a5a2:	ce03      	ldmia	r6!, {r0, r1}
 802a5a4:	6038      	str	r0, [r7, #0]
 802a5a6:	6079      	str	r1, [r7, #4]
 802a5a8:	6921      	ldr	r1, [r4, #16]
 802a5aa:	3108      	adds	r1, #8
 802a5ac:	6121      	str	r1, [r4, #16]
 802a5ae:	68a1      	ldr	r1, [r4, #8]
 802a5b0:	3101      	adds	r1, #1
 802a5b2:	60a1      	str	r1, [r4, #8]
 802a5b4:	e7bb      	b.n	802a52e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802a5b6:	f104 0c14 	add.w	ip, r4, #20
 802a5ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a5be:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802a5c2:	f8c9 0000 	str.w	r0, [r9]
 802a5c6:	f8c9 1004 	str.w	r1, [r9, #4]
 802a5ca:	6921      	ldr	r1, [r4, #16]
 802a5cc:	3108      	adds	r1, #8
 802a5ce:	6121      	str	r1, [r4, #16]
 802a5d0:	68a1      	ldr	r1, [r4, #8]
 802a5d2:	3101      	adds	r1, #1
 802a5d4:	60a1      	str	r1, [r4, #8]
 802a5d6:	e7da      	b.n	802a58e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802a5d8:	9a03      	ldr	r2, [sp, #12]
 802a5da:	8b61      	ldrh	r1, [r4, #26]
 802a5dc:	f1a2 0c20 	sub.w	ip, r2, #32
 802a5e0:	8b22      	ldrh	r2, [r4, #24]
 802a5e2:	44d4      	add	ip, sl
 802a5e4:	4462      	add	r2, ip
 802a5e6:	fb0c 1303 	mla	r3, ip, r3, r1
 802a5ea:	8322      	strh	r2, [r4, #24]
 802a5ec:	e739      	b.n	802a462 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802a5ee:	9b01      	ldr	r3, [sp, #4]
 802a5f0:	2b00      	cmp	r3, #0
 802a5f2:	db3f      	blt.n	802a674 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 802a5f4:	2201      	movs	r2, #1
 802a5f6:	f1ce 0320 	rsb	r3, lr, #32
 802a5fa:	920b      	str	r2, [sp, #44]	; 0x2c
 802a5fc:	2220      	movs	r2, #32
 802a5fe:	fb0a f303 	mul.w	r3, sl, r3
 802a602:	9202      	str	r2, [sp, #8]
 802a604:	9a01      	ldr	r2, [sp, #4]
 802a606:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a60a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a60e:	fb93 f7f2 	sdiv	r7, r3, r2
 802a612:	fb02 3317 	mls	r3, r2, r7, r3
 802a616:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a61a:	2b00      	cmp	r3, #0
 802a61c:	9308      	str	r3, [sp, #32]
 802a61e:	bfbc      	itt	lt
 802a620:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802a624:	189b      	addlt	r3, r3, r2
 802a626:	eb07 0b01 	add.w	fp, r7, r1
 802a62a:	bfb8      	it	lt
 802a62c:	9308      	strlt	r3, [sp, #32]
 802a62e:	ea4f 136b 	mov.w	r3, fp, asr #5
 802a632:	9304      	str	r3, [sp, #16]
 802a634:	9b02      	ldr	r3, [sp, #8]
 802a636:	4573      	cmp	r3, lr
 802a638:	d133      	bne.n	802a6a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802a63a:	9b04      	ldr	r3, [sp, #16]
 802a63c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 802a640:	454b      	cmp	r3, r9
 802a642:	d045      	beq.n	802a6d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802a644:	8b62      	ldrh	r2, [r4, #26]
 802a646:	8b23      	ldrh	r3, [r4, #24]
 802a648:	4313      	orrs	r3, r2
 802a64a:	d00c      	beq.n	802a666 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802a64c:	f1b8 0f00 	cmp.w	r8, #0
 802a650:	db09      	blt.n	802a666 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802a652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a654:	4543      	cmp	r3, r8
 802a656:	dd06      	ble.n	802a666 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802a658:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802a65c:	429a      	cmp	r2, r3
 802a65e:	d313      	bcc.n	802a688 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 802a660:	2301      	movs	r3, #1
 802a662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a666:	9b04      	ldr	r3, [sp, #16]
 802a668:	82e6      	strh	r6, [r4, #22]
 802a66a:	82a3      	strh	r3, [r4, #20]
 802a66c:	2300      	movs	r3, #0
 802a66e:	8323      	strh	r3, [r4, #24]
 802a670:	8363      	strh	r3, [r4, #26]
 802a672:	e02d      	b.n	802a6d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802a674:	9a01      	ldr	r2, [sp, #4]
 802a676:	fb0a f30e 	mul.w	r3, sl, lr
 802a67a:	4252      	negs	r2, r2
 802a67c:	9201      	str	r2, [sp, #4]
 802a67e:	f04f 32ff 	mov.w	r2, #4294967295
 802a682:	920b      	str	r2, [sp, #44]	; 0x2c
 802a684:	2200      	movs	r2, #0
 802a686:	e7bc      	b.n	802a602 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802a688:	f104 0314 	add.w	r3, r4, #20
 802a68c:	6922      	ldr	r2, [r4, #16]
 802a68e:	cb03      	ldmia	r3!, {r0, r1}
 802a690:	6010      	str	r0, [r2, #0]
 802a692:	6051      	str	r1, [r2, #4]
 802a694:	6923      	ldr	r3, [r4, #16]
 802a696:	3308      	adds	r3, #8
 802a698:	6123      	str	r3, [r4, #16]
 802a69a:	68a3      	ldr	r3, [r4, #8]
 802a69c:	3301      	adds	r3, #1
 802a69e:	60a3      	str	r3, [r4, #8]
 802a6a0:	e7e1      	b.n	802a666 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802a6a2:	f00b 031f 	and.w	r3, fp, #31
 802a6a6:	f001 011f 	and.w	r1, r1, #31
 802a6aa:	8b20      	ldrh	r0, [r4, #24]
 802a6ac:	9309      	str	r3, [sp, #36]	; 0x24
 802a6ae:	9b02      	ldr	r3, [sp, #8]
 802a6b0:	eba3 020e 	sub.w	r2, r3, lr
 802a6b4:	8b63      	ldrh	r3, [r4, #26]
 802a6b6:	9300      	str	r3, [sp, #0]
 802a6b8:	9b04      	ldr	r3, [sp, #16]
 802a6ba:	42ab      	cmp	r3, r5
 802a6bc:	f040 80ef 	bne.w	802a89e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 802a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a6c2:	4410      	add	r0, r2
 802a6c4:	4419      	add	r1, r3
 802a6c6:	9b00      	ldr	r3, [sp, #0]
 802a6c8:	8320      	strh	r0, [r4, #24]
 802a6ca:	fb02 3101 	mla	r1, r2, r1, r3
 802a6ce:	8361      	strh	r1, [r4, #26]
 802a6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a6d2:	9904      	ldr	r1, [sp, #16]
 802a6d4:	4433      	add	r3, r6
 802a6d6:	9300      	str	r3, [sp, #0]
 802a6d8:	9a00      	ldr	r2, [sp, #0]
 802a6da:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a6de:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802a6e2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a6e6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a6ea:	4288      	cmp	r0, r1
 802a6ec:	d018      	beq.n	802a720 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 802a6ee:	8b60      	ldrh	r0, [r4, #26]
 802a6f0:	8b21      	ldrh	r1, [r4, #24]
 802a6f2:	ea50 0201 	orrs.w	r2, r0, r1
 802a6f6:	d00c      	beq.n	802a712 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a6f8:	2b00      	cmp	r3, #0
 802a6fa:	db0a      	blt.n	802a712 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a6fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a6fe:	4299      	cmp	r1, r3
 802a700:	dd07      	ble.n	802a712 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802a702:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a706:	4299      	cmp	r1, r3
 802a708:	f0c0 818b 	bcc.w	802aa22 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 802a70c:	2301      	movs	r3, #1
 802a70e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a712:	9b04      	ldr	r3, [sp, #16]
 802a714:	82a3      	strh	r3, [r4, #20]
 802a716:	9b00      	ldr	r3, [sp, #0]
 802a718:	82e3      	strh	r3, [r4, #22]
 802a71a:	2300      	movs	r3, #0
 802a71c:	8323      	strh	r3, [r4, #24]
 802a71e:	8363      	strh	r3, [r4, #26]
 802a720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a722:	9a00      	ldr	r2, [sp, #0]
 802a724:	4293      	cmp	r3, r2
 802a726:	f000 808d 	beq.w	802a844 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802a72a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802a72e:	9901      	ldr	r1, [sp, #4]
 802a730:	9801      	ldr	r0, [sp, #4]
 802a732:	fb93 f1f1 	sdiv	r1, r3, r1
 802a736:	fb00 3311 	mls	r3, r0, r1, r3
 802a73a:	9106      	str	r1, [sp, #24]
 802a73c:	2b00      	cmp	r3, #0
 802a73e:	9307      	str	r3, [sp, #28]
 802a740:	da04      	bge.n	802a74c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 802a742:	1e4b      	subs	r3, r1, #1
 802a744:	9306      	str	r3, [sp, #24]
 802a746:	9b07      	ldr	r3, [sp, #28]
 802a748:	4403      	add	r3, r0
 802a74a:	9307      	str	r3, [sp, #28]
 802a74c:	9b08      	ldr	r3, [sp, #32]
 802a74e:	f04f 0c00 	mov.w	ip, #0
 802a752:	9901      	ldr	r1, [sp, #4]
 802a754:	1a5b      	subs	r3, r3, r1
 802a756:	4659      	mov	r1, fp
 802a758:	9308      	str	r3, [sp, #32]
 802a75a:	9b02      	ldr	r3, [sp, #8]
 802a75c:	f1c3 0320 	rsb	r3, r3, #32
 802a760:	930a      	str	r3, [sp, #40]	; 0x28
 802a762:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a764:	9b02      	ldr	r3, [sp, #8]
 802a766:	1a1b      	subs	r3, r3, r0
 802a768:	9309      	str	r3, [sp, #36]	; 0x24
 802a76a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 802a76e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802a772:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802a776:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802a77a:	181b      	adds	r3, r3, r0
 802a77c:	bf58      	it	pl
 802a77e:	9801      	ldrpl	r0, [sp, #4]
 802a780:	9308      	str	r3, [sp, #32]
 802a782:	bf54      	ite	pl
 802a784:	1a1b      	subpl	r3, r3, r0
 802a786:	9d06      	ldrmi	r5, [sp, #24]
 802a788:	9802      	ldr	r0, [sp, #8]
 802a78a:	bf5e      	ittt	pl
 802a78c:	9308      	strpl	r3, [sp, #32]
 802a78e:	9b06      	ldrpl	r3, [sp, #24]
 802a790:	1c5d      	addpl	r5, r3, #1
 802a792:	44ab      	add	fp, r5
 802a794:	ea4f 136b 	mov.w	r3, fp, asr #5
 802a798:	9304      	str	r3, [sp, #16]
 802a79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a79c:	4283      	cmp	r3, r0
 802a79e:	f040 815a 	bne.w	802aa56 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 802a7a2:	9b04      	ldr	r3, [sp, #16]
 802a7a4:	9a00      	ldr	r2, [sp, #0]
 802a7a6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802a7aa:	4543      	cmp	r3, r8
 802a7ac:	d01a      	beq.n	802a7e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a7ae:	8b61      	ldrh	r1, [r4, #26]
 802a7b0:	8b23      	ldrh	r3, [r4, #24]
 802a7b2:	430b      	orrs	r3, r1
 802a7b4:	d00e      	beq.n	802a7d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a7b6:	f1be 0f00 	cmp.w	lr, #0
 802a7ba:	db0b      	blt.n	802a7d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a7bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a7be:	4573      	cmp	r3, lr
 802a7c0:	dd08      	ble.n	802a7d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802a7c2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a7c6:	4299      	cmp	r1, r3
 802a7c8:	f0c0 8138 	bcc.w	802aa3c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 802a7cc:	f04f 0301 	mov.w	r3, #1
 802a7d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a7d4:	9b04      	ldr	r3, [sp, #16]
 802a7d6:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a7da:	82a3      	strh	r3, [r4, #20]
 802a7dc:	9b00      	ldr	r3, [sp, #0]
 802a7de:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a7e2:	82e3      	strh	r3, [r4, #22]
 802a7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a7e6:	9a00      	ldr	r2, [sp, #0]
 802a7e8:	441a      	add	r2, r3
 802a7ea:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a7ee:	9200      	str	r2, [sp, #0]
 802a7f0:	9900      	ldr	r1, [sp, #0]
 802a7f2:	9a04      	ldr	r2, [sp, #16]
 802a7f4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802a7f8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a7fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a800:	4288      	cmp	r0, r1
 802a802:	d01a      	beq.n	802a83a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 802a804:	8b60      	ldrh	r0, [r4, #26]
 802a806:	8b21      	ldrh	r1, [r4, #24]
 802a808:	ea50 0201 	orrs.w	r2, r0, r1
 802a80c:	d00d      	beq.n	802a82a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a80e:	2b00      	cmp	r3, #0
 802a810:	db0b      	blt.n	802a82a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a812:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a814:	4299      	cmp	r1, r3
 802a816:	dd08      	ble.n	802a82a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a818:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a81c:	4299      	cmp	r1, r3
 802a81e:	f0c0 81f9 	bcc.w	802ac14 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802a822:	f04f 0301 	mov.w	r3, #1
 802a826:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a82a:	9b04      	ldr	r3, [sp, #16]
 802a82c:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a830:	82a3      	strh	r3, [r4, #20]
 802a832:	9b00      	ldr	r3, [sp, #0]
 802a834:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a838:	82e3      	strh	r3, [r4, #22]
 802a83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a83c:	4659      	mov	r1, fp
 802a83e:	9a00      	ldr	r2, [sp, #0]
 802a840:	4293      	cmp	r3, r2
 802a842:	d192      	bne.n	802a76a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 802a844:	9b02      	ldr	r3, [sp, #8]
 802a846:	f1c3 0c20 	rsb	ip, r3, #32
 802a84a:	9b05      	ldr	r3, [sp, #20]
 802a84c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 802a850:	9b03      	ldr	r3, [sp, #12]
 802a852:	459c      	cmp	ip, r3
 802a854:	f040 81f8 	bne.w	802ac48 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 802a858:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a85c:	9a00      	ldr	r2, [sp, #0]
 802a85e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a862:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802a866:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a86a:	4288      	cmp	r0, r1
 802a86c:	f43f ad54 	beq.w	802a318 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a870:	8b60      	ldrh	r0, [r4, #26]
 802a872:	8b21      	ldrh	r1, [r4, #24]
 802a874:	ea50 0201 	orrs.w	r2, r0, r1
 802a878:	d00c      	beq.n	802a894 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a87a:	2b00      	cmp	r3, #0
 802a87c:	db0a      	blt.n	802a894 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a87e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a880:	4299      	cmp	r1, r3
 802a882:	dd07      	ble.n	802a894 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a884:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a888:	4299      	cmp	r1, r3
 802a88a:	f0c0 81d0 	bcc.w	802ac2e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802a88e:	2301      	movs	r3, #1
 802a890:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a894:	9b00      	ldr	r3, [sp, #0]
 802a896:	f8a4 e014 	strh.w	lr, [r4, #20]
 802a89a:	82e3      	strh	r3, [r4, #22]
 802a89c:	e517      	b.n	802a2ce <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802a89e:	2f00      	cmp	r7, #0
 802a8a0:	f2c0 8097 	blt.w	802a9d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 802a8a4:	2301      	movs	r3, #1
 802a8a6:	f1c1 0c20 	rsb	ip, r1, #32
 802a8aa:	9307      	str	r3, [sp, #28]
 802a8ac:	2320      	movs	r3, #32
 802a8ae:	fb02 f20c 	mul.w	r2, r2, ip
 802a8b2:	9306      	str	r3, [sp, #24]
 802a8b4:	9b06      	ldr	r3, [sp, #24]
 802a8b6:	fb92 fcf7 	sdiv	ip, r2, r7
 802a8ba:	fb07 221c 	mls	r2, r7, ip, r2
 802a8be:	4419      	add	r1, r3
 802a8c0:	9b00      	ldr	r3, [sp, #0]
 802a8c2:	2a00      	cmp	r2, #0
 802a8c4:	bfbc      	itt	lt
 802a8c6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a8ca:	19d2      	addlt	r2, r2, r7
 802a8cc:	fb0c 3101 	mla	r1, ip, r1, r3
 802a8d0:	9b07      	ldr	r3, [sp, #28]
 802a8d2:	4460      	add	r0, ip
 802a8d4:	441d      	add	r5, r3
 802a8d6:	0433      	lsls	r3, r6, #16
 802a8d8:	b200      	sxth	r0, r0
 802a8da:	930a      	str	r3, [sp, #40]	; 0x28
 802a8dc:	18eb      	adds	r3, r5, r3
 802a8de:	b209      	sxth	r1, r1
 802a8e0:	8320      	strh	r0, [r4, #24]
 802a8e2:	454b      	cmp	r3, r9
 802a8e4:	8361      	strh	r1, [r4, #26]
 802a8e6:	d014      	beq.n	802a912 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802a8e8:	ea50 0301 	orrs.w	r3, r0, r1
 802a8ec:	d00c      	beq.n	802a908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a8ee:	f1b8 0f00 	cmp.w	r8, #0
 802a8f2:	db09      	blt.n	802a908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a8f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a8f6:	4543      	cmp	r3, r8
 802a8f8:	dd06      	ble.n	802a908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802a8fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a8fe:	4299      	cmp	r1, r3
 802a900:	d36e      	bcc.n	802a9e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 802a902:	2301      	movs	r3, #1
 802a904:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a908:	2300      	movs	r3, #0
 802a90a:	82a5      	strh	r5, [r4, #20]
 802a90c:	82e6      	strh	r6, [r4, #22]
 802a90e:	8323      	strh	r3, [r4, #24]
 802a910:	8363      	strh	r3, [r4, #26]
 802a912:	9904      	ldr	r1, [sp, #16]
 802a914:	eb0e 030c 	add.w	r3, lr, ip
 802a918:	42a9      	cmp	r1, r5
 802a91a:	d04d      	beq.n	802a9b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 802a91c:	9902      	ldr	r1, [sp, #8]
 802a91e:	1bd2      	subs	r2, r2, r7
 802a920:	1ac9      	subs	r1, r1, r3
 802a922:	9200      	str	r2, [sp, #0]
 802a924:	448c      	add	ip, r1
 802a926:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802a92a:	fb9c fef7 	sdiv	lr, ip, r7
 802a92e:	fb07 cc1e 	mls	ip, r7, lr, ip
 802a932:	f1bc 0f00 	cmp.w	ip, #0
 802a936:	bfbc      	itt	lt
 802a938:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802a93c:	44bc      	addlt	ip, r7
 802a93e:	f10e 0101 	add.w	r1, lr, #1
 802a942:	910d      	str	r1, [sp, #52]	; 0x34
 802a944:	9a00      	ldr	r2, [sp, #0]
 802a946:	8b20      	ldrh	r0, [r4, #24]
 802a948:	eb12 020c 	adds.w	r2, r2, ip
 802a94c:	8b61      	ldrh	r1, [r4, #26]
 802a94e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a952:	9200      	str	r2, [sp, #0]
 802a954:	bf5b      	ittet	pl
 802a956:	1bd2      	subpl	r2, r2, r7
 802a958:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802a95c:	46f0      	movmi	r8, lr
 802a95e:	9200      	strpl	r2, [sp, #0]
 802a960:	9a07      	ldr	r2, [sp, #28]
 802a962:	4440      	add	r0, r8
 802a964:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802a968:	4443      	add	r3, r8
 802a96a:	4415      	add	r5, r2
 802a96c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a972:	b200      	sxth	r0, r0
 802a974:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a978:	442a      	add	r2, r5
 802a97a:	b209      	sxth	r1, r1
 802a97c:	8320      	strh	r0, [r4, #24]
 802a97e:	454a      	cmp	r2, r9
 802a980:	8361      	strh	r1, [r4, #26]
 802a982:	d016      	beq.n	802a9b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 802a984:	ea50 0201 	orrs.w	r2, r0, r1
 802a988:	d00d      	beq.n	802a9a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a98a:	f1b8 0f00 	cmp.w	r8, #0
 802a98e:	db0a      	blt.n	802a9a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a990:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a992:	4541      	cmp	r1, r8
 802a994:	dd07      	ble.n	802a9a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802a996:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a99a:	4288      	cmp	r0, r1
 802a99c:	d330      	bcc.n	802aa00 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802a99e:	f04f 0201 	mov.w	r2, #1
 802a9a2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a9a6:	f04f 0200 	mov.w	r2, #0
 802a9aa:	82a5      	strh	r5, [r4, #20]
 802a9ac:	82e6      	strh	r6, [r4, #22]
 802a9ae:	8322      	strh	r2, [r4, #24]
 802a9b0:	8362      	strh	r2, [r4, #26]
 802a9b2:	9904      	ldr	r1, [sp, #16]
 802a9b4:	42a9      	cmp	r1, r5
 802a9b6:	d1c5      	bne.n	802a944 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802a9b8:	9a02      	ldr	r2, [sp, #8]
 802a9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a9bc:	1ad3      	subs	r3, r2, r3
 802a9be:	8b22      	ldrh	r2, [r4, #24]
 802a9c0:	3120      	adds	r1, #32
 802a9c2:	441a      	add	r2, r3
 802a9c4:	8322      	strh	r2, [r4, #24]
 802a9c6:	9a06      	ldr	r2, [sp, #24]
 802a9c8:	1a89      	subs	r1, r1, r2
 802a9ca:	8b62      	ldrh	r2, [r4, #26]
 802a9cc:	fb03 2301 	mla	r3, r3, r1, r2
 802a9d0:	e64e      	b.n	802a670 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 802a9d2:	f04f 33ff 	mov.w	r3, #4294967295
 802a9d6:	434a      	muls	r2, r1
 802a9d8:	427f      	negs	r7, r7
 802a9da:	9307      	str	r3, [sp, #28]
 802a9dc:	2300      	movs	r3, #0
 802a9de:	e768      	b.n	802a8b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 802a9e0:	f104 0314 	add.w	r3, r4, #20
 802a9e4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a9e8:	cb03      	ldmia	r3!, {r0, r1}
 802a9ea:	f8c8 0000 	str.w	r0, [r8]
 802a9ee:	f8c8 1004 	str.w	r1, [r8, #4]
 802a9f2:	6923      	ldr	r3, [r4, #16]
 802a9f4:	3308      	adds	r3, #8
 802a9f6:	6123      	str	r3, [r4, #16]
 802a9f8:	68a3      	ldr	r3, [r4, #8]
 802a9fa:	3301      	adds	r3, #1
 802a9fc:	60a3      	str	r3, [r4, #8]
 802a9fe:	e783      	b.n	802a908 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802aa00:	f104 0814 	add.w	r8, r4, #20
 802aa04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802aa08:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802aa0c:	f8c9 0000 	str.w	r0, [r9]
 802aa10:	f8c9 1004 	str.w	r1, [r9, #4]
 802aa14:	6921      	ldr	r1, [r4, #16]
 802aa16:	3108      	adds	r1, #8
 802aa18:	6121      	str	r1, [r4, #16]
 802aa1a:	68a1      	ldr	r1, [r4, #8]
 802aa1c:	3101      	adds	r1, #1
 802aa1e:	60a1      	str	r1, [r4, #8]
 802aa20:	e7c1      	b.n	802a9a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802aa22:	f104 0314 	add.w	r3, r4, #20
 802aa26:	6925      	ldr	r5, [r4, #16]
 802aa28:	cb03      	ldmia	r3!, {r0, r1}
 802aa2a:	6028      	str	r0, [r5, #0]
 802aa2c:	6069      	str	r1, [r5, #4]
 802aa2e:	6923      	ldr	r3, [r4, #16]
 802aa30:	3308      	adds	r3, #8
 802aa32:	6123      	str	r3, [r4, #16]
 802aa34:	68a3      	ldr	r3, [r4, #8]
 802aa36:	3301      	adds	r3, #1
 802aa38:	60a3      	str	r3, [r4, #8]
 802aa3a:	e66a      	b.n	802a712 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802aa3c:	f104 0314 	add.w	r3, r4, #20
 802aa40:	6925      	ldr	r5, [r4, #16]
 802aa42:	cb03      	ldmia	r3!, {r0, r1}
 802aa44:	6028      	str	r0, [r5, #0]
 802aa46:	6069      	str	r1, [r5, #4]
 802aa48:	6923      	ldr	r3, [r4, #16]
 802aa4a:	3308      	adds	r3, #8
 802aa4c:	6123      	str	r3, [r4, #16]
 802aa4e:	68a3      	ldr	r3, [r4, #8]
 802aa50:	3301      	adds	r3, #1
 802aa52:	60a3      	str	r3, [r4, #8]
 802aa54:	e6be      	b.n	802a7d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802aa56:	f00b 031f 	and.w	r3, fp, #31
 802aa5a:	114f      	asrs	r7, r1, #5
 802aa5c:	8b20      	ldrh	r0, [r4, #24]
 802aa5e:	f001 011f 	and.w	r1, r1, #31
 802aa62:	930f      	str	r3, [sp, #60]	; 0x3c
 802aa64:	9b04      	ldr	r3, [sp, #16]
 802aa66:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802aa6a:	429f      	cmp	r7, r3
 802aa6c:	d10a      	bne.n	802aa84 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802aa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa70:	4418      	add	r0, r3
 802aa72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802aa74:	4419      	add	r1, r3
 802aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa78:	8320      	strh	r0, [r4, #24]
 802aa7a:	fb03 9901 	mla	r9, r3, r1, r9
 802aa7e:	f8a4 901a 	strh.w	r9, [r4, #26]
 802aa82:	e6af      	b.n	802a7e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802aa84:	2d00      	cmp	r5, #0
 802aa86:	f2c0 809b 	blt.w	802abc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802aa8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802aa8c:	f1c1 0320 	rsb	r3, r1, #32
 802aa90:	4373      	muls	r3, r6
 802aa92:	2601      	movs	r6, #1
 802aa94:	960e      	str	r6, [sp, #56]	; 0x38
 802aa96:	2620      	movs	r6, #32
 802aa98:	960d      	str	r6, [sp, #52]	; 0x34
 802aa9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802aa9c:	fb93 f6f5 	sdiv	r6, r3, r5
 802aaa0:	4411      	add	r1, r2
 802aaa2:	fb05 3316 	mls	r3, r5, r6, r3
 802aaa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802aaa8:	2b00      	cmp	r3, #0
 802aaaa:	4417      	add	r7, r2
 802aaac:	9a00      	ldr	r2, [sp, #0]
 802aaae:	bfbc      	itt	lt
 802aab0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802aab4:	195b      	addlt	r3, r3, r5
 802aab6:	0412      	lsls	r2, r2, #16
 802aab8:	fb06 9101 	mla	r1, r6, r1, r9
 802aabc:	4430      	add	r0, r6
 802aabe:	eb07 0902 	add.w	r9, r7, r2
 802aac2:	9210      	str	r2, [sp, #64]	; 0x40
 802aac4:	b200      	sxth	r0, r0
 802aac6:	b209      	sxth	r1, r1
 802aac8:	45c1      	cmp	r9, r8
 802aaca:	8320      	strh	r0, [r4, #24]
 802aacc:	8361      	strh	r1, [r4, #26]
 802aace:	d017      	beq.n	802ab00 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 802aad0:	ea50 0201 	orrs.w	r2, r0, r1
 802aad4:	d00d      	beq.n	802aaf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802aad6:	f1be 0f00 	cmp.w	lr, #0
 802aada:	db0a      	blt.n	802aaf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802aadc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aade:	4571      	cmp	r1, lr
 802aae0:	dd07      	ble.n	802aaf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802aae2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802aae6:	4288      	cmp	r0, r1
 802aae8:	d372      	bcc.n	802abd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802aaea:	f04f 0201 	mov.w	r2, #1
 802aaee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802aaf2:	9a00      	ldr	r2, [sp, #0]
 802aaf4:	82a7      	strh	r7, [r4, #20]
 802aaf6:	82e2      	strh	r2, [r4, #22]
 802aaf8:	f8a4 c018 	strh.w	ip, [r4, #24]
 802aafc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802ab00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ab02:	eb02 0e06 	add.w	lr, r2, r6
 802ab06:	9a04      	ldr	r2, [sp, #16]
 802ab08:	42ba      	cmp	r2, r7
 802ab0a:	d049      	beq.n	802aba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 802ab0c:	9a02      	ldr	r2, [sp, #8]
 802ab0e:	1b5b      	subs	r3, r3, r5
 802ab10:	eba2 010e 	sub.w	r1, r2, lr
 802ab14:	440e      	add	r6, r1
 802ab16:	0176      	lsls	r6, r6, #5
 802ab18:	fb96 f8f5 	sdiv	r8, r6, r5
 802ab1c:	fb05 6618 	mls	r6, r5, r8, r6
 802ab20:	2e00      	cmp	r6, #0
 802ab22:	bfbc      	itt	lt
 802ab24:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802ab28:	1976      	addlt	r6, r6, r5
 802ab2a:	f108 0201 	add.w	r2, r8, #1
 802ab2e:	9211      	str	r2, [sp, #68]	; 0x44
 802ab30:	199b      	adds	r3, r3, r6
 802ab32:	8b20      	ldrh	r0, [r4, #24]
 802ab34:	8b61      	ldrh	r1, [r4, #26]
 802ab36:	bf54      	ite	pl
 802ab38:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802ab3c:	46c1      	movmi	r9, r8
 802ab3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ab40:	bf58      	it	pl
 802ab42:	1b5b      	subpl	r3, r3, r5
 802ab44:	4448      	add	r0, r9
 802ab46:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802ab4a:	4417      	add	r7, r2
 802ab4c:	44ce      	add	lr, r9
 802ab4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ab50:	b200      	sxth	r0, r0
 802ab52:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802ab56:	b209      	sxth	r1, r1
 802ab58:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802ab5c:	443a      	add	r2, r7
 802ab5e:	8320      	strh	r0, [r4, #24]
 802ab60:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802ab64:	8361      	strh	r1, [r4, #26]
 802ab66:	4552      	cmp	r2, sl
 802ab68:	d017      	beq.n	802ab9a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802ab6a:	ea50 0201 	orrs.w	r2, r0, r1
 802ab6e:	d00d      	beq.n	802ab8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802ab70:	f1b9 0f00 	cmp.w	r9, #0
 802ab74:	db0a      	blt.n	802ab8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802ab76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ab78:	4549      	cmp	r1, r9
 802ab7a:	dd07      	ble.n	802ab8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802ab7c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ab80:	4288      	cmp	r0, r1
 802ab82:	d336      	bcc.n	802abf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802ab84:	f04f 0201 	mov.w	r2, #1
 802ab88:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ab8c:	9a00      	ldr	r2, [sp, #0]
 802ab8e:	82a7      	strh	r7, [r4, #20]
 802ab90:	82e2      	strh	r2, [r4, #22]
 802ab92:	f8a4 c018 	strh.w	ip, [r4, #24]
 802ab96:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802ab9a:	9a04      	ldr	r2, [sp, #16]
 802ab9c:	42ba      	cmp	r2, r7
 802ab9e:	d1c7      	bne.n	802ab30 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802aba0:	9b02      	ldr	r3, [sp, #8]
 802aba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802aba4:	eba3 0e0e 	sub.w	lr, r3, lr
 802aba8:	8b23      	ldrh	r3, [r4, #24]
 802abaa:	3120      	adds	r1, #32
 802abac:	4473      	add	r3, lr
 802abae:	8323      	strh	r3, [r4, #24]
 802abb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802abb2:	1ac9      	subs	r1, r1, r3
 802abb4:	8b63      	ldrh	r3, [r4, #26]
 802abb6:	fb0e 3e01 	mla	lr, lr, r1, r3
 802abba:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802abbe:	e611      	b.n	802a7e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802abc0:	f04f 36ff 	mov.w	r6, #4294967295
 802abc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802abc6:	426d      	negs	r5, r5
 802abc8:	960e      	str	r6, [sp, #56]	; 0x38
 802abca:	2600      	movs	r6, #0
 802abcc:	434b      	muls	r3, r1
 802abce:	e763      	b.n	802aa98 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802abd0:	f104 0e14 	add.w	lr, r4, #20
 802abd4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802abd8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802abdc:	f8c8 0000 	str.w	r0, [r8]
 802abe0:	f8c8 1004 	str.w	r1, [r8, #4]
 802abe4:	6921      	ldr	r1, [r4, #16]
 802abe6:	3108      	adds	r1, #8
 802abe8:	6121      	str	r1, [r4, #16]
 802abea:	68a1      	ldr	r1, [r4, #8]
 802abec:	3101      	adds	r1, #1
 802abee:	60a1      	str	r1, [r4, #8]
 802abf0:	e77f      	b.n	802aaf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802abf2:	f104 0914 	add.w	r9, r4, #20
 802abf6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802abfa:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802abfe:	f8ca 0000 	str.w	r0, [sl]
 802ac02:	f8ca 1004 	str.w	r1, [sl, #4]
 802ac06:	6921      	ldr	r1, [r4, #16]
 802ac08:	3108      	adds	r1, #8
 802ac0a:	6121      	str	r1, [r4, #16]
 802ac0c:	68a1      	ldr	r1, [r4, #8]
 802ac0e:	3101      	adds	r1, #1
 802ac10:	60a1      	str	r1, [r4, #8]
 802ac12:	e7bb      	b.n	802ab8c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802ac14:	f104 0314 	add.w	r3, r4, #20
 802ac18:	6925      	ldr	r5, [r4, #16]
 802ac1a:	cb03      	ldmia	r3!, {r0, r1}
 802ac1c:	6028      	str	r0, [r5, #0]
 802ac1e:	6069      	str	r1, [r5, #4]
 802ac20:	6923      	ldr	r3, [r4, #16]
 802ac22:	3308      	adds	r3, #8
 802ac24:	6123      	str	r3, [r4, #16]
 802ac26:	68a3      	ldr	r3, [r4, #8]
 802ac28:	3301      	adds	r3, #1
 802ac2a:	60a3      	str	r3, [r4, #8]
 802ac2c:	e5fd      	b.n	802a82a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802ac2e:	f104 0314 	add.w	r3, r4, #20
 802ac32:	6925      	ldr	r5, [r4, #16]
 802ac34:	cb03      	ldmia	r3!, {r0, r1}
 802ac36:	6028      	str	r0, [r5, #0]
 802ac38:	6069      	str	r1, [r5, #4]
 802ac3a:	6923      	ldr	r3, [r4, #16]
 802ac3c:	3308      	adds	r3, #8
 802ac3e:	6123      	str	r3, [r4, #16]
 802ac40:	68a3      	ldr	r3, [r4, #8]
 802ac42:	3301      	adds	r3, #1
 802ac44:	60a3      	str	r3, [r4, #8]
 802ac46:	e625      	b.n	802a894 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802ac48:	9b05      	ldr	r3, [sp, #20]
 802ac4a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802ac4e:	f00b 081f 	and.w	r8, fp, #31
 802ac52:	8b20      	ldrh	r0, [r4, #24]
 802ac54:	f003 031f 	and.w	r3, r3, #31
 802ac58:	4577      	cmp	r7, lr
 802ac5a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802ac5e:	9302      	str	r3, [sp, #8]
 802ac60:	9b03      	ldr	r3, [sp, #12]
 802ac62:	eba3 050c 	sub.w	r5, r3, ip
 802ac66:	d108      	bne.n	802ac7a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802ac68:	9b02      	ldr	r3, [sp, #8]
 802ac6a:	4428      	add	r0, r5
 802ac6c:	4498      	add	r8, r3
 802ac6e:	8320      	strh	r0, [r4, #24]
 802ac70:	fb05 9508 	mla	r5, r5, r8, r9
 802ac74:	8365      	strh	r5, [r4, #26]
 802ac76:	f7ff bb4f 	b.w	802a318 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802ac7a:	9b05      	ldr	r3, [sp, #20]
 802ac7c:	ebb3 030b 	subs.w	r3, r3, fp
 802ac80:	f100 809c 	bmi.w	802adbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802ac84:	f1c8 0120 	rsb	r1, r8, #32
 802ac88:	2201      	movs	r2, #1
 802ac8a:	f04f 0b20 	mov.w	fp, #32
 802ac8e:	434d      	muls	r5, r1
 802ac90:	9201      	str	r2, [sp, #4]
 802ac92:	9a01      	ldr	r2, [sp, #4]
 802ac94:	44d8      	add	r8, fp
 802ac96:	fb95 f6f3 	sdiv	r6, r5, r3
 802ac9a:	fb03 5516 	mls	r5, r3, r6, r5
 802ac9e:	4417      	add	r7, r2
 802aca0:	9a00      	ldr	r2, [sp, #0]
 802aca2:	2d00      	cmp	r5, #0
 802aca4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802aca8:	bfbc      	itt	lt
 802acaa:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802acae:	18ed      	addlt	r5, r5, r3
 802acb0:	eb07 0a02 	add.w	sl, r7, r2
 802acb4:	9204      	str	r2, [sp, #16]
 802acb6:	fb06 9808 	mla	r8, r6, r8, r9
 802acba:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802acbe:	4430      	add	r0, r6
 802acc0:	fa0f f188 	sxth.w	r1, r8
 802acc4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802acc8:	b200      	sxth	r0, r0
 802acca:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802acce:	8361      	strh	r1, [r4, #26]
 802acd0:	8320      	strh	r0, [r4, #24]
 802acd2:	45ca      	cmp	sl, r9
 802acd4:	d015      	beq.n	802ad02 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802acd6:	ea50 0201 	orrs.w	r2, r0, r1
 802acda:	d00c      	beq.n	802acf6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802acdc:	f1b8 0f00 	cmp.w	r8, #0
 802ace0:	db09      	blt.n	802acf6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802ace2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ace4:	4541      	cmp	r1, r8
 802ace6:	dd06      	ble.n	802acf6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802ace8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802acec:	4288      	cmp	r0, r1
 802acee:	d36e      	bcc.n	802adce <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802acf0:	2101      	movs	r1, #1
 802acf2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802acf6:	2100      	movs	r1, #0
 802acf8:	9a00      	ldr	r2, [sp, #0]
 802acfa:	82a7      	strh	r7, [r4, #20]
 802acfc:	82e2      	strh	r2, [r4, #22]
 802acfe:	8321      	strh	r1, [r4, #24]
 802ad00:	8361      	strh	r1, [r4, #26]
 802ad02:	45be      	cmp	lr, r7
 802ad04:	44b4      	add	ip, r6
 802ad06:	d048      	beq.n	802ad9a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802ad08:	9a03      	ldr	r2, [sp, #12]
 802ad0a:	1aed      	subs	r5, r5, r3
 802ad0c:	eba2 010c 	sub.w	r1, r2, ip
 802ad10:	440e      	add	r6, r1
 802ad12:	0176      	lsls	r6, r6, #5
 802ad14:	fb96 f8f3 	sdiv	r8, r6, r3
 802ad18:	fb03 6618 	mls	r6, r3, r8, r6
 802ad1c:	2e00      	cmp	r6, #0
 802ad1e:	bfbc      	itt	lt
 802ad20:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802ad24:	18f6      	addlt	r6, r6, r3
 802ad26:	f108 0201 	add.w	r2, r8, #1
 802ad2a:	9205      	str	r2, [sp, #20]
 802ad2c:	19ad      	adds	r5, r5, r6
 802ad2e:	8b20      	ldrh	r0, [r4, #24]
 802ad30:	8b61      	ldrh	r1, [r4, #26]
 802ad32:	bf54      	ite	pl
 802ad34:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802ad38:	46c1      	movmi	r9, r8
 802ad3a:	9a01      	ldr	r2, [sp, #4]
 802ad3c:	bf58      	it	pl
 802ad3e:	1aed      	subpl	r5, r5, r3
 802ad40:	4448      	add	r0, r9
 802ad42:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802ad46:	4417      	add	r7, r2
 802ad48:	44cc      	add	ip, r9
 802ad4a:	9a04      	ldr	r2, [sp, #16]
 802ad4c:	b200      	sxth	r0, r0
 802ad4e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802ad52:	b209      	sxth	r1, r1
 802ad54:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802ad58:	443a      	add	r2, r7
 802ad5a:	8320      	strh	r0, [r4, #24]
 802ad5c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802ad60:	8361      	strh	r1, [r4, #26]
 802ad62:	4552      	cmp	r2, sl
 802ad64:	d017      	beq.n	802ad96 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802ad66:	ea50 0201 	orrs.w	r2, r0, r1
 802ad6a:	d00d      	beq.n	802ad88 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802ad6c:	f1b9 0f00 	cmp.w	r9, #0
 802ad70:	db0a      	blt.n	802ad88 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802ad72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad74:	4549      	cmp	r1, r9
 802ad76:	dd07      	ble.n	802ad88 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802ad78:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ad7c:	4288      	cmp	r0, r1
 802ad7e:	d337      	bcc.n	802adf0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802ad80:	f04f 0201 	mov.w	r2, #1
 802ad84:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ad88:	9a00      	ldr	r2, [sp, #0]
 802ad8a:	82a7      	strh	r7, [r4, #20]
 802ad8c:	82e2      	strh	r2, [r4, #22]
 802ad8e:	f04f 0200 	mov.w	r2, #0
 802ad92:	8322      	strh	r2, [r4, #24]
 802ad94:	8362      	strh	r2, [r4, #26]
 802ad96:	45be      	cmp	lr, r7
 802ad98:	d1c8      	bne.n	802ad2c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802ad9a:	9b03      	ldr	r3, [sp, #12]
 802ad9c:	8b62      	ldrh	r2, [r4, #26]
 802ad9e:	eba3 0c0c 	sub.w	ip, r3, ip
 802ada2:	8b23      	ldrh	r3, [r4, #24]
 802ada4:	4463      	add	r3, ip
 802ada6:	8323      	strh	r3, [r4, #24]
 802ada8:	9b02      	ldr	r3, [sp, #8]
 802adaa:	3320      	adds	r3, #32
 802adac:	eba3 030b 	sub.w	r3, r3, fp
 802adb0:	fb0c 2c03 	mla	ip, ip, r3, r2
 802adb4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802adb8:	f7ff baae 	b.w	802a318 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802adbc:	f04f 32ff 	mov.w	r2, #4294967295
 802adc0:	fb05 f508 	mul.w	r5, r5, r8
 802adc4:	425b      	negs	r3, r3
 802adc6:	f04f 0b00 	mov.w	fp, #0
 802adca:	9201      	str	r2, [sp, #4]
 802adcc:	e761      	b.n	802ac92 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802adce:	f104 0814 	add.w	r8, r4, #20
 802add2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802add6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802adda:	f8c9 0000 	str.w	r0, [r9]
 802adde:	f8c9 1004 	str.w	r1, [r9, #4]
 802ade2:	6921      	ldr	r1, [r4, #16]
 802ade4:	3108      	adds	r1, #8
 802ade6:	6121      	str	r1, [r4, #16]
 802ade8:	68a1      	ldr	r1, [r4, #8]
 802adea:	3101      	adds	r1, #1
 802adec:	60a1      	str	r1, [r4, #8]
 802adee:	e782      	b.n	802acf6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802adf0:	f104 0914 	add.w	r9, r4, #20
 802adf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802adf8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802adfc:	f8ca 0000 	str.w	r0, [sl]
 802ae00:	f8ca 1004 	str.w	r1, [sl, #4]
 802ae04:	6921      	ldr	r1, [r4, #16]
 802ae06:	3108      	adds	r1, #8
 802ae08:	6121      	str	r1, [r4, #16]
 802ae0a:	68a1      	ldr	r1, [r4, #8]
 802ae0c:	3101      	adds	r1, #1
 802ae0e:	60a1      	str	r1, [r4, #8]
 802ae10:	e7ba      	b.n	802ad88 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802ae12 <_ZN8touchgfx7Outline6lineToEii>:
 802ae12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ae14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802ae16:	4604      	mov	r4, r0
 802ae18:	460d      	mov	r5, r1
 802ae1a:	4616      	mov	r6, r2
 802ae1c:	079b      	lsls	r3, r3, #30
 802ae1e:	d526      	bpl.n	802ae6e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802ae20:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802ae24:	ea85 0001 	eor.w	r0, r5, r1
 802ae28:	ea86 0302 	eor.w	r3, r6, r2
 802ae2c:	4303      	orrs	r3, r0
 802ae2e:	d01e      	beq.n	802ae6e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802ae30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802ae32:	114b      	asrs	r3, r1, #5
 802ae34:	9600      	str	r6, [sp, #0]
 802ae36:	4283      	cmp	r3, r0
 802ae38:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802ae3a:	bfb8      	it	lt
 802ae3c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802ae3e:	3301      	adds	r3, #1
 802ae40:	4283      	cmp	r3, r0
 802ae42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802ae44:	bfc8      	it	gt
 802ae46:	6363      	strgt	r3, [r4, #52]	; 0x34
 802ae48:	116b      	asrs	r3, r5, #5
 802ae4a:	4283      	cmp	r3, r0
 802ae4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802ae4e:	bfb8      	it	lt
 802ae50:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802ae52:	3301      	adds	r3, #1
 802ae54:	4283      	cmp	r3, r0
 802ae56:	4620      	mov	r0, r4
 802ae58:	bfc8      	it	gt
 802ae5a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802ae5c:	462b      	mov	r3, r5
 802ae5e:	f7ff f9e3 	bl	802a228 <_ZN8touchgfx7Outline10renderLineEiiii>
 802ae62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802ae64:	f043 0301 	orr.w	r3, r3, #1
 802ae68:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802ae6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802ae6e:	b002      	add	sp, #8
 802ae70:	bd70      	pop	{r4, r5, r6, pc}

0802ae72 <_ZN8touchgfx7Outline6moveToEii>:
 802ae72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ae74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802ae76:	4615      	mov	r5, r2
 802ae78:	4604      	mov	r4, r0
 802ae7a:	460e      	mov	r6, r1
 802ae7c:	079a      	lsls	r2, r3, #30
 802ae7e:	d401      	bmi.n	802ae84 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802ae80:	f7ff f98c 	bl	802a19c <_ZN8touchgfx7Outline5resetEv>
 802ae84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802ae86:	07db      	lsls	r3, r3, #31
 802ae88:	d504      	bpl.n	802ae94 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802ae8a:	4620      	mov	r0, r4
 802ae8c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802ae90:	f7ff ffbf 	bl	802ae12 <_ZN8touchgfx7Outline6lineToEii>
 802ae94:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802ae98:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802ae9c:	116f      	asrs	r7, r5, #5
 802ae9e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802aea2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802aea6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802aeaa:	4291      	cmp	r1, r2
 802aeac:	d015      	beq.n	802aeda <_ZN8touchgfx7Outline6moveToEii+0x68>
 802aeae:	8b61      	ldrh	r1, [r4, #26]
 802aeb0:	8b22      	ldrh	r2, [r4, #24]
 802aeb2:	430a      	orrs	r2, r1
 802aeb4:	d00b      	beq.n	802aece <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802aeb6:	2b00      	cmp	r3, #0
 802aeb8:	db09      	blt.n	802aece <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802aeba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802aebc:	429a      	cmp	r2, r3
 802aebe:	dd06      	ble.n	802aece <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802aec0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802aec4:	429a      	cmp	r2, r3
 802aec6:	d30d      	bcc.n	802aee4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802aec8:	2301      	movs	r3, #1
 802aeca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802aece:	2300      	movs	r3, #0
 802aed0:	f8a4 c014 	strh.w	ip, [r4, #20]
 802aed4:	82e7      	strh	r7, [r4, #22]
 802aed6:	8323      	strh	r3, [r4, #24]
 802aed8:	8363      	strh	r3, [r4, #26]
 802aeda:	61e6      	str	r6, [r4, #28]
 802aedc:	62a5      	str	r5, [r4, #40]	; 0x28
 802aede:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802aee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aee4:	f104 0314 	add.w	r3, r4, #20
 802aee8:	6922      	ldr	r2, [r4, #16]
 802aeea:	cb03      	ldmia	r3!, {r0, r1}
 802aeec:	6010      	str	r0, [r2, #0]
 802aeee:	6051      	str	r1, [r2, #4]
 802aef0:	6923      	ldr	r3, [r4, #16]
 802aef2:	3308      	adds	r3, #8
 802aef4:	6123      	str	r3, [r4, #16]
 802aef6:	68a3      	ldr	r3, [r4, #8]
 802aef8:	3301      	adds	r3, #1
 802aefa:	60a3      	str	r3, [r4, #8]
 802aefc:	e7e7      	b.n	802aece <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802aefe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802aefe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af02:	b0d1      	sub	sp, #324	; 0x144
 802af04:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802af08:	466c      	mov	r4, sp
 802af0a:	1a0d      	subs	r5, r1, r0
 802af0c:	f100 0208 	add.w	r2, r0, #8
 802af10:	2d48      	cmp	r5, #72	; 0x48
 802af12:	f340 80ba 	ble.w	802b08a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802af16:	112d      	asrs	r5, r5, #4
 802af18:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802af1c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802af20:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802af24:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802af28:	f9b0 8000 	ldrsh.w	r8, [r0]
 802af2c:	681e      	ldr	r6, [r3, #0]
 802af2e:	6006      	str	r6, [r0, #0]
 802af30:	685e      	ldr	r6, [r3, #4]
 802af32:	6046      	str	r6, [r0, #4]
 802af34:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802af38:	f8a3 c004 	strh.w	ip, [r3, #4]
 802af3c:	f8a3 e002 	strh.w	lr, [r3, #2]
 802af40:	80df      	strh	r7, [r3, #6]
 802af42:	f1a1 0308 	sub.w	r3, r1, #8
 802af46:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802af4a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802af4e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802af52:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802af56:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802af5a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802af5e:	45ac      	cmp	ip, r5
 802af60:	dd0f      	ble.n	802af82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802af62:	681d      	ldr	r5, [r3, #0]
 802af64:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802af68:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802af6c:	6015      	str	r5, [r2, #0]
 802af6e:	685d      	ldr	r5, [r3, #4]
 802af70:	6055      	str	r5, [r2, #4]
 802af72:	f821 7c08 	strh.w	r7, [r1, #-8]
 802af76:	f821 6c06 	strh.w	r6, [r1, #-6]
 802af7a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802af7e:	f821 cc02 	strh.w	ip, [r1, #-2]
 802af82:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802af86:	f9b0 7000 	ldrsh.w	r7, [r0]
 802af8a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802af8e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802af92:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802af96:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802af9a:	4565      	cmp	r5, ip
 802af9c:	dd0d      	ble.n	802afba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802af9e:	6815      	ldr	r5, [r2, #0]
 802afa0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802afa4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802afa8:	6005      	str	r5, [r0, #0]
 802afaa:	6855      	ldr	r5, [r2, #4]
 802afac:	8107      	strh	r7, [r0, #8]
 802afae:	6045      	str	r5, [r0, #4]
 802afb0:	8146      	strh	r6, [r0, #10]
 802afb2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802afb6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802afba:	f9b0 7000 	ldrsh.w	r7, [r0]
 802afbe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802afc2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802afc6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802afca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802afce:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802afd2:	45ac      	cmp	ip, r5
 802afd4:	dd0f      	ble.n	802aff6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802afd6:	681d      	ldr	r5, [r3, #0]
 802afd8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802afdc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802afe0:	6005      	str	r5, [r0, #0]
 802afe2:	685d      	ldr	r5, [r3, #4]
 802afe4:	6045      	str	r5, [r0, #4]
 802afe6:	f821 7c08 	strh.w	r7, [r1, #-8]
 802afea:	f821 6c06 	strh.w	r6, [r1, #-6]
 802afee:	f821 ec04 	strh.w	lr, [r1, #-4]
 802aff2:	f821 cc02 	strh.w	ip, [r1, #-2]
 802aff6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802affa:	f102 0508 	add.w	r5, r2, #8
 802affe:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802b002:	f9b0 e000 	ldrsh.w	lr, [r0]
 802b006:	462f      	mov	r7, r5
 802b008:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802b00c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802b010:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802b014:	45b2      	cmp	sl, r6
 802b016:	dc18      	bgt.n	802b04a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802b018:	3b08      	subs	r3, #8
 802b01a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802b01e:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b022:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802b026:	45b2      	cmp	sl, r6
 802b028:	dbf6      	blt.n	802b018 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802b02a:	42ab      	cmp	r3, r5
 802b02c:	681e      	ldr	r6, [r3, #0]
 802b02e:	d30e      	bcc.n	802b04e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802b030:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802b034:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802b038:	602e      	str	r6, [r5, #0]
 802b03a:	685e      	ldr	r6, [r3, #4]
 802b03c:	606e      	str	r6, [r5, #4]
 802b03e:	f8a3 9000 	strh.w	r9, [r3]
 802b042:	f8a3 8002 	strh.w	r8, [r3, #2]
 802b046:	809f      	strh	r7, [r3, #4]
 802b048:	80da      	strh	r2, [r3, #6]
 802b04a:	462a      	mov	r2, r5
 802b04c:	e7d3      	b.n	802aff6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b04e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802b052:	6006      	str	r6, [r0, #0]
 802b054:	685e      	ldr	r6, [r3, #4]
 802b056:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802b05a:	6046      	str	r6, [r0, #4]
 802b05c:	1a1e      	subs	r6, r3, r0
 802b05e:	80da      	strh	r2, [r3, #6]
 802b060:	1b4a      	subs	r2, r1, r5
 802b062:	f8a3 e000 	strh.w	lr, [r3]
 802b066:	10d2      	asrs	r2, r2, #3
 802b068:	f8a3 c002 	strh.w	ip, [r3, #2]
 802b06c:	f8a3 8004 	strh.w	r8, [r3, #4]
 802b070:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802b074:	bfb5      	itete	lt
 802b076:	e9c4 0300 	strdlt	r0, r3, [r4]
 802b07a:	4607      	movge	r7, r0
 802b07c:	460b      	movlt	r3, r1
 802b07e:	e9c4 5100 	strdge	r5, r1, [r4]
 802b082:	4638      	mov	r0, r7
 802b084:	3408      	adds	r4, #8
 802b086:	4619      	mov	r1, r3
 802b088:	e73f      	b.n	802af0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b08a:	4291      	cmp	r1, r2
 802b08c:	d925      	bls.n	802b0da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802b08e:	f1a2 0310 	sub.w	r3, r2, #16
 802b092:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802b096:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802b09a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802b09e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802b0a2:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802b0a6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802b0aa:	42b5      	cmp	r5, r6
 802b0ac:	dd13      	ble.n	802b0d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802b0ae:	461d      	mov	r5, r3
 802b0b0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802b0b4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802b0b8:	3b08      	subs	r3, #8
 802b0ba:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802b0be:	619e      	str	r6, [r3, #24]
 802b0c0:	42a8      	cmp	r0, r5
 802b0c2:	686e      	ldr	r6, [r5, #4]
 802b0c4:	f8a3 c010 	strh.w	ip, [r3, #16]
 802b0c8:	61de      	str	r6, [r3, #28]
 802b0ca:	825f      	strh	r7, [r3, #18]
 802b0cc:	f8a3 8014 	strh.w	r8, [r3, #20]
 802b0d0:	f8a3 e016 	strh.w	lr, [r3, #22]
 802b0d4:	d1dd      	bne.n	802b092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802b0d6:	3208      	adds	r2, #8
 802b0d8:	e7d7      	b.n	802b08a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802b0da:	466b      	mov	r3, sp
 802b0dc:	429c      	cmp	r4, r3
 802b0de:	d903      	bls.n	802b0e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802b0e0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802b0e4:	3c08      	subs	r4, #8
 802b0e6:	e710      	b.n	802af0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b0e8:	b051      	add	sp, #324	; 0x144
 802b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b0ee <_ZN8touchgfx7Outline9sortCellsEv>:
 802b0ee:	6881      	ldr	r1, [r0, #8]
 802b0f0:	b111      	cbz	r1, 802b0f8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802b0f2:	68c0      	ldr	r0, [r0, #12]
 802b0f4:	f7ff bf03 	b.w	802aefe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802b0f8:	4770      	bx	lr

0802b0fa <_ZN8touchgfx7Outline8getCellsEv>:
 802b0fa:	b510      	push	{r4, lr}
 802b0fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b0fe:	4604      	mov	r4, r0
 802b100:	07da      	lsls	r2, r3, #31
 802b102:	d507      	bpl.n	802b114 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802b104:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802b108:	f7ff fe83 	bl	802ae12 <_ZN8touchgfx7Outline6lineToEii>
 802b10c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b10e:	f023 0301 	bic.w	r3, r3, #1
 802b112:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b116:	079b      	lsls	r3, r3, #30
 802b118:	d51a      	bpl.n	802b150 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802b11a:	8b62      	ldrh	r2, [r4, #26]
 802b11c:	8b23      	ldrh	r3, [r4, #24]
 802b11e:	4313      	orrs	r3, r2
 802b120:	d00d      	beq.n	802b13e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b122:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b126:	2b00      	cmp	r3, #0
 802b128:	db09      	blt.n	802b13e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b12a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b12c:	4293      	cmp	r3, r2
 802b12e:	da06      	bge.n	802b13e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b130:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802b134:	429a      	cmp	r2, r3
 802b136:	d80d      	bhi.n	802b154 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802b138:	2301      	movs	r3, #1
 802b13a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b13e:	68a0      	ldr	r0, [r4, #8]
 802b140:	b138      	cbz	r0, 802b152 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802b142:	4620      	mov	r0, r4
 802b144:	f7ff ffd3 	bl	802b0ee <_ZN8touchgfx7Outline9sortCellsEv>
 802b148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b14a:	f023 0302 	bic.w	r3, r3, #2
 802b14e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b150:	68e0      	ldr	r0, [r4, #12]
 802b152:	bd10      	pop	{r4, pc}
 802b154:	f104 0314 	add.w	r3, r4, #20
 802b158:	6922      	ldr	r2, [r4, #16]
 802b15a:	cb03      	ldmia	r3!, {r0, r1}
 802b15c:	6010      	str	r0, [r2, #0]
 802b15e:	6051      	str	r1, [r2, #4]
 802b160:	6923      	ldr	r3, [r4, #16]
 802b162:	3308      	adds	r3, #8
 802b164:	6123      	str	r3, [r4, #16]
 802b166:	68a3      	ldr	r3, [r4, #8]
 802b168:	3301      	adds	r3, #1
 802b16a:	60a3      	str	r3, [r4, #8]
 802b16c:	e7e7      	b.n	802b13e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802b16e <_ZN8touchgfx8ScanlineD1Ev>:
 802b16e:	4770      	bx	lr

0802b170 <_ZN8touchgfx8ScanlineD0Ev>:
 802b170:	b510      	push	{r4, lr}
 802b172:	4604      	mov	r4, r0
 802b174:	2124      	movs	r1, #36	; 0x24
 802b176:	f000 f87a 	bl	802b26e <_ZdlPvj>
 802b17a:	4620      	mov	r0, r4
 802b17c:	bd10      	pop	{r4, pc}

0802b17e <_ZN8touchgfx8Scanline5resetEv>:
 802b17e:	b510      	push	{r4, lr}
 802b180:	4604      	mov	r4, r0
 802b182:	f7f3 f8bf 	bl	801e304 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802b186:	61a0      	str	r0, [r4, #24]
 802b188:	f7f3 f8c2 	bl	801e310 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802b18c:	61e0      	str	r0, [r4, #28]
 802b18e:	f7f3 f8c5 	bl	801e31c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802b192:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b196:	6220      	str	r0, [r4, #32]
 802b198:	6160      	str	r0, [r4, #20]
 802b19a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802b19e:	69e3      	ldr	r3, [r4, #28]
 802b1a0:	6123      	str	r3, [r4, #16]
 802b1a2:	2300      	movs	r3, #0
 802b1a4:	60e3      	str	r3, [r4, #12]
 802b1a6:	bd10      	pop	{r4, pc}

0802b1a8 <_ZN8touchgfx8ScanlineC1Ev>:
 802b1a8:	4b07      	ldr	r3, [pc, #28]	; (802b1c8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802b1aa:	b510      	push	{r4, lr}
 802b1ac:	6003      	str	r3, [r0, #0]
 802b1ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b1b2:	4604      	mov	r4, r0
 802b1b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802b1b8:	2300      	movs	r3, #0
 802b1ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b1be:	6143      	str	r3, [r0, #20]
 802b1c0:	f7ff ffdd 	bl	802b17e <_ZN8touchgfx8Scanline5resetEv>
 802b1c4:	4620      	mov	r0, r4
 802b1c6:	bd10      	pop	{r4, pc}
 802b1c8:	080317cc 	.word	0x080317cc

0802b1cc <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b1d0:	1e0c      	subs	r4, r1, #0
 802b1d2:	4605      	mov	r5, r0
 802b1d4:	4617      	mov	r7, r2
 802b1d6:	461e      	mov	r6, r3
 802b1d8:	da03      	bge.n	802b1e2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802b1da:	4426      	add	r6, r4
 802b1dc:	2e01      	cmp	r6, #1
 802b1de:	d421      	bmi.n	802b224 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b1e0:	2400      	movs	r4, #0
 802b1e2:	f7f3 f889 	bl	801e2f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b1e6:	42a0      	cmp	r0, r4
 802b1e8:	d91c      	bls.n	802b224 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b1ea:	eb04 0806 	add.w	r8, r4, r6
 802b1ee:	f7f3 f883 	bl	801e2f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b1f2:	4580      	cmp	r8, r0
 802b1f4:	d902      	bls.n	802b1fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802b1f6:	f7f3 f87f 	bl	801e2f8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b1fa:	1b06      	subs	r6, r0, r4
 802b1fc:	69a8      	ldr	r0, [r5, #24]
 802b1fe:	4632      	mov	r2, r6
 802b200:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802b204:	4420      	add	r0, r4
 802b206:	f7f4 fd76 	bl	801fcf6 <_ZN8touchgfx6memsetEPvhm>
 802b20a:	686b      	ldr	r3, [r5, #4]
 802b20c:	b2b2      	uxth	r2, r6
 802b20e:	3301      	adds	r3, #1
 802b210:	42a3      	cmp	r3, r4
 802b212:	696b      	ldr	r3, [r5, #20]
 802b214:	d108      	bne.n	802b228 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802b216:	8819      	ldrh	r1, [r3, #0]
 802b218:	440a      	add	r2, r1
 802b21a:	801a      	strh	r2, [r3, #0]
 802b21c:	3c01      	subs	r4, #1
 802b21e:	4434      	add	r4, r6
 802b220:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b228:	1c99      	adds	r1, r3, #2
 802b22a:	6169      	str	r1, [r5, #20]
 802b22c:	805a      	strh	r2, [r3, #2]
 802b22e:	692b      	ldr	r3, [r5, #16]
 802b230:	1c9a      	adds	r2, r3, #2
 802b232:	612a      	str	r2, [r5, #16]
 802b234:	805c      	strh	r4, [r3, #2]
 802b236:	68eb      	ldr	r3, [r5, #12]
 802b238:	3301      	adds	r3, #1
 802b23a:	60eb      	str	r3, [r5, #12]
 802b23c:	e7ee      	b.n	802b21c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802b23e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802b23e:	2200      	movs	r2, #0
 802b240:	6002      	str	r2, [r0, #0]
 802b242:	7102      	strb	r2, [r0, #4]
 802b244:	6102      	str	r2, [r0, #16]
 802b246:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802b24a:	4770      	bx	lr

0802b24c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802b24c:	4770      	bx	lr

0802b24e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802b24e:	6083      	str	r3, [r0, #8]
 802b250:	9b00      	ldr	r3, [sp, #0]
 802b252:	6001      	str	r1, [r0, #0]
 802b254:	60c3      	str	r3, [r0, #12]
 802b256:	9b01      	ldr	r3, [sp, #4]
 802b258:	7102      	strb	r2, [r0, #4]
 802b25a:	6103      	str	r3, [r0, #16]
 802b25c:	4770      	bx	lr

0802b25e <__aeabi_atexit>:
 802b25e:	460b      	mov	r3, r1
 802b260:	4601      	mov	r1, r0
 802b262:	4618      	mov	r0, r3
 802b264:	f000 b852 	b.w	802b30c <__cxa_atexit>

0802b268 <__cxa_pure_virtual>:
 802b268:	b508      	push	{r3, lr}
 802b26a:	f000 f81f 	bl	802b2ac <_ZSt9terminatev>

0802b26e <_ZdlPvj>:
 802b26e:	f000 b80f 	b.w	802b290 <_ZdlPv>

0802b272 <__cxa_guard_acquire>:
 802b272:	6803      	ldr	r3, [r0, #0]
 802b274:	07db      	lsls	r3, r3, #31
 802b276:	d406      	bmi.n	802b286 <__cxa_guard_acquire+0x14>
 802b278:	7843      	ldrb	r3, [r0, #1]
 802b27a:	b103      	cbz	r3, 802b27e <__cxa_guard_acquire+0xc>
 802b27c:	deff      	udf	#255	; 0xff
 802b27e:	2301      	movs	r3, #1
 802b280:	7043      	strb	r3, [r0, #1]
 802b282:	4618      	mov	r0, r3
 802b284:	4770      	bx	lr
 802b286:	2000      	movs	r0, #0
 802b288:	4770      	bx	lr

0802b28a <__cxa_guard_release>:
 802b28a:	2301      	movs	r3, #1
 802b28c:	6003      	str	r3, [r0, #0]
 802b28e:	4770      	bx	lr

0802b290 <_ZdlPv>:
 802b290:	f000 b88e 	b.w	802b3b0 <free>

0802b294 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b294:	b508      	push	{r3, lr}
 802b296:	4780      	blx	r0
 802b298:	f000 f80d 	bl	802b2b6 <abort>

0802b29c <_ZSt13get_terminatev>:
 802b29c:	4b02      	ldr	r3, [pc, #8]	; (802b2a8 <_ZSt13get_terminatev+0xc>)
 802b29e:	6818      	ldr	r0, [r3, #0]
 802b2a0:	f3bf 8f5b 	dmb	ish
 802b2a4:	4770      	bx	lr
 802b2a6:	bf00      	nop
 802b2a8:	200000d8 	.word	0x200000d8

0802b2ac <_ZSt9terminatev>:
 802b2ac:	b508      	push	{r3, lr}
 802b2ae:	f7ff fff5 	bl	802b29c <_ZSt13get_terminatev>
 802b2b2:	f7ff ffef 	bl	802b294 <_ZN10__cxxabiv111__terminateEPFvvE>

0802b2b6 <abort>:
 802b2b6:	b508      	push	{r3, lr}
 802b2b8:	2006      	movs	r0, #6
 802b2ba:	f000 fc3d 	bl	802bb38 <raise>
 802b2be:	2001      	movs	r0, #1
 802b2c0:	f7d8 f974 	bl	80035ac <_exit>

0802b2c4 <__assert_func>:
 802b2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b2c6:	461c      	mov	r4, r3
 802b2c8:	4b09      	ldr	r3, [pc, #36]	; (802b2f0 <__assert_func+0x2c>)
 802b2ca:	681b      	ldr	r3, [r3, #0]
 802b2cc:	4605      	mov	r5, r0
 802b2ce:	68d8      	ldr	r0, [r3, #12]
 802b2d0:	b152      	cbz	r2, 802b2e8 <__assert_func+0x24>
 802b2d2:	4b08      	ldr	r3, [pc, #32]	; (802b2f4 <__assert_func+0x30>)
 802b2d4:	9100      	str	r1, [sp, #0]
 802b2d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802b2da:	4907      	ldr	r1, [pc, #28]	; (802b2f8 <__assert_func+0x34>)
 802b2dc:	462b      	mov	r3, r5
 802b2de:	4622      	mov	r2, r4
 802b2e0:	f000 f828 	bl	802b334 <fiprintf>
 802b2e4:	f7ff ffe7 	bl	802b2b6 <abort>
 802b2e8:	4b04      	ldr	r3, [pc, #16]	; (802b2fc <__assert_func+0x38>)
 802b2ea:	461a      	mov	r2, r3
 802b2ec:	e7f2      	b.n	802b2d4 <__assert_func+0x10>
 802b2ee:	bf00      	nop
 802b2f0:	200000dc 	.word	0x200000dc
 802b2f4:	080317d4 	.word	0x080317d4
 802b2f8:	080317e1 	.word	0x080317e1
 802b2fc:	0803180f 	.word	0x0803180f

0802b300 <atexit>:
 802b300:	2300      	movs	r3, #0
 802b302:	4601      	mov	r1, r0
 802b304:	461a      	mov	r2, r3
 802b306:	4618      	mov	r0, r3
 802b308:	f000 bcf2 	b.w	802bcf0 <__register_exitproc>

0802b30c <__cxa_atexit>:
 802b30c:	b510      	push	{r4, lr}
 802b30e:	4c05      	ldr	r4, [pc, #20]	; (802b324 <__cxa_atexit+0x18>)
 802b310:	4613      	mov	r3, r2
 802b312:	b12c      	cbz	r4, 802b320 <__cxa_atexit+0x14>
 802b314:	460a      	mov	r2, r1
 802b316:	4601      	mov	r1, r0
 802b318:	2002      	movs	r0, #2
 802b31a:	f000 fce9 	bl	802bcf0 <__register_exitproc>
 802b31e:	bd10      	pop	{r4, pc}
 802b320:	4620      	mov	r0, r4
 802b322:	e7fc      	b.n	802b31e <__cxa_atexit+0x12>
 802b324:	0802bcf1 	.word	0x0802bcf1

0802b328 <__errno>:
 802b328:	4b01      	ldr	r3, [pc, #4]	; (802b330 <__errno+0x8>)
 802b32a:	6818      	ldr	r0, [r3, #0]
 802b32c:	4770      	bx	lr
 802b32e:	bf00      	nop
 802b330:	200000dc 	.word	0x200000dc

0802b334 <fiprintf>:
 802b334:	b40e      	push	{r1, r2, r3}
 802b336:	b503      	push	{r0, r1, lr}
 802b338:	4601      	mov	r1, r0
 802b33a:	ab03      	add	r3, sp, #12
 802b33c:	4805      	ldr	r0, [pc, #20]	; (802b354 <fiprintf+0x20>)
 802b33e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b342:	6800      	ldr	r0, [r0, #0]
 802b344:	9301      	str	r3, [sp, #4]
 802b346:	f000 f921 	bl	802b58c <_vfiprintf_r>
 802b34a:	b002      	add	sp, #8
 802b34c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b350:	b003      	add	sp, #12
 802b352:	4770      	bx	lr
 802b354:	200000dc 	.word	0x200000dc

0802b358 <__libc_init_array>:
 802b358:	b570      	push	{r4, r5, r6, lr}
 802b35a:	4e0d      	ldr	r6, [pc, #52]	; (802b390 <__libc_init_array+0x38>)
 802b35c:	4c0d      	ldr	r4, [pc, #52]	; (802b394 <__libc_init_array+0x3c>)
 802b35e:	1ba4      	subs	r4, r4, r6
 802b360:	10a4      	asrs	r4, r4, #2
 802b362:	2500      	movs	r5, #0
 802b364:	42a5      	cmp	r5, r4
 802b366:	d109      	bne.n	802b37c <__libc_init_array+0x24>
 802b368:	4e0b      	ldr	r6, [pc, #44]	; (802b398 <__libc_init_array+0x40>)
 802b36a:	4c0c      	ldr	r4, [pc, #48]	; (802b39c <__libc_init_array+0x44>)
 802b36c:	f000 ffb0 	bl	802c2d0 <_init>
 802b370:	1ba4      	subs	r4, r4, r6
 802b372:	10a4      	asrs	r4, r4, #2
 802b374:	2500      	movs	r5, #0
 802b376:	42a5      	cmp	r5, r4
 802b378:	d105      	bne.n	802b386 <__libc_init_array+0x2e>
 802b37a:	bd70      	pop	{r4, r5, r6, pc}
 802b37c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b380:	4798      	blx	r3
 802b382:	3501      	adds	r5, #1
 802b384:	e7ee      	b.n	802b364 <__libc_init_array+0xc>
 802b386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b38a:	4798      	blx	r3
 802b38c:	3501      	adds	r5, #1
 802b38e:	e7f2      	b.n	802b376 <__libc_init_array+0x1e>
 802b390:	080882b4 	.word	0x080882b4
 802b394:	080882b4 	.word	0x080882b4
 802b398:	080882b4 	.word	0x080882b4
 802b39c:	080882c8 	.word	0x080882c8

0802b3a0 <malloc>:
 802b3a0:	4b02      	ldr	r3, [pc, #8]	; (802b3ac <malloc+0xc>)
 802b3a2:	4601      	mov	r1, r0
 802b3a4:	6818      	ldr	r0, [r3, #0]
 802b3a6:	f000 b86d 	b.w	802b484 <_malloc_r>
 802b3aa:	bf00      	nop
 802b3ac:	200000dc 	.word	0x200000dc

0802b3b0 <free>:
 802b3b0:	4b02      	ldr	r3, [pc, #8]	; (802b3bc <free+0xc>)
 802b3b2:	4601      	mov	r1, r0
 802b3b4:	6818      	ldr	r0, [r3, #0]
 802b3b6:	f000 b817 	b.w	802b3e8 <_free_r>
 802b3ba:	bf00      	nop
 802b3bc:	200000dc 	.word	0x200000dc

0802b3c0 <memcpy>:
 802b3c0:	b510      	push	{r4, lr}
 802b3c2:	1e43      	subs	r3, r0, #1
 802b3c4:	440a      	add	r2, r1
 802b3c6:	4291      	cmp	r1, r2
 802b3c8:	d100      	bne.n	802b3cc <memcpy+0xc>
 802b3ca:	bd10      	pop	{r4, pc}
 802b3cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b3d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b3d4:	e7f7      	b.n	802b3c6 <memcpy+0x6>

0802b3d6 <memset>:
 802b3d6:	4402      	add	r2, r0
 802b3d8:	4603      	mov	r3, r0
 802b3da:	4293      	cmp	r3, r2
 802b3dc:	d100      	bne.n	802b3e0 <memset+0xa>
 802b3de:	4770      	bx	lr
 802b3e0:	f803 1b01 	strb.w	r1, [r3], #1
 802b3e4:	e7f9      	b.n	802b3da <memset+0x4>
	...

0802b3e8 <_free_r>:
 802b3e8:	b538      	push	{r3, r4, r5, lr}
 802b3ea:	4605      	mov	r5, r0
 802b3ec:	2900      	cmp	r1, #0
 802b3ee:	d045      	beq.n	802b47c <_free_r+0x94>
 802b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b3f4:	1f0c      	subs	r4, r1, #4
 802b3f6:	2b00      	cmp	r3, #0
 802b3f8:	bfb8      	it	lt
 802b3fa:	18e4      	addlt	r4, r4, r3
 802b3fc:	f000 feba 	bl	802c174 <__malloc_lock>
 802b400:	4a1f      	ldr	r2, [pc, #124]	; (802b480 <_free_r+0x98>)
 802b402:	6813      	ldr	r3, [r2, #0]
 802b404:	4610      	mov	r0, r2
 802b406:	b933      	cbnz	r3, 802b416 <_free_r+0x2e>
 802b408:	6063      	str	r3, [r4, #4]
 802b40a:	6014      	str	r4, [r2, #0]
 802b40c:	4628      	mov	r0, r5
 802b40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b412:	f000 beb0 	b.w	802c176 <__malloc_unlock>
 802b416:	42a3      	cmp	r3, r4
 802b418:	d90c      	bls.n	802b434 <_free_r+0x4c>
 802b41a:	6821      	ldr	r1, [r4, #0]
 802b41c:	1862      	adds	r2, r4, r1
 802b41e:	4293      	cmp	r3, r2
 802b420:	bf04      	itt	eq
 802b422:	681a      	ldreq	r2, [r3, #0]
 802b424:	685b      	ldreq	r3, [r3, #4]
 802b426:	6063      	str	r3, [r4, #4]
 802b428:	bf04      	itt	eq
 802b42a:	1852      	addeq	r2, r2, r1
 802b42c:	6022      	streq	r2, [r4, #0]
 802b42e:	6004      	str	r4, [r0, #0]
 802b430:	e7ec      	b.n	802b40c <_free_r+0x24>
 802b432:	4613      	mov	r3, r2
 802b434:	685a      	ldr	r2, [r3, #4]
 802b436:	b10a      	cbz	r2, 802b43c <_free_r+0x54>
 802b438:	42a2      	cmp	r2, r4
 802b43a:	d9fa      	bls.n	802b432 <_free_r+0x4a>
 802b43c:	6819      	ldr	r1, [r3, #0]
 802b43e:	1858      	adds	r0, r3, r1
 802b440:	42a0      	cmp	r0, r4
 802b442:	d10b      	bne.n	802b45c <_free_r+0x74>
 802b444:	6820      	ldr	r0, [r4, #0]
 802b446:	4401      	add	r1, r0
 802b448:	1858      	adds	r0, r3, r1
 802b44a:	4282      	cmp	r2, r0
 802b44c:	6019      	str	r1, [r3, #0]
 802b44e:	d1dd      	bne.n	802b40c <_free_r+0x24>
 802b450:	6810      	ldr	r0, [r2, #0]
 802b452:	6852      	ldr	r2, [r2, #4]
 802b454:	605a      	str	r2, [r3, #4]
 802b456:	4401      	add	r1, r0
 802b458:	6019      	str	r1, [r3, #0]
 802b45a:	e7d7      	b.n	802b40c <_free_r+0x24>
 802b45c:	d902      	bls.n	802b464 <_free_r+0x7c>
 802b45e:	230c      	movs	r3, #12
 802b460:	602b      	str	r3, [r5, #0]
 802b462:	e7d3      	b.n	802b40c <_free_r+0x24>
 802b464:	6820      	ldr	r0, [r4, #0]
 802b466:	1821      	adds	r1, r4, r0
 802b468:	428a      	cmp	r2, r1
 802b46a:	bf04      	itt	eq
 802b46c:	6811      	ldreq	r1, [r2, #0]
 802b46e:	6852      	ldreq	r2, [r2, #4]
 802b470:	6062      	str	r2, [r4, #4]
 802b472:	bf04      	itt	eq
 802b474:	1809      	addeq	r1, r1, r0
 802b476:	6021      	streq	r1, [r4, #0]
 802b478:	605c      	str	r4, [r3, #4]
 802b47a:	e7c7      	b.n	802b40c <_free_r+0x24>
 802b47c:	bd38      	pop	{r3, r4, r5, pc}
 802b47e:	bf00      	nop
 802b480:	2000c0ec 	.word	0x2000c0ec

0802b484 <_malloc_r>:
 802b484:	b570      	push	{r4, r5, r6, lr}
 802b486:	1ccd      	adds	r5, r1, #3
 802b488:	f025 0503 	bic.w	r5, r5, #3
 802b48c:	3508      	adds	r5, #8
 802b48e:	2d0c      	cmp	r5, #12
 802b490:	bf38      	it	cc
 802b492:	250c      	movcc	r5, #12
 802b494:	2d00      	cmp	r5, #0
 802b496:	4606      	mov	r6, r0
 802b498:	db01      	blt.n	802b49e <_malloc_r+0x1a>
 802b49a:	42a9      	cmp	r1, r5
 802b49c:	d903      	bls.n	802b4a6 <_malloc_r+0x22>
 802b49e:	230c      	movs	r3, #12
 802b4a0:	6033      	str	r3, [r6, #0]
 802b4a2:	2000      	movs	r0, #0
 802b4a4:	bd70      	pop	{r4, r5, r6, pc}
 802b4a6:	f000 fe65 	bl	802c174 <__malloc_lock>
 802b4aa:	4a21      	ldr	r2, [pc, #132]	; (802b530 <_malloc_r+0xac>)
 802b4ac:	6814      	ldr	r4, [r2, #0]
 802b4ae:	4621      	mov	r1, r4
 802b4b0:	b991      	cbnz	r1, 802b4d8 <_malloc_r+0x54>
 802b4b2:	4c20      	ldr	r4, [pc, #128]	; (802b534 <_malloc_r+0xb0>)
 802b4b4:	6823      	ldr	r3, [r4, #0]
 802b4b6:	b91b      	cbnz	r3, 802b4c0 <_malloc_r+0x3c>
 802b4b8:	4630      	mov	r0, r6
 802b4ba:	f000 fb05 	bl	802bac8 <_sbrk_r>
 802b4be:	6020      	str	r0, [r4, #0]
 802b4c0:	4629      	mov	r1, r5
 802b4c2:	4630      	mov	r0, r6
 802b4c4:	f000 fb00 	bl	802bac8 <_sbrk_r>
 802b4c8:	1c43      	adds	r3, r0, #1
 802b4ca:	d124      	bne.n	802b516 <_malloc_r+0x92>
 802b4cc:	230c      	movs	r3, #12
 802b4ce:	6033      	str	r3, [r6, #0]
 802b4d0:	4630      	mov	r0, r6
 802b4d2:	f000 fe50 	bl	802c176 <__malloc_unlock>
 802b4d6:	e7e4      	b.n	802b4a2 <_malloc_r+0x1e>
 802b4d8:	680b      	ldr	r3, [r1, #0]
 802b4da:	1b5b      	subs	r3, r3, r5
 802b4dc:	d418      	bmi.n	802b510 <_malloc_r+0x8c>
 802b4de:	2b0b      	cmp	r3, #11
 802b4e0:	d90f      	bls.n	802b502 <_malloc_r+0x7e>
 802b4e2:	600b      	str	r3, [r1, #0]
 802b4e4:	50cd      	str	r5, [r1, r3]
 802b4e6:	18cc      	adds	r4, r1, r3
 802b4e8:	4630      	mov	r0, r6
 802b4ea:	f000 fe44 	bl	802c176 <__malloc_unlock>
 802b4ee:	f104 000b 	add.w	r0, r4, #11
 802b4f2:	1d23      	adds	r3, r4, #4
 802b4f4:	f020 0007 	bic.w	r0, r0, #7
 802b4f8:	1ac3      	subs	r3, r0, r3
 802b4fa:	d0d3      	beq.n	802b4a4 <_malloc_r+0x20>
 802b4fc:	425a      	negs	r2, r3
 802b4fe:	50e2      	str	r2, [r4, r3]
 802b500:	e7d0      	b.n	802b4a4 <_malloc_r+0x20>
 802b502:	428c      	cmp	r4, r1
 802b504:	684b      	ldr	r3, [r1, #4]
 802b506:	bf16      	itet	ne
 802b508:	6063      	strne	r3, [r4, #4]
 802b50a:	6013      	streq	r3, [r2, #0]
 802b50c:	460c      	movne	r4, r1
 802b50e:	e7eb      	b.n	802b4e8 <_malloc_r+0x64>
 802b510:	460c      	mov	r4, r1
 802b512:	6849      	ldr	r1, [r1, #4]
 802b514:	e7cc      	b.n	802b4b0 <_malloc_r+0x2c>
 802b516:	1cc4      	adds	r4, r0, #3
 802b518:	f024 0403 	bic.w	r4, r4, #3
 802b51c:	42a0      	cmp	r0, r4
 802b51e:	d005      	beq.n	802b52c <_malloc_r+0xa8>
 802b520:	1a21      	subs	r1, r4, r0
 802b522:	4630      	mov	r0, r6
 802b524:	f000 fad0 	bl	802bac8 <_sbrk_r>
 802b528:	3001      	adds	r0, #1
 802b52a:	d0cf      	beq.n	802b4cc <_malloc_r+0x48>
 802b52c:	6025      	str	r5, [r4, #0]
 802b52e:	e7db      	b.n	802b4e8 <_malloc_r+0x64>
 802b530:	2000c0ec 	.word	0x2000c0ec
 802b534:	2000c0f0 	.word	0x2000c0f0

0802b538 <__sfputc_r>:
 802b538:	6893      	ldr	r3, [r2, #8]
 802b53a:	3b01      	subs	r3, #1
 802b53c:	2b00      	cmp	r3, #0
 802b53e:	b410      	push	{r4}
 802b540:	6093      	str	r3, [r2, #8]
 802b542:	da08      	bge.n	802b556 <__sfputc_r+0x1e>
 802b544:	6994      	ldr	r4, [r2, #24]
 802b546:	42a3      	cmp	r3, r4
 802b548:	db01      	blt.n	802b54e <__sfputc_r+0x16>
 802b54a:	290a      	cmp	r1, #10
 802b54c:	d103      	bne.n	802b556 <__sfputc_r+0x1e>
 802b54e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b552:	f000 bb0d 	b.w	802bb70 <__swbuf_r>
 802b556:	6813      	ldr	r3, [r2, #0]
 802b558:	1c58      	adds	r0, r3, #1
 802b55a:	6010      	str	r0, [r2, #0]
 802b55c:	7019      	strb	r1, [r3, #0]
 802b55e:	4608      	mov	r0, r1
 802b560:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b564:	4770      	bx	lr

0802b566 <__sfputs_r>:
 802b566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b568:	4606      	mov	r6, r0
 802b56a:	460f      	mov	r7, r1
 802b56c:	4614      	mov	r4, r2
 802b56e:	18d5      	adds	r5, r2, r3
 802b570:	42ac      	cmp	r4, r5
 802b572:	d101      	bne.n	802b578 <__sfputs_r+0x12>
 802b574:	2000      	movs	r0, #0
 802b576:	e007      	b.n	802b588 <__sfputs_r+0x22>
 802b578:	463a      	mov	r2, r7
 802b57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b57e:	4630      	mov	r0, r6
 802b580:	f7ff ffda 	bl	802b538 <__sfputc_r>
 802b584:	1c43      	adds	r3, r0, #1
 802b586:	d1f3      	bne.n	802b570 <__sfputs_r+0xa>
 802b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b58c <_vfiprintf_r>:
 802b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b590:	460c      	mov	r4, r1
 802b592:	b09d      	sub	sp, #116	; 0x74
 802b594:	4617      	mov	r7, r2
 802b596:	461d      	mov	r5, r3
 802b598:	4606      	mov	r6, r0
 802b59a:	b118      	cbz	r0, 802b5a4 <_vfiprintf_r+0x18>
 802b59c:	6983      	ldr	r3, [r0, #24]
 802b59e:	b90b      	cbnz	r3, 802b5a4 <_vfiprintf_r+0x18>
 802b5a0:	f000 fcfa 	bl	802bf98 <__sinit>
 802b5a4:	4b7c      	ldr	r3, [pc, #496]	; (802b798 <_vfiprintf_r+0x20c>)
 802b5a6:	429c      	cmp	r4, r3
 802b5a8:	d158      	bne.n	802b65c <_vfiprintf_r+0xd0>
 802b5aa:	6874      	ldr	r4, [r6, #4]
 802b5ac:	89a3      	ldrh	r3, [r4, #12]
 802b5ae:	0718      	lsls	r0, r3, #28
 802b5b0:	d55e      	bpl.n	802b670 <_vfiprintf_r+0xe4>
 802b5b2:	6923      	ldr	r3, [r4, #16]
 802b5b4:	2b00      	cmp	r3, #0
 802b5b6:	d05b      	beq.n	802b670 <_vfiprintf_r+0xe4>
 802b5b8:	2300      	movs	r3, #0
 802b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 802b5bc:	2320      	movs	r3, #32
 802b5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b5c2:	2330      	movs	r3, #48	; 0x30
 802b5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b5c8:	9503      	str	r5, [sp, #12]
 802b5ca:	f04f 0b01 	mov.w	fp, #1
 802b5ce:	46b8      	mov	r8, r7
 802b5d0:	4645      	mov	r5, r8
 802b5d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b5d6:	b10b      	cbz	r3, 802b5dc <_vfiprintf_r+0x50>
 802b5d8:	2b25      	cmp	r3, #37	; 0x25
 802b5da:	d154      	bne.n	802b686 <_vfiprintf_r+0xfa>
 802b5dc:	ebb8 0a07 	subs.w	sl, r8, r7
 802b5e0:	d00b      	beq.n	802b5fa <_vfiprintf_r+0x6e>
 802b5e2:	4653      	mov	r3, sl
 802b5e4:	463a      	mov	r2, r7
 802b5e6:	4621      	mov	r1, r4
 802b5e8:	4630      	mov	r0, r6
 802b5ea:	f7ff ffbc 	bl	802b566 <__sfputs_r>
 802b5ee:	3001      	adds	r0, #1
 802b5f0:	f000 80c2 	beq.w	802b778 <_vfiprintf_r+0x1ec>
 802b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b5f6:	4453      	add	r3, sl
 802b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 802b5fa:	f898 3000 	ldrb.w	r3, [r8]
 802b5fe:	2b00      	cmp	r3, #0
 802b600:	f000 80ba 	beq.w	802b778 <_vfiprintf_r+0x1ec>
 802b604:	2300      	movs	r3, #0
 802b606:	f04f 32ff 	mov.w	r2, #4294967295
 802b60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b60e:	9304      	str	r3, [sp, #16]
 802b610:	9307      	str	r3, [sp, #28]
 802b612:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b616:	931a      	str	r3, [sp, #104]	; 0x68
 802b618:	46a8      	mov	r8, r5
 802b61a:	2205      	movs	r2, #5
 802b61c:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b620:	485e      	ldr	r0, [pc, #376]	; (802b79c <_vfiprintf_r+0x210>)
 802b622:	f7d4 fdf5 	bl	8000210 <memchr>
 802b626:	9b04      	ldr	r3, [sp, #16]
 802b628:	bb78      	cbnz	r0, 802b68a <_vfiprintf_r+0xfe>
 802b62a:	06d9      	lsls	r1, r3, #27
 802b62c:	bf44      	itt	mi
 802b62e:	2220      	movmi	r2, #32
 802b630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b634:	071a      	lsls	r2, r3, #28
 802b636:	bf44      	itt	mi
 802b638:	222b      	movmi	r2, #43	; 0x2b
 802b63a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b63e:	782a      	ldrb	r2, [r5, #0]
 802b640:	2a2a      	cmp	r2, #42	; 0x2a
 802b642:	d02a      	beq.n	802b69a <_vfiprintf_r+0x10e>
 802b644:	9a07      	ldr	r2, [sp, #28]
 802b646:	46a8      	mov	r8, r5
 802b648:	2000      	movs	r0, #0
 802b64a:	250a      	movs	r5, #10
 802b64c:	4641      	mov	r1, r8
 802b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b652:	3b30      	subs	r3, #48	; 0x30
 802b654:	2b09      	cmp	r3, #9
 802b656:	d969      	bls.n	802b72c <_vfiprintf_r+0x1a0>
 802b658:	b360      	cbz	r0, 802b6b4 <_vfiprintf_r+0x128>
 802b65a:	e024      	b.n	802b6a6 <_vfiprintf_r+0x11a>
 802b65c:	4b50      	ldr	r3, [pc, #320]	; (802b7a0 <_vfiprintf_r+0x214>)
 802b65e:	429c      	cmp	r4, r3
 802b660:	d101      	bne.n	802b666 <_vfiprintf_r+0xda>
 802b662:	68b4      	ldr	r4, [r6, #8]
 802b664:	e7a2      	b.n	802b5ac <_vfiprintf_r+0x20>
 802b666:	4b4f      	ldr	r3, [pc, #316]	; (802b7a4 <_vfiprintf_r+0x218>)
 802b668:	429c      	cmp	r4, r3
 802b66a:	bf08      	it	eq
 802b66c:	68f4      	ldreq	r4, [r6, #12]
 802b66e:	e79d      	b.n	802b5ac <_vfiprintf_r+0x20>
 802b670:	4621      	mov	r1, r4
 802b672:	4630      	mov	r0, r6
 802b674:	f000 face 	bl	802bc14 <__swsetup_r>
 802b678:	2800      	cmp	r0, #0
 802b67a:	d09d      	beq.n	802b5b8 <_vfiprintf_r+0x2c>
 802b67c:	f04f 30ff 	mov.w	r0, #4294967295
 802b680:	b01d      	add	sp, #116	; 0x74
 802b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b686:	46a8      	mov	r8, r5
 802b688:	e7a2      	b.n	802b5d0 <_vfiprintf_r+0x44>
 802b68a:	4a44      	ldr	r2, [pc, #272]	; (802b79c <_vfiprintf_r+0x210>)
 802b68c:	1a80      	subs	r0, r0, r2
 802b68e:	fa0b f000 	lsl.w	r0, fp, r0
 802b692:	4318      	orrs	r0, r3
 802b694:	9004      	str	r0, [sp, #16]
 802b696:	4645      	mov	r5, r8
 802b698:	e7be      	b.n	802b618 <_vfiprintf_r+0x8c>
 802b69a:	9a03      	ldr	r2, [sp, #12]
 802b69c:	1d11      	adds	r1, r2, #4
 802b69e:	6812      	ldr	r2, [r2, #0]
 802b6a0:	9103      	str	r1, [sp, #12]
 802b6a2:	2a00      	cmp	r2, #0
 802b6a4:	db01      	blt.n	802b6aa <_vfiprintf_r+0x11e>
 802b6a6:	9207      	str	r2, [sp, #28]
 802b6a8:	e004      	b.n	802b6b4 <_vfiprintf_r+0x128>
 802b6aa:	4252      	negs	r2, r2
 802b6ac:	f043 0302 	orr.w	r3, r3, #2
 802b6b0:	9207      	str	r2, [sp, #28]
 802b6b2:	9304      	str	r3, [sp, #16]
 802b6b4:	f898 3000 	ldrb.w	r3, [r8]
 802b6b8:	2b2e      	cmp	r3, #46	; 0x2e
 802b6ba:	d10e      	bne.n	802b6da <_vfiprintf_r+0x14e>
 802b6bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b6c0:	2b2a      	cmp	r3, #42	; 0x2a
 802b6c2:	d138      	bne.n	802b736 <_vfiprintf_r+0x1aa>
 802b6c4:	9b03      	ldr	r3, [sp, #12]
 802b6c6:	1d1a      	adds	r2, r3, #4
 802b6c8:	681b      	ldr	r3, [r3, #0]
 802b6ca:	9203      	str	r2, [sp, #12]
 802b6cc:	2b00      	cmp	r3, #0
 802b6ce:	bfb8      	it	lt
 802b6d0:	f04f 33ff 	movlt.w	r3, #4294967295
 802b6d4:	f108 0802 	add.w	r8, r8, #2
 802b6d8:	9305      	str	r3, [sp, #20]
 802b6da:	4d33      	ldr	r5, [pc, #204]	; (802b7a8 <_vfiprintf_r+0x21c>)
 802b6dc:	f898 1000 	ldrb.w	r1, [r8]
 802b6e0:	2203      	movs	r2, #3
 802b6e2:	4628      	mov	r0, r5
 802b6e4:	f7d4 fd94 	bl	8000210 <memchr>
 802b6e8:	b140      	cbz	r0, 802b6fc <_vfiprintf_r+0x170>
 802b6ea:	2340      	movs	r3, #64	; 0x40
 802b6ec:	1b40      	subs	r0, r0, r5
 802b6ee:	fa03 f000 	lsl.w	r0, r3, r0
 802b6f2:	9b04      	ldr	r3, [sp, #16]
 802b6f4:	4303      	orrs	r3, r0
 802b6f6:	f108 0801 	add.w	r8, r8, #1
 802b6fa:	9304      	str	r3, [sp, #16]
 802b6fc:	f898 1000 	ldrb.w	r1, [r8]
 802b700:	482a      	ldr	r0, [pc, #168]	; (802b7ac <_vfiprintf_r+0x220>)
 802b702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b706:	2206      	movs	r2, #6
 802b708:	f108 0701 	add.w	r7, r8, #1
 802b70c:	f7d4 fd80 	bl	8000210 <memchr>
 802b710:	2800      	cmp	r0, #0
 802b712:	d037      	beq.n	802b784 <_vfiprintf_r+0x1f8>
 802b714:	4b26      	ldr	r3, [pc, #152]	; (802b7b0 <_vfiprintf_r+0x224>)
 802b716:	bb1b      	cbnz	r3, 802b760 <_vfiprintf_r+0x1d4>
 802b718:	9b03      	ldr	r3, [sp, #12]
 802b71a:	3307      	adds	r3, #7
 802b71c:	f023 0307 	bic.w	r3, r3, #7
 802b720:	3308      	adds	r3, #8
 802b722:	9303      	str	r3, [sp, #12]
 802b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b726:	444b      	add	r3, r9
 802b728:	9309      	str	r3, [sp, #36]	; 0x24
 802b72a:	e750      	b.n	802b5ce <_vfiprintf_r+0x42>
 802b72c:	fb05 3202 	mla	r2, r5, r2, r3
 802b730:	2001      	movs	r0, #1
 802b732:	4688      	mov	r8, r1
 802b734:	e78a      	b.n	802b64c <_vfiprintf_r+0xc0>
 802b736:	2300      	movs	r3, #0
 802b738:	f108 0801 	add.w	r8, r8, #1
 802b73c:	9305      	str	r3, [sp, #20]
 802b73e:	4619      	mov	r1, r3
 802b740:	250a      	movs	r5, #10
 802b742:	4640      	mov	r0, r8
 802b744:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b748:	3a30      	subs	r2, #48	; 0x30
 802b74a:	2a09      	cmp	r2, #9
 802b74c:	d903      	bls.n	802b756 <_vfiprintf_r+0x1ca>
 802b74e:	2b00      	cmp	r3, #0
 802b750:	d0c3      	beq.n	802b6da <_vfiprintf_r+0x14e>
 802b752:	9105      	str	r1, [sp, #20]
 802b754:	e7c1      	b.n	802b6da <_vfiprintf_r+0x14e>
 802b756:	fb05 2101 	mla	r1, r5, r1, r2
 802b75a:	2301      	movs	r3, #1
 802b75c:	4680      	mov	r8, r0
 802b75e:	e7f0      	b.n	802b742 <_vfiprintf_r+0x1b6>
 802b760:	ab03      	add	r3, sp, #12
 802b762:	9300      	str	r3, [sp, #0]
 802b764:	4622      	mov	r2, r4
 802b766:	4b13      	ldr	r3, [pc, #76]	; (802b7b4 <_vfiprintf_r+0x228>)
 802b768:	a904      	add	r1, sp, #16
 802b76a:	4630      	mov	r0, r6
 802b76c:	f3af 8000 	nop.w
 802b770:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b774:	4681      	mov	r9, r0
 802b776:	d1d5      	bne.n	802b724 <_vfiprintf_r+0x198>
 802b778:	89a3      	ldrh	r3, [r4, #12]
 802b77a:	065b      	lsls	r3, r3, #25
 802b77c:	f53f af7e 	bmi.w	802b67c <_vfiprintf_r+0xf0>
 802b780:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b782:	e77d      	b.n	802b680 <_vfiprintf_r+0xf4>
 802b784:	ab03      	add	r3, sp, #12
 802b786:	9300      	str	r3, [sp, #0]
 802b788:	4622      	mov	r2, r4
 802b78a:	4b0a      	ldr	r3, [pc, #40]	; (802b7b4 <_vfiprintf_r+0x228>)
 802b78c:	a904      	add	r1, sp, #16
 802b78e:	4630      	mov	r0, r6
 802b790:	f000 f888 	bl	802b8a4 <_printf_i>
 802b794:	e7ec      	b.n	802b770 <_vfiprintf_r+0x1e4>
 802b796:	bf00      	nop
 802b798:	0803186c 	.word	0x0803186c
 802b79c:	08031814 	.word	0x08031814
 802b7a0:	0803188c 	.word	0x0803188c
 802b7a4:	0803184c 	.word	0x0803184c
 802b7a8:	0803181a 	.word	0x0803181a
 802b7ac:	0803181e 	.word	0x0803181e
 802b7b0:	00000000 	.word	0x00000000
 802b7b4:	0802b567 	.word	0x0802b567

0802b7b8 <_printf_common>:
 802b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b7bc:	4691      	mov	r9, r2
 802b7be:	461f      	mov	r7, r3
 802b7c0:	688a      	ldr	r2, [r1, #8]
 802b7c2:	690b      	ldr	r3, [r1, #16]
 802b7c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b7c8:	4293      	cmp	r3, r2
 802b7ca:	bfb8      	it	lt
 802b7cc:	4613      	movlt	r3, r2
 802b7ce:	f8c9 3000 	str.w	r3, [r9]
 802b7d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b7d6:	4606      	mov	r6, r0
 802b7d8:	460c      	mov	r4, r1
 802b7da:	b112      	cbz	r2, 802b7e2 <_printf_common+0x2a>
 802b7dc:	3301      	adds	r3, #1
 802b7de:	f8c9 3000 	str.w	r3, [r9]
 802b7e2:	6823      	ldr	r3, [r4, #0]
 802b7e4:	0699      	lsls	r1, r3, #26
 802b7e6:	bf42      	ittt	mi
 802b7e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b7ec:	3302      	addmi	r3, #2
 802b7ee:	f8c9 3000 	strmi.w	r3, [r9]
 802b7f2:	6825      	ldr	r5, [r4, #0]
 802b7f4:	f015 0506 	ands.w	r5, r5, #6
 802b7f8:	d107      	bne.n	802b80a <_printf_common+0x52>
 802b7fa:	f104 0a19 	add.w	sl, r4, #25
 802b7fe:	68e3      	ldr	r3, [r4, #12]
 802b800:	f8d9 2000 	ldr.w	r2, [r9]
 802b804:	1a9b      	subs	r3, r3, r2
 802b806:	42ab      	cmp	r3, r5
 802b808:	dc28      	bgt.n	802b85c <_printf_common+0xa4>
 802b80a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b80e:	6822      	ldr	r2, [r4, #0]
 802b810:	3300      	adds	r3, #0
 802b812:	bf18      	it	ne
 802b814:	2301      	movne	r3, #1
 802b816:	0692      	lsls	r2, r2, #26
 802b818:	d42d      	bmi.n	802b876 <_printf_common+0xbe>
 802b81a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b81e:	4639      	mov	r1, r7
 802b820:	4630      	mov	r0, r6
 802b822:	47c0      	blx	r8
 802b824:	3001      	adds	r0, #1
 802b826:	d020      	beq.n	802b86a <_printf_common+0xb2>
 802b828:	6823      	ldr	r3, [r4, #0]
 802b82a:	68e5      	ldr	r5, [r4, #12]
 802b82c:	f8d9 2000 	ldr.w	r2, [r9]
 802b830:	f003 0306 	and.w	r3, r3, #6
 802b834:	2b04      	cmp	r3, #4
 802b836:	bf08      	it	eq
 802b838:	1aad      	subeq	r5, r5, r2
 802b83a:	68a3      	ldr	r3, [r4, #8]
 802b83c:	6922      	ldr	r2, [r4, #16]
 802b83e:	bf0c      	ite	eq
 802b840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b844:	2500      	movne	r5, #0
 802b846:	4293      	cmp	r3, r2
 802b848:	bfc4      	itt	gt
 802b84a:	1a9b      	subgt	r3, r3, r2
 802b84c:	18ed      	addgt	r5, r5, r3
 802b84e:	f04f 0900 	mov.w	r9, #0
 802b852:	341a      	adds	r4, #26
 802b854:	454d      	cmp	r5, r9
 802b856:	d11a      	bne.n	802b88e <_printf_common+0xd6>
 802b858:	2000      	movs	r0, #0
 802b85a:	e008      	b.n	802b86e <_printf_common+0xb6>
 802b85c:	2301      	movs	r3, #1
 802b85e:	4652      	mov	r2, sl
 802b860:	4639      	mov	r1, r7
 802b862:	4630      	mov	r0, r6
 802b864:	47c0      	blx	r8
 802b866:	3001      	adds	r0, #1
 802b868:	d103      	bne.n	802b872 <_printf_common+0xba>
 802b86a:	f04f 30ff 	mov.w	r0, #4294967295
 802b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b872:	3501      	adds	r5, #1
 802b874:	e7c3      	b.n	802b7fe <_printf_common+0x46>
 802b876:	18e1      	adds	r1, r4, r3
 802b878:	1c5a      	adds	r2, r3, #1
 802b87a:	2030      	movs	r0, #48	; 0x30
 802b87c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b880:	4422      	add	r2, r4
 802b882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b886:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b88a:	3302      	adds	r3, #2
 802b88c:	e7c5      	b.n	802b81a <_printf_common+0x62>
 802b88e:	2301      	movs	r3, #1
 802b890:	4622      	mov	r2, r4
 802b892:	4639      	mov	r1, r7
 802b894:	4630      	mov	r0, r6
 802b896:	47c0      	blx	r8
 802b898:	3001      	adds	r0, #1
 802b89a:	d0e6      	beq.n	802b86a <_printf_common+0xb2>
 802b89c:	f109 0901 	add.w	r9, r9, #1
 802b8a0:	e7d8      	b.n	802b854 <_printf_common+0x9c>
	...

0802b8a4 <_printf_i>:
 802b8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b8a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802b8ac:	460c      	mov	r4, r1
 802b8ae:	7e09      	ldrb	r1, [r1, #24]
 802b8b0:	b085      	sub	sp, #20
 802b8b2:	296e      	cmp	r1, #110	; 0x6e
 802b8b4:	4617      	mov	r7, r2
 802b8b6:	4606      	mov	r6, r0
 802b8b8:	4698      	mov	r8, r3
 802b8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b8bc:	f000 80b3 	beq.w	802ba26 <_printf_i+0x182>
 802b8c0:	d822      	bhi.n	802b908 <_printf_i+0x64>
 802b8c2:	2963      	cmp	r1, #99	; 0x63
 802b8c4:	d036      	beq.n	802b934 <_printf_i+0x90>
 802b8c6:	d80a      	bhi.n	802b8de <_printf_i+0x3a>
 802b8c8:	2900      	cmp	r1, #0
 802b8ca:	f000 80b9 	beq.w	802ba40 <_printf_i+0x19c>
 802b8ce:	2958      	cmp	r1, #88	; 0x58
 802b8d0:	f000 8083 	beq.w	802b9da <_printf_i+0x136>
 802b8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b8d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802b8dc:	e032      	b.n	802b944 <_printf_i+0xa0>
 802b8de:	2964      	cmp	r1, #100	; 0x64
 802b8e0:	d001      	beq.n	802b8e6 <_printf_i+0x42>
 802b8e2:	2969      	cmp	r1, #105	; 0x69
 802b8e4:	d1f6      	bne.n	802b8d4 <_printf_i+0x30>
 802b8e6:	6820      	ldr	r0, [r4, #0]
 802b8e8:	6813      	ldr	r3, [r2, #0]
 802b8ea:	0605      	lsls	r5, r0, #24
 802b8ec:	f103 0104 	add.w	r1, r3, #4
 802b8f0:	d52a      	bpl.n	802b948 <_printf_i+0xa4>
 802b8f2:	681b      	ldr	r3, [r3, #0]
 802b8f4:	6011      	str	r1, [r2, #0]
 802b8f6:	2b00      	cmp	r3, #0
 802b8f8:	da03      	bge.n	802b902 <_printf_i+0x5e>
 802b8fa:	222d      	movs	r2, #45	; 0x2d
 802b8fc:	425b      	negs	r3, r3
 802b8fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802b902:	486f      	ldr	r0, [pc, #444]	; (802bac0 <_printf_i+0x21c>)
 802b904:	220a      	movs	r2, #10
 802b906:	e039      	b.n	802b97c <_printf_i+0xd8>
 802b908:	2973      	cmp	r1, #115	; 0x73
 802b90a:	f000 809d 	beq.w	802ba48 <_printf_i+0x1a4>
 802b90e:	d808      	bhi.n	802b922 <_printf_i+0x7e>
 802b910:	296f      	cmp	r1, #111	; 0x6f
 802b912:	d020      	beq.n	802b956 <_printf_i+0xb2>
 802b914:	2970      	cmp	r1, #112	; 0x70
 802b916:	d1dd      	bne.n	802b8d4 <_printf_i+0x30>
 802b918:	6823      	ldr	r3, [r4, #0]
 802b91a:	f043 0320 	orr.w	r3, r3, #32
 802b91e:	6023      	str	r3, [r4, #0]
 802b920:	e003      	b.n	802b92a <_printf_i+0x86>
 802b922:	2975      	cmp	r1, #117	; 0x75
 802b924:	d017      	beq.n	802b956 <_printf_i+0xb2>
 802b926:	2978      	cmp	r1, #120	; 0x78
 802b928:	d1d4      	bne.n	802b8d4 <_printf_i+0x30>
 802b92a:	2378      	movs	r3, #120	; 0x78
 802b92c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b930:	4864      	ldr	r0, [pc, #400]	; (802bac4 <_printf_i+0x220>)
 802b932:	e055      	b.n	802b9e0 <_printf_i+0x13c>
 802b934:	6813      	ldr	r3, [r2, #0]
 802b936:	1d19      	adds	r1, r3, #4
 802b938:	681b      	ldr	r3, [r3, #0]
 802b93a:	6011      	str	r1, [r2, #0]
 802b93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b944:	2301      	movs	r3, #1
 802b946:	e08c      	b.n	802ba62 <_printf_i+0x1be>
 802b948:	681b      	ldr	r3, [r3, #0]
 802b94a:	6011      	str	r1, [r2, #0]
 802b94c:	f010 0f40 	tst.w	r0, #64	; 0x40
 802b950:	bf18      	it	ne
 802b952:	b21b      	sxthne	r3, r3
 802b954:	e7cf      	b.n	802b8f6 <_printf_i+0x52>
 802b956:	6813      	ldr	r3, [r2, #0]
 802b958:	6825      	ldr	r5, [r4, #0]
 802b95a:	1d18      	adds	r0, r3, #4
 802b95c:	6010      	str	r0, [r2, #0]
 802b95e:	0628      	lsls	r0, r5, #24
 802b960:	d501      	bpl.n	802b966 <_printf_i+0xc2>
 802b962:	681b      	ldr	r3, [r3, #0]
 802b964:	e002      	b.n	802b96c <_printf_i+0xc8>
 802b966:	0668      	lsls	r0, r5, #25
 802b968:	d5fb      	bpl.n	802b962 <_printf_i+0xbe>
 802b96a:	881b      	ldrh	r3, [r3, #0]
 802b96c:	4854      	ldr	r0, [pc, #336]	; (802bac0 <_printf_i+0x21c>)
 802b96e:	296f      	cmp	r1, #111	; 0x6f
 802b970:	bf14      	ite	ne
 802b972:	220a      	movne	r2, #10
 802b974:	2208      	moveq	r2, #8
 802b976:	2100      	movs	r1, #0
 802b978:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b97c:	6865      	ldr	r5, [r4, #4]
 802b97e:	60a5      	str	r5, [r4, #8]
 802b980:	2d00      	cmp	r5, #0
 802b982:	f2c0 8095 	blt.w	802bab0 <_printf_i+0x20c>
 802b986:	6821      	ldr	r1, [r4, #0]
 802b988:	f021 0104 	bic.w	r1, r1, #4
 802b98c:	6021      	str	r1, [r4, #0]
 802b98e:	2b00      	cmp	r3, #0
 802b990:	d13d      	bne.n	802ba0e <_printf_i+0x16a>
 802b992:	2d00      	cmp	r5, #0
 802b994:	f040 808e 	bne.w	802bab4 <_printf_i+0x210>
 802b998:	4665      	mov	r5, ip
 802b99a:	2a08      	cmp	r2, #8
 802b99c:	d10b      	bne.n	802b9b6 <_printf_i+0x112>
 802b99e:	6823      	ldr	r3, [r4, #0]
 802b9a0:	07db      	lsls	r3, r3, #31
 802b9a2:	d508      	bpl.n	802b9b6 <_printf_i+0x112>
 802b9a4:	6923      	ldr	r3, [r4, #16]
 802b9a6:	6862      	ldr	r2, [r4, #4]
 802b9a8:	429a      	cmp	r2, r3
 802b9aa:	bfde      	ittt	le
 802b9ac:	2330      	movle	r3, #48	; 0x30
 802b9ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b9b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b9b6:	ebac 0305 	sub.w	r3, ip, r5
 802b9ba:	6123      	str	r3, [r4, #16]
 802b9bc:	f8cd 8000 	str.w	r8, [sp]
 802b9c0:	463b      	mov	r3, r7
 802b9c2:	aa03      	add	r2, sp, #12
 802b9c4:	4621      	mov	r1, r4
 802b9c6:	4630      	mov	r0, r6
 802b9c8:	f7ff fef6 	bl	802b7b8 <_printf_common>
 802b9cc:	3001      	adds	r0, #1
 802b9ce:	d14d      	bne.n	802ba6c <_printf_i+0x1c8>
 802b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 802b9d4:	b005      	add	sp, #20
 802b9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b9da:	4839      	ldr	r0, [pc, #228]	; (802bac0 <_printf_i+0x21c>)
 802b9dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802b9e0:	6813      	ldr	r3, [r2, #0]
 802b9e2:	6821      	ldr	r1, [r4, #0]
 802b9e4:	1d1d      	adds	r5, r3, #4
 802b9e6:	681b      	ldr	r3, [r3, #0]
 802b9e8:	6015      	str	r5, [r2, #0]
 802b9ea:	060a      	lsls	r2, r1, #24
 802b9ec:	d50b      	bpl.n	802ba06 <_printf_i+0x162>
 802b9ee:	07ca      	lsls	r2, r1, #31
 802b9f0:	bf44      	itt	mi
 802b9f2:	f041 0120 	orrmi.w	r1, r1, #32
 802b9f6:	6021      	strmi	r1, [r4, #0]
 802b9f8:	b91b      	cbnz	r3, 802ba02 <_printf_i+0x15e>
 802b9fa:	6822      	ldr	r2, [r4, #0]
 802b9fc:	f022 0220 	bic.w	r2, r2, #32
 802ba00:	6022      	str	r2, [r4, #0]
 802ba02:	2210      	movs	r2, #16
 802ba04:	e7b7      	b.n	802b976 <_printf_i+0xd2>
 802ba06:	064d      	lsls	r5, r1, #25
 802ba08:	bf48      	it	mi
 802ba0a:	b29b      	uxthmi	r3, r3
 802ba0c:	e7ef      	b.n	802b9ee <_printf_i+0x14a>
 802ba0e:	4665      	mov	r5, ip
 802ba10:	fbb3 f1f2 	udiv	r1, r3, r2
 802ba14:	fb02 3311 	mls	r3, r2, r1, r3
 802ba18:	5cc3      	ldrb	r3, [r0, r3]
 802ba1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802ba1e:	460b      	mov	r3, r1
 802ba20:	2900      	cmp	r1, #0
 802ba22:	d1f5      	bne.n	802ba10 <_printf_i+0x16c>
 802ba24:	e7b9      	b.n	802b99a <_printf_i+0xf6>
 802ba26:	6813      	ldr	r3, [r2, #0]
 802ba28:	6825      	ldr	r5, [r4, #0]
 802ba2a:	6961      	ldr	r1, [r4, #20]
 802ba2c:	1d18      	adds	r0, r3, #4
 802ba2e:	6010      	str	r0, [r2, #0]
 802ba30:	0628      	lsls	r0, r5, #24
 802ba32:	681b      	ldr	r3, [r3, #0]
 802ba34:	d501      	bpl.n	802ba3a <_printf_i+0x196>
 802ba36:	6019      	str	r1, [r3, #0]
 802ba38:	e002      	b.n	802ba40 <_printf_i+0x19c>
 802ba3a:	066a      	lsls	r2, r5, #25
 802ba3c:	d5fb      	bpl.n	802ba36 <_printf_i+0x192>
 802ba3e:	8019      	strh	r1, [r3, #0]
 802ba40:	2300      	movs	r3, #0
 802ba42:	6123      	str	r3, [r4, #16]
 802ba44:	4665      	mov	r5, ip
 802ba46:	e7b9      	b.n	802b9bc <_printf_i+0x118>
 802ba48:	6813      	ldr	r3, [r2, #0]
 802ba4a:	1d19      	adds	r1, r3, #4
 802ba4c:	6011      	str	r1, [r2, #0]
 802ba4e:	681d      	ldr	r5, [r3, #0]
 802ba50:	6862      	ldr	r2, [r4, #4]
 802ba52:	2100      	movs	r1, #0
 802ba54:	4628      	mov	r0, r5
 802ba56:	f7d4 fbdb 	bl	8000210 <memchr>
 802ba5a:	b108      	cbz	r0, 802ba60 <_printf_i+0x1bc>
 802ba5c:	1b40      	subs	r0, r0, r5
 802ba5e:	6060      	str	r0, [r4, #4]
 802ba60:	6863      	ldr	r3, [r4, #4]
 802ba62:	6123      	str	r3, [r4, #16]
 802ba64:	2300      	movs	r3, #0
 802ba66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ba6a:	e7a7      	b.n	802b9bc <_printf_i+0x118>
 802ba6c:	6923      	ldr	r3, [r4, #16]
 802ba6e:	462a      	mov	r2, r5
 802ba70:	4639      	mov	r1, r7
 802ba72:	4630      	mov	r0, r6
 802ba74:	47c0      	blx	r8
 802ba76:	3001      	adds	r0, #1
 802ba78:	d0aa      	beq.n	802b9d0 <_printf_i+0x12c>
 802ba7a:	6823      	ldr	r3, [r4, #0]
 802ba7c:	079b      	lsls	r3, r3, #30
 802ba7e:	d413      	bmi.n	802baa8 <_printf_i+0x204>
 802ba80:	68e0      	ldr	r0, [r4, #12]
 802ba82:	9b03      	ldr	r3, [sp, #12]
 802ba84:	4298      	cmp	r0, r3
 802ba86:	bfb8      	it	lt
 802ba88:	4618      	movlt	r0, r3
 802ba8a:	e7a3      	b.n	802b9d4 <_printf_i+0x130>
 802ba8c:	2301      	movs	r3, #1
 802ba8e:	464a      	mov	r2, r9
 802ba90:	4639      	mov	r1, r7
 802ba92:	4630      	mov	r0, r6
 802ba94:	47c0      	blx	r8
 802ba96:	3001      	adds	r0, #1
 802ba98:	d09a      	beq.n	802b9d0 <_printf_i+0x12c>
 802ba9a:	3501      	adds	r5, #1
 802ba9c:	68e3      	ldr	r3, [r4, #12]
 802ba9e:	9a03      	ldr	r2, [sp, #12]
 802baa0:	1a9b      	subs	r3, r3, r2
 802baa2:	42ab      	cmp	r3, r5
 802baa4:	dcf2      	bgt.n	802ba8c <_printf_i+0x1e8>
 802baa6:	e7eb      	b.n	802ba80 <_printf_i+0x1dc>
 802baa8:	2500      	movs	r5, #0
 802baaa:	f104 0919 	add.w	r9, r4, #25
 802baae:	e7f5      	b.n	802ba9c <_printf_i+0x1f8>
 802bab0:	2b00      	cmp	r3, #0
 802bab2:	d1ac      	bne.n	802ba0e <_printf_i+0x16a>
 802bab4:	7803      	ldrb	r3, [r0, #0]
 802bab6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802baba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802babe:	e76c      	b.n	802b99a <_printf_i+0xf6>
 802bac0:	08031825 	.word	0x08031825
 802bac4:	08031836 	.word	0x08031836

0802bac8 <_sbrk_r>:
 802bac8:	b538      	push	{r3, r4, r5, lr}
 802baca:	4c06      	ldr	r4, [pc, #24]	; (802bae4 <_sbrk_r+0x1c>)
 802bacc:	2300      	movs	r3, #0
 802bace:	4605      	mov	r5, r0
 802bad0:	4608      	mov	r0, r1
 802bad2:	6023      	str	r3, [r4, #0]
 802bad4:	f7d7 fde2 	bl	800369c <_sbrk>
 802bad8:	1c43      	adds	r3, r0, #1
 802bada:	d102      	bne.n	802bae2 <_sbrk_r+0x1a>
 802badc:	6823      	ldr	r3, [r4, #0]
 802bade:	b103      	cbz	r3, 802bae2 <_sbrk_r+0x1a>
 802bae0:	602b      	str	r3, [r5, #0]
 802bae2:	bd38      	pop	{r3, r4, r5, pc}
 802bae4:	2000ce90 	.word	0x2000ce90

0802bae8 <_raise_r>:
 802bae8:	291f      	cmp	r1, #31
 802baea:	b538      	push	{r3, r4, r5, lr}
 802baec:	4604      	mov	r4, r0
 802baee:	460d      	mov	r5, r1
 802baf0:	d904      	bls.n	802bafc <_raise_r+0x14>
 802baf2:	2316      	movs	r3, #22
 802baf4:	6003      	str	r3, [r0, #0]
 802baf6:	f04f 30ff 	mov.w	r0, #4294967295
 802bafa:	bd38      	pop	{r3, r4, r5, pc}
 802bafc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802bafe:	b112      	cbz	r2, 802bb06 <_raise_r+0x1e>
 802bb00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bb04:	b94b      	cbnz	r3, 802bb1a <_raise_r+0x32>
 802bb06:	4620      	mov	r0, r4
 802bb08:	f000 f830 	bl	802bb6c <_getpid_r>
 802bb0c:	462a      	mov	r2, r5
 802bb0e:	4601      	mov	r1, r0
 802bb10:	4620      	mov	r0, r4
 802bb12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bb16:	f000 b817 	b.w	802bb48 <_kill_r>
 802bb1a:	2b01      	cmp	r3, #1
 802bb1c:	d00a      	beq.n	802bb34 <_raise_r+0x4c>
 802bb1e:	1c59      	adds	r1, r3, #1
 802bb20:	d103      	bne.n	802bb2a <_raise_r+0x42>
 802bb22:	2316      	movs	r3, #22
 802bb24:	6003      	str	r3, [r0, #0]
 802bb26:	2001      	movs	r0, #1
 802bb28:	e7e7      	b.n	802bafa <_raise_r+0x12>
 802bb2a:	2400      	movs	r4, #0
 802bb2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802bb30:	4628      	mov	r0, r5
 802bb32:	4798      	blx	r3
 802bb34:	2000      	movs	r0, #0
 802bb36:	e7e0      	b.n	802bafa <_raise_r+0x12>

0802bb38 <raise>:
 802bb38:	4b02      	ldr	r3, [pc, #8]	; (802bb44 <raise+0xc>)
 802bb3a:	4601      	mov	r1, r0
 802bb3c:	6818      	ldr	r0, [r3, #0]
 802bb3e:	f7ff bfd3 	b.w	802bae8 <_raise_r>
 802bb42:	bf00      	nop
 802bb44:	200000dc 	.word	0x200000dc

0802bb48 <_kill_r>:
 802bb48:	b538      	push	{r3, r4, r5, lr}
 802bb4a:	4c07      	ldr	r4, [pc, #28]	; (802bb68 <_kill_r+0x20>)
 802bb4c:	2300      	movs	r3, #0
 802bb4e:	4605      	mov	r5, r0
 802bb50:	4608      	mov	r0, r1
 802bb52:	4611      	mov	r1, r2
 802bb54:	6023      	str	r3, [r4, #0]
 802bb56:	f7d7 fd19 	bl	800358c <_kill>
 802bb5a:	1c43      	adds	r3, r0, #1
 802bb5c:	d102      	bne.n	802bb64 <_kill_r+0x1c>
 802bb5e:	6823      	ldr	r3, [r4, #0]
 802bb60:	b103      	cbz	r3, 802bb64 <_kill_r+0x1c>
 802bb62:	602b      	str	r3, [r5, #0]
 802bb64:	bd38      	pop	{r3, r4, r5, pc}
 802bb66:	bf00      	nop
 802bb68:	2000ce90 	.word	0x2000ce90

0802bb6c <_getpid_r>:
 802bb6c:	f7d7 bd06 	b.w	800357c <_getpid>

0802bb70 <__swbuf_r>:
 802bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb72:	460e      	mov	r6, r1
 802bb74:	4614      	mov	r4, r2
 802bb76:	4605      	mov	r5, r0
 802bb78:	b118      	cbz	r0, 802bb82 <__swbuf_r+0x12>
 802bb7a:	6983      	ldr	r3, [r0, #24]
 802bb7c:	b90b      	cbnz	r3, 802bb82 <__swbuf_r+0x12>
 802bb7e:	f000 fa0b 	bl	802bf98 <__sinit>
 802bb82:	4b21      	ldr	r3, [pc, #132]	; (802bc08 <__swbuf_r+0x98>)
 802bb84:	429c      	cmp	r4, r3
 802bb86:	d12a      	bne.n	802bbde <__swbuf_r+0x6e>
 802bb88:	686c      	ldr	r4, [r5, #4]
 802bb8a:	69a3      	ldr	r3, [r4, #24]
 802bb8c:	60a3      	str	r3, [r4, #8]
 802bb8e:	89a3      	ldrh	r3, [r4, #12]
 802bb90:	071a      	lsls	r2, r3, #28
 802bb92:	d52e      	bpl.n	802bbf2 <__swbuf_r+0x82>
 802bb94:	6923      	ldr	r3, [r4, #16]
 802bb96:	b363      	cbz	r3, 802bbf2 <__swbuf_r+0x82>
 802bb98:	6923      	ldr	r3, [r4, #16]
 802bb9a:	6820      	ldr	r0, [r4, #0]
 802bb9c:	1ac0      	subs	r0, r0, r3
 802bb9e:	6963      	ldr	r3, [r4, #20]
 802bba0:	b2f6      	uxtb	r6, r6
 802bba2:	4283      	cmp	r3, r0
 802bba4:	4637      	mov	r7, r6
 802bba6:	dc04      	bgt.n	802bbb2 <__swbuf_r+0x42>
 802bba8:	4621      	mov	r1, r4
 802bbaa:	4628      	mov	r0, r5
 802bbac:	f000 f98a 	bl	802bec4 <_fflush_r>
 802bbb0:	bb28      	cbnz	r0, 802bbfe <__swbuf_r+0x8e>
 802bbb2:	68a3      	ldr	r3, [r4, #8]
 802bbb4:	3b01      	subs	r3, #1
 802bbb6:	60a3      	str	r3, [r4, #8]
 802bbb8:	6823      	ldr	r3, [r4, #0]
 802bbba:	1c5a      	adds	r2, r3, #1
 802bbbc:	6022      	str	r2, [r4, #0]
 802bbbe:	701e      	strb	r6, [r3, #0]
 802bbc0:	6963      	ldr	r3, [r4, #20]
 802bbc2:	3001      	adds	r0, #1
 802bbc4:	4283      	cmp	r3, r0
 802bbc6:	d004      	beq.n	802bbd2 <__swbuf_r+0x62>
 802bbc8:	89a3      	ldrh	r3, [r4, #12]
 802bbca:	07db      	lsls	r3, r3, #31
 802bbcc:	d519      	bpl.n	802bc02 <__swbuf_r+0x92>
 802bbce:	2e0a      	cmp	r6, #10
 802bbd0:	d117      	bne.n	802bc02 <__swbuf_r+0x92>
 802bbd2:	4621      	mov	r1, r4
 802bbd4:	4628      	mov	r0, r5
 802bbd6:	f000 f975 	bl	802bec4 <_fflush_r>
 802bbda:	b190      	cbz	r0, 802bc02 <__swbuf_r+0x92>
 802bbdc:	e00f      	b.n	802bbfe <__swbuf_r+0x8e>
 802bbde:	4b0b      	ldr	r3, [pc, #44]	; (802bc0c <__swbuf_r+0x9c>)
 802bbe0:	429c      	cmp	r4, r3
 802bbe2:	d101      	bne.n	802bbe8 <__swbuf_r+0x78>
 802bbe4:	68ac      	ldr	r4, [r5, #8]
 802bbe6:	e7d0      	b.n	802bb8a <__swbuf_r+0x1a>
 802bbe8:	4b09      	ldr	r3, [pc, #36]	; (802bc10 <__swbuf_r+0xa0>)
 802bbea:	429c      	cmp	r4, r3
 802bbec:	bf08      	it	eq
 802bbee:	68ec      	ldreq	r4, [r5, #12]
 802bbf0:	e7cb      	b.n	802bb8a <__swbuf_r+0x1a>
 802bbf2:	4621      	mov	r1, r4
 802bbf4:	4628      	mov	r0, r5
 802bbf6:	f000 f80d 	bl	802bc14 <__swsetup_r>
 802bbfa:	2800      	cmp	r0, #0
 802bbfc:	d0cc      	beq.n	802bb98 <__swbuf_r+0x28>
 802bbfe:	f04f 37ff 	mov.w	r7, #4294967295
 802bc02:	4638      	mov	r0, r7
 802bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bc06:	bf00      	nop
 802bc08:	0803186c 	.word	0x0803186c
 802bc0c:	0803188c 	.word	0x0803188c
 802bc10:	0803184c 	.word	0x0803184c

0802bc14 <__swsetup_r>:
 802bc14:	4b32      	ldr	r3, [pc, #200]	; (802bce0 <__swsetup_r+0xcc>)
 802bc16:	b570      	push	{r4, r5, r6, lr}
 802bc18:	681d      	ldr	r5, [r3, #0]
 802bc1a:	4606      	mov	r6, r0
 802bc1c:	460c      	mov	r4, r1
 802bc1e:	b125      	cbz	r5, 802bc2a <__swsetup_r+0x16>
 802bc20:	69ab      	ldr	r3, [r5, #24]
 802bc22:	b913      	cbnz	r3, 802bc2a <__swsetup_r+0x16>
 802bc24:	4628      	mov	r0, r5
 802bc26:	f000 f9b7 	bl	802bf98 <__sinit>
 802bc2a:	4b2e      	ldr	r3, [pc, #184]	; (802bce4 <__swsetup_r+0xd0>)
 802bc2c:	429c      	cmp	r4, r3
 802bc2e:	d10f      	bne.n	802bc50 <__swsetup_r+0x3c>
 802bc30:	686c      	ldr	r4, [r5, #4]
 802bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bc36:	b29a      	uxth	r2, r3
 802bc38:	0715      	lsls	r5, r2, #28
 802bc3a:	d42c      	bmi.n	802bc96 <__swsetup_r+0x82>
 802bc3c:	06d0      	lsls	r0, r2, #27
 802bc3e:	d411      	bmi.n	802bc64 <__swsetup_r+0x50>
 802bc40:	2209      	movs	r2, #9
 802bc42:	6032      	str	r2, [r6, #0]
 802bc44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bc48:	81a3      	strh	r3, [r4, #12]
 802bc4a:	f04f 30ff 	mov.w	r0, #4294967295
 802bc4e:	e03e      	b.n	802bcce <__swsetup_r+0xba>
 802bc50:	4b25      	ldr	r3, [pc, #148]	; (802bce8 <__swsetup_r+0xd4>)
 802bc52:	429c      	cmp	r4, r3
 802bc54:	d101      	bne.n	802bc5a <__swsetup_r+0x46>
 802bc56:	68ac      	ldr	r4, [r5, #8]
 802bc58:	e7eb      	b.n	802bc32 <__swsetup_r+0x1e>
 802bc5a:	4b24      	ldr	r3, [pc, #144]	; (802bcec <__swsetup_r+0xd8>)
 802bc5c:	429c      	cmp	r4, r3
 802bc5e:	bf08      	it	eq
 802bc60:	68ec      	ldreq	r4, [r5, #12]
 802bc62:	e7e6      	b.n	802bc32 <__swsetup_r+0x1e>
 802bc64:	0751      	lsls	r1, r2, #29
 802bc66:	d512      	bpl.n	802bc8e <__swsetup_r+0x7a>
 802bc68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bc6a:	b141      	cbz	r1, 802bc7e <__swsetup_r+0x6a>
 802bc6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bc70:	4299      	cmp	r1, r3
 802bc72:	d002      	beq.n	802bc7a <__swsetup_r+0x66>
 802bc74:	4630      	mov	r0, r6
 802bc76:	f7ff fbb7 	bl	802b3e8 <_free_r>
 802bc7a:	2300      	movs	r3, #0
 802bc7c:	6363      	str	r3, [r4, #52]	; 0x34
 802bc7e:	89a3      	ldrh	r3, [r4, #12]
 802bc80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802bc84:	81a3      	strh	r3, [r4, #12]
 802bc86:	2300      	movs	r3, #0
 802bc88:	6063      	str	r3, [r4, #4]
 802bc8a:	6923      	ldr	r3, [r4, #16]
 802bc8c:	6023      	str	r3, [r4, #0]
 802bc8e:	89a3      	ldrh	r3, [r4, #12]
 802bc90:	f043 0308 	orr.w	r3, r3, #8
 802bc94:	81a3      	strh	r3, [r4, #12]
 802bc96:	6923      	ldr	r3, [r4, #16]
 802bc98:	b94b      	cbnz	r3, 802bcae <__swsetup_r+0x9a>
 802bc9a:	89a3      	ldrh	r3, [r4, #12]
 802bc9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802bca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bca4:	d003      	beq.n	802bcae <__swsetup_r+0x9a>
 802bca6:	4621      	mov	r1, r4
 802bca8:	4630      	mov	r0, r6
 802bcaa:	f000 fa23 	bl	802c0f4 <__smakebuf_r>
 802bcae:	89a2      	ldrh	r2, [r4, #12]
 802bcb0:	f012 0301 	ands.w	r3, r2, #1
 802bcb4:	d00c      	beq.n	802bcd0 <__swsetup_r+0xbc>
 802bcb6:	2300      	movs	r3, #0
 802bcb8:	60a3      	str	r3, [r4, #8]
 802bcba:	6963      	ldr	r3, [r4, #20]
 802bcbc:	425b      	negs	r3, r3
 802bcbe:	61a3      	str	r3, [r4, #24]
 802bcc0:	6923      	ldr	r3, [r4, #16]
 802bcc2:	b953      	cbnz	r3, 802bcda <__swsetup_r+0xc6>
 802bcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bcc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802bccc:	d1ba      	bne.n	802bc44 <__swsetup_r+0x30>
 802bcce:	bd70      	pop	{r4, r5, r6, pc}
 802bcd0:	0792      	lsls	r2, r2, #30
 802bcd2:	bf58      	it	pl
 802bcd4:	6963      	ldrpl	r3, [r4, #20]
 802bcd6:	60a3      	str	r3, [r4, #8]
 802bcd8:	e7f2      	b.n	802bcc0 <__swsetup_r+0xac>
 802bcda:	2000      	movs	r0, #0
 802bcdc:	e7f7      	b.n	802bcce <__swsetup_r+0xba>
 802bcde:	bf00      	nop
 802bce0:	200000dc 	.word	0x200000dc
 802bce4:	0803186c 	.word	0x0803186c
 802bce8:	0803188c 	.word	0x0803188c
 802bcec:	0803184c 	.word	0x0803184c

0802bcf0 <__register_exitproc>:
 802bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bcf4:	4d2c      	ldr	r5, [pc, #176]	; (802bda8 <__register_exitproc+0xb8>)
 802bcf6:	682c      	ldr	r4, [r5, #0]
 802bcf8:	4607      	mov	r7, r0
 802bcfa:	460e      	mov	r6, r1
 802bcfc:	4691      	mov	r9, r2
 802bcfe:	4698      	mov	r8, r3
 802bd00:	b934      	cbnz	r4, 802bd10 <__register_exitproc+0x20>
 802bd02:	4b2a      	ldr	r3, [pc, #168]	; (802bdac <__register_exitproc+0xbc>)
 802bd04:	4c2a      	ldr	r4, [pc, #168]	; (802bdb0 <__register_exitproc+0xc0>)
 802bd06:	602c      	str	r4, [r5, #0]
 802bd08:	b113      	cbz	r3, 802bd10 <__register_exitproc+0x20>
 802bd0a:	681b      	ldr	r3, [r3, #0]
 802bd0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802bd10:	6863      	ldr	r3, [r4, #4]
 802bd12:	2b1f      	cmp	r3, #31
 802bd14:	dd3d      	ble.n	802bd92 <__register_exitproc+0xa2>
 802bd16:	4b27      	ldr	r3, [pc, #156]	; (802bdb4 <__register_exitproc+0xc4>)
 802bd18:	b91b      	cbnz	r3, 802bd22 <__register_exitproc+0x32>
 802bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 802bd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bd22:	208c      	movs	r0, #140	; 0x8c
 802bd24:	f7ff fb3c 	bl	802b3a0 <malloc>
 802bd28:	4604      	mov	r4, r0
 802bd2a:	2800      	cmp	r0, #0
 802bd2c:	d0f5      	beq.n	802bd1a <__register_exitproc+0x2a>
 802bd2e:	2300      	movs	r3, #0
 802bd30:	682a      	ldr	r2, [r5, #0]
 802bd32:	6002      	str	r2, [r0, #0]
 802bd34:	6043      	str	r3, [r0, #4]
 802bd36:	6028      	str	r0, [r5, #0]
 802bd38:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802bd3c:	b30f      	cbz	r7, 802bd82 <__register_exitproc+0x92>
 802bd3e:	f44f 7084 	mov.w	r0, #264	; 0x108
 802bd42:	f7ff fb2d 	bl	802b3a0 <malloc>
 802bd46:	2800      	cmp	r0, #0
 802bd48:	d0e7      	beq.n	802bd1a <__register_exitproc+0x2a>
 802bd4a:	2300      	movs	r3, #0
 802bd4c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802bd50:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802bd54:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802bd58:	6862      	ldr	r2, [r4, #4]
 802bd5a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802bd5e:	2301      	movs	r3, #1
 802bd60:	4093      	lsls	r3, r2
 802bd62:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802bd66:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802bd6a:	431a      	orrs	r2, r3
 802bd6c:	2f02      	cmp	r7, #2
 802bd6e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802bd72:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802bd76:	bf02      	ittt	eq
 802bd78:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802bd7c:	4313      	orreq	r3, r2
 802bd7e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802bd82:	6863      	ldr	r3, [r4, #4]
 802bd84:	1c5a      	adds	r2, r3, #1
 802bd86:	3302      	adds	r3, #2
 802bd88:	6062      	str	r2, [r4, #4]
 802bd8a:	2000      	movs	r0, #0
 802bd8c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802bd90:	e7c5      	b.n	802bd1e <__register_exitproc+0x2e>
 802bd92:	2f00      	cmp	r7, #0
 802bd94:	d0f5      	beq.n	802bd82 <__register_exitproc+0x92>
 802bd96:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802bd9a:	2800      	cmp	r0, #0
 802bd9c:	d1dc      	bne.n	802bd58 <__register_exitproc+0x68>
 802bd9e:	4b05      	ldr	r3, [pc, #20]	; (802bdb4 <__register_exitproc+0xc4>)
 802bda0:	2b00      	cmp	r3, #0
 802bda2:	d0ba      	beq.n	802bd1a <__register_exitproc+0x2a>
 802bda4:	e7cb      	b.n	802bd3e <__register_exitproc+0x4e>
 802bda6:	bf00      	nop
 802bda8:	2000c288 	.word	0x2000c288
 802bdac:	08031848 	.word	0x08031848
 802bdb0:	2000c1fc 	.word	0x2000c1fc
 802bdb4:	0802b3a1 	.word	0x0802b3a1

0802bdb8 <__sflush_r>:
 802bdb8:	898a      	ldrh	r2, [r1, #12]
 802bdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bdbe:	4605      	mov	r5, r0
 802bdc0:	0710      	lsls	r0, r2, #28
 802bdc2:	460c      	mov	r4, r1
 802bdc4:	d458      	bmi.n	802be78 <__sflush_r+0xc0>
 802bdc6:	684b      	ldr	r3, [r1, #4]
 802bdc8:	2b00      	cmp	r3, #0
 802bdca:	dc05      	bgt.n	802bdd8 <__sflush_r+0x20>
 802bdcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bdce:	2b00      	cmp	r3, #0
 802bdd0:	dc02      	bgt.n	802bdd8 <__sflush_r+0x20>
 802bdd2:	2000      	movs	r0, #0
 802bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bdda:	2e00      	cmp	r6, #0
 802bddc:	d0f9      	beq.n	802bdd2 <__sflush_r+0x1a>
 802bdde:	2300      	movs	r3, #0
 802bde0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bde4:	682f      	ldr	r7, [r5, #0]
 802bde6:	6a21      	ldr	r1, [r4, #32]
 802bde8:	602b      	str	r3, [r5, #0]
 802bdea:	d032      	beq.n	802be52 <__sflush_r+0x9a>
 802bdec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bdee:	89a3      	ldrh	r3, [r4, #12]
 802bdf0:	075a      	lsls	r2, r3, #29
 802bdf2:	d505      	bpl.n	802be00 <__sflush_r+0x48>
 802bdf4:	6863      	ldr	r3, [r4, #4]
 802bdf6:	1ac0      	subs	r0, r0, r3
 802bdf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bdfa:	b10b      	cbz	r3, 802be00 <__sflush_r+0x48>
 802bdfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bdfe:	1ac0      	subs	r0, r0, r3
 802be00:	2300      	movs	r3, #0
 802be02:	4602      	mov	r2, r0
 802be04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802be06:	6a21      	ldr	r1, [r4, #32]
 802be08:	4628      	mov	r0, r5
 802be0a:	47b0      	blx	r6
 802be0c:	1c43      	adds	r3, r0, #1
 802be0e:	89a3      	ldrh	r3, [r4, #12]
 802be10:	d106      	bne.n	802be20 <__sflush_r+0x68>
 802be12:	6829      	ldr	r1, [r5, #0]
 802be14:	291d      	cmp	r1, #29
 802be16:	d848      	bhi.n	802beaa <__sflush_r+0xf2>
 802be18:	4a29      	ldr	r2, [pc, #164]	; (802bec0 <__sflush_r+0x108>)
 802be1a:	40ca      	lsrs	r2, r1
 802be1c:	07d6      	lsls	r6, r2, #31
 802be1e:	d544      	bpl.n	802beaa <__sflush_r+0xf2>
 802be20:	2200      	movs	r2, #0
 802be22:	6062      	str	r2, [r4, #4]
 802be24:	04d9      	lsls	r1, r3, #19
 802be26:	6922      	ldr	r2, [r4, #16]
 802be28:	6022      	str	r2, [r4, #0]
 802be2a:	d504      	bpl.n	802be36 <__sflush_r+0x7e>
 802be2c:	1c42      	adds	r2, r0, #1
 802be2e:	d101      	bne.n	802be34 <__sflush_r+0x7c>
 802be30:	682b      	ldr	r3, [r5, #0]
 802be32:	b903      	cbnz	r3, 802be36 <__sflush_r+0x7e>
 802be34:	6560      	str	r0, [r4, #84]	; 0x54
 802be36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802be38:	602f      	str	r7, [r5, #0]
 802be3a:	2900      	cmp	r1, #0
 802be3c:	d0c9      	beq.n	802bdd2 <__sflush_r+0x1a>
 802be3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be42:	4299      	cmp	r1, r3
 802be44:	d002      	beq.n	802be4c <__sflush_r+0x94>
 802be46:	4628      	mov	r0, r5
 802be48:	f7ff face 	bl	802b3e8 <_free_r>
 802be4c:	2000      	movs	r0, #0
 802be4e:	6360      	str	r0, [r4, #52]	; 0x34
 802be50:	e7c0      	b.n	802bdd4 <__sflush_r+0x1c>
 802be52:	2301      	movs	r3, #1
 802be54:	4628      	mov	r0, r5
 802be56:	47b0      	blx	r6
 802be58:	1c41      	adds	r1, r0, #1
 802be5a:	d1c8      	bne.n	802bdee <__sflush_r+0x36>
 802be5c:	682b      	ldr	r3, [r5, #0]
 802be5e:	2b00      	cmp	r3, #0
 802be60:	d0c5      	beq.n	802bdee <__sflush_r+0x36>
 802be62:	2b1d      	cmp	r3, #29
 802be64:	d001      	beq.n	802be6a <__sflush_r+0xb2>
 802be66:	2b16      	cmp	r3, #22
 802be68:	d101      	bne.n	802be6e <__sflush_r+0xb6>
 802be6a:	602f      	str	r7, [r5, #0]
 802be6c:	e7b1      	b.n	802bdd2 <__sflush_r+0x1a>
 802be6e:	89a3      	ldrh	r3, [r4, #12]
 802be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802be74:	81a3      	strh	r3, [r4, #12]
 802be76:	e7ad      	b.n	802bdd4 <__sflush_r+0x1c>
 802be78:	690f      	ldr	r7, [r1, #16]
 802be7a:	2f00      	cmp	r7, #0
 802be7c:	d0a9      	beq.n	802bdd2 <__sflush_r+0x1a>
 802be7e:	0793      	lsls	r3, r2, #30
 802be80:	680e      	ldr	r6, [r1, #0]
 802be82:	bf08      	it	eq
 802be84:	694b      	ldreq	r3, [r1, #20]
 802be86:	600f      	str	r7, [r1, #0]
 802be88:	bf18      	it	ne
 802be8a:	2300      	movne	r3, #0
 802be8c:	eba6 0807 	sub.w	r8, r6, r7
 802be90:	608b      	str	r3, [r1, #8]
 802be92:	f1b8 0f00 	cmp.w	r8, #0
 802be96:	dd9c      	ble.n	802bdd2 <__sflush_r+0x1a>
 802be98:	4643      	mov	r3, r8
 802be9a:	463a      	mov	r2, r7
 802be9c:	6a21      	ldr	r1, [r4, #32]
 802be9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bea0:	4628      	mov	r0, r5
 802bea2:	47b0      	blx	r6
 802bea4:	2800      	cmp	r0, #0
 802bea6:	dc06      	bgt.n	802beb6 <__sflush_r+0xfe>
 802bea8:	89a3      	ldrh	r3, [r4, #12]
 802beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802beae:	81a3      	strh	r3, [r4, #12]
 802beb0:	f04f 30ff 	mov.w	r0, #4294967295
 802beb4:	e78e      	b.n	802bdd4 <__sflush_r+0x1c>
 802beb6:	4407      	add	r7, r0
 802beb8:	eba8 0800 	sub.w	r8, r8, r0
 802bebc:	e7e9      	b.n	802be92 <__sflush_r+0xda>
 802bebe:	bf00      	nop
 802bec0:	20400001 	.word	0x20400001

0802bec4 <_fflush_r>:
 802bec4:	b538      	push	{r3, r4, r5, lr}
 802bec6:	690b      	ldr	r3, [r1, #16]
 802bec8:	4605      	mov	r5, r0
 802beca:	460c      	mov	r4, r1
 802becc:	b1db      	cbz	r3, 802bf06 <_fflush_r+0x42>
 802bece:	b118      	cbz	r0, 802bed8 <_fflush_r+0x14>
 802bed0:	6983      	ldr	r3, [r0, #24]
 802bed2:	b90b      	cbnz	r3, 802bed8 <_fflush_r+0x14>
 802bed4:	f000 f860 	bl	802bf98 <__sinit>
 802bed8:	4b0c      	ldr	r3, [pc, #48]	; (802bf0c <_fflush_r+0x48>)
 802beda:	429c      	cmp	r4, r3
 802bedc:	d109      	bne.n	802bef2 <_fflush_r+0x2e>
 802bede:	686c      	ldr	r4, [r5, #4]
 802bee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bee4:	b17b      	cbz	r3, 802bf06 <_fflush_r+0x42>
 802bee6:	4621      	mov	r1, r4
 802bee8:	4628      	mov	r0, r5
 802beea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802beee:	f7ff bf63 	b.w	802bdb8 <__sflush_r>
 802bef2:	4b07      	ldr	r3, [pc, #28]	; (802bf10 <_fflush_r+0x4c>)
 802bef4:	429c      	cmp	r4, r3
 802bef6:	d101      	bne.n	802befc <_fflush_r+0x38>
 802bef8:	68ac      	ldr	r4, [r5, #8]
 802befa:	e7f1      	b.n	802bee0 <_fflush_r+0x1c>
 802befc:	4b05      	ldr	r3, [pc, #20]	; (802bf14 <_fflush_r+0x50>)
 802befe:	429c      	cmp	r4, r3
 802bf00:	bf08      	it	eq
 802bf02:	68ec      	ldreq	r4, [r5, #12]
 802bf04:	e7ec      	b.n	802bee0 <_fflush_r+0x1c>
 802bf06:	2000      	movs	r0, #0
 802bf08:	bd38      	pop	{r3, r4, r5, pc}
 802bf0a:	bf00      	nop
 802bf0c:	0803186c 	.word	0x0803186c
 802bf10:	0803188c 	.word	0x0803188c
 802bf14:	0803184c 	.word	0x0803184c

0802bf18 <std>:
 802bf18:	2300      	movs	r3, #0
 802bf1a:	b510      	push	{r4, lr}
 802bf1c:	4604      	mov	r4, r0
 802bf1e:	e9c0 3300 	strd	r3, r3, [r0]
 802bf22:	6083      	str	r3, [r0, #8]
 802bf24:	8181      	strh	r1, [r0, #12]
 802bf26:	6643      	str	r3, [r0, #100]	; 0x64
 802bf28:	81c2      	strh	r2, [r0, #14]
 802bf2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bf2e:	6183      	str	r3, [r0, #24]
 802bf30:	4619      	mov	r1, r3
 802bf32:	2208      	movs	r2, #8
 802bf34:	305c      	adds	r0, #92	; 0x5c
 802bf36:	f7ff fa4e 	bl	802b3d6 <memset>
 802bf3a:	4b05      	ldr	r3, [pc, #20]	; (802bf50 <std+0x38>)
 802bf3c:	6263      	str	r3, [r4, #36]	; 0x24
 802bf3e:	4b05      	ldr	r3, [pc, #20]	; (802bf54 <std+0x3c>)
 802bf40:	62a3      	str	r3, [r4, #40]	; 0x28
 802bf42:	4b05      	ldr	r3, [pc, #20]	; (802bf58 <std+0x40>)
 802bf44:	62e3      	str	r3, [r4, #44]	; 0x2c
 802bf46:	4b05      	ldr	r3, [pc, #20]	; (802bf5c <std+0x44>)
 802bf48:	6224      	str	r4, [r4, #32]
 802bf4a:	6323      	str	r3, [r4, #48]	; 0x30
 802bf4c:	bd10      	pop	{r4, pc}
 802bf4e:	bf00      	nop
 802bf50:	0802c179 	.word	0x0802c179
 802bf54:	0802c19b 	.word	0x0802c19b
 802bf58:	0802c1d3 	.word	0x0802c1d3
 802bf5c:	0802c1f7 	.word	0x0802c1f7

0802bf60 <_cleanup_r>:
 802bf60:	4901      	ldr	r1, [pc, #4]	; (802bf68 <_cleanup_r+0x8>)
 802bf62:	f000 b885 	b.w	802c070 <_fwalk_reent>
 802bf66:	bf00      	nop
 802bf68:	0802bec5 	.word	0x0802bec5

0802bf6c <__sfmoreglue>:
 802bf6c:	b570      	push	{r4, r5, r6, lr}
 802bf6e:	1e4a      	subs	r2, r1, #1
 802bf70:	2568      	movs	r5, #104	; 0x68
 802bf72:	4355      	muls	r5, r2
 802bf74:	460e      	mov	r6, r1
 802bf76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802bf7a:	f7ff fa83 	bl	802b484 <_malloc_r>
 802bf7e:	4604      	mov	r4, r0
 802bf80:	b140      	cbz	r0, 802bf94 <__sfmoreglue+0x28>
 802bf82:	2100      	movs	r1, #0
 802bf84:	e9c0 1600 	strd	r1, r6, [r0]
 802bf88:	300c      	adds	r0, #12
 802bf8a:	60a0      	str	r0, [r4, #8]
 802bf8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802bf90:	f7ff fa21 	bl	802b3d6 <memset>
 802bf94:	4620      	mov	r0, r4
 802bf96:	bd70      	pop	{r4, r5, r6, pc}

0802bf98 <__sinit>:
 802bf98:	6983      	ldr	r3, [r0, #24]
 802bf9a:	b510      	push	{r4, lr}
 802bf9c:	4604      	mov	r4, r0
 802bf9e:	bb33      	cbnz	r3, 802bfee <__sinit+0x56>
 802bfa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802bfa4:	6503      	str	r3, [r0, #80]	; 0x50
 802bfa6:	4b12      	ldr	r3, [pc, #72]	; (802bff0 <__sinit+0x58>)
 802bfa8:	4a12      	ldr	r2, [pc, #72]	; (802bff4 <__sinit+0x5c>)
 802bfaa:	681b      	ldr	r3, [r3, #0]
 802bfac:	6282      	str	r2, [r0, #40]	; 0x28
 802bfae:	4298      	cmp	r0, r3
 802bfb0:	bf04      	itt	eq
 802bfb2:	2301      	moveq	r3, #1
 802bfb4:	6183      	streq	r3, [r0, #24]
 802bfb6:	f000 f81f 	bl	802bff8 <__sfp>
 802bfba:	6060      	str	r0, [r4, #4]
 802bfbc:	4620      	mov	r0, r4
 802bfbe:	f000 f81b 	bl	802bff8 <__sfp>
 802bfc2:	60a0      	str	r0, [r4, #8]
 802bfc4:	4620      	mov	r0, r4
 802bfc6:	f000 f817 	bl	802bff8 <__sfp>
 802bfca:	2200      	movs	r2, #0
 802bfcc:	60e0      	str	r0, [r4, #12]
 802bfce:	2104      	movs	r1, #4
 802bfd0:	6860      	ldr	r0, [r4, #4]
 802bfd2:	f7ff ffa1 	bl	802bf18 <std>
 802bfd6:	2201      	movs	r2, #1
 802bfd8:	2109      	movs	r1, #9
 802bfda:	68a0      	ldr	r0, [r4, #8]
 802bfdc:	f7ff ff9c 	bl	802bf18 <std>
 802bfe0:	2202      	movs	r2, #2
 802bfe2:	2112      	movs	r1, #18
 802bfe4:	68e0      	ldr	r0, [r4, #12]
 802bfe6:	f7ff ff97 	bl	802bf18 <std>
 802bfea:	2301      	movs	r3, #1
 802bfec:	61a3      	str	r3, [r4, #24]
 802bfee:	bd10      	pop	{r4, pc}
 802bff0:	08031810 	.word	0x08031810
 802bff4:	0802bf61 	.word	0x0802bf61

0802bff8 <__sfp>:
 802bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bffa:	4b1b      	ldr	r3, [pc, #108]	; (802c068 <__sfp+0x70>)
 802bffc:	681e      	ldr	r6, [r3, #0]
 802bffe:	69b3      	ldr	r3, [r6, #24]
 802c000:	4607      	mov	r7, r0
 802c002:	b913      	cbnz	r3, 802c00a <__sfp+0x12>
 802c004:	4630      	mov	r0, r6
 802c006:	f7ff ffc7 	bl	802bf98 <__sinit>
 802c00a:	3648      	adds	r6, #72	; 0x48
 802c00c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c010:	3b01      	subs	r3, #1
 802c012:	d503      	bpl.n	802c01c <__sfp+0x24>
 802c014:	6833      	ldr	r3, [r6, #0]
 802c016:	b133      	cbz	r3, 802c026 <__sfp+0x2e>
 802c018:	6836      	ldr	r6, [r6, #0]
 802c01a:	e7f7      	b.n	802c00c <__sfp+0x14>
 802c01c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c020:	b16d      	cbz	r5, 802c03e <__sfp+0x46>
 802c022:	3468      	adds	r4, #104	; 0x68
 802c024:	e7f4      	b.n	802c010 <__sfp+0x18>
 802c026:	2104      	movs	r1, #4
 802c028:	4638      	mov	r0, r7
 802c02a:	f7ff ff9f 	bl	802bf6c <__sfmoreglue>
 802c02e:	6030      	str	r0, [r6, #0]
 802c030:	2800      	cmp	r0, #0
 802c032:	d1f1      	bne.n	802c018 <__sfp+0x20>
 802c034:	230c      	movs	r3, #12
 802c036:	603b      	str	r3, [r7, #0]
 802c038:	4604      	mov	r4, r0
 802c03a:	4620      	mov	r0, r4
 802c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c03e:	4b0b      	ldr	r3, [pc, #44]	; (802c06c <__sfp+0x74>)
 802c040:	6665      	str	r5, [r4, #100]	; 0x64
 802c042:	e9c4 5500 	strd	r5, r5, [r4]
 802c046:	60a5      	str	r5, [r4, #8]
 802c048:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802c04c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802c050:	2208      	movs	r2, #8
 802c052:	4629      	mov	r1, r5
 802c054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c058:	f7ff f9bd 	bl	802b3d6 <memset>
 802c05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c064:	e7e9      	b.n	802c03a <__sfp+0x42>
 802c066:	bf00      	nop
 802c068:	08031810 	.word	0x08031810
 802c06c:	ffff0001 	.word	0xffff0001

0802c070 <_fwalk_reent>:
 802c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c074:	4680      	mov	r8, r0
 802c076:	4689      	mov	r9, r1
 802c078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c07c:	2600      	movs	r6, #0
 802c07e:	b914      	cbnz	r4, 802c086 <_fwalk_reent+0x16>
 802c080:	4630      	mov	r0, r6
 802c082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c086:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802c08a:	3f01      	subs	r7, #1
 802c08c:	d501      	bpl.n	802c092 <_fwalk_reent+0x22>
 802c08e:	6824      	ldr	r4, [r4, #0]
 802c090:	e7f5      	b.n	802c07e <_fwalk_reent+0xe>
 802c092:	89ab      	ldrh	r3, [r5, #12]
 802c094:	2b01      	cmp	r3, #1
 802c096:	d907      	bls.n	802c0a8 <_fwalk_reent+0x38>
 802c098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c09c:	3301      	adds	r3, #1
 802c09e:	d003      	beq.n	802c0a8 <_fwalk_reent+0x38>
 802c0a0:	4629      	mov	r1, r5
 802c0a2:	4640      	mov	r0, r8
 802c0a4:	47c8      	blx	r9
 802c0a6:	4306      	orrs	r6, r0
 802c0a8:	3568      	adds	r5, #104	; 0x68
 802c0aa:	e7ee      	b.n	802c08a <_fwalk_reent+0x1a>

0802c0ac <__swhatbuf_r>:
 802c0ac:	b570      	push	{r4, r5, r6, lr}
 802c0ae:	460e      	mov	r6, r1
 802c0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c0b4:	2900      	cmp	r1, #0
 802c0b6:	b096      	sub	sp, #88	; 0x58
 802c0b8:	4614      	mov	r4, r2
 802c0ba:	461d      	mov	r5, r3
 802c0bc:	da07      	bge.n	802c0ce <__swhatbuf_r+0x22>
 802c0be:	2300      	movs	r3, #0
 802c0c0:	602b      	str	r3, [r5, #0]
 802c0c2:	89b3      	ldrh	r3, [r6, #12]
 802c0c4:	061a      	lsls	r2, r3, #24
 802c0c6:	d410      	bmi.n	802c0ea <__swhatbuf_r+0x3e>
 802c0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c0cc:	e00e      	b.n	802c0ec <__swhatbuf_r+0x40>
 802c0ce:	466a      	mov	r2, sp
 802c0d0:	f000 f8b8 	bl	802c244 <_fstat_r>
 802c0d4:	2800      	cmp	r0, #0
 802c0d6:	dbf2      	blt.n	802c0be <__swhatbuf_r+0x12>
 802c0d8:	9a01      	ldr	r2, [sp, #4]
 802c0da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c0de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c0e2:	425a      	negs	r2, r3
 802c0e4:	415a      	adcs	r2, r3
 802c0e6:	602a      	str	r2, [r5, #0]
 802c0e8:	e7ee      	b.n	802c0c8 <__swhatbuf_r+0x1c>
 802c0ea:	2340      	movs	r3, #64	; 0x40
 802c0ec:	2000      	movs	r0, #0
 802c0ee:	6023      	str	r3, [r4, #0]
 802c0f0:	b016      	add	sp, #88	; 0x58
 802c0f2:	bd70      	pop	{r4, r5, r6, pc}

0802c0f4 <__smakebuf_r>:
 802c0f4:	898b      	ldrh	r3, [r1, #12]
 802c0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c0f8:	079d      	lsls	r5, r3, #30
 802c0fa:	4606      	mov	r6, r0
 802c0fc:	460c      	mov	r4, r1
 802c0fe:	d507      	bpl.n	802c110 <__smakebuf_r+0x1c>
 802c100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c104:	6023      	str	r3, [r4, #0]
 802c106:	6123      	str	r3, [r4, #16]
 802c108:	2301      	movs	r3, #1
 802c10a:	6163      	str	r3, [r4, #20]
 802c10c:	b002      	add	sp, #8
 802c10e:	bd70      	pop	{r4, r5, r6, pc}
 802c110:	ab01      	add	r3, sp, #4
 802c112:	466a      	mov	r2, sp
 802c114:	f7ff ffca 	bl	802c0ac <__swhatbuf_r>
 802c118:	9900      	ldr	r1, [sp, #0]
 802c11a:	4605      	mov	r5, r0
 802c11c:	4630      	mov	r0, r6
 802c11e:	f7ff f9b1 	bl	802b484 <_malloc_r>
 802c122:	b948      	cbnz	r0, 802c138 <__smakebuf_r+0x44>
 802c124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c128:	059a      	lsls	r2, r3, #22
 802c12a:	d4ef      	bmi.n	802c10c <__smakebuf_r+0x18>
 802c12c:	f023 0303 	bic.w	r3, r3, #3
 802c130:	f043 0302 	orr.w	r3, r3, #2
 802c134:	81a3      	strh	r3, [r4, #12]
 802c136:	e7e3      	b.n	802c100 <__smakebuf_r+0xc>
 802c138:	4b0d      	ldr	r3, [pc, #52]	; (802c170 <__smakebuf_r+0x7c>)
 802c13a:	62b3      	str	r3, [r6, #40]	; 0x28
 802c13c:	89a3      	ldrh	r3, [r4, #12]
 802c13e:	6020      	str	r0, [r4, #0]
 802c140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c144:	81a3      	strh	r3, [r4, #12]
 802c146:	9b00      	ldr	r3, [sp, #0]
 802c148:	6163      	str	r3, [r4, #20]
 802c14a:	9b01      	ldr	r3, [sp, #4]
 802c14c:	6120      	str	r0, [r4, #16]
 802c14e:	b15b      	cbz	r3, 802c168 <__smakebuf_r+0x74>
 802c150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c154:	4630      	mov	r0, r6
 802c156:	f000 f887 	bl	802c268 <_isatty_r>
 802c15a:	b128      	cbz	r0, 802c168 <__smakebuf_r+0x74>
 802c15c:	89a3      	ldrh	r3, [r4, #12]
 802c15e:	f023 0303 	bic.w	r3, r3, #3
 802c162:	f043 0301 	orr.w	r3, r3, #1
 802c166:	81a3      	strh	r3, [r4, #12]
 802c168:	89a3      	ldrh	r3, [r4, #12]
 802c16a:	431d      	orrs	r5, r3
 802c16c:	81a5      	strh	r5, [r4, #12]
 802c16e:	e7cd      	b.n	802c10c <__smakebuf_r+0x18>
 802c170:	0802bf61 	.word	0x0802bf61

0802c174 <__malloc_lock>:
 802c174:	4770      	bx	lr

0802c176 <__malloc_unlock>:
 802c176:	4770      	bx	lr

0802c178 <__sread>:
 802c178:	b510      	push	{r4, lr}
 802c17a:	460c      	mov	r4, r1
 802c17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c180:	f000 f894 	bl	802c2ac <_read_r>
 802c184:	2800      	cmp	r0, #0
 802c186:	bfab      	itete	ge
 802c188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c18a:	89a3      	ldrhlt	r3, [r4, #12]
 802c18c:	181b      	addge	r3, r3, r0
 802c18e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c192:	bfac      	ite	ge
 802c194:	6563      	strge	r3, [r4, #84]	; 0x54
 802c196:	81a3      	strhlt	r3, [r4, #12]
 802c198:	bd10      	pop	{r4, pc}

0802c19a <__swrite>:
 802c19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c19e:	461f      	mov	r7, r3
 802c1a0:	898b      	ldrh	r3, [r1, #12]
 802c1a2:	05db      	lsls	r3, r3, #23
 802c1a4:	4605      	mov	r5, r0
 802c1a6:	460c      	mov	r4, r1
 802c1a8:	4616      	mov	r6, r2
 802c1aa:	d505      	bpl.n	802c1b8 <__swrite+0x1e>
 802c1ac:	2302      	movs	r3, #2
 802c1ae:	2200      	movs	r2, #0
 802c1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1b4:	f000 f868 	bl	802c288 <_lseek_r>
 802c1b8:	89a3      	ldrh	r3, [r4, #12]
 802c1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c1be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c1c2:	81a3      	strh	r3, [r4, #12]
 802c1c4:	4632      	mov	r2, r6
 802c1c6:	463b      	mov	r3, r7
 802c1c8:	4628      	mov	r0, r5
 802c1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c1ce:	f000 b817 	b.w	802c200 <_write_r>

0802c1d2 <__sseek>:
 802c1d2:	b510      	push	{r4, lr}
 802c1d4:	460c      	mov	r4, r1
 802c1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1da:	f000 f855 	bl	802c288 <_lseek_r>
 802c1de:	1c43      	adds	r3, r0, #1
 802c1e0:	89a3      	ldrh	r3, [r4, #12]
 802c1e2:	bf15      	itete	ne
 802c1e4:	6560      	strne	r0, [r4, #84]	; 0x54
 802c1e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c1ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c1ee:	81a3      	strheq	r3, [r4, #12]
 802c1f0:	bf18      	it	ne
 802c1f2:	81a3      	strhne	r3, [r4, #12]
 802c1f4:	bd10      	pop	{r4, pc}

0802c1f6 <__sclose>:
 802c1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1fa:	f000 b813 	b.w	802c224 <_close_r>
	...

0802c200 <_write_r>:
 802c200:	b538      	push	{r3, r4, r5, lr}
 802c202:	4c07      	ldr	r4, [pc, #28]	; (802c220 <_write_r+0x20>)
 802c204:	4605      	mov	r5, r0
 802c206:	4608      	mov	r0, r1
 802c208:	4611      	mov	r1, r2
 802c20a:	2200      	movs	r2, #0
 802c20c:	6022      	str	r2, [r4, #0]
 802c20e:	461a      	mov	r2, r3
 802c210:	f7d7 f9f3 	bl	80035fa <_write>
 802c214:	1c43      	adds	r3, r0, #1
 802c216:	d102      	bne.n	802c21e <_write_r+0x1e>
 802c218:	6823      	ldr	r3, [r4, #0]
 802c21a:	b103      	cbz	r3, 802c21e <_write_r+0x1e>
 802c21c:	602b      	str	r3, [r5, #0]
 802c21e:	bd38      	pop	{r3, r4, r5, pc}
 802c220:	2000ce90 	.word	0x2000ce90

0802c224 <_close_r>:
 802c224:	b538      	push	{r3, r4, r5, lr}
 802c226:	4c06      	ldr	r4, [pc, #24]	; (802c240 <_close_r+0x1c>)
 802c228:	2300      	movs	r3, #0
 802c22a:	4605      	mov	r5, r0
 802c22c:	4608      	mov	r0, r1
 802c22e:	6023      	str	r3, [r4, #0]
 802c230:	f7d7 f9ff 	bl	8003632 <_close>
 802c234:	1c43      	adds	r3, r0, #1
 802c236:	d102      	bne.n	802c23e <_close_r+0x1a>
 802c238:	6823      	ldr	r3, [r4, #0]
 802c23a:	b103      	cbz	r3, 802c23e <_close_r+0x1a>
 802c23c:	602b      	str	r3, [r5, #0]
 802c23e:	bd38      	pop	{r3, r4, r5, pc}
 802c240:	2000ce90 	.word	0x2000ce90

0802c244 <_fstat_r>:
 802c244:	b538      	push	{r3, r4, r5, lr}
 802c246:	4c07      	ldr	r4, [pc, #28]	; (802c264 <_fstat_r+0x20>)
 802c248:	2300      	movs	r3, #0
 802c24a:	4605      	mov	r5, r0
 802c24c:	4608      	mov	r0, r1
 802c24e:	4611      	mov	r1, r2
 802c250:	6023      	str	r3, [r4, #0]
 802c252:	f7d7 f9fa 	bl	800364a <_fstat>
 802c256:	1c43      	adds	r3, r0, #1
 802c258:	d102      	bne.n	802c260 <_fstat_r+0x1c>
 802c25a:	6823      	ldr	r3, [r4, #0]
 802c25c:	b103      	cbz	r3, 802c260 <_fstat_r+0x1c>
 802c25e:	602b      	str	r3, [r5, #0]
 802c260:	bd38      	pop	{r3, r4, r5, pc}
 802c262:	bf00      	nop
 802c264:	2000ce90 	.word	0x2000ce90

0802c268 <_isatty_r>:
 802c268:	b538      	push	{r3, r4, r5, lr}
 802c26a:	4c06      	ldr	r4, [pc, #24]	; (802c284 <_isatty_r+0x1c>)
 802c26c:	2300      	movs	r3, #0
 802c26e:	4605      	mov	r5, r0
 802c270:	4608      	mov	r0, r1
 802c272:	6023      	str	r3, [r4, #0]
 802c274:	f7d7 f9f9 	bl	800366a <_isatty>
 802c278:	1c43      	adds	r3, r0, #1
 802c27a:	d102      	bne.n	802c282 <_isatty_r+0x1a>
 802c27c:	6823      	ldr	r3, [r4, #0]
 802c27e:	b103      	cbz	r3, 802c282 <_isatty_r+0x1a>
 802c280:	602b      	str	r3, [r5, #0]
 802c282:	bd38      	pop	{r3, r4, r5, pc}
 802c284:	2000ce90 	.word	0x2000ce90

0802c288 <_lseek_r>:
 802c288:	b538      	push	{r3, r4, r5, lr}
 802c28a:	4c07      	ldr	r4, [pc, #28]	; (802c2a8 <_lseek_r+0x20>)
 802c28c:	4605      	mov	r5, r0
 802c28e:	4608      	mov	r0, r1
 802c290:	4611      	mov	r1, r2
 802c292:	2200      	movs	r2, #0
 802c294:	6022      	str	r2, [r4, #0]
 802c296:	461a      	mov	r2, r3
 802c298:	f7d7 f9f2 	bl	8003680 <_lseek>
 802c29c:	1c43      	adds	r3, r0, #1
 802c29e:	d102      	bne.n	802c2a6 <_lseek_r+0x1e>
 802c2a0:	6823      	ldr	r3, [r4, #0]
 802c2a2:	b103      	cbz	r3, 802c2a6 <_lseek_r+0x1e>
 802c2a4:	602b      	str	r3, [r5, #0]
 802c2a6:	bd38      	pop	{r3, r4, r5, pc}
 802c2a8:	2000ce90 	.word	0x2000ce90

0802c2ac <_read_r>:
 802c2ac:	b538      	push	{r3, r4, r5, lr}
 802c2ae:	4c07      	ldr	r4, [pc, #28]	; (802c2cc <_read_r+0x20>)
 802c2b0:	4605      	mov	r5, r0
 802c2b2:	4608      	mov	r0, r1
 802c2b4:	4611      	mov	r1, r2
 802c2b6:	2200      	movs	r2, #0
 802c2b8:	6022      	str	r2, [r4, #0]
 802c2ba:	461a      	mov	r2, r3
 802c2bc:	f7d7 f980 	bl	80035c0 <_read>
 802c2c0:	1c43      	adds	r3, r0, #1
 802c2c2:	d102      	bne.n	802c2ca <_read_r+0x1e>
 802c2c4:	6823      	ldr	r3, [r4, #0]
 802c2c6:	b103      	cbz	r3, 802c2ca <_read_r+0x1e>
 802c2c8:	602b      	str	r3, [r5, #0]
 802c2ca:	bd38      	pop	{r3, r4, r5, pc}
 802c2cc:	2000ce90 	.word	0x2000ce90

0802c2d0 <_init>:
 802c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c2d2:	bf00      	nop
 802c2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c2d6:	bc08      	pop	{r3}
 802c2d8:	469e      	mov	lr, r3
 802c2da:	4770      	bx	lr

0802c2dc <_fini>:
 802c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c2de:	bf00      	nop
 802c2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c2e2:	bc08      	pop	{r3}
 802c2e4:	469e      	mov	lr, r3
 802c2e6:	4770      	bx	lr
