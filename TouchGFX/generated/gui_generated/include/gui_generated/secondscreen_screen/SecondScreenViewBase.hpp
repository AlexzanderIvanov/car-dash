/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SECONDSCREENVIEWBASE_HPP
#define SECONDSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/mixins/ClickListener.hpp>

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void nextError()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void clearErrors()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void moveToMainScreen()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void tpmsIndexChanges(int value)
    {
        // Override and implement this function in SecondScreen
    }

    virtual void frSetIndex()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void rrSetIndex()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void rlSetIndex()
    {
        // Override and implement this function in SecondScreen
    }

    virtual void flSetIndex()
    {
        // Override and implement this function in SecondScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box backgroundBox;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > ButtonGoToMainScreen;
    touchgfx::Button nextErrorButton;
    touchgfx::Button clearErrorsBtn;
    touchgfx::TextAreaWithOneWildcard CheckEngCodeValue;
    touchgfx::TextAreaWithOneWildcard EngProtCodeValue;
    touchgfx::ClickListener< touchgfx::Slider > TpmsIndex;
    touchgfx::ClickListener< touchgfx::ButtonWithLabel > FrIndex;
    touchgfx::ClickListener< touchgfx::ButtonWithLabel > RrIndex;
    touchgfx::ClickListener< touchgfx::ButtonWithLabel > RlIndex;
    touchgfx::ClickListener< touchgfx::ButtonWithLabel > FlIndex;
    touchgfx::TextAreaWithOneWildcard FrIndexValue;
    touchgfx::TextAreaWithOneWildcard RrIndexValue;
    touchgfx::TextAreaWithOneWildcard RlIndexValue;
    touchgfx::TextAreaWithOneWildcard FlIndexValue;
    touchgfx::TextAreaWithOneWildcard SliderIndexvalue;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CHECKENGCODEVALUE_SIZE = 35;
    touchgfx::Unicode::UnicodeChar CheckEngCodeValueBuffer[CHECKENGCODEVALUE_SIZE];
    static const uint16_t ENGPROTCODEVALUE_SIZE = 35;
    touchgfx::Unicode::UnicodeChar EngProtCodeValueBuffer[ENGPROTCODEVALUE_SIZE];
    static const uint16_t FRINDEXVALUE_SIZE = 2;
    touchgfx::Unicode::UnicodeChar FrIndexValueBuffer[FRINDEXVALUE_SIZE];
    static const uint16_t RRINDEXVALUE_SIZE = 2;
    touchgfx::Unicode::UnicodeChar RrIndexValueBuffer[RRINDEXVALUE_SIZE];
    static const uint16_t RLINDEXVALUE_SIZE = 2;
    touchgfx::Unicode::UnicodeChar RlIndexValueBuffer[RLINDEXVALUE_SIZE];
    static const uint16_t FLINDEXVALUE_SIZE = 2;
    touchgfx::Unicode::UnicodeChar FlIndexValueBuffer[FLINDEXVALUE_SIZE];
    static const uint16_t SLIDERINDEXVALUE_SIZE = 2;
    touchgfx::Unicode::UnicodeChar SliderIndexvalueBuffer[SLIDERINDEXVALUE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SecondScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<SecondScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<SecondScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // SECONDSCREENVIEWBASE_HPP
